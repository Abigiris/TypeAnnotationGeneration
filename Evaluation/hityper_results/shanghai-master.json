{
    "shanghai-master/setup.py": {},
    "shanghai-master/shanghai/channel.py": {
        "Channel.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [],
                "name": [],
                "nw_join_list": []
            }
        },
        "Channel.members": {
            "name": "members",
            "location": 73,
            "return": [
                "set[Member]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._manage_subtasks": {
            "name": "_manage_subtasks",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_coroutines": []
            }
        },
        "Channel.load_plugins": {
            "name": "load_plugins",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/shanghai/config.py": {
        "Server.with_optional_port": {
            "name": "with_optional_port",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "host": [],
                "port": [],
                "ssl": []
            }
        },
        "Server.from_string": {
            "name": "from_string",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "Server.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "Configuration.get": {
            "name": "get",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "default": []
            }
        },
        "Configuration.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Configuration.__contains__": {
            "name": "__contains__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FallbackConfiguration.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "FallbackConfiguration.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FallbackConfiguration.__contains__": {
            "name": "__contains__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FallbackConfiguration.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkConfiguration.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "mapping": []
            }
        },
        "NetworkConfiguration._fix_channels": {
            "name": "_fix_channels",
            "location": 152,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "NetworkConfiguration._parse_servers": {
            "name": "_parse_servers",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "NetworkConfiguration._require_keys": {
            "name": "_require_keys",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "required_keys": []
            }
        },
        "NetworkConfiguration.__repr__": {
            "name": "__repr__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShanghaiConfiguration.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "ShanghaiConfiguration.from_filename": {
            "name": "from_filename",
            "location": 199,
            "return": [],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "ShanghaiConfiguration._parse_networks": {
            "name": "_parse_networks",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "shanghai-master/shanghai/connection.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [],
                "queue": [],
                "loop": [],
                "logger": [
                    "None"
                ]
            }
        },
        "Connection.writeline": {
            "name": "writeline",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/shanghai/event.py": {
        "build_event": {
            "name": "build_event",
            "location": 67,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "event": {
            "name": "event",
            "location": 176,
            "return": [],
            "arguments": {
                "name_or_func": [],
                "priority": [],
                "enable": [],
                "_prefix": []
            }
        },
        "Priority.lookup": {
            "name": "lookup",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "priority": []
            }
        },
        "_PrioritizedSetList.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PrioritizedSetList.add": {
            "name": "add",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "priority": [],
                "obj": []
            }
        },
        "_PrioritizedSetList.remove": {
            "name": "remove",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_PrioritizedSetList.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PrioritizedSetList.__contains__": {
            "name": "__contains__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_PrioritizedSetList.__bool__": {
            "name": "__bool__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandlerInfo.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "handler": [],
                "priority": [],
                "enable": [],
                "_prefix": []
            }
        },
        "HandlerInfo.wrap": {
            "name": "wrap",
            "location": 162,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "HandlerInfo.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandlerInstance.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "info": [],
                "enabled": []
            }
        },
        "HandlerInstance.from_handler": {
            "name": "from_handler",
            "location": 224,
            "return": [],
            "arguments": {
                "cls": [],
                "handler": []
            }
        },
        "HandlerInstance.__hash__": {
            "name": "__hash__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultSet.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultSet.extend": {
            "name": "extend",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ResultSet.__iadd__": {
            "name": "__iadd__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EventDispatcher.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "EventDispatcher.register": {
            "name": "register",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "handler_inst": []
            }
        },
        "EventDispatcher.register_plugin": {
            "name": "register_plugin",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": []
            }
        },
        "EventDispatcher.handle_results": {
            "name": "handle_results",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "priority": [],
                "handlers": [],
                "results": []
            }
        }
    },
    "shanghai-master/shanghai/logging.py": {
        "_print_like": {
            "name": "_print_like",
            "location": 49,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "set_default_logger": {
            "name": "set_default_logger",
            "location": 156,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "get_default_logger": {
            "name": "get_default_logger",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "get_logger": {
            "name": "get_logger",
            "location": 170,
            "return": [],
            "arguments": {
                "context": [],
                "name": [],
                "config": [],
                "open_msg": []
            }
        },
        "_print_like._wrap": {
            "name": "_wrap",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Logger.ddebug": {
            "name": "ddebug",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileHandler.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "TerminalColor.for_level": {
            "name": "for_level",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "level": []
            }
        },
        "Formatter.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "name": [],
                "tz": [],
                "terminal": []
            }
        },
        "Formatter.format": {
            "name": "format",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "shanghai-master/shanghai/main.py": {
        "exception_handler": {
            "name": "exception_handler",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stdin_reader.reader_thread": {
            "name": "reader_thread",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "shanghai-master/shanghai/network.py": {
        "Network.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "loop": [
                    "None"
                ]
            }
        },
        "Network._reset": {
            "name": "_reset",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network._worker_done": {
            "name": "_worker_done",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "Network._manage_subtasks": {
            "name": "_manage_subtasks",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_coroutines": []
            }
        },
        "Network._close": {
            "name": "_close",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quitmsg": [
                    "None"
                ]
            }
        },
        "Network.send_byteline": {
            "name": "send_byteline",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "Network.request_close": {
            "name": "request_close",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quitmsg": [
                    "None"
                ]
            }
        },
        "Network.load_plugins": {
            "name": "load_plugins",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "Network.__repr__": {
            "name": "__repr__",
            "location": 195,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/shanghai/plugin_base.py": {
        "NetworkPlugin.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [],
                "logger": []
            }
        },
        "MessagePluginMixin.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagePluginMixin.send_line": {
            "name": "send_line",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "MessagePluginMixin.send_cmd": {
            "name": "send_cmd",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "MessagePluginMixin.send_msg": {
            "name": "send_msg",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "text": []
            }
        },
        "MessagePluginMixin.send_notice": {
            "name": "send_notice",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "text": []
            }
        },
        "CtcpPluginMixin.send_ctcp": {
            "name": "send_ctcp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "command": [],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "CtcpPluginMixin.send_ctcp_reply": {
            "name": "send_ctcp_reply",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "command": [],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "CtcpPluginMixin.send_action": {
            "name": "send_action",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "OptionsPluginMixin.nick_lower": {
            "name": "nick_lower",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionsPluginMixin.chan_lower": {
            "name": "chan_lower",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionsPluginMixin.nick_eq": {
            "name": "nick_eq",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionsPluginMixin.chan_eq": {
            "name": "chan_eq",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelPlugin.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ChannelMessageMixin.say": {
            "name": "say",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ChannelMessageMixin.me": {
            "name": "me",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "shanghai-master/shanghai/plugin_system.py": {
        "PluginModuleInfo.read_from_file": {
            "name": "read_from_file",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "identifier": []
            }
        },
        "PluginModule.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "identifier": [],
                "namespace": [],
                "info": []
            }
        },
        "PluginModule.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "is_core": []
            }
        },
        "PluginManager.__getattr__": {
            "name": "__getattr__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PluginManager.load_all_plugins": {
            "name": "load_all_plugins",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.load_plugin": {
            "name": "load_plugin",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "PluginManager._register_plugin": {
            "name": "_register_plugin",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": []
            }
        },
        "PluginManager._find_module_path": {
            "name": "_find_module_path",
            "location": 230,
            "return": [],
            "arguments": {
                "search_path": [],
                "identifier": []
            }
        },
        "PluginManager._load_plugin_as_module": {
            "name": "_load_plugin_as_module",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "identifier": []
            }
        },
        "PluginManager.discover_plugins": {
            "name": "discover_plugins",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_class": []
            }
        }
    },
    "shanghai-master/shanghai/util.py": {
        "repr_func": {
            "name": "repr_func",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "func": []
            }
        }
    },
    "shanghai-master/shanghai/__init__.py": {
        "Shanghai.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "loop": []
            }
        },
        "Shanghai.init_networks": {
            "name": "init_networks",
            "location": 46,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shanghai.stop_networks": {
            "name": "stop_networks",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/shanghai/__main__.py": {},
    "shanghai-master/shanghai/core_plugins/channel.py": {
        "ChannelStatePlugin.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelStatePlugin.on_disconnected": {
            "name": "on_disconnected",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelStatePlugin.on_post_disconnected": {
            "name": "on_post_disconnected",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelStatePlugin.on_names": {
            "name": "on_names",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ChannelStatePlugin.on_names_end": {
            "name": "on_names_end",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ChannelStatePlugin.on_part": {
            "name": "on_part",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ChannelStatePlugin.on_post_part": {
            "name": "on_post_part",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "lchannel": []
            }
        },
        "ChannelStatePlugin.on_post_kick": {
            "name": "on_post_kick",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "lchannel": []
            }
        },
        "ChannelStatePlugin._remove_nick_from_channel": {
            "name": "_remove_nick_from_channel",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "nick": [],
                "lchannel": []
            }
        },
        "ChannelEventsPlugin.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinOnConnectPlugin.on_msg_welcome": {
            "name": "on_msg_welcome",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "shanghai-master/shanghai/core_plugins/connection.py": {
        "ConnectionPlugin.on_connected": {
            "name": "on_connected",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPlugin.on_disconnected": {
            "name": "on_disconnected",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPlugin.on_close_request": {
            "name": "on_close_request",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quitmsg": []
            }
        }
    },
    "shanghai-master/shanghai/core_plugins/ctcp.py": {},
    "shanghai-master/shanghai/core_plugins/message.py": {
        "BuildMessagePlugin.on_raw_line": {
            "name": "on_raw_line",
            "location": 31,
            "return": [
                "ReturnValue"
            ],
            "arguments": {
                "self": [],
                "raw_line": []
            }
        }
    },
    "shanghai-master/shanghai/core_plugins/options.py": {
        "ParseOptionsPlugin.on_msg_isupport": {
            "name": "on_msg_isupport",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ParseOptionsPlugin.on_msg_isupport_end": {
            "name": "on_msg_isupport_end",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "shanghai-master/shanghai/core_plugins/ping.py": {
        "ms_time": {
            "name": "ms_time",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "PingPlugin.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PingPlugin.on_welcome": {
            "name": "on_welcome",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PingPlugin.pong": {
            "name": "pong",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "shanghai-master/shanghai/core_plugins/register.py": {
        "RegisterPlugin.on_connected": {
            "name": "on_connected",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterPlugin.on_nick_in_use": {
            "name": "on_nick_in_use",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "RegisterPlugin.on_welcome": {
            "name": "on_welcome",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "RegisterPlugin.on_nick_in_use.inc_suffix": {
            "name": "inc_suffix",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "m": []
            }
        }
    },
    "shanghai-master/shanghai/irc/message.py": {
        "Prefix.from_string": {
            "name": "from_string",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "prefix": []
            }
        },
        "Prefix.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.escape": {
            "name": "escape",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": []
            }
        },
        "Message.unescape": {
            "name": "unescape",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": []
            }
        },
        "Message.from_line": {
            "name": "from_line",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "line": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CtcpMessage.from_message": {
            "name": "from_message",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "msg": []
            }
        },
        "TextMessage.target": {
            "name": "target",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextMessage.line": {
            "name": "line",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextMessage.words": {
            "name": "words",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextMessage.sender": {
            "name": "sender",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextMessage.from_message": {
            "name": "from_message",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": [],
                "message": []
            }
        },
        "ChannelMessage.__repr__": {
            "name": "__repr__",
            "location": 192,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateMessage.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/shanghai/irc/options.py": {
        "_generate_case_table": {
            "name": "_generate_case_table",
            "location": 30,
            "return": [
                "dict"
            ],
            "arguments": {
                "case_mapping": []
            }
        },
        "Options.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.__setitem__": {
            "name": "__setitem__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Options.__getitem__": {
            "name": "__getitem__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Options.__delitem__": {
            "name": "__delitem__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Options.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Options.__len__": {
            "name": "__len__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.extend_from_message": {
            "name": "extend_from_message",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Options._parse_prefix": {
            "name": "_parse_prefix",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Options.split_prefixes": {
            "name": "split_prefixes",
            "location": 120,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "prefixed_nick": []
            }
        },
        "Options.prefixes_to_modes": {
            "name": "prefixes_to_modes",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "prefixes": []
            }
        },
        "Options.modes_to_prefixes": {
            "name": "modes_to_prefixes",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "modes": []
            }
        },
        "Options.nick_lower": {
            "name": "nick_lower",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "nick": []
            }
        },
        "Options.chan_lower": {
            "name": "chan_lower",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "chan": []
            }
        },
        "Options.nick_eq": {
            "name": "nick_eq",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nick1": [],
                "nick2": []
            }
        },
        "Options.chan_eq": {
            "name": "chan_eq",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "chan1": [],
                "chan2": []
            }
        }
    },
    "shanghai-master/shanghai/irc/server_reply.py": {},
    "shanghai-master/shanghai/irc/__init__.py": {},
    "shanghai-master/shanghai/plugins/ctcp.py": {},
    "shanghai-master/shanghai/plugins/test.py": {
        "_unhighlight": {
            "name": "_unhighlight",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "nick": []
            }
        },
        "TestNetworkPlugin.on_private_message": {
            "name": "on_private_message",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "message": []
            }
        },
        "TestChannelPlugin.on_joined": {
            "name": "on_joined",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChannelPlugin.on_channel_message": {
            "name": "on_channel_message",
            "location": 59,
            "return": [
                "ReturnValue"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "shanghai-master/tests/test_config.py": {
        "load": {
            "name": "load",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "load._load": {
            "name": "_load",
            "location": 34,
            "return": [],
            "arguments": {
                "yaml_string": []
            }
        },
        "TestServer.test_defaults": {
            "name": "test_defaults",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.test_from_string": {
            "name": "test_from_string",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.test_str": {
            "name": "test_str",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "expected": []
            }
        },
        "TestConfig.fake_yaml": {
            "name": "fake_yaml",
            "location": 80,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,dict[typing.Text, typing.Union[typing.Text,None]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.c": {
            "name": "c",
            "location": 91,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "self": [],
                "fake_yaml": []
            }
        },
        "TestConfig.test_init": {
            "name": "test_init",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get": {
            "name": "test_get",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "fake_yaml": []
            }
        },
        "TestConfig.test_getitem": {
            "name": "test_getitem",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "fake_yaml": []
            }
        },
        "TestConfig.test_contains": {
            "name": "test_contains",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "TestFallbackConfig.fake_yaml": {
            "name": "fake_yaml",
            "location": 163,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFallbackConfig.fake_fallback_yaml": {
            "name": "fake_fallback_yaml",
            "location": 170,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[typing.Text, typing.Union[typing.Text,None]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFallbackConfig.fb_c": {
            "name": "fb_c",
            "location": 180,
            "return": [
                "FallbackConfiguration"
            ],
            "arguments": {
                "self": [],
                "fake_yaml": [],
                "fake_fallback_yaml": []
            }
        },
        "TestFallbackConfig.test_get": {
            "name": "test_get",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fb_c": [],
                "fake_fallback_yaml": []
            }
        },
        "TestFallbackConfig.test_getitem": {
            "name": "test_getitem",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fb_c": [],
                "fake_fallback_yaml": []
            }
        },
        "TestFallbackConfig.test_contains": {
            "name": "test_contains",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fb_c": []
            }
        },
        "TestNetworkConfig.base_yaml": {
            "name": "base_yaml",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "load": []
            }
        },
        "TestNetworkConfig.test_init": {
            "name": "test_init",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_yaml": []
            }
        },
        "TestNetworkConfig.test_require_keys": {
            "name": "test_require_keys",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_yaml": []
            }
        },
        "TestNetworkConfig.test_parse_servers": {
            "name": "test_parse_servers",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_yaml": []
            }
        },
        "TestNetworkConfig.test_fix_channels": {
            "name": "test_fix_channels",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShanghaiConfig.sample_yaml": {
            "name": "sample_yaml",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "load": []
            }
        },
        "TestShanghaiConfig.test_init": {
            "name": "test_init",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_yaml": []
            }
        },
        "TestShanghaiConfig.test_parse_networks": {
            "name": "test_parse_networks",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_yaml": []
            }
        },
        "TestShanghaiConfig.test_fileloading": {
            "name": "test_fileloading",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_yaml": []
            }
        }
    },
    "shanghai-master/tests/test_event.py": {
        "loop": {
            "name": "loop",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "evt": {
            "name": "evt",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "sample_plugin": {
            "name": "sample_plugin",
            "location": 48,
            "return": [
                "TestPlugin"
            ],
            "arguments": {}
        },
        "TestPriority.test_type": {
            "name": "test_type",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPriority.test_order": {
            "name": "test_order",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPriority.test_lookup": {
            "name": "test_lookup",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvent.test_build_event": {
            "name": "test_build_event",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_bool": {
            "name": "test_bool",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_add": {
            "name": "test_add",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_add_already_added": {
            "name": "test_add_already_added",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_contains": {
            "name": "test_contains",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_iter": {
            "name": "test_iter",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrioritizedSetList.test_remove": {
            "name": "test_remove",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_no_param_usage": {
            "name": "test_no_param_usage",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_param_usage": {
            "name": "test_param_usage",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_async_handler": {
            "name": "test_async_handler",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_prefix": {
            "name": "test_prefix",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_core_event_deco": {
            "name": "test_core_event_deco",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_non_callable": {
            "name": "test_non_callable",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandlerInstance.test_from_handler": {
            "name": "test_from_handler",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandlerInstance.test_from_not_handler": {
            "name": "test_from_not_handler",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandlerInstance.test_hash": {
            "name": "test_hash",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultSet.test_extend": {
            "name": "test_extend",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [],
                "loop": []
            }
        },
        "TestResultSet.test_iadd": {
            "name": "test_iadd",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "TestResultSet.test_type": {
            "name": "test_type",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDispatcher.dispatcher": {
            "name": "dispatcher",
            "location": 329,
            "return": [
                "EventDispatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDispatcher.test_register": {
            "name": "test_register",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": []
            }
        },
        "TestEventDispatcher.test_register_plugin": {
            "name": "test_register_plugin",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": []
            }
        },
        "TestEventDispatcher.test_dispatch": {
            "name": "test_dispatch",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [],
                "loop": []
            }
        },
        "TestEventDispatcher.test_dispatch_priority": {
            "name": "test_dispatch_priority",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [],
                "loop": [],
                "evt": []
            }
        },
        "TestEventDispatcher.test_dispatch_disabled": {
            "name": "test_dispatch_disabled",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [],
                "loop": [],
                "evt": []
            }
        },
        "TestEventDispatcher.test_dispatch_exception": {
            "name": "test_dispatch_exception",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "evt": []
            }
        },
        "TestEventDispatcher.test_dispatch_unknown_return": {
            "name": "test_dispatch_unknown_return",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "evt": []
            }
        },
        "TestEventDispatcher.test_dispatch_eat": {
            "name": "test_dispatch_eat",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "evt": []
            }
        },
        "TestEventDispatcher.test_dispatch_nested_insert": {
            "name": "test_dispatch_nested_insert",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "evt": []
            }
        },
        "sample_plugin.TestPlugin.on_test": {
            "name": "on_test",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_no_param_usage.func_name": {
            "name": "func_name",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_no_param_usage.on_test": {
            "name": "on_test",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_param_usage.on_test": {
            "name": "on_test",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_prefix.on_test": {
            "name": "on_test",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventDecorator.test_core_event_deco.on_test": {
            "name": "on_test",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandlerInstance.test_from_handler.handler": {
            "name": "handler",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestHandlerInstance.test_from_not_handler.func": {
            "name": "func",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestHandlerInstance.test_hash.handler": {
            "name": "handler",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_priority.corofunc2": {
            "name": "corofunc2",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_exception.handler": {
            "name": "handler",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_eat.corofunc": {
            "name": "corofunc",
            "location": 462,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_nested_insert.corofunc1": {
            "name": "corofunc1",
            "location": 489,
            "return": [
                "ReturnValue"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_nested_insert.corofunc2": {
            "name": "corofunc2",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_dispatch_nested_insert.corofunc3": {
            "name": "corofunc3",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEventDispatcher.test_register_plugin.AClass.handler": {
            "name": "handler",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/tests/test_license.py": {
        "TestLicense.test_pyfiles": {
            "name": "test_pyfiles",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLicense._clean_license": {
            "name": "_clean_license",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "docstring": []
            }
        }
    },
    "shanghai-master/tests/test_message.py": {
        "TestPrefix.test_from_string_and_str": {
            "name": "test_from_string_and_str",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [],
                "expected": []
            }
        },
        "TestMessage.test_privmsg": {
            "name": "test_privmsg",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_prefix": {
            "name": "test_prefix",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_numeric": {
            "name": "test_numeric",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_tags": {
            "name": "test_tags",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_edge_cases": {
            "name": "test_edge_cases",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_escape": {
            "name": "test_escape",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_repr": {
            "name": "test_repr",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCtcpMessage.test_message": {
            "name": "test_message",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCtcpMessage.test_not_message": {
            "name": "test_not_message",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextMessage.test_attrs": {
            "name": "test_attrs",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shanghai-master/tests/__init__.py": {}
}
{
    "sheet_music_database-master/setup.py": {},
    "sheet_music_database-master/backend/app/conftest.py": {
        "user1_password": {
            "name": "user1_password",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "user2_password": {
            "name": "user2_password",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "user1": {
            "name": "user1",
            "location": 21,
            "return": [],
            "arguments": {
                "user1_password": []
            }
        },
        "user2": {
            "name": "user2",
            "location": 28,
            "return": [],
            "arguments": {
                "user2_password": []
            }
        },
        "tag1": {
            "name": "tag1",
            "location": 35,
            "return": [],
            "arguments": {
                "user1": []
            }
        },
        "tag2": {
            "name": "tag2",
            "location": 40,
            "return": [],
            "arguments": {
                "user1": []
            }
        },
        "sheet1": {
            "name": "sheet1",
            "location": 45,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "user1": []
            }
        },
        "sheet2": {
            "name": "sheet2",
            "location": 59,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "user1": []
            }
        },
        "user2_sheet": {
            "name": "user2_sheet",
            "location": 73,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "user2": []
            }
        },
        "instrument1": {
            "name": "instrument1",
            "location": 87,
            "return": [],
            "arguments": {
                "user1": []
            }
        },
        "instrument2": {
            "name": "instrument2",
            "location": 92,
            "return": [],
            "arguments": {
                "user1": []
            }
        },
        "user2_instrument": {
            "name": "user2_instrument",
            "location": 97,
            "return": [],
            "arguments": {
                "user2": []
            }
        },
        "status_ok": {
            "name": "status_ok",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "status_created": {
            "name": "status_created",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "status_bad_request": {
            "name": "status_bad_request",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "status_ok._ok": {
            "name": "_ok",
            "location": 103,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "status_created._created": {
            "name": "_created",
            "location": 111,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "status_bad_request._bad": {
            "name": "_bad",
            "location": 119,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "sheet_music_database-master/backend/app/manage.py": {},
    "sheet_music_database-master/backend/app/accounts/apps.py": {},
    "sheet_music_database-master/backend/app/accounts/serializers.py": {},
    "sheet_music_database-master/backend/app/accounts/urls.py": {},
    "sheet_music_database-master/backend/app/accounts/utils.py": {
        "create_knox_token": {
            "name": "create_knox_token",
            "location": 4,
            "return": [
                "list[]",
                "typing.Type"
            ],
            "arguments": {
                "_token_model": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "user": [
                    "list[int]",
                    "int",
                    "list[fonduer.candidates.models.Candidate]"
                ],
                "_serializer": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/accounts/views.py": {
        "KnoxLoginView.get_response": {
            "name": "get_response",
            "location": 14,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnoxRegisterView.get_response_data": {
            "name": "get_response_data",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "KnoxRegisterView.perform_create": {
            "name": "perform_create",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/accounts/__init__.py": {},
    "sheet_music_database-master/backend/app/accounts/migrations/__init__.py": {},
    "sheet_music_database-master/backend/app/accounts/tests/test_knox_views.py": {
        "login_url": {
            "name": "login_url",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "logout_url": {
            "name": "logout_url",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "registration_url": {
            "name": "registration_url",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "logoutall_url": {
            "name": "logoutall_url",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 31,
            "return": [
                "APIClient"
            ],
            "arguments": {}
        },
        "login_payload": {
            "name": "login_payload",
            "location": 36,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]"
            ],
            "arguments": {
                "user1": [
                    "str",
                    "int"
                ],
                "user1_password": [
                    "str",
                    "int"
                ]
            }
        },
        "test_login_returns_token": {
            "name": "test_login_returns_token",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "login_url": [
                    "str"
                ],
                "login_payload": [
                    "str"
                ],
                "user1": [
                    "str"
                ]
            }
        },
        "test_login_returns_different_token": {
            "name": "test_login_returns_different_token",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "login_payload": [
                    "dict[str, str]"
                ],
                "login_url": [
                    "dict[str, str]"
                ],
                "client": []
            }
        },
        "test_logout_deletes_token": {
            "name": "test_logout_deletes_token",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "login_url": [
                    "str"
                ],
                "login_payload": [
                    "str"
                ],
                "logout_url": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/accounts/tests/__init__.py": {},
    "sheet_music_database-master/backend/app/app/api_v1_urls.py": {},
    "sheet_music_database-master/backend/app/app/settings.py": {},
    "sheet_music_database-master/backend/app/app/urls.py": {},
    "sheet_music_database-master/backend/app/app/wsgi.py": {},
    "sheet_music_database-master/backend/app/app/__init__.py": {},
    "sheet_music_database-master/backend/app/core/admin.py": {},
    "sheet_music_database-master/backend/app/core/apps.py": {},
    "sheet_music_database-master/backend/app/core/models.py": {
        "sheet_file_path": {
            "name": "sheet_file_path",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "_instance": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "_generate_short_name": {
            "name": "_generate_short_name",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Composer.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.save": {
            "name": "save",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sheet.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Piece.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instrument.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sheet_music_database-master/backend/app/core/__init__.py": {},
    "sheet_music_database-master/backend/app/core/management/__init__.py": {},
    "sheet_music_database-master/backend/app/core/management/commands/django_js_url_generator.py": {
        "write_javascript_head": {
            "name": "write_javascript_head",
            "location": 6,
            "return": [],
            "arguments": {
                "js_path": [],
                "hostname": []
            }
        },
        "make_html_method": {
            "name": "make_html_method",
            "location": 37,
            "return": [],
            "arguments": {
                "name": [],
                "payload": []
            }
        },
        "write_html_methods": {
            "name": "write_html_methods",
            "location": 50,
            "return": [],
            "arguments": {
                "js_path": []
            }
        },
        "write_javascript_foot": {
            "name": "write_javascript_foot",
            "location": 113,
            "return": [],
            "arguments": {
                "js_path": [],
                "urls": []
            }
        },
        "get_unique_endpoints": {
            "name": "get_unique_endpoints",
            "location": 173,
            "return": [],
            "arguments": {
                "urls": []
            }
        },
        "make_js_api": {
            "name": "make_js_api",
            "location": 265,
            "return": [],
            "arguments": {
                "js_path": [],
                "urls": [],
                "hostname": []
            }
        },
        "MethodList.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodList.__contains__": {
            "name": "__contains__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MethodList.__iter__": {
            "name": "__iter__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodList.__getitem__": {
            "name": "__getitem__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "MethodList.index": {
            "name": "index",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MethodList.replace": {
            "name": "replace",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "MethodList.append": {
            "name": "append",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "MethodList.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodFactory.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "urls": []
            }
        },
        "MethodFactory.add_methods_from_endpoints": {
            "name": "add_methods_from_endpoints",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodFactory.add_parent_methods": {
            "name": "add_parent_methods",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodFactory._create_parents": {
            "name": "_create_parents",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "MethodFactory.create_method": {
            "name": "create_method",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "arg": []
            }
        },
        "MethodFactory._create_method_no_arg": {
            "name": "_create_method_no_arg",
            "location": 223,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "MethodFactory._create_method_with_arg": {
            "name": "_create_method_with_arg",
            "location": 236,
            "return": [],
            "arguments": {
                "item": [],
                "arg": []
            }
        },
        "MethodFactory.add_methods_to_file": {
            "name": "add_methods_to_file",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "js_path": []
            }
        },
        "MethodFactory.add_method_to_file": {
            "name": "add_method_to_file",
            "location": 259,
            "return": [],
            "arguments": {
                "method": [],
                "js_path": []
            }
        }
    },
    "sheet_music_database-master/backend/app/core/management/commands/make_js_interface.py": {
        "get_relevant_urls": {
            "name": "get_relevant_urls",
            "location": 11,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheet_music_database-master/backend/app/core/management/commands/wait_for_db.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheet_music_database-master/backend/app/core/management/commands/__init__.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0001_initial.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0002_auto_20190116_1822.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0003_auto_20190119_0955.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0004_auto_20190120_0308.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0005_instrument.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0006_piece_instruments.py": {},
    "sheet_music_database-master/backend/app/core/migrations/0007_auto_20190515_1837.py": {},
    "sheet_music_database-master/backend/app/core/migrations/__init__.py": {},
    "sheet_music_database-master/backend/app/core/tests/test_commands.py": {
        "test_make_js_api_interface": {
            "name": "test_make_js_api_interface",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_wait_for_db_ready": {
            "name": "test_wait_for_db_ready",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "gi": []
            }
        },
        "test_wait_for_db": {
            "name": "test_wait_for_db",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "_time_sleep": [
                    "list[list[typing.Any]]",
                    "list[str]",
                    "set[str]",
                    "bool",
                    "list[bool]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "gi": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/core/tests/test_models.py": {
        "composer1": {
            "name": "composer1",
            "location": 11,
            "return": [],
            "arguments": {
                "user1": [
                    "str",
                    "dict[, ]",
                    "dict[datetime.date, dict[str, typing.Any]]"
                ]
            }
        },
        "composer_no_dates": {
            "name": "composer_no_dates",
            "location": 22,
            "return": [],
            "arguments": {
                "user1": [
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "composer_still_alive": {
            "name": "composer_still_alive",
            "location": 27,
            "return": [],
            "arguments": {
                "user1": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "piece1": {
            "name": "piece1",
            "location": 39,
            "return": [
                "list[]",
                "int",
                "str"
            ],
            "arguments": {
                "composer1": [
                    "str",
                    "None"
                ],
                "user1": [
                    "typing.Callable[list[], None]",
                    "list[str]"
                ]
            }
        },
        "TestComposer.test_composer_str": {
            "name": "test_composer_str",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer1": [
                    "bool"
                ]
            }
        },
        "TestComposer.test_composer_str_without_dates": {
            "name": "test_composer_str_without_dates",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer_no_dates": [
                    "str",
                    "list[]"
                ]
            }
        },
        "TestComposer.test_composer_str_still_alive": {
            "name": "test_composer_str_still_alive",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer_still_alive": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestComposer.test_composer_generate_short_name": {
            "name": "test_composer_generate_short_name",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer1": [
                    "int"
                ]
            }
        },
        "TestComposer.test_custom_short_name_has_priority": {
            "name": "test_custom_short_name_has_priority",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer_still_alive": []
            }
        },
        "TestComposer.test_short_name_has_stripped_whitespace": {
            "name": "test_short_name_has_stripped_whitespace",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user1": []
            }
        },
        "TestSheet.test_sheet_str": {
            "name": "test_sheet_str",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sheet1": []
            }
        },
        "TestSheet.test_file_added_correctly": {
            "name": "test_file_added_correctly",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sheet1": [
                    "str"
                ]
            }
        },
        "TestSheet.test_sheet_path": {
            "name": "test_sheet_path",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestPiece.test_piece_str": {
            "name": "test_piece_str",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "piece1": []
            }
        },
        "TestTag.test_tag_str": {
            "name": "test_tag_str",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag1": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestInstrument.test_instrument_str": {
            "name": "test_instrument_str",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instrument1": [
                    "int"
                ],
                "instrument2": [
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestSheet.test_sheet_path.test_name": {
            "name": "test_name",
            "location": 92,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "sheet_music_database-master/backend/app/core/tests/__init__.py": {},
    "sheet_music_database-master/backend/app/music/apps.py": {},
    "sheet_music_database-master/backend/app/music/serializers.py": {
        "InstrumentSerializer.validate_name": {
            "name": "validate_name",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/urls.py": {},
    "sheet_music_database-master/backend/app/music/views.py": {
        "_params_to_ints": {
            "name": "_params_to_ints",
            "location": 77,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "querystring": [
                    "str"
                ]
            }
        },
        "_filter_on_attr": {
            "name": "_filter_on_attr",
            "location": 82,
            "return": [],
            "arguments": {
                "queryset": [],
                "attr_params": [
                    "str"
                ],
                "attr_name": [
                    "str"
                ]
            }
        },
        "BasicMusicAttrViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicMusicAttrViewSet.perform_create": {
            "name": "perform_create",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SheetViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SheetViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SheetViewSet.upload_file": {
            "name": "upload_file",
            "location": 66,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]"
                ],
                "pk": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "PieceViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PieceViewSet.perform_create": {
            "name": "perform_create",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/__init__.py": {},
    "sheet_music_database-master/backend/app/music/migrations/__init__.py": {},
    "sheet_music_database-master/backend/app/music/tests/conftest.py": {
        "public_client": {
            "name": "public_client",
            "location": 14,
            "return": [
                "APIClient"
            ],
            "arguments": {}
        },
        "authenticated_client": {
            "name": "authenticated_client",
            "location": 19,
            "return": [
                "APIClient"
            ],
            "arguments": {
                "user1": [
                    "bool"
                ]
            }
        },
        "composer1": {
            "name": "composer1",
            "location": 27,
            "return": [],
            "arguments": {
                "user1": [
                    "str",
                    "None"
                ]
            }
        },
        "composer2": {
            "name": "composer2",
            "location": 39,
            "return": [],
            "arguments": {
                "user1": [
                    "str",
                    "dict[, ]",
                    "dict[datetime.date, dict[str, typing.Any]]"
                ]
            }
        },
        "user2_composer": {
            "name": "user2_composer",
            "location": 50,
            "return": [],
            "arguments": {
                "user2": []
            }
        },
        "test_login_required": {
            "name": "test_login_required",
            "location": 62,
            "return": [],
            "arguments": {
                "public_client": [
                    "bool"
                ]
            }
        },
        "get_list_and_serializer": {
            "name": "get_list_and_serializer",
            "location": 73,
            "return": [],
            "arguments": {
                "authenticated_client": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "all_data_in_res": {
            "name": "all_data_in_res",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "no_extra_data_in_res": {
            "name": "no_extra_data_in_res",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_login_required._test": {
            "name": "_test",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": []
            }
        },
        "get_list_and_serializer._get": {
            "name": "_get",
            "location": 76,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "url": [],
                "model_class": [],
                "serializer_class": []
            }
        },
        "all_data_in_res._has_data": {
            "name": "_has_data",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": [],
                "serializer": []
            }
        },
        "no_extra_data_in_res._no_extra": {
            "name": "_no_extra",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": [],
                "serializer": []
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/test_composer_api.py": {
        "composer_url": {
            "name": "composer_url",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "TestPublicComposerAPI.test_login_required": {
            "name": "test_login_required",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_login_required": [
                    "str"
                ],
                "composer_url": [
                    "str"
                ]
            }
        },
        "TestPrivateComposerAPI.test_retrieve_composer_list": {
            "name": "test_retrieve_composer_list",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_list_and_serializer": [
                    "str",
                    "bool"
                ],
                "composer_url": [
                    "str",
                    "bool"
                ],
                "composer1": [
                    "bool",
                    "str"
                ],
                "composer2": [
                    "bool",
                    "str"
                ],
                "status_ok": [
                    "bool",
                    "str"
                ],
                "no_extra_data_in_res": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "float"
                ],
                "all_data_in_res": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "TestPrivateComposerAPI.test_composers_limited_to_user": {
            "name": "test_composers_limited_to_user",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "composer_url": [
                    "str"
                ],
                "composer1": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "bytes"
                ],
                "user2_composer": []
            }
        },
        "TestPrivateComposerAPI.test_create_composer_successful": {
            "name": "test_create_composer_successful",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "composer_url": [],
                "user1": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivateComposerAPI.test_create_composer_with_shortname": {
            "name": "test_create_composer_with_shortname",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "composer_url": [],
                "user1": [
                    "str"
                ]
            }
        },
        "TestPrivateComposerAPI.test_create_composer_invalid": {
            "name": "test_create_composer_invalid",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "composer_url": [
                    "list[str]"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/test_instrument_api.py": {
        "instrument_url": {
            "name": "instrument_url",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "TestPublicInstrumentAPI.test_login_required": {
            "name": "test_login_required",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instrument_url": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "test_login_required": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "TestPrivateInstrumentAPI.test_retrieve_instrument_list": {
            "name": "test_retrieve_instrument_list",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_list_and_serializer": [
                    "str",
                    "bool"
                ],
                "instrument_url": [
                    "str",
                    "bool"
                ],
                "instrument1": [
                    "bool",
                    "str"
                ],
                "instrument2": [
                    "bool",
                    "str"
                ],
                "status_ok": [
                    "float",
                    "str",
                    "list[str]"
                ],
                "no_extra_data_in_res": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "float"
                ],
                "all_data_in_res": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "TestPrivateInstrumentAPI.test_instruments_limited_to_user": {
            "name": "test_instruments_limited_to_user",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "instrument_url": [
                    "str",
                    "bool"
                ],
                "instrument1": [
                    "str",
                    "int",
                    "None",
                    "dict[str, str]"
                ],
                "user2_instrument": [],
                "status_ok": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TestPrivateInstrumentAPI.test_create_instrument_successful": {
            "name": "test_create_instrument_successful",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "instrument_url": [],
                "user1": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivateInstrumentAPI.test_instrument_name_normalized": {
            "name": "test_instrument_name_normalized",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "instrument_url": [
                    "str"
                ],
                "user1": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestPrivateInstrumentAPI.test_create_instrument_invalid": {
            "name": "test_create_instrument_invalid",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "instrument_url": [
                    "list[str]"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/test_piece_api.py": {
        "piece_url": {
            "name": "piece_url",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "piece2": {
            "name": "piece2",
            "location": 16,
            "return": [
                "list[]",
                "int",
                "str"
            ],
            "arguments": {
                "composer1": [
                    "str",
                    "None"
                ],
                "user1": [
                    "typing.Callable[list[], None]",
                    "list[str]"
                ]
            }
        },
        "piece3": {
            "name": "piece3",
            "location": 23,
            "return": [
                "list[]",
                "int",
                "str"
            ],
            "arguments": {
                "composer2": [
                    "str",
                    "None"
                ],
                "user1": [
                    "typing.Callable[list[], None]",
                    "list[str]"
                ]
            }
        },
        "piece4": {
            "name": "piece4",
            "location": 32,
            "return": [],
            "arguments": {
                "user1": [
                    "bytes",
                    "None",
                    "typing.Callable[[], str]",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "user2_piece": {
            "name": "user2_piece",
            "location": 37,
            "return": [
                "list[]",
                "int",
                "str"
            ],
            "arguments": {
                "composer2": [],
                "user2": [
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "piece_tag1_composer1": {
            "name": "piece_tag1_composer1",
            "location": 46,
            "return": [],
            "arguments": {
                "tag1": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "composer1": [
                    "int",
                    "list[str]",
                    "list[dict[, ]]",
                    "None",
                    "set[str]",
                    "list[\"DeliveryItem\"]"
                ],
                "instrument1": [
                    "int",
                    "list[str]",
                    "list[dict[, ]]",
                    "None",
                    "set[str]",
                    "list[\"DeliveryItem\"]"
                ],
                "user1": [
                    "bool",
                    "str",
                    "set[str]"
                ]
            }
        },
        "piece_tag2_composer2": {
            "name": "piece_tag2_composer2",
            "location": 55,
            "return": [],
            "arguments": {
                "tag2": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "composer2": [
                    "int",
                    "list[str]",
                    "list[dict[, ]]",
                    "None",
                    "set[str]",
                    "list[\"DeliveryItem\"]"
                ],
                "instrument2": [
                    "int",
                    "list[str]",
                    "list[dict[, ]]",
                    "None",
                    "set[str]",
                    "list[\"DeliveryItem\"]"
                ],
                "user1": [
                    "bool",
                    "str",
                    "set[str]"
                ]
            }
        },
        "piece2_serializer": {
            "name": "piece2_serializer",
            "location": 64,
            "return": [
                "PieceSerializer"
            ],
            "arguments": {
                "piece2": [
                    "float",
                    "str",
                    "typing.Type",
                    "Exception",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Container"
                ]
            }
        },
        "piece3_serializer": {
            "name": "piece3_serializer",
            "location": 69,
            "return": [
                "PieceSerializer"
            ],
            "arguments": {
                "piece3": [
                    "float",
                    "str",
                    "typing.Type",
                    "Exception",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Container"
                ]
            }
        },
        "piece4_serializer": {
            "name": "piece4_serializer",
            "location": 74,
            "return": [
                "PieceSerializer"
            ],
            "arguments": {
                "piece4": [
                    "float",
                    "str",
                    "typing.Type",
                    "Exception",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Container"
                ]
            }
        },
        "piece_tag1_composer1_serializer": {
            "name": "piece_tag1_composer1_serializer",
            "location": 79,
            "return": [
                "PieceSerializer"
            ],
            "arguments": {
                "piece_tag1_composer1": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "piece_tag2_composer2_serializer": {
            "name": "piece_tag2_composer2_serializer",
            "location": 84,
            "return": [
                "PieceSerializer"
            ],
            "arguments": {
                "piece_tag2_composer2": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_piece_payload": {
            "name": "test_piece_payload",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_piece_payload._make_payload": {
            "name": "_make_payload",
            "location": 90,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestPublicPieceAPI.test_login_required": {
            "name": "test_login_required",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_login_required": [
                    "str"
                ],
                "piece_url": [
                    "str"
                ]
            }
        },
        "TestPrivatePieceAPI.test_retrieve_piece_list": {
            "name": "test_retrieve_piece_list",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "piece2": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Type",
                    "typing.Iterable[str]"
                ],
                "piece3": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Type",
                    "typing.Iterable[str]"
                ],
                "piece_url": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "get_list_and_serializer": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "status_ok": [
                    "typing.Callable[, ]",
                    "str",
                    "list[str]",
                    "list[]"
                ],
                "all_data_in_res": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "no_extra_data_in_res": [
                    "bool",
                    "list[str]",
                    "list[float]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_pieces_limited_to_user": {
            "name": "test_pieces_limited_to_user",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "piece2": [
                    "typing.Callable[, ]",
                    "bytes",
                    "bool",
                    "tuple[typing.Union[typing.Any,dict[str, typing.Any]]]"
                ],
                "user2_piece": [
                    "str"
                ],
                "piece_url": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "authenticated_client": [
                    "dict[, ]"
                ],
                "status_ok": [
                    "int",
                    "typing.Sequence[int]",
                    "list[str]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_successful": {
            "name": "test_create_piece_successful",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "str",
                    "dict[, ]"
                ],
                "user1": [
                    "str",
                    "None"
                ],
                "test_piece_payload": [
                    "str",
                    "bool"
                ],
                "status_created": [
                    "str"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_invalid": {
            "name": "test_create_piece_invalid",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [],
                "status_bad_request": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_with_composer": {
            "name": "test_create_piece_with_composer",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "str",
                    "bool"
                ],
                "composer1": [
                    "int",
                    "list[int]"
                ],
                "test_piece_payload": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Callable[, ]]"
                ],
                "status_created": [
                    "str",
                    "int",
                    "dict[str, typing.Union[typing.Any,typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_with_tags": {
            "name": "test_create_piece_with_tags",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "tag1": [
                    "str",
                    "dict[str, str]",
                    "dict[int, set[str]]"
                ],
                "tag2": [
                    "str",
                    "dict[str, str]",
                    "dict[int, set[str]]"
                ],
                "test_piece_payload": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ],
                "status_created": [
                    "str",
                    "dict[str, typing.Union[typing.Any,typing.Any]]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_with_sheets": {
            "name": "test_create_piece_with_sheets",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ],
                "sheet1": [
                    "str",
                    "int",
                    "None"
                ],
                "sheet2": [
                    "str",
                    "int",
                    "None"
                ],
                "test_piece_payload": [
                    "str",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "int"
                ],
                "status_created": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Iterable[str]]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_with_instruments": {
            "name": "test_create_piece_with_instruments",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ],
                "instrument1": [
                    "str",
                    "int",
                    "None"
                ],
                "instrument2": [
                    "str",
                    "int",
                    "None"
                ],
                "test_piece_payload": [
                    "str",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "int"
                ],
                "status_created": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Iterable[str]]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_create_piece_everything": {
            "name": "test_create_piece_everything",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "str",
                    "dict[, ]"
                ],
                "composer1": [
                    "dict[, ]",
                    "str"
                ],
                "tag1": [
                    "dict[, ]",
                    "str"
                ],
                "sheet1": [
                    "dict[, ]",
                    "str"
                ],
                "instrument1": [
                    "dict[, ]",
                    "str"
                ],
                "test_piece_payload": [
                    "dict[, ]",
                    "str"
                ],
                "status_created": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "int"
                ]
            }
        },
        "TestPrivatePieceAPI.test_filter_pieces_by_tag": {
            "name": "test_filter_pieces_by_tag",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [
                    "dict[str, bytes]"
                ],
                "piece_url": [
                    "str",
                    "dict[str, bytes]",
                    "None"
                ],
                "piece2_serializer": [
                    "str",
                    "list[list[typing.Any]]",
                    "bool"
                ],
                "piece_tag1_composer1_serializer": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "piece_tag2_composer2_serializer": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "tag1": [
                    "str",
                    "dict[str, bytes]",
                    "None"
                ],
                "tag2": [
                    "str",
                    "dict[str, bytes]",
                    "None"
                ]
            }
        },
        "TestPrivatePieceAPI.test_filter_pieces_by_instrument": {
            "name": "test_filter_pieces_by_instrument",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [
                    "dict[str, typing.Any]"
                ],
                "piece_url": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "piece2_serializer": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[list[typing.Any]]",
                    "str",
                    "list[]"
                ],
                "piece_tag1_composer1_serializer": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "piece_tag2_composer2_serializer": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "instrument1": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "instrument2": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_filter_pieces_by_composer": {
            "name": "test_filter_pieces_by_composer",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [
                    "dict[str, typing.Any]"
                ],
                "piece_url": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "piece4_serializer": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[list[typing.Any]]",
                    "str",
                    "list[]"
                ],
                "piece_tag1_composer1_serializer": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "piece_tag2_composer2_serializer": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "composer1": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "composer2": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivatePieceAPI.test_search_pieces_by_era": {
            "name": "test_search_pieces_by_era",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [
                    "dict[str, str]"
                ],
                "piece_url": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "piece3_serializer": [
                    "str",
                    "list[list[typing.Any]]",
                    "list[list[str]]",
                    "tuple[typing.Union[str,float]]"
                ],
                "piece_tag1_composer1_serializer": [
                    "dict[, ]",
                    "int",
                    "str",
                    "tuple[]",
                    "Exception",
                    "None"
                ],
                "piece_tag2_composer2_serializer": [
                    "str",
                    "bool",
                    "None"
                ],
                "composer1": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "composer2": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestPrivatePieceAPI.test_search_pieces_by_catalog": {
            "name": "test_search_pieces_by_catalog",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "piece_url": [
                    "str"
                ],
                "piece2": [
                    "str"
                ],
                "piece2_serializer": [
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "piece3": [
                    "str"
                ],
                "piece3_serializer": [
                    "str"
                ],
                "piece_tag1_composer1_serializer": [
                    "str",
                    "tuple[]"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/test_sheet_api.py": {
        "sheets_url": {
            "name": "sheets_url",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "sheet_upload_url": {
            "name": "sheet_upload_url",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "sheet_no_file": {
            "name": "sheet_no_file",
            "location": 27,
            "return": [],
            "arguments": {
                "user1": [
                    "str",
                    "int"
                ]
            }
        },
        "test_file": {
            "name": "test_file",
            "location": 34,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "sheet_upload_url._url": {
            "name": "_url",
            "location": 20,
            "return": [],
            "arguments": {
                "sheet_id": []
            }
        },
        "TestPublicSheetAPI.test_login_required": {
            "name": "test_login_required",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_login_required": [
                    "str"
                ],
                "sheets_url": [
                    "str"
                ]
            }
        },
        "TestPrivateSheetAPI.test_retrieve_sheet_list": {
            "name": "test_retrieve_sheet_list",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_list_and_serializer": [
                    "bool",
                    "str",
                    "None"
                ],
                "sheets_url": [
                    "bool",
                    "str",
                    "None"
                ],
                "sheet1": [
                    "int"
                ],
                "sheet2": [
                    "int"
                ]
            }
        },
        "TestPrivateSheetAPI.test_sheets_limited_to_user": {
            "name": "test_sheets_limited_to_user",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "sheets_url": [
                    "str",
                    "bool"
                ],
                "user1": [
                    "str"
                ],
                "sheet1": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ],
                "user2_sheet": [
                    "str"
                ]
            }
        },
        "TestPrivateSheetAPI.test_sheet_created_with_file_successful": {
            "name": "test_sheet_created_with_file_successful",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "sheets_url": [
                    "dict[, ]",
                    "str"
                ],
                "user1": [
                    "str"
                ],
                "test_file": []
            }
        },
        "TestPrivateSheetAPI.test_sheet_created_without_file_fails": {
            "name": "test_sheet_created_without_file_fails",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "sheets_url": [
                    "list[str]"
                ],
                "user1": [
                    "list[int]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrivateSheetAPI.test_create_sheet_invalid": {
            "name": "test_create_sheet_invalid",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "sheets_url": [
                    "list[str]"
                ]
            }
        },
        "TestPrivateSheetAPI.test_uploading_file_to_sheet": {
            "name": "test_uploading_file_to_sheet",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "sheet_upload_url": [
                    "str"
                ],
                "sheet_no_file": [],
                "tmp_path": [
                    "str",
                    "list[str]"
                ],
                "test_file": []
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/test_tags_api.py": {
        "tag_url": {
            "name": "tag_url",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "user2_tag": {
            "name": "user2_tag",
            "location": 17,
            "return": [],
            "arguments": {
                "user2": [
                    "bool",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPublicTagAPI.test_login_required": {
            "name": "test_login_required",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_url": [
                    "str",
                    "None",
                    "int"
                ],
                "test_login_required": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestPrivateTagAPI.test_retrieve_tag_list": {
            "name": "test_retrieve_tag_list",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_list_and_serializer": [
                    "str",
                    "bool",
                    "dict[bytes, bytes]",
                    "typing.Sequence[T]"
                ],
                "tag_url": [
                    "str",
                    "bool",
                    "dict[bytes, bytes]",
                    "typing.Sequence[T]"
                ],
                "tag1": [
                    "int",
                    "list[str]"
                ],
                "tag2": [
                    "int",
                    "list[str]"
                ],
                "all_data_in_res": [
                    "int",
                    "list[]",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "status_ok": [
                    "int",
                    "list[str]"
                ],
                "no_extra_data_in_res": [
                    "int",
                    "typing.Callable[, ]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "TestPrivateTagAPI.test_tags_limited_to_user": {
            "name": "test_tags_limited_to_user",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "tag_url": [
                    "str",
                    "bool"
                ],
                "tag1": [
                    "str",
                    "bool"
                ],
                "user2_tag": [
                    "str",
                    "int",
                    "typing.Iterable[int]",
                    "typing.Sequence[T]"
                ],
                "status_ok": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPrivateTagAPI.test_create_tag_successful": {
            "name": "test_create_tag_successful",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "tag_url": [
                    "str"
                ],
                "user1": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TestPrivateTagAPI.test_create_tag_invalid": {
            "name": "test_create_tag_invalid",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated_client": [],
                "tag_url": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/backend/app/music/tests/__init__.py": {},
    "sheet_music_database-master/cli/cli.py": {
        "cli": {
            "name": "cli",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CLI.list_commands": {
            "name": "list_commands",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "CLI.get_command": {
            "name": "get_command",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "tuple[]",
                    "float",
                    "None"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/__init__.py": {},
    "sheet_music_database-master/cli/commands/build_frontend.py": {
        "build_js_frontend": {
            "name": "build_js_frontend",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/build_requirements.py": {
        "build_py_requirements": {
            "name": "build_py_requirements",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_build.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_down.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_makemigrations.py": {
        "cli": {
            "name": "cli",
            "location": 8,
            "return": [],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/commands/cmd_manage.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [],
            "arguments": {
                "command": [
                    "str",
                    "None",
                    "int"
                ],
                "arg": [
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/commands/cmd_migrate.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_react-build.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_rebuild.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_requirements.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sheet_music_database-master/cli/commands/cmd_restart.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [],
            "arguments": {
                "service": [
                    "str",
                    "list[]"
                ],
                "build_frontend": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/commands/cmd_test.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "cov": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "picked": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "multi_thread": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/commands/cmd_up.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [],
            "arguments": {
                "build_frontend": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "sheet_music_database-master/cli/commands/__init__.py": {}
}
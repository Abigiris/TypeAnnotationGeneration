{
    "sicp-bot-master/conftest.py": {},
    "sicp-bot-master/setup.py": {},
    "sicp-bot-master/sicp_bot/config.py": {},
    "sicp-bot-master/sicp_bot/explorer.py": {
        "_content_type_to_file_type": {
            "name": "_content_type_to_file_type",
            "location": 83,
            "return": [],
            "arguments": {
                "content_type": [
                    "str"
                ]
            }
        },
        "get_explorer_cls": {
            "name": "get_explorer_cls",
            "location": 87,
            "return": [
                "Explorer"
            ],
            "arguments": {
                "api_token": [
                    "None",
                    "str",
                    "dict[str, int]"
                ]
            }
        },
        "Explorer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "repo_name": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Explorer.get_dir_tree": {
            "name": "get_dir_tree",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer._traverse": {
            "name": "_traverse",
            "location": 38,
            "return": [
                "list[FileDesc]"
            ],
            "arguments": {
                "self": [],
                "file_desc": [
                    "typing.Sequence[str]",
                    "typing.TextIO",
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Explorer._get_last_commit": {
            "name": "_get_last_commit",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/sicp_bot/handler.py": {
        "Handler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "issuer_id": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "processor": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "serializer": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "deserializer": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Handler.authorized": {
            "name": "authorized",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Handler.del_cowboy": {
            "name": "del_cowboy",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]"
                ]
            }
        },
        "Handler.add_cowboy": {
            "name": "add_cowboy",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Handler.__init__.start_help": {
            "name": "start_help",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "Handler.__init__.pre_add_cowboy": {
            "name": "pre_add_cowboy",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "Handler.__init__.pre_del_cowboy": {
            "name": "pre_del_cowboy",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "Handler.__init__.get_cowboy": {
            "name": "get_cowboy",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "Handler.__init__.get_leaderboard": {
            "name": "get_leaderboard",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "Handler.__init__.repeat_all_messages": {
            "name": "repeat_all_messages",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        }
    },
    "sicp-bot-master/sicp_bot/logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 18,
            "return": [],
            "arguments": {
                "scope": [
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/parser.py": {
        "_pattern_validator": {
            "name": "_pattern_validator",
            "location": 15,
            "return": [
                "ParsePattern"
            ],
            "arguments": {
                "dir_pattern": [
                    "str"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 25,
            "return": [],
            "arguments": {
                "dir_pattern": [
                    "str"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/processor.py": {
        "_must_be_done": {
            "name": "_must_be_done",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime_str": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Processor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "tuple[]"
                ],
                "db_man": [
                    "str",
                    "float"
                ],
                "explorer_cls": [
                    "str",
                    "float"
                ]
            }
        },
        "Processor.get_leaderboard": {
            "name": "get_leaderboard",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Processor.create_cowboy": {
            "name": "create_cowboy",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Processor.update_cowboy": {
            "name": "update_cowboy",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "cowboy": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "Processor.delete_cowboy": {
            "name": "delete_cowboy",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cowboy_github_nick": [
                    "str",
                    "int"
                ]
            }
        },
        "Processor.get_cowboy": {
            "name": "get_cowboy",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cowboy_github_nick": [
                    "str",
                    "bool"
                ]
            }
        },
        "Processor.get_cowboys": {
            "name": "get_cowboys",
            "location": 77,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor._update_cowboys_exercises": {
            "name": "_update_cowboys_exercises",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor._tree_matcher": {
            "name": "_tree_matcher",
            "location": 95,
            "return": [
                "bool",
                "list[E]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "bool",
                    "list[E]",
                    "list[]"
                ],
                "user_tree": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Processor._flatten": {
            "name": "_flatten",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Processor._prevent_duplicate": {
            "name": "_prevent_duplicate",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Serializer.from_exercises": {
            "name": "from_exercises",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exercises": [
                    "list[str]"
                ]
            }
        },
        "Serializer.from_cowboy_extended": {
            "name": "from_cowboy_extended",
            "location": 125,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Serializer.from_cowboy": {
            "name": "from_cowboy",
            "location": 141,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cowboy": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Serializer.leaderboard": {
            "name": "leaderboard",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "cowboys": [
                    "str"
                ]
            }
        },
        "Deserializer.to_cowboy": {
            "name": "to_cowboy",
            "location": 164,
            "return": [
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "cowboy_str": [
                    "str"
                ]
            }
        },
        "Deserializer.to_update_cowboy": {
            "name": "to_update_cowboy",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cowboy_str": [
                    "str",
                    "float"
                ],
                "cowboy": [
                    "str"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/serve.py": {
        "_set_bot": {
            "name": "_set_bot",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "float"
                ]
            }
        },
        "get_flask_app": {
            "name": "get_flask_app",
            "location": 43,
            "return": [
                "Flask"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "None"
                ]
            }
        },
        "_Bot.post": {
            "name": "post",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Home.get": {
            "name": "get",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/sicp_bot/utils.py": {
        "get_data_folder_path": {
            "name": "get_data_folder_path",
            "location": 4,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/sicp_bot/__init__.py": {
        "start": {
            "name": "start",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/db/manager.py": {
        "_KeysType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_name": [
                    "str"
                ],
                "db": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "_KeysType._rewrite_db": {
            "name": "_rewrite_db",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KeysType.append": {
            "name": "append",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "_KeysType.remove": {
            "name": "remove",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DBManager.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "None"
                ],
                "object_type": [
                    "typing.Iterable[str]",
                    "str",
                    "None",
                    "int"
                ],
                "create_if_missing": [
                    "bool"
                ]
            }
        },
        "DBManager._is_valid_model": {
            "name": "_is_valid_model",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "DBManager.put": {
            "name": "put",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "DBManager.update": {
            "name": "update",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DBManager.delete": {
            "name": "delete",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str"
                ]
            }
        },
        "DBManager.get": {
            "name": "get",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str"
                ]
            }
        },
        "DBManager.get_model_ids": {
            "name": "get_model_ids",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBManager.get_models": {
            "name": "get_models",
            "location": 77,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBManager._decode": {
            "name": "_decode",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "byte_object": [
                    "str",
                    "None",
                    "bytes",
                    "float",
                    "int",
                    "typing.Iterable[T]"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/db/models.py": {},
    "sicp-bot-master/sicp_bot/db/__init__.py": {
        "BaseModel.encode": {
            "name": "encode",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/tests/config_tests.py": {
        "test_config": {
            "name": "test_config",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config_dict": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "sicp-bot-master/tests/factories.py": {
        "ExerciseFactory.exercise": {
            "name": "exercise",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "model_id": []
            }
        },
        "ExerciseFactory.exercises": {
            "name": "exercises",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "count": []
            }
        },
        "CowboyFactory.cowboy": {
            "name": "cowboy",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "sicp-bot-master/tests/fixtures.py": {
        "mock_config_dict": {
            "name": "mock_config_dict",
            "location": 11,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "exercise": {
            "name": "exercise",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "exercises": {
            "name": "exercises",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "cowboy": {
            "name": "cowboy",
            "location": 37,
            "return": [
                "Cowboy"
            ],
            "arguments": {
                "exercises": [
                    "list[]",
                    "bool"
                ]
            }
        },
        "parse_pattern": {
            "name": "parse_pattern",
            "location": 52,
            "return": [
                "ParsePattern"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/parser_tests.py": {
        "test_get_parser": {
            "name": "test_get_parser",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_pattern": [
                    "list[str]"
                ]
            }
        },
        "test_fail_get_parser": {
            "name": "test_fail_get_parser",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/utils_tests.py": {
        "test_get_data_folder_path": {
            "name": "test_get_data_folder_path",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/db/manager_tests.py": {
        "test_init": {
            "name": "test_init",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/db/models_tests.py": {
        "test_model_encode": {
            "name": "test_model_encode",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "cowboy": [
                    "str"
                ]
            }
        }
    }
}
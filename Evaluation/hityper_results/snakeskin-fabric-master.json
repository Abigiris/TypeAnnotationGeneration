{
    "snakeskin-fabric-master/setup.py": {},
    "snakeskin-fabric-master/e2e/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 18,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "load_org1_gateway": {
            "name": "load_org1_gateway",
            "location": 68,
            "return": [],
            "arguments": {
                "network_config": []
            }
        },
        "load_org2_gateway": {
            "name": "load_org2_gateway",
            "location": 74,
            "return": [],
            "arguments": {
                "network_config": []
            }
        },
        "get_channel": {
            "name": "get_channel",
            "location": 80,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "org1_gw": []
            }
        },
        "get_chaincode": {
            "name": "get_chaincode",
            "location": 86,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "org1_gw": []
            }
        }
    },
    "snakeskin-fabric-master/e2e/gateway_test.py": {},
    "snakeskin-fabric-master/e2e/operations_test.py": {},
    "snakeskin-fabric-master/e2e/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/config.py": {
        "BlockchainConfig.from_file": {
            "name": "from_file",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "file_path": []
            }
        },
        "BlockchainConfig.from_dict": {
            "name": "from_dict",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "BlockchainConfig.__post_init__": {
            "name": "__post_init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainConfig.get_gateway": {
            "name": "get_gateway",
            "location": 80,
            "return": [
                "Gateway"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BlockchainConfig.get_peer": {
            "name": "get_peer",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BlockchainConfig.get_orderer": {
            "name": "get_orderer",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BlockchainConfig.get_user": {
            "name": "get_user",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BlockchainConfig.get_chaincode": {
            "name": "get_chaincode",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/connect.py": {},
    "snakeskin-fabric-master/snakeskin/constants.py": {},
    "snakeskin-fabric-master/snakeskin/crypto.py": {
        "CryptoSuite.set_default": {
            "name": "set_default",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "default": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/errors.py": {
        "handle_conn_errors": {
            "name": "handle_conn_errors",
            "location": 122,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "TransactionError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "tx_id": []
            }
        },
        "TransactionError.response_message": {
            "name": "response_message",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionError.status": {
            "name": "status",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrasactionCommitError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "tx_id": [],
                "response": []
            }
        },
        "TrasactionCommitError.response_message": {
            "name": "response_message",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrasactionCommitError.status": {
            "name": "status",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionProposalError.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "transaction": []
            }
        },
        "TransactionProposalError.response_message": {
            "name": "response_message",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionProposalError.status": {
            "name": "status",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockRetrievalError.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "status": [
                    "None"
                ]
            }
        },
        "BlockchainConnectionError.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_error_call": []
            }
        },
        "TransactionValidationError.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TransactionValidationError.code_name": {
            "name": "code_name",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/events.py": {
        "_EventHub.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestor": [],
                "channel": []
            }
        },
        "_EventHub._get_connection_envelope": {
            "name": "_get_connection_envelope",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "behavior": [],
                "start": [
                    "None"
                ],
                "stop": []
            }
        },
        "_EventHub._build_stream": {
            "name": "_build_stream",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "envelope": []
            }
        },
        "_EventHub._pull_block_from_response": {
            "name": "_pull_block_from_response",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "_EventHub._client_cert": {
            "name": "_client_cert",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerEvents.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestor": [],
                "channel": [],
                "peer": []
            }
        },
        "PeerEvents._client_cert": {
            "name": "_client_cert",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeerEvents._build_stream": {
            "name": "_build_stream",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "envelope": []
            }
        },
        "PeerEvents._pull_block_from_response": {
            "name": "_pull_block_from_response",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "PeerFilteredEvents.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestor": [],
                "channel": [],
                "peer": []
            }
        },
        "PeerFilteredEvents._client_cert": {
            "name": "_client_cert",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeerFilteredEvents._build_stream": {
            "name": "_build_stream",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "envelope": []
            }
        },
        "PeerFilteredEvents._pull_block_from_response": {
            "name": "_pull_block_from_response",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "OrdererEvents.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestor": [],
                "channel": [],
                "orderer": []
            }
        },
        "OrdererEvents._build_stream": {
            "name": "_build_stream",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "envelope": []
            }
        },
        "OrdererEvents._client_cert": {
            "name": "_client_cert",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrdererEvents._pull_block_from_response": {
            "name": "_pull_block_from_response",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/factories.py": {
        "build_header": {
            "name": "build_header",
            "location": 73,
            "return": [],
            "arguments": {
                "tx_context": [],
                "channel": [
                    "None"
                ],
                "extension": [
                    "None"
                ],
                "tx_type": [],
                "tls_cert": [
                    "None"
                ]
            }
        },
        "build_envelope": {
            "name": "build_envelope",
            "location": 112,
            "return": [],
            "arguments": {
                "requestor": [],
                "tx_context": [],
                "data": [],
                "channel": [
                    "None"
                ],
                "tls_cert": [
                    "None"
                ],
                "extension": [
                    "None"
                ],
                "tx_type": []
            }
        },
        "build_seek_info": {
            "name": "build_seek_info",
            "location": 137,
            "return": [],
            "arguments": {
                "start": [
                    "None"
                ],
                "stop": [],
                "behavior": []
            }
        },
        "build_endorsed_tx_envelope": {
            "name": "build_endorsed_tx_envelope",
            "location": 172,
            "return": [],
            "arguments": {
                "endorsed_tx": [],
                "requestor": []
            }
        },
        "tx_context_from_user": {
            "name": "tx_context_from_user",
            "location": 208,
            "return": [
                "TXContext"
            ],
            "arguments": {
                "user": []
            }
        },
        "encode_proto_bytes": {
            "name": "encode_proto_bytes",
            "location": 223,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "encode_proto_str": {
            "name": "encode_proto_str",
            "location": 228,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "pem_to_der": {
            "name": "pem_to_der",
            "location": 233,
            "return": [],
            "arguments": {
                "pem": []
            }
        },
        "wrap_transaction": {
            "name": "wrap_transaction",
            "location": 240,
            "return": [],
            "arguments": {
                "user": [],
                "payload": []
            }
        },
        "sign": {
            "name": "sign",
            "location": 249,
            "return": [],
            "arguments": {
                "user": [],
                "payload": []
            }
        },
        "build_endorsement_policy": {
            "name": "build_endorsement_policy",
            "location": 254,
            "return": [],
            "arguments": {
                "policy": [],
                "role_map": [
                    "None"
                ]
            }
        },
        "build_signature_policy_envelope": {
            "name": "build_signature_policy_envelope",
            "location": 296,
            "return": [],
            "arguments": {
                "endorsement_policy": []
            }
        },
        "build_config_update_envelope": {
            "name": "build_config_update_envelope",
            "location": 315,
            "return": [],
            "arguments": {
                "channel": [],
                "tx_context": [],
                "requestor": [],
                "config_update": []
            }
        },
        "build_cc_deployment_spec": {
            "name": "build_cc_deployment_spec",
            "location": 351,
            "return": [],
            "arguments": {
                "name": [],
                "language": [],
                "fcn": [
                    "None"
                ],
                "version": [
                    "None"
                ],
                "path": [
                    "None"
                ],
                "code_package": [
                    "None"
                ],
                "args": []
            }
        },
        "build_generated_tx": {
            "name": "build_generated_tx",
            "location": 394,
            "return": [
                "GeneratedTX"
            ],
            "arguments": {
                "requestor": [],
                "cc_name": [],
                "args": [],
                "channel": [
                    "None"
                ],
                "transient_map": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/operations.py": {
        "package_chaincode": {
            "name": "package_chaincode",
            "location": 239,
            "return": [],
            "arguments": {
                "cc_spec": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/transact.py": {
        "generate_instantiate_cc_tx": {
            "name": "generate_instantiate_cc_tx",
            "location": 39,
            "return": [],
            "arguments": {
                "requestor": [],
                "cc_spec": [],
                "channel": [],
                "endorsement_policy": [
                    "None"
                ],
                "upgrade": [
                    "bool"
                ]
            }
        },
        "generate_cc_tx": {
            "name": "generate_cc_tx",
            "location": 84,
            "return": [],
            "arguments": {
                "requestor": [],
                "cc_name": [],
                "channel": [],
                "fcn": [],
                "args": [
                    "None"
                ],
                "transient_map": [
                    "None"
                ]
            }
        },
        "raise_tx_proposal_error": {
            "name": "raise_tx_proposal_error",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": [],
                "msg": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/models/block.py": {
        "RawBlock.from_proto": {
            "name": "from_proto",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "block": []
            }
        },
        "RawBlock.transactions": {
            "name": "transactions",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlock.decode": {
            "name": "decode",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawBlock.as_proto": {
            "name": "as_proto",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilteredBlock.from_proto": {
            "name": "from_proto",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "filtered_block": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/models/gateway.py": {
        "Gateway.transact": {
            "name": "transact",
            "location": 40,
            "return": [
                "GatewayTXBuilder"
            ],
            "arguments": {
                "self": [],
                "fcn": [],
                "args": [
                    "None"
                ],
                "transient_map": [
                    "None"
                ]
            }
        },
        "Gateway.update_chaincode_version": {
            "name": "update_chaincode_version",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "GatewayTXBuilder.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [],
                "generated_tx": []
            }
        },
        "GatewayTXBuilder.propose": {
            "name": "propose",
            "location": 232,
            "return": [
                "GatewayTXBuilder"
            ],
            "arguments": {
                "self": [],
                "raise_errors": [
                    "bool"
                ]
            }
        },
        "GatewayTXBuilder.submit": {
            "name": "submit",
            "location": 247,
            "return": [
                "GatewayTXBuilder"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewayTXBuilder.wait_for_commit": {
            "name": "wait_for_commit",
            "location": 263,
            "return": [
                "GatewayTXBuilder"
            ],
            "arguments": {
                "self": [],
                "raise_errors": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "GatewayTXBuilder._add_operation": {
            "name": "_add_operation",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": []
            }
        },
        "GatewayTXBuilder.__await__": {
            "name": "__await__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/models/transaction.py": {
        "EndorsedTX.response_payload": {
            "name": "response_payload",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndorsedTX.error_responses": {
            "name": "error_responses",
            "location": 56,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsedTX.success_responses": {
            "name": "success_responses",
            "location": 63,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsedTX.fully_endorsed": {
            "name": "fully_endorsed",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsedTX.tx_id": {
            "name": "tx_id",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneratedTX.tx_id": {
            "name": "tx_id",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilteredTX.from_proto": {
            "name": "from_proto",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": [],
                "filtered_tx": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/models/_decoded.py": {
        "DecodedBlock.decode": {
            "name": "decode",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_block": []
            }
        },
        "DecodedBlock.transactions": {
            "name": "transactions",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecodedBlock._decode_block_metadata": {
            "name": "_decode_block_metadata",
            "location": 76,
            "return": [
                "tuple[typing.Union[_DecodedMetadata,_DecodedLastConfigMetadata,list]]"
            ],
            "arguments": {
                "cls": [],
                "metadata_list": []
            }
        },
        "DecodedBlock._decode_metadata_signatures": {
            "name": "_decode_metadata_signatures",
            "location": 93,
            "return": [
                "list[_DecodedMetadataSignature]"
            ],
            "arguments": {
                "metadata": []
            }
        },
        "DecodedTX.decode": {
            "name": "decode",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": [],
                "envelope_bytes": []
            }
        },
        "DecodedTX.tx_id": {
            "name": "tx_id",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DecodedSignatureHeader.decode": {
            "name": "decode",
            "location": 147,
            "return": [],
            "arguments": {
                "cls": [],
                "header_bytes": []
            }
        },
        "_DecodedConfigUpdateEnvelope.decode": {
            "name": "decode",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": [],
                "config_update_bytes": []
            }
        },
        "_DecodedHeader.decode": {
            "name": "decode",
            "location": 192,
            "return": [],
            "arguments": {
                "cls": [],
                "header": []
            }
        },
        "_DecodedConfig.decode": {
            "name": "decode",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [],
                "config_bytes": []
            }
        },
        "_DecodedTransactionAction.decode": {
            "name": "decode",
            "location": 268,
            "return": [],
            "arguments": {
                "cls": [],
                "action": []
            }
        },
        "_DecodedTransactionBody.decode": {
            "name": "decode",
            "location": 299,
            "return": [
                "_DecodedTransactionBody"
            ],
            "arguments": {
                "cls": [],
                "tx_bytes": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/models/__init__.py": {
        "User.__post_init__": {
            "name": "__post_init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConnectedModel.__post_init__": {
            "name": "__post_init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.__post_init__": {
            "name": "__post_init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Orderer.__post_init__": {
            "name": "__post_init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsementPolicyRole.__post_init__": {
            "name": "__post_init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsementPolicy.all_roles": {
            "name": "all_roles",
            "location": 197,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndorsementPolicy.role_map": {
            "name": "role_map",
            "location": 205,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/collection_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/collection_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/common_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/common_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/configtx_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/configtx_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/configuration_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/configuration_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/ledger_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/ledger_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/policies_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/policies_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/common/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/discovery/protocol_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/discovery/protocol_pb2_grpc.py": {
        "add_DiscoveryServicer_to_server": {
            "name": "add_DiscoveryServicer_to_server",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "DiscoveryStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "DiscoveryServicer.Discover": {
            "name": "Discover",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/discovery/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/gossip/message_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/gossip/message_pb2_grpc.py": {
        "add_GossipServicer_to_server": {
            "name": "add_GossipServicer_to_server",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "GossipStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "GossipServicer.GossipStream": {
            "name": "GossipStream",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "GossipServicer.Ping": {
            "name": "Ping",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/gossip/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/idemix/idemix_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/idemix/idemix_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/idemix/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/queryresult/kv_query_result_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/queryresult/kv_query_result_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/queryresult/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/rwset_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/rwset_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/kvrwset/kv_rwset_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/kvrwset/kv_rwset_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/ledger/rwset/kvrwset/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/identities_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/identities_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/msp_config_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/msp_config_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/msp_principal_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/msp_principal_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/msp/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/ab_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/ab_pb2_grpc.py": {
        "add_AtomicBroadcastServicer_to_server": {
            "name": "add_AtomicBroadcastServicer_to_server",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "AtomicBroadcastStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "AtomicBroadcastServicer.Broadcast": {
            "name": "Broadcast",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "AtomicBroadcastServicer.Deliver": {
            "name": "Deliver",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/orderer/cluster_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/cluster_pb2_grpc.py": {
        "add_ClusterServicer_to_server": {
            "name": "add_ClusterServicer_to_server",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "ClusterStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ClusterServicer.Submit": {
            "name": "Submit",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "ClusterServicer.Step": {
            "name": "Step",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/orderer/configuration_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/configuration_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/kafka_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/kafka_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/etcdraft/configuration_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/orderer/etcdraft/configuration_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/admin_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/admin_pb2_grpc.py": {
        "add_AdminServicer_to_server": {
            "name": "add_AdminServicer_to_server",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "AdminStub.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "AdminServicer.GetStatus": {
            "name": "GetStatus",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.StartServer": {
            "name": "StartServer",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.GetModuleLogLevel": {
            "name": "GetModuleLogLevel",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.SetModuleLogLevel": {
            "name": "SetModuleLogLevel",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.RevertLogLevels": {
            "name": "RevertLogLevels",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.GetLogSpec": {
            "name": "GetLogSpec",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AdminServicer.SetLogSpec": {
            "name": "SetLogSpec",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_event_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_event_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_shim_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/chaincode_shim_pb2_grpc.py": {
        "add_ChaincodeSupportServicer_to_server": {
            "name": "add_ChaincodeSupportServicer_to_server",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "ChaincodeSupportStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ChaincodeSupportServicer.Register": {
            "name": "Register",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/peer/configuration_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/configuration_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/events_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/events_pb2_grpc.py": {
        "add_DeliverServicer_to_server": {
            "name": "add_DeliverServicer_to_server",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "DeliverStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "DeliverServicer.Deliver": {
            "name": "Deliver",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "DeliverServicer.DeliverFiltered": {
            "name": "DeliverFiltered",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/peer/peer_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/peer_pb2_grpc.py": {
        "add_EndorserServicer_to_server": {
            "name": "add_EndorserServicer_to_server",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "EndorserStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "EndorserServicer.ProcessProposal": {
            "name": "ProcessProposal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/peer/policy_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/policy_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/proposal_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/proposal_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/proposal_response_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/proposal_response_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/query_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/query_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/resources_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/resources_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/signed_cc_dep_spec_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/signed_cc_dep_spec_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/transaction_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/transaction_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/lifecycle/lifecycle_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/lifecycle/lifecycle_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/peer/lifecycle/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/expectations_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/expectations_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/prover_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/prover_pb2_grpc.py": {
        "add_ProverServicer_to_server": {
            "name": "add_ProverServicer_to_server",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "ProverStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ProverServicer.ProcessCommand": {
            "name": "ProcessCommand",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/protos/token/transaction_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/transaction_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/token/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/protos/transientstore/transientstore_pb2.py": {},
    "snakeskin-fabric-master/snakeskin/protos/transientstore/transientstore_pb2_grpc.py": {},
    "snakeskin-fabric-master/snakeskin/protos/transientstore/__init__.py": {},
    "snakeskin-fabric-master/snakeskin/_hfc/crypto.py": {
        "generate_nonce": {
            "name": "generate_nonce",
            "location": 170,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "ecies": {
            "name": "ecies",
            "location": 385,
            "return": [
                "Ecies"
            ],
            "arguments": {
                "security_level": [
                    "int"
                ],
                "hash_algorithm": [
                    "typing.Text"
                ]
            }
        },
        "Key.is_symmetric": {
            "name": "is_symmetric",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.get_SKI": {
            "name": "get_SKI",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsymmetricKey.is_private": {
            "name": "is_private",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsymmetricKey.get_public_key": {
            "name": "get_public_key",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crypto.generate_private_key": {
            "name": "generate_private_key",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crypto.encrypt": {
            "name": "encrypt",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [],
                "message": []
            }
        },
        "Crypto.decrypt": {
            "name": "decrypt",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "cipher_text": []
            }
        },
        "Crypto.sign": {
            "name": "sign",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "message": []
            }
        },
        "Crypto.verify": {
            "name": "verify",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [],
                "message": [],
                "signature": []
            }
        },
        "Crypto.generate_nonce": {
            "name": "generate_nonce",
            "location": 158,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "Ecies.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_level": [
                    "int"
                ],
                "hash_algorithm": [
                    "typing.Text"
                ]
            }
        },
        "Ecies.hash": {
            "name": "hash",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ecies.sign": {
            "name": "sign",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": [],
                "message": []
            }
        },
        "Ecies.verify": {
            "name": "verify",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "public_key": [],
                "message": [],
                "signature": []
            }
        },
        "Ecies._prevent_malleability": {
            "name": "_prevent_malleability",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "Ecies._check_malleability": {
            "name": "_check_malleability",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "Ecies.generate_private_key": {
            "name": "generate_private_key",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ecies.decrypt": {
            "name": "decrypt",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": [],
                "cipher_text": []
            }
        },
        "Ecies.encrypt": {
            "name": "encrypt",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "public_key": [],
                "plain_text": []
            }
        },
        "Ecies.generate_csr": {
            "name": "generate_csr",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": [],
                "subject_name": [],
                "extensions": [
                    "None"
                ]
            }
        }
    },
    "snakeskin-fabric-master/snakeskin/_hfc/__init__.py": {},
    "snakeskin-fabric-master/test/config_test.py": {
        "test_from_file_yaml": {
            "name": "test_from_file_yaml",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_file_json": {
            "name": "test_from_file_json",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_file_ext": {
            "name": "test_bad_file_ext",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_names": {
            "name": "test_no_names",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "org1_user": []
            }
        },
        "test_no_config_with_name": {
            "name": "test_no_config_with_name",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_gateway": {
            "name": "test_get_gateway",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "org1_user": []
            }
        }
    },
    "snakeskin-fabric-master/test/conftest.py": {
        "raw_block": {
            "name": "raw_block",
            "location": 18,
            "return": [
                "typing.Generator[RawBlock]"
            ],
            "arguments": {}
        },
        "genesis_block": {
            "name": "genesis_block",
            "location": 35,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "channel_tx": {
            "name": "channel_tx",
            "location": 43,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "org1_user": {
            "name": "org1_user",
            "location": 51,
            "return": [
                "typing.Generator[User]"
            ],
            "arguments": {}
        }
    },
    "snakeskin-fabric-master/test/crypto_test.py": {
        "test_set_default_crypto": {
            "name": "test_set_default_crypto",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "snakeskin-fabric-master/test/errors_test.py": {
        "test_tx_error_abstract": {
            "name": "test_tx_error_abstract",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tx_commit_error_msg": {
            "name": "test_tx_commit_error_msg",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tx_prop_error_msg": {
            "name": "test_tx_prop_error_msg",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tx_prop_no_err": {
            "name": "test_tx_prop_no_err",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_block_retreival_error_msg": {
            "name": "test_block_retreival_error_msg",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bc_conn_err_msg": {
            "name": "test_bc_conn_err_msg",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tx_validation_err_msg": {
            "name": "test_tx_validation_err_msg",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_conn_errs": {
            "name": "test_handle_conn_errs",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_MockConnError.code": {
            "name": "code",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "_MockConnError.details": {
            "name": "details",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "snakeskin-fabric-master/test/models_block_test.py": {
        "test_raw_block_from_proto": {
            "name": "test_raw_block_from_proto",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_block": []
            }
        },
        "test_raw_block_transactions": {
            "name": "test_raw_block_transactions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_block": []
            }
        },
        "test_raw_block_decode": {
            "name": "test_raw_block_decode",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_block": []
            }
        },
        "test_raw_block_as_proto": {
            "name": "test_raw_block_as_proto",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_block": []
            }
        },
        "test_filt_block_from_proto": {
            "name": "test_filt_block_from_proto",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "tx_from_proto": []
            }
        },
        "test_decode_block_transactions": {
            "name": "test_decode_block_transactions",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_block": []
            }
        }
    },
    "snakeskin-fabric-master/test/models_gateway_test.py": {
        "_get_tx_builder_mock": {
            "name": "_get_tx_builder_mock",
            "location": 30,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "_build_gateway": {
            "name": "_build_gateway",
            "location": 45,
            "return": [
                "typing.Generator[Gateway]"
            ],
            "arguments": {
                "peer": [],
                "orderer": [],
                "org1_user": [],
                "cc_spec": []
            }
        },
        "_build_peer": {
            "name": "_build_peer",
            "location": 55,
            "return": [
                "typing.Generator[Peer]"
            ],
            "arguments": {}
        },
        "_build_orderer": {
            "name": "_build_orderer",
            "location": 60,
            "return": [
                "typing.Generator[Orderer]"
            ],
            "arguments": {}
        },
        "_build_cc_spec": {
            "name": "_build_cc_spec",
            "location": 65,
            "return": [
                "typing.Generator[ChaincodeSpec]"
            ],
            "arguments": {}
        },
        "AwaitableMock.__await__": {
            "name": "__await__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "snakeskin-fabric-master/test/models_test.py": {
        "test_user_post_init": {
            "name": "test_user_post_init",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "load_pem_mock": []
            }
        },
        "test_user_missing_key": {
            "name": "test_user_missing_key",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_missing_cert": {
            "name": "test_user_missing_cert",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_orderer_no_certs": {
            "name": "test_orderer_no_certs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "insecure_channel": []
            }
        },
        "test_orderer_ssl_target_name": {
            "name": "test_orderer_ssl_target_name",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "insecure_channel": []
            }
        },
        "test_orderer_tls_cert": {
            "name": "test_orderer_tls_cert",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "secure_channel": [],
                "ssl_creds": []
            }
        },
        "test_orderer_client_auth": {
            "name": "test_orderer_client_auth",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "secure_channel": [],
                "ssl_creds": []
            }
        },
        "test_end_policy_all_roles": {
            "name": "test_end_policy_all_roles",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_policy_role_map": {
            "name": "test_end_policy_role_map",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "snakeskin-fabric-master/test/models_transaction_test.py": {
        "_get_generated_tx": {
            "name": "_get_generated_tx",
            "location": 30,
            "return": [
                "typing.Generator[GeneratedTX]"
            ],
            "arguments": {}
        },
        "_get_endorsed_tx": {
            "name": "_get_endorsed_tx",
            "location": 44,
            "return": [
                "typing.Generator[EndorsedTX]"
            ],
            "arguments": {}
        },
        "test_endtx_resp_payload": {
            "name": "test_endtx_resp_payload",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_resp_payload_err": {
            "name": "test_endtx_resp_payload_err",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_error_resp": {
            "name": "test_endtx_error_resp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_success_resp": {
            "name": "test_endtx_success_resp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_fully_end": {
            "name": "test_endtx_fully_end",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_not_fully_end": {
            "name": "test_endtx_not_fully_end",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_endtx_tx_id": {
            "name": "test_endtx_tx_id",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "endorsed_tx": []
            }
        },
        "test_gen_tx_tx_id": {
            "name": "test_gen_tx_tx_id",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "generated_tx": []
            }
        },
        "test_filt_tx_from_proto": {
            "name": "test_filt_tx_from_proto",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decoded_tx_decode": {
            "name": "test_decoded_tx_decode",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "channel_tx": []
            }
        },
        "test_decoded_tx_tx_id": {
            "name": "test_decoded_tx_tx_id",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "genesis_block": []
            }
        }
    },
    "snakeskin-fabric-master/test/__init__.py": {}
}
{
    "socialhome-master/manage.py": {},
    "socialhome-master/config/asgi.py": {},
    "socialhome-master/config/routing.py": {},
    "socialhome-master/config/urls.py": {},
    "socialhome-master/config/wsgi.py": {},
    "socialhome-master/config/__init__.py": {},
    "socialhome-master/config/settings/common.py": {
        "is_silky_request": {
            "name": "is_silky_request",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "socialhome-master/config/settings/local.py": {},
    "socialhome-master/config/settings/production.py": {},
    "socialhome-master/config/settings/__init__.py": {},
    "socialhome-master/docs/conf.py": {},
    "socialhome-master/socialhome/admin.py": {
        "PolicyDocumentAdmin.save_model": {
            "name": "save_model",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "tuple[int]"
                ],
                "obj": [],
                "form": [
                    "dict[, ]",
                    "tuple[int]"
                ],
                "change": [
                    "dict[, ]",
                    "tuple[int]"
                ]
            }
        },
        "PolicyDocumentAdmin.send_email": {
            "name": "send_email",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "queryset": []
            }
        }
    },
    "socialhome-master/socialhome/apps.py": {
        "SocialhomeConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/context_processors.py": {
        "policy_documents": {
            "name": "policy_documents",
            "location": 4,
            "return": [
                "dict[typing.Text, dict[typing.Text, bool]]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/enums.py": {
        "Visibility.string_value": {
            "name": "string_value",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/forms.py": {
        "MarkdownXImageForm.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkdownXImageForm._save": {
            "name": "_save",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/models.py": {
        "ImageUpload.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolicyDocument.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyDocument.save": {
            "name": "save",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyDocument.edit_draft": {
            "name": "edit_draft",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyDocument.publish": {
            "name": "publish",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/preferences.py": {},
    "socialhome-master/socialhome/serializers.py": {
        "ImageUploadSerializer.validate_image": {
            "name": "validate_image",
            "location": 12,
            "return": [
                "str",
                "list[str]",
                "dict[str, typing.Sequence[str]]",
                "dict[str, typing.Sequence[typing.Any]]",
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Sequence[str]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "ImageUploadSerializer.create": {
            "name": "create",
            "location": 18,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        },
        "ImageUploadSerializer.to_representation": {
            "name": "to_representation",
            "location": 27,
            "return": [
                "dict[, ]",
                "typing.IO",
                "list[str]",
                "int",
                "typing.Iterator"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[, ]",
                    "typing.IO",
                    "list[str]",
                    "int",
                    "typing.Iterator"
                ]
            }
        }
    },
    "socialhome-master/socialhome/signals.py": {
        "delete_upload_from_disk": {
            "name": "delete_upload_from_disk",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "socialhome-master/socialhome/utils.py": {
        "get_full_url": {
            "name": "get_full_url",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_full_media_url": {
            "name": "get_full_media_url",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_redis_connection": {
            "name": "get_redis_connection",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_dst": {
            "name": "is_dst",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "zonename": [
                    "str",
                    "int"
                ]
            }
        },
        "is_url": {
            "name": "is_url",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "safe_make_aware": {
            "name": "safe_make_aware",
            "location": 52,
            "return": [],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "complex",
                    "float",
                    "typing.Sequence[str]"
                ],
                "timezone": [
                    "None",
                    "int",
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes",
                    "list[str]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/views.py": {
        "HomeView.get": {
            "name": "get",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MarkdownXImageUploadView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 63,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObtainSocialhomeAuthToken.post": {
            "name": "post",
            "location": 78,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PolicyDocumentView.dispatch": {
            "name": "dispatch",
            "location": 91,
            "return": [
                "Http404"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Mapping",
                    "None",
                    "str",
                    "typing.Sequence[]",
                    "dict[str, typing.Any]"
                ],
                "document_type": [
                    "None",
                    "int"
                ]
            }
        },
        "PolicyDocumentView.get_context_data": {
            "name": "get_context_data",
            "location": 97,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/viewsets.py": {},
    "socialhome-master/socialhome/__init__.py": {},
    "socialhome-master/socialhome/activities/admin.py": {},
    "socialhome-master/socialhome/activities/apps.py": {},
    "socialhome-master/socialhome/activities/models.py": {},
    "socialhome-master/socialhome/activities/__init__.py": {},
    "socialhome-master/socialhome/activities/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/activities/migrations/__init__.py": {},
    "socialhome-master/socialhome/content/admin.py": {},
    "socialhome-master/socialhome/content/apps.py": {
        "ContentConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/enums.py": {
        "ContentType.string_value": {
            "name": "string_value",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/forms.py": {
        "ContentForm.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentForm.clean": {
            "name": "clean",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentForm.clean_recipients": {
            "name": "clean_recipients",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentForm.clean_text": {
            "name": "clean_text",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentForm.get_initial_for_field": {
            "name": "get_initial_for_field",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "dict[, ]"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "ContentForm.save": {
            "name": "save",
            "location": 96,
            "return": [
                "str",
                "list[]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ],
                "parent": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/models.py": {
        "OpenGraphCache.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OEmbedCache.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.save": {
            "name": "save",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.channel_group_name": {
            "name": "channel_group_name",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.__str__": {
            "name": "__str__",
            "location": 175,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.cache_data": {
            "name": "cache_data",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "Content.cache_related_object_data": {
            "name": "cache_related_object_data",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.create_activity": {
            "name": "create_activity",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "activity_type": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Content.extract_mentions": {
            "name": "extract_mentions",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.has_twitter_oembed": {
            "name": "has_twitter_oembed",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.humanized_timestamp": {
            "name": "humanized_timestamp",
            "location": 250,
            "return": [
                "dict[str, str]",
                "dict[, ]",
                "dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.timestamp_epoch": {
            "name": "timestamp_epoch",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.root": {
            "name": "root",
            "location": 263,
            "return": [
                "Content"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.timestamp": {
            "name": "timestamp",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.url": {
            "name": "url",
            "location": 277,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.url_uuid": {
            "name": "url_uuid",
            "location": 281,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.has_shared": {
            "name": "has_shared",
            "location": 286,
            "return": [],
            "arguments": {
                "content_id": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "profile_id": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Content.save": {
            "name": "save",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.save_tags": {
            "name": "save_tags",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "int"
                ]
            }
        },
        "Content.share": {
            "name": "share",
            "location": 336,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "list[A]",
                    "str",
                    "int"
                ]
            }
        },
        "Content.unshare": {
            "name": "unshare",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "typing.Hashable"
                ]
            }
        },
        "Content.is_nsfw": {
            "name": "is_nsfw",
            "location": 368,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.effective_modified": {
            "name": "effective_modified",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.edited": {
            "name": "edited",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.short_text": {
            "name": "short_text",
            "location": 390,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.short_text_inline": {
            "name": "short_text_inline",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.slug": {
            "name": "slug",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.channel_group_name": {
            "name": "channel_group_name",
            "location": 406,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.render": {
            "name": "render",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_and_linkify_tags": {
            "name": "get_and_linkify_tags",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.fix_local_uploads": {
            "name": "fix_local_uploads",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.visible_for_user": {
            "name": "visible_for_user",
            "location": 463,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Content.get_and_linkify_tags.linkifier": {
            "name": "linkifier",
            "location": 441,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "tag": []
            }
        }
    },
    "socialhome-master/socialhome/content/previews.py": {
        "fetch_content_preview": {
            "name": "fetch_content_preview",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "None"
                ]
            }
        },
        "fetch_og_preview": {
            "name": "fetch_og_preview",
            "location": 41,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "dict[str, dict[, ]]",
                "set[]",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[typing.Hashable, typing.Any]",
                    "bool"
                ],
                "urls": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "fetch_oembed_preview": {
            "name": "fetch_oembed_preview",
            "location": 104,
            "return": [
                "dict[str, typing.Union[float,str]]",
                "dict[str, dict[, ]]",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[typing.Hashable, typing.Any]",
                    "bool"
                ],
                "urls": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "OEmbedDiscoverer.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/querysets.py": {
        "TagQuerySet.get_by_cleaned_name": {
            "name": "get_by_cleaned_name",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "TagQuerySet.exists_by_cleaned_name": {
            "name": "exists_by_cleaned_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "ContentQuerySet.children": {
            "name": "children",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "parent_id": [
                    "int",
                    "str"
                ],
                "user": [
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "ContentQuerySet.fed": {
            "name": "fed",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[T]",
                    "None",
                    "list[]"
                ]
            }
        },
        "ContentQuerySet.fed_update_or_create": {
            "name": "fed_update_or_create",
            "location": 46,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "fid": [
                    "str"
                ],
                "values": [],
                "extra_lookups": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "ContentQuerySet.followed": {
            "name": "followed",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ],
                "single_id": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ContentQuerySet.limited": {
            "name": "limited",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "single_id": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ContentQuerySet.local": {
            "name": "local",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "dict[str, str]",
                    "bool",
                    "tuple[]",
                    "list[dict[str, str]]"
                ],
                "single_id": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ContentQuerySet.pinned": {
            "name": "pinned",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentQuerySet.profile": {
            "name": "profile",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [],
                "user": [
                    "int",
                    "list[str]"
                ],
                "include_shares": [
                    "bool"
                ],
                "single_id": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "ContentQuerySet.profile_by_attr": {
            "name": "profile_by_attr",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "value": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "user": [
                    "str",
                    "dict[, ]",
                    "typing.Sized",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "include_shares": [
                    "bool"
                ]
            }
        },
        "ContentQuerySet.profile_pinned": {
            "name": "profile_pinned",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "user": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "single_id": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "ContentQuerySet.profile_pinned_by_attr": {
            "name": "profile_pinned_by_attr",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "value": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "user": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "ContentQuerySet.public": {
            "name": "public",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ContentQuerySet.shares": {
            "name": "shares",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "share_of_id": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "user": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ContentQuerySet.tag": {
            "name": "tag",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bytes",
                    "None"
                ],
                "user": [
                    "str",
                    "bytes",
                    "None"
                ],
                "single_id": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ContentQuerySet.tag_by_name": {
            "name": "tag_by_name",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "None",
                    "typing.Type"
                ],
                "user": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "ContentQuerySet.tags_followed_by_user": {
            "name": "tags_followed_by_user",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ],
                "single_id": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ContentQuerySet.top_level": {
            "name": "top_level",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentQuerySet.visible_for_user": {
            "name": "visible_for_user",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ContentManager.get_queryset": {
            "name": "get_queryset",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/serializers.py": {
        "RecipientsField.get_value": {
            "name": "get_value",
            "location": 20,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RecipientsField.get_attribute": {
            "name": "get_attribute",
            "location": 32,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list[dict[, ]]",
                    "int"
                ]
            }
        },
        "RecipientsField.to_internal_value": {
            "name": "to_internal_value",
            "location": 43,
            "return": [
                "set[str]",
                "bool",
                "dict[, ]",
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "set[str]",
                    "bool",
                    "dict[, ]",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "RecipientsField.to_representation": {
            "name": "to_representation",
            "location": 46,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "ContentSerializer.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializer.cache_through_authors": {
            "name": "cache_through_authors",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializer.get_through": {
            "name": "get_through",
            "location": 143,
            "return": [
                "object",
                "int",
                "dict[str, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ContentSerializer.get_through_author": {
            "name": "get_through_author",
            "location": 150,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, D]"
                ]
            }
        },
        "ContentSerializer.get_user_is_author": {
            "name": "get_user_is_author",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ContentSerializer.get_user_has_shared": {
            "name": "get_user_has_shared",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ContentSerializer.validate_parent": {
            "name": "validate_parent",
            "location": 175,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]"
                ]
            }
        },
        "ContentSerializer.to_representation": {
            "name": "to_representation",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[str, str]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ContentSerializer.save": {
            "name": "save",
            "location": 194,
            "return": [
                "str",
                "typing.OrderedDict",
                "dict[str, str]",
                "set[str]",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializer.validate": {
            "name": "validate",
            "location": 250,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "ContentSerializer.validate_text": {
            "name": "validate_text",
            "location": 267,
            "return": [
                "str",
                "typing.IO",
                "tuple[str]",
                "typing.Callable[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.IO",
                    "tuple[str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "ContentSerializer.validate_recipients": {
            "name": "validate_recipients",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/signals.py": {
        "content_post_save": {
            "name": "content_post_save",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "federate_content_retraction": {
            "name": "federate_content_retraction",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bool"
                ]
            }
        },
        "fetch_preview": {
            "name": "fetch_preview",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[, ]",
                    "typing.BinaryIO"
                ]
            }
        },
        "on_commit_mentioned": {
            "name": "on_commit_mentioned",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "int",
                    "str"
                ],
                "pks": [
                    "str"
                ],
                "instance": [
                    "str"
                ]
            }
        },
        "content_mentions_change": {
            "name": "content_mentions_change",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "None",
                    "tuple[typing.Union[str,int]]"
                ],
                "instance": [
                    "bool"
                ],
                "action": [
                    "bool"
                ],
                "pk_set": [
                    "bool"
                ]
            }
        },
        "on_commit_limited_visibilities": {
            "name": "on_commit_limited_visibilities",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "pks": [
                    "str"
                ],
                "instance": [
                    "str",
                    "bytes"
                ]
            }
        },
        "content_limited_visibilities_change": {
            "name": "content_limited_visibilities_change",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "None",
                    "tuple[typing.Union[str,int]]"
                ],
                "instance": [
                    "int",
                    "typing.Iterable[str]",
                    "None",
                    "str"
                ],
                "action": [
                    "str",
                    "float"
                ],
                "pk_set": [
                    "str",
                    "float"
                ]
            }
        },
        "render_content": {
            "name": "render_content",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "content": []
            }
        },
        "federate_content": {
            "name": "federate_content",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "typing.Mapping",
                    "str",
                    "None"
                ],
                "recipient": [
                    "None"
                ],
                "activity": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/urls.py": {},
    "socialhome-master/socialhome/content/utils.py": {
        "safe_text_for_markdown": {
            "name": "safe_text_for_markdown",
            "location": 7,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "code_blocks_add_markers": {
            "name": "code_blocks_add_markers",
            "location": 30,
            "return": [
                "tuple[typing.Union[list[],str,tuple[typing.Union[str,int]]]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "code_blocks_restore": {
            "name": "code_blocks_restore",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "code_blocks": [
                    "str",
                    "list[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "safe_text": {
            "name": "safe_text",
            "location": 54,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "find_urls_in_text": {
            "name": "find_urls_in_text",
            "location": 59,
            "return": [
                "list[]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "find_urls_in_text.link_collector": {
            "name": "link_collector",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "attrs": [],
                "new": [
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/views.py": {
        "ContentVisibleForUserMixin.test_func": {
            "name": "test_func",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "UserOwnsContentMixin.test_func": {
            "name": "test_func",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "ContentCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 52,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentCreateView.get_json_context": {
            "name": "get_json_context",
            "location": 59,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentReplyView.dispatch": {
            "name": "dispatch",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ContentReplyView.get_success_url": {
            "name": "get_success_url",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentUpdateView.get_context_data": {
            "name": "get_context_data",
            "location": 83,
            "return": [
                "list[]",
                "dict[str, typing.Any]",
                "dict[str, str]",
                "float",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentUpdateView.get_json_context": {
            "name": "get_json_context",
            "location": 89,
            "return": [
                "dict[typing.Text, typing.Union[bool,str,bytes,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentUpdateView.is_reply": {
            "name": "is_reply",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 121,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, typing.Type]",
                "dict[, ]",
                "set[tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentView.dispatch": {
            "name": "dispatch",
            "location": 133,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ContentView.get_object": {
            "name": "get_object",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool"
                ]
            }
        },
        "ContentView.get_context_data": {
            "name": "get_context_data",
            "location": 152,
            "return": [
                "str",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentView.get_json_context": {
            "name": "get_json_context",
            "location": 158,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentView.get_page_meta": {
            "name": "get_page_meta",
            "location": 166,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentView.get_serialized_content": {
            "name": "get_serialized_content",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/viewsets.py": {
        "IsOwnContentOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ],
                "view": [
                    "None"
                ]
            }
        },
        "IsOwnContentOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [
                    "typing.Iterator",
                    "tuple[int]"
                ],
                "obj": [
                    "typing.Iterator",
                    "tuple[int]"
                ]
            }
        },
        "ContentViewSet._share": {
            "name": "_share",
            "location": 70,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentViewSet._unshare": {
            "name": "_unshare",
            "location": 80,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "share_of": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ContentViewSet.get_throttles": {
            "name": "get_throttles",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentViewSet.perform_create": {
            "name": "perform_create",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ContentViewSet.replies": {
            "name": "replies",
            "location": 109,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "ContentViewSet.share": {
            "name": "share",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ContentViewSet.shares": {
            "name": "shares",
            "location": 123,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "TagViewSet.follow": {
            "name": "follow",
            "location": 153,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "uuid": [
                    "None",
                    "bool"
                ]
            }
        },
        "TagViewSet.unfollow": {
            "name": "unfollow",
            "location": 161,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "tuple[int]"
                ],
                "uuid": [
                    "None",
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/__init__.py": {},
    "socialhome-master/socialhome/content/management/__init__.py": {},
    "socialhome-master/socialhome/content/management/commands/create_dummy_content.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/management/commands/__init__.py": {},
    "socialhome-master/socialhome/content/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/content/migrations/0002_content.py": {},
    "socialhome-master/socialhome/content/migrations/0003_add_db_indexes_to_content_target_and_visibility.py": {},
    "socialhome-master/socialhome/content/migrations/0004_content_order.py": {},
    "socialhome-master/socialhome/content/migrations/0005_add_author_to_content_and_post.py": {},
    "socialhome-master/socialhome/content/migrations/0006_migrate_user_to_author_for_content_and_post.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0007_remove_user_on_content_and_user_and_make_author_not_null.py": {},
    "socialhome-master/socialhome/content/migrations/0008_copy_content_fields_to_post.py": {},
    "socialhome-master/socialhome/content/migrations/0009_copy_content_content_to_post.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0010_remove_content_remove_public_from_post.py": {},
    "socialhome-master/socialhome/content/migrations/0011_rename_post_to_content.py": {},
    "socialhome-master/socialhome/content/migrations/0012_create_models_oembedcache_and_opengraphcache.py": {},
    "socialhome-master/socialhome/content/migrations/0013_add_tag_model.py": {},
    "socialhome-master/socialhome/content/migrations/0014_content_rendered.py": {},
    "socialhome-master/socialhome/content/migrations/0015_remove_tag_modified.py": {},
    "socialhome-master/socialhome/content/migrations/0016_populate_content_rendered.py": {
        "forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0017_content_parent.py": {},
    "socialhome-master/socialhome/content/migrations/0018_content_share_of.py": {},
    "socialhome-master/socialhome/content/migrations/0019_content_content_type.py": {},
    "socialhome-master/socialhome/content/migrations/0020_fill_content_type.py": {
        "forward": {
            "name": "forward",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0021_add_local_and_reply_and_shares_counts_to_content.py": {},
    "socialhome-master/socialhome/content/migrations/0022_populate_local_and_reply_and_share_counts.py": {
        "forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0023_content_show_preview.py": {},
    "socialhome-master/socialhome/content/migrations/0024_add_content_federate_flag.py": {},
    "socialhome-master/socialhome/content/migrations/0025_add_mentions_to_content.py": {},
    "socialhome-master/socialhome/content/migrations/0026_content_limited_visibilities.py": {},
    "socialhome-master/socialhome/content/migrations/0027_fix_help_text_of_content_federate.py": {},
    "socialhome-master/socialhome/content/migrations/0028_add_content_include_following_and_mention_recipients.py": {},
    "socialhome-master/socialhome/content/migrations/0029_remove_content_mention_recipients.py": {},
    "socialhome-master/socialhome/content/migrations/0030_refactored_federation_ids.py": {},
    "socialhome-master/socialhome/content/migrations/0031_populate_content_fid.py": {
        "forward": {
            "name": "forward",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0032_make_content_uuid_editable_false.py": {},
    "socialhome-master/socialhome/content/migrations/0033_tag_uuid.py": {},
    "socialhome-master/socialhome/content/migrations/0034_fill_tag_uuid.py": {
        "forward": {
            "name": "forward",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/0035_make_tag_uuid_not_null.py": {},
    "socialhome-master/socialhome/content/migrations/0036_add_root_parent_to_content.py": {},
    "socialhome-master/socialhome/content/migrations/0037_fill_content_root_parent.py": {
        "get_root": {
            "name": "get_root",
            "location": 7,
            "return": [
                "str",
                "dict[, ]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "forward": {
            "name": "forward",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/migrations/__init__.py": {},
    "socialhome-master/socialhome/content/scripts/link_old_mentions.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "socialhome-master/socialhome/content/scripts/__init__.py": {},
    "socialhome-master/socialhome/content/tests/conftest.py": {
        "disable_network_calls": {
            "name": "disable_network_calls",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[, ]",
                    "list[utils.CWLObjectType]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/tests/factories.py": {
        "LimitedContentWithRecipientsFactory._generate": {
            "name": "_generate",
            "location": 42,
            "return": [
                "str",
                "typing.Pattern",
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "strategy": [
                    "int",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "params": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "LocalContentFactory.set_profile_with_user": {
            "name": "set_profile_with_user",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int"
                ],
                "extracted": [
                    "int"
                ]
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_enums.py": {
        "TestContentType.test_string_value": {
            "name": "test_string_value",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_forms.py": {
        "TestContentForm.setUpTestData": {
            "name": "setUpTestData",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestContentForm.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_clean__recipients": {
            "name": "test_clean__recipients",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestContentForm.test_clean__recipients_and_include_following_cant_both_be_empty": {
            "name": "test_clean__recipients_and_include_following_cant_both_be_empty",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_clean__recipients_ignored_if_not_limited": {
            "name": "test_clean__recipients_ignored_if_not_limited",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visibility": []
            }
        },
        "TestContentForm.test_clean_text": {
            "name": "test_clean_text",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_clean_text__trusted_editor": {
            "name": "test_clean_text__trusted_editor",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_save__collects_recipients": {
            "name": "test_save__collects_recipients",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_save__collects_recipients__include_following": {
            "name": "test_save__collects_recipients__include_following",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_save__collects_recipients__reply_copies_from_parent": {
            "name": "test_save__collects_recipients__reply_copies_from_parent",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_save__removes_removed_recipients": {
            "name": "test_save__removes_removed_recipients",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentForm.test_get_initial_for_field__recipients": {
            "name": "test_get_initial_for_field__recipients",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_models.py": {
        "TestContentModel.setUpTestData": {
            "name": "setUpTestData",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestContentModel.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_create": {
            "name": "test_create",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_extract_mentions": {
            "name": "test_extract_mentions",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_extract_mentions__removes_mentions": {
            "name": "test_extract_mentions__removes_mentions",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_has_shared": {
            "name": "test_has_shared",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_has_twitter_oembed__no_oembed": {
            "name": "test_has_twitter_oembed__no_oembed",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_has_twitter_oembed__contains_oembed": {
            "name": "test_has_twitter_oembed__contains_oembed",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_is_local": {
            "name": "test_is_local",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_root": {
            "name": "test_root",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_save_calls_fix_local_uploads": {
            "name": "test_save_calls_fix_local_uploads",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_share_raises_on_non_content_content_type": {
            "name": "test_share_raises_on_non_content_content_type",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_share_raises_if_shared_before": {
            "name": "test_share_raises_if_shared_before",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_share_raises_if_sharing_own_content": {
            "name": "test_share_raises_if_sharing_own_content",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_share_raises_if_content_not_visible": {
            "name": "test_share_raises_if_content_not_visible",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_share": {
            "name": "test_share",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_unshare_raises_if_no_share_exists": {
            "name": "test_unshare_raises_if_no_share_exists",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_unshare_removes_a_share": {
            "name": "test_unshare_removes_a_share",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_fix_local_uploads": {
            "name": "test_fix_local_uploads",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_effective_modified": {
            "name": "test_effective_modified",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_content_saved_in_correct_order": {
            "name": "test_content_saved_in_correct_order",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_edited_is_false_for_newly_created_content": {
            "name": "test_edited_is_false_for_newly_created_content",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_edited_is_false_for_newly_created_content_within_15_minutes_grace_period": {
            "name": "test_edited_is_false_for_newly_created_content_within_15_minutes_grace_period",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_edited_is_true_for_newly_created_content_after_15_minutes_grace_period": {
            "name": "test_edited_is_true_for_newly_created_content_after_15_minutes_grace_period",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_short_text": {
            "name": "test_short_text",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_short_text_inline": {
            "name": "test_short_text_inline",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_slug": {
            "name": "test_slug",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_slug__strips_urls_and_html": {
            "name": "test_slug__strips_urls_and_html",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_visible_for_user_unauthenticated_user": {
            "name": "test_visible_for_user_unauthenticated_user",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_visible_for_user_authenticated_user": {
            "name": "test_visible_for_user_authenticated_user",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_visible_for_user_limited_content_user": {
            "name": "test_visible_for_user_limited_content_user",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_visible_for_user_limited_content__limited_visibilities": {
            "name": "test_visible_for_user_limited_content__limited_visibilities",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_visible_for_user_self_content_user": {
            "name": "test_visible_for_user_self_content_user",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_channel_group_name": {
            "name": "test_channel_group_name",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_reply_gets_parent_values__if_not_set": {
            "name": "test_reply_gets_parent_values__if_not_set",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_reply_gets_parent_values__pinned": {
            "name": "test_reply_gets_parent_values__pinned",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_reply_gets_parent_values__visibility_is_respected_if_different": {
            "name": "test_reply_gets_parent_values__visibility_is_respected_if_different",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_save_raises_if_parent_and_share_of": {
            "name": "test_save_raises_if_parent_and_share_of",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentModel.test_save_sets_correct_content_type": {
            "name": "test_save_sets_correct_content_type",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentRendered.test_renders": {
            "name": "test_renders",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentRendered.test_renders_with_oembed": {
            "name": "test_renders_with_oembed",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentRendered.test_renders_with_opengraphcache": {
            "name": "test_renders_with_opengraphcache",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentRendered.test_renders_linkified_tags": {
            "name": "test_renders_linkified_tags",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentRendered.test_renders_without_previews_with_show_preview_false": {
            "name": "test_renders_without_previews_with_show_preview_false",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.setUpTestData": {
            "name": "setUpTestData",
            "location": 315,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestContentSaveTags.test_factory_instance_has_tags": {
            "name": "test_factory_instance_has_tags",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_extract_tags_adds_new_tags": {
            "name": "test_extract_tags_adds_new_tags",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_extract_tags_removes_old_tags": {
            "name": "test_extract_tags_removes_old_tags",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_all_tags_are_parsed_from_text": {
            "name": "test_all_tags_are_parsed_from_text",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_invalid_text_returns_no_tags": {
            "name": "test_invalid_text_returns_no_tags",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_endings_are_filtered_out": {
            "name": "test_endings_are_filtered_out",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_prefixed_tags": {
            "name": "test_prefixed_tags",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_postfixed_tags": {
            "name": "test_postfixed_tags",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentSaveTags.test_code_block_tags_ignored": {
            "name": "test_code_block_tags_ignored",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.setUpTestData": {
            "name": "setUpTestData",
            "location": 398,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestTagModel.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.test_get_absolute_url__survives_weird_tags": {
            "name": "test_get_absolute_url__survives_weird_tags",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.test_get_absolute_url__uses_uuid_when_slugify_fails": {
            "name": "test_get_absolute_url__uses_uuid_when_slugify_fails",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.test_tag_instance_created": {
            "name": "test_tag_instance_created",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.test_cleaned_name_filter": {
            "name": "test_cleaned_name_filter",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagModel.test_channel_group_name": {
            "name": "test_channel_group_name",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOpenGraphCache.test_str": {
            "name": "test_str",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOEmbedCache.test_str": {
            "name": "test_str",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_previews.py": {
        "MockOpenGraph.title": {
            "name": "title",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockOpenGraph.image": {
            "name": "image",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetchOgPreview.setUpTestData": {
            "name": "setUpTestData",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "typing.Callable[[], None]",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "BaseException"
                ]
            }
        },
        "TestFetchOgPreview.test_if_cached_already_dont_fetch": {
            "name": "test_if_cached_already_dont_fetch",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchOgPreview.test_if_cached_already_but_older_than_7_days_then_fetch": {
            "name": "test_if_cached_already_but_older_than_7_days_then_fetch",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": [
                    "str"
                ]
            }
        },
        "TestFetchOgPreview.test_opengraph_fetch_called": {
            "name": "test_opengraph_fetch_called",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": [
                    "str"
                ]
            }
        },
        "TestFetchOgPreview.test_opengraph_ignored_if_not_enough_attributes": {
            "name": "test_opengraph_ignored_if_not_enough_attributes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": []
            }
        },
        "TestFetchOgPreview.test_opengraph_cache_created": {
            "name": "test_opengraph_cache_created",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": []
            }
        },
        "TestFetchOgPreview.test_opengraph_data_error_is_passed": {
            "name": "test_opengraph_data_error_is_passed",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": [
                    "str",
                    "int"
                ],
                "create": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestFetchOgPreview.test_opengraph_integrity_error_updates_with_existing_object": {
            "name": "test_opengraph_integrity_error_updates_with_existing_object",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "og": [],
                "filter": []
            }
        },
        "TestFetchContentPreview.setUpTestData": {
            "name": "setUpTestData",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "TestFetchContentPreview.test_find_urls_in_text_called": {
            "name": "test_find_urls_in_text_called",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_og": [
                    "str"
                ],
                "fetch_oembed": [
                    "str"
                ],
                "find_urls": [
                    "int"
                ]
            }
        },
        "TestFetchContentPreview.test_fetch_oembed_preview_called": {
            "name": "test_fetch_oembed_preview_called",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_og": [
                    "dict[str, typing.Any]"
                ],
                "fetch_oembed": [],
                "find_urls": [
                    "str"
                ]
            }
        },
        "TestFetchContentPreview.test_fetch_og_preview_called": {
            "name": "test_fetch_og_preview_called",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_og": [],
                "fetch_oembed": [
                    "str"
                ],
                "find_urls": [
                    "str"
                ]
            }
        },
        "TestFetchContentPreview.test_no_fetch_if_show_preview_false": {
            "name": "test_no_fetch_if_show_preview_false",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_og": [
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "fetch_oembed": [
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "find_urls": [
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestOEmbedDiscoverer.test_oembed_discoverer_inits": {
            "name": "test_oembed_discoverer_inits",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchOEmbedPreview.setUpTestData": {
            "name": "setUpTestData",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "typing.Callable[[], None]",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "BaseException"
                ]
            }
        },
        "TestFetchOEmbedPreview.test_adds_dnt_flag_to_twitter_oembed": {
            "name": "test_adds_dnt_flag_to_twitter_oembed",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_cache_not_updated_if_previous_found": {
            "name": "test_cache_not_updated_if_previous_found",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchOEmbedPreview.test_cache_updated_if_previous_found_older_than_7_days": {
            "name": "test_cache_updated_if_previous_found_older_than_7_days",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_pyembed_called": {
            "name": "test_pyembed_called",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_pyembed_errors_swallowed": {
            "name": "test_pyembed_errors_swallowed",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchOEmbedPreview.test_skips_twitter_profile_stream_oembeds": {
            "name": "test_skips_twitter_profile_stream_oembeds",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": [
                    "str",
                    "float"
                ]
            }
        },
        "TestFetchOEmbedPreview.test_empty_oembed_skipped": {
            "name": "test_empty_oembed_skipped",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_oembed_width_corrected": {
            "name": "test_oembed_width_corrected",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_oembed_cache_created": {
            "name": "test_oembed_cache_created",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": []
            }
        },
        "TestFetchOEmbedPreview.test_integrityerror_updates_with_found_cache": {
            "name": "test_integrityerror_updates_with_found_cache",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": [],
                "filter": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_querysets.py": {
        "TestContentQuerySet.setUpTestData": {
            "name": "setUpTestData",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestContentQuerySet.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_limited": {
            "name": "test_limited",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_local": {
            "name": "test_local",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_pinned": {
            "name": "test_pinned",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_visible_for_user": {
            "name": "test_visible_for_user",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_public": {
            "name": "test_public",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_tag_by_name": {
            "name": "test_tag_by_name",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_tag": {
            "name": "test_tag",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_tags_followed_by_user": {
            "name": "test_tags_followed_by_user",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_followed": {
            "name": "test_followed",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet._set_profiles_public": {
            "name": "_set_profiles_public",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_profile": {
            "name": "test_profile",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_profile_by_attr": {
            "name": "test_profile_by_attr",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_profile_pinned": {
            "name": "test_profile_pinned",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySet.test_profile_pinned_by_attr": {
            "name": "test_profile_pinned_by_attr",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetChildren.setUpTestData": {
            "name": "setUpTestData",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestContentQuerySetChildren.test_children": {
            "name": "test_children",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.setUpTestData": {
            "name": "setUpTestData",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestContentQuerySetShares.test_followed": {
            "name": "test_followed",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.test_profile": {
            "name": "test_profile",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.test_profile_by_attr": {
            "name": "test_profile_by_attr",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.test_profile_pinned": {
            "name": "test_profile_pinned",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.test_profile_pinned_by_attr": {
            "name": "test_profile_pinned_by_attr",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetShares.test_shares": {
            "name": "test_shares",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetThroughs.setUpTestData": {
            "name": "setUpTestData",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "TestContentQuerySetThroughs.test_base_queryset_has_through": {
            "name": "test_base_queryset_has_through",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetThroughs.test_followed__has_through": {
            "name": "test_followed__has_through",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentQuerySetThroughs.test_profile__has_through": {
            "name": "test_profile__has_through",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_serializers.py": {
        "ContentSerializerTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ContentSerializerTestCase.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_with_parent": {
            "name": "test_create_with_parent",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_with_parent__user_cannot_see_parent": {
            "name": "test_create_with_parent__user_cannot_see_parent",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_with_parent__visibility_does_not_match_parent": {
            "name": "test_create_with_parent__visibility_does_not_match_parent",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_with_visibility": {
            "name": "test_create_with_visibility",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_without_parent": {
            "name": "test_create_without_parent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_without_visibility": {
            "name": "test_create_without_visibility",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_create_without_visibility__reply": {
            "name": "test_create_without_visibility__reply",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_has_twitter_oembed": {
            "name": "test_has_twitter_oembed",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_serializes_author": {
            "name": "test_serializes_author",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_save__collects_recipients": {
            "name": "test_save__collects_recipients",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_save__collects_recipients__reply_copies_from_parent": {
            "name": "test_save__collects_recipients__reply_copies_from_parent",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_save__removes_removed_recipients": {
            "name": "test_save__removes_removed_recipients",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_save__collects_recipients__include_following": {
            "name": "test_save__collects_recipients__include_following",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_serializes_through": {
            "name": "test_serializes_through",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_serializes_share_of": {
            "name": "test_serializes_share_of",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_serialize__recipients_list_empty_for_not_owners": {
            "name": "test_serialize__recipients_list_empty_for_not_owners",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_is_author_false_if_no_request": {
            "name": "test_user_is_author_false_if_no_request",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_is_author_false_if_not_authenticated": {
            "name": "test_user_is_author_false_if_not_authenticated",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_is_author_false_if_not_author": {
            "name": "test_user_is_author_false_if_not_author",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_is_author_true_if_author": {
            "name": "test_user_is_author_true_if_author",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_has_shared_false_if_no_request": {
            "name": "test_user_has_shared_false_if_no_request",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_has_shared_false_if_anonymous_user": {
            "name": "test_user_has_shared_false_if_anonymous_user",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_has_shared_false_if_not_shared": {
            "name": "test_user_has_shared_false_if_not_shared",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_user_has_shared_true_if_shared": {
            "name": "test_user_has_shared_true_if_shared",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_tags_if_no_tag": {
            "name": "test_tags_if_no_tag",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_tags_with_tag": {
            "name": "test_tags_with_tag",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_update_doesnt_allow_changing_parent": {
            "name": "test_update_doesnt_allow_changing_parent",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_validate_recipients": {
            "name": "test_validate_recipients",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_validate_recipients__fails_bad_recipients": {
            "name": "test_validate_recipients__fails_bad_recipients",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_validate_recipients__recipients_and_include_following_cant_both_be_empty": {
            "name": "test_validate_recipients__recipients_and_include_following_cant_both_be_empty",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentSerializerTestCase.test_validate_recipients__recipients_ignored_if_not_limited": {
            "name": "test_validate_recipients__recipients_ignored_if_not_limited",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_signals.py": {
        "TestContentMentionsChange.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentMentionsChange.test_adding_mention_triggers_notification": {
            "name": "test_adding_mention_triggers_notification",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestContentMentionsChange.test_adding_mention_triggers_notification__only_once": {
            "name": "test_adding_mention_triggers_notification__only_once",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestContentMentionsChange.test_removing_mention_does_not_trigger_notification": {
            "name": "test_removing_mention_does_not_trigger_notification",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestContentPostSave.test_calls_update_streams_with_content": {
            "name": "test_calls_update_streams_with_content",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": []
            }
        },
        "TestNotifyListeners.setUpTestData": {
            "name": "setUpTestData",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__public_no_tags_no_followers": {
            "name": "test_content_save_calls_streamconsumer_group_send__public_no_tags_no_followers",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__user_not_recently_active": {
            "name": "test_content_save_calls_streamconsumer_group_send__user_not_recently_active",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__limited_tags_and_followers": {
            "name": "test_content_save_calls_streamconsumer_group_send__limited_tags_and_followers",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__limited_no_followers": {
            "name": "test_content_save_calls_streamconsumer_group_send__limited_no_followers",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__public_with_followers": {
            "name": "test_content_save_calls_streamconsumer_group_send__public_with_followers",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__public_share_with_followers": {
            "name": "test_content_save_calls_streamconsumer_group_send__public_share_with_followers",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestNotifyListeners.test_content_save_calls_streamconsumer_group_send__replies": {
            "name": "test_content_save_calls_streamconsumer_group_send__replies",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_async": []
            }
        },
        "TestFederateContent.test_non_local_content_does_not_get_sent": {
            "name": "test_non_local_content_does_not_get_sent",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": [],
                "mock_send": []
            }
        },
        "TestFederateContent.test_local_content_with_federate_false_does_not_get_sent": {
            "name": "test_local_content_with_federate_false_does_not_get_sent",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": [],
                "mock_send": []
            }
        },
        "TestFederateContent.test_local_content_with_parent_sent_as_reply": {
            "name": "test_local_content_with_parent_sent_as_reply",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateContent.test_local_content_gets_sent": {
            "name": "test_local_content_gets_sent",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": [],
                "mock_send": []
            }
        },
        "TestFederateContent.test_local_content_update_gets_sent": {
            "name": "test_local_content_update_gets_sent",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": [],
                "mock_send": []
            }
        },
        "TestFederateContent.test_share_gets_sent": {
            "name": "test_share_gets_sent",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": [],
                "mock_send": []
            }
        },
        "TestFederateContentRetraction.test_non_local_content_retraction_does_not_get_sent": {
            "name": "test_non_local_content_retraction_does_not_get_sent",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateContentRetraction.test_local_content_retraction_gets_sent": {
            "name": "test_local_content_retraction_gets_sent",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateContentRetraction.test_exception_calls_logger": {
            "name": "test_exception_calls_logger",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_send": []
            }
        },
        "TestFetchPreview.test_fetch_content_preview_called": {
            "name": "test_fetch_content_preview_called",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch": []
            }
        },
        "TestFetchPreview.test_fetch_content_preview_exception_logger_called": {
            "name": "test_fetch_content_preview_exception_logger_called",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [],
                "fetch": []
            }
        },
        "TestRenderContent.test_render_content_called": {
            "name": "test_render_content_called",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRenderContent.test_render_content_exception_logger_called": {
            "name": "test_render_content_exception_logger_called",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_utils.py": {
        "TestSafeTextForMarkdown.test_plain_text_survives": {
            "name": "test_plain_text_survives",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_markdown_survives": {
            "name": "test_text_with_markdown_survives",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_markdown_code_survives": {
            "name": "test_text_with_markdown_code_survives",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_script_is_cleaned": {
            "name": "test_text_with_script_is_cleaned",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_html_is_cleaned": {
            "name": "test_text_with_html_is_cleaned",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_html_is_cleaned__mention_link_classes_preserved": {
            "name": "test_text_with_html_is_cleaned__mention_link_classes_preserved",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeTextForMarkdown.test_text_with_quotes_survives": {
            "name": "test_text_with_quotes_survives",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_plain_text_survives": {
            "name": "test_plain_text_survives",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_text_with_markdown_survives": {
            "name": "test_text_with_markdown_survives",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_text_with_markdown_code_is_cleaned": {
            "name": "test_text_with_markdown_code_is_cleaned",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_text_with_script_is_cleaned": {
            "name": "test_text_with_script_is_cleaned",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_text_with_html_is_cleaned": {
            "name": "test_text_with_html_is_cleaned",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeText.test_text_with_html_is_cleaned__mention_link_removed": {
            "name": "test_text_with_html_is_cleaned__mention_link_removed",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.setUpTestData": {
            "name": "setUpTestData",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFindUrlsInText.test_ignores_mention": {
            "name": "test_ignores_mention",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_returns_in_order_without_duplicates": {
            "name": "test_returns_in_order_without_duplicates",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_starts_with_url": {
            "name": "test_starts_with_url",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_numbers": {
            "name": "test_numbers",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_special_chars": {
            "name": "test_special_chars",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_urls_in_text": {
            "name": "test_urls_in_text",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_href_markdown": {
            "name": "test_href_markdown",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUrlsInText.test_without_protocol": {
            "name": "test_without_protocol",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_views.py": {
        "TestContentCreateView.setUpTestData": {
            "name": "setUpTestData",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestContentCreateView.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentCreateView.test_view_renders": {
            "name": "test_view_renders",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentCreateView.test_untrusted_editor_text_is_cleaned": {
            "name": "test_untrusted_editor_text_is_cleaned",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentCreateView.test_has_bookmarklet_in_context": {
            "name": "test_has_bookmarklet_in_context",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentBookmarkletView.setUpTestData": {
            "name": "setUpTestData",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestContentBookmarkletView.test_view_renders": {
            "name": "test_view_renders",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentUpdateViewCBV.setUpTestData": {
            "name": "setUpTestData",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestContentUpdateViewCBV.setUp": {
            "name": "setUp",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentUpdateViewCBV.test_untrusted_editor_text_is_cleaned": {
            "name": "test_untrusted_editor_text_is_cleaned",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentUpdateView.setUpTestData": {
            "name": "setUpTestData",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "TestContentUpdateView.test_limited_visibilities_keep_in_edit": {
            "name": "test_limited_visibilities_keep_in_edit",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentUpdateView.test_update_view_renders": {
            "name": "test_update_view_renders",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentUpdateView.test_update_view_raises_if_user_does_not_own_content": {
            "name": "test_update_view_raises_if_user_does_not_own_content",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentDeleteView._get_request_view_and_content": {
            "name": "_get_request_view_and_content",
            "location": 127,
            "return": [
                "tuple[typing.Union[ContentDeleteView,ContentFactory]]"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "next": [
                    "bool"
                ]
            }
        },
        "TestContentDeleteView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": [
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "rf": [
                    "dict[, ]"
                ]
            }
        },
        "TestContentDeleteView.test_delete_view_renders": {
            "name": "test_delete_view_renders",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": [],
                "rf": [
                    "bool"
                ]
            }
        },
        "TestContentDeleteView.test_delete_deletes_content": {
            "name": "test_delete_deletes_content",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": [],
                "rf": []
            }
        },
        "TestContentDeleteView.test_delete_view_raises_if_user_does_not_own_content": {
            "name": "test_delete_view_raises_if_user_does_not_own_content",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": [],
                "rf": [
                    "bool"
                ]
            }
        },
        "TestContentView.setUpTestData": {
            "name": "setUpTestData",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Sequence[]",
                    "typing.MutableMapping",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "TestContentView.test_content_view_redirects_to_login_for_private_content_except_if_owned": {
            "name": "test_content_view_redirects_to_login_for_private_content_except_if_owned",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentView.test_content_view_renders": {
            "name": "test_content_view_renders",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentView.test_content_view_renders_by_uuid": {
            "name": "test_content_view_renders_by_uuid",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentView.test_content_view_renders_by_slug": {
            "name": "test_content_view_renders_by_slug",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentView.test_redirects_by_content_type": {
            "name": "test_redirects_by_content_type",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentView.test_has_json_context": {
            "name": "test_has_json_context",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentReplyView.setUpTestData": {
            "name": "setUpTestData",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestContentReplyView.test_view_renders": {
            "name": "test_view_renders",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentReplyView.test_redirects_to_login_if_not_logged_in": {
            "name": "test_redirects_to_login_if_not_logged_in",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/test_viewsets.py": {
        "TestContentViewSet.setUpTestData": {
            "name": "setUpTestData",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestContentViewSet.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet._check_result_ids": {
            "name": "_check_result_ids",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "int"
                ]
            }
        },
        "TestContentViewSet._detail_access_tests": {
            "name": "_detail_access_tests",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestContentViewSet.test_list_content": {
            "name": "test_list_content",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_detail": {
            "name": "test_detail",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_update": {
            "name": "test_update",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_delete": {
            "name": "test_delete",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_post": {
            "name": "test_post",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_post___limited": {
            "name": "test_post___limited",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_post_creates_as_request_user": {
            "name": "test_post_creates_as_request_user",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_replies_access": {
            "name": "test_replies_access",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_replies_results": {
            "name": "test_replies_results",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_share": {
            "name": "test_share",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_shares_access": {
            "name": "test_shares_access",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentViewSet.test_shares_results": {
            "name": "test_shares_results",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.setUpTestData": {
            "name": "setUpTestData",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TestTagViewset.test_create": {
            "name": "test_create",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_delete": {
            "name": "test_delete",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_detail": {
            "name": "test_detail",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_follow": {
            "name": "test_follow",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_list": {
            "name": "test_list",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_unfollow": {
            "name": "test_unfollow",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagViewset.test_update": {
            "name": "test_update",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/content/tests/__init__.py": {},
    "socialhome-master/socialhome/contrib/__init__.py": {},
    "socialhome-master/socialhome/contrib/sites/__init__.py": {},
    "socialhome-master/socialhome/contrib/sites/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/contrib/sites/migrations/0002_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "socialhome-master/socialhome/contrib/sites/migrations/0003_auto_no_op.py": {},
    "socialhome-master/socialhome/contrib/sites/migrations/__init__.py": {},
    "socialhome-master/socialhome/federate/admin.py": {},
    "socialhome-master/socialhome/federate/apps.py": {},
    "socialhome-master/socialhome/federate/models.py": {},
    "socialhome-master/socialhome/federate/tasks.py": {
        "receive_task": {
            "name": "receive_task",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "uuid": [
                    "None"
                ]
            }
        },
        "send_content": {
            "name": "send_content",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "content_id": [
                    "int",
                    "None",
                    "set[int]"
                ],
                "activity_fid": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "recipient_id": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "_get_remote_participants_for_content": {
            "name": "_get_remote_participants_for_content",
            "location": 121,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "list[]",
                "typing.TextIO",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "target_content": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "participants": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "exclude": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "include_remote": [
                    "bool"
                ]
            }
        },
        "_get_remote_followers": {
            "name": "_get_remote_followers",
            "location": 146,
            "return": [
                "list[]"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "visibility": [
                    "str",
                    "bool"
                ],
                "exclude": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_limited_recipients": {
            "name": "_get_limited_recipients",
            "location": 155,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "None",
                    "list[O]"
                ],
                "content": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "send_reply": {
            "name": "send_reply",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "content_id": [
                    "str",
                    "int",
                    "None"
                ],
                "activity_fid": [
                    "str",
                    "int",
                    "None",
                    "dict[int, int]",
                    "float"
                ]
            }
        },
        "send_share": {
            "name": "send_share",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "content_id": [
                    "str",
                    "int",
                    "None"
                ],
                "activity_fid": [
                    "str",
                    "int",
                    "None",
                    "dict[int, int]",
                    "float"
                ]
            }
        },
        "send_content_retraction": {
            "name": "send_content_retraction",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "list[str]",
                    "str"
                ],
                "author_id": [
                    "int",
                    "str"
                ]
            }
        },
        "send_profile_retraction": {
            "name": "send_profile_retraction",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "profile": [
                    "str"
                ]
            }
        },
        "forward_entity": {
            "name": "forward_entity",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "target_content_id": [
                    "str",
                    "int"
                ]
            }
        },
        "send_follow_change": {
            "name": "send_follow_change",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "profile_id": [
                    "int"
                ],
                "followed_id": [
                    "int",
                    "str",
                    "None"
                ],
                "follow": [
                    "str"
                ]
            }
        },
        "send_profile": {
            "name": "send_profile",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "profile_id": [
                    "int"
                ],
                "recipients": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/federate/urls.py": {},
    "socialhome-master/socialhome/federate/views.py": {
        "host_meta_view": {
            "name": "host_meta_view",
            "location": 31,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "webfinger_view": {
            "name": "webfinger_view",
            "location": 37,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "hcard_view": {
            "name": "hcard_view",
            "location": 57,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "nodeinfo_well_known_view": {
            "name": "nodeinfo_well_known_view",
            "location": 83,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "nodeinfo_view": {
            "name": "nodeinfo_view",
            "location": 89,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "social_relay_view": {
            "name": "social_relay_view",
            "location": 114,
            "return": [
                "HttpResponseNotFound",
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "content_xml_view": {
            "name": "content_xml_view",
            "location": 126,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "None"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "content_fetch_view": {
            "name": "content_fetch_view",
            "location": 137,
            "return": [
                "HttpResponseRedirect",
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "list[]"
                ],
                "objtype": [
                    "str",
                    "dict[str, list[str]]",
                    "bool"
                ],
                "guid": [
                    "dict[, ]",
                    "tuple[int]"
                ]
            }
        },
        "ReceivePublicView.post": {
            "name": "post",
            "location": 173,
            "return": [
                "HttpResponse",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ReceiveUserView.post": {
            "name": "post",
            "location": 181,
            "return": [
                "HttpResponse",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "socialhome-master/socialhome/federate/__init__.py": {},
    "socialhome-master/socialhome/federate/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/federate/migrations/0002_payload_direction.py": {},
    "socialhome-master/socialhome/federate/migrations/__init__.py": {},
    "socialhome-master/socialhome/federate/tests/test_tasks.py": {
        "TestReceiveTask.setUpTestData": {
            "name": "setUpTestData",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestReceiveTask.test_receive_task_runs": {
            "name": "test_receive_task_runs",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_handle_receive": [],
                "mock_process_entities": []
            }
        },
        "TestReceiveTask.test_receive_task_returns_none_on_no_entities": {
            "name": "test_receive_task_returns_none_on_no_entities",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_handle_receive": [],
                "mock_process_entities": []
            }
        },
        "TestReceiveTask.test_receive_task_with_uuid": {
            "name": "test_receive_task_with_uuid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_handle_receive": [],
                "mock_process_entities": []
            }
        },
        "TestSendContent.setUpTestData": {
            "name": "setUpTestData",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "TestSendContent.test_only_limited_and_public_content_calls_make_federable_content": {
            "name": "test_only_limited_and_public_content_calls_make_federable_content",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": []
            }
        },
        "TestSendContent.test_handle_send_is_called": {
            "name": "test_handle_send_is_called",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_send": []
            }
        },
        "TestSendContent.test_handle_send_is_called__limited_content": {
            "name": "test_handle_send_is_called__limited_content",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_send": []
            }
        },
        "TestSendContent.test_warning_is_logged_on_no_entity": {
            "name": "test_warning_is_logged_on_no_entity",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_maker": []
            }
        },
        "TestSendContent.test_content_not_sent_in_debug_mode": {
            "name": "test_content_not_sent_in_debug_mode",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendContentRetraction.setUpTestData": {
            "name": "setUpTestData",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Any",
                    "None"
                ]
            }
        },
        "TestSendContentRetraction.test_limited_retraction_calls_get_recipients": {
            "name": "test_limited_retraction_calls_get_recipients",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_get": [],
                "mock_enqueue": []
            }
        },
        "TestSendContentRetraction.test_only_limited_and_public_content_calls_make_federable_retraction": {
            "name": "test_only_limited_and_public_content_calls_make_federable_retraction",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": []
            }
        },
        "TestSendContentRetraction.test_handle_create_payload_is_called": {
            "name": "test_handle_create_payload_is_called",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_enqueue": []
            }
        },
        "TestSendContentRetraction.test_warning_is_logged_on_no_entity": {
            "name": "test_warning_is_logged_on_no_entity",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_maker": []
            }
        },
        "TestSendContentRetraction.test_content_not_sent_in_debug_mode": {
            "name": "test_content_not_sent_in_debug_mode",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendProfileRetraction.setUpTestData": {
            "name": "setUpTestData",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestSendProfileRetraction.test_get_remote_followers_is_called": {
            "name": "test_get_remote_followers_is_called",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_followers": [],
                "mock_make": [],
                "mock_send": []
            }
        },
        "TestSendProfileRetraction.test_handle_send_is_called": {
            "name": "test_handle_send_is_called",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_send": []
            }
        },
        "TestSendProfileRetraction.test_limited_profile_retraction_not_sent_to_relay": {
            "name": "test_limited_profile_retraction_not_sent_to_relay",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_send": []
            }
        },
        "TestSendProfileRetraction.test_non_local_profile_does_not_get_sent": {
            "name": "test_non_local_profile_does_not_get_sent",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_send": []
            }
        },
        "TestSendProfileRetraction.test_non_public_or_limited_profile_does_not_get_sent": {
            "name": "test_non_public_or_limited_profile_does_not_get_sent",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_send": []
            }
        },
        "TestSendReply.setUpTestData": {
            "name": "setUpTestData",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestSendReply.test_send_reply__ignores_local_root_author": {
            "name": "test_send_reply__ignores_local_root_author",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_forward": [],
                "mock_sender": []
            }
        },
        "TestSendReply.test_send_reply__limited_content": {
            "name": "test_send_reply__limited_content",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_forward": [],
                "mock_sender": []
            }
        },
        "TestSendReply.test_send_reply__to_remote_author": {
            "name": "test_send_reply__to_remote_author",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_forward": [],
                "mock_sender": []
            }
        },
        "TestSendReply.test_send_reply__to_remote_follower": {
            "name": "test_send_reply__to_remote_follower",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": [],
                "mock_forward": [],
                "mock_sender": []
            }
        },
        "TestSendShare.setUpTestData": {
            "name": "setUpTestData",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSendShare.test_only_public_share_calls_make_federable_content": {
            "name": "test_only_public_share_calls_make_federable_content",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": []
            }
        },
        "TestSendShare.test_handle_send_is_called": {
            "name": "test_handle_send_is_called",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_send": []
            }
        },
        "TestSendShare.test_warning_is_logged_on_no_entity": {
            "name": "test_warning_is_logged_on_no_entity",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_maker": []
            }
        },
        "TestSendShare.test_content_not_sent_in_debug_mode": {
            "name": "test_content_not_sent_in_debug_mode",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendShare.test_doesnt_send_to_local_share_author": {
            "name": "test_doesnt_send_to_local_share_author",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maker": [],
                "mock_send": []
            }
        },
        "TestForwardEntity.setUpTestData": {
            "name": "setUpTestData",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestForwardEntity.test_forward_entity": {
            "name": "test_forward_entity",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestForwardEntity.test_forward_entity__limited_content": {
            "name": "test_forward_entity__limited_content",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestGetRemoteFollowers.setUpTestData": {
            "name": "setUpTestData",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestGetRemoteFollowers.test_all_remote_returned": {
            "name": "test_all_remote_returned",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRemoteFollowers.test_exclude_is_excluded": {
            "name": "test_exclude_is_excluded",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLimitedRecipients.setUpTestData": {
            "name": "setUpTestData",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "TestGetLimitedRecipients.test_correct_recipients_returned": {
            "name": "test_correct_recipients_returned",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFollow.setUpTestData": {
            "name": "setUpTestData",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TestSendFollow.test_send_follow_change": {
            "name": "test_send_follow_change",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_follow": [],
                "mock_profile": [],
                "mock_send": []
            }
        },
        "TestSendProfile.setUpTestData": {
            "name": "setUpTestData",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "TestSendProfile.test_send_local_profile": {
            "name": "test_send_local_profile",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_federable": [],
                "mock_get": [],
                "mock_send": []
            }
        },
        "TestSendProfile.test_skip_remote_profile": {
            "name": "test_skip_remote_profile",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make": []
            }
        },
        "TestSendProfile.test_send_to_given_recipients_only": {
            "name": "test_send_to_given_recipients_only",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_federable": [],
                "mock_send": []
            }
        }
    },
    "socialhome-master/socialhome/federate/tests/test_utils_entities.py": {
        "TestGetFederableObject.setUpTestData": {
            "name": "setUpTestData",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestGetFederableObject.test_content_returned": {
            "name": "test_content_returned",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_content_returned__site_content": {
            "name": "test_content_returned__site_content",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_content_not_returned__site_content_anonymous_user": {
            "name": "test_content_not_returned__site_content_anonymous_user",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_profile_not_returned__site_user_anonymous_user": {
            "name": "test_profile_not_returned__site_user_anonymous_user",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_profile_returned": {
            "name": "test_profile_returned",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_profile_returned__site_user": {
            "name": "test_profile_returned__site_user",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFederableObject.test_profile_returned_for_root_profile": {
            "name": "test_profile_returned_for_root_profile",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProfile.setUpTestData": {
            "name": "setUpTestData",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetProfile.test_profile_returned": {
            "name": "test_profile_returned",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeFederableRetraction.setUpTestData": {
            "name": "setUpTestData",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestMakeFederableRetraction.test_target_id_correct_for_share": {
            "name": "test_target_id_correct_for_share",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/federate/tests/test_utils_generic.py": {
        "TestQueuePayload.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueuePayload.test_calls_enqueue": {
            "name": "test_calls_enqueue",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestQueuePayload.test_calls_enqueue__with_uuid": {
            "name": "test_calls_enqueue__with_uuid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestQueuePayload.test_calls_enqueue__with_uuid_from_path": {
            "name": "test_calls_enqueue__with_uuid_from_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        }
    },
    "socialhome-master/socialhome/federate/tests/test_utils_tasks.py": {
        "TestProcessEntities.setUpTestData": {
            "name": "setUpTestData",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None"
                ]
            }
        },
        "TestProcessEntities.test_process_entity_post_is_called": {
            "name": "test_process_entity_post_is_called",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_post_is_called__with_receiving_profile": {
            "name": "test_process_entity_post_is_called__with_receiving_profile",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_retraction_is_called": {
            "name": "test_process_entity_retraction_is_called",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_comment_is_called": {
            "name": "test_process_entity_comment_is_called",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_comment_is_called__with_receiving_profile": {
            "name": "test_process_entity_comment_is_called__with_receiving_profile",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_follow_is_called": {
            "name": "test_process_entity_follow_is_called",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_process_entity_profile_is_called": {
            "name": "test_process_entity_profile_is_called",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_from": []
            }
        },
        "TestProcessEntities.test_process_entity_share_is_called": {
            "name": "test_process_entity_share_is_called",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": []
            }
        },
        "TestProcessEntities.test_logger_is_called_on_process_exception": {
            "name": "test_logger_is_called_on_process_exception",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sender": [],
                "mock_process": [],
                "mock_logger": []
            }
        },
        "TestProcessMentions.setUpTestData": {
            "name": "setUpTestData",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProcessMentions.test_addition_happens": {
            "name": "test_addition_happens",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessMentions.test_removal_happens": {
            "name": "test_removal_happens",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.setUpTestData": {
            "name": "setUpTestData",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "TestProcessEntityPost.test_post_is_created_from_entity": {
            "name": "test_post_is_created_from_entity",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_visibility_is_added_to_receiving_followers": {
            "name": "test_visibility_is_added_to_receiving_followers",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_visibility_is_added_to_receiving_profile": {
            "name": "test_visibility_is_added_to_receiving_profile",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_visibility_is_not_added_to_public_content": {
            "name": "test_visibility_is_not_added_to_public_content",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_entity_images_are_prefixed_to_post_text": {
            "name": "test_entity_images_are_prefixed_to_post_text",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_post_is_updated_from_entity": {
            "name": "test_post_is_updated_from_entity",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_post_text_fields_are_cleaned": {
            "name": "test_post_text_fields_are_cleaned",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityPost.test_local_content_is_skipped": {
            "name": "test_local_content_is_skipped",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": []
            }
        },
        "TestProcessEntityComment.setUpTestData": {
            "name": "setUpTestData",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestProcessEntityComment.setUp": {
            "name": "setUp",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_mentions_are_linked": {
            "name": "test_mentions_are_linked",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_reply_is_created_from_entity": {
            "name": "test_reply_is_created_from_entity",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_visibility__added_to_receiving_followers": {
            "name": "test_visibility__added_to_receiving_followers",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_visibility__added_to_receiving_profile": {
            "name": "test_visibility__added_to_receiving_profile",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_visibility__not_added_if_public_parent_content_if_no_visibility_on_comment": {
            "name": "test_visibility__not_added_if_public_parent_content_if_no_visibility_on_comment",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_visibility__added_if_public_parent_content_if_visibility_on_comment__non_public_comment": {
            "name": "test_visibility__added_if_public_parent_content_if_visibility_on_comment__non_public_comment",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_visibility__not_added_if_public_parent_content_if_visibility_on_comment__public_comment": {
            "name": "test_visibility__not_added_if_public_parent_content_if_visibility_on_comment__public_comment",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_entity_images_are_prefixed_to_post_text": {
            "name": "test_entity_images_are_prefixed_to_post_text",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_reply_is_updated_from_entity": {
            "name": "test_reply_is_updated_from_entity",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_reply_text_fields_are_cleaned": {
            "name": "test_reply_text_fields_are_cleaned",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityComment.test_does_not_forward_relayable_if_not_local_content": {
            "name": "test_does_not_forward_relayable_if_not_local_content",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rq": []
            }
        },
        "TestProcessEntityComment.test_forwards_relayable_if_local_content": {
            "name": "test_forwards_relayable_if_local_content",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rq": []
            }
        },
        "TestProcessEntityComment.test_local_reply_is_skipped": {
            "name": "test_local_reply_is_skipped",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update": []
            }
        },
        "TestProcessEntityRetraction.setUpTestData": {
            "name": "setUpTestData",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProcessEntityRetraction.setUp": {
            "name": "setUp",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityRetraction.test_non_post_entity_types_are_skipped": {
            "name": "test_non_post_entity_types_are_skipped",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        },
        "TestProcessEntityRetraction.test_does_nothing_if_content_doesnt_exist": {
            "name": "test_does_nothing_if_content_doesnt_exist",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        },
        "TestProcessEntityRetraction.test_does_nothing_if_content_is_not_local": {
            "name": "test_does_nothing_if_content_is_not_local",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        },
        "TestProcessEntityRetraction.test_does_nothing_if_content_author_is_not_same_as_remote_profile": {
            "name": "test_does_nothing_if_content_author_is_not_same_as_remote_profile",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": []
            }
        },
        "TestProcessEntityRetraction.test_deletes_content__content": {
            "name": "test_deletes_content__content",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityRetraction.test_deletes_content__object": {
            "name": "test_deletes_content__object",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityRetraction.test_deletes_content__reply": {
            "name": "test_deletes_content__reply",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityRetraction.test_deletes_content__share": {
            "name": "test_deletes_content__share",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityFollow.setUp": {
            "name": "setUp",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityFollow.test_follower_added_on_following_true": {
            "name": "test_follower_added_on_following_true",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityFollow.test_follower_removed_on_following_false": {
            "name": "test_follower_removed_on_following_false",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityFollow.test_follower_added_sends_a_notification": {
            "name": "test_follower_added_sends_a_notification",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProcessEntityShare.setUpTestData": {
            "name": "setUpTestData",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProcessEntityShare.test_does_not_forward_share_if_not_local_content": {
            "name": "test_does_not_forward_share_if_not_local_content",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rq": []
            }
        },
        "TestProcessEntityShare.test_forwards_share_if_local_content": {
            "name": "test_forwards_share_if_local_content",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rq": []
            }
        },
        "TestProcessEntityShare.test_share_is_created": {
            "name": "test_share_is_created",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityShare.test_share_is_not_created_if_no_target_found": {
            "name": "test_share_is_not_created_if_no_target_found",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestProcessEntityShare.test_share_cant_hijack_local_content": {
            "name": "test_share_cant_hijack_local_content",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessEntityShare.test_share_target_is_fetched_if_no_target_found": {
            "name": "test_share_target_is_fetched_if_no_target_found",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestGetSenderProfile.setUpTestData": {
            "name": "setUpTestData",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestGetSenderProfile.test_returns_existing_profile": {
            "name": "test_returns_existing_profile",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetSenderProfile.test_returns_none_on_existing_local_profile": {
            "name": "test_returns_none_on_existing_local_profile",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetSenderProfile.test_fetches_remote_profile_if_not_found": {
            "name": "test_fetches_remote_profile_if_not_found",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestGetSenderProfile.test_returns_none_if_no_remote_profile_found": {
            "name": "test_returns_none_if_no_remote_profile_found",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestGetSenderProfile.test_cleans_text_fields_in_profile": {
            "name": "test_cleans_text_fields_in_profile",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestMakeFederableContent.setUpTestData": {
            "name": "setUpTestData",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestMakeFederableContent.test_content_returns_entity": {
            "name": "test_content_returns_entity",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeFederableContent.test_reply_returns_entity": {
            "name": "test_reply_returns_entity",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeFederableContent.test_share_returns_entity": {
            "name": "test_share_returns_entity",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeFederableContent.test_returns_none_on_exception": {
            "name": "test_returns_none_on_exception",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestMakeFederableRetraction.test_returns_entity": {
            "name": "test_returns_entity",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeFederableRetraction.test_returns_none_on_exception": {
            "name": "test_returns_none_on_exception",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestMakeFederableProfile.test_make_federable_profile": {
            "name": "test_make_federable_profile",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSenderKeyFetcher.setUpTestData": {
            "name": "setUpTestData",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSenderKeyFetcher.test_existing_remote_profile_public_key_is_returned": {
            "name": "test_existing_remote_profile_public_key_is_returned",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSenderKeyFetcher.test_local_profile_is_skipped": {
            "name": "test_local_profile_is_skipped",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSenderKeyFetcher.test_remote_profile_public_key_is_returned": {
            "name": "test_remote_profile_public_key_is_returned",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_from_remote": [],
                "mock_retrieve": []
            }
        },
        "TestSenderKeyFetcher.test_nonexisting_remote_profile_is_logged": {
            "name": "test_nonexisting_remote_profile_is_logged",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_retrieve": []
            }
        }
    },
    "socialhome-master/socialhome/federate/tests/test_views.py": {
        "TestFederationDiscovery.setUpTestData": {
            "name": "setUpTestData",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "TestFederationDiscovery.test_host_meta_responds": {
            "name": "test_host_meta_responds",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_webfinger_responds_404_on_unknown_user": {
            "name": "test_webfinger_responds_404_on_unknown_user",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_webfinger_responds_200_on_known_user": {
            "name": "test_webfinger_responds_200_on_known_user",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_hcard_responds_on_404_on_unknown_user": {
            "name": "test_hcard_responds_on_404_on_unknown_user",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_hcard_responds_on_200_on_known_user": {
            "name": "test_hcard_responds_on_200_on_known_user",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_nodeinfo_wellknown_responds": {
            "name": "test_nodeinfo_wellknown_responds",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_nodeinfo_responds": {
            "name": "test_nodeinfo_responds",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFederationDiscovery.test_social_relay_responds": {
            "name": "test_social_relay_responds",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceivePublic.test_receive_public_responds": {
            "name": "test_receive_public_responds",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceiveUser.test_receive_user_responds_for_json_payload": {
            "name": "test_receive_user_responds_for_json_payload",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentXMLView.setUpTestData": {
            "name": "setUpTestData",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "TestContentXMLView.test_non_public_content_returns_404": {
            "name": "test_non_public_content_returns_404",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentXMLView.test_public_content_returns_success_code": {
            "name": "test_public_content_returns_success_code",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentXMLView.test_calls_make_federable_content": {
            "name": "test_calls_make_federable_content",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_getter": [],
                "mock_maker": []
            }
        },
        "TestContentXMLView.test_calls_get_full_xml_representation": {
            "name": "test_calls_get_full_xml_representation",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_getter": [],
                "mock_maker": []
            }
        },
        "TestContentFetchView.setUpTestData": {
            "name": "setUpTestData",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.MutableMapping",
                    "list[dict[str, typing.Any]]",
                    "typing.Type"
                ]
            }
        },
        "TestContentFetchView.test_invalid_objtype_returns_404": {
            "name": "test_invalid_objtype_returns_404",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentFetchView.test_non_public_content_returns_404": {
            "name": "test_non_public_content_returns_404",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentFetchView.test_public_content_returns_success_code": {
            "name": "test_public_content_returns_success_code",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentFetchView.test_remote_content_redirects": {
            "name": "test_remote_content_redirects",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeInfoView.test_view_responds_stats_off": {
            "name": "test_view_responds_stats_off",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeInfoView.test_view_responds_stats_on": {
            "name": "test_view_responds_stats_on",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSocialRelayView.test_view_responds__scope_all": {
            "name": "test_view_responds__scope_all",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSocialRelayView.test_view_responds__scope_none": {
            "name": "test_view_responds__scope_none",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSocialRelayView.test_view_responds__scope_invalid": {
            "name": "test_view_responds__scope_invalid",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/federate/tests/__init__.py": {},
    "socialhome-master/socialhome/federate/utils/entities.py": {
        "_make_post": {
            "name": "_make_post",
            "location": 21,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_make_comment": {
            "name": "_make_comment",
            "location": 38,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_make_share": {
            "name": "_make_share",
            "location": 56,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "list[]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_federable_object": {
            "name": "get_federable_object",
            "location": 75,
            "return": [
                "list[typing.Union[typing.Any,typing.Any]]",
                "str",
                "dict[str, dict[str, typing.Any]]",
                "bool",
                "dict[str, str]",
                "dict[str, dict[, ]]",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_profile": {
            "name": "get_profile",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "get_profiles_from_receivers": {
            "name": "get_profiles_from_receivers",
            "location": 108,
            "return": [],
            "arguments": {
                "receivers": [
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "get_user_private_key": {
            "name": "get_user_private_key",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "make_federable_content": {
            "name": "make_federable_content",
            "location": 144,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "make_federable_retraction": {
            "name": "make_federable_retraction",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "typing.Callable[..., None]",
                    "bool",
                    "str"
                ],
                "author": [
                    "None",
                    "list[list[str]]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "make_federable_profile": {
            "name": "make_federable_profile",
            "location": 189,
            "return": [
                "Profile",
                "None"
            ],
            "arguments": {
                "profile": [
                    "bool",
                    "str",
                    "Exception",
                    "dict[str, str]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/federate/utils/generic.py": {
        "get_matrix_config": {
            "name": "get_matrix_config",
            "location": 22,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {}
        },
        "get_nodeinfo2_data": {
            "name": "get_nodeinfo2_data",
            "location": 39,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, ]]]]"
            ],
            "arguments": {}
        },
        "get_outbound_payload_logger": {
            "name": "get_outbound_payload_logger",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "outbound_payload_logger": {
            "name": "outbound_payload_logger",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "dict[, ]"
                ],
                "protocol": [
                    "str",
                    "dict[, ]"
                ],
                "sender": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "queue_payload": {
            "name": "queue_payload",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "uuid": [
                    "None"
                ]
            }
        }
    },
    "socialhome-master/socialhome/federate/utils/tasks.py": {
        "get_sender_profile": {
            "name": "get_sender_profile",
            "location": 19,
            "return": [
                "None",
                "str",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int"
                ]
            }
        },
        "process_entities": {
            "name": "process_entities",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "entities": [
                    "list[]",
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "process_entity_follow": {
            "name": "process_entity_follow",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "typing.Type"
                ],
                "profile": [
                    "typing.Mapping",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "validate_against_old_content": {
            "name": "validate_against_old_content",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "fid": [
                    "str",
                    "int"
                ],
                "entity": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "profile": [
                    "str"
                ]
            }
        },
        "process_entity_post": {
            "name": "process_entity_post",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [],
                "profile": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "process_entity_comment": {
            "name": "process_entity_comment",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "typing.Type"
                ],
                "profile": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_embed_entity_images_to_post": {
            "name": "_embed_entity_images_to_post",
            "location": 197,
            "return": [
                "typing.Text",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "children": [
                    "str"
                ],
                "text": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_process_mentions": {
            "name": "_process_mentions",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "entity": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "_retract_content": {
            "name": "_retract_content",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "target_fid": [
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "profile": [
                    "list[]",
                    "int",
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "_retract_relationship": {
            "name": "_retract_relationship",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "target_uuid": [
                    "str"
                ],
                "profile": [
                    "str",
                    "float"
                ]
            }
        },
        "process_entity_retraction": {
            "name": "process_entity_retraction",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "typing.Type"
                ],
                "profile": [
                    "str",
                    "bytes",
                    "typing.Iterable[T]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "process_entity_share": {
            "name": "process_entity_share",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "profile": [
                    "dict[, ]"
                ]
            }
        },
        "sender_key_fetcher": {
            "name": "sender_key_fetcher",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "fid": [
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/federate/utils/__init__.py": {},
    "socialhome-master/socialhome/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/migrations/0002_default_robots_rules.py": {
        "forward": {
            "name": "forward",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "backward": {
            "name": "backward",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/migrations/0003_policydocument.py": {},
    "socialhome-master/socialhome/migrations/0004_add_default_policy_docs.py": {
        "forward": {
            "name": "forward",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "backward": {
            "name": "backward",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "socialhome-master/socialhome/migrations/__init__.py": {},
    "socialhome-master/socialhome/notifications/tasks.py": {
        "get_common_context": {
            "name": "get_common_context",
            "location": 19,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "get_root_content_participants": {
            "name": "get_root_content_participants",
            "location": 24,
            "return": [
                "set[]"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "exclude_user": [
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "bytes"
                ]
            }
        },
        "send_follow_notification": {
            "name": "send_follow_notification",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "follower_id": [
                    "int"
                ],
                "followed_id": [
                    "str",
                    "int"
                ]
            }
        },
        "send_mention_notification": {
            "name": "send_mention_notification",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "mention_profile_id": [
                    "int",
                    "list[int]"
                ],
                "content_id": [
                    "int",
                    "str"
                ]
            }
        },
        "send_reply_notifications": {
            "name": "send_reply_notifications",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "content_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "send_share_notification": {
            "name": "send_share_notification",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "share_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "send_data_export_ready_notification": {
            "name": "send_data_export_ready_notification",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "send_policy_document_update_notification": {
            "name": "send_policy_document_update_notification",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "docs": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "send_policy_document_update_notifications": {
            "name": "send_policy_document_update_notifications",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "docs": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/notifications/__init__.py": {},
    "socialhome-master/socialhome/notifications/tests/test_tasks.py": {
        "TestSendMentionNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSendMentionNotification.test_calls_send_email": {
            "name": "test_calls_send_email",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendPolicyDocumentUpdateNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestSendPolicyDocumentUpdateNotification.test_docs_good_values": {
            "name": "test_docs_good_values",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": []
            }
        },
        "TestSendPolicyDocumentUpdateNotification.test_docs_bad_value": {
            "name": "test_docs_bad_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendPolicyDocumentUpdateNotification.test_send_mail_call": {
            "name": "test_send_mail_call",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendPolicyDocumentUpdateNotifications.setUpTestData": {
            "name": "setUpTestData",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestSendPolicyDocumentUpdateNotifications.test_queued_for_users_with_verified_email": {
            "name": "test_queued_for_users_with_verified_email",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestSendReplyNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "None"
                ]
            }
        },
        "TestSendReplyNotification.test_calls_send_email": {
            "name": "test_calls_send_email",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendFollowNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSendFollowNotification.test_calls_send_email": {
            "name": "test_calls_send_email",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendShareNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSendShareNotification.test_calls_send_email": {
            "name": "test_calls_send_email",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestSendDataExportReadyNotification.setUpTestData": {
            "name": "setUpTestData",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestSendDataExportReadyNotification.test_calls_send_email": {
            "name": "test_calls_send_email",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        }
    },
    "socialhome-master/socialhome/notifications/tests/__init__.py": {},
    "socialhome-master/socialhome/search/apps.py": {},
    "socialhome-master/socialhome/search/urls.py": {},
    "socialhome-master/socialhome/search/views.py": {
        "GlobalSearchView.get_context_data": {
            "name": "get_context_data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalSearchView.get_queryset": {
            "name": "get_queryset",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalSearchView.get_tags_qs": {
            "name": "get_tags_qs",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalSearchView.get": {
            "name": "get",
            "location": 72,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GlobalSearchView.filter_queryset": {
            "name": "filter_queryset",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": []
            }
        }
    },
    "socialhome-master/socialhome/search/__init__.py": {},
    "socialhome-master/socialhome/search/tests/test_views.py": {
        "TestGlobalSearchViewQuerySet.setUpTestData": {
            "name": "setUpTestData",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable['Notification']"
                ]
            }
        },
        "TestGlobalSearchViewQuerySet.test_profile_visibility_authenticated_user": {
            "name": "test_profile_visibility_authenticated_user",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchViewQuerySet.test_profile_visibility_authenticated_staff_user": {
            "name": "test_profile_visibility_authenticated_staff_user",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchViewQuerySet.test_profile_visibility_anonymous_user": {
            "name": "test_profile_visibility_anonymous_user",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.setUpTestData": {
            "name": "setUpTestData",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Mapping",
                    "str",
                    "None"
                ]
            }
        },
        "TestGlobalSearchView.test_view_renders": {
            "name": "test_view_renders",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.test_returns_a_result__profile": {
            "name": "test_returns_a_result__profile",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.test_returns_a_result__tag": {
            "name": "test_returns_a_result__tag",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.test_direct_profile_match_goes_to_profile_view": {
            "name": "test_direct_profile_match_goes_to_profile_view",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.test_direct_tag_match_goes_to_tag_stream": {
            "name": "test_direct_tag_match_goes_to_tag_stream",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalSearchView.test_search_by_fid_fetches_unknown_profile": {
            "name": "test_search_by_fid_fetches_unknown_profile",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestGlobalSearchView.test_search_by_handle_fetches_unknown_profile": {
            "name": "test_search_by_handle_fetches_unknown_profile",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        },
        "TestGlobalSearchView.test_search_by_handle_lowercases_before_fetching": {
            "name": "test_search_by_handle_lowercases_before_fetching",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retrieve": []
            }
        }
    },
    "socialhome-master/socialhome/search/tests/__init__.py": {},
    "socialhome-master/socialhome/streams/apps.py": {},
    "socialhome-master/socialhome/streams/consumers.py": {
        "notify_listeners": {
            "name": "notify_listeners",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "typing.Collection",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "keys": [
                    "set[]",
                    "str",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[str],typing.Sequence[typing.Any]]]"
                ]
            }
        },
        "StreamConsumer.connect": {
            "name": "connect",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamConsumer.disconnect": {
            "name": "disconnect",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "StreamConsumer.get_stream_name": {
            "name": "get_stream_name",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamConsumer.notification": {
            "name": "notification",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "StreamConsumer.receive": {
            "name": "receive",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_data": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "list[dict[str, str]]",
                    "list[str]",
                    "bytes",
                    "dict[str, list[int]]"
                ],
                "bytes_data": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "socialhome-master/socialhome/streams/enums.py": {
        "StreamType.to_dict": {
            "name": "to_dict",
            "location": 30,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/streams/streams.py": {
        "add_to_redis": {
            "name": "add_to_redis",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[, ]"
                ],
                "through": [
                    "str",
                    "None",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "add_to_stream_for_users": {
            "name": "add_to_stream_for_users",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "content_id": [
                    "str",
                    "None",
                    "int"
                ],
                "through_id": [
                    "str",
                    "typing.Sequence[str]",
                    "int",
                    "typing.Collection",
                    "None"
                ],
                "stream_cls_name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "acting_profile_id": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "check_and_add_to_keys": {
            "name": "check_and_add_to_keys",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "stream_cls": [],
                "user": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "content": [
                    "bytes",
                    "None",
                    "dict[str, dict[typing.Any, int]]",
                    "str"
                ],
                "cache_keys": [
                    "int",
                    "dict[str, list[typing.Any]]",
                    "dict[, ]",
                    "list[]",
                    "list[list[typing.Any]]",
                    "list[str]",
                    "list[int]",
                    "list[list[int]]"
                ],
                "acting_profile": [
                    "int",
                    "str"
                ],
                "notify_keys": [
                    "bytes",
                    "dict[int, bytes]",
                    "dict[, ]",
                    "None",
                    "bool",
                    "str"
                ],
                "is_share": [
                    "bytes",
                    "str",
                    "int",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "get_precache_users_qs": {
            "name": "get_precache_users_qs",
            "location": 115,
            "return": [
                "str",
                "typing.Sequence[str]",
                "list[D]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]"
            ],
            "arguments": {
                "acting_profile": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_streams_with_content": {
            "name": "update_streams_with_content",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseStream.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_id": [
                    "None",
                    "str",
                    "int"
                ],
                "user": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "accept_ids": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "BaseStream.__str__": {
            "name": "__str__",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_accept_ids_content_ids": {
            "name": "get_accept_ids_content_ids",
            "location": 180,
            "return": [
                "tuple[typing.Union[list[str],dict[str, str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_cached_content_ids": {
            "name": "get_cached_content_ids",
            "location": 191,
            "return": [
                "tuple[typing.Union[list[],dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_cached_range": {
            "name": "get_cached_range",
            "location": 202,
            "return": [
                "tuple[typing.Union[list[],dict[, ]]]",
                "tuple[typing.Union[list[int],dict[, int]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BaseStream.init_redis_connection": {
            "name": "init_redis_connection",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_content": {
            "name": "get_content",
            "location": 217,
            "return": [
                "tuple[typing.Union[dict[str, str],typing.OrderedDict,dict[str, dict[str, str]],str,TypeError,list[str],list[None],int,dict[str, int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_content_ids": {
            "name": "get_content_ids",
            "location": 232,
            "return": [
                "tuple[]",
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_queryset": {
            "name": "get_queryset",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_target_streams": {
            "name": "get_target_streams",
            "location": 258,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "content": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[typing.Type]"
                ],
                "user": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "acting_profile": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[typing.Type]"
                ]
            }
        },
        "BaseStream.get_throughs_key": {
            "name": "get_throughs_key",
            "location": 268,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "BaseStream.key": {
            "name": "key",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.get_key_user_id": {
            "name": "get_key_user_id",
            "location": 289,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "BaseStream.key_extra": {
            "name": "key_extra",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.notify_key": {
            "name": "notify_key",
            "location": 310,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.should_cache_content": {
            "name": "should_cache_content",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "typing.IO",
                    "list[T]",
                    "None"
                ]
            }
        },
        "FollowedStream.get_queryset": {
            "name": "get_queryset",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "FollowedStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitedStream.get_queryset": {
            "name": "get_queryset",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "LimitedStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalStream.get_queryset": {
            "name": "get_queryset",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "LocalStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileStreamBase.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "float"
                ]
            }
        },
        "ProfileStreamBase.get_target_streams": {
            "name": "get_target_streams",
            "location": 369,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "content": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[typing.Type]"
                ],
                "user": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "acting_profile": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ProfileStreamBase.key_extra": {
            "name": "key_extra",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileStreamBase.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 377,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileAllStream.get_queryset": {
            "name": "get_queryset",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "ProfilePinnedStream.get_queryset": {
            "name": "get_queryset",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "PublicStream.get_queryset": {
            "name": "get_queryset",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str"
                ]
            }
        },
        "PublicStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagStream.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "typing.Type",
                    "Exception",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "TagStream.get_queryset": {
            "name": "get_queryset",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "str"
                ]
            }
        },
        "TagStream.get_target_streams": {
            "name": "get_target_streams",
            "location": 424,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "content": [
                    "bool"
                ],
                "user": [
                    "bool"
                ],
                "acting_profile": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[typing.Type]"
                ]
            }
        },
        "TagStream.key_extra": {
            "name": "key_extra",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 432,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagsStream.get_queryset": {
            "name": "get_queryset",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "single_id": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "TagsStream.notify_key_extra": {
            "name": "notify_key_extra",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tasks.py": {
        "delete_redis_keys": {
            "name": "delete_redis_keys",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "only_without_expiry": [
                    "bool"
                ]
            }
        },
        "get_precache_trim_size": {
            "name": "get_precache_trim_size",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "user_activities": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "groom_redis_precaches": {
            "name": "groom_redis_precaches",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "streams_tasks": {
            "name": "streams_tasks",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        }
    },
    "socialhome-master/socialhome/streams/views.py": {
        "BaseStreamView.dispatch": {
            "name": "dispatch",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "BaseStreamView.get_context_data": {
            "name": "get_context_data",
            "location": 26,
            "return": [
                "str",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamView.get_json_context": {
            "name": "get_json_context",
            "location": 34,
            "return": [
                "dict[typing.Text, typing.Union[bool,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamView.stream_name": {
            "name": "stream_name",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamView.stream_name_extra": {
            "name": "stream_name_extra",
            "location": 66,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamView.stream_type_value": {
            "name": "stream_type_value",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitedStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 77,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 90,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 103,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagStreamView.dispatch": {
            "name": "dispatch",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "TagStreamView.get_context_data": {
            "name": "get_context_data",
            "location": 127,
            "return": [
                "list[]",
                "dict[, ]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 135,
            "return": [
                "dict[typing.Union[str,typing.Text,typing.Text,typing.Text], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagStreamView.stream_name_extra": {
            "name": "stream_name_extra",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagsStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 152,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowedStreamView.get_page_meta": {
            "name": "get_page_meta",
            "location": 165,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/viewsets.py": {
        "StreamsAPIBaseView.dispatch": {
            "name": "dispatch",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "StreamsAPIBaseView.get": {
            "name": "get",
            "location": 22,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "StreamsAPIBaseView.get_content": {
            "name": "get_content",
            "location": 27,
            "return": [
                "tuple[typing.Union[list[],dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowedStreamAPIView.get_content": {
            "name": "get_content",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitedStreamAPIView.get_content": {
            "name": "get_content",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalStreamAPIView.get_content": {
            "name": "get_content",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileAllStreamAPIView.dispatch": {
            "name": "dispatch",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ProfileAllStreamAPIView.get_content": {
            "name": "get_content",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfilePinnedStreamAPIView.dispatch": {
            "name": "dispatch",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ProfilePinnedStreamAPIView.get_content": {
            "name": "get_content",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicStreamAPIView.get_content": {
            "name": "get_content",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagStreamAPIView.dispatch": {
            "name": "dispatch",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "TagStreamAPIView.get_content": {
            "name": "get_content",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TagsStreamAPIView.get_content": {
            "name": "get_content",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/__init__.py": {},
    "socialhome-master/socialhome/streams/templatetags/json_context.py": {
        "json_context": {
            "name": "json_context",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "context": [],
                "raise_error": [
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/streams/templatetags/__init__.py": {},
    "socialhome-master/socialhome/streams/tests/test_enums.py": {
        "TestStreamType.test_to_dict": {
            "name": "test_to_dict",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/test_streams.py": {
        "TestAddToRedis.test_adds_each_key": {
            "name": "test_adds_each_key",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_get": []
            }
        },
        "TestAddToRedis.test_returns_on_no_keys": {
            "name": "test_returns_on_no_keys",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_get": []
            }
        },
        "TestAddToStreamForUsers.setUpTestData": {
            "name": "setUpTestData",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestAddToStreamForUsers.test_calls_add_to_redis": {
            "name": "test_calls_add_to_redis",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_add": []
            }
        },
        "TestAddToStreamForUsers.test_calls_check_and_add_to_keys_for_each_user": {
            "name": "test_calls_check_and_add_to_keys_for_each_user",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check": []
            }
        },
        "TestAddToStreamForUsers.test_calls_check_and_add_to_keys_for_each_user__skipping_inactives": {
            "name": "test_calls_check_and_add_to_keys_for_each_user__skipping_inactives",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check": []
            }
        },
        "TestAddToStreamForUsers.test_returns_on_no_content": {
            "name": "test_returns_on_no_content",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_filter": []
            }
        },
        "TestCheckAndAddToKeys.setUpTestData": {
            "name": "setUpTestData",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestCheckAndAddToKeys.test_adds_if_should_cache": {
            "name": "test_adds_if_should_cache",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckAndAddToKeys.test_adds_to_multiple_stream_instances": {
            "name": "test_adds_to_multiple_stream_instances",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckAndAddToKeys.test_does_not_add_if_shouldnt_cache": {
            "name": "test_does_not_add_if_shouldnt_cache",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateStreamsWithContent.setUpTestData": {
            "name": "setUpTestData",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestUpdateStreamsWithContent.test_adds_with_local_user": {
            "name": "test_adds_with_local_user",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_add": [],
                "mock_enqueue": []
            }
        },
        "TestBaseStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "TestBaseStream.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseStream.test___str__": {
            "name": "test___str__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_cached_content_ids__calls": {
            "name": "test_get_cached_content_ids__calls",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_cached_content_ids__returns_empty_list_if_outside_cached_ids": {
            "name": "test_get_cached_content_ids__returns_empty_list_if_outside_cached_ids",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_cached_range": {
            "name": "test_get_cached_range",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_content": {
            "name": "test_get_content",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "TestBaseStream.test_get_content_ids__returns_right_ids_according_to_last_id_and_ordering": {
            "name": "test_get_content_ids__returns_right_ids_according_to_last_id_and_ordering",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_content_ids__limits_by_paginate_by": {
            "name": "test_get_content_ids__limits_by_paginate_by",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_content_ids__returns_cached_ids_if_enough_in_cache": {
            "name": "test_get_content_ids__returns_cached_ids_if_enough_in_cache",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_get_key_user_id": {
            "name": "test_get_key_user_id",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_init": {
            "name": "test_init",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_init_redis_connection": {
            "name": "test_init_redis_connection",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_queryset": []
            }
        },
        "TestBaseStream.test_should_cache_content": {
            "name": "test_should_cache_content",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queryset": []
            }
        },
        "TestFollowedStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFollowedStream.setUp": {
            "name": "setUp",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_get_content_ids__uses_cached_ids": {
            "name": "test_get_content_ids__uses_cached_ids",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_get_content_ids__fills_in_non_cached_content_up_to_pagination_amount": {
            "name": "test_get_content_ids__fills_in_non_cached_content_up_to_pagination_amount",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_get_throughs_key": {
            "name": "test_get_throughs_key",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_key": {
            "name": "test_key",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_only_followed_profile_content_returned": {
            "name": "test_only_followed_profile_content_returned",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_raises_if_no_user": {
            "name": "test_raises_if_no_user",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStream.test_should_cache_content": {
            "name": "test_should_cache_content",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "TestLocalStream.setUp": {
            "name": "setUp",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStream.test_key": {
            "name": "test_key",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStream.test_only_local_content_returned": {
            "name": "test_only_local_content_returned",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStream.test_should_cache_content": {
            "name": "test_should_cache_content",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProfileAllStream.setUp": {
            "name": "setUp",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStream.test_get_content_ids__uses_cached_ids": {
            "name": "test_get_content_ids__uses_cached_ids",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStream.test_get_queryset": {
            "name": "test_get_queryset",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStream.test_key": {
            "name": "test_key",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProfilePinnedStream.setUp": {
            "name": "setUp",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStream.test_get_content_ids__does_not_use_cached_ids": {
            "name": "test_get_content_ids__does_not_use_cached_ids",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStream.test_get_queryset": {
            "name": "test_get_queryset",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStream.test_key": {
            "name": "test_key",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestPublicStream.setUp": {
            "name": "setUp",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.test_get_content_ids_does_not_use_cached_ids": {
            "name": "test_get_content_ids_does_not_use_cached_ids",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.test_key": {
            "name": "test_key",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.test_only_public_content_returned": {
            "name": "test_only_public_content_returned",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStream.test_should_cache_content": {
            "name": "test_should_cache_content",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagStream.setUp": {
            "name": "setUp",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_get_content_ids_does_not_use_cached_ids": {
            "name": "test_get_content_ids_does_not_use_cached_ids",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_get_target_streams": {
            "name": "test_get_target_streams",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_key": {
            "name": "test_key",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_only_tagged_content_returned": {
            "name": "test_only_tagged_content_returned",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_raises_if_no_user": {
            "name": "test_raises_if_no_user",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_raises_if_no_tag": {
            "name": "test_raises_if_no_tag",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStream.test_should_cache_content": {
            "name": "test_should_cache_content",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStream.setUpTestData": {
            "name": "setUpTestData",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagsStream.setUp": {
            "name": "setUp",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStream.test_only_followed_tagged_content_returned": {
            "name": "test_only_followed_tagged_content_returned",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStream.test_raises_if_no_user": {
            "name": "test_raises_if_no_user",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/test_tasks.py": {
        "test_streams_tasks": {
            "name": "test_streams_tasks",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGroomRedisPrecaches.setUpTestData": {
            "name": "setUpTestData",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestGroomRedisPrecaches.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroomRedisPrecaches.test_grooming_should_keep_top_x__active_user": {
            "name": "test_grooming_should_keep_top_x__active_user",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroomRedisPrecaches.test_grooming_should_keep_top_x__inactive_user": {
            "name": "test_grooming_should_keep_top_x__inactive_user",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroomRedisPrecaches.test_grooming_should_allow_defining_none__active_user": {
            "name": "test_grooming_should_allow_defining_none__active_user",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroomRedisPrecaches.test_grooming_should_allow_defining_none__inactive_user": {
            "name": "test_grooming_should_allow_defining_none__inactive_user",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroomRedisPrecaches.test_user_fetched_from_db_only_once": {
            "name": "test_user_fetched_from_db_only_once",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/test_templatetags.py": {
        "TestJsonContext.test_empty_json_context_returns_falsy_values": {
            "name": "test_empty_json_context_returns_falsy_values",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonContext.test_serialisable_json_context_returns_script": {
            "name": "test_serialisable_json_context_returns_script",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonContext.test_json_context_with_non_json_serializable_value": {
            "name": "test_json_context_with_non_json_serializable_value",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonContext.test_json_context_unsafe_raises_with_non_json_serializable_value": {
            "name": "test_json_context_unsafe_raises_with_non_json_serializable_value",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/test_views.py": {
        "TestFollowedStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFollowedStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_renders_without_content": {
            "name": "test_renders_without_content",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_renders_with_content": {
            "name": "test_renders_with_content",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamView.test_redirects_to_login_if_not_authenticated": {
            "name": "test_redirects_to_login_if_not_authenticated",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestLimitedStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.test_renders": {
            "name": "test_renders",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.test_requires_being_logged_in": {
            "name": "test_requires_being_logged_in",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestLocalStreamView.test_does_not_require_being_logged_in": {
            "name": "test_does_not_require_being_logged_in",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.test_renders": {
            "name": "test_renders",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestPublicStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.test_renders": {
            "name": "test_renders",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamView.test_logged_in_user": {
            "name": "test_logged_in_user",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.test_renders": {
            "name": "test_renders",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.test_renders__by_uuid": {
            "name": "test_renders__by_uuid",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.setUpTestData": {
            "name": "setUpTestData",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagsStreamView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.test_renders": {
            "name": "test_renders",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.test_requires_being_logged_in": {
            "name": "test_requires_being_logged_in",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.test_stream_name": {
            "name": "test_stream_name",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.test_stream_type_value": {
            "name": "test_stream_type_value",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamView.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/test_viewsets.py": {
        "TestFollowedStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFollowedStreamAPIView.test_followed_content_returned": {
            "name": "test_followed_content_returned",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamAPIView.test_login_required": {
            "name": "test_login_required",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFollowedStreamAPIView.test_serializer_context": {
            "name": "test_serializer_context",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_serializer": []
            }
        },
        "TestFollowedStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestLimitedStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestLimitedStreamAPIView.test_limited_content_returned": {
            "name": "test_limited_content_returned",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamAPIView.test_login_required": {
            "name": "test_login_required",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestLocalStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestLocalStreamAPIView.test_local_content_returned": {
            "name": "test_local_content_returned",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamAPIView.test_login_not_required": {
            "name": "test_login_not_required",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestProfileAllStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProfileAllStreamAPIView.test_profile_content_returned": {
            "name": "test_profile_content_returned",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestProfilePinnedStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProfilePinnedStreamAPIView.test_profile_content_returned": {
            "name": "test_profile_content_returned",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilePinnedStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestPublicStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestPublicStreamAPIView.test_public_content_returned": {
            "name": "test_public_content_returned",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamAPIView.test_last_id_is_respected": {
            "name": "test_last_id_is_respected",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestTagStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagStreamAPIView.test_public_content_returned": {
            "name": "test_public_content_returned",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        },
        "TestTagsStreamAPIView.setUpTestData": {
            "name": "setUpTestData",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestTagsStreamAPIView.test_content_from_followed_tags_returned": {
            "name": "test_content_from_followed_tags_returned",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagsStreamAPIView.test_users_correct_stream_class": {
            "name": "test_users_correct_stream_class",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stream": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/utils.py": {
        "MockStream.get_content": {
            "name": "get_content",
            "location": 5,
            "return": [
                "tuple[typing.Union[list[],dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/streams/tests/__init__.py": {},
    "socialhome-master/socialhome/streams/urls/api.py": {},
    "socialhome-master/socialhome/streams/urls/views.py": {},
    "socialhome-master/socialhome/streams/urls/__init__.py": {},
    "socialhome-master/socialhome/tasks/apps.py": {
        "TasksConfig.ready": {
            "name": "ready",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tasks/__init__.py": {},
    "socialhome-master/socialhome/templatetags/string_utils.py": {
        "startswith": {
            "name": "startswith",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "sub": [
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/templatetags/__init__.py": {},
    "socialhome-master/socialhome/tests/environment.py": {
        "MockResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "socialhome-master/socialhome/tests/test_admin.py": {
        "TestPolicyDocumentAdmin.setUpTestData": {
            "name": "setUpTestData",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestPolicyDocumentAdmin.test_save_model__calls_edit_draft": {
            "name": "test_save_model__calls_edit_draft",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentAdmin.test_save_model__calls_publish": {
            "name": "test_save_model__calls_publish",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentAdmin.test_send_email__no_selection": {
            "name": "test_send_email__no_selection",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestPolicyDocumentAdmin.test_send_email__one_selection": {
            "name": "test_send_email__one_selection",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestPolicyDocumentAdmin.test_send_email__two_selections": {
            "name": "test_send_email__two_selections",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_api_docs.py": {
        "TestSchemaView.test_page_renders": {
            "name": "test_page_renders",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_environment.py": {
        "TestEnvironment.test_requests_mocks": {
            "name": "test_requests_mocks",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_signals.py": {
        "TestDeleteUploadFromDisk.test_calls_unlink": {
            "name": "test_calls_unlink",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_unlink": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_utils.py": {
        "TestGetFullMediaUrl.test_url_is_correct": {
            "name": "test_url_is_correct",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRedisConnection.test_get_redis_connection": {
            "name": "test_get_redis_connection",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_views.py": {
        "TestBaseView.test_signup_link_do_not_show_when_signup_are_closed": {
            "name": "test_signup_link_do_not_show_when_signup_are_closed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseView.test_signup_link_shows_when_signup_are_opened": {
            "name": "test_signup_link_shows_when_signup_are_opened",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentView.setUpTestData": {
            "name": "setUpTestData",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestPolicyDocumentView.test_privacy_policy_document": {
            "name": "test_privacy_policy_document",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentView.test_privacy_policy_document__not_published": {
            "name": "test_privacy_policy_document__not_published",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentView.test_tos_document": {
            "name": "test_tos_document",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyDocumentView.test_tos_document__not_published": {
            "name": "test_tos_document__not_published",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootProfile.setUpTestData": {
            "name": "setUpTestData",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestRootProfile.test_home_view_rendered_without_root_profile": {
            "name": "test_home_view_rendered_without_root_profile",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootProfile.test_logged_in_followed_stream_view_rendered_without_root_profile": {
            "name": "test_logged_in_followed_stream_view_rendered_without_root_profile",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootProfile.test_home_view_rendered_with_root_profile": {
            "name": "test_home_view_rendered_with_root_profile",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHomeViewLandingPagePreference.setUpTestData": {
            "name": "setUpTestData",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestHomeViewLandingPagePreference.test_renders_profile": {
            "name": "test_renders_profile",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHomeViewLandingPagePreference.test_renders_profile_all": {
            "name": "test_renders_profile_all",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHomeViewLandingPagePreference.test_renders_followed_stream": {
            "name": "test_renders_followed_stream",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHomeViewLandingPagePreference.test_renders_public_stream": {
            "name": "test_renders_public_stream",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomHomeViewLandingPage.setUpTestData": {
            "name": "setUpTestData",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestCustomHomeViewLandingPage.test_renders_custom_view": {
            "name": "test_renders_custom_view",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdownXImageUploadViewMethods.setUpTestData": {
            "name": "setUpTestData",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestMarkdownXImageUploadViewMethods.test_form_kwargs_has_user": {
            "name": "test_form_kwargs_has_user",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdownXImageUploadView.setUpTestData": {
            "name": "setUpTestData",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestMarkdownXImageUploadView.test_login_required": {
            "name": "test_login_required",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tests/test_viewsets.py": {
        "TestImageUploadView.setUpTestData": {
            "name": "setUpTestData",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestImageUploadView.test_image_upload": {
            "name": "test_image_upload",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObtainSocialhomeAuthToken.setUpTestData": {
            "name": "setUpTestData",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestObtainSocialhomeAuthToken.test_user_missing": {
            "name": "test_user_missing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObtainSocialhomeAuthToken.test_password_missing": {
            "name": "test_password_missing",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObtainSocialhomeAuthToken.test_unable_to_login": {
            "name": "test_unable_to_login",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObtainSocialhomeAuthToken.test_authentication": {
            "name": "test_authentication",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tests/utils.py": {
        "disable_requests": {
            "name": "disable_requests",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "disable_mailer": {
            "name": "disable_mailer",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "CreateDataMixin.create_local_and_remote_user": {
            "name": "create_local_and_remote_user",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str"
                ]
            }
        },
        "CreateDataMixin.create_content_set": {
            "name": "create_content_set",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "dict[, ]"
                ],
                "author": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "SocialhomeTestBase.create_local_and_remote_user": {
            "name": "create_local_and_remote_user",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "SocialhomeTestBase.create_content_set": {
            "name": "create_content_set",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[, ]",
                    "list[int]"
                ],
                "author": [
                    "None",
                    "typing.Type",
                    "dict[, ]",
                    "list[int]"
                ]
            }
        },
        "SocialhomeTestBase.get_request": {
            "name": "get_request",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "user": [
                    "int",
                    "dict[, ]",
                    "list[str]"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "SocialhomeTestBase.get_temp_image": {
            "name": "get_temp_image",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "SocialhomeTransactionTestCase.create_local_and_remote_user": {
            "name": "create_local_and_remote_user",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialhomeTransactionTestCase.create_content_set": {
            "name": "create_content_set",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "None"
                ]
            }
        },
        "disable_requests.MockResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "socialhome-master/socialhome/tests/__init__.py": {},
    "socialhome-master/socialhome/tests/templatetags/test_string_utils.py": {
        "TestStartswith.test_startswith": {
            "name": "test_startswith",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/tests/templatetags/__init__.py": {},
    "socialhome-master/socialhome/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "sociallogin": [
                    "dict[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/admin.py": {},
    "socialhome-master/socialhome/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/forms.py": {
        "ProfileForm.clean_name": {
            "name": "clean_name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.activity_key": {
            "name": "activity_key",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.url": {
            "name": "url",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_first_name": {
            "name": "get_first_name",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_last_name": {
            "name": "get_last_name",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 89,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.copy_picture_to_profile": {
            "name": "copy_picture_to_profile",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.init_pictures_on_disk": {
            "name": "init_pictures_on_disk",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mark_recently_active": {
            "name": "mark_recently_active",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.recently_active": {
            "name": "recently_active",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.create_activity": {
            "name": "create_activity",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "activity_type": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "object_id": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Profile.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_recipient_for_matrix_appservice": {
            "name": "get_recipient_for_matrix_appservice",
            "location": 207,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_recipient_for_visibility": {
            "name": "get_recipient_for_visibility",
            "location": 216,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "visibility": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Profile.federable": {
            "name": "federable",
            "location": 240,
            "return": [
                "UserType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.home_url": {
            "name": "home_url",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.local_url": {
            "name": "local_url",
            "location": 256,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.mxid": {
            "name": "mxid",
            "location": 262,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.name_or_handle": {
            "name": "name_or_handle",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.remote_url": {
            "name": "remote_url",
            "location": 285,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.save": {
            "name": "save",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.url": {
            "name": "url",
            "location": 337,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.generate_new_rsa_key": {
            "name": "generate_new_rsa_key",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bits": [
                    "int"
                ]
            }
        },
        "Profile.private_key": {
            "name": "private_key",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.key": {
            "name": "key",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.public": {
            "name": "public",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_local": {
            "name": "is_local",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.safer_image_url": {
            "name": "safer_image_url",
            "location": 378,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "str",
                    "float",
                    "typing.Sequence[str]",
                    "None",
                    "int"
                ]
            }
        },
        "Profile.safer_image_url_small": {
            "name": "safer_image_url_small",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.safer_image_url_medium": {
            "name": "safer_image_url_medium",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.safer_image_url_large": {
            "name": "safer_image_url_large",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.following_ids": {
            "name": "following_ids",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.username_part": {
            "name": "username_part",
            "location": 407,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.visible_to_user": {
            "name": "visible_to_user",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]"
                ]
            }
        },
        "Profile.get_first_name": {
            "name": "get_first_name",
            "location": 425,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_last_name": {
            "name": "get_last_name",
            "location": 433,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.absolute_image_url": {
            "name": "absolute_image_url",
            "location": 445,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "profile": [
                    "str"
                ],
                "image_name": [
                    "str",
                    "None"
                ]
            }
        },
        "Profile.from_remote_profile": {
            "name": "from_remote_profile",
            "location": 456,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "remote_profile": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/preferences.py": {},
    "socialhome-master/socialhome/users/querysets.py": {
        "ProfileQuerySet.active_local": {
            "name": "active_local",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileQuerySet.fed": {
            "name": "fed",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[T]",
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "bytes",
                    "tuple[]",
                    "bool"
                ]
            }
        },
        "ProfileQuerySet.fed_update_or_create": {
            "name": "fed_update_or_create",
            "location": 29,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "fid": [
                    "str"
                ],
                "values": [],
                "extra_lookups": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ProfileQuerySet.followers": {
            "name": "followers",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ProfileQuerySet.visible_for_user": {
            "name": "visible_for_user",
            "location": 65,
            "return": [
                "ProfileQuerySet"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/search_indexes.py": {
        "IntegerEnumField.convert": {
            "name": "convert",
            "location": 8,
            "return": [
                "None",
                "str",
                "int",
                "bytes",
                "list[]",
                "tuple[]",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "list[]",
                    "tuple[]",
                    "set[int]"
                ]
            }
        },
        "ProfileIndex.index_queryset": {
            "name": "index_queryset",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "using": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "ProfileIndex.should_update": {
            "name": "should_update",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/serializers.py": {
        "LimitedProfileSerializer.get_user_following": {
            "name": "get_user_following",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "ProfileSerializer.get_followed_tags": {
            "name": "get_followed_tags",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ProfileSerializer.get_following_count": {
            "name": "get_following_count",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProfileSerializer.get_followers_count": {
            "name": "get_followers_count",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "ProfileSerializer.get_has_pinned_content": {
            "name": "get_has_pinned_content",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ProfileSerializer.get_user_following": {
            "name": "get_user_following",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/signals.py": {
        "user_post_save": {
            "name": "user_post_save",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "on_commit_profile_following_change": {
            "name": "on_commit_profile_following_change",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "dict[str, typing.Any]"
                ],
                "pks": [
                    "str"
                ],
                "instance": []
            }
        },
        "profile_following_change": {
            "name": "profile_following_change",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "typing.IO",
                    "list[cleanslate.models.SourceRecord]",
                    "list[object]"
                ],
                "instance": [
                    "tuple[typing.Union[int,int]]"
                ],
                "action": [
                    "tuple[typing.Union[int,int]]"
                ],
                "pk_set": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "profile_post_save": {
            "name": "profile_post_save",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "list[]",
                    "str"
                ]
            }
        },
        "federate_profile": {
            "name": "federate_profile",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "dict[str, str]",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "federate_profile_retraction": {
            "name": "federate_profile_retraction",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "delete_user_pictures": {
            "name": "delete_user_pictures",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "list[list[str]]"
                ],
                "instance": []
            }
        }
    },
    "socialhome-master/socialhome/users/urls.py": {},
    "socialhome-master/socialhome/users/utils.py": {
        "generate_rsa_private_key": {
            "name": "generate_rsa_private_key",
            "location": 10,
            "return": [],
            "arguments": {
                "bits": [
                    "int"
                ]
            }
        },
        "get_pony_urls": {
            "name": "get_pony_urls",
            "location": 16,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "get_recently_active_user_ids": {
            "name": "get_recently_active_user_ids",
            "location": 26,
            "return": [
                "list[int]"
            ],
            "arguments": {}
        }
    },
    "socialhome-master/socialhome/users/views.py": {
        "DeleteAccountView.get_object": {
            "name": "get_object",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DeleteAccountView.get_success_url": {
            "name": "get_success_url",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserDetailView.get": {
            "name": "get",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserAllContentView.get": {
            "name": "get",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProfileViewMixin.dispatch": {
            "name": "dispatch",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ProfileViewMixin.get_json_context": {
            "name": "get_json_context",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewMixin.get_page_meta": {
            "name": "get_page_meta",
            "location": 82,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewMixin.set_object_and_data": {
            "name": "set_object_and_data",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewMixin.stream_name_extra": {
            "name": "stream_name_extra",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileDetailView.dispatch": {
            "name": "dispatch",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProfileDetailView.get_page_meta": {
            "name": "get_page_meta",
            "location": 117,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileAllContentView.get_page_meta": {
            "name": "get_page_meta",
            "location": 129,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizeContentProfileDetailView.get_queryset": {
            "name": "get_queryset",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrganizeContentProfileDetailView.post": {
            "name": "post",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "OrganizeContentProfileDetailView._save_sort_order": {
            "name": "_save_sort_order",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card_ids": []
            }
        },
        "OrganizeContentProfileDetailView.get_success_url": {
            "name": "get_success_url",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileUpdateView.get_object": {
            "name": "get_object",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "UserPictureUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserPictureUpdateView.get_object": {
            "name": "get_object",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "UserAPITokenView.get_object": {
            "name": "get_object",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "UserAPITokenView.get_context_data": {
            "name": "get_context_data",
            "location": 192,
            "return": [
                "str",
                "None",
                "int",
                "typing.Type",
                "dict[, ]",
                "frozenset",
                "dict[str, typing.Any]",
                "dict[str, typing.Union[None,typing.Any,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPITokenView.get_success_url": {
            "name": "get_success_url",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserAPITokenView.post": {
            "name": "post",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None"
                ]
            }
        },
        "BaseContactsView.get_context_data": {
            "name": "get_context_data",
            "location": 210,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContactsView.get_json_context": {
            "name": "get_json_context",
            "location": 217,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactsFollowingView.get_object": {
            "name": "get_object",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ContactsFollowersView.get_object": {
            "name": "get_object",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/viewsets.py": {
        "IsOwnProfileOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ],
                "view": [
                    "None"
                ]
            }
        },
        "IsOwnProfileOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "view": [
                    "None",
                    "dict[, ]"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "ProfileViewSet.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 46,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "None",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewSet.follow": {
            "name": "follow",
            "location": 54,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": [
                    "None",
                    "str"
                ]
            }
        },
        "ProfileViewSet.following": {
            "name": "following",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProfileViewSet.followers": {
            "name": "followers",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProfileViewSet.create_export": {
            "name": "create_export",
            "location": 78,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "pk": [
                    "None"
                ]
            }
        },
        "ProfileViewSet.unfollow": {
            "name": "unfollow",
            "location": 83,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": [
                    "None",
                    "str"
                ]
            }
        },
        "ProfileViewSet.retrieve_export": {
            "name": "retrieve_export",
            "location": 95,
            "return": [
                "Response",
                "HttpResponse"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [
                    "None"
                ]
            }
        },
        "UserViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserViewSet.recently_active": {
            "name": "recently_active",
            "location": 116,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/__init__.py": {},
    "socialhome-master/socialhome/users/management/__init__.py": {},
    "socialhome-master/socialhome/users/management/commands/delete_users_and_profiles.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle_users": {
            "name": "handle_users",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "list[U]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Command.handle_profiles": {
            "name": "handle_profiles",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profiles": [
                    "str"
                ],
                "lock_profiles": [
                    "bool"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/management/commands/merge_remote_profiles.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/management/commands/__init__.py": {},
    "socialhome-master/socialhome/users/migrations/0001_initial.py": {},
    "socialhome-master/socialhome/users/migrations/0002_add_guid_to_user.py": {},
    "socialhome-master/socialhome/users/migrations/0003_create_unique_index_on_user_guid.py": {},
    "socialhome-master/socialhome/users/migrations/0004_add_rsa_key_to_users.py": {},
    "socialhome-master/socialhome/users/migrations/0005_user_local.py": {},
    "socialhome-master/socialhome/users/migrations/0006_user_visibility.py": {},
    "socialhome-master/socialhome/users/migrations/0007_user_trusted_editor.py": {},
    "socialhome-master/socialhome/users/migrations/0008_user_handle.py": {},
    "socialhome-master/socialhome/users/migrations/0009_populate_user_handles.py": {
        "forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0010_set_user_handle_not_null.py": {},
    "socialhome-master/socialhome/users/migrations/0011_profile.py": {},
    "socialhome-master/socialhome/users/migrations/0012_move_users_content_to_profile.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0013_remove_fields_from_user.py": {},
    "socialhome-master/socialhome/users/migrations/0014_make_profile_nickname_not_editable.py": {},
    "socialhome-master/socialhome/users/migrations/0015_remove_profile_nickname.py": {},
    "socialhome-master/socialhome/users/migrations/0016_alter_max_length_of_username.py": {},
    "socialhome-master/socialhome/users/migrations/0017_fix_username_cases.py": {
        "forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0018_add_followers_and_following_to_user.py": {},
    "socialhome-master/socialhome/users/migrations/0019_alter_related_names_for_legacy_user_follow_fields.py": {},
    "socialhome-master/socialhome/users/migrations/0020_profile_following.py": {},
    "socialhome-master/socialhome/users/migrations/0021_migrate_to_profile_following.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0022_fill_missing_profile_images_with_default.py": {
        "forward": {
            "name": "forward",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0023_make_profile_following_asymmetrical.py": {},
    "socialhome-master/socialhome/users/migrations/0024_add_picture_to_user.py": {},
    "socialhome-master/socialhome/users/migrations/0025_user_picture_ppoi.py": {},
    "socialhome-master/socialhome/users/migrations/0026_make_new_stream_default.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0027_remove_profile_handle_validator.py": {},
    "socialhome-master/socialhome/users/migrations/0028_django2_extend_user_last_name_max_length.py": {},
    "socialhome-master/socialhome/users/migrations/0029_refactored_federation_ids.py": {},
    "socialhome-master/socialhome/users/migrations/0030_populate_profile_fid.py": {
        "forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0031_make_profile_uuid_editable_false.py": {},
    "socialhome-master/socialhome/users/migrations/0032_remove_user_relationship_fields.py": {},
    "socialhome-master/socialhome/users/migrations/0033_profile_followed_tags.py": {},
    "socialhome-master/socialhome/users/migrations/0034_set_profile_default_visibility_to_public.py": {},
    "socialhome-master/socialhome/users/migrations/0035_add_profile_federation_inboxes.py": {},
    "socialhome-master/socialhome/users/migrations/0036_populate_profile_federation_inboxes.py": {
        "forward": {
            "name": "forward",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0037_profile_protocol.py": {},
    "socialhome-master/socialhome/users/migrations/0038_populate_profile_protocol.py": {
        "forward": {
            "name": "forward",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0039_repopulate_profile_fid.py": {
        "forward": {
            "name": "forward",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0040_repopulate_profile_private_inbox.py": {
        "forward": {
            "name": "forward",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/migrations/0041_merge_protocol_profiles.py": {},
    "socialhome-master/socialhome/users/migrations/__init__.py": {},
    "socialhome-master/socialhome/users/tasks/exports.py": {
        "create_user_export": {
            "name": "create_user_export",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "UserExporter.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]"
                ],
                "request": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "UserExporter._create_final_zip": {
            "name": "_create_final_zip",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter._remove_previous_export": {
            "name": "_remove_previous_export",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter._store_data": {
            "name": "_store_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter._store_images": {
            "name": "_store_images",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.collect_data": {
            "name": "collect_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.create": {
            "name": "create",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.file_date": {
            "name": "file_date",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.file_path": {
            "name": "file_path",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.path": {
            "name": "path",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.notify": {
            "name": "notify",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.retrieve": {
            "name": "retrieve",
            "location": 118,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExporter.store": {
            "name": "store",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tasks/__init__.py": {},
    "socialhome-master/socialhome/users/templatetags/users.py": {
        "get_user_export_date": {
            "name": "get_user_export_date",
            "location": 9,
            "return": [],
            "arguments": {
                "context": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/templatetags/__init__.py": {},
    "socialhome-master/socialhome/users/tests/conftest.py": {
        "disable_network_calls": {
            "name": "disable_network_calls",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[, ]",
                    "list[utils.CWLObjectType]"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/tests/factories.py": {
        "get_random_image_url": {
            "name": "get_random_image_url",
            "location": 14,
            "return": [],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "UserFactory.with_verified_email": {
            "name": "with_verified_email",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "bool",
                    "str",
                    "None",
                    "typing.Generator[]",
                    "typing.Callable[, ]"
                ],
                "extracted": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedUserFactory._generate": {
            "name": "_generate",
            "location": 42,
            "return": [
                "dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "create": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "PublicUserFactory._generate": {
            "name": "_generate",
            "location": 51,
            "return": [
                "dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "create": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "SiteUserFactory._generate": {
            "name": "_generate",
            "location": 60,
            "return": [
                "dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "create": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "SelfUserFactory._generate": {
            "name": "_generate",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "create": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "UserWithKeyFactory._generate": {
            "name": "_generate",
            "location": 78,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "create": [
                    "typing.Type",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "UserWithContactFactory._generate": {
            "name": "_generate",
            "location": 93,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "typing.AbstractSet"
                ],
                "create": [
                    "typing.AbstractSet"
                ],
                "attrs": [
                    "dict[, ]",
                    "Exception",
                    "None"
                ]
            }
        },
        "ProfileFactory.set_fid": {
            "name": "set_fid",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extracted": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "created": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ProfileFactory.set_handle": {
            "name": "set_handle",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extracted": [
                    "bool",
                    "dict[bytes, str]"
                ],
                "created": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ProfileFactory.with_key": {
            "name": "with_key",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extracted": [
                    "bool",
                    "str"
                ],
                "created": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_models.py": {
        "TestUser.setUpTestData": {
            "name": "setUpTestData",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestUser.test__str__": {
            "name": "test__str__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_activity_key": {
            "name": "test_activity_key",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_absolute_url__root_profile": {
            "name": "test_get_absolute_url__root_profile",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_first_name": {
            "name": "test_get_first_name",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_last_name": {
            "name": "test_get_last_name",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_copy_picture_to_profile": {
            "name": "test_copy_picture_to_profile",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_picture": []
            }
        },
        "TestUser.test_mark_recently_active": {
            "name": "test_mark_recently_active",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_conn": []
            }
        },
        "TestUser.test_recently_active": {
            "name": "test_recently_active",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_conn": []
            }
        },
        "TestProfile.setUpTestData": {
            "name": "setUpTestData",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestProfile.test_generate_new_rsa_key": {
            "name": "test_generate_new_rsa_key",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_handle_can_have_port": {
            "name": "test_handle_can_have_port",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_home_url": {
            "name": "test_home_url",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_local_url": {
            "name": "test_local_url",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_mxid": {
            "name": "test_mxid",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_name_or_handle": {
            "name": "test_name_or_handle",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_remote_url": {
            "name": "test_remote_url",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_profile_image_urls_default_to_ponies": {
            "name": "test_profile_image_urls_default_to_ponies",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test___str__": {
            "name": "test___str__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_key_properties": {
            "name": "test_key_properties",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_get_first_name": {
            "name": "test_get_first_name",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_get_last_name": {
            "name": "test_get_last_name",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_safer_image_url_small": {
            "name": "test_safer_image_url_small",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_is_local": {
            "name": "test_is_local",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_from_remote_profile_relative_image_url": {
            "name": "test_from_remote_profile_relative_image_url",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_from_remote_profile_absolute_image_url": {
            "name": "test_from_remote_profile_absolute_image_url",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfile.test_from_remote_profile": {
            "name": "test_from_remote_profile",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_copy_picture_to_profile.MockCropped.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_querysets.py": {
        "TestProfileQuerySet.setUpTestData": {
            "name": "setUpTestData",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestProfileQuerySet.test_visible_for_user_unauthenticated_user": {
            "name": "test_visible_for_user_unauthenticated_user",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileQuerySet.test_visible_for_user_authenticated_user": {
            "name": "test_visible_for_user_authenticated_user",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileQuerySet.test_visible_for_user_staff_user": {
            "name": "test_visible_for_user_staff_user",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileQuerySet.test_followers": {
            "name": "test_followers",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_search_indexes.py": {
        "TestIntegerEnumField.test_convert": {
            "name": "test_convert",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIndex.setUpTestData": {
            "name": "setUpTestData",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestProfileIndex.test_index_queryset_doesnt_include_self_profiles": {
            "name": "test_index_queryset_doesnt_include_self_profiles",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_signals.py": {
        "TestUserPostSave.test_user_post_save_creates_a_profile": {
            "name": "test_user_post_save_creates_a_profile",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_init": []
            }
        },
        "TestUserPostSave.test_user_post_save_existing_user_calls_copy_picture_to_profile": {
            "name": "test_user_post_save_existing_user_calls_copy_picture_to_profile",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_init": []
            }
        },
        "TestProfileFollowingChange.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileFollowingChange.test_adding_follower__local_actor__creates_activity": {
            "name": "test_adding_follower__local_actor__creates_activity",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProfileFollowingChange.test_adding_follower__remote_actor__does_not_create_activity": {
            "name": "test_adding_follower__remote_actor__does_not_create_activity",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProfileFollowingChange.test_adding_remote_follower_triggers_federation_event": {
            "name": "test_adding_remote_follower_triggers_federation_event",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProfileFollowingChange.test_removing_follower__local_actor__creates_activity": {
            "name": "test_removing_follower__local_actor__creates_activity",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProfileFollowingChange.test_removing_follower__remote_actor__does_not_create_activity": {
            "name": "test_removing_follower__remote_actor__does_not_create_activity",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestProfileFollowingChange.test_removing_remote_follower_triggers_federation_event": {
            "name": "test_removing_remote_follower_triggers_federation_event",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        },
        "TestFederateProfile.test_non_local_profile_does_not_get_sent": {
            "name": "test_non_local_profile_does_not_get_sent",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateProfile.test_local_profile_gets_sent": {
            "name": "test_local_profile_gets_sent",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateProfileRetraction.test_non_local_profile_does_not_get_sent": {
            "name": "test_non_local_profile_does_not_get_sent",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestFederateProfileRetraction.test_local_profile_gets_sent": {
            "name": "test_local_profile_gets_sent",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send": []
            }
        },
        "TestDeleteUserPictures.test_user_pictures_are_deleted": {
            "name": "test_user_pictures_are_deleted",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_templatetags.py": {
        "TestGetUserExportDate.test_get_export_date": {
            "name": "test_get_export_date",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_views.py": {
        "TestDeleteAccountView.setUpTestData": {
            "name": "setUpTestData",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestDeleteAccountView.test_delete_confirm_renders": {
            "name": "test_delete_confirm_renders",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteAccountView.test_delete_succeeds": {
            "name": "test_delete_succeeds",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateView.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateView.test_updates_name": {
            "name": "test_updates_name",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileDetailView.setUpTestData": {
            "name": "setUpTestData",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestProfileDetailView._get_request_view_and_content": {
            "name": "_get_request_view_and_content",
            "location": 89,
            "return": [
                "tuple[typing.Union[ProfileDetailView,list[ContentFactory],int,set[str],typing.Type]]"
            ],
            "arguments": {
                "self": [],
                "create_content": [
                    "bool"
                ],
                "anonymous_user": [
                    "bool"
                ]
            }
        },
        "TestProfileDetailView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileDetailView.test_detail_view_renders": {
            "name": "test_detail_view_renders",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileDetailView.test_stream_name": {
            "name": "test_stream_name",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizeContentUserDetailView.setUpTestData": {
            "name": "setUpTestData",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestOrganizeContentUserDetailView._get_request_view_and_content": {
            "name": "_get_request_view_and_content",
            "location": 197,
            "return": [
                "tuple[typing.Union[OrganizeContentProfileDetailView,list[ContentFactory]]]"
            ],
            "arguments": {
                "self": [],
                "create_content": [
                    "bool"
                ]
            }
        },
        "TestOrganizeContentUserDetailView.test_view_renders": {
            "name": "test_view_renders",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizeContentUserDetailView.test_save_sort_order_updates_order": {
            "name": "test_save_sort_order_updates_order",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizeContentUserDetailView.test_save_sort_order_skips_non_qs_contents": {
            "name": "test_save_sort_order_skips_non_qs_contents",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizeContentUserDetailView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrganizeContentUserDetailView.test_login_required": {
            "name": "test_login_required",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileVisibilityForAnonymous.test_visible_to_self_profile_requires_login_for_anonymous": {
            "name": "test_visible_to_self_profile_requires_login_for_anonymous",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_user": [],
                "client": []
            }
        },
        "TestProfileVisibilityForAnonymous.test_visible_to_limited_profile_requires_login_for_anonymous": {
            "name": "test_visible_to_limited_profile_requires_login_for_anonymous",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_user": [],
                "client": []
            }
        },
        "TestProfileVisibilityForAnonymous.test_visible_to_site_profile_requires_login_for_anonymous": {
            "name": "test_visible_to_site_profile_requires_login_for_anonymous",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_user": [],
                "client": []
            }
        },
        "TestProfileVisibilityForAnonymous.test_public_profile_doesnt_require_login": {
            "name": "test_public_profile_doesnt_require_login",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_user": [],
                "client": []
            }
        },
        "TestProfileVisibilityForLoggedInUsers.test_visible_to_self_profile": {
            "name": "test_visible_to_self_profile",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": []
            }
        },
        "TestProfileVisibilityForLoggedInUsers.test_visible_to_limited_profile": {
            "name": "test_visible_to_limited_profile",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": []
            }
        },
        "TestProfileVisibilityForLoggedInUsers.test_visible_to_site_profile": {
            "name": "test_visible_to_site_profile",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": []
            }
        },
        "TestProfileVisibilityForLoggedInUsers.test_visible_to_public_profile": {
            "name": "test_visible_to_public_profile",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": []
            }
        },
        "TestUserAllContentView.setUpTestData": {
            "name": "setUpTestData",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestUserAllContentView.test_all_content_view_renders_right_view": {
            "name": "test_all_content_view_renders_right_view",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllContentView.setUpTestData": {
            "name": "setUpTestData",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "TestProfileAllContentView._get_request_view_and_content": {
            "name": "_get_request_view_and_content",
            "location": 367,
            "return": [
                "tuple[typing.Union[ProfileDetailView,list[ContentFactory],int,set[str],typing.Type]]"
            ],
            "arguments": {
                "self": [],
                "create_content": [
                    "bool"
                ],
                "anonymous_user": [
                    "bool"
                ]
            }
        },
        "TestProfileAllContentView.test_get_json_context": {
            "name": "test_get_json_context",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllContentView.test_renders_for_user": {
            "name": "test_renders_for_user",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllContentView.test_renders_for_remote_profile": {
            "name": "test_renders_for_remote_profile",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileAllContentView.test_stream_name": {
            "name": "test_stream_name",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactsFollowedView.setUpTestData": {
            "name": "setUpTestData",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "TestContactsFollowedView.test_login_required": {
            "name": "test_login_required",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContactsFollowersView.setUpTestData": {
            "name": "setUpTestData",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "TestContactsFollowersView.test_login_required": {
            "name": "test_login_required",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPITokenView.setUpTestData": {
            "name": "setUpTestData",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestUserAPITokenView.test_view_renders": {
            "name": "test_view_renders",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPITokenView.test_regenerate_token": {
            "name": "test_regenerate_token",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserAPITokenView.test_login_required": {
            "name": "test_login_required",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserPictureUpdateView.setUpTestData": {
            "name": "setUpTestData",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestUserPictureUpdateView.test_login_required_and_view_responds_with_correct_object": {
            "name": "test_login_required_and_view_responds_with_correct_object",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserPictureUpdateView.test_profile_picture_change": {
            "name": "test_profile_picture_change",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/test_viewsets.py": {
        "TestUserViewSet.setUpTestData": {
            "name": "setUpTestData",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestUserViewSet.test_user_list": {
            "name": "test_user_list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserViewSet.test_user_get": {
            "name": "test_user_get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.setUpTestData": {
            "name": "setUpTestData",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestProfileViewSet.test_create_export__permissions": {
            "name": "test_create_export__permissions",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_followed_tags__self": {
            "name": "test_followed_tags__self",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_followed_tags__other_user": {
            "name": "test_followed_tags__other_user",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_followed_tags__staff_user": {
            "name": "test_followed_tags__staff_user",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_profile_list": {
            "name": "test_profile_list",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_profile_get": {
            "name": "test_profile_get",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_profile_edit": {
            "name": "test_profile_edit",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_read_only_fields": {
            "name": "test_read_only_fields",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_retrieve_export": {
            "name": "test_retrieve_export",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_user_follow": {
            "name": "test_user_follow",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_user_remove_follower": {
            "name": "test_user_remove_follower",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_user_following__false_when_not_logged_in": {
            "name": "test_user_following__false_when_not_logged_in",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_user_following__false_when_not_following": {
            "name": "test_user_following__false_when_not_following",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_user_following__true_when_following": {
            "name": "test_user_following__true_when_following",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_following": {
            "name": "test_following",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileViewSet.test_followers": {
            "name": "test_followers",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/__init__.py": {},
    "socialhome-master/socialhome/users/tests/tasks/test_exports.py": {
        "UserExportTestBase.setUpTestData": {
            "name": "setUpTestData",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, bool]",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "UserExportTestBase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUserExport.test_export_create": {
            "name": "test_export_create",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserExporter.setUpTestData": {
            "name": "setUpTestData",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "TestUserExporter.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserExporter.test_collect_data": {
            "name": "test_collect_data",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserExporter.test_notify": {
            "name": "test_notify",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": []
            }
        }
    },
    "socialhome-master/socialhome/users/tests/tasks/__init__.py": {},
    "socialhome-master/translate/extract.py": {
        "extract_extrajs": {
            "name": "extract_extrajs",
            "location": 11,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "fileobj": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "keywords": [
                    "list[str]",
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "comment_tags": [
                    "bytes"
                ],
                "options": []
            }
        }
    }
}
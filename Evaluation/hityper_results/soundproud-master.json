{
    "soundproud-master/web/manage.py": {},
    "soundproud-master/web/acceptance_tests/base.py": {
        "FunctionalTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Exception"
                ]
            }
        },
        "FunctionalTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "str"
                ]
            }
        },
        "FunctionalTestCase.addCleanup": {
            "name": "addCleanup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "FunctionalTestCase.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "dict[str, int]",
                    "list[float]",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "tuple[int]"
                ]
            }
        },
        "FunctionalTestCase.stopTest": {
            "name": "stopTest",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "FunctionalTestCase.passed": {
            "name": "passed",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTestCase.errored": {
            "name": "errored",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTestCase.failed": {
            "name": "failed",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTestCase.screen_shot": {
            "name": "screen_shot",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTestCase.url": {
            "name": "url",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FunctionalTestCase.reverse": {
            "name": "reverse",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/acceptance_tests/test_stream.py": {
        "StreamTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_playing_tracks": {
            "name": "test_playing_tracks",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_pausing_tracks": {
            "name": "test_pausing_tracks",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_track_progress": {
            "name": "test_track_progress",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase._assert_within_percentage_delta": {
            "name": "_assert_within_percentage_delta",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [],
                "second": [
                    "int",
                    "float"
                ],
                "percentage": [
                    "int"
                ]
            }
        },
        "StreamTestCase.test_seeking_track": {
            "name": "test_seeking_track",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_no_tracks_present": {
            "name": "test_no_tracks_present",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_plays_next_track_automatically": {
            "name": "test_plays_next_track_automatically",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_plays_next_track_after_archive_if_playing": {
            "name": "test_plays_next_track_after_archive_if_playing",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_sets_next_track_after_archive_if_paused": {
            "name": "test_sets_next_track_after_archive_if_paused",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_tracks_sorted_by_date_created_descending": {
            "name": "test_tracks_sorted_by_date_created_descending",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_archives_tracks_via_player": {
            "name": "test_archives_tracks_via_player",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_archives_tracks_via_stream_track": {
            "name": "test_archives_tracks_via_stream_track",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_archiving_track_plays_next_track": {
            "name": "test_archiving_track_plays_next_track",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_track_is_displayed_between_refreshes": {
            "name": "test_track_is_displayed_between_refreshes",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase.test_filtering_stream_shows_correct_tracks": {
            "name": "test_filtering_stream_shows_correct_tracks",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamTestCase._test_archives_tracks_via": {
            "name": "_test_archives_tracks_via",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entrypoint": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "int",
                    "float"
                ]
            }
        },
        "StreamPage.track_with_id_present": {
            "name": "track_with_id_present",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "track_id": [
                    "int"
                ]
            }
        },
        "StreamPage.tracks": {
            "name": "tracks",
            "location": 173,
            "return": [
                "list[Track]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.audio": {
            "name": "audio",
            "location": 178,
            "return": [
                "Audio"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.player": {
            "name": "player",
            "location": 182,
            "return": [
                "Player"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.archived_filter": {
            "name": "archived_filter",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.unarchived_filter": {
            "name": "unarchived_filter",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.audio_is_playing": {
            "name": "audio_is_playing",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamPage.audio_progress": {
            "name": "audio_progress",
            "location": 201,
            "return": [
                "AudioProgress"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "bool"
                ]
            }
        },
        "Player.play_next_button": {
            "name": "play_next_button",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.archive_button": {
            "name": "archive_button",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Audio.source": {
            "name": "source",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Audio.source_is_prefixed_properly": {
            "name": "source_is_prefixed_properly",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Audio.is_playing": {
            "name": "is_playing",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Audio.current_time": {
            "name": "current_time",
            "location": 239,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Audio.total_time": {
            "name": "total_time",
            "location": 243,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioProgress.progress_el": {
            "name": "progress_el",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioProgress.has_styles": {
            "name": "has_styles",
            "location": 254,
            "return": [
                "element_has_attribute"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioProgress.percentage_complete": {
            "name": "percentage_complete",
            "location": 258,
            "return": [
                "Decimal",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "element_has_attribute.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "bool"
                ],
                "attribute": [
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "bool"
                ]
            }
        },
        "element_has_attribute.__call__": {
            "name": "__call__",
            "location": 281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "dict[, ]"
                ]
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.play_or_pause_button": {
            "name": "play_or_pause_button",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Track.archive_button": {
            "name": "archive_button",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Track.listen_count": {
            "name": "listen_count",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/acceptance_tests/__init__.py": {},
    "soundproud-master/web/listen/admin.py": {},
    "soundproud-master/web/listen/apps.py": {},
    "soundproud-master/web/listen/models.py": {},
    "soundproud-master/web/listen/serializers.py": {},
    "soundproud-master/web/listen/urls.py": {},
    "soundproud-master/web/listen/views.py": {},
    "soundproud-master/web/listen/__init__.py": {},
    "soundproud-master/web/listen/migrations/0001_initial.py": {},
    "soundproud-master/web/listen/migrations/__init__.py": {},
    "soundproud-master/web/listen/tests/factories.py": {},
    "soundproud-master/web/listen/tests/test_models.py": {},
    "soundproud-master/web/listen/tests/__init__.py": {},
    "soundproud-master/web/soundproud/celery.py": {},
    "soundproud-master/web/soundproud/gunicorn_config.py": {
        "workers_count": {
            "name": "workers_count",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "soundproud-master/web/soundproud/models.py": {},
    "soundproud-master/web/soundproud/urls.py": {},
    "soundproud-master/web/soundproud/wsgi.py": {},
    "soundproud-master/web/soundproud/__init__.py": {},
    "soundproud-master/web/soundproud/settings/config.py": {},
    "soundproud-master/web/soundproud/settings/django.py": {},
    "soundproud-master/web/soundproud/settings/django_additions.py": {},
    "soundproud-master/web/soundproud/settings/env.py": {},
    "soundproud-master/web/soundproud/settings/utility.py": {
        "log_warning": {
            "name": "log_warning",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "None",
                    "typing.Type"
                ],
                "module_name": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "env_get_or_warn": {
            "name": "env_get_or_warn",
            "location": 17,
            "return": [],
            "arguments": {
                "variable": [
                    "str",
                    "None",
                    "set[str]"
                ]
            }
        }
    },
    "soundproud-master/web/soundproud/settings/__init__.py": {},
    "soundproud-master/web/soundproud/tests/test_gunicorn_config.py": {
        "WorkersCountTests.test_sets_workers_according_to_cpu_count": {
            "name": "test_sets_workers_according_to_cpu_count",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multiprocessing": []
            }
        },
        "GunicornConfigTests.test_sets_workers_according_to_get_workers": {
            "name": "test_sets_workers_according_to_get_workers",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/soundproud/tests/test_settings_utility.py": {
        "EnvGetOrWarnTestCase.test_when_environment_variable_set_returns": {
            "name": "test_when_environment_variable_set_returns",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "os": [
                    "int"
                ]
            }
        },
        "EnvGetOrWarnTestCase.test_when_environment_variable_not_set_it_logs_warning": {
            "name": "test_when_environment_variable_not_set_it_logs_warning",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "os": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "EnvGetOrWarnTestCase.test_when_environment_variable_not_set_returns_none": {
            "name": "test_when_environment_variable_not_set_returns_none",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "os": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "LogWarningTestCase.test_gets_logger_properly": {
            "name": "test_gets_logger_properly",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_mock": []
            }
        },
        "LogWarningTestCase.test_logs_warning_with_logger": {
            "name": "test_logs_warning_with_logger",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_mock": []
            }
        },
        "LogWarningTestCase.test_not_passing_module_name_raises_error": {
            "name": "test_not_passing_module_name_raises_error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/soundproud/tests/__init__.py": {},
    "soundproud-master/web/stream/admin.py": {},
    "soundproud-master/web/stream/apps.py": {},
    "soundproud-master/web/stream/models.py": {},
    "soundproud-master/web/stream/tasks.py": {
        "persist_latest_stream_tracks": {
            "name": "persist_latest_stream_tracks",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "soundproud-master/web/stream/urls.py": {},
    "soundproud-master/web/stream/views.py": {
        "stream": {
            "name": "stream",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "soundproud-master/web/stream/__init__.py": {},
    "soundproud-master/web/stream/gateways/soundcloud.py": {
        "soundcloud_client": {
            "name": "soundcloud_client",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "_remove_duplicate_tracks": {
            "name": "_remove_duplicate_tracks",
            "location": 41,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tracks": []
            }
        },
        "_remove_already_persisted_tracks": {
            "name": "_remove_already_persisted_tracks",
            "location": 47,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "tracks": [
                    "str"
                ]
            }
        },
        "_resource_to_track_entries": {
            "name": "_resource_to_track_entries",
            "location": 58,
            "return": [],
            "arguments": {
                "resource": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_filter_track_entries": {
            "name": "_filter_track_entries",
            "location": 64,
            "return": [
                "list[typing.Union[dict[str, str],str]]"
            ],
            "arguments": {
                "entries": [
                    "list[dict[str, str]]",
                    "tuple[]",
                    "list[str]"
                ]
            }
        },
        "_entry_to_track_params": {
            "name": "_entry_to_track_params",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[bytes,str]]"
            ],
            "arguments": {
                "entry": [
                    "bytes",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_collection_from_resource": {
            "name": "_collection_from_resource",
            "location": 78,
            "return": [],
            "arguments": {
                "resource": [
                    "float",
                    "typing.Sequence[float]",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]"
                ]
            }
        },
        "_entries_from_collection": {
            "name": "_entries_from_collection",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {
                "collection": [
                    "tuple[typing.Union[int,int]]",
                    "tuple[]"
                ]
            }
        },
        "_entry_is_track": {
            "name": "_entry_is_track",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "list[app.models.Question]"
                ]
            }
        },
        "SoundcloudAPI.retrieve_affiliated_tracks": {
            "name": "retrieve_affiliated_tracks",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [
                    "int"
                ]
            }
        },
        "SoundcloudGateway.get_stream_tracks": {
            "name": "get_stream_tracks",
            "location": 24,
            "return": [
                "list[Track]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGateway.get_unpersisted_stream_tracks": {
            "name": "get_unpersisted_stream_tracks",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/stream/gateways/__init__.py": {},
    "soundproud-master/web/stream/management/__init__.py": {},
    "soundproud-master/web/stream/management/commands/persist_new_tracks.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/stream/management/commands/__init__.py": {},
    "soundproud-master/web/stream/migrations/__init__.py": {},
    "soundproud-master/web/stream/tests/factories.py": {
        "soundcloud_track": {
            "name": "soundcloud_track",
            "location": 5,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, ]]]]"
            ],
            "arguments": {}
        },
        "soundcloud_playlist": {
            "name": "soundcloud_playlist",
            "location": 20,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, ]]]]"
            ],
            "arguments": {}
        }
    },
    "soundproud-master/web/stream/tests/test_gateways_soundcloud.py": {
        "SoundcloudClientTests.test_calls_soundcloud_client": {
            "name": "test_calls_soundcloud_client",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soundcloud": []
            }
        },
        "SoundcloudClientTests.test_client_instantiated_correctly": {
            "name": "test_client_instantiated_correctly",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soundcloud": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "SoundcloudAPIRetrieveAffiliatedTracksTests.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudAPIRetrieveAffiliatedTracksTests.test_retrieve_affiliated_tracks_calls_api_correctly": {
            "name": "test_retrieve_affiliated_tracks_calls_api_correctly",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "SoundcloudAPIRetrieveAffiliatedTracksTests.test_retrieve_affiliated_tracks_returns_api_call": {
            "name": "test_retrieve_affiliated_tracks_returns_api_call",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "SoundcloudAPIRetrieveAffiliatedTracksTests.test_limit_can_be_passed_to_adjust": {
            "name": "test_limit_can_be_passed_to_adjust",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_calls_api": {
            "name": "test_get_stream_tracks_calls_api",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_creates_proper_titles": {
            "name": "test_get_stream_tracks_creates_proper_titles",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_creates_stream_urls": {
            "name": "test_get_stream_tracks_creates_stream_urls",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_creates_artwork_urls": {
            "name": "test_get_stream_tracks_creates_artwork_urls",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_passes_empty_string_for_missing_artwork": {
            "name": "test_get_stream_tracks_passes_empty_string_for_missing_artwork",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_creates_username": {
            "name": "test_get_stream_tracks_creates_username",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_creates_gateway_id": {
            "name": "test_get_stream_tracks_creates_gateway_id",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetStreamTracksTests.test_get_stream_tracks_excludes_playlists": {
            "name": "test_get_stream_tracks_excludes_playlists",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetUnpersistedStreamTracksTests.setUp": {
            "name": "setUp",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetUnpersistedStreamTracksTests.test_calls_get_stream_tracks_properly": {
            "name": "test_calls_get_stream_tracks_properly",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetUnpersistedStreamTracksTests.test_returns_only_tracks_that_do_not_match_existing_gateway_id": {
            "name": "test_returns_only_tracks_that_do_not_match_existing_gateway_id",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundcloudGatewayGetUnpersistedStreamTracksTests.test_does_not_return_multiple_entries_for_duplicate_gateway_ids": {
            "name": "test_does_not_return_multiple_entries_for_duplicate_gateway_ids",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/stream/tests/test_tasks.py": {
        "PersistLatestStreamTracksTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistLatestStreamTracksTestCase.test_persists_stream_tracks": {
            "name": "test_persists_stream_tracks",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TrackManager": []
            }
        }
    },
    "soundproud-master/web/stream/tests/test_views.py": {
        "StreamTestCase.test_uses_correct_template": {
            "name": "test_uses_correct_template",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HomeTestCase.test_redirects_to_stream": {
            "name": "test_redirects_to_stream",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/stream/tests/__init__.py": {},
    "soundproud-master/web/track/admin.py": {},
    "soundproud-master/web/track/apps.py": {},
    "soundproud-master/web/track/models.py": {
        "Track.listen_count": {
            "name": "listen_count",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/track/serializers.py": {},
    "soundproud-master/web/track/urls.py": {},
    "soundproud-master/web/track/views.py": {},
    "soundproud-master/web/track/__init__.py": {},
    "soundproud-master/web/track/migrations/0001_initial.py": {},
    "soundproud-master/web/track/migrations/0002_track_gateway_id.py": {},
    "soundproud-master/web/track/migrations/0003_track_archived.py": {},
    "soundproud-master/web/track/migrations/0004_auto_20170726_0556.py": {},
    "soundproud-master/web/track/migrations/0005_track_artwork_url.py": {},
    "soundproud-master/web/track/migrations/__init__.py": {},
    "soundproud-master/web/track/tests/factories.py": {},
    "soundproud-master/web/track/tests/test_models.py": {
        "TrackTestCase._assert_track_listen_count_matches_expected": {
            "name": "_assert_track_listen_count_matches_expected",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "TrackTestCase.test_listen_count": {
            "name": "test_listen_count",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "soundproud-master/web/track/tests/__init__.py": {}
}
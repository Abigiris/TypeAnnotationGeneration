{
    "spacegraphcats-latest/setup.py": {},
    "spacegraphcats-latest/scripts/benchmark_1_rdomset.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/benchmark_2_index.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.create_records_iter": {
            "name": "create_records_iter",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/benchmark_3_query.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/calc-node-mh-sbt-inclusion.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/check-catlas-shadow-vs-cdbg.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/chunk-genomes-to-fasta.py": {
        "make_all": {
            "name": "make_all",
            "location": 14,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "ksize": [
                    "str",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/chunk-genomes-to-vectors.py": {
        "make_all": {
            "name": "make_all",
            "location": 14,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "ksize": [
                    "str",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/cluster-vectors.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/count-dominator-containment.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/explore-dominator-taxonomy.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/json2yaml.py": {},
    "spacegraphcats-latest/scripts/kmer-bait-sequences.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/tax-classify-sigs.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/tax-classify.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/scripts/tax_classify_utils.py": {
        "summarize_taxonomic_purity": {
            "name": "summarize_taxonomic_purity",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "minhash_collections": [],
                "lca_db": [
                    "int",
                    "list[]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[int,int]]"
                ],
                "verbose": [
                    "bool"
                ],
                "filenames": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "spacegraphcats-latest/scripts/verify-md5.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "bool",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/snakemake.py": {
        "catlas_build": {
            "name": "catlas_build",
            "location": 5,
            "return": [],
            "arguments": {
                "conf_file": []
            }
        },
        "catlas_search": {
            "name": "catlas_search",
            "location": 29,
            "return": [],
            "arguments": {
                "conf_file": [],
                "cdbg_only": [],
                "suffix": []
            }
        },
        "catlas_extract_contigs": {
            "name": "catlas_extract_contigs",
            "location": 59,
            "return": [],
            "arguments": {
                "conf_file": [],
                "cdbg_only": [],
                "suffix": []
            }
        },
        "catlas_extract_reads": {
            "name": "catlas_extract_reads",
            "location": 84,
            "return": [],
            "arguments": {
                "conf_file": [],
                "cdbg_only": [],
                "suffix": []
            }
        },
        "catlas_search_input": {
            "name": "catlas_search_input",
            "location": 109,
            "return": [],
            "arguments": {
                "conf_file": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/__init__.py": {},
    "spacegraphcats-latest/spacegraphcats/__main__.py": {
        "get_snakefile_path": {
            "name": "get_snakefile_path",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_package_configfile": {
            "name": "get_package_configfile",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "run_snakemake": {
            "name": "run_snakemake",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "list[str]"
                ],
                "no_use_conda": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "snakefile_name": [
                    "typing.Text"
                ],
                "outdir": [
                    "None",
                    "bool",
                    "str"
                ],
                "extra_args": [
                    "list[]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ],
                "snakemake_args": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ],
                "no_use_conda": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ],
                "verbose": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ],
                "outdir": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "bool",
                    "str",
                    "float",
                    "collections.abc.Awaitable[]",
                    "dict[str, int]"
                ],
                "snakemake_args": [
                    "str",
                    "dict[str, int]"
                ],
                "no_use_conda": [
                    "bool",
                    "str",
                    "float",
                    "collections.abc.Awaitable[]",
                    "dict[str, int]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "float",
                    "collections.abc.Awaitable[]",
                    "dict[str, int]"
                ],
                "outdir": [
                    "bool",
                    "str",
                    "float",
                    "collections.abc.Awaitable[]",
                    "dict[str, int]"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "int",
                    "float",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "snakemake_args": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "no_use_conda": [
                    "str",
                    "int",
                    "float",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "verbose": [
                    "str",
                    "int",
                    "float",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "outdir": [
                    "str",
                    "int",
                    "float",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "showconf": {
            "name": "showconf",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "configfile": [
                    "str"
                ],
                "force": [
                    "str",
                    "int",
                    "None"
                ],
                "reads": [
                    "str",
                    "bytes",
                    "float",
                    "list[str]",
                    "tuple[]",
                    "bool"
                ],
                "__queries": [
                    "list[str]",
                    "list[]",
                    "str",
                    "list[dict[str, str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/catlas.py": {
        "main": {
            "name": "main",
            "location": 323,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dir": [
                    "str",
                    "int"
                ],
                "out_dir": [
                    "str",
                    "dict[str, str]"
                ],
                "r": [
                    "str",
                    "int",
                    "None"
                ],
                "checkpoint": [
                    "bool"
                ]
            }
        },
        "Project.existing_checkpoints": {
            "name": "existing_checkpoints",
            "location": 44,
            "return": [
                "list[typing.Union[list[],int,dict[str, typing.Type],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.cp_name": {
            "name": "cp_name",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ]
            }
        },
        "Project.load_furthest_checkpoint": {
            "name": "load_furthest_checkpoint",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "Project._save": {
            "name": "_save",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAtlas.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "tuple[int]",
                    "int",
                    "tuple[]"
                ],
                "vertex": [
                    "str",
                    "bool",
                    "None"
                ],
                "level": [
                    "str",
                    "bool",
                    "None"
                ],
                "children": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "CAtlas.build": {
            "name": "build",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "proj": [],
                "benchmark_only": [
                    "bool"
                ]
            }
        },
        "CAtlas._build_level": {
            "name": "_build_level",
            "location": 224,
            "return": [
                "tuple[typing.Union[dict[, CAtlas],list[str],set[str]]]"
            ],
            "arguments": {
                "graph": [
                    "dict[str, list[typing.Any]]",
                    "int",
                    "str"
                ],
                "radius": [
                    "dict[str, list[typing.Any]]",
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "min_id": [
                    "int"
                ],
                "prev_nodes": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CAtlas.leaves": {
            "name": "leaves",
            "location": 250,
            "return": [
                "set[CAtlas]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "visited": [
                    "None",
                    "list[str]",
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "CAtlas.write": {
            "name": "write",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": []
            }
        },
        "CAtlas.read": {
            "name": "read",
            "location": 286,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Callable[L, None]",
                    "typing.TextIO"
                ],
                "catlas_file": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/components.py": {
        "component_index": {
            "name": "component_index",
            "location": 9,
            "return": [
                "UnionFind"
            ],
            "arguments": {
                "graph": []
            }
        },
        "components": {
            "name": "components",
            "location": 21,
            "return": [],
            "arguments": {
                "graph": [
                    "str"
                ]
            }
        },
        "num_components": {
            "name": "num_components",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "typing.Deque"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/converter.py": {
        "_parse_line": {
            "name": "_parse_line",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "IdentityHash",
                "list[]"
            ],
            "arguments": {
                "graph_file": [],
                "add_vertex": [
                    "None",
                    "int",
                    "str"
                ],
                "add_edge": [
                    "None",
                    "int"
                ],
                "consecutive_ids": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IdentityHash.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityHash.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "int",
                "dict[str, typing.Any]",
                "None",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "parse._get_consecutive_id": {
            "name": "_get_consecutive_id",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "id": []
            }
        },
        "main.add_edge": {
            "name": "add_edge",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "main.add_vertex": {
            "name": "add_vertex",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "u": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/Eppstein.py": {
        "UnionFind.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionFind.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [
                "str",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "UnionFind.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnionFind.union": {
            "name": "union",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "priorityDictionary.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "priorityDictionary.smallest": {
            "name": "smallest",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "priorityDictionary.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "priorityDictionary.__setitem__": {
            "name": "__setitem__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]"
                ],
                "val": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "priorityDictionary.setdefault": {
            "name": "setdefault",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "priorityDictionary.__iter__.iterfn": {
            "name": "iterfn",
            "location": 134,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_nodes": [
                    "int"
                ],
                "radius": [
                    "int"
                ]
            }
        },
        "Graph.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__contains__": {
            "name": "__contains__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "Graph.add_arc": {
            "name": "add_arc",
            "location": 38,
            "return": [
                "Graph"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "set[str]"
                ],
                "v": [
                    "set[str]"
                ],
                "weight": [
                    "int"
                ]
            }
        },
        "Graph.remove_arc": {
            "name": "remove_arc",
            "location": 44,
            "return": [
                "Graph"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "v": [
                    "int",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "Graph.adjacent": {
            "name": "adjacent",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "bytes",
                    "bytearray",
                    "typing.Sequence[T]"
                ],
                "v": [
                    "int",
                    "bytes",
                    "bytearray",
                    "typing.Sequence[T]"
                ]
            }
        },
        "Graph.arcs": {
            "name": "arcs",
            "location": 63,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Graph.in_neighbors": {
            "name": "in_neighbors",
            "location": 79,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ],
                "weight": [
                    "None",
                    "int",
                    "typing.Iterator",
                    "str"
                ]
            }
        },
        "Graph.in_degree": {
            "name": "in_degree",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [],
                "weight": [
                    "None",
                    "int",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "Graph.num_arcs": {
            "name": "num_arcs",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "str"
                ]
            }
        },
        "Graph.transitive_pairs": {
            "name": "transitive_pairs",
            "location": 102,
            "return": [
                "typing.Generator[tuple[typing.Union[tuple[],int]]]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "tuple[]",
                    "int"
                ],
                "w": [
                    "int"
                ]
            }
        },
        "Graph.fraternal_pairs": {
            "name": "fraternal_pairs",
            "location": 115,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "str",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ],
                "w": [
                    "int"
                ]
            }
        },
        "DictGraph.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "None",
                    "list[typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "r": [
                    "int"
                ]
            }
        },
        "DictGraph.__len__": {
            "name": "__len__",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictGraph.__iter__": {
            "name": "__iter__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictGraph.__contains__": {
            "name": "__contains__",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "DictGraph.add_node": {
            "name": "add_node",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int"
                ]
            }
        },
        "DictGraph.arcs": {
            "name": "arcs",
            "location": 166,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int"
                ]
            }
        },
        "DictGraph.remove_isolates": {
            "name": "remove_isolates",
            "location": 184,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/graph_io.py": {
        "read_from_gxt": {
            "name": "read_from_gxt",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "gxtfile": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "radius": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "directed": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "sequential": [
                    "bool"
                ]
            }
        },
        "write_to_gxt": {
            "name": "write_to_gxt",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "gxtfile": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]"
                ],
                "graph": [],
                "weight": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "read_from_gxt.create_graph": {
            "name": "create_graph",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "num_nodes": []
            }
        },
        "read_from_gxt.add_edge": {
            "name": "add_edge",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/graph_parser.py": {
        "_parse_line": {
            "name": "_parse_line",
            "location": 6,
            "return": [
                "list[]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "split_on": [
                    "typing.Text"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_file": [],
                "create_vertices": [
                    "None",
                    "typing.Callable[int, None]",
                    "str",
                    "int",
                    "list[typing.Optional[float]]",
                    "typing.Sequence[str]"
                ],
                "add_edge": [
                    "None",
                    "typing.Callable[int,int, None]",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "parse_minhash": {
            "name": "parse_minhash",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "minhash_file": [
                    "list[str]",
                    "list[]"
                ],
                "add_minhash": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_file": [],
                "num_vertices": [
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "edges": [
                    "str"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/gxt_to_gml.py": {
        "GmlWriter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "dict[str, int]"
                ],
                "vertex_attributes": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Any"
                ],
                "edge_attributes": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Any"
                ],
                "directed": [
                    "bool"
                ]
            }
        },
        "GmlWriter._write": {
            "name": "_write",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "GmlWriter._quote": {
            "name": "_quote",
            "location": 29,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "GmlWriter.add_vertex": {
            "name": "add_vertex",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool"
                ],
                "size": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Type",
                    "int"
                ],
                "attribute_values": [
                    "list[]"
                ],
                "vertex_attributes": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "GmlWriter.add_edge": {
            "name": "add_edge",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "None",
                    "int"
                ],
                "dest": [
                    "str",
                    "None",
                    "int"
                ],
                "attribute_values": [
                    "list[]"
                ],
                "edge_attributes": [
                    "None",
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "GmlWriter.done": {
            "name": "done",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotWriter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "dict[str, int]"
                ]
            }
        },
        "DotWriter._write": {
            "name": "_write",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "DotWriter.add_vertex": {
            "name": "add_vertex",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "DotWriter.add_edge": {
            "name": "add_edge",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "dest": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DotWriter.done": {
            "name": "done",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/rdomset.py": {
        "low_degree_orientation": {
            "name": "low_degree_orientation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "ldo_setup": {
            "name": "ldo_setup",
            "location": 81,
            "return": [
                "tuple[typing.Union[list[typing.Optional[bool]],dict[, typing.Union[None,bool]]]]"
            ],
            "arguments": {
                "graph": []
            }
        },
        "dtf_step": {
            "name": "dtf_step",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "dist": [
                    "float",
                    "str"
                ]
            }
        },
        "dtf": {
            "name": "dtf",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "radius": [
                    "int",
                    "float"
                ]
            }
        },
        "compute_domset": {
            "name": "compute_domset",
            "location": 197,
            "return": [
                "list[]",
                "tuple[]",
                "float",
                "SortedSet"
            ],
            "arguments": {
                "graph": [
                    "list[int]"
                ],
                "radius": []
            }
        },
        "domination_graph": {
            "name": "domination_graph",
            "location": 252,
            "return": [
                "tuple[typing.Union[DictGraph,SortedDict]]"
            ],
            "arguments": {
                "graph": [],
                "domset": [
                    "tuple[typing.Union[int,int,int]]"
                ],
                "radius": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "rdomset": {
            "name": "rdomset",
            "location": 321,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "list[list[int]]",
                    "float"
                ],
                "radius": [
                    "int",
                    "list[list[int]]",
                    "float"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/catlas/__init__.py": {},
    "spacegraphcats-latest/spacegraphcats/cdbg/bcalm_to_gxt.py": {
        "end_match": {
            "name": "end_match",
            "location": 24,
            "return": [],
            "arguments": {
                "s": [],
                "t": [],
                "k": [],
                "direction": []
            }
        },
        "is_directed_path": {
            "name": "is_directed_path",
            "location": 57,
            "return": [],
            "arguments": {
                "x": [],
                "sequences": [],
                "neighbors": [],
                "k": []
            }
        },
        "reverse_complement": {
            "name": "reverse_complement",
            "location": 70,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "contract_neighbor": {
            "name": "contract_neighbor",
            "location": 75,
            "return": [],
            "arguments": {
                "x": [],
                "u": [],
                "neighbors": [],
                "sequences": [],
                "mean_abunds": [],
                "sizes": [],
                "k": []
            }
        },
        "contract_degree_two": {
            "name": "contract_degree_two",
            "location": 123,
            "return": [],
            "arguments": {
                "non_pendants": [],
                "neighbors": [],
                "sequences": [],
                "mean_abunds": [],
                "sizes": [],
                "k": [],
                "removed_nodes": []
            }
        },
        "main": {
            "name": "main",
            "location": 203,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "SqliteAsDict.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "SqliteAsDict.__getitem__": {
            "name": "__getitem__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SqliteAsDict.__setitem__": {
            "name": "__setitem__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "SqliteAsDict.__delitem__": {
            "name": "__delitem__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SqliteAsDict.close": {
            "name": "close",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/dump_contigs_db_to_fasta.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/hashing.py": {
        "hash_sequence": {
            "name": "hash_sequence",
            "location": 14,
            "return": [],
            "arguments": {
                "seq": [
                    "typing.Callable[, ]",
                    "bytes",
                    "int",
                    "typing.IO"
                ],
                "ksize": [
                    "str",
                    "None"
                ]
            }
        },
        "MPHF_KmerIndex.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ksize": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ],
                "bbhash_table": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "sizes": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ]
            }
        },
        "MPHF_KmerIndex.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MPHF_KmerIndex.get_cdbg_id": {
            "name": "get_cdbg_id",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "kmer_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "MPHF_KmerIndex.get_cdbg_size": {
            "name": "get_cdbg_size",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "cdbg_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MPHF_KmerIndex.build_catlas_node_sizes": {
            "name": "build_catlas_node_sizes",
            "location": 42,
            "return": [
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "catlas": [
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MPHF_KmerIndex.count_cdbg_matches": {
            "name": "count_cdbg_matches",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "query_kmers": [
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "verbose": [
                    "bool"
                ],
                "require_exist": [
                    "bool"
                ]
            }
        },
        "MPHF_KmerIndex.count_catlas_matches": {
            "name": "count_catlas_matches",
            "location": 71,
            "return": [
                "dict[str, typing.Union[str,list[],int]]"
            ],
            "arguments": {
                "self": [],
                "cdbg_matches": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "catlas": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MPHF_KmerIndex.save": {
            "name": "save",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str"
                ]
            }
        },
        "MPHF_KmerIndex.from_directory": {
            "name": "from_directory",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Sequence[typing.Any]",
                    "int",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "location": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/index_cdbg_by_kmer.py": {
        "build_mphf": {
            "name": "build_mphf",
            "location": 27,
            "return": [
                "tuple[typing.Union[BBHashTable,dict[int, int]]]"
            ],
            "arguments": {
                "ksize": [
                    "str",
                    "int"
                ],
                "records_iter_fn": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "bool",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "main.create_records_iter": {
            "name": "create_records_iter",
            "location": 127,
            "return": [],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/index_cdbg_by_minhash.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/index_reads.py": {
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/sort_bcalm_unitigs.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/cdbg/__init__.py": {},
    "spacegraphcats-latest/spacegraphcats/search/analyze_profile.py": {},
    "spacegraphcats-latest/spacegraphcats/search/catlas.py": {
        "CAtlas.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cdbg_directory": [
                    "str",
                    "bool",
                    "None"
                ],
                "catlas_directory": [
                    "str",
                    "bool",
                    "None",
                    "tuple[typing.Union[str,int]]"
                ],
                "load_domfile": [
                    "bool"
                ],
                "load_sizefile": [
                    "bool"
                ],
                "min_abund": [
                    "float"
                ]
            }
        },
        "CAtlas.__load_catlas": {
            "name": "__load_catlas",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catlas_file": [
                    "str"
                ]
            }
        },
        "CAtlas.__load_first_level": {
            "name": "__load_first_level",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domfile": [
                    "str"
                ]
            }
        },
        "CAtlas.__load_size_info": {
            "name": "__load_size_info",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sizefile": [
                    "str"
                ],
                "min_abund": [
                    "int",
                    "float"
                ]
            }
        },
        "CAtlas.__iter__": {
            "name": "__iter__",
            "location": 137,
            "return": [
                "typing.Generator[typing.Union[str,int,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAtlas.__len__": {
            "name": "__len__",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAtlas.decorate_with_shadow_sizes": {
            "name": "decorate_with_shadow_sizes",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAtlas.decorate_with_index_sizes": {
            "name": "decorate_with_index_sizes",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "CAtlas.leaves": {
            "name": "leaves",
            "location": 169,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "None",
                    "list[int]"
                ]
            }
        },
        "CAtlas.shadow": {
            "name": "shadow",
            "location": 198,
            "return": [
                "dict[, ]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int"
                ]
            }
        },
        "CAtlas.leaves.add_to_shadow": {
            "name": "add_to_shadow",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "node_id": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/catlas_info.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/characterize_catlas_regions.py": {
        "make_all": {
            "name": "make_all",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "ksize": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "partition_catlas": {
            "name": "partition_catlas",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "catlas": [
                    "int",
                    "typing.Iterable[list[str]]"
                ],
                "max_size": [
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "compute_matrix": {
            "name": "compute_matrix",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "group_info": [],
                "group_ident": [
                    "bytes",
                    "int"
                ],
                "ksize": [
                    "int"
                ],
                "output": []
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "make_all.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "sofar": [],
                "n": []
            }
        },
        "partition_catlas.partition_recursive": {
            "name": "partition_recursive",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/count_dominator_abundance.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/decompose_catlas.py": {
        "partition_catlas": {
            "name": "partition_catlas",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "catlas": [
                    "int",
                    "typing.Iterable[list[str]]"
                ],
                "max_size": [
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "partition_catlas.partition_recursive": {
            "name": "partition_recursive",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/estimate_query_abundance.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/evaluate_overhead.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_cdbg_by_multifasta.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_contigs.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_contigs_cdbg.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_neighborhoods_by_cdbg_ids.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_nodes_by_shadow_ratio.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.find_terminal_nodes": {
            "name": "find_terminal_nodes",
            "location": 52,
            "return": [
                "dict[, ]",
                "set[]"
            ],
            "arguments": {
                "node_id": [],
                "max_size": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_reads.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/extract_unassembled_nodes.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.find_unassembled_nodes": {
            "name": "find_unassembled_nodes",
            "location": 95,
            "return": [
                "dict[, ]",
                "set[]"
            ],
            "arguments": {
                "node_id": [],
                "threshold": [
                    "float"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/index_cdbg_by_multifasta.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/index_cdbg_by_multifasta_x.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/nodeinfo_by_query.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.find_terminal_nodes": {
            "name": "find_terminal_nodes",
            "location": 100,
            "return": [
                "dict[, ]",
                "set[]"
            ],
            "arguments": {
                "node_id": [],
                "max_size": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/query_by_hashval.py": {
        "execute_query": {
            "name": "execute_query",
            "location": 109,
            "return": [
                "None",
                "QueryOutput"
            ],
            "arguments": {
                "hashval": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "None",
                    "typing.MutableMapping"
                ],
                "catlas": [],
                "hashval_to_contig_id": [],
                "mh": [
                    "None",
                    "bool",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "QueryOutput.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_hashval": [
                    "int",
                    "None",
                    "str"
                ],
                "catlas": [
                    "int",
                    "None",
                    "str"
                ],
                "cdbg_shadow": [
                    "int",
                    "None",
                    "str"
                ],
                "mh": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "QueryOutput.__add_sequence": {
            "name": "__add_sequence",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "QueryOutput.retrieve_contigs": {
            "name": "retrieve_contigs",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contigs_db": [
                    "str",
                    "int"
                ]
            }
        },
        "QueryOutput.write": {
            "name": "write",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_writer": [],
                "csvoutfp": [],
                "outdir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/query_by_prot.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/query_by_sequence.py": {
        "main": {
            "name": "main",
            "location": 273,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "QueryOutput.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "catlas": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Sequence[]",
                    "bool",
                    "typing.Mapping"
                ],
                "kmer_idx": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ],
                "doms": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Sequence[]",
                    "bool",
                    "typing.Mapping"
                ],
                "catlas_name": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "QueryOutput.__add_sequence": {
            "name": "__add_sequence",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "QueryOutput.containment": {
            "name": "containment",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryOutput.similarity": {
            "name": "similarity",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryOutput.retrieve_contigs": {
            "name": "retrieve_contigs",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contigs_db": [
                    "int"
                ]
            }
        },
        "QueryOutput.write": {
            "name": "write",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_writer": [],
                "csvoutfp": [],
                "outdir": [
                    "str",
                    "bool"
                ],
                "catlas_name": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_file": [
                    "list[str]",
                    "str",
                    "None"
                ],
                "ksize": [],
                "scaled": [
                    "str",
                    "bool",
                    "None"
                ],
                "catlas_name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Query.execute": {
            "name": "execute",
            "location": 187,
            "return": [
                "QueryOutput"
            ],
            "arguments": {
                "self": [],
                "catlas": [
                    "int",
                    "str"
                ],
                "kmer_idx": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[T]",
                    "float"
                ]
            }
        },
        "Query.con_sim_upper_bounds": {
            "name": "con_sim_upper_bounds",
            "location": 229,
            "return": [
                "tuple[typing.Union[float,int]]"
            ],
            "arguments": {
                "self": [],
                "catlas": [
                    "str",
                    "list[]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "kmer_idx": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/query_multifasta_by_sig.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/search_utils.py": {
        "sqlite_get_max_offset": {
            "name": "sqlite_get_max_offset",
            "location": 15,
            "return": [],
            "arguments": {
                "cursor": []
            }
        },
        "sqlite_get_offsets": {
            "name": "sqlite_get_offsets",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cursor": [],
                "cdbg_ids": []
            }
        },
        "iterate_bgzf": {
            "name": "iterate_bgzf",
            "location": 67,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "reader": []
            }
        },
        "my_fasta_iter": {
            "name": "my_fasta_iter",
            "location": 83,
            "return": [
                "typing.Generator[tuple[Record]]"
            ],
            "arguments": {
                "handle": [],
                "parse_description": [
                    "bool"
                ],
                "line": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "my_fastq_iter": {
            "name": "my_fastq_iter",
            "location": 128,
            "return": [
                "None",
                "typing.Generator[tuple[Record]]"
            ],
            "arguments": {
                "handle": [],
                "line": [
                    "None",
                    "int",
                    "str",
                    "ImportError"
                ],
                "parse_description": [
                    "bool"
                ]
            }
        },
        "get_reads_by_cdbg": {
            "name": "get_reads_by_cdbg",
            "location": 157,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "sqlite_filename": [
                    "str",
                    "bytes",
                    "list[int]"
                ],
                "reads_filename": [
                    "int",
                    "str",
                    "float"
                ],
                "cdbg_ids": [
                    "str"
                ]
            }
        },
        "get_contigs_by_cdbg_sqlite": {
            "name": "get_contigs_by_cdbg_sqlite",
            "location": 182,
            "return": [
                "typing.Generator[Record]"
            ],
            "arguments": {
                "db": [],
                "cdbg_ids": [
                    "dict[, ]",
                    "list[int]"
                ]
            }
        },
        "contigs_iter_sqlite": {
            "name": "contigs_iter_sqlite",
            "location": 200,
            "return": [
                "typing.Generator[Record]"
            ],
            "arguments": {
                "contigs_db": []
            }
        },
        "load_kmer_index": {
            "name": "load_kmer_index",
            "location": 214,
            "return": [],
            "arguments": {
                "cdbg_prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_cdbg_size_info": {
            "name": "load_cdbg_size_info",
            "location": 219,
            "return": [
                "tuple[typing.Union[dict[int, int],dict[int, float]]]"
            ],
            "arguments": {
                "cdbg_prefix": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "min_abund": [
                    "float"
                ]
            }
        },
        "decorate_catlas_with_kmer_sizes": {
            "name": "decorate_catlas_with_kmer_sizes",
            "location": 236,
            "return": [
                "tuple[dict[tuple[typing.Union[str,dict[str, float]]], int]]"
            ],
            "arguments": {
                "layer1_to_cdbg": [],
                "dag": [
                    "list[cmk.utils.type_defs.HostName]"
                ],
                "dag_levels": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, dict[str, float]]"
                ],
                "cdbg_kmer_sizes": [
                    "int",
                    "float",
                    "set[int]"
                ],
                "cdbg_weighted_kmer_sizes": [
                    "int",
                    "list[int]",
                    "float",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "output_response_curve": {
            "name": "output_response_curve",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "outname": [
                    "bytes",
                    "str"
                ],
                "match_counts": [],
                "kmer_idx": [],
                "layer1_to_cdbg": [
                    "dict[str, list[str]]",
                    "dict[str, str]",
                    "dict[str, dict[, ]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "GrabBGZF_Random.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "GrabBGZF_Random.get_sequence_at": {
            "name": "get_sequence_at",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/search/__init__.py": {},
    "spacegraphcats-latest/spacegraphcats/utils/logging.py": {
        "log_command": {
            "name": "log_command",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str"
                ],
                "args": []
            }
        },
        "set_quiet": {
            "name": "set_quiet",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "str"
                ],
                "print_debug": [
                    "bool"
                ]
            }
        },
        "print_results": {
            "name": "print_results",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "notify": {
            "name": "notify",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "dict[, ]",
                    "typing.IO",
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_notify": {
            "name": "test_notify",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_flush": {
            "name": "test_notify_flush",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_end": {
            "name": "test_notify_end",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_quiet": {
            "name": "test_notify_quiet",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error": {
            "name": "test_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_flush": {
            "name": "test_error_flush",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_quiet": {
            "name": "test_error_quiet",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/spacegraphcats/utils/make_bgzf.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/utils/__init__.py": {},
    "spacegraphcats-latest/spacegraphcats/utils/bgzf/bgzf.py": {
        "open": {
            "name": "open",
            "location": 244,
            "return": [
                "BgzfReader",
                "BgzfWriter"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "dict[str, dict[str, str]]"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "make_virtual_offset": {
            "name": "make_virtual_offset",
            "location": 254,
            "return": [
                "int"
            ],
            "arguments": {
                "block_start_offset": [
                    "int"
                ],
                "within_block_offset": [
                    "int"
                ]
            }
        },
        "split_virtual_offset": {
            "name": "split_virtual_offset",
            "location": 309,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "virtual_offset": [
                    "int"
                ]
            }
        },
        "BgzfBlocks": {
            "name": "BgzfBlocks",
            "location": 322,
            "return": [
                "typing.Generator[tuple[typing.Union[int,int]]]"
            ],
            "arguments": {
                "handle": []
            }
        },
        "_load_bgzf_block": {
            "name": "_load_bgzf_block",
            "location": 406,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "handle": [],
                "text_mode": [
                    "bool"
                ]
            }
        },
        "BgzfReader.__init__": {
            "name": "__init__",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "None",
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ],
                "fileobj": [],
                "max_cache": [
                    "int"
                ]
            }
        },
        "BgzfReader._load_block": {
            "name": "_load_block",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_offset": [
                    "None",
                    "int"
                ]
            }
        },
        "BgzfReader.tell": {
            "name": "tell",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.seek": {
            "name": "seek",
            "location": 613,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "virtual_offset": [
                    "int"
                ]
            }
        },
        "BgzfReader.read": {
            "name": "read",
            "location": 638,
            "return": [
                "typing.Text",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "BgzfReader.readline": {
            "name": "readline",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.__next__": {
            "name": "__next__",
            "location": 698,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.__iter__": {
            "name": "__iter__",
            "location": 711,
            "return": [
                "BgzfReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.close": {
            "name": "close",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.seekable": {
            "name": "seekable",
            "location": 722,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.isatty": {
            "name": "isatty",
            "location": 726,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.fileno": {
            "name": "fileno",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.__enter__": {
            "name": "__enter__",
            "location": 734,
            "return": [
                "BgzfReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfReader.__exit__": {
            "name": "__exit__",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "BaseException",
                    "None"
                ],
                "value": [
                    "BaseException",
                    "None"
                ],
                "traceback": [
                    "BaseException",
                    "None"
                ]
            }
        },
        "BgzfWriter.__init__": {
            "name": "__init__",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "None",
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ],
                "fileobj": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "compresslevel": [
                    "int"
                ]
            }
        },
        "BgzfWriter._write_block": {
            "name": "_write_block",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "BgzfWriter.write": {
            "name": "write",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "BgzfWriter.flush": {
            "name": "flush",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.close": {
            "name": "close",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.tell": {
            "name": "tell",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.seekable": {
            "name": "seekable",
            "location": 841,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.isatty": {
            "name": "isatty",
            "location": 846,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.fileno": {
            "name": "fileno",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.__enter__": {
            "name": "__enter__",
            "location": 854,
            "return": [
                "BgzfWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "BgzfWriter.__exit__": {
            "name": "__exit__",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "BaseException",
                    "None"
                ],
                "value": [
                    "BaseException",
                    "None"
                ],
                "traceback": [
                    "BaseException",
                    "None"
                ]
            }
        },
        "BgzfReader.next": {
            "name": "next",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/utils/bgzf/_py3k.py": {
        "_bytes_bytearray_to_str": {
            "name": "_bytes_bytearray_to_str",
            "location": 132,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_as_unicode": {
            "name": "_as_unicode",
            "location": 138,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_as_bytes": {
            "name": "_as_bytes",
            "location": 145,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_is_int_or_long": {
            "name": "_is_int_or_long",
            "location": 151,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "_binary_to_string_handle": {
            "name": "_binary_to_string_handle",
            "location": 155,
            "return": [],
            "arguments": {
                "handle": []
            }
        },
        "getoutput": {
            "name": "getoutput",
            "location": 188,
            "return": [],
            "arguments": {
                "cmd": []
            }
        }
    },
    "spacegraphcats-latest/spacegraphcats/utils/bgzf/__init__.py": {},
    "spacegraphcats-latest/tests/pytest_utils.py": {
        "relative_file": {
            "name": "relative_file",
            "location": 34,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "pkg_file": {
            "name": "pkg_file",
            "location": 42,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "in_tempdir": {
            "name": "in_tempdir",
            "location": 50,
            "return": [],
            "arguments": {
                "fn": [
                    "list[bool]",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "in_thisdir": {
            "name": "in_thisdir",
            "location": 61,
            "return": [],
            "arguments": {
                "fn": [
                    "list[bool]",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "TempDirectory.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chdir": [
                    "bool"
                ]
            }
        },
        "TempDirectory.__enter__": {
            "name": "__enter__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempDirectory.__exit__": {
            "name": "__exit__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "in_tempdir.wrapper": {
            "name": "wrapper",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "in_thisdir.wrapper": {
            "name": "wrapper",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/tests/test_catlas.py": {
        "test_catlas_info": {
            "name": "test_catlas_info",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Test_LoadCatlas.setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_LoadCatlas.test_root": {
            "name": "test_root",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_LoadCatlas.test_levels": {
            "name": "test_levels",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_LoadCatlas.test_len": {
            "name": "test_len",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_LoadCatlas.test_shadow_sizes": {
            "name": "test_shadow_sizes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_components.py": {
        "ComponentsTest.test_components": {
            "name": "test_components",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_dory_workflow.py": {
        "copy_dory_catlas": {
            "name": "copy_dory_catlas",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_dory_catlas_search": {
            "name": "copy_dory_catlas_search",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_dory_head": {
            "name": "copy_dory_head",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_dory_subset": {
            "name": "copy_dory_subset",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_dory_sig": {
            "name": "copy_dory_sig",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_break_bad_bcalm": {
            "name": "test_dory_break_bad_bcalm",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_sort_bcalm_diff_seed": {
            "name": "test_dory_sort_bcalm_diff_seed",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_query_workflow": {
            "name": "test_dory_query_workflow",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_query_workflow_checkpoint": {
            "name": "test_dory_query_workflow_checkpoint",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_query_workflow_remove_pendants": {
            "name": "test_dory_query_workflow_remove_pendants",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_search_nomatch": {
            "name": "test_dory_search_nomatch",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_characterize_catlas_regions": {
            "name": "test_dory_characterize_catlas_regions",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_extract_unassembled_nodes": {
            "name": "test_dory_extract_unassembled_nodes",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_catlas_info": {
            "name": "test_dory_catlas_info",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_extract_contigs": {
            "name": "test_dory_extract_contigs",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_extract_contigs_cdbg": {
            "name": "test_dory_extract_contigs_cdbg",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_make_bgzf": {
            "name": "test_dory_make_bgzf",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_index_reads": {
            "name": "test_dory_index_reads",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_index_reads_require_paired_fail": {
            "name": "test_dory_index_reads_require_paired_fail",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_index_reads_check_args_fail": {
            "name": "test_dory_index_reads_check_args_fail",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_extract_reads": {
            "name": "test_dory_extract_reads",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_extract_reads_fq": {
            "name": "test_dory_extract_reads_fq",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_evaluate_overhead": {
            "name": "test_dory_evaluate_overhead",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_estimate_query_abundance": {
            "name": "test_dory_estimate_query_abundance",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_query_by_hashval": {
            "name": "test_dory_query_by_hashval",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_multifasta_query": {
            "name": "test_dory_multifasta_query",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_multifasta_annot_x": {
            "name": "test_dory_multifasta_annot_x",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_shadow_extract": {
            "name": "test_dory_shadow_extract",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_protein_search": {
            "name": "test_dory_protein_search",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_translate_search": {
            "name": "test_dory_translate_search",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_extract_neighborhoods_by_cdbg_ids": {
            "name": "test_extract_neighborhoods_by_cdbg_ids",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        },
        "test_dory_cdbg_and_catlas_abund": {
            "name": "test_dory_cdbg_and_catlas_abund",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "location": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_graph.py": {
        "GraphTest.test_graph": {
            "name": "test_graph",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_frat_pairs": {
            "name": "test_frat_pairs",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTest.test_trans_pairs": {
            "name": "test_trans_pairs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_graph_io.py": {
        "IOTest.test_writing_and_reading": {
            "name": "test_writing_and_reading",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOTest.test_writing_and_reading_no_weight": {
            "name": "test_writing_and_reading_no_weight",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_misc.py": {
        "test_get_contig_by_id": {
            "name": "test_get_contig_by_id",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/tests/test_parser.py": {
        "ParserTest.test_graph_parsing": {
            "name": "test_graph_parsing",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_graph_writing": {
            "name": "test_graph_writing",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_mxt_parsing": {
            "name": "test_mxt_parsing",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_graph_parsing.create_vertices": {
            "name": "create_vertices",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "n": []
            }
        },
        "ParserTest.test_graph_parsing.collect_edge": {
            "name": "collect_edge",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "ParserTest.test_mxt_parsing.collect_minhashes": {
            "name": "collect_minhashes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex_id": [],
                "hashes": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_rdomset.py": {
        "ParserRDomset.test_ldo_random": {
            "name": "test_ldo_random",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserRDomset.test_ldo_example": {
            "name": "test_ldo_example",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserRDomset.test_domination_graph": {
            "name": "test_domination_graph",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spacegraphcats-latest/tests/test_snakemake.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_dory_build_cdbg": {
            "name": "test_dory_build_cdbg",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_build_contigs": {
            "name": "test_dory_build_contigs",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_build_catlas": {
            "name": "test_dory_build_catlas",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_build_kmer_index": {
            "name": "test_dory_build_kmer_index",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_search": {
            "name": "test_dory_search",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_build_reads_index": {
            "name": "test_dory_build_reads_index",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_extract_reads": {
            "name": "test_dory_extract_reads",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dory_extract_contigs": {
            "name": "test_dory_extract_contigs",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spacegraphcats-latest/tests/test_twofoo_short.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_build_and_search": {
            "name": "test_build_and_search",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_contigs": {
            "name": "test_dump_contigs",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_reads": {
            "name": "test_label_reads",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_reads_paired": {
            "name": "test_index_reads_paired",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_reads_nopairing": {
            "name": "test_index_reads_nopairing",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_contigs_vs_unitigs": {
            "name": "test_check_contigs_vs_unitigs",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extract_reads_paired": {
            "name": "test_extract_reads_paired",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_results": {
            "name": "test_check_results",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_md5": {
            "name": "test_check_md5",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_catlas_vs_contigs": {
            "name": "test_check_catlas_vs_contigs",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_reads_paired.get_ids_at_offset": {
            "name": "get_ids_at_offset",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "offset": []
            }
        },
        "test_index_reads_nopairing.get_ids_at_offset": {
            "name": "get_ids_at_offset",
            "location": 154,
            "return": [
                "list[]"
            ],
            "arguments": {
                "offset": []
            }
        }
    },
    "spacegraphcats-latest/tests/__init__.py": {}
}
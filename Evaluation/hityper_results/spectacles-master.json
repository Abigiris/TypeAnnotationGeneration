{
    "spectacles-master/setup.py": {},
    "spectacles-master/spectacles/cli.py": {
        "handle_exceptions": {
            "name": "handle_exceptions",
            "location": 140,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "preprocess_dash": {
            "name": "preprocess_dash",
            "location": 203,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "restore_dash": {
            "name": "restore_dash",
            "location": 208,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "process_pin_imports": {
            "name": "process_pin_imports",
            "location": 213,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "main": {
            "name": "main",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "create_parser": {
            "name": "create_parser",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "_build_base_subparser": {
            "name": "_build_base_subparser",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "_build_connect_subparser": {
            "name": "_build_connect_subparser",
            "location": 444,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_validator_subparser": {
            "name": "_build_validator_subparser",
            "location": 465,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_select_subparser": {
            "name": "_build_select_subparser",
            "location": 515,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_lookml_subparser": {
            "name": "_build_lookml_subparser",
            "location": 531,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_sql_subparser": {
            "name": "_build_sql_subparser",
            "location": 564,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_assert_subparser": {
            "name": "_build_assert_subparser",
            "location": 648,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "_build_content_subparser": {
            "name": "_build_content_subparser",
            "location": 669,
            "return": [],
            "arguments": {
                "subparser_action": [],
                "base_subparser": []
            }
        },
        "run_connect": {
            "name": "run_connect",
            "location": 712,
            "return": [],
            "arguments": {
                "base_url": [],
                "client_id": [],
                "client_secret": [],
                "port": [],
                "api_version": []
            }
        },
        "run_lookml": {
            "name": "run_lookml",
            "location": 720,
            "return": [],
            "arguments": {
                "project": [],
                "ref": [],
                "base_url": [],
                "client_id": [],
                "client_secret": [],
                "port": [],
                "api_version": [],
                "remote_reset": [],
                "severity": [],
                "pin_imports": []
            }
        },
        "run_content": {
            "name": "run_content",
            "location": 765,
            "return": [],
            "arguments": {
                "project": [],
                "ref": [],
                "filters": [],
                "base_url": [],
                "client_id": [],
                "client_secret": [],
                "port": [],
                "api_version": [],
                "remote_reset": [],
                "incremental": [],
                "target": [],
                "exclude_personal": [],
                "folders": [],
                "pin_imports": []
            }
        },
        "run_assert": {
            "name": "run_assert",
            "location": 820,
            "return": [],
            "arguments": {
                "project": [],
                "ref": [],
                "filters": [],
                "base_url": [],
                "client_id": [],
                "client_secret": [],
                "port": [],
                "api_version": [],
                "remote_reset": [],
                "pin_imports": []
            }
        },
        "run_sql": {
            "name": "run_sql",
            "location": 865,
            "return": [],
            "arguments": {
                "log_dir": [],
                "project": [],
                "ref": [],
                "filters": [],
                "base_url": [],
                "client_id": [],
                "client_secret": [],
                "port": [],
                "api_version": [],
                "fail_fast": [],
                "incremental": [],
                "target": [],
                "remote_reset": [],
                "concurrency": [],
                "profile": [],
                "runtime_threshold": [],
                "chunk_size": [],
                "pin_imports": [],
                "ignore_hidden": []
            }
        },
        "ConfigFileAction.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "ConfigFileAction.parse_config": {
            "name": "parse_config",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "YamlConfigAction.parse_config": {
            "name": "parse_config",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "EnvVarAction.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "env_var": [],
                "required": [],
                "default": []
            }
        },
        "EnvVarAction.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "EnvVarStoreTrueAction.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "env_var": [],
                "required": [],
                "default": []
            }
        },
        "EnvVarStoreTrueAction.__call__": {
            "name": "__call__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "handle_exceptions.wrapper": {
            "name": "wrapper",
            "location": 151,
            "return": [],
            "arguments": {}
        }
    },
    "spectacles-master/spectacles/client.py": {
        "AccessToken.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.expired": {
            "name": "expired",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "client_id": [
                    "str",
                    "bool",
                    "typing.BinaryIO"
                ],
                "client_secret": [
                    "str"
                ],
                "port": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "api_version": [
                    "float"
                ]
            }
        },
        "LookerClient.authenticate": {
            "name": "authenticate",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.request": {
            "name": "request",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "LookerClient.get": {
            "name": "get",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LookerClient.post": {
            "name": "post",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LookerClient.patch": {
            "name": "patch",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LookerClient.put": {
            "name": "put",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LookerClient.delete": {
            "name": "delete",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LookerClient.get_looker_release_version": {
            "name": "get_looker_release_version",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.get_workspace": {
            "name": "get_workspace",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.update_workspace": {
            "name": "update_workspace",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "LookerClient.get_all_branches": {
            "name": "get_all_branches",
            "location": 243,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "LookerClient.checkout_branch": {
            "name": "checkout_branch",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [],
                "branch": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "LookerClient.reset_to_remote": {
            "name": "reset_to_remote",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "LookerClient.get_manifest": {
            "name": "get_manifest",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "LookerClient.get_active_branch": {
            "name": "get_active_branch",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "LookerClient.get_active_branch_name": {
            "name": "get_active_branch_name",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "LookerClient.create_branch": {
            "name": "create_branch",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "branch": [],
                "ref": [
                    "None"
                ]
            }
        },
        "LookerClient.hard_reset_branch": {
            "name": "hard_reset_branch",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "list[str]"
                ],
                "branch": [
                    "typing.Type",
                    "str"
                ],
                "ref": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "LookerClient.delete_branch": {
            "name": "delete_branch",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "list[str]"
                ],
                "branch": [
                    "list[str]"
                ]
            }
        },
        "LookerClient.all_lookml_tests": {
            "name": "all_lookml_tests",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "None"
                ]
            }
        },
        "LookerClient.run_lookml_test": {
            "name": "run_lookml_test",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "Exception"
                ],
                "model": [
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "test": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "LookerClient.get_lookml_models": {
            "name": "get_lookml_models",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "None",
                    "str",
                    "set[]",
                    "list[str]",
                    "typing.Sequence[]",
                    "Exception",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LookerClient.get_lookml_dimensions": {
            "name": "get_lookml_dimensions",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "explore": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "LookerClient.create_query": {
            "name": "create_query",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "list[]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ],
                "explore": [
                    "list[]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ],
                "dimensions": [],
                "fields": [
                    "None",
                    "str",
                    "float",
                    "bool",
                    "list[typing.Any]"
                ]
            }
        },
        "LookerClient.create_query_task": {
            "name": "create_query_task",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "query_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LookerClient.get_query_task_multi_results": {
            "name": "get_query_task_multi_results",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "query_task_ids": []
            }
        },
        "LookerClient.cancel_query_task": {
            "name": "cancel_query_task",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_task_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LookerClient.content_validation": {
            "name": "content_validation",
            "location": 804,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.lookml_validation": {
            "name": "lookml_validation",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "Exception",
                    "str"
                ]
            }
        },
        "LookerClient.cached_lookml_validation": {
            "name": "cached_lookml_validation",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Exception",
                    "str"
                ]
            }
        },
        "LookerClient.all_folders": {
            "name": "all_folders",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerClient.run_query": {
            "name": "run_query",
            "location": 890,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "query_id": [
                    "str",
                    "int"
                ]
            }
        },
        "NullAuth.__call__": {
            "name": "__call__",
            "location": 934,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float"
                ]
            }
        }
    },
    "spectacles-master/spectacles/exceptions.py": {
        "SpectaclesException.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "title": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "detail": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "SpectaclesException.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpectaclesException.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerApiError.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "status": [
                    "bool",
                    "typing.Mapping",
                    "None",
                    "typing.Callable[, ]"
                ],
                "detail": [
                    "str"
                ],
                "response": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GenericValidationError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None"
                ],
                "explore": [
                    "bool",
                    "None"
                ],
                "message": [
                    "bytes",
                    "str"
                ],
                "metadata": [
                    "bool",
                    "None"
                ]
            }
        },
        "ValidationError.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ValidationError.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.ignore": {
            "name": "ignore",
            "location": 100,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ValidationError.to_dict": {
            "name": "to_dict",
            "location": 103,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookMLError.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "bytes",
                    "int"
                ],
                "explore": [
                    "str",
                    "bytes",
                    "int"
                ],
                "field_name": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "message": [
                    "str",
                    "bytes",
                    "int"
                ],
                "severity": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "lookml_url": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "file_path": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "line_number": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "SqlError.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "list[str]"
                ],
                "explore": [
                    "str",
                    "list[str]"
                ],
                "dimension": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes",
                    "None"
                ],
                "sql": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes",
                    "None"
                ],
                "message": [
                    "str",
                    "list[str]"
                ],
                "line_number": [
                    "None",
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes"
                ],
                "explore_url": [
                    "None",
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes"
                ],
                "lookml_url": [
                    "None",
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes"
                ]
            }
        },
        "DataTestError.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "None"
                ],
                "explore": [
                    "str",
                    "None"
                ],
                "message": [
                    "str",
                    "None"
                ],
                "test_name": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ],
                "lookml_url": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ],
                "explore_url": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ContentError.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "explore": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "message": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "field_name": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "space": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "tile_type": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[[], int]"
                ],
                "tile_title": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "spectacles-master/spectacles/logger.py": {
        "set_file_handler": {
            "name": "set_file_handler",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "log_dir": [
                    "str"
                ]
            }
        },
        "delete_color_codes": {
            "name": "delete_color_codes",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_sql_error": {
            "name": "log_sql_error",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "explore": [
                    "str"
                ],
                "sql": [
                    "str",
                    "None"
                ],
                "log_dir": [
                    "str"
                ],
                "dimension": [
                    "str"
                ]
            }
        },
        "IndentedFormatter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "IndentedFormatter.indent": {
            "name": "indent",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "IndentedFormatter._indent_string": {
            "name": "_indent_string",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndentedFormatter.format": {
            "name": "format",
            "location": 34,
            "return": [
                "str",
                "int",
                "list[]",
                "frozenset",
                "tuple[typing.Union[int,int,int]]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "BaseException",
                    "None",
                    "Exception",
                    "str"
                ]
            }
        },
        "FileFormatter.format": {
            "name": "format",
            "location": 51,
            "return": [
                "int",
                "str",
                "list[typing.Optional[str]]",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "tuple['cirq.Qid']",
                    "dict[str, str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "IndentedLogger.indent": {
            "name": "indent",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "spectacles-master/spectacles/lookml.py": {
        "build_dimensions": {
            "name": "build_dimensions",
            "location": 410,
            "return": [
                "list[]"
            ],
            "arguments": {
                "client": [],
                "model_name": [
                    "str",
                    "list[str]"
                ],
                "explore_name": [
                    "str",
                    "list[str]"
                ],
                "ignore_hidden_fields": [
                    "bool"
                ]
            }
        },
        "build_project": {
            "name": "build_project",
            "location": 427,
            "return": [
                "Project"
            ],
            "arguments": {
                "client": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "bool"
                ],
                "filters": [
                    "None",
                    "dict[str, str]",
                    "bool",
                    "str"
                ],
                "include_dimensions": [
                    "bool"
                ],
                "ignore_hidden_fields": [
                    "bool"
                ],
                "include_all_explores": [
                    "bool"
                ]
            }
        },
        "LookMlObject.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimension.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "model_name": [
                    "str",
                    "None"
                ],
                "explore_name": [
                    "str",
                    "None"
                ],
                "type": [
                    "list[str]",
                    "None",
                    "str",
                    "bool"
                ],
                "tags": [
                    "str"
                ],
                "sql": [
                    "str",
                    "list[str]"
                ],
                "is_hidden": [
                    "list[str]",
                    "None",
                    "str",
                    "bool"
                ],
                "url": [
                    "None",
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Dimension.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimension.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Dimension.errored": {
            "name": "errored",
            "location": 69,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dimension.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "list[str]"
                ],
                "json_dict": [
                    "str"
                ],
                "model_name": [
                    "str",
                    "set[str]",
                    "list[str]"
                ],
                "explore_name": [
                    "str",
                    "set[str]",
                    "list[str]"
                ]
            }
        },
        "Explore.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "model_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "dimensions": [
                    "None",
                    "int",
                    "typing.Any",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Explore.__eq__": {
            "name": "__eq__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Explore.queried": {
            "name": "queried",
            "location": 115,
            "return": [
                "bool",
                "int",
                "str",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Explore.errored": {
            "name": "errored",
            "location": 134,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Explore.get_errored_dimensions": {
            "name": "get_errored_dimensions",
            "location": 141,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explore.from_json": {
            "name": "from_json",
            "location": 147,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "json_dict": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "Explore.add_dimension": {
            "name": "add_dimension",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "float",
                    "int"
                ]
            }
        },
        "Explore.number_of_errors": {
            "name": "number_of_errors",
            "location": 155,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "project_name": [
                    "str",
                    "None"
                ],
                "explores": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Model.errored": {
            "name": "errored",
            "location": 200,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Model.queried": {
            "name": "queried",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Model.get_explore": {
            "name": "get_explore",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Model.get_errored_explores": {
            "name": "get_errored_explores",
            "location": 226,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.from_json": {
            "name": "from_json",
            "location": 232,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "tuple[typing.Union[dict[, ],int]]",
                    "None"
                ],
                "json_dict": []
            }
        },
        "Model.number_of_errors": {
            "name": "number_of_errors",
            "location": 241,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "models": [
                    "int",
                    "typing.Sequence[]",
                    "str"
                ]
            }
        },
        "Project.__eq__": {
            "name": "__eq__",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None"
                ]
            }
        },
        "Project.count_explores": {
            "name": "count_explores",
            "location": 258,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.iter_models": {
            "name": "iter_models",
            "location": 262,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "errored": [
                    "bool"
                ]
            }
        },
        "Project.iter_explores": {
            "name": "iter_explores",
            "location": 270,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "errored": [
                    "bool"
                ]
            }
        },
        "Project.iter_dimensions": {
            "name": "iter_dimensions",
            "location": 279,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "errored": [
                    "bool"
                ]
            }
        },
        "Project.errored": {
            "name": "errored",
            "location": 296,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Project.queried": {
            "name": "queried",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Project.get_model": {
            "name": "get_model",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Project.get_explore": {
            "name": "get_explore",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Project.get_results": {
            "name": "get_results",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "int"
                ],
                "fail_fast": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "filters": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "Project.__repr__": {
            "name": "__repr__",
            "location": 402,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.number_of_errors": {
            "name": "number_of_errors",
            "location": 406,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spectacles-master/spectacles/printer.py": {
        "color": {
            "name": "color",
            "location": 11,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "text": [],
                "name": []
            }
        },
        "bold": {
            "name": "bold",
            "location": 18,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "dim": {
            "name": "dim",
            "location": 22,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "red": {
            "name": "red",
            "location": 26,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "green": {
            "name": "green",
            "location": 30,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 34,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "print_header": {
            "name": "print_header",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "line_width": [
                    "int"
                ],
                "char": [
                    "typing.Text"
                ],
                "leading_newline": [
                    "bool"
                ]
            }
        },
        "print_content_error": {
            "name": "print_content_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "explore": [],
                "message": [],
                "content_type": [],
                "tile_type": [],
                "tile_title": [],
                "space": [],
                "title": [],
                "url": []
            }
        },
        "print_data_test_error": {
            "name": "print_data_test_error",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "explore": [],
                "test_name": [],
                "message": [],
                "lookml_url": []
            }
        },
        "print_lookml_error": {
            "name": "print_lookml_error",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [],
                "line_number": [],
                "severity": [],
                "message": [],
                "lookml_url": []
            }
        },
        "print_lookml_success": {
            "name": "print_lookml_success",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_sql_error": {
            "name": "print_sql_error",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "explore": [],
                "message": [],
                "sql": [],
                "log_dir": [],
                "dimension": [
                    "None"
                ],
                "lookml_url": [
                    "None"
                ]
            }
        },
        "print_validation_result": {
            "name": "print_validation_result",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [],
                "source": []
            }
        },
        "mark_line": {
            "name": "mark_line",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "lines": [],
                "line_number": [],
                "char": [
                    "typing.Text"
                ]
            }
        },
        "extract_sql_context": {
            "name": "extract_sql_context",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "sql": [],
                "line_number": [],
                "window_size": [
                    "int"
                ]
            }
        }
    },
    "spectacles-master/spectacles/runner.py": {
        "is_commit": {
            "name": "is_commit",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "LookerBranchManager.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "list[S]"
                ],
                "project": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "remote_reset": [
                    "bool"
                ],
                "pin_imports": [
                    "dict[, ]"
                ]
            }
        },
        "LookerBranchManager.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [
                "LookerBranchManager"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "None",
                    "dict[, ]",
                    "int",
                    "str"
                ],
                "ephemeral": [
                    "None",
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "LookerBranchManager.__enter__": {
            "name": "__enter__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.__exit__": {
            "name": "__exit__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.init_state": {
            "name": "init_state",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.ref": {
            "name": "ref",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.update_workspace": {
            "name": "update_workspace",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "LookerBranchManager.get_project_state": {
            "name": "get_project_state",
            "location": 203,
            "return": [
                "ProjectState"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.get_project_imports": {
            "name": "get_project_imports",
            "location": 210,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookerBranchManager.checkout_temp_branch": {
            "name": "checkout_temp_branch",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "project": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "remote_reset": [
                    "bool"
                ],
                "pin_imports": [
                    "dict[, ]"
                ]
            }
        },
        "Runner.validate_sql": {
            "name": "validate_sql",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [
                    "None",
                    "typing.TextIO"
                ],
                "filters": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Any"
                ],
                "fail_fast": [
                    "bool"
                ],
                "incremental": [
                    "bool"
                ],
                "target": [
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "concurrency": [
                    "int"
                ],
                "profile": [
                    "bool"
                ],
                "runtime_threshold": [
                    "int"
                ],
                "chunk_size": [],
                "ignore_hidden_fields": [
                    "bool"
                ]
            }
        },
        "Runner.validate_data_tests": {
            "name": "validate_data_tests",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "filters": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "Runner.validate_lookml": {
            "name": "validate_lookml",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [
                    "dict[, ]",
                    "typing.Iterator",
                    "typing.Callable[, ]",
                    "bytes",
                    "dict[str, str]",
                    "str"
                ],
                "severity": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Runner.validate_content": {
            "name": "validate_content",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [
                    "None",
                    "str",
                    "int"
                ],
                "filters": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int",
                    "typing.Mapping"
                ],
                "incremental": [
                    "bool"
                ],
                "target": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Generator[]"
                ],
                "exclude_personal": [
                    "bool"
                ],
                "folders": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Runner._incremental_results": {
            "name": "_incremental_results",
            "location": 493,
            "return": [],
            "arguments": {
                "base": [
                    "bytes",
                    "list[str]"
                ],
                "target": [
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "Runner._incremental_results.key_by": {
            "name": "key_by",
            "location": 514,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "spectacles-master/spectacles/select.py": {
        "selector_to_pattern": {
            "name": "selector_to_pattern",
            "location": 6,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "selector": [
                    "str"
                ]
            }
        },
        "is_selected": {
            "name": "is_selected",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "typing.Type",
                    "str"
                ],
                "explore": [
                    "typing.Type",
                    "str"
                ],
                "filters": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "spectacles-master/spectacles/tracking.py": {
        "anonymise": {
            "name": "anonymise",
            "location": 9,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "trait": [
                    "str"
                ]
            }
        },
        "track_invocation_start": {
            "name": "track_invocation_start",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "command": [
                    "str",
                    "int",
                    "list[int]",
                    "None"
                ],
                "invocation_id": [
                    "str"
                ],
                "project": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "track_invocation_end": {
            "name": "track_invocation_end",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "command": [
                    "str",
                    "int"
                ],
                "invocation_id": [
                    "str",
                    "int"
                ],
                "project": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "spectacles-master/spectacles/types.py": {},
    "spectacles-master/spectacles/utils.py": {
        "compose_url": {
            "name": "compose_url",
            "location": 11,
            "return": [
                "str",
                "set[int]",
                "list[str]",
                "frozenset",
                "set[str]"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "dict[, ]"
                ],
                "path": [],
                "params": []
            }
        },
        "details_from_http_error": {
            "name": "details_from_http_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "human_readable": {
            "name": "human_readable",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "elapsed": []
            }
        },
        "get_detail": {
            "name": "get_detail",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "fn_name": [
                    "str"
                ]
            }
        },
        "log_duration": {
            "name": "log_duration",
            "location": 55,
            "return": [],
            "arguments": {
                "fn": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "time_hash": {
            "name": "time_hash",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "chunks": {
            "name": "chunks",
            "location": 79,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "to_chunk": [],
                "size": [
                    "int",
                    "typing.Sequence[int]",
                    "list[float]",
                    "list[]",
                    "float"
                ]
            }
        },
        "log_duration.timed_function": {
            "name": "timed_function",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "spectacles-master/spectacles/__init__.py": {},
    "spectacles-master/spectacles/validators/content.py": {
        "ContentValidator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ],
                "exclude_personal": [
                    "bool"
                ],
                "folders": [
                    "set[]",
                    "dict[, ]",
                    "list[int]"
                ]
            }
        },
        "ContentValidator.validate": {
            "name": "validate",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "ContentValidator._get_personal_folders": {
            "name": "_get_personal_folders",
            "location": 74,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentValidator._get_all_subfolders": {
            "name": "_get_all_subfolders",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "input_folders": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "ContentValidator._get_subfolders": {
            "name": "_get_subfolders",
            "location": 95,
            "return": [
                "list[typing.Union[str,int,bytes]]"
            ],
            "arguments": {
                "self": [],
                "folder_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "all_folders": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ContentValidator._get_content_type": {
            "name": "_get_content_type",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "content": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "ContentValidator._get_tile_type": {
            "name": "_get_tile_type",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "ContentValidator._get_errors_from_result": {
            "name": "_get_errors_from_result",
            "location": 125,
            "return": [
                "list[ContentError]"
            ],
            "arguments": {
                "self": [],
                "project": [],
                "result": [
                    "str"
                ],
                "content_type": [
                    "int"
                ]
            }
        },
        "ContentValidator.validate.is_folder_selected": {
            "name": "is_folder_selected",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "folder_id": []
            }
        }
    },
    "spectacles-master/spectacles/validators/data_test.py": {
        "DataTest.__post_init__": {
            "name": "__post_init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.explore_url": {
            "name": "explore_url",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.lookml_url": {
            "name": "lookml_url",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTestValidator.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "DataTestValidator.get_tests": {
            "name": "get_tests",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "DataTestValidator.validate": {
            "name": "validate",
            "location": 93,
            "return": [
                "list[DataTestError]"
            ],
            "arguments": {
                "self": [],
                "tests": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "spectacles-master/spectacles/validators/lookml.py": {
        "LookMLValidator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "LookMLValidator.validate": {
            "name": "validate",
            "location": 33,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "dict[, ]",
                    "str"
                ],
                "severity": [
                    "typing.Text"
                ]
            }
        }
    },
    "spectacles-master/spectacles/validators/sql.py": {
        "print_profile_results": {
            "name": "print_profile_results",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "list[str]",
                    "list[dict[, ]]",
                    "list[]"
                ],
                "runtime_threshold": [
                    "int",
                    "None",
                    "list[]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ProfilerResult.format": {
            "name": "format",
            "location": 42,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "str",
                    "int"
                ],
                "lookml_ref": [
                    "str",
                    "int"
                ],
                "explore_url": [
                    "str",
                    "None"
                ],
                "sql": [
                    "None",
                    "str",
                    "int"
                ],
                "query_task_id": [
                    "None",
                    "str",
                    "int"
                ],
                "status": [
                    "None",
                    "str",
                    "int"
                ],
                "runtime": [
                    "None",
                    "str",
                    "int"
                ],
                "error": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "SqlTest.failed": {
            "name": "failed",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.lookml_url": {
            "name": "lookml_url",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.lookml_ref": {
            "name": "lookml_ref",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.sql": {
            "name": "sql",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.__eq__": {
            "name": "__eq__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "SqlTest.__hash__": {
            "name": "__hash__",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.__dict__": {
            "name": "__dict__",
            "location": 110,
            "return": [
                "dict[typing.Text, typing.Union[bool,dict[typing.Text, ],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlTest.get_query_by_task_id": {
            "name": "get_query_by_task_id",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "query_task_id": [
                    "str",
                    "None"
                ]
            }
        },
        "SqlValidator.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ],
                "concurrency": [
                    "int"
                ],
                "runtime_threshold": [
                    "int"
                ]
            }
        },
        "SqlValidator.create_tests": {
            "name": "create_tests",
            "location": 191,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "project": [],
                "compile_sql": [
                    "bool"
                ],
                "at_dimension_level": [
                    "bool"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "SqlValidator._create_explore_test": {
            "name": "_create_explore_test",
            "location": 211,
            "return": [
                "SqlTest"
            ],
            "arguments": {
                "self": [],
                "explore": [
                    "int",
                    "str"
                ],
                "compile_sql": [
                    "bool"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "SqlValidator._create_dimension_test": {
            "name": "_create_dimension_test",
            "location": 254,
            "return": [
                "SqlTest"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "str"
                ],
                "compile_sql": [
                    "bool"
                ]
            }
        },
        "SqlValidator.run_tests": {
            "name": "run_tests",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tests": [
                    "int",
                    "None",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "profile": [
                    "bool"
                ]
            }
        },
        "SqlValidator._run_tests": {
            "name": "_run_tests",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tests": [
                    "list[]",
                    "list[str]",
                    "list[dict[, ]]"
                ],
                "fail_fast": [
                    "bool"
                ]
            }
        },
        "SqlValidator._get_query_results": {
            "name": "_get_query_results",
            "location": 335,
            "return": [
                "list[QueryResult]"
            ],
            "arguments": {
                "self": [],
                "query_task_ids": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SqlValidator._handle_query_result": {
            "name": "_handle_query_result",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "fail_fast": [
                    "bool"
                ]
            }
        },
        "SqlValidator._extract_error_details": {
            "name": "_extract_error_details",
            "location": 415,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[int,None,str,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],dict[int, str],list[],dict[str, str]]]"
            ],
            "arguments": {
                "query_result": [
                    "str"
                ]
            }
        },
        "SqlValidator._cancel_queries": {
            "name": "_cancel_queries",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_task_ids": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "SqlValidator._run_tests.fill_query_slots": {
            "name": "fill_query_slots",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "queries": []
            }
        }
    },
    "spectacles-master/spectacles/validators/__init__.py": {},
    "spectacles-master/tests/conftest.py": {
        "filter_access_token": {
            "name": "filter_access_token",
            "location": 12,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "vcr_config": {
            "name": "vcr_config",
            "location": 21,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {}
        },
        "looker_client": {
            "name": "looker_client",
            "location": 32,
            "return": [
                "typing.Generator[LookerClient]"
            ],
            "arguments": {}
        },
        "remote_repo": {
            "name": "remote_repo",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "dimension": {
            "name": "dimension",
            "location": 52,
            "return": [
                "Dimension"
            ],
            "arguments": {}
        },
        "explore": {
            "name": "explore",
            "location": 66,
            "return": [
                "Explore"
            ],
            "arguments": {}
        },
        "model": {
            "name": "model",
            "location": 71,
            "return": [
                "Model"
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 76,
            "return": [
                "Project"
            ],
            "arguments": {}
        },
        "sql_error": {
            "name": "sql_error",
            "location": 81,
            "return": [
                "SqlError"
            ],
            "arguments": {}
        },
        "schema": {
            "name": "schema",
            "location": 93,
            "return": [],
            "arguments": {}
        }
    },
    "spectacles-master/tests/constants.py": {},
    "spectacles-master/tests/test_branch_manager.py": {
        "test_remote_branch": {
            "name": "test_remote_branch",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "remote_repo": []
            }
        },
        "test_should_return_to_initial_state_prod": {
            "name": "test_should_return_to_initial_state_prod",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_imports": [],
                "looker_client": []
            }
        },
        "test_should_return_to_initial_state_dev": {
            "name": "test_should_return_to_initial_state_dev",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_imports": [],
                "looker_client": []
            }
        },
        "test_manage_current_branch": {
            "name": "test_manage_current_branch",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_imports": [],
                "looker_client": []
            }
        },
        "test_manage_other_branch": {
            "name": "test_manage_other_branch",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_imports": [],
                "looker_client": []
            }
        },
        "test_manage_current_branch_with_ref": {
            "name": "test_manage_current_branch_with_ref",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "typing.Callable[[], int]"
                ],
                "mock_get_imports": [
                    "typing.Callable[[], int]"
                ],
                "looker_client": []
            }
        },
        "test_manage_current_branch_with_import_projects": {
            "name": "test_manage_current_branch_with_import_projects",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "bool"
                ],
                "looker_client": []
            }
        },
        "test_manage_other_branch_with_import_projects": {
            "name": "test_manage_other_branch_with_import_projects",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "typing.Callable[[], int]"
                ],
                "looker_client": []
            }
        },
        "test_manage_prod_with_advanced_deploy": {
            "name": "test_manage_prod_with_advanced_deploy",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_imports": [],
                "looker_client": []
            }
        },
        "test_manage_with_ref_import_projects": {
            "name": "test_manage_with_ref_import_projects",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "typing.Callable[[], int]",
                    "bool"
                ],
                "looker_client": []
            }
        },
        "test_manage_with_ref_not_present_in_local_repo": {
            "name": "test_manage_with_ref_not_present_in_local_repo",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "typing.Callable[, ]"
                ],
                "mock_get_imports": [
                    "typing.Callable[, ]"
                ],
                "remote_repo": [],
                "test_remote_branch": [
                    "typing.Callable[, ]"
                ],
                "looker_client": []
            }
        }
    },
    "spectacles-master/tests/test_cli.py": {
        "clean_env": {
            "name": "clean_env",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "env": {
            "name": "env",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "limited_env": {
            "name": "limited_env",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_exceptions_unhandled_error": {
            "name": "test_handle_exceptions_unhandled_error",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "list[int]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "exit_code": [
                    "str"
                ]
            }
        },
        "test_handle_exceptions_looker_error_should_log_response_and_status": {
            "name": "test_handle_exceptions_looker_error_should_log_response_and_status",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_parse_args_with_no_arguments_supplied": {
            "name": "test_parse_args_with_no_arguments_supplied",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_env": [],
                "capsys": []
            }
        },
        "test_parse_args_with_one_argument_supplied": {
            "name": "test_parse_args_with_one_argument_supplied",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_env": [],
                "capsys": []
            }
        },
        "test_parse_args_with_only_cli": {
            "name": "test_parse_args_with_only_cli",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_env": []
            }
        },
        "test_parse_args_with_only_config_file": {
            "name": "test_parse_args_with_only_config_file",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "clean_env": [
                    "str",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_parse_args_with_incomplete_config_file": {
            "name": "test_parse_args_with_incomplete_config_file",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "clean_env": [
                    "str",
                    "typing.Callable[[], int]"
                ],
                "capsys": []
            }
        },
        "test_config_file_explores_folders_processed_correctly": {
            "name": "test_config_file_explores_folders_processed_correctly",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "mock_run_sql": [],
                "clean_env": [
                    "str",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_cli_explores_folders_processed_correctly": {
            "name": "test_cli_explores_folders_processed_correctly",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_run_sql": [
                    "typing.Callable[, ]"
                ],
                "clean_env": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_parse_args_with_only_env_vars": {
            "name": "test_parse_args_with_only_env_vars",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ]
            }
        },
        "test_parse_args_with_incomplete_env_vars": {
            "name": "test_parse_args_with_incomplete_env_vars",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "limited_env": [],
                "capsys": []
            }
        },
        "test_arg_precedence": {
            "name": "test_arg_precedence",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "limited_env": [
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_env_var_override_argparse_default": {
            "name": "test_env_var_override_argparse_default",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ]
            }
        },
        "test_config_override_argparse_default": {
            "name": "test_config_override_argparse_default",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "clean_env": [
                    "typing.Callable[[], int]",
                    "str"
                ]
            }
        },
        "test_bad_config_file_parameter": {
            "name": "test_bad_config_file_parameter",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_parse_config": [],
                "clean_env": [
                    "typing.Callable[[], int]",
                    "str"
                ]
            }
        },
        "test_parse_remote_reset_with_assert": {
            "name": "test_parse_remote_reset_with_assert",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ]
            }
        },
        "test_parse_args_with_mutually_exclusive_args_remote_reset": {
            "name": "test_parse_args_with_mutually_exclusive_args_remote_reset",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ],
                "capsys": []
            }
        },
        "test_parse_args_with_mutually_exclusive_args_commit_ref": {
            "name": "test_parse_args_with_mutually_exclusive_args_commit_ref",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ],
                "capsys": []
            }
        },
        "test_main_with_sql_validator": {
            "name": "test_main_with_sql_validator",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_client": [],
                "mock_runner": [],
                "env": [],
                "caplog": []
            }
        },
        "test_main_with_content_validator": {
            "name": "test_main_with_content_validator",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_client": [],
                "mock_runner": [],
                "env": [],
                "caplog": []
            }
        },
        "test_main_with_assert_validator": {
            "name": "test_main_with_assert_validator",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_client": [],
                "mock_runner": [],
                "env": [],
                "caplog": []
            }
        },
        "test_main_with_lookml_validator": {
            "name": "test_main_with_lookml_validator",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_client": [],
                "mock_runner": [],
                "env": [],
                "caplog": []
            }
        },
        "test_main_with_connect": {
            "name": "test_main_with_connect",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_run_connect": [],
                "env": [
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_main_with_do_not_track": {
            "name": "test_main_with_do_not_track",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_tracking": [],
                "mock_run_connect": [],
                "env": []
            }
        },
        "test_process_pin_imports_with_no_refs": {
            "name": "test_process_pin_imports_with_no_refs",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_pin_imports_with_one_ref": {
            "name": "test_process_pin_imports_with_one_ref",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_pin_imports_with_multiple_refs": {
            "name": "test_process_pin_imports_with_multiple_refs",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocess_dashes_with_folder_ids_should_work": {
            "name": "test_preprocess_dashes_with_folder_ids_should_work",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocess_dashes_with_model_explores_should_work": {
            "name": "test_preprocess_dashes_with_model_explores_should_work",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocess_dashes_with_wildcards_should_work": {
            "name": "test_preprocess_dashes_with_wildcards_should_work",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_exceptions_unhandled_error.raise_exception": {
            "name": "raise_exception",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handle_exceptions_looker_error_should_log_response_and_status.raise_exception": {
            "name": "raise_exception",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spectacles-master/tests/test_client.py": {
        "test_expired_access_token_should_be_expired": {
            "name": "test_expired_access_token_should_be_expired",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_client_method_names": {
            "name": "get_client_method_names",
            "location": 22,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "mock_401_response": {
            "name": "mock_401_response",
            "location": 45,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "client_kwargs": {
            "name": "client_kwargs",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_get_looker_release_version_should_return_correct_version": {
            "name": "test_get_looker_release_version_should_return_correct_version",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "looker_client": []
            }
        },
        "test_bad_authentication_request_should_raise_looker_api_error": {
            "name": "test_bad_authentication_request_should_raise_looker_api_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsupported_api_version_should_raise_error": {
            "name": "test_unsupported_api_version_should_raise_error",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_query_with_dimensions_should_return_certain_fields": {
            "name": "test_create_query_with_dimensions_should_return_certain_fields",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "looker_client": []
            }
        },
        "test_create_query_without_dimensions_should_return_certain_fields": {
            "name": "test_create_query_without_dimensions_should_return_certain_fields",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "looker_client": []
            }
        },
        "test_bad_requests_should_raise_looker_api_errors": {
            "name": "test_bad_requests_should_raise_looker_api_errors",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "method_name": [],
                "looker_client": [
                    "str"
                ],
                "client_kwargs": [
                    "str"
                ],
                "mock_401_response": []
            }
        },
        "test_authenticate_should_set_session_headers": {
            "name": "test_authenticate_should_set_session_headers",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_post": [],
                "monkeypatch": []
            }
        }
    },
    "spectacles-master/tests/test_content_validator.py": {
        "validator": {
            "name": "validator",
            "location": 11,
            "return": [
                "typing.Generator[ContentValidator]"
            ],
            "arguments": {
                "looker_client": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_content_type_with_bad_keys_should_raise_key_error": {
            "name": "test_get_content_type_with_bad_keys_should_raise_key_error",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_get_tile_type_with_bad_keys_should_raise_key_error": {
            "name": "test_get_tile_type_with_bad_keys_should_raise_key_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_non_existing_excluded_folder_should_raise_exception": {
            "name": "test_non_existing_excluded_folder_should_raise_exception",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "looker_client": []
            }
        },
        "test_non_existing_included_folder_should_raise_exception": {
            "name": "test_non_existing_included_folder_should_raise_exception",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "looker_client": []
            }
        },
        "TestValidatePass.validator_errors": {
            "name": "validator_errors",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "int",
                    "None",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestValidatePass.test_should_not_return_errors": {
            "name": "test_should_not_return_errors",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str"
                ]
            }
        },
        "TestValidateFail.validator_errors": {
            "name": "validator_errors",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "int",
                    "None",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFail.test_should_return_errors": {
            "name": "test_should_return_errors",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFail.test_personal_folder_content_should_not_be_present": {
            "name": "test_personal_folder_content_should_not_be_present",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFailExcludeFolder.validator_errors": {
            "name": "validator_errors",
            "location": 83,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "TestValidateFailExcludeFolder.test_error_from_excluded_folder_should_be_ignored": {
            "name": "test_error_from_excluded_folder_should_be_ignored",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": []
            }
        },
        "TestValidateFailIncludeFolder.validator_errors": {
            "name": "validator_errors",
            "location": 106,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "TestValidateFailIncludeFolder.test_error_from_included_folder_should_be_returned": {
            "name": "test_error_from_included_folder_should_be_returned",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str"
                ]
            }
        },
        "TestValidateFailIncludeExcludeFolder.validator_errors": {
            "name": "validator_errors",
            "location": 129,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str"
                ]
            }
        },
        "TestValidateFailIncludeExcludeFolder.test_excluded_folder_should_take_priority_over_included_folder": {
            "name": "test_excluded_folder_should_take_priority_over_included_folder",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str"
                ]
            }
        },
        "TestValidateFailOnDeletedExplore.validator_errors": {
            "name": "validator_errors",
            "location": 155,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "int",
                    "None",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFailOnDeletedExplore.test_error_from_deleted_explore_should_be_present": {
            "name": "test_error_from_deleted_explore_should_be_present",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str",
                    "dict[, ]",
                    "list[Exception]"
                ]
            }
        }
    },
    "spectacles-master/tests/test_data_test_validator.py": {
        "validator": {
            "name": "validator",
            "location": 11,
            "return": [
                "typing.Generator[DataTestValidator]"
            ],
            "arguments": {
                "looker_client": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "test_no_data_tests_should_raise_error": {
            "name": "test_no_data_tests_should_raise_error",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "TestValidatePass.tests": {
            "name": "tests",
            "location": 21,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str"
                ]
            }
        },
        "TestValidatePass.validator_errors": {
            "name": "validator_errors",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "tests": [
                    "str",
                    "tuple[str]",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestValidatePass.test_results_have_correct_number_of_elements": {
            "name": "test_results_have_correct_number_of_elements",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str"
                ],
                "tests": [
                    "str"
                ]
            }
        },
        "TestValidateFail.tests": {
            "name": "tests",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str"
                ]
            }
        },
        "TestValidateFail.validator_errors": {
            "name": "validator_errors",
            "location": 53,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "tests": [
                    "str",
                    "tuple[str]",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFail.test_results_have_correct_number_of_elements": {
            "name": "test_results_have_correct_number_of_elements",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_errors": [
                    "str"
                ],
                "tests": []
            }
        }
    },
    "spectacles-master/tests/test_logger.py": {
        "test_logging_failing_explore_sql": {
            "name": "test_logging_failing_explore_sql",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "sql_error": [
                    "str"
                ]
            }
        },
        "test_logging_failing_dimension_sql": {
            "name": "test_logging_failing_dimension_sql",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "sql_error": []
            }
        }
    },
    "spectacles-master/tests/test_lookml.py": {
        "test_model_from_json": {
            "name": "test_model_from_json",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explore_from_json": {
            "name": "test_explore_from_json",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dimension_from_json": {
            "name": "test_dimension_from_json",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignored_dimension_with_whitespace": {
            "name": "test_ignored_dimension_with_whitespace",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignored_dimension_with_no_whitespace": {
            "name": "test_ignored_dimension_with_no_whitespace",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignored_dimension_with_tags": {
            "name": "test_ignored_dimension_with_tags",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_to_mismatched_type_object_should_fail": {
            "name": "test_comparison_to_mismatched_type_object_should_fail",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "obj_name": [
                    "str"
                ]
            }
        },
        "test_assign_to_errored_should_raise_attribute_error": {
            "name": "test_assign_to_errored_should_raise_attribute_error",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_non_bool_errored_should_raise_value_error": {
            "name": "test_non_bool_errored_should_raise_value_error",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "obj_name": [
                    "str"
                ]
            }
        },
        "test_dimensions_with_different_sql_can_be_equal": {
            "name": "test_dimensions_with_different_sql_can_be_equal",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "int"
                ]
            }
        },
        "test_dimension_should_not_be_errored_if_not_queried": {
            "name": "test_dimension_should_not_be_errored_if_not_queried",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "None",
                    "dict[, ]"
                ],
                "sql_error": []
            }
        },
        "test_should_not_be_able_to_set_errored_on_dimension": {
            "name": "test_should_not_be_able_to_set_errored_on_dimension",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": []
            }
        },
        "test_should_not_be_able_to_set_errored_on_explore": {
            "name": "test_should_not_be_able_to_set_errored_on_explore",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "explore": []
            }
        },
        "test_parent_queried_behavior_should_depend_on_its_child": {
            "name": "test_parent_queried_behavior_should_depend_on_its_child",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "explore": [
                    "bool"
                ],
                "dimension": [
                    "bool"
                ],
                "model": [
                    "bool"
                ],
                "project": [
                    "bool"
                ]
            }
        },
        "test_comparison_to_mismatched_type_object_fails": {
            "name": "test_comparison_to_mismatched_type_object_fails",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [],
                "explore": [],
                "model": [],
                "project": []
            }
        },
        "test_explore_number_of_errors_batch_with_errors": {
            "name": "test_explore_number_of_errors_batch_with_errors",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "str"
                ],
                "explore": [],
                "sql_error": []
            }
        },
        "test_explore_number_of_errors_batch_with_no_errors": {
            "name": "test_explore_number_of_errors_batch_with_no_errors",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [],
                "explore": [
                    "str"
                ],
                "sql_error": [
                    "bool"
                ]
            }
        },
        "test_explore_number_of_errors_single_with_errors": {
            "name": "test_explore_number_of_errors_single_with_errors",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [],
                "explore": [
                    "str"
                ],
                "sql_error": []
            }
        },
        "test_explore_number_of_errors_single_with_no_errors": {
            "name": "test_explore_number_of_errors_single_with_no_errors",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "explore": [],
                "sql_error": [
                    "bool"
                ]
            }
        },
        "test_model_number_of_errors_batch_with_errors": {
            "name": "test_model_number_of_errors_batch_with_errors",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "str",
                    "bool"
                ],
                "explore": [
                    "bool"
                ],
                "model": [],
                "sql_error": []
            }
        },
        "test_model_number_of_errors_batch_with_no_errors": {
            "name": "test_model_number_of_errors_batch_with_no_errors",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "bool"
                ],
                "explore": [
                    "typing.Callable[List,bool, None]",
                    "str"
                ],
                "model": [],
                "sql_error": [
                    "bool"
                ]
            }
        },
        "test_model_number_of_errors_single_with_errors": {
            "name": "test_model_number_of_errors_single_with_errors",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [],
                "explore": [
                    "bool"
                ],
                "model": [],
                "sql_error": []
            }
        },
        "test_model_number_of_errors_single_with_no_errors": {
            "name": "test_model_number_of_errors_single_with_no_errors",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "bool"
                ],
                "explore": [
                    "float",
                    "bool"
                ],
                "model": [],
                "sql_error": [
                    "bool"
                ]
            }
        },
        "test_model_cannot_assign_errored_without_explorse": {
            "name": "test_model_cannot_assign_errored_without_explorse",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_model_get_errored_explores_returns_the_correct_explore": {
            "name": "test_model_get_errored_explores_returns_the_correct_explore",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "explore": [
                    "bool",
                    "str"
                ],
                "sql_error": []
            }
        },
        "test_project_number_of_errors_batch_with_errors": {
            "name": "test_project_number_of_errors_batch_with_errors",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "bool"
                ],
                "explore": [
                    "bool",
                    "str"
                ],
                "model": [
                    "str"
                ],
                "project": [
                    "list[typing.Any]",
                    "None",
                    "typing.Callable[List,bool, None]",
                    "float"
                ],
                "sql_error": [
                    "str",
                    "list[list[int]]",
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "bool"
                ]
            }
        },
        "test_project_number_of_errors_batch_with_no_errors": {
            "name": "test_project_number_of_errors_batch_with_no_errors",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "bool"
                ],
                "explore": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "str"
                ],
                "model": [
                    "int"
                ],
                "project": [
                    "list[typing.Any]",
                    "None",
                    "typing.Callable[List,bool, None]",
                    "float"
                ],
                "sql_error": [
                    "list[str]",
                    "typing.Callable[[], None]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_project_number_of_errors_single_with_errors": {
            "name": "test_project_number_of_errors_single_with_errors",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "str",
                    "typing.Collection",
                    "bool"
                ],
                "explore": [
                    "int"
                ],
                "model": [
                    "int",
                    "str"
                ],
                "project": [
                    "typing.Callable[List,bool, None]"
                ],
                "sql_error": [
                    "str",
                    "list[list[int]]",
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "bool"
                ]
            }
        },
        "test_project_number_of_errors_single_with_no_errors": {
            "name": "test_project_number_of_errors_single_with_no_errors",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "bool"
                ],
                "explore": [],
                "model": [
                    "int"
                ],
                "project": [
                    "typing.Callable[List,bool, None]",
                    "float"
                ],
                "sql_error": [
                    "list[str]",
                    "typing.Callable[[], None]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "TestBuildProject.test_model_explore_dimension_counts_should_match": {
            "name": "test_model_explore_dimension_counts_should_match",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestBuildProject.test_project_with_everything_excluded_should_not_have_models": {
            "name": "test_project_with_everything_excluded_should_not_have_models",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": [
                    "dict[, ]"
                ]
            }
        },
        "TestBuildProject.test_duplicate_selectors_should_be_deduplicated": {
            "name": "test_duplicate_selectors_should_be_deduplicated",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestBuildProject.test_hidden_dimension_should_be_excluded_with_ignore_hidden": {
            "name": "test_hidden_dimension_should_be_excluded_with_ignore_hidden",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestBuildUnconfiguredProject.test_project_with_no_configured_models_should_raise_error": {
            "name": "test_project_with_no_configured_models_should_raise_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestBuildDimensions.test_dimension_count_should_match": {
            "name": "test_dimension_count_should_match",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": [
                    "dict[str, str]"
                ]
            }
        },
        "TestBuildDimensions.test_hidden_dimension_should_be_excluded_with_ignore_hidden": {
            "name": "test_hidden_dimension_should_be_excluded_with_ignore_hidden",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looker_client": [
                    "str"
                ]
            }
        }
    },
    "spectacles-master/tests/test_lookml_validator.py": {
        "validator": {
            "name": "validator",
            "location": 9,
            "return": [
                "typing.Generator[LookMLValidator]"
            ],
            "arguments": {
                "looker_client": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_lookml_validator_passes_with_no_errors": {
            "name": "test_lookml_validator_passes_with_no_errors",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_lookml_validator_fails_with_errors": {
            "name": "test_lookml_validator_fails_with_errors",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        }
    },
    "spectacles-master/tests/test_printer.py": {
        "test_extract_sql_context": {
            "name": "test_extract_sql_context",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extract_sql_context_line_number_close_to_end": {
            "name": "test_extract_sql_context_line_number_close_to_end",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extract_sql_context_line_number_close_to_beginning": {
            "name": "test_extract_sql_context_line_number_close_to_beginning",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_line_odd_number_of_lines": {
            "name": "test_mark_line_odd_number_of_lines",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_line_even_number_of_lines": {
            "name": "test_mark_line_even_number_of_lines",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sql_error_prints_with_relevant_info": {
            "name": "test_sql_error_prints_with_relevant_info",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_log": [],
                "sql_error": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_content_error_prints_with_relevant_info": {
            "name": "test_content_error_prints_with_relevant_info",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_error": [
                    "typing.Type",
                    "bool",
                    "dict[str, bool]",
                    "tuple[]"
                ],
                "caplog": [
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "test_data_test_error_prints_with_relevant_info": {
            "name": "test_data_test_error_prints_with_relevant_info",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_error": [
                    "str",
                    "typing.Type",
                    "Exception",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_print_validation_result_should_work": {
            "name": "test_print_validation_result_should_work",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spectacles-master/tests/test_runner.py": {
        "test_validate_sql_should_work": {
            "name": "test_validate_sql_should_work",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": [],
                "fail_fast": []
            }
        },
        "test_validate_content_should_work": {
            "name": "test_validate_content_should_work",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": [
                    "str"
                ]
            }
        },
        "test_validate_data_tests_should_work": {
            "name": "test_validate_data_tests_should_work",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": [
                    "str"
                ]
            }
        },
        "test_validate_data_tests_returns_valid_schema": {
            "name": "test_validate_data_tests_returns_valid_schema",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_branch_manager": [],
                "mock_build_project": [],
                "mock_validate": [],
                "mock_get_tests": [],
                "project": [],
                "model": [],
                "explore": [],
                "schema": []
            }
        },
        "test_validate_content_returns_valid_schema": {
            "name": "test_validate_content_returns_valid_schema",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_branch_manager": [
                    "list[]",
                    "bool"
                ],
                "mock_build_project": [],
                "mock_validate": [
                    "str"
                ],
                "project": [],
                "model": [],
                "explore": [],
                "schema": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_validate_sql_returns_valid_schema": {
            "name": "test_validate_sql_returns_valid_schema",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_branch_manager": [],
                "mock_build_project": [],
                "mock_run_tests": [],
                "mock_create_tests": [],
                "project": [],
                "model": [],
                "explore": [],
                "schema": []
            }
        },
        "test_incremental_sql_with_equal_explores_should_not_error": {
            "name": "test_incremental_sql_with_equal_explores_should_not_error",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "str"
                ],
                "looker_client": []
            }
        },
        "test_incremental_sql_with_diff_explores_and_valid_sql_should_not_error": {
            "name": "test_incremental_sql_with_diff_explores_and_valid_sql_should_not_error",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [
                    "bool"
                ],
                "looker_client": []
            }
        },
        "test_incremental_sql_with_diff_explores_and_invalid_sql_should_error": {
            "name": "test_incremental_sql_with_diff_explores_and_invalid_sql_should_error",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": []
            }
        },
        "test_incremental_sql_with_diff_explores_and_invalid_diff_sql_should_error": {
            "name": "test_incremental_sql_with_diff_explores_and_invalid_diff_sql_should_error",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": []
            }
        },
        "test_incremental_sql_with_diff_explores_and_invalid_existing_sql_should_error": {
            "name": "test_incremental_sql_with_diff_explores_and_invalid_existing_sql_should_error",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_time_hash": [],
                "looker_client": []
            }
        },
        "test_incremental_same_results_should_not_have_errors": {
            "name": "test_incremental_same_results_should_not_have_errors",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incremental_with_fewer_errors_than_target": {
            "name": "test_incremental_with_fewer_errors_than_target",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incremental_with_more_errors_than_target": {
            "name": "test_incremental_with_more_errors_than_target",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incremental_with_fewer_tested_explores_than_target": {
            "name": "test_incremental_with_fewer_tested_explores_than_target",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_data_tests_returns_valid_schema.add_error_to_project": {
            "name": "add_error_to_project",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": []
            }
        },
        "test_validate_content_returns_valid_schema.add_error_to_project": {
            "name": "add_error_to_project",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": []
            }
        },
        "test_validate_sql_returns_valid_schema.add_error_to_project": {
            "name": "add_error_to_project",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": [],
                "profile": []
            }
        }
    },
    "spectacles-master/tests/test_select.py": {
        "test_invalid_format_should_raise_value_error": {
            "name": "test_invalid_format_should_raise_value_error",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_selector_should_raise_value_error": {
            "name": "test_empty_selector_should_raise_value_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_wildcard_should_match": {
            "name": "test_select_wildcard_should_match",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "filters": [
                    "str"
                ]
            }
        },
        "test_select_model_wildcard_should_match": {
            "name": "test_select_model_wildcard_should_match",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_explore_wildcard_should_match": {
            "name": "test_select_explore_wildcard_should_match",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_exact_model_and_explore_should_match": {
            "name": "test_select_exact_model_and_explore_should_match",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_wrong_model_should_not_match": {
            "name": "test_select_wrong_model_should_not_match",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_wrong_explore_should_not_match": {
            "name": "test_select_wrong_explore_should_not_match",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exclude_wildcard_should_not_match": {
            "name": "test_exclude_wildcard_should_not_match",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "filters": [
                    "str"
                ]
            }
        },
        "test_exclude_model_wildcard_should_not_match": {
            "name": "test_exclude_model_wildcard_should_not_match",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "filters": [
                    "typing.Type"
                ]
            }
        },
        "test_exclude_explore_wildcard_should_not_match": {
            "name": "test_exclude_explore_wildcard_should_not_match",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "filters": [
                    "str"
                ]
            }
        },
        "test_exclude_exact_model_and_explore_should_not_match": {
            "name": "test_exclude_exact_model_and_explore_should_not_match",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "filters": [
                    "int"
                ]
            }
        }
    },
    "spectacles-master/tests/test_sql_validator.py": {
        "validator": {
            "name": "validator",
            "location": 13,
            "return": [
                "typing.Generator[SqlValidator]"
            ],
            "arguments": {
                "looker_client": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_create_and_run_keyboard_interrupt_cancels_queries": {
            "name": "test_create_and_run_keyboard_interrupt_cancels_queries",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_cancel_queries": {
            "name": "test_cancel_queries",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_client_cancel": [],
                "validator": []
            }
        },
        "test_extract_error_details_error_dict": {
            "name": "test_extract_error_details_error_dict",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_list": {
            "name": "test_extract_error_details_error_list",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_other": {
            "name": "test_extract_error_details_error_other",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_non_str_message_details": {
            "name": "test_extract_error_details_error_non_str_message_details",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_no_message_details": {
            "name": "test_extract_error_details_no_message_details",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_loc_wo_line": {
            "name": "test_extract_error_details_error_loc_wo_line",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_and_v1_warning": {
            "name": "test_extract_error_details_error_and_v1_warning",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_v1_warning": {
            "name": "test_extract_error_details_v1_warning",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_error_and_v2_warning": {
            "name": "test_extract_error_details_error_and_v2_warning",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "test_extract_error_details_v2_warning": {
            "name": "test_extract_error_details_v2_warning",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": []
            }
        },
        "TestValidatePass.project": {
            "name": "project",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestValidatePass.explore_tests": {
            "name": "explore_tests",
            "location": 36,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "project": []
            }
        },
        "TestValidatePass.validator_after_run": {
            "name": "validator_after_run",
            "location": 42,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "explore_tests": [
                    "str"
                ]
            }
        },
        "TestValidatePass.dimension_tests": {
            "name": "dimension_tests",
            "location": 49,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [],
                "project": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "TestValidatePass.test_project_should_be_queried_but_not_have_errors": {
            "name": "test_project_should_be_queried_but_not_have_errors",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [],
                "explore_tests": [
                    "str",
                    "int"
                ],
                "project": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "TestValidatePass.test_running_tests_should_be_empty": {
            "name": "test_running_tests_should_be_empty",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestValidatePass.test_ignored_dimensions_should_not_be_queried": {
            "name": "test_ignored_dimensions_should_not_be_queried",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [
                    "str"
                ],
                "project": []
            }
        },
        "TestValidatePass.test_should_be_one_explore_test_per_explore": {
            "name": "test_should_be_one_explore_test_per_explore",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explore_tests": [
                    "bool"
                ],
                "project": [
                    "bool"
                ]
            }
        },
        "TestValidatePass.test_should_not_be_any_dimension_tests": {
            "name": "test_should_not_be_any_dimension_tests",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension_tests": [
                    "str"
                ]
            }
        },
        "TestValidatePass.test_all_tests_should_be_unique": {
            "name": "test_all_tests_should_be_unique",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explore_tests": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestValidateFail.project": {
            "name": "project",
            "location": 88,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "looker_client": []
            }
        },
        "TestValidateFail.explore_tests": {
            "name": "explore_tests",
            "location": 100,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "project": []
            }
        },
        "TestValidateFail.validator_after_run": {
            "name": "validator_after_run",
            "location": 106,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "explore_tests": [
                    "str"
                ]
            }
        },
        "TestValidateFail.dimension_tests": {
            "name": "dimension_tests",
            "location": 113,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [],
                "project": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "TestValidateFail.test_project_should_be_queried_and_have_at_least_one_error": {
            "name": "test_project_should_be_queried_and_have_at_least_one_error",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [],
                "explore_tests": [
                    "str",
                    "int"
                ],
                "project": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestValidateFail.test_running_tests_should_be_empty": {
            "name": "test_running_tests_should_be_empty",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestValidateFail.test_ignored_dimensions_should_not_be_queried": {
            "name": "test_ignored_dimensions_should_not_be_queried",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_after_run": [
                    "str"
                ],
                "project": []
            }
        },
        "TestValidateFail.test_should_be_one_explore_test_per_explore": {
            "name": "test_should_be_one_explore_test_per_explore",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explore_tests": [
                    "bool"
                ],
                "project": [
                    "bool"
                ]
            }
        },
        "TestValidateFail.test_should_be_one_dimension_test_per_dimension": {
            "name": "test_should_be_one_dimension_test_per_dimension",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension_tests": [
                    "bool"
                ],
                "project": []
            }
        },
        "TestValidateFail.test_all_tests_should_be_unique": {
            "name": "test_all_tests_should_be_unique",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explore_tests": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "float"
                ],
                "dimension_tests": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "float"
                ]
            }
        }
    },
    "spectacles-master/tests/test_tracking.py": {
        "test_anonymise_url": {
            "name": "test_anonymise_url",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_anonymise_project": {
            "name": "test_anonymise_project",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_track_invocation_start_sql": {
            "name": "test_track_invocation_start_sql",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        },
        "test_track_invocation_start_assert": {
            "name": "test_track_invocation_start_assert",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        },
        "test_track_invocation_start_connect": {
            "name": "test_track_invocation_start_connect",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        },
        "test_track_invocation_end_sql": {
            "name": "test_track_invocation_end_sql",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        },
        "test_track_invocation_end_assert": {
            "name": "test_track_invocation_end_assert",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        },
        "test_track_invocation_end_connect": {
            "name": "test_track_invocation_end_connect",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_track": []
            }
        }
    },
    "spectacles-master/tests/test_utils.py": {
        "test_compose_url_one_path_component": {
            "name": "test_compose_url_one_path_component",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose_url_multiple_path_components": {
            "name": "test_compose_url_multiple_path_components",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose_url_multiple_path_components_and_multiple_field_params": {
            "name": "test_compose_url_multiple_path_components_and_multiple_field_params",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose_url_multiple_path_components_and_one_field_params": {
            "name": "test_compose_url_multiple_path_components_and_one_field_params",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose_url_with_extra_slashes": {
            "name": "test_compose_url_with_extra_slashes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_human_readable": {
            "name": "test_human_readable",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "elapsed": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_get_detail": {
            "name": "test_get_detail",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "fn_name": [
                    "str",
                    "None",
                    "typing.Sequence[str]",
                    "typing.Sequence[int]"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_chunks_returns_expected_results": {
            "name": "test_chunks_returns_expected_results",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLogDurationDecorator.test_log_SQL": {
            "name": "test_log_SQL",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogDurationDecorator.test_log_assert": {
            "name": "test_log_assert",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogDurationDecorator.test_log_content": {
            "name": "test_log_content",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogDurationDecorator.test_log_other": {
            "name": "test_log_other",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spectacles-master/tests/utils.py": {
        "load_resource": {
            "name": "load_resource",
            "location": 7,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "build_validation": {
            "name": "build_validation",
            "location": 14,
            "return": [],
            "arguments": {
                "validator": []
            }
        }
    }
}
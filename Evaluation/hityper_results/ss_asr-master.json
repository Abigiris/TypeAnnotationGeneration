{
    "ss_asr-master/src/asr.py": {
        "ASR.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dim": [
                    "int",
                    "tuple[int]"
                ],
                "encoder_state_size": [
                    "int",
                    "list[int]"
                ],
                "decoder_state_size": [
                    "int",
                    "typing.Iterable[int]",
                    "float"
                ],
                "mlp_out_size": [
                    "bool",
                    "float"
                ],
                "feature_dim": [
                    "int",
                    "list[int]",
                    "float"
                ],
                "tf_rate": [
                    "str",
                    "bool",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "list[str]"
                ]
            }
        },
        "ASR.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "tuple[typing.Union[typing.Pattern,dict[str, tuple[typing.Union[typing.Any,typing.Any]]]]]"
            ],
            "arguments": {
                "self": [],
                "audio_feature": [
                    "int",
                    "None"
                ],
                "decode_step": [
                    "str",
                    "int"
                ],
                "teacher": [
                    "None",
                    "list[typing.Any]"
                ],
                "state_len": [
                    "None",
                    "str",
                    "bytearray",
                    "int"
                ]
            }
        },
        "ASR.decode": {
            "name": "decode",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "x_len": [
                    "int"
                ],
                "rnn_lm": [
                    "int",
                    "None",
                    "str"
                ],
                "mapper": [
                    "int",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ],
                "lm_weight": [
                    "str",
                    "float",
                    "typing.Container",
                    "int",
                    "list[str]"
                ]
            }
        },
        "ASR.init_parameters": {
            "name": "init_parameters",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_size": [
                    "int",
                    "str",
                    "bytes"
                ],
                "feature_dim": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Listener.get_outdim": {
            "name": "get_outdim",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Listener.forward": {
            "name": "forward",
            "location": 243,
            "return": [
                "tuple[typing.Union[float,int,list[list[int]],str,list[],bytes,list[int],list[str]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict[str, \"Outcome\"]"
                ],
                "state_len": [
                    "int",
                    "dict[str, \"Outcome\"]"
                ],
                "pack_input": [
                    "bool"
                ]
            }
        },
        "Speller.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_size": [
                    "int"
                ],
                "encoder_out_size": [
                    "int"
                ]
            }
        },
        "Speller.init_rnn": {
            "name": "init_rnn",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "device": [
                    "int"
                ]
            }
        },
        "Speller.hidden_state": {
            "name": "hidden_state",
            "location": 309,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Speller.forward": {
            "name": "forward",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "input_context": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlp_out_size": [
                    "int",
                    "float"
                ],
                "encoder_out_size": [
                    "int",
                    "float"
                ],
                "decoder_state_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Attention.reset_enc_mem": {
            "name": "reset_enc_mem",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 343,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "self": [],
                "decoder_state": [
                    "int",
                    "list[list[str]]"
                ],
                "listener_feature": [
                    "int",
                    "list[list[int]]"
                ],
                "state_len": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "pBLSTM.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [
                    "bool",
                    "str"
                ],
                "out_dim": [
                    "bool",
                    "str"
                ]
            }
        },
        "pBLSTM.forward": {
            "name": "forward",
            "location": 406,
            "return": [
                "tuple[typing.Union[tuple[typing.Union[typing.Literal,typing.Literal]],float,int,str,dict[str, int],dict[typing.Any, str],list[int]]]",
                "tuple[typing.Union[tuple[typing.Union[typing.Literal,typing.Literal]],float,int,str,dict[str, int],dict[typing.Any, str]]]"
            ],
            "arguments": {
                "self": [],
                "input_x": [
                    "dict[str, int]",
                    "float"
                ],
                "state": [
                    "None",
                    "float",
                    "str"
                ],
                "state_len": [
                    "None",
                    "typing.Collection",
                    "tuple[typing.Union[int,int]]"
                ],
                "pack_input": [
                    "bool"
                ]
            }
        },
        "pBLSTM.downsample": {
            "name": "downsample",
            "location": 429,
            "return": [
                "int",
                "set[int]",
                "float",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ASR.init_parameters.lecun_normal_init_parameters": {
            "name": "lecun_normal_init_parameters",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "ASR.init_parameters.set_forget_bias_to_one": {
            "name": "set_forget_bias_to_one",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "bias": []
            }
        }
    },
    "ss_asr-master/src/ASRDataset.py": {
        "load_df": {
            "name": "load_df",
            "location": 13,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "load_asr_dataset": {
            "name": "load_asr_dataset",
            "location": 264,
            "return": [
                "tuple[typing.Union[Mapper,ASRDataset,DataLoader]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "typing.TextIO",
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "n_jobs": [
                    "int"
                ],
                "text_only": [
                    "bool"
                ],
                "use_gpu": [
                    "bool"
                ],
                "sort_key": [
                    "typing.Text"
                ],
                "sort_ascending": [
                    "bool"
                ],
                "drop_rate": [
                    "float"
                ]
            }
        },
        "prepare_x": {
            "name": "prepare_x",
            "location": 297,
            "return": [
                "tuple[typing.Union[float,int,list[list[int]],list[int]]]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "device": []
            }
        },
        "prepare_y": {
            "name": "prepare_y",
            "location": 319,
            "return": [
                "tuple[typing.Union[float,tuple[],list[int],list[],typing.Type,dict[, ]]]"
            ],
            "arguments": {
                "y": [
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "device": []
            }
        },
        "ASRDataset.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tsv_file": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "int",
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "chars": [],
                "text_only": [
                    "bool"
                ],
                "sort_key": [
                    "typing.Text"
                ],
                "sort_ascending": [
                    "bool"
                ],
                "drop_rate": [
                    "float"
                ]
            }
        },
        "ASRDataset.char2idx": {
            "name": "char2idx",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[bytes, bytes]",
                    "bool"
                ]
            }
        },
        "ASRDataset.idx2char": {
            "name": "idx2char",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ASRDataset.get_fbank": {
            "name": "get_fbank",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ASRDataset.get_fbank_by_path": {
            "name": "get_fbank_by_path",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ASRDataset.get_batched_fbanks": {
            "name": "get_batched_fbanks",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "start_idx": [
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "ASRDataset.get_batched_fbanks_by_paths": {
            "name": "get_batched_fbanks_by_paths",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ]
            }
        },
        "ASRDataset.get_text": {
            "name": "get_text",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "None"
                ],
                "drop_rate": [
                    "float"
                ]
            }
        },
        "ASRDataset.get_batched_texts": {
            "name": "get_batched_texts",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "start_idx": [
                    "int",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "pad_token": [],
                "drop_rate": [
                    "float"
                ]
            }
        },
        "ASRDataset._batch_range": {
            "name": "_batch_range",
            "location": 153,
            "return": [
                "range"
            ],
            "arguments": {
                "self": [],
                "start_idx": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ASRDataset._stop_ind": {
            "name": "_stop_ind",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "start_idx": [
                    "int"
                ]
            }
        },
        "ASRDataset.encode": {
            "name": "encode",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ASRDataset.decode": {
            "name": "decode",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "inds": []
            }
        },
        "ASRDataset.get_framelength": {
            "name": "get_framelength",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "list[str]",
                    "typing.Any",
                    "dict[, ]"
                ]
            }
        },
        "ASRDataset.get_feature_dim": {
            "name": "get_feature_dim",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.get_char_dim": {
            "name": "get_char_dim",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.__len__": {
            "name": "__len__",
            "location": 203,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.__getitem__": {
            "name": "__getitem__",
            "location": 206,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "BaseException"
                ]
            }
        },
        "Mapper.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Mapper.get_dim": {
            "name": "get_dim",
            "location": 237,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper.translate": {
            "name": "translate",
            "location": 240,
            "return": [
                "list[]",
                "list[str]",
                "typing.Pattern",
                "list[tuple[typing.Union[str,str,str,typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Mapper.ind_to_char": {
            "name": "ind_to_char",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "ind": [
                    "bool",
                    "str"
                ]
            }
        },
        "Mapper.char_to_ind": {
            "name": "char_to_ind",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ss_asr-master/src/charlm.py": {
        "CharLM.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "dict[str, torch.LongTensor]",
                    "tuple[typing.Union[int,int]]"
                ],
                "hidden_size": [
                    "int",
                    "dict[str, torch.LongTensor]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CharLM.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "h_1": [
                    "float"
                ],
                "h_2": [
                    "float",
                    "int"
                ]
            }
        },
        "CharLM.init_hidden": {
            "name": "init_hidden",
            "location": 59,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "list[int]"
                ],
                "device": [
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "ss_asr-master/src/discriminator.py": {
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "hidden_dim": [
                    "int"
                ]
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Iterable[typing.Iterable[float]]"
                ]
            }
        }
    },
    "ss_asr-master/src/generate.py": {},
    "ss_asr-master/src/LMDataset.py": {
        "load_lm_dataset": {
            "name": "load_lm_dataset",
            "location": 78,
            "return": [
                "tuple[typing.Union[LMDataset,DataLoader]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "chunk_size": [
                    "str",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bytes"
                ],
                "shuffle": [
                    "bool"
                ],
                "label_format": [
                    "bool"
                ]
            }
        },
        "make_split": {
            "name": "make_split",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "train_file": [
                    "str"
                ],
                "eval_file": [
                    "str"
                ],
                "split": []
            }
        },
        "LMDataset.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ],
                "chunk_size": [
                    "int"
                ],
                "chars": [],
                "label_format": [
                    "bool"
                ]
            }
        },
        "LMDataset.s2l": {
            "name": "s2l",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LMDataset.s2oh": {
            "name": "s2oh",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LMDataset.get_num_chars": {
            "name": "get_num_chars",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LMDataset.__len__": {
            "name": "__len__",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LMDataset.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "ss_asr-master/src/lm_predict.py": {},
    "ss_asr-master/src/LogHandler.py": {
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "float",
                    "bytes"
                ],
                "module_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LogHandler.scalar": {
            "name": "scalar",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "typing.Type"
                ],
                "val": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "step": [
                    "str",
                    "float",
                    "typing.Type"
                ]
            }
        },
        "LogHandler.text": {
            "name": "text",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "None"
                ],
                "val": [
                    "int",
                    "str",
                    "None"
                ],
                "step": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "LogHandler.image": {
            "name": "image",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "typing.Any",
                    "None"
                ],
                "val": [
                    "str",
                    "dict[, ]",
                    "typing.Any",
                    "None"
                ],
                "step": [
                    "str",
                    "dict[, ]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "LogHandler.figure": {
            "name": "figure",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Type",
                    "None",
                    "bytes",
                    "int"
                ],
                "val": [
                    "str",
                    "typing.Type",
                    "None",
                    "bytes",
                    "int"
                ],
                "step": [
                    "str",
                    "typing.Type",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "LogHandler.embedding": {
            "name": "embedding",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "val": [
                    "str",
                    "bytes"
                ],
                "meta": [
                    "str",
                    "bytes"
                ],
                "step": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ss_asr-master/src/postprocess.py": {
        "calc_acc": {
            "name": "calc_acc",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "predict": [
                    "str",
                    "bytes"
                ],
                "label": []
            }
        },
        "calc_err": {
            "name": "calc_err",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "predict": [
                    "typing.Iterable[typing.Any]"
                ],
                "label": [],
                "mapper": [
                    "bool"
                ]
            }
        },
        "draw_att": {
            "name": "draw_att",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {
                "att_maps": [],
                "hyps": [
                    "str",
                    "int",
                    "float",
                    "list[int]",
                    "list[float]"
                ]
            }
        },
        "trim_eos": {
            "name": "trim_eos",
            "location": 66,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "sequence": []
            }
        }
    },
    "ss_asr-master/src/preprocess.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "txt_dir": [],
                "wav_dir": [],
                "processed_dir": [
                    "None"
                ]
            }
        },
        "iterate_by_ids": {
            "name": "iterate_by_ids",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "txt_dir": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "process_pair": {
            "name": "process_pair",
            "location": 83,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "text_path": [],
                "wav_path": [],
                "processed_dir": []
            }
        },
        "preprocess_malromur": {
            "name": "preprocess_malromur",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "wav_dir": [],
                "processed_dir": [
                    "None"
                ]
            }
        },
        "iterate_malromur_index": {
            "name": "iterate_malromur_index",
            "location": 135,
            "return": [
                "list[]"
            ],
            "arguments": {
                "index_path": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "process_malromur_pair": {
            "name": "process_malromur_pair",
            "location": 164,
            "return": [
                "None",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "text": [],
                "wav_path": [],
                "processed_dir": []
            }
        },
        "log_fbank": {
            "name": "log_fbank",
            "location": 187,
            "return": [],
            "arguments": {
                "y": [],
                "sample_rate": []
            }
        },
        "load_wav": {
            "name": "load_wav",
            "location": 210,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "text_from_file": {
            "name": "text_from_file",
            "location": 218,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "normalize_string": {
            "name": "normalize_string",
            "location": 226,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "s": [],
                "append_tokens": [
                    "bool"
                ]
            }
        },
        "zero_pad": {
            "name": "zero_pad",
            "location": 253,
            "return": [],
            "arguments": {
                "fbank": [],
                "max_len": []
            }
        },
        "make_split": {
            "name": "make_split",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "train_r": [
                    "float"
                ],
                "eval_r": [
                    "float"
                ]
            }
        },
        "sort_index": {
            "name": "sort_index",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "sort_key": [],
                "sort_ascending": [
                    "bool"
                ],
                "out_index": [
                    "None"
                ]
            }
        },
        "subset_by_t": {
            "name": "subset_by_t",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [],
                "index": [],
                "out_index": [],
                "avg_utt_s": [
                    "float"
                ]
            }
        }
    },
    "ss_asr-master/src/speech_autoencoder.py": {
        "SpeechAutoEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener_out_dim": [
                    "list['cirq.Circuit']",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "float",
                    "int",
                    "bytes"
                ],
                "feature_dim": [
                    "list['cirq.Circuit']",
                    "list[str]",
                    "float",
                    "int",
                    "bytes"
                ],
                "kernel_sizes": [
                    "int",
                    "None",
                    "dict[str, str]"
                ],
                "num_filters": [
                    "int",
                    "None",
                    "dict[str, str]"
                ],
                "pool_kernel_sizes": [
                    "int",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "SpeechAutoEncoder.forward": {
            "name": "forward",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "listener_out": [],
                "just_first": [
                    "bool"
                ]
            }
        },
        "SpeechEncoder.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ks": [],
                "num_filters": [],
                "pool_ks": []
            }
        },
        "SpeechEncoder.forward": {
            "name": "forward",
            "location": 149,
            "return": [
                "int",
                "list[list[str]]",
                "set[]",
                "float",
                "list[complex]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[]",
                    "float",
                    "list[float]"
                ]
            }
        },
        "SpeechDecoder.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [
                    "dict[, ]",
                    "None",
                    "int",
                    "list['cirq.Circuit']"
                ],
                "out_dim": [
                    "dict[, ]",
                    "None",
                    "int",
                    "list['cirq.Circuit']"
                ]
            }
        },
        "SpeechDecoder.forward": {
            "name": "forward",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "ss_asr-master/src/text_autoencoder.py": {
        "TextAutoEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_dim": [
                    "int",
                    "str"
                ],
                "emb_dim": [
                    "int"
                ],
                "state_size": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ]
            }
        },
        "TextAutoEncoder.forward": {
            "name": "forward",
            "location": 31,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "asr": [],
                "y": [
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "None",
                    "int",
                    "bytes",
                    "str"
                ],
                "y_noised": [
                    "bool"
                ],
                "decode_step": [
                    "float",
                    "int"
                ],
                "noise_lens": [
                    "None",
                    "int"
                ]
            }
        },
        "TextEncoder.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_dim": [
                    "str",
                    "bool",
                    "list[int]"
                ],
                "emb_dim": [
                    "int",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "state_size": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ]
            }
        },
        "TextEncoder.forward": {
            "name": "forward",
            "location": 104,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "bytes"
                ]
            }
        }
    },
    "ss_asr-master/src/TrackerHandler.py": {
        "TrackerHandler.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "module_id": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "TrackerHandler.do_step": {
            "name": "do_step",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerHandler.get_best": {
            "name": "get_best",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrackerHandler.set_best": {
            "name": "set_best",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "TrackerHandler._save": {
            "name": "_save",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ss_asr-master/src/train.py": {},
    "ss_asr-master/src/trainer.py": {
        "asr_seed_train": {
            "name": "asr_seed_train",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "paras": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.TextIO",
                    "None"
                ]
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "paras": [
                    "str"
                ],
                "module_id": [
                    "str",
                    "tuple[typing.Union[str,float]]"
                ]
            }
        },
        "Solver.verbose_summary": {
            "name": "verbose_summary",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.set_if_exists": {
            "name": "set_if_exists",
            "location": 98,
            "return": [
                "bool",
                "str",
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "default": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Solver.verbose": {
            "name": "verbose",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]"
                ],
                "progress": [
                    "bool"
                ]
            }
        },
        "Solver.step": {
            "name": "step",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "dict[, ]"
                ],
                "optim": [],
                "grad_clip": [
                    "int"
                ]
            }
        },
        "Solver.setup_module": {
            "name": "setup_module",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ],
                "ckp_path": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Solver.genpath": {
            "name": "genpath",
            "location": 170,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[str]",
                "int",
                "typing.Sequence[]",
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[]"
                ],
                "module_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "Solver.close": {
            "name": "close",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CHARLMTrainer.load_data": {
            "name": "load_data",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.set_model": {
            "name": "set_model",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.exec": {
            "name": "exec",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.predict": {
            "name": "predict",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "float"
                ],
                "tf_rate": [
                    "int",
                    "float"
                ]
            }
        },
        "CHARLMTrainer.generate": {
            "name": "generate",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "temp": [
                    "float"
                ],
                "start": []
            }
        },
        "CHARLMTrainer.close": {
            "name": "close",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ASRTrainer.load_data": {
            "name": "load_data",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.set_model": {
            "name": "set_model",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.exec": {
            "name": "exec",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.valid": {
            "name": "valid",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.close": {
            "name": "close",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bool"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ASRTester.load_data": {
            "name": "load_data",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.set_model": {
            "name": "set_model",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.exec": {
            "name": "exec",
            "location": 578,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "lm_weight": [
                    "None",
                    "int",
                    "typing.Any",
                    "bytes"
                ]
            }
        },
        "TAETrainer.__init__": {
            "name": "__init__",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TAETrainer.load_data": {
            "name": "load_data",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.set_model": {
            "name": "set_model",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": [
                    "None",
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ]
            }
        },
        "TAETrainer.exec": {
            "name": "exec",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.valid": {
            "name": "valid",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.close": {
            "name": "close",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.__init__": {
            "name": "__init__",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SAETrainer.load_data": {
            "name": "load_data",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.set_model": {
            "name": "set_model",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": [
                    "None",
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ]
            }
        },
        "SAETrainer.exec": {
            "name": "exec",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.valid": {
            "name": "valid",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.close": {
            "name": "close",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.__init__": {
            "name": "__init__",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "paras": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ADVTrainer.load_data": {
            "name": "load_data",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.set_model": {
            "name": "set_model",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": [
                    "None",
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ],
                "taepath": [
                    "None",
                    "int",
                    "list[]"
                ]
            }
        },
        "ADVTrainer.exec": {
            "name": "exec",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.valid": {
            "name": "valid",
            "location": 1049,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.close": {
            "name": "close",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ss_asr-master/src/xmlparser.py": {
        "prepro_file": {
            "name": "prepro_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "in_file": [],
                "out_file": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "parent_dir": [
                    "str",
                    "None"
                ],
                "out_path": [
                    "str"
                ],
                "reset_file": [
                    "bool"
                ]
            }
        }
    }
}
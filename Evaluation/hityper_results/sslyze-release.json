{
    "sslyze-release/api_sample.py": {
        "_print_failed_scan_command_attempt": {
            "name": "_print_failed_scan_command_attempt",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_command_attempt": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "example_json_result_parsing": {
            "name": "example_json_result_parsing",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sslyze-release/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "get_project_info": {
            "name": "get_project_info",
            "location": 29,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_include_files": {
            "name": "get_include_files",
            "location": 36,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {}
        },
        "Executable.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [],
                "targetName": []
            }
        }
    },
    "sslyze-release/tasks.py": {
        "test": {
            "name": "test",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "gen_doc": {
            "name": "gen_doc",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "release": {
            "name": "release",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_exe": {
            "name": "build_exe",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "gen_json_schema": {
            "name": "gen_json_schema",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "sslyze-release/docs/conf.py": {},
    "sslyze-release/sslyze/errors.py": {
        "ConnectionToServerFailed.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/server_connectivity.py": {
        "check_connectivity_to_server": {
            "name": "check_connectivity_to_server",
            "location": 51,
            "return": [
                "ServerTlsProbingResult"
            ],
            "arguments": {
                "server_location": [
                    "str",
                    "int"
                ],
                "network_configuration": [
                    "str",
                    "int"
                ]
            }
        },
        "_detect_support_for_tls_1_3": {
            "name": "_detect_support_for_tls_1_3",
            "location": 223,
            "return": [
                "_TlsVersionDetectionResult"
            ],
            "arguments": {
                "server_location": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "network_config": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "_detect_support_for_tls_1_2_or_below": {
            "name": "_detect_support_for_tls_1_2_or_below",
            "location": 270,
            "return": [
                "_TlsVersionDetectionResult"
            ],
            "arguments": {
                "server_location": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "None"
                ],
                "network_config": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "None"
                ],
                "tls_version": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "None"
                ]
            }
        },
        "_detect_client_auth_requirement_with_tls_1_3": {
            "name": "_detect_client_auth_requirement_with_tls_1_3",
            "location": 328,
            "return": [],
            "arguments": {
                "server_location": [
                    "bool",
                    "str"
                ],
                "network_config": [
                    "bool",
                    "str"
                ]
            }
        },
        "_detect_client_auth_requirement_with_tls_1_2_or_below": {
            "name": "_detect_client_auth_requirement_with_tls_1_2_or_below",
            "location": 381,
            "return": [],
            "arguments": {
                "server_location": [
                    "bool",
                    "str",
                    "float"
                ],
                "network_config": [
                    "bool",
                    "str",
                    "float"
                ],
                "tls_version": [
                    "str",
                    "int"
                ],
                "cipher_list": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_detect_ecdh_support": {
            "name": "_detect_ecdh_support",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "server_location": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "None",
                    "str"
                ],
                "network_config": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "None",
                    "str"
                ],
                "tls_version": [
                    "int",
                    "str"
                ]
            }
        },
        "enable_ecdh_cipher_suites": {
            "name": "enable_ecdh_cipher_suites",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "tls_version": [
                    "bytes",
                    "typing.Mapping",
                    "None",
                    "bool",
                    "typing.Callable[typing.Any, None]"
                ],
                "ssl_client": []
            }
        },
        "ServerConnectivityInfo.get_preconfigured_tls_connection": {
            "name": "get_preconfigured_tls_connection",
            "location": 157,
            "return": [
                "SslConnection"
            ],
            "arguments": {
                "self": [],
                "override_tls_version": [
                    "None",
                    "str",
                    "bool",
                    "typing.Any",
                    "list[str]"
                ],
                "ca_certificates_path": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "should_use_legacy_openssl": [
                    "None",
                    "str",
                    "bool",
                    "list[]"
                ],
                "should_enable_server_name_indication": [
                    "bool"
                ]
            }
        }
    },
    "sslyze-release/sslyze/server_setting.py": {
        "_do_dns_lookup": {
            "name": "_do_dns_lookup",
            "location": 115,
            "return": [],
            "arguments": {
                "hostname": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "HttpProxySettings.from_url": {
            "name": "from_url",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]"
                ],
                "proxy_url": [
                    "str"
                ]
            }
        },
        "HttpProxySettings.proxy_authorization_header": {
            "name": "proxy_authorization_header",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerNetworkLocation.display_string": {
            "name": "display_string",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerNetworkLocation.connection_type": {
            "name": "connection_type",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerNetworkLocation.__post_init__": {
            "name": "__post_init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientAuthenticationCredentials.__post_init__": {
            "name": "__post_init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerNetworkConfiguration.__post_init__": {
            "name": "__post_init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerNetworkConfiguration.default_for_server_location": {
            "name": "default_for_server_location",
            "location": 205,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "typing.Type"
                ],
                "server_location": [
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "typing.Type"
                ]
            }
        }
    },
    "sslyze-release/sslyze/__init__.py": {},
    "sslyze-release/sslyze/__main__.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sslyze-release/sslyze/__version__.py": {},
    "sslyze-release/sslyze/cli/command_line_parser.py": {
        "CommandLineParsingError.get_error_msg": {
            "name": "get_error_msg",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrustStoresUpdateCompleted.get_error_msg": {
            "name": "get_error_msg",
            "location": 44,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineParser.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sslyze_version": [
                    "str",
                    "None"
                ]
            }
        },
        "CommandLineParser.parse_command_line": {
            "name": "parse_command_line",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandLineParser._add_default_options": {
            "name": "_add_default_options",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineParser._get_plugin_scan_commands": {
            "name": "_get_plugin_scan_commands",
            "location": 449,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "sslyze-release/sslyze/cli/console_output.py": {
        "_server_location_to_network_route": {
            "name": "_server_location_to_network_route",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "server_location": []
            }
        },
        "scan_command_error_as_console_output": {
            "name": "scan_command_error_as_console_output",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "server_location": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "list[str]"
                ],
                "scan_command": [
                    "int",
                    "list[str]"
                ],
                "scan_command_attempt": [
                    "str",
                    "int"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_to": [
                    "bool",
                    "str",
                    "tuple[]"
                ],
                "json_path_out": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput._format_title": {
            "name": "_format_title",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "memoryview",
                    "str",
                    "bytes",
                    "typing.BinaryIO"
                ],
                "title": []
            }
        },
        "ObserverToGenerateConsoleOutput.command_line_parsed": {
            "name": "command_line_parsed",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_command_line": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput.server_connectivity_test_error": {
            "name": "server_connectivity_test_error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "typing.Callable[str,List, None]",
                    "str",
                    "set[]",
                    "int"
                ],
                "connectivity_error": [
                    "typing.TextIO",
                    "int",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput.server_connectivity_test_completed": {
            "name": "server_connectivity_test_completed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "str"
                ],
                "connectivity_result": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput.server_scan_completed": {
            "name": "server_scan_completed",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result": [
                    "str",
                    "None",
                    "set[str]",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]",
                    "float"
                ]
            }
        },
        "ObserverToGenerateConsoleOutput.all_server_scans_completed": {
            "name": "all_server_scans_completed",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/cli/server_string_parser.py": {
        "CommandLineServerStringParser.parse_server_string": {
            "name": "parse_server_string",
            "location": 22,
            "return": [
                "tuple[typing.Union[set[],str,tuple[typing.Hashable]]]"
            ],
            "arguments": {
                "cls": [],
                "server_str": [
                    "str"
                ]
            }
        },
        "CommandLineServerStringParser._parse_ipv4_server_string": {
            "name": "_parse_ipv4_server_string",
            "location": 48,
            "return": [
                "tuple[typing.Union[str,int,None]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "server_str": [
                    "str"
                ]
            }
        },
        "CommandLineServerStringParser._parse_ipv6_server_string": {
            "name": "_parse_ipv6_server_string",
            "location": 61,
            "return": [
                "tuple[typing.Union[bytes,None,int]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "server_str": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "sslyze-release/sslyze/cli/__init__.py": {},
    "sslyze-release/sslyze/connection_helpers/http_request_generator.py": {
        "HttpRequestGenerator.get_request": {
            "name": "get_request",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        }
    },
    "sslyze-release/sslyze/connection_helpers/http_response_parser.py": {
        "_FakeSocket.makefile": {
            "name": "makefile",
            "location": 9,
            "return": [
                "_FakeSocket"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseParser.parse_from_socket": {
            "name": "parse_from_socket",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "sock": [
                    "str"
                ]
            }
        },
        "HttpResponseParser.parse_from_ssl_connection": {
            "name": "parse_from_ssl_connection",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]"
                ],
                "ssl_conn": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "HttpResponseParser._parse": {
            "name": "_parse",
            "location": 29,
            "return": [
                "HTTPResponse"
            ],
            "arguments": {
                "read_method": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "sslyze-release/sslyze/connection_helpers/opportunistic_tls_helpers.py": {
        "get_opportunistic_tls_helper": {
            "name": "get_opportunistic_tls_helper",
            "location": 225,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "protocol": [
                    "int",
                    "None",
                    "dict[int, dict[, ]]",
                    "str"
                ],
                "xmpp_to_hostname": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ProtocolWithOpportunisticTlsEnum.from_default_port": {
            "name": "from_default_port",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "typing.Type",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "_OpportunisticTlsHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "str"
                ]
            }
        },
        "_SmtpHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "_XmppHelper.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xmpp_to": [
                    "int",
                    "str"
                ]
            }
        },
        "_XmppHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "_LdapHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "_RdpHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "_GenericOpportunisticTlsHelper.prepare_socket_for_tls_handshake": {
            "name": "prepare_socket_for_tls_handshake",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        }
    },
    "sslyze-release/sslyze/connection_helpers/tls_connection.py": {
        "_open_socket_for_direct_connection": {
            "name": "_open_socket_for_direct_connection",
            "location": 38,
            "return": [],
            "arguments": {
                "server_location": [
                    "str",
                    "None",
                    "list[]",
                    "bool"
                ],
                "network_timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_open_socket_for_connection_via_http_proxy": {
            "name": "_open_socket_for_connection_via_http_proxy",
            "location": 56,
            "return": [],
            "arguments": {
                "server_location": [
                    "float",
                    "None"
                ],
                "network_timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_open_socket": {
            "name": "_open_socket",
            "location": 92,
            "return": [],
            "arguments": {
                "server_location": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "network_timeout": [
                    "int"
                ]
            }
        },
        "SslConnection.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_location": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "Exception"
                ],
                "network_configuration": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "tls_version": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "should_ignore_client_auth": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "should_use_legacy_openssl": [
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "ca_certificates_path": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ],
                "should_enable_server_name_indication": [
                    "bool"
                ]
            }
        },
        "SslConnection._do_pre_handshake": {
            "name": "_do_pre_handshake",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SslConnection.connect": {
            "name": "connect",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "should_retry_connection": [
                    "bool"
                ]
            }
        },
        "SslConnection.close": {
            "name": "close",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/connection_helpers/__init__.py": {},
    "sslyze-release/sslyze/json/json_output.py": {
        "AllScanCommandsAttemptsAsJson.from_orm": {
            "name": "from_orm",
            "location": 80,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "typing.NamedTuple"
                ],
                "all_scan_commands_attempts": [
                    "str",
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "_ClientAuthenticationCredentialsAsJson.from_orm": {
            "name": "from_orm",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "client_auth_creds": [
                    "str"
                ]
            }
        },
        "_ServerTlsProbingResultAsJson.from_orm": {
            "name": "from_orm",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "tls_probing_result": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ServerScanResultAsJson.from_orm": {
            "name": "from_orm",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "server_scan_result": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "InvalidServerStringAsJson.from_orm": {
            "name": "from_orm",
            "location": 224,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, str]"
                ],
                "invalid_server_string_error": [
                    "int",
                    "dict[str, str]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/json/scan_attempt_json.py": {},
    "sslyze-release/sslyze/json/__init__.py": {},
    "sslyze-release/sslyze/mozilla_tls_profile/mozilla_config_checker.py": {
        "_check_tls_curves": {
            "name": "_check_tls_curves",
            "location": 164,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "tls_curves_result": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "mozilla_config": [
                    "str",
                    "int"
                ]
            }
        },
        "_check_tls_vulnerabilities": {
            "name": "_check_tls_vulnerabilities",
            "location": 185,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "scan_result": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "_check_tls_versions_and_ciphers": {
            "name": "_check_tls_versions_and_ciphers",
            "location": 214,
            "return": [],
            "arguments": {
                "scan_result": [
                    "typing.Iterable[str]"
                ],
                "mozilla_config": [
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "_check_certificates": {
            "name": "_check_certificates",
            "location": 286,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "cert_info_result": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, str]",
                    "None"
                ],
                "mozilla_config": [
                    "dict[, ]",
                    "list[tuple[typing.Union[typing.Any,dict[, ]]]]",
                    "int",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "ServerNotCompliantWithMozillaTlsConfiguration.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mozilla_config": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "issues": [
                    "dict[, ]",
                    "str",
                    "list[]"
                ]
            }
        },
        "MozillaTlsConfigurationChecker.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mozilla_tls_profile": [
                    "int",
                    "float"
                ]
            }
        },
        "MozillaTlsConfigurationChecker.get_default": {
            "name": "get_default",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "MozillaTlsConfigurationChecker.check_server": {
            "name": "check_server",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "against_config": [
                    "int",
                    "None",
                    "dict[str, str]",
                    "str",
                    "list[typing.Any]"
                ],
                "server_scan_result": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sslyze-release/sslyze/mozilla_tls_profile/__init__.py": {},
    "sslyze-release/sslyze/plugins/compression_plugin.py": {
        "_test_compression_support": {
            "name": "_test_compression_support",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "server_info": [
                    "Exception",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_CompressionCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "CompressionImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 63,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "CompressionImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 72,
            "return": [
                "CompressionScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/early_data_plugin.py": {
        "_test_early_data_support": {
            "name": "_test_early_data_support",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "server_info": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "_EarlyDataCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 49,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "EarlyDataImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 67,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[str, str]"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "EarlyDataImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 76,
            "return": [
                "EarlyDataScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/elliptic_curves_plugin.py": {
        "_raise_elliptic_curve_not_supported": {
            "name": "_raise_elliptic_curve_not_supported",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_test_curve": {
            "name": "_test_curve",
            "location": 195,
            "return": [
                "_EllipticCurveResult"
            ],
            "arguments": {
                "server_info": [],
                "curve_nid": [
                    "str"
                ]
            }
        },
        "SupportedEllipticCurvesScanResult.__post_init__": {
            "name": "__post_init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportedEllipticCurvesScanResultAsJson.from_orm": {
            "name": "from_orm",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "result": [
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_SupportedEllipticCurvesCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "SupportedEllipticCurvesImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 134,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "SupportedEllipticCurvesImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 152,
            "return": [
                "SupportedEllipticCurvesScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/fallback_scsv_plugin.py": {
        "_test_scsv": {
            "name": "_test_scsv",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "server_info": []
            }
        },
        "_FallbackScsvCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "FallbackScsvImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 62,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[str, str]",
                    "None"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "FallbackScsvImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 71,
            "return": [
                "FallbackScsvScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/heartbleed_plugin.py": {
        "_test_heartbleed": {
            "name": "_test_heartbleed",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "server_info": []
            }
        },
        "_do_handshake_with_heartbleed": {
            "name": "_do_handshake_with_heartbleed",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HeartbleedCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "HeartbleedImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 71,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[str, str]",
                    "None"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "HeartbleedImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 80,
            "return": [
                "HeartbleedScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/http_headers_plugin.py": {
        "_retrieve_and_analyze_http_response": {
            "name": "_retrieve_and_analyze_http_response",
            "location": 220,
            "return": [
                "HttpHeadersScanResult"
            ],
            "arguments": {
                "server_info": []
            }
        },
        "_detect_http_redirection": {
            "name": "_detect_http_redirection",
            "location": 287,
            "return": [
                "None",
                "typing.Text",
                "dict[str, bool]",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "http_response": [
                    "int",
                    "None",
                    "tuple[typing.Union[typing.Any,str]]"
                ],
                "server_host_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "server_port": [
                    "bool",
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_extract_first_header_value": {
            "name": "_extract_first_header_value",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [],
                "header_name": [
                    "str"
                ]
            }
        },
        "_parse_hsts_header_from_http_response": {
            "name": "_parse_hsts_header_from_http_response",
            "location": 322,
            "return": [
                "None",
                "StrictTransportSecurityHeader"
            ],
            "arguments": {
                "response": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "_parse_expect_ct_header_from_http_response": {
            "name": "_parse_expect_ct_header_from_http_response",
            "location": 349,
            "return": [
                "None",
                "ExpectCtHeader"
            ],
            "arguments": {
                "response": [
                    "list[]",
                    "tuple[]",
                    "tuple[typing.Union[str,int]]",
                    "float"
                ]
            }
        },
        "HttpHeadersScanResultAsJson.from_orm": {
            "name": "from_orm",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "result": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_HttpHeadersCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 151,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HttpHeadersImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 199,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[str, typing.Any]"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "HttpHeadersImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 211,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_ccs_injection_plugin.py": {
        "_test_for_ccs_injection": {
            "name": "_test_for_ccs_injection",
            "location": 90,
            "return": [],
            "arguments": {
                "server_info": []
            }
        },
        "_do_handshake_with_ccs_injection": {
            "name": "_do_handshake_with_ccs_injection",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslCcsInjectionCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "result": []
            }
        },
        "OpenSslCcsInjectionImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": []
            }
        },
        "OpenSslCcsInjectionImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": [],
                "server_info": [],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/plugin_base.py": {
        "ScanJobResult.get_result": {
            "name": "get_result",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScanCommandImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "None"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "ScanCommandImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ScanCommandImplementation.scan_server": {
            "name": "scan_server",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "server_info": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "Exception"
                ],
                "extra_arguments": [
                    "None",
                    "str",
                    "typing.Type",
                    "list[]"
                ]
            }
        },
        "ScanCommandCliConnector.get_cli_options": {
            "name": "get_cli_options",
            "location": 135,
            "return": [
                "list[OptParseCliOption]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "list[]",
                    "None"
                ]
            }
        },
        "ScanCommandCliConnector.find_cli_options_in_command_line": {
            "name": "find_cli_options_in_command_line",
            "location": 142,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "parsed_command_line": [
                    "bool",
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ScanCommandCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Any",
                    "None"
                ],
                "result": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "ScanCommandCliConnector._format_title": {
            "name": "_format_title",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ]
            }
        },
        "ScanCommandCliConnector._format_subtitle": {
            "name": "_format_subtitle",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "subtitle": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ]
            }
        },
        "ScanCommandCliConnector._format_field": {
            "name": "_format_field",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "bytes",
                    "int"
                ],
                "value": [
                    "typing.Text"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/scan_commands.py": {
        "ScanCommandsRepository.get_implementation_cls": {
            "name": "get_implementation_cls",
            "location": 52,
            "return": [],
            "arguments": {
                "scan_command": [
                    "str",
                    "int"
                ]
            }
        },
        "ScanCommandsRepository.get_all_scan_commands": {
            "name": "get_all_scan_commands",
            "location": 56,
            "return": [
                "set[]"
            ],
            "arguments": {}
        }
    },
    "sslyze-release/sslyze/plugins/session_renegotiation_plugin.py": {
        "_test_secure_renegotiation": {
            "name": "_test_secure_renegotiation",
            "location": 115,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "server_info": [
                    "Exception",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_test_client_renegotiation": {
            "name": "_test_client_renegotiation",
            "location": 150,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "server_info": []
            }
        },
        "_SessionRenegotiationCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 56,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "str",
                    "dict[str, str]",
                    "list[cmk.gui.plugins.visuals.utils.Filter]"
                ]
            }
        },
        "SessionRenegotiationImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 84,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[str, str]",
                    "None"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "SessionRenegotiationImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 96,
            "return": [
                "SessionRenegotiationScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/__init__.py": {},
    "sslyze-release/sslyze/plugins/certificate_info/implementation.py": {
        "CertificateInfoExtraArgument.__post_init__": {
            "name": "__post_init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateInfoImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 63,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "None"
                ],
                "server_info": [
                    "dict[, ]"
                ],
                "extra_arguments": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "CertificateInfoImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 92,
            "return": [
                "CertificateInfoScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "None"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/json_output.py": {
        "_PublicKeyAsJson.from_orm": {
            "name": "from_orm",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [
                    "bytes",
                    "list[bytes]",
                    "str"
                ],
                "public_key": [
                    "bytes",
                    "int",
                    "set[str]"
                ]
            }
        },
        "_ObjectIdentifierAsJson.from_orm": {
            "name": "from_orm",
            "location": 80,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "oid": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "_NameAttributeAsJson.from_orm": {
            "name": "from_orm",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "dict[, ]"
                ],
                "name_attribute": []
            }
        },
        "_X509NameAsJson.from_orm": {
            "name": "from_orm",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ],
                "name": []
            }
        },
        "_HashAlgorithmAsJson.from_orm": {
            "name": "from_orm",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.NamedTuple",
                    "dict[, ]"
                ],
                "hash_algorithm": [
                    "str",
                    "typing.NamedTuple",
                    "dict[, ]"
                ]
            }
        },
        "_CertificateAsJson.from_orm": {
            "name": "from_orm",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "certificate": []
            }
        },
        "_OcspResponseAsJson.from_orm": {
            "name": "from_orm",
            "location": 197,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "ocsp_response": [
                    "str",
                    "dict[, ]",
                    "dict[str, _]",
                    "typing.Sequence[]",
                    "int",
                    "dict[str, dict[str, str]]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/_certificate_utils.py": {
        "extract_dns_subject_alternative_names": {
            "name": "extract_dns_subject_alternative_names",
            "location": 10,
            "return": [],
            "arguments": {
                "certificate": []
            }
        },
        "get_common_names": {
            "name": "get_common_names",
            "location": 28,
            "return": [
                "list[]"
            ],
            "arguments": {
                "name_field": [
                    "str",
                    "None",
                    "list[P]"
                ]
            }
        },
        "get_public_key_sha256": {
            "name": "get_public_key_sha256",
            "location": 32,
            "return": [
                "int",
                "bytes",
                "dict[int, int]",
                "str"
            ],
            "arguments": {
                "certificate": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/_cert_chain_analyzer.py": {
        "_certificate_matches_hostname": {
            "name": "_certificate_matches_hostname",
            "location": 302,
            "return": [],
            "arguments": {
                "certificate": [],
                "server_hostname": []
            }
        },
        "_convert_and_cache_pem_certs_to_x509s": {
            "name": "_convert_and_cache_pem_certs_to_x509s",
            "location": 331,
            "return": [],
            "arguments": {
                "trusted_certificates_path": []
            }
        },
        "_verify_certificate_chain": {
            "name": "_verify_certificate_chain",
            "location": 350,
            "return": [],
            "arguments": {
                "server_certificate_chain": [],
                "trust_store": []
            }
        },
        "PathValidationResult.was_validation_successful": {
            "name": "was_validation_successful",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CertificateDeploymentAnalysisResult.verified_certificate_chain": {
            "name": "verified_certificate_chain",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CertificateDeploymentAnalysisResult.verified_certificate_chain_as_pem": {
            "name": "verified_certificate_chain_as_pem",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CertificateDeploymentAnalysisResult.received_certificate_chain_as_pem": {
            "name": "received_certificate_chain_as_pem",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CertificateDeploymentAnalyzer.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "server_hostname": [],
                "server_certificate_chain_as_pem": [],
                "server_ocsp_response": [],
                "trust_stores_for_validation": []
            }
        },
        "CertificateDeploymentAnalyzer.perform": {
            "name": "perform",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CertificateDeploymentAnalyzer.perform.sort_function": {
            "name": "sort_function",
            "location": 232,
            "return": [],
            "arguments": {
                "path_validation": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/_cli_connector.py": {
        "_get_subject_as_short_text": {
            "name": "_get_subject_as_short_text",
            "location": 311,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "certificate": []
            }
        },
        "_get_issuer_as_short_text": {
            "name": "_get_issuer_as_short_text",
            "location": 320,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "certificate": []
            }
        },
        "_get_name_as_short_text": {
            "name": "_get_name_as_short_text",
            "location": 329,
            "return": [],
            "arguments": {
                "name_field": []
            }
        },
        "_CertificateInfoCliConnector.get_cli_options": {
            "name": "get_cli_options",
            "location": 30,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Any,typing.Any,typing.Any]],str,OptParseCliOption]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "_CertificateInfoCliConnector.find_cli_options_in_command_line": {
            "name": "find_cli_options_in_command_line",
            "location": 43,
            "return": [
                "tuple[typing.Union[bool,str,None,CertificateInfoExtraArgument]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict[str, bool]",
                    "list[dict[str, typing.Any]]"
                ],
                "parsed_command_line": [
                    "str"
                ]
            }
        },
        "_CertificateInfoCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 69,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "_CertificateInfoCliConnector._cert_deployment_to_console_output": {
            "name": "_cert_deployment_to_console_output",
            "location": 87,
            "return": [],
            "arguments": {
                "cls": [],
                "index": [
                    "int",
                    "typing.Type",
                    "str"
                ],
                "cert_deployment": [
                    "int",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "_CertificateInfoCliConnector._get_basic_certificate_text": {
            "name": "_get_basic_certificate_text",
            "location": 269,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "certificate": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/_get_cert_chain.py": {
        "get_certificate_chain": {
            "name": "get_certificate_chain",
            "location": 12,
            "return": [
                "tuple[typing.Union[str,dict[str, typing.Any],list[dict[str, str]],dict[str, str],dict[str, typing.Union[float,str]],dict[str, dict[typing.Any, str]],dict[str, None],list[str],None,bool]]"
            ],
            "arguments": {
                "server_info": [],
                "custom_ca_file": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "tls_version": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "openssl_cipher_string": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/_symantec.py": {
        "SymantecDistructTester.get_distrust_timeline": {
            "name": "get_distrust_timeline",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]"
                ],
                "verified_certificate_chain": [
                    "list[int]",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/__init__.py": {},
    "sslyze-release/sslyze/plugins/certificate_info/trust_stores/trust_store.py": {
        "TrustStore.is_certificate_extended_validation": {
            "name": "is_certificate_extended_validation",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/trust_stores/trust_store_repository.py": {
        "_get_script_dir": {
            "name": "_get_script_dir",
            "location": 28,
            "return": [],
            "arguments": {
                "follow_symlinks": [
                    "bool"
                ]
            }
        },
        "TrustStoresRepository.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_path": []
            }
        },
        "TrustStoresRepository.get_all_stores": {
            "name": "get_all_stores",
            "location": 88,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustStoresRepository.get_main_store": {
            "name": "get_main_store",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrustStoresRepository.get_default": {
            "name": "get_default",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[list[str],typing.Any,None]]",
                    "int",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TrustStoresRepository.update_default": {
            "name": "update_default",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/certificate_info/trust_stores/__init__.py": {},
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/cipher_suites.py": {
        "_parse_all_cipher_suites_with_legacy_openssl": {
            "name": "_parse_all_cipher_suites_with_legacy_openssl",
            "location": 574,
            "return": [
                "set[]"
            ],
            "arguments": {
                "tls_version": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_parse_all_cipher_suites": {
            "name": "_parse_all_cipher_suites",
            "location": 581,
            "return": [
                "dict[, set[CipherSuite]]"
            ],
            "arguments": {}
        },
        "CipherSuitesRepository.get_all_cipher_suites": {
            "name": "get_all_cipher_suites",
            "location": 652,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "typing.Sequence[int]"
                ],
                "tls_version": [
                    "int",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "CipherSuitesRepository.get_cipher_suite_with_openssl_name": {
            "name": "get_cipher_suite_with_openssl_name",
            "location": 657,
            "return": [],
            "arguments": {
                "cls": [],
                "tls_version": [
                    "str",
                    "typing.Sequence[int]",
                    "bool",
                    "None"
                ],
                "openssl_name": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/implementation.py": {
        "CipherSuitesScanResult.is_tls_version_supported": {
            "name": "is_tls_version_supported",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CipherSuitesScanImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 95,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "_CipherSuitesScanImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 113,
            "return": [
                "CipherSuitesScanResult"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[list[typing.Any]]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/json_output.py": {
        "_EphemeralKeyInfoAsJson.from_orm": {
            "name": "from_orm",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "key_info": [
                    "str",
                    "dict[str, dict[, ]]",
                    "tuple[typing.Union[str,str,str]]",
                    "dict[, ]"
                ]
            }
        },
        "CipherSuitesScanResultAsJson.from_orm": {
            "name": "from_orm",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "typing.MutableMapping",
                    "typing.Type",
                    "str",
                    "dict[, ]"
                ],
                "scan_result": [
                    "dict[str, typing.Any]",
                    "typing.MutableMapping",
                    "typing.Type",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/_cli_connector.py": {
        "_format_accepted_cipher_suite": {
            "name": "_format_accepted_cipher_suite",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "accepted_cipher": [
                    "typing.BinaryIO",
                    "bytes"
                ]
            }
        },
        "_CipherSuitesCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 18,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "int",
                    "list[]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/_test_cipher_suite.py": {
        "connect_with_cipher_suite": {
            "name": "connect_with_cipher_suite",
            "location": 35,
            "return": [
                "CipherSuiteRejectedByServer",
                "CipherSuiteAcceptedByServer"
            ],
            "arguments": {
                "server_connectivity_info": [],
                "tls_version": [
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "None"
                ],
                "cipher_suite": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_set_cipher_suite_string": {
            "name": "_set_cipher_suite_string",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "tls_version": [
                    "bool",
                    "str",
                    "None"
                ],
                "cipher_suite_str": [
                    "str",
                    "bool"
                ],
                "ssl_client": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/_tls12_workaround.py": {
        "WorkaroundForTls12ForCipherSuites.requires_legacy_openssl": {
            "name": "requires_legacy_openssl",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "openssl_cipher_name": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/openssl_cipher_suites/__init__.py": {},
    "sslyze-release/sslyze/plugins/robot/implementation.py": {
        "_RobotCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "RobotImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 79,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "RobotImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 91,
            "return": [
                "RobotScanResult"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/robot/_robot_tester.py": {
        "test_robot": {
            "name": "test_robot",
            "location": 160,
            "return": [],
            "arguments": {
                "server_info": []
            }
        },
        "_run_oracle_detection": {
            "name": "_run_oracle_detection",
            "location": 208,
            "return": [],
            "arguments": {
                "server_info": [],
                "tls_version_to_use": [],
                "cipher_string": [],
                "rsa_modulus": [],
                "rsa_exponent": [],
                "should_complete_handshake": []
            }
        },
        "_get_rsa_parameters": {
            "name": "_get_rsa_parameters",
            "location": 232,
            "return": [],
            "arguments": {
                "server_info": [],
                "tls_version": [],
                "openssl_cipher_string": []
            }
        },
        "_send_robot_payload": {
            "name": "_send_robot_payload",
            "location": 268,
            "return": [],
            "arguments": {
                "server_info": [],
                "tls_version_to_use": [],
                "rsa_cipher_string": [],
                "robot_payload_enum": [],
                "robot_should_finish_handshake": [],
                "rsa_modulus": [],
                "rsa_exponent": []
            }
        },
        "do_handshake_with_robot": {
            "name": "do_handshake_with_robot",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RobotTlsRecordPayloads.get_client_key_exchange_record": {
            "name": "get_client_key_exchange_record",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [],
                "robot_payload_enum": [],
                "tls_version": [],
                "modulus": [],
                "exponent": []
            }
        },
        "_RobotTlsRecordPayloads._compute_pms_padding": {
            "name": "_compute_pms_padding",
            "location": 91,
            "return": [],
            "arguments": {
                "modulus": []
            }
        },
        "_RobotTlsRecordPayloads.get_finished_record_bytes": {
            "name": "get_finished_record_bytes",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [],
                "tls_version": []
            }
        },
        "RobotServerResponsesAnalyzer.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "payload_responses": [],
                "attempts_count": []
            }
        },
        "RobotServerResponsesAnalyzer.compute_result_enum": {
            "name": "compute_result_enum",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerResponseToRobot.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "server_response": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/robot/__init__.py": {},
    "sslyze-release/sslyze/plugins/session_resumption/implementation.py": {
        "_resumption_result_to_console_output": {
            "name": "_resumption_result_to_console_output",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "resumption_result": [],
                "successful_resumptions_count": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[int]",
                    "set[]"
                ],
                "attempted_resumptions_count": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[int]",
                    "set[]"
                ]
            }
        },
        "_process_resumption_attempt_results": {
            "name": "_process_resumption_attempt_results",
            "location": 155,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "resumption_attempt_results": []
            }
        },
        "_SessionResumptionSupportCliConnector.get_cli_options": {
            "name": "get_cli_options",
            "location": 88,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Any,typing.Any,typing.Any]],str,OptParseCliOption]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "_SessionResumptionSupportCliConnector.find_cli_options_in_command_line": {
            "name": "find_cli_options_in_command_line",
            "location": 103,
            "return": [
                "tuple[typing.Union[bool,str,None,SessionResumptionSupportExtraArgument]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict[str, bool]",
                    "list[dict[str, typing.Any]]"
                ],
                "parsed_command_line": [
                    "str",
                    "list[]"
                ]
            }
        },
        "_SessionResumptionSupportCliConnector.result_to_console_output": {
            "name": "result_to_console_output",
            "location": 127,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "cls": [],
                "result": [
                    "list[int]"
                ]
            }
        },
        "SessionResumptionSupportImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 182,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "int"
                ],
                "server_info": [
                    "int"
                ],
                "extra_arguments": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "SessionResumptionSupportImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 207,
            "return": [
                "SessionResumptionSupportScanResult"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/sslyze/plugins/session_resumption/json_output.py": {},
    "sslyze-release/sslyze/plugins/session_resumption/_resumption_with_id.py": {
        "retrieve_tls_session": {
            "name": "retrieve_tls_session",
            "location": 38,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "server_info": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[int]"
                ],
                "session_to_resume": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "list[str]"
                ],
                "should_enable_tls_ticket": [
                    "bool"
                ]
            }
        },
        "_extract_session_id": {
            "name": "_extract_session_id",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "ssl_session": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "resume_with_session_id": {
            "name": "resume_with_session_id",
            "location": 90,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "server_info": [
                    "dict[str, int]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/session_resumption/_resumption_with_ticket.py": {
        "resume_with_tls_ticket": {
            "name": "resume_with_tls_ticket",
            "location": 9,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "server_info": [
                    "typing.Mapping"
                ]
            }
        },
        "_extract_tls_session_ticket": {
            "name": "_extract_tls_session_ticket",
            "location": 39,
            "return": [],
            "arguments": {
                "ssl_session": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "sslyze-release/sslyze/plugins/session_resumption/__init__.py": {},
    "sslyze-release/sslyze/scanner/models.py": {
        "get_scan_command_attempt_cls": {
            "name": "get_scan_command_attempt_cls",
            "location": 154,
            "return": [],
            "arguments": {
                "scan_command": [
                    "dict[, ]",
                    "str",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "ServerScanRequest.__post_init__": {
            "name": "__post_init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/scanner.py": {
        "Scanner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "per_server_concurrent_connections_limit": [
                    "None",
                    "str",
                    "tuple[int]",
                    "list[int]"
                ],
                "concurrent_server_scans_limit": [
                    "None",
                    "str",
                    "int",
                    "tuple[int]"
                ],
                "observers": [
                    "None",
                    "float",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "Scanner.queue_scans": {
            "name": "queue_scans",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_requests": [
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ]
            }
        },
        "Scanner._has_started_work": {
            "name": "_has_started_work",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scanner.get_results": {
            "name": "get_results",
            "location": 65,
            "return": [
                "typing.Generator[typing.Union[list[],dict[, ],dict[str, str],NoMoreServerScanRequestsSentinel]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.get_results.server_connectivity_test_completed_callback": {
            "name": "server_connectivity_test_completed_callback",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "server_scan_request": [],
                "connectivity_result": []
            }
        },
        "Scanner.get_results.server_connectivity_test_error_callback": {
            "name": "server_connectivity_test_error_callback",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "server_scan_request": [],
                "connectivity_error": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/scanner_observer.py": {
        "ScannerObserver.server_connectivity_test_error": {
            "name": "server_connectivity_test_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "typing.Callable[str,List, None]",
                    "str",
                    "set[]",
                    "int"
                ],
                "connectivity_error": [
                    "typing.Callable[str,List, None]",
                    "str",
                    "set[]",
                    "int"
                ]
            }
        },
        "ScannerObserver.server_connectivity_test_completed": {
            "name": "server_connectivity_test_completed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "bool",
                    "str",
                    "list[int]",
                    "dict[, ]"
                ],
                "connectivity_result": [
                    "bool",
                    "str",
                    "list[int]",
                    "dict[, ]"
                ]
            }
        },
        "ScannerObserver.server_scan_completed": {
            "name": "server_scan_completed",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "ScannerObserver.all_server_scans_completed": {
            "name": "all_server_scans_completed",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/scan_command_attempt.py": {},
    "sslyze-release/sslyze/scanner/_jobs_worker_thread.py": {
        "JobsWorkerThread.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jobs_queue_in": [
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "completed_jobs_queue_out": [
                    "int",
                    "list[]"
                ]
            }
        },
        "JobsWorkerThread.run": {
            "name": "run",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/_mass_connectivity_tester.py": {
        "MassConnectivityTester.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concurrent_server_scans_count": [
                    "bool"
                ]
            }
        },
        "MassConnectivityTester.start_work": {
            "name": "start_work",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_requests": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "MassConnectivityTester.wait_until_all_work_was_processed": {
            "name": "wait_until_all_work_was_processed",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_connectivity_test_completed_callback": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[tuple[typing.Union[str,str]], Exception]",
                    "bool"
                ],
                "server_connectivity_test_error_callback": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "_ConnectivityTesterThread.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scan_requests_queue_in": [
                    "bool"
                ],
                "results_queue_out": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_ConnectivityTesterThread.run": {
            "name": "run",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/_mass_scanner.py": {
        "_queue_server_scan": {
            "name": "_queue_server_scan",
            "location": 169,
            "return": [
                "_OngoingServerScan"
            ],
            "arguments": {
                "server_scan_request": [
                    "str",
                    "typing.Type"
                ],
                "server_connectivity_result": [
                    "str",
                    "typing.Type"
                ],
                "assigned_worker_queue": []
            }
        },
        "_generate_scan_jobs_for_server_scan": {
            "name": "_generate_scan_jobs_for_server_scan",
            "location": 204,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "server_scan_request": [
                    "dict[, ]",
                    "None"
                ],
                "server_connectivity_result": [
                    "bool",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "_generate_result_for_completed_server_scan": {
            "name": "_generate_result_for_completed_server_scan",
            "location": 248,
            "return": [
                "ServerScanResult"
            ],
            "arguments": {
                "completed_scan": [
                    "bool"
                ]
            }
        },
        "_OngoingServerScan.is_completed": {
            "name": "is_completed",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MassScannerProducerThread.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concurrent_server_scans_count": [
                    "int",
                    "list[]",
                    "list[str]",
                    "str"
                ],
                "per_server_concurrent_connections_count": [
                    "int",
                    "None",
                    "str"
                ],
                "server_scan_requests_queue_in": [
                    "str",
                    "None",
                    "typing.Sequence[int]",
                    "dict[str, typing.Union[int,str]]",
                    "dict[, ]"
                ],
                "server_scan_results_queue_out": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "MassScannerProducerThread.run": {
            "name": "run",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/sslyze/scanner/__init__.py": {},
    "sslyze-release/tests/connectivity_utils.py": {
        "check_connectivity_to_server_and_return_info": {
            "name": "check_connectivity_to_server_and_return_info",
            "location": 7,
            "return": [
                "ServerConnectivityInfo"
            ],
            "arguments": {
                "server_location": [
                    "int",
                    "dict[str, list[str]]",
                    "list[str]"
                ],
                "network_configuration": [
                    "None",
                    "typing.Any",
                    "str"
                ]
            }
        }
    },
    "sslyze-release/tests/factories.py": {
        "ServerNetworkLocationViaDirectConnectionFactory.create": {
            "name": "create",
            "location": 38,
            "return": [
                "ServerNetworkLocation"
            ],
            "arguments": {}
        },
        "ServerNetworkLocationViaHttpProxyFactory.create": {
            "name": "create",
            "location": 44,
            "return": [
                "ServerNetworkLocation"
            ],
            "arguments": {}
        },
        "ServerConnectivityInfoFactory.create": {
            "name": "create",
            "location": 54,
            "return": [
                "ServerConnectivityInfo"
            ],
            "arguments": {
                "server_location": [
                    "None"
                ],
                "tls_probing_result": [
                    "None"
                ]
            }
        },
        "ParsedCommandLineFactory.create": {
            "name": "create",
            "location": 82,
            "return": [
                "ParsedCommandLine"
            ],
            "arguments": {}
        },
        "ConnectionToServerFailedFactory.create": {
            "name": "create",
            "location": 109,
            "return": [
                "ConnectionToServerFailed"
            ],
            "arguments": {}
        },
        "AllScanCommandsAttemptsFactory.create": {
            "name": "create",
            "location": 119,
            "return": [
                "AllScanCommandsAttempts"
            ],
            "arguments": {
                "all_scan_command_attempts": []
            }
        },
        "ServerScanResultFactory.create": {
            "name": "create",
            "location": 140,
            "return": [
                "ServerScanResult"
            ],
            "arguments": {
                "server_location": [
                    "None"
                ],
                "scan_status": [],
                "scan_result": [
                    "None"
                ]
            }
        },
        "TracebackExceptionFactory.create": {
            "name": "create",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "ServerScanRequestFactory.create": {
            "name": "create",
            "location": 196,
            "return": [
                "ServerScanRequest"
            ],
            "arguments": {
                "server_location": [
                    "None"
                ],
                "scan_commands": [
                    "None"
                ],
                "scan_commands_extra_arguments": [
                    "None"
                ]
            }
        },
        "ServerTlsProbingResultFactory.create": {
            "name": "create",
            "location": 226,
            "return": [
                "ServerTlsProbingResult"
            ],
            "arguments": {
                "client_auth_requirement": []
            }
        }
    },
    "sslyze-release/tests/markers.py": {},
    "sslyze-release/tests/test_main.py": {
        "TestMain.test": {
            "name": "test",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_no_valid_server_strings": {
            "name": "test_no_valid_server_strings",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_json_out_in_console": {
            "name": "test_json_out_in_console",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": []
            }
        }
    },
    "sslyze-release/tests/__init__.py": {},
    "sslyze-release/tests/cli_tests/test_console_output.py": {
        "TestObserverToGenerateConsoleOutput.test_command_line_parsed": {
            "name": "test_command_line_parsed",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_connectivity_test_error": {
            "name": "test_server_connectivity_test_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_connectivity_test_completed": {
            "name": "test_server_connectivity_test_completed",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_connectivity_test_completed_with_required_client_auth": {
            "name": "test_server_connectivity_test_completed_with_required_client_auth",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_connectivity_test_completed_with_http_tunneling": {
            "name": "test_server_connectivity_test_completed_with_http_tunneling",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_scan_completed": {
            "name": "test_server_scan_completed",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_scan_completed_with_proxy": {
            "name": "test_server_scan_completed_with_proxy",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_server_scan_completed_with_error": {
            "name": "test_server_scan_completed_with_error",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObserverToGenerateConsoleOutput.test_scans_completed": {
            "name": "test_scans_completed",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/cli_tests/test_server_string_parser.py": {
        "TestCommandLineServerStringParser.test": {
            "name": "test",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_with_port": {
            "name": "test_with_port",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv4_as_hint": {
            "name": "test_ipv4_as_hint",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv4_as_hint_with_port": {
            "name": "test_ipv4_as_hint_with_port",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv6": {
            "name": "test_ipv6",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv6_with_port": {
            "name": "test_ipv6_with_port",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv6_as_hint": {
            "name": "test_ipv6_as_hint",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineServerStringParser.test_ipv6_as_hint_with_port": {
            "name": "test_ipv6_as_hint_with_port",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/cli_tests/__init__.py": {},
    "sslyze-release/tests/json_tests/test_json_output.py": {
        "TestSslyzeOutputAsJson.test": {
            "name": "test",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSslyzeOutputAsJson.test_connectivity_test_failed": {
            "name": "test_connectivity_test_failed",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSslyzeOutputAsJson.test_server_scan_completed_scan_command": {
            "name": "test_server_scan_completed_scan_command",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSslyzeOutputAsJson.test_server_scan_completed_but_scan_command_returned_error": {
            "name": "test_server_scan_completed_but_scan_command_returned_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSslyzeOutputAsJson.test_parse_json_output": {
            "name": "test_parse_json_output",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/json_tests/__init__.py": {},
    "sslyze-release/tests/openssl_server/__init__.py": {
        "_OpenSslServerIOManager.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_server_stdout": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "s_server_stdin": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "should_reply_to_http_requests": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_OpenSslServerIOManager.close": {
            "name": "close",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer.get_client_certificate_path": {
            "name": "get_client_certificate_path",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "_OpenSslServer.get_client_key_path": {
            "name": "get_client_key_path",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "_OpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "_OpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]"
                ],
                "client_auth_config": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_OpenSslServer.is_platform_supported": {
            "name": "is_platform_supported",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_OpenSslServer.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer.__enter__": {
            "name": "__enter__",
            "location": 159,
            "return": [
                "_OpenSslServer"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer.__exit__": {
            "name": "__exit__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer._terminate_process": {
            "name": "_terminate_process",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslServer.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 237,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "LegacyOpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 241,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "client_auth_config": [
                    "bool",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 254,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 258,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "client_auth_config": [
                    "bool",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServerIOManager.__init__.read_and_log_and_reply": {
            "name": "read_and_log_and_reply",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sslyze-release/tests/plugins_tests/test_compression_plugin.py": {
        "TestCompressionPlugin.test_compression_disabled": {
            "name": "test_compression_disabled",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressionPlugin.test_compression_enabled": {
            "name": "test_compression_enabled",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressionPlugin.test_succeeds_when_client_auth_failed": {
            "name": "test_succeeds_when_client_auth_failed",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_early_data_plugin.py": {
        "TestEarlyDataPlugin.test_early_data_enabled": {
            "name": "test_early_data_enabled",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEarlyDataPlugin.test_early_data_disabled_no_tls_1_3": {
            "name": "test_early_data_disabled_no_tls_1_3",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEarlyDataPlugin.test_early_data_disabled": {
            "name": "test_early_data_disabled",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_elliptic_curves_plugin.py": {
        "TestEllipticCurvesPluginWithOnlineServer.test_supported_curves": {
            "name": "test_supported_curves",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEllipticCurvesPluginWithLocalServer.test_supported_curves": {
            "name": "test_supported_curves",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_fallback_scsv_plugin.py": {
        "TestFallbackScsvPlugin.test_fallback_good": {
            "name": "test_fallback_good",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFallbackScsvPlugin.test_fallback_bad": {
            "name": "test_fallback_bad",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFallbackScsvPlugin.test_fails_when_client_auth_failed": {
            "name": "test_fails_when_client_auth_failed",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFallbackScsvPlugin.test_works_when_client_auth_succeeded": {
            "name": "test_works_when_client_auth_succeeded",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_heartbleed_plugin.py": {
        "TestHeartbleedPlugin.test_not_vulnerable": {
            "name": "test_not_vulnerable",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeartbleedPlugin.test_not_vulnerable_and_server_has_cloudfront_bug": {
            "name": "test_not_vulnerable_and_server_has_cloudfront_bug",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeartbleedPlugin.test_vulnerable": {
            "name": "test_vulnerable",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeartbleedPlugin.test_vulnerable_and_server_has_sni_bug": {
            "name": "test_vulnerable_and_server_has_sni_bug",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeartbleedPlugin.test_succeeds_when_client_auth_failed": {
            "name": "test_succeeds_when_client_auth_failed",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_http_headers_plugin.py": {
        "TestHttpHeadersPlugin.test_hsts_enabled": {
            "name": "test_hsts_enabled",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHeadersPlugin.test_all_headers_disabled": {
            "name": "test_all_headers_disabled",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHeadersPlugin.test_expect_ct_enabled": {
            "name": "test_expect_ct_enabled",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHeadersPlugin.test_http_error": {
            "name": "test_http_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHeadersPlugin.test_fails_when_client_auth_failed": {
            "name": "test_fails_when_client_auth_failed",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpHeadersPlugin.test_works_when_client_auth_succeeded": {
            "name": "test_works_when_client_auth_succeeded",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MockHttpResponse.getheader": {
            "name": "getheader",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "None",
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "TestHttpRedirection.test_no_redirection": {
            "name": "test_no_redirection",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRedirection.test_redirection_relative_url": {
            "name": "test_redirection_relative_url",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRedirection.test_redirection_absolute_url_same_server": {
            "name": "test_redirection_absolute_url_same_server",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRedirection.test_redirection_absolute_url_different_hostname": {
            "name": "test_redirection_absolute_url_different_hostname",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpRedirection.test_redirection_absolute_url_different_port": {
            "name": "test_redirection_absolute_url_different_port",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_openssl_ccs_injection_plugin.py": {
        "TestOpenSslCcsInjectionPlugin.test_not_vulnerable": {
            "name": "test_not_vulnerable",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenSslCcsInjectionPlugin.test_not_vulnerable_and_server_has_cloudfront_bug": {
            "name": "test_not_vulnerable_and_server_has_cloudfront_bug",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenSslCcsInjectionPlugin.test_vulnerable": {
            "name": "test_vulnerable",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenSslCcsInjectionPlugin.test_vulnerable_and_server_has_sni_bug": {
            "name": "test_vulnerable_and_server_has_sni_bug",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenSslCcsInjectionPlugin.test_succeeds_when_client_auth_failed": {
            "name": "test_succeeds_when_client_auth_failed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_robot_plugin.py": {
        "TestRobotPluginPlugin.test_robot_attack_good": {
            "name": "test_robot_attack_good",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRobotPluginPlugin.test_robot_attack_bad": {
            "name": "test_robot_attack_bad",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRobotPluginPlugin.test_fails_when_client_auth_failed": {
            "name": "test_fails_when_client_auth_failed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_scan_commands.py": {
        "TestScanCommands.test_all_commands_are_implemented": {
            "name": "test_all_commands_are_implemented",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_session_renegotiation_plugin.py": {
        "TestSessionRenegotiationPlugin.test_renegotiation_good": {
            "name": "test_renegotiation_good",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionRenegotiationPlugin.test_renegotiation_is_vulnerable_to_client_renegotiation_dos": {
            "name": "test_renegotiation_is_vulnerable_to_client_renegotiation_dos",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionRenegotiationPlugin.test_fails_when_client_auth_failed": {
            "name": "test_fails_when_client_auth_failed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionRenegotiationPlugin.test_works_when_client_auth_succeeded": {
            "name": "test_works_when_client_auth_succeeded",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/test_session_resumption_plugin.py": {
        "TestSessionResumptionSupport.test": {
            "name": "test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionResumptionSupport.test_with_extra_argument": {
            "name": "test_with_extra_argument",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionResumptionSupport.test_fails_when_client_auth_failed": {
            "name": "test_fails_when_client_auth_failed",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSessionResumptionSupport.test_works_when_client_auth_succeeded": {
            "name": "test_works_when_client_auth_succeeded",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/__init__.py": {},
    "sslyze-release/tests/plugins_tests/certificate_info/test_certificate_algorithms.py": {
        "TestCertificateAlgorithms.test_rsa_certificate": {
            "name": "test_rsa_certificate",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateAlgorithms.test_ed25519_certificate": {
            "name": "test_ed25519_certificate",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateAlgorithms.test_ecdsa_certificate": {
            "name": "test_ecdsa_certificate",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateAlgorithms.test_invalid_certificate_bad_name": {
            "name": "test_invalid_certificate_bad_name",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_name_field": [
                    "int",
                    "dict[str, str]"
                ]
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_certificate_info_plugin.py": {
        "TestCertificateInfoPlugin.test_ca_file_bad_file": {
            "name": "test_ca_file_bad_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_ca_file": {
            "name": "test_ca_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_valid_chain_with_ocsp_stapling": {
            "name": "test_valid_chain_with_ocsp_stapling",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_valid_chain_with_ev_cert": {
            "name": "test_valid_chain_with_ev_cert",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_invalid_chain": {
            "name": "test_invalid_chain",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_1000_sans_chain": {
            "name": "test_1000_sans_chain",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_sha1_chain": {
            "name": "test_sha1_chain",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_sha256_chain": {
            "name": "test_sha256_chain",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_chain_with_anchor": {
            "name": "test_chain_with_anchor",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_certificate_with_no_cn": {
            "name": "test_certificate_with_no_cn",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_certificate_with_no_subject": {
            "name": "test_certificate_with_no_subject",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_certificate_with_scts": {
            "name": "test_certificate_with_scts",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_multiple_certificates": {
            "name": "test_multiple_certificates",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateInfoPlugin.test_succeeds_when_client_auth_failed": {
            "name": "test_succeeds_when_client_auth_failed",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_certificate_utils.py": {
        "TestCertificateUtils.test_certificate_matches_hostname_good_hostname": {
            "name": "test_certificate_matches_hostname_good_hostname",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateUtils.test_certificate_matches_hostname_bad_hostname": {
            "name": "test_certificate_matches_hostname_bad_hostname",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateUtils.test_get_common_names": {
            "name": "test_get_common_names",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateUtils.test_get_dns_subject_alternative_names": {
            "name": "test_get_dns_subject_alternative_names",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateUtils.test_get_name_as_short_text": {
            "name": "test_get_name_as_short_text",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertificateUtils.test_get_public_key_sha256": {
            "name": "test_get_public_key_sha256",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_cert_chain_analyzer.py": {
        "TestMemoryLeakWorkaroundWithX509Cache.test": {
            "name": "test",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_cli_connector.py": {
        "TestCertificateInfoCliConnector.test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_json.py": {
        "TestJsonEncoder.test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_symantec.py": {
        "TestSymantecDistrust.test_good": {
            "name": "test_good",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSymantecDistrust.test_march_2018": {
            "name": "test_march_2018",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSymantecDistrust.test_september_2018": {
            "name": "test_september_2018",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/test_trust_store_repository.py": {
        "TestTrustStoresRepository.test_get_default": {
            "name": "test_get_default",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrustStoresRepository.test_update_default": {
            "name": "test_update_default",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/certificate_info/__init__.py": {},
    "sslyze-release/tests/plugins_tests/openssl_cipher_suites/test_cipher_suites.py": {
        "TestCipherSuiteMappings.test_names_mapping_legacy_ssl_client": {
            "name": "test_names_mapping_legacy_ssl_client",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/openssl_cipher_suites/test_cli_connector.py": {
        "TestCipherSuitesCliConnector.test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/openssl_cipher_suites/test_openssl_cipher_suites_plugin.py": {
        "DisabledTestCipherSuitePreference.test_cipher_suite_preferred_by_server": {
            "name": "test_cipher_suite_preferred_by_server",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisabledTestCipherSuitePreference.test_follows_client_cipher_suite_preference": {
            "name": "test_follows_client_cipher_suite_preference",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_sslv2_disabled": {
            "name": "test_sslv2_disabled",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_sslv3_disabled": {
            "name": "test_sslv3_disabled",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_tlsv1_0_enabled": {
            "name": "test_tlsv1_0_enabled",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_tlsv1_0_disabled": {
            "name": "test_tlsv1_0_disabled",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_tlsv1_1_enabled": {
            "name": "test_tlsv1_1_enabled",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_tlsv1_2_enabled": {
            "name": "test_tlsv1_2_enabled",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_null_cipher_suites": {
            "name": "test_null_cipher_suites",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_rc4_cipher_suites": {
            "name": "test_rc4_cipher_suites",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_ecdsa_cipher_suites": {
            "name": "test_ecdsa_cipher_suites",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_smtp": {
            "name": "test_smtp",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_tls_1_3_cipher_suites": {
            "name": "test_tls_1_3_cipher_suites",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithOnlineServer.test_ephemeral_key_info": {
            "name": "test_ephemeral_key_info",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithLocalServer.test_sslv2_enabled": {
            "name": "test_sslv2_enabled",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithLocalServer.test_sslv3_enabled": {
            "name": "test_sslv3_enabled",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithLocalServer.test_succeeds_when_client_auth_failed_tls_1_2": {
            "name": "test_succeeds_when_client_auth_failed_tls_1_2",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCipherSuitesPluginWithLocalServer.test_succeeds_when_client_auth_failed_tls_1_3": {
            "name": "test_succeeds_when_client_auth_failed_tls_1_3",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/plugins_tests/openssl_cipher_suites/__init__.py": {},
    "sslyze-release/tests/scanner_tests/conftest.py": {
        "mock_scan_commands": {
            "name": "mock_scan_commands",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_MockPluginImplementation.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 30,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "server_info": [
                    "None"
                ],
                "extra_arguments": [
                    "None",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "_MockPluginImplementation.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[int, int]",
                    "str",
                    "set[str]",
                    "None"
                ],
                "server_info": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "scan_job_results": []
            }
        },
        "_MockPluginImplementation._scan_job_work_function": {
            "name": "_scan_job_work_function",
            "location": 59,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ],
                "did_receive_extra_arguments": [
                    "int"
                ]
            }
        }
    },
    "sslyze-release/tests/scanner_tests/test_jobs_worker_thread.py": {
        "TestJobsWorkerThread.test": {
            "name": "test",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsWorkerThread.test.function_to_call_good": {
            "name": "function_to_call_good",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "TestJobsWorkerThread.test.function_to_call_bad": {
            "name": "function_to_call_bad",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        }
    },
    "sslyze-release/tests/scanner_tests/test_mass_connectivity_tester.py": {
        "TestMassConnectivityTester.test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMassConnectivityTester.test.server_connectivity_test_completed_callback": {
            "name": "server_connectivity_test_completed_callback",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "server_scan_request": [],
                "tls_probing_result": []
            }
        },
        "TestMassConnectivityTester.test.server_connectivity_test_error_callback": {
            "name": "server_connectivity_test_error_callback",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "server_scan_request": [],
                "connectivity_error": []
            }
        }
    },
    "sslyze-release/tests/scanner_tests/test_mass_scanner.py": {
        "TestMassScannerProducerThread.test": {
            "name": "test",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scan_commands": []
            }
        },
        "TestMassScannerProducerThread.test_with_extra_arguments": {
            "name": "test_with_extra_arguments",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scan_commands": []
            }
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_scheduling_jobs": {
            "name": "test_error_bug_in_sslyze_when_scheduling_jobs",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_processing_job_results": {
            "name": "test_error_bug_in_sslyze_when_processing_job_results",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMassScannerProducerThread.test_error_server_connectivity_issue_handshake_timeout": {
            "name": "test_error_server_connectivity_issue_handshake_timeout",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit": {
            "name": "test_enforces_per_server_concurrent_connections_limit",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit.flag_two_concurrent_jobs_running": {
            "name": "flag_two_concurrent_jobs_running",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit.flag_three_concurrent_jobs_running": {
            "name": "flag_three_concurrent_jobs_running",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_scheduling_jobs.PluginImplThatCrashesWhenCreatingJobs.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 158,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_processing_job_results.PluginImplThatCrashesWhenProcessingJobs._scan_job_work_function": {
            "name": "_scan_job_work_function",
            "location": 208,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "arg1": []
            }
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_processing_job_results.PluginImplThatCrashesWhenProcessingJobs.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 212,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "TestMassScannerProducerThread.test_error_bug_in_sslyze_when_processing_job_results.PluginImplThatCrashesWhenProcessingJobs.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "scan_job_results": []
            }
        },
        "TestMassScannerProducerThread.test_error_server_connectivity_issue_handshake_timeout.PluginImplThatTriggersConnectivityError._scan_job_work_function": {
            "name": "_scan_job_work_function",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": []
            }
        },
        "TestMassScannerProducerThread.test_error_server_connectivity_issue_handshake_timeout.PluginImplThatTriggersConnectivityError.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 279,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "TestMassScannerProducerThread.test_error_server_connectivity_issue_handshake_timeout.PluginImplThatTriggersConnectivityError.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 285,
            "return": [
                "MockPluginScanResult"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "scan_job_results": []
            }
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit.PluginImplThatSpawnsMultipleJobs._job_work_function": {
            "name": "_job_work_function",
            "location": 354,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "arg1": []
            }
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit.PluginImplThatSpawnsMultipleJobs.scan_jobs_for_scan_command": {
            "name": "scan_jobs_for_scan_command",
            "location": 363,
            "return": [
                "list[ScanJob]"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "extra_arguments": [
                    "None"
                ]
            }
        },
        "TestMassScannerProducerThread.test_enforces_per_server_concurrent_connections_limit.PluginImplThatSpawnsMultipleJobs.result_for_completed_scan_jobs": {
            "name": "result_for_completed_scan_jobs",
            "location": 371,
            "return": [
                "MockPluginScanResult"
            ],
            "arguments": {
                "cls": [],
                "server_info": [],
                "scan_job_results": []
            }
        }
    },
    "sslyze-release/tests/scanner_tests/test_models.py": {
        "TestServerScanRequest.test_default_values": {
            "name": "test_default_values",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerScanRequest.test_extra_arguments_but_no_corresponding_scan_command": {
            "name": "test_extra_arguments_but_no_corresponding_scan_command",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScanCommandAttempt.test_get_scan_command_attempt_cls": {
            "name": "test_get_scan_command_attempt_cls",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/scanner_tests/test_scanner.py": {
        "_MockScannerObserver.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MockScannerObserver.server_connectivity_test_error": {
            "name": "server_connectivity_test_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "typing.Callable[L, None]",
                    "str",
                    "set[]",
                    "int"
                ],
                "connectivity_error": [
                    "typing.Callable[L, None]",
                    "str",
                    "set[]",
                    "int"
                ]
            }
        },
        "_MockScannerObserver.server_connectivity_test_completed": {
            "name": "server_connectivity_test_completed",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_request": [
                    "bool",
                    "str",
                    "list[int]",
                    "dict[, ]"
                ],
                "connectivity_result": [
                    "bool",
                    "str",
                    "list[int]",
                    "dict[, ]"
                ]
            }
        },
        "_MockScannerObserver.server_scan_completed": {
            "name": "server_scan_completed",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_MockScannerObserver.all_server_scans_completed": {
            "name": "all_server_scans_completed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScanner.test": {
            "name": "test",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scan_commands": []
            }
        },
        "TestScanner.test_connectivity_error": {
            "name": "test_connectivity_error",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scan_commands": []
            }
        },
        "TestScanner.test_error_client_certificate_needed": {
            "name": "test_error_client_certificate_needed",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/scanner_tests/__init__.py": {},
    "sslyze-release/tests/server_connectivity_tests/test_client_authentication.py": {
        "TestClientAuthentication.test_optional_client_authentication": {
            "name": "test_optional_client_authentication",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientAuthenticationWithLocalServer.test_optional_client_auth": {
            "name": "test_optional_client_auth",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientAuthenticationWithLocalServer.test_required_client_auth_tls_1_2": {
            "name": "test_required_client_auth_tls_1_2",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientAuthenticationWithLocalServer.test_required_client_auth_tls_1_3": {
            "name": "test_required_client_auth_tls_1_3",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/server_connectivity_tests/test_direct_connection.py": {
        "_is_ipv6_available": {
            "name": "_is_ipv6_available",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestServerConnectivityTester.test_via_direct_connection": {
            "name": "test_via_direct_connection",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_via_direct_connection_but_server_timed_out": {
            "name": "test_via_direct_connection_but_server_timed_out",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_via_direct_connection_but_server_rejected_connection": {
            "name": "test_via_direct_connection_but_server_rejected_connection",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_via_direct_connection_but_server_tls_config_not_supported": {
            "name": "test_via_direct_connection_but_server_tls_config_not_supported",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_tls_1_only": {
            "name": "test_tls_1_only",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_ipv6": {
            "name": "test_ipv6",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_international_hostname": {
            "name": "test_international_hostname",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTester.test_server_triggers_unexpected_connection_error": {
            "name": "test_server_triggers_unexpected_connection_error",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/server_connectivity_tests/test_opportunistic_tls.py": {
        "TestOpportunisticTls.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "port": [
                    "str",
                    "float"
                ],
                "protocol": [
                    "bool",
                    "set[]"
                ]
            }
        },
        "TestOpportunisticTls.test_xmpp_but_server_rejected_opportunistic_tls": {
            "name": "test_xmpp_but_server_rejected_opportunistic_tls",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/server_connectivity_tests/test_via_http_proxy.py": {
        "TestServerConnectivityTesterWithProxy.test_via_http_proxy": {
            "name": "test_via_http_proxy",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTesterWithProxy.test_via_http_proxy_but_proxy_dns_error": {
            "name": "test_via_http_proxy_but_proxy_dns_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTesterWithProxy.test_via_http_proxy_but_proxy_timed_out": {
            "name": "test_via_http_proxy_but_proxy_timed_out",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTesterWithProxy.test_via_http_proxy_but_proxy_rejected_connection": {
            "name": "test_via_http_proxy_but_proxy_rejected_connection",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerConnectivityTesterWithProxy.test_via_http_proxy_but_proxy_rejected_http_connect": {
            "name": "test_via_http_proxy_but_proxy_rejected_http_connect",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/server_connectivity_tests/tiny_proxy.py": {
        "ProxyHandler.handle": {
            "name": "handle",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler._connect_to": {
            "name": "_connect_to",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "netloc": [
                    "str"
                ],
                "soc": []
            }
        },
        "ProxyHandler.do_CONNECT": {
            "name": "do_CONNECT",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler.do_GET": {
            "name": "do_GET",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyHandler._read_write": {
            "name": "_read_write",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soc": [],
                "max_idling": [
                    "int"
                ]
            }
        }
    },
    "sslyze-release/tests/server_connectivity_tests/__init__.py": {},
    "sslyze-release/tests/test_mozilla_tls_profile/test_mozilla_config_checker.py": {
        "server_scan_result_for_google": {
            "name": "server_scan_result_for_google",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TestMozillaTlsConfigurationChecker.test_badssl_compliant_with_old": {
            "name": "test_badssl_compliant_with_old",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMozillaTlsConfigurationChecker.test_badssl_compliant_with_intermediate": {
            "name": "test_badssl_compliant_with_intermediate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMozillaTlsConfigurationChecker.test_badssl_compliant_with_modern": {
            "name": "test_badssl_compliant_with_modern",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMozillaTlsConfigurationChecker.test_multi_certs_deployment_compliant_with_old": {
            "name": "test_multi_certs_deployment_compliant_with_old",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result_for_google": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "TestMozillaTlsConfigurationChecker.test_multi_certs_deployment_not_compliant_with_intermediate": {
            "name": "test_multi_certs_deployment_not_compliant_with_intermediate",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result_for_google": [
                    "int",
                    "str"
                ]
            }
        },
        "TestMozillaTlsConfigurationChecker.test_multi_certs_deployment_not_compliant_with_modern": {
            "name": "test_multi_certs_deployment_not_compliant_with_modern",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_scan_result_for_google": [
                    "int",
                    "str"
                ]
            }
        },
        "TestMozillaTlsConfigurationChecker.test_incomplete_scan_result": {
            "name": "test_incomplete_scan_result",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sslyze-release/tests/test_mozilla_tls_profile/__init__.py": {},
    "sslyze-release/tests/web_servers/scan_localhost.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "server_software_running_on_localhost": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sslyze-release/tests/web_servers/__init__.py": {}
}
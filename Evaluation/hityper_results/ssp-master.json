{
    "ssp-master/wsgi.py": {},
    "ssp-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "ssp-master/migrations/versions/20190513173103_d26e47664481_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ssp-master/src/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ssp-master/src/server.py": {
        "create_api": {
            "name": "create_api",
            "location": 22,
            "return": [
                "Flask"
            ],
            "arguments": {
                "configuration": [
                    "bool",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_register_blueprints": {
            "name": "_register_blueprints",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "api_application": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_initialize_admin_console": {
            "name": "_initialize_admin_console",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "api_application": [
                    "str"
                ]
            }
        }
    },
    "ssp-master/src/__init__.py": {},
    "ssp-master/src/api/index.py": {
        "hello": {
            "name": "hello",
            "location": 10,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "ssp-master/src/api/ping.py": {
        "ping": {
            "name": "ping",
            "location": 9,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "ssp-master/src/api/__init__.py": {},
    "ssp-master/src/api/v1/hotel.py": {
        "create_hotel": {
            "name": "create_hotel",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "hotels": {
            "name": "hotels",
            "location": 31,
            "return": [],
            "arguments": {
                "hotel_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "update_hotels": {
            "name": "update_hotels",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "hotel_id": [
                    "None",
                    "list[tuple[typing.Union[int,str]]]",
                    "int",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "ssp-master/src/api/v1/person.py": {
        "persons": {
            "name": "persons",
            "location": 21,
            "return": [],
            "arguments": {
                "person_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "create_persons": {
            "name": "create_persons",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "ssp-master/src/api/v1/score.py": {
        "score_hotel": {
            "name": "score_hotel",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "ssp-master/src/api/v1/visit.py": {
        "visits": {
            "name": "visits",
            "location": 21,
            "return": [],
            "arguments": {
                "visit_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "create_visits": {
            "name": "create_visits",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "ssp-master/src/api/v1/__init__.py": {},
    "ssp-master/src/database/__init__.py": {},
    "ssp-master/src/database/models/hotel.py": {},
    "ssp-master/src/database/models/person.py": {},
    "ssp-master/src/database/models/visit.py": {},
    "ssp-master/src/database/models/__init__.py": {},
    "ssp-master/src/database/schemas/hotel_schema.py": {
        "HotelSchema.make_hotel": {
            "name": "make_hotel",
            "location": 12,
            "return": [
                "Hotel"
            ],
            "arguments": {
                "self": [],
                "hotel_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "ssp-master/src/database/schemas/person_schema.py": {
        "PersonSchema.make_person": {
            "name": "make_person",
            "location": 13,
            "return": [
                "Person"
            ],
            "arguments": {
                "self": [],
                "person_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PersonSchema.validate_name": {
            "name": "validate_name",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "ssp-master/src/database/schemas/visit_schema.py": {
        "VisitSchema.make_visit": {
            "name": "make_visit",
            "location": 11,
            "return": [
                "Visit"
            ],
            "arguments": {
                "self": [],
                "visit_data": [
                    "dict[, ]",
                    "str",
                    "tuple[typing.Type]",
                    "bytes"
                ]
            }
        }
    },
    "ssp-master/src/database/schemas/__init__.py": {},
    "ssp-master/src/domain/availability_model.py": {
        "read_employees_file": {
            "name": "read_employees_file",
            "location": 6,
            "return": [],
            "arguments": {
                "filepath": [
                    "str",
                    "tuple[str]",
                    "list[str]"
                ]
            }
        },
        "process_employee_availability": {
            "name": "process_employee_availability",
            "location": 23,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "employee": [
                    "str"
                ]
            }
        }
    },
    "ssp-master/src/domain/model_couple.py": {
        "create_couples": {
            "name": "create_couples",
            "location": 8,
            "return": [
                "list[set[typing.Text]]"
            ],
            "arguments": {
                "persons": [
                    "str"
                ]
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 27,
            "return": [
                "tuple[typing.Union[dict[, list[typing.Text]],dict[, bool]]]"
            ],
            "arguments": {
                "persons": [
                    "str"
                ],
                "list_of_couples": [],
                "dispos_per_person": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "sector_per_person": [
                    "str",
                    "int"
                ]
            }
        },
        "exploration": {
            "name": "exploration",
            "location": 76,
            "return": [
                "tuple[]",
                "tuple[typing.Union[dict[, ],int]]"
            ],
            "arguments": {
                "persons": [],
                "dispos_per_person": [
                    "float",
                    "str"
                ],
                "sector_per_person": [
                    "float",
                    "str"
                ]
            }
        },
        "satisfaction": {
            "name": "satisfaction",
            "location": 143,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "persons": [],
                "dispos_per_person": [
                    "float",
                    "str"
                ],
                "sector_per_person": [
                    "float",
                    "str"
                ],
                "maximisation": []
            }
        },
        "save_solutions": {
            "name": "save_solutions",
            "location": 181,
            "return": [
                "dict[tuple[], tuple[typing.Union[str,int]]]"
            ],
            "arguments": {
                "solver": [],
                "list_of_couples": [
                    "str"
                ],
                "couples": [
                    "typing.Iterable[T]",
                    "str",
                    "typing.Sequence[T]"
                ],
                "dispos_per_couples": [
                    "int",
                    "float",
                    "str"
                ],
                "sector_per_person": [
                    "list[]",
                    "list[int]"
                ]
            }
        },
        "solve_couples": {
            "name": "solve_couples",
            "location": 207,
            "return": [
                "int",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str]]",
                "dict[str, str]",
                "list[int]",
                "typing.Pattern"
            ],
            "arguments": {
                "employees": [
                    "str"
                ]
            }
        },
        "VarArrayAndObjectiveSolutionPrinter.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "list_of_couples": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "dispos_per_couples": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "sector_per_person": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VarArrayAndObjectiveSolutionPrinter.save_solutions": {
            "name": "save_solutions",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "VarArrayAndObjectiveSolutionPrinter.NewSolution": {
            "name": "NewSolution",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarArrayAndObjectiveSolutionPrinter.solution_count": {
            "name": "solution_count",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ssp-master/src/domain/solver.py": {
        "get_distances_matrix": {
            "name": "get_distances_matrix",
            "location": 23,
            "return": [
                "tuple[list[list[int]]]"
            ],
            "arguments": {
                "hotels": [],
                "workers": []
            }
        },
        "create_data_model": {
            "name": "create_data_model",
            "location": 91,
            "return": [
                "dict[typing.Text, typing.Union[int,list[int]]]"
            ],
            "arguments": {
                "hotels": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "workers": [],
                "from_raw_data": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "create_distance_callback": {
            "name": "create_distance_callback",
            "location": 136,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        },
        "create_demand_callback": {
            "name": "create_demand_callback",
            "location": 147,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        },
        "add_capacity_constraints": {
            "name": "add_capacity_constraints",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "routing": [],
                "data": [
                    "str",
                    "list[str]"
                ],
                "demand_callback": [
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.IO",
                    "list[str]"
                ]
            }
        },
        "format_solution": {
            "name": "format_solution",
            "location": 171,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]"
                ],
                "routing": [
                    "int",
                    "None"
                ],
                "assignment": [
                    "tuple['cirq.Qid']",
                    "typing.Callable[, ]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "solve_routes": {
            "name": "solve_routes",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "hotels": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "number_workers": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "from_raw_data": [
                    "bool"
                ]
            }
        },
        "create_distance_callback.distance_callback": {
            "name": "distance_callback",
            "location": 140,
            "return": [],
            "arguments": {
                "from_node": [],
                "to_node": []
            }
        },
        "create_demand_callback.demand_callback": {
            "name": "demand_callback",
            "location": 150,
            "return": [],
            "arguments": {
                "from_node": [],
                "to_node": []
            }
        }
    },
    "ssp-master/src/domain/utils.py": {
        "SolverStatus.fail": {
            "name": "fail",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ],
                "status": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SolverStatus.success": {
            "name": "success",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None"
                ],
                "status": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "ssp-master/src/domain/__init__.py": {},
    "ssp-master/src/logging/mixin.py": {
        "LoggingMixin.logger": {
            "name": "logger",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingMixin._setup_logger": {
            "name": "_setup_logger",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ssp-master/src/logging/__init__.py": {},
    "ssp-master/src/repository/hotel_repository.py": {
        "HotelRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hotel_schema": [
                    "int",
                    "float"
                ]
            }
        },
        "HotelRepository.insert": {
            "name": "insert",
            "location": 12,
            "return": [
                "tuple[typing.Union[dict[, ],str,Exception,int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "hotels_to_add": [
                    "int",
                    "dict[typing.Union[str,None], str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HotelRepository.get": {
            "name": "get",
            "location": 24,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[Exception,int,dict[str, str],str]]",
                "tuple[typing.Union[str,int,list[str],dict[int, str],Exception]]",
                "tuple[typing.Union[str,dict[int, str],tuple[typing.Union[typing.Literal,typing.Literal]],bool,None]]"
            ],
            "arguments": {
                "self": [],
                "hotel_id": [
                    "None",
                    "str",
                    "int",
                    "list[typing.Optional[int]]"
                ]
            }
        },
        "HotelRepository.update": {
            "name": "update",
            "location": 40,
            "return": [
                "tuple[typing.Union[str,typing.Type,list[],int]]",
                "tuple[typing.Union[dict[str, str],str,dict[str, tuple[typing.Union[int,str]]],dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]],dict[str, tuple[typing.Union[int,int]]],int,typing.Type,dict[str, int],dict[int, str],set[bytes]]]"
            ],
            "arguments": {
                "self": [],
                "hotel_id": [
                    "int",
                    "str"
                ],
                "updates": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "HotelRepository.delete": {
            "name": "delete",
            "location": 49,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "hotel_id": []
            }
        }
    },
    "ssp-master/src/repository/person_repository.py": {
        "PersonRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person_schema": [
                    "int",
                    "float"
                ]
            }
        },
        "PersonRepository.insert": {
            "name": "insert",
            "location": 12,
            "return": [
                "tuple[typing.Union[dict[, ],str,Exception,int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "persons_to_add": [
                    "int",
                    "dict[typing.Union[str,None], str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PersonRepository.get": {
            "name": "get",
            "location": 24,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[Exception,int,dict[str, str],str]]",
                "tuple[typing.Union[str,int,list[str],dict[int, str],Exception]]",
                "tuple[typing.Union[str,dict[int, str],tuple[typing.Union[typing.Literal,typing.Literal]],bool,None]]"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "None",
                    "str",
                    "int",
                    "list[typing.Optional[int]]"
                ]
            }
        },
        "PersonRepository.update": {
            "name": "update",
            "location": 40,
            "return": [
                "tuple[typing.Union[str,typing.Type,list[],int]]",
                "tuple[typing.Union[dict[str, str],str,dict[str, tuple[typing.Union[int,str]]],dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]],dict[str, tuple[typing.Union[int,int]]],int,typing.Type,dict[str, int],dict[int, str],set[bytes]]]"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "int",
                    "str"
                ],
                "updates": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "PersonRepository.delete": {
            "name": "delete",
            "location": 49,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "person_id": []
            }
        }
    },
    "ssp-master/src/repository/visit_repository.py": {
        "VisitRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visit_schema": [
                    "int"
                ]
            }
        },
        "VisitRepository.insert": {
            "name": "insert",
            "location": 12,
            "return": [
                "tuple[typing.Union[list[],list[str],int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "visits_to_add": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Any"
                ]
            }
        },
        "VisitRepository.get": {
            "name": "get",
            "location": 24,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[set[str],dict[str, typing.Any],int,dict[str, list[typing.Any]],dict[str, str],dict[str, int]]]",
                "tuple[typing.Union[dict[typing.Any, str],dict[str, list[]],typing.Type,int,tuple[]]]",
                "tuple[typing.Union[dict[str, str],dict[, ],tuple[typing.Union[typing.Any,typing.Any,typing.Any]],int]]"
            ],
            "arguments": {
                "self": [],
                "visit_id": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "VisitRepository.update": {
            "name": "update",
            "location": 40,
            "return": [
                "tuple[typing.Union[typing.Pattern,dict[, ],str,dict[typing.Any, set[]],int]]",
                "tuple[typing.Union[dict[str, str],int,dict[, ],dict[str, bool],typing.Type,set[],list[dict[str, typing.Any]],None,dict[int, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "visit_id": [
                    "int",
                    "None"
                ],
                "updates": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "dict[, ]",
                    "dict[int, dict[str, float]]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "VisitRepository.delete": {
            "name": "delete",
            "location": 49,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "visit_id": [
                    "int"
                ]
            }
        }
    },
    "ssp-master/src/repository/__init__.py": {},
    "ssp-master/src/services/csv_reader.py": {
        "parse_csv": {
            "name": "parse_csv",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "csv_type": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "write": [
                    "bool"
                ]
            }
        },
        "CsvReader.parse": {
            "name": "parse",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "csv_type": [
                    "str"
                ]
            }
        },
        "CsvReader.parse_enriched": {
            "name": "parse_enriched",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "csv_type": [
                    "str"
                ]
            }
        }
    },
    "ssp-master/src/services/map.py": {
        "Map.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.distance": {
            "name": "distance",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "departure": [
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "arrival": [
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        },
        "Map.point": {
            "name": "point",
            "location": 27,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "dict[, ]"
                ]
            }
        },
        "Map.get": {
            "name": "get",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ssp-master/src/services/__init__.py": {},
    "ssp-master/tests/conftest.py": {},
    "ssp-master/tests/__init__.py": {},
    "ssp-master/tests/integration/fixtures.py": {
        "database": {
            "name": "database",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 27,
            "return": [],
            "arguments": {
                "request": [],
                "database": []
            }
        },
        "db": {
            "name": "db",
            "location": 40,
            "return": [],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "request": [
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "list[str]"
                ]
            }
        },
        "db_session": {
            "name": "db_session",
            "location": 53,
            "return": [],
            "arguments": {
                "db": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "request": [
                    "float",
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "_init_postgres_database": {
            "name": "_init_postgres_database",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "database.drop_database": {
            "name": "drop_database",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app.teardown": {
            "name": "teardown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db.teardown": {
            "name": "teardown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db_session.teardown": {
            "name": "teardown",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ssp-master/tests/integration/__init__.py": {},
    "ssp-master/tests/integration/database/__init__.py": {},
    "ssp-master/tests/integration/database/schema/test_int_hotel_schema.py": {
        "test_insert_one_hotel": {
            "name": "test_insert_one_hotel",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_insert_several_hotels": {
            "name": "test_insert_several_hotels",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        }
    },
    "ssp-master/tests/integration/database/schema/__init__.py": {},
    "ssp-master/tests/integration/repository/test_int_hotel_repository.py": {
        "test_insert_one_correct_hotel": {
            "name": "test_insert_one_correct_hotel",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "str"
                ]
            }
        },
        "test_insert_one_incorrect_hotel": {
            "name": "test_insert_one_incorrect_hotel",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "bool"
                ]
            }
        },
        "test_get_hotel": {
            "name": "test_get_hotel",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "bool",
                    "typing.Callable[..., None]",
                    "str"
                ]
            }
        },
        "test_get_hotel_with_id": {
            "name": "test_get_hotel_with_id",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_get_hotels": {
            "name": "test_get_hotels",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_get_non_existing_hotel": {
            "name": "test_get_non_existing_hotel",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_update_hotel_name": {
            "name": "test_update_hotel_name",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_update_hotel_with_wrong_data": {
            "name": "test_update_hotel_with_wrong_data",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_update_non_existing_hotel": {
            "name": "test_update_non_existing_hotel",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_delete_hotel": {
            "name": "test_delete_hotel",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        },
        "test_delete_non_existing_hotel": {
            "name": "test_delete_non_existing_hotel",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "typing.Callable[..., None]"
                ]
            }
        }
    },
    "ssp-master/tests/integration/repository/__init__.py": {},
    "ssp-master/tests/unit/fixtures.py": {},
    "ssp-master/tests/unit/__init__.py": {}
}
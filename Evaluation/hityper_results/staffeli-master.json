{
    "staffeli-master/setup.py": {
        "syblingpath": {
            "name": "syblingpath",
            "location": 11,
            "return": [],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 15,
            "return": [],
            "arguments": {
                "fname": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "readlines": {
            "name": "readlines",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "staffeli-master/start_local_canvas.py": {},
    "staffeli-master/static_tests.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "list[str]",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "staffeli-master/contrib/groups/check-groups.py": {
        "ku_id_exists": {
            "name": "ku_id_exists",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "ku_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "staffeli-master/contrib/groups/create-groups.py": {
        "get_user_id_mapping": {
            "name": "get_user_id_mapping",
            "location": 16,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "canvas": [
                    "str",
                    "bool",
                    "float"
                ],
                "course": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "create_groups_on_canvas": {
            "name": "create_groups_on_canvas",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "str",
                    "bytes"
                ],
                "course": [
                    "str",
                    "int"
                ],
                "category_name": [
                    "str",
                    "None"
                ],
                "user_ids": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "groups": []
            }
        },
        "create": {
            "name": "create",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "subs_path": [
                    "str"
                ],
                "category_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "groups_file": [
                    "str"
                ]
            }
        }
    },
    "staffeli-master/contrib/groups/groups-search.py": {
        "search": {
            "name": "search",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "groups_file": [
                    "str",
                    "bytes"
                ],
                "ku_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "staffeli-master/contrib/groups/split-into-sections.py": {
        "create": {
            "name": "create",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "groupsubs_path": [
                    "str"
                ],
                "groups_file": [
                    "str"
                ]
            }
        }
    },
    "staffeli-master/docs/source/conf.py": {},
    "staffeli-master/hooks/install.py": {},
    "staffeli-master/staffeli/assignment.py": {
        "Assignment.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "bool",
                    "typing.Sequence[str]",
                    "None",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Sequence[float]"
                ],
                "name": [
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "id": [
                    "None",
                    "int",
                    "str",
                    "typing.Any",
                    "typing.Sequence[]"
                ],
                "path": [
                    "None",
                    "str",
                    "list[]",
                    "typing.Sequence[str]",
                    "typing.BinaryIO"
                ]
            }
        },
        "Assignment.publicjson": {
            "name": "publicjson",
            "location": 33,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.submissions": {
            "name": "submissions",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assignment.submissions_download_url": {
            "name": "submissions_download_url",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assignment.give_feedback": {
            "name": "give_feedback",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission_id": [],
                "grade": [],
                "filepaths": [],
                "message": [],
                "use_post": [
                    "bool"
                ]
            }
        }
    },
    "staffeli-master/staffeli/cachable.py": {
        "CachableEntity.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cachename": [
                    "bytes",
                    "str"
                ],
                "path": [
                    "typing.Text"
                ],
                "walk": [
                    "bool"
                ]
            }
        },
        "CachableEntity.cache": {
            "name": "cache",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "CachableEntity.publicjson": {
            "name": "publicjson",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "staffeli-master/staffeli/canvas.py": {
        "format_json": {
            "name": "format_json",
            "location": 18,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "_api_bool": {
            "name": "_api_bool",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str"
                ]
            }
        },
        "_req": {
            "name": "_req",
            "location": 27,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "method": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bool",
                    "typing.Mapping"
                ],
                "api_base": [
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "url_relative": [
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "url_absolute": [
                    "None",
                    "set[int]",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "_parse_pagination_link": {
            "name": "_parse_pagination_link",
            "location": 52,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_call_api": {
            "name": "_call_api",
            "location": 58,
            "return": [
                "list[list[]]",
                "list[dict[, ]]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bool"
                ],
                "method": [
                    "str",
                    "bool"
                ],
                "api_base": [
                    "str",
                    "bool"
                ],
                "url_relative": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "all_pages": [
                    "bool"
                ]
            }
        },
        "_upload_transit": {
            "name": "_upload_transit",
            "location": 92,
            "return": [],
            "arguments": {
                "course": [
                    "str",
                    "None",
                    "int"
                ],
                "filepath": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_upload_via_url": {
            "name": "_upload_via_url",
            "location": 109,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "api_base": [
                    "str",
                    "int",
                    "bytes"
                ],
                "url_relative": [
                    "str",
                    "int",
                    "bytes"
                ],
                "filepath": [
                    "int",
                    "str"
                ],
                "viaurl": [
                    "str"
                ]
            }
        },
        "_upload_submission_comment_file": {
            "name": "_upload_submission_comment_file",
            "location": 146,
            "return": [],
            "arguments": {
                "token": [
                    "bytes",
                    "str"
                ],
                "api_base": [
                    "bytes",
                    "str"
                ],
                "url_relative": [
                    "str"
                ],
                "course": [
                    "int"
                ],
                "filepath": [
                    "str"
                ],
                "use_post": [
                    "bool"
                ]
            }
        },
        "_raise_lookup_file": {
            "name": "_raise_lookup_file",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "namestr": [
                    "str"
                ],
                "lastparent": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 565,
            "return": [
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "GroupList.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "path": [
                    "None",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, list[]]"
                ],
                "id": [
                    "None",
                    "str",
                    "list[int]",
                    "bool"
                ]
            }
        },
        "GroupList.uidmap": {
            "name": "uidmap",
            "location": 180,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupList.publicjson": {
            "name": "publicjson",
            "location": 187,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupCategoryList.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [],
                "course_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "GroupCategoryList.publicjson": {
            "name": "publicjson",
            "location": 196,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "int",
                    "typing.Any",
                    "dict[, ]"
                ],
                "id": [
                    "None",
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "Course.assignment": {
            "name": "assignment",
            "location": 219,
            "return": [
                "Assignment"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "set[str]"
                ],
                "id": [
                    "None",
                    "str",
                    "set[str]"
                ]
            }
        },
        "Course.list_assignments": {
            "name": "list_assignments",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Course.list_students": {
            "name": "list_students",
            "location": 225,
            "return": [
                "StudentList"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.list_group_categories": {
            "name": "list_group_categories",
            "location": 228,
            "return": [
                "GroupCategoryList"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.group": {
            "name": "group",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "id": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Course.publicjson": {
            "name": "publicjson",
            "location": 234,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentList.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "None",
                    "int"
                ],
                "searchdir": [
                    "typing.Text"
                ]
            }
        },
        "StudentList.publicjson": {
            "name": "publicjson",
            "location": 258,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentList.__contains__": {
            "name": "__contains__",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "an_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "StudentList.__getitem__": {
            "name": "__getitem__",
            "location": 264,
            "return": [
                "list[]",
                "dict[typing.Any, list[]]",
                "typing.Literal",
                "set[str]",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "an_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Submission.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Submission.publicjson": {
            "name": "publicjson",
            "location": 283,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "bool",
                    "typing.Sequence[str]",
                    "None",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Sequence[float]"
                ],
                "name": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "list[str]"
                ],
                "id": [
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Sequence[]",
                    "int",
                    "typing.Callable[[], str]"
                ],
                "path": [
                    "None",
                    "str",
                    "list[]",
                    "typing.Sequence[str]",
                    "typing.BinaryIO"
                ]
            }
        },
        "Assignment.publicjson": {
            "name": "publicjson",
            "location": 306,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.submission": {
            "name": "submission",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "student_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Assignment.submissions": {
            "name": "submissions",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assignment.submissions_download_url": {
            "name": "submissions_download_url",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assignment.give_feedback": {
            "name": "give_feedback",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission_id": [],
                "grade": [],
                "filepaths": [],
                "message": [],
                "use_post": [
                    "bool"
                ]
            }
        },
        "Canvas.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "None",
                    "list[C]",
                    "str",
                    "dict[str, str]",
                    "float"
                ],
                "account_id": [
                    "None",
                    "str",
                    "int"
                ],
                "api_base": [
                    "typing.Text"
                ]
            }
        },
        "Canvas.get": {
            "name": "get",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "url_relative": [
                    "str"
                ]
            }
        },
        "Canvas.get_verified_file": {
            "name": "get_verified_file",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "Canvas.post": {
            "name": "post",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "url_relative": [
                    "str"
                ]
            }
        },
        "Canvas.put": {
            "name": "put",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "url_relative": [
                    "str"
                ]
            }
        },
        "Canvas.delete": {
            "name": "delete",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "url_relative": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Canvas.course": {
            "name": "course",
            "location": 361,
            "return": [
                "Course"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "set[str]"
                ],
                "id": [
                    "None",
                    "str",
                    "set[str]"
                ]
            }
        },
        "Canvas.courses": {
            "name": "courses",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Canvas.get_course": {
            "name": "get_course",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Canvas.course_create": {
            "name": "course_create",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "license": [
                    "typing.Text"
                ],
                "is_public": [
                    "bool"
                ]
            }
        },
        "Canvas.list_sections": {
            "name": "list_sections",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Canvas.create_section": {
            "name": "create_section",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Canvas.delete_section": {
            "name": "delete_section",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "int"
                ]
            }
        },
        "Canvas.section_enroll": {
            "name": "section_enroll",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "list[int]",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "str",
                    "list[str]"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "Canvas.list_students": {
            "name": "list_students",
            "location": 408,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Canvas.user": {
            "name": "user",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Canvas.course_student": {
            "name": "course_student",
            "location": 421,
            "return": [
                "dict[int, str]",
                "typing.Type",
                "tuple[]",
                "dict[str, None]",
                "dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str",
                    "dict[int, str]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "dict[int, str]"
                ]
            }
        },
        "Canvas.group_categories": {
            "name": "group_categories",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int"
                ]
            }
        },
        "Canvas.course_sections": {
            "name": "course_sections",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int"
                ]
            }
        },
        "Canvas.add_section_member": {
            "name": "add_section_member",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "user_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "Canvas.create_group_category": {
            "name": "create_group_category",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Canvas.list_group_categories": {
            "name": "list_group_categories",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Canvas.delete_group_category": {
            "name": "delete_group_category",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int"
                ]
            }
        },
        "Canvas.groups": {
            "name": "groups",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "group_category_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Canvas.groups_in_course": {
            "name": "groups_in_course",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str"
                ]
            }
        },
        "Canvas.group": {
            "name": "group",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "Canvas.group_members": {
            "name": "group_members",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "str"
                ]
            }
        },
        "Canvas.create_group": {
            "name": "create_group",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "group_category_id": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Canvas.delete_all_groups": {
            "name": "delete_all_groups",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_category_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "int",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "Canvas.add_group_members": {
            "name": "add_group_members",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "members": [
                    "str",
                    "int",
                    "typing.IO",
                    "None",
                    "bytes",
                    "tuple[]"
                ]
            }
        },
        "Canvas.list_assignments": {
            "name": "list_assignments",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int"
                ]
            }
        },
        "Canvas.assignment": {
            "name": "assignment",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "assignment_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Canvas.submission": {
            "name": "submission",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str"
                ],
                "assignment_id": [
                    "str"
                ],
                "student_id": [
                    "str"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "Canvas.submission_history": {
            "name": "submission_history",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "assignment_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "student_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "Canvas.list_submissions": {
            "name": "list_submissions",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "assignment_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Canvas.submissions_download_url": {
            "name": "submissions_download_url",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "str",
                    "int"
                ],
                "assignment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Canvas.give_feedback": {
            "name": "give_feedback",
            "location": 530,
            "return": [
                "object",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ],
                "course_name": [
                    "str"
                ],
                "assignment_id": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ],
                "grade": [
                    "int",
                    "str"
                ],
                "message": [
                    "int",
                    "str"
                ],
                "filepaths": [
                    "int",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[C]"
                ],
                "use_post": [
                    "bool"
                ]
            }
        },
        "Canvas.show_verification_urls": {
            "name": "show_verification_urls",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str"
                ],
                "assignment_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "staffeli-master/staffeli/cli.py": {
        "mkdir": {
            "name": "mkdir",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "mknewdir": {
            "name": "mknewdir",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "cache": {
            "name": "cache",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "o": [],
                "dirpath": [
                    "str",
                    "int"
                ]
            }
        },
        "clone": {
            "name": "clone",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "remargs": []
            }
        },
        "fetch_students": {
            "name": "fetch_students",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "course": []
            }
        },
        "fetch_groups": {
            "name": "fetch_groups",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "course": []
            }
        },
        "fetch_group": {
            "name": "fetch_group",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str"
                ],
                "name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "fetch_all_subs": {
            "name": "fetch_all_subs",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "course": []
            }
        },
        "fetch_attachments": {
            "name": "fetch_attachments",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "attachments": [
                    "str"
                ]
            }
        },
        "write_body": {
            "name": "write_body",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "body": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "fetch_sub": {
            "name": "fetch_sub",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "students": [
                    "str",
                    "list[str]"
                ],
                "path": [
                    "str"
                ],
                "sub": [],
                "metadata": [
                    "bool"
                ]
            }
        },
        "fetch_subs": {
            "name": "fetch_subs",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "deep": [
                    "bool"
                ],
                "metadata": [
                    "bool"
                ]
            }
        },
        "fetch": {
            "name": "fetch",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "metadata": [
                    "int",
                    "str",
                    "typing.AbstractSet",
                    "typing.BinaryIO"
                ]
            }
        },
        "copySub": {
            "name": "copySub",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "int"
                ],
                "dst": [
                    "str",
                    "bool"
                ]
            }
        },
        "student_dirname": {
            "name": "student_dirname",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "student": [
                    "str",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "normalize_pathname": {
            "name": "normalize_pathname",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "pathname": [
                    "str"
                ]
            }
        },
        "split_according_to_groups": {
            "name": "split_according_to_groups",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str",
                    "list[str]",
                    "typing.Callable[str, str]"
                ],
                "subspath": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "main_args_parser": {
            "name": "main_args_parser",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "parse_action_arg": {
            "name": "parse_action_arg",
            "location": 302,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "parser": [],
                "args": []
            }
        },
        "group": {
            "name": "group",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "section": {
            "name": "section",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_group": {
            "name": "add_group",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "group_category_name": [
                    "str",
                    "int"
                ],
                "group_name": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "set_group_members": {
            "name": "set_group_members",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "group_name": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "user_names": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "delete_all_groups": {
            "name": "delete_all_groups",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "group_category_name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "int",
                    "dict[str, str]",
                    "set[str]"
                ]
            }
        },
        "find_section_id": {
            "name": "find_section_id",
            "location": 384,
            "return": [
                "list[]",
                "dict[str, str]",
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "section_name": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "add_member_to_section": {
            "name": "add_member_to_section",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "section_name": [
                    "str",
                    "typing.Type"
                ],
                "user_name": [
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "add_students_to_sections_random": {
            "name": "add_students_to_sections_random",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "section_names": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_find_user": {
            "name": "_find_user",
            "location": 443,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "user_name": [
                    "str"
                ]
            }
        },
        "find_user": {
            "name": "find_user",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "user_name": [
                    "str"
                ]
            }
        },
        "groupsplit": {
            "name": "groupsplit",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_check_grade": {
            "name": "_check_grade",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "grade": []
            }
        },
        "_check_filepaths": {
            "name": "_check_filepaths",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "filepaths": [
                    "str"
                ]
            }
        },
        "grade_args_parser": {
            "name": "grade_args_parser",
            "location": 497,
            "return": [],
            "arguments": {}
        },
        "grade": {
            "name": "grade",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "staffeli-master/staffeli/course.py": {
        "Course.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "int",
                    "typing.Any",
                    "dict[, ]"
                ],
                "id": [
                    "None",
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "Course.web_url": {
            "name": "web_url",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Course.create_section": {
            "name": "create_section",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Course.list_sections": {
            "name": "list_sections",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Course.delete_section": {
            "name": "delete_section",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Course.section_enroll": {
            "name": "section_enroll",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "int",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Course.create_group_category": {
            "name": "create_group_category",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Course.list_group_categories": {
            "name": "list_group_categories",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Course.delete_group_category": {
            "name": "delete_group_category",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Course.create_group": {
            "name": "create_group",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Course.list_groups": {
            "name": "list_groups",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Course.delete_group": {
            "name": "delete_group",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "staffeli-master/staffeli/files.py": {
        "_raise_lookup_error": {
            "name": "_raise_lookup_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool"
                ],
                "attr": [
                    "int"
                ],
                "entities": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_raise_lookup_file": {
            "name": "_raise_lookup_file",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "namestr": [
                    "str"
                ],
                "lastparent": [
                    "str"
                ]
            }
        },
        "_find_file": {
            "name": "_find_file",
            "location": 35,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "candidate_names": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[int,str]]",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "parent": [
                    "typing.Text"
                ],
                "max_depth": [
                    "int"
                ]
            }
        },
        "find_token_file": {
            "name": "find_token_file",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "find_rc": {
            "name": "find_rc",
            "location": 63,
            "return": [
                "tuple[typing.Union[int,str]]",
                "tuple[typing.Union[int,list[],str,dict[, ],list[str]]]"
            ],
            "arguments": {}
        },
        "load_staffeli_file": {
            "name": "load_staffeli_file",
            "location": 77,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "find_staffeli_file": {
            "name": "find_staffeli_file",
            "location": 82,
            "return": [
                "tuple[typing.Union[str,typing.MutableMapping]]"
            ],
            "arguments": {
                "cachename": [
                    "str",
                    "list[list[typing.Any]]",
                    "int"
                ],
                "searchdir": [
                    "typing.Text"
                ],
                "max_depth": [
                    "int"
                ]
            }
        }
    },
    "staffeli-master/staffeli/gcat.py": {
        "GroupCategory.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "int",
                    "typing.Any",
                    "dict[, ]"
                ],
                "id": [
                    "None",
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "GroupCategory.web_url": {
            "name": "web_url",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCategory.list_groups": {
            "name": "list_groups",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCategory.create_group": {
            "name": "create_group",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "GroupCategory.delete_group": {
            "name": "delete_group",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "staffeli-master/staffeli/group.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "int",
                    "typing.Any",
                    "dict[, ]"
                ],
                "id": [
                    "None",
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "Group.web_url": {
            "name": "web_url",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "staffeli-master/staffeli/listed.py": {
        "_lookup_id": {
            "name": "_lookup_id",
            "location": 4,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "float"
                ],
                "entities": [
                    "str"
                ]
            }
        },
        "_lookup_name": {
            "name": "_lookup_name",
            "location": 16,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "entities": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ListedEntity.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entities": [
                    "None",
                    "str",
                    "list[int]",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "name": [
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "list[\"Node\"]"
                ],
                "id": [
                    "None",
                    "typing.Iterable[str]",
                    "int",
                    "typing.Sequence[]",
                    "typing.Type"
                ]
            }
        }
    },
    "staffeli-master/staffeli/names.py": {
        "pp": {
            "name": "pp",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "names": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "staffeli-master/staffeli/resubmissions.py": {
        "_iso8601": {
            "name": "_iso8601",
            "location": 10,
            "return": [],
            "arguments": {
                "datestr": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_subdirs": {
            "name": "get_subdirs",
            "location": 13,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_resubs": {
            "name": "get_resubs",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "assignment": []
            }
        },
        "download_resub": {
            "name": "download_resub",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "assignment": [],
                "resubsbase": [],
                "graders": [],
                "resub": [
                    "str"
                ]
            }
        },
        "mkdirp": {
            "name": "mkdirp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "grader_ids": {
            "name": "grader_ids",
            "location": 52,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "resubs": [
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "grader_names": {
            "name": "grader_names",
            "location": 58,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "canvas": [],
                "grader_ids": [
                    "dict[str, tuple[]]",
                    "list[str]"
                ]
            }
        },
        "download_last_graded": {
            "name": "download_last_graded",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "history": [
                    "str",
                    "list[str]"
                ],
                "last_graded_path": [
                    "str"
                ]
            }
        },
        "download_last_comment": {
            "name": "download_last_comment",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "history": [
                    "str"
                ],
                "last_graded_path": [
                    "str"
                ]
            }
        },
        "download_all": {
            "name": "download_all",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "assignment": [
                    "int",
                    "str"
                ],
                "resubs": [
                    "str"
                ],
                "subdirs": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "staffeli-master/staffeli/speedgrader_url.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "staffeli-master/staffeli/submission.py": {
        "find_student_ids": {
            "name": "find_student_ids",
            "location": 5,
            "return": [
                "list[]"
            ],
            "arguments": {
                "subdir": [
                    "str"
                ]
            }
        },
        "find_student_id": {
            "name": "find_student_id",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "subdir": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "staffeli-master/staffeli/typed_canvas.py": {
        "_req": {
            "name": "_req",
            "location": 16,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_read_json": {
            "name": "_read_json",
            "location": 30,
            "return": [],
            "arguments": {
                "f": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "_list_req": {
            "name": "_list_req",
            "location": 34,
            "return": [],
            "arguments": {
                "token": [
                    "str",
                    "None"
                ],
                "method": [
                    "str",
                    "None"
                ],
                "url": [
                    "str",
                    "None"
                ]
            }
        },
        "_parse_pagination_link": {
            "name": "_parse_pagination_link",
            "location": 41,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_api": {
            "name": "_api",
            "location": 48,
            "return": [],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "method": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "url": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_list_api": {
            "name": "_list_api",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int"
                ],
                "method": [
                    "str",
                    "int"
                ],
                "url": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "bytes",
                    "list[]",
                    "typing.Mapping",
                    "None",
                    "list[str]"
                ]
            }
        },
        "_api_bool": {
            "name": "_api_bool",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str"
                ]
            }
        },
        "Canvas.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ],
                "account_id": [
                    "None",
                    "str",
                    "int"
                ],
                "base_url": [
                    "typing.Text"
                ],
                "api_base": [
                    "typing.Text"
                ]
            }
        },
        "Canvas.api_url": {
            "name": "api_url",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "rel_url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Canvas.web_url": {
            "name": "web_url",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "rel_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "Canvas.get_list": {
            "name": "get_list",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "rel_url": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Canvas.post": {
            "name": "post",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "rel_url": [
                    "str"
                ]
            }
        },
        "Canvas.delete": {
            "name": "delete",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "rel_url": [
                    "str"
                ]
            }
        },
        "Canvas.list_courses": {
            "name": "list_courses",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Canvas.create_course": {
            "name": "create_course",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Sequence[str]",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "None"
                ],
                "license": [
                    "typing.Text"
                ],
                "is_public": [
                    "bool"
                ]
            }
        },
        "Canvas.list_sections": {
            "name": "list_sections",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int"
                ]
            }
        },
        "Canvas.create_section": {
            "name": "create_section",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Canvas.delete_section": {
            "name": "delete_section",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "int"
                ]
            }
        },
        "Canvas.section_enroll": {
            "name": "section_enroll",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "section_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Canvas.create_group_category": {
            "name": "create_group_category",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Canvas.list_group_categories": {
            "name": "list_group_categories",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int"
                ]
            }
        },
        "Canvas.delete_group_category": {
            "name": "delete_group_category",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int"
                ]
            }
        },
        "Canvas.create_group": {
            "name": "create_group",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int",
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Canvas.list_groups": {
            "name": "list_groups",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "gcat_id": [
                    "int"
                ]
            }
        },
        "Canvas.delete_group": {
            "name": "delete_group",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int"
                ]
            }
        },
        "Canvas.create_user": {
            "name": "create_user",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "pseudonym_id": [
                    "str",
                    "None"
                ]
            }
        },
        "Canvas.enroll_user": {
            "name": "enroll_user",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "float"
                ],
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "enroll_type": [
                    "typing.Text"
                ],
                "enroll_state": [
                    "typing.Text"
                ]
            }
        }
    },
    "staffeli-master/staffeli/upload.py": {
        "via_post": {
            "name": "via_post",
            "location": 7,
            "return": [],
            "arguments": {
                "api_base": [
                    "str",
                    "bytes"
                ],
                "url_relative": [
                    "str",
                    "bytes"
                ],
                "token": [
                    "str"
                ],
                "filepath": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "staffeli-master/subsets/linalg17/.static_tests.py": {
        "run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "list[str]",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "staffeli-master/subsets/linalg17/staffeli.py": {
        "_get_rc": {
            "name": "_get_rc",
            "location": 34,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "_url": {
            "name": "_url",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "relative_url": [
                    "str"
                ]
            }
        },
        "_req": {
            "name": "_req",
            "location": 45,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "bool",
                    "str",
                    "None",
                    "typing.Any",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_read_json": {
            "name": "_read_json",
            "location": 57,
            "return": [],
            "arguments": {
                "f": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "_list_req": {
            "name": "_list_req",
            "location": 61,
            "return": [],
            "arguments": {
                "token": [
                    "str",
                    "None"
                ],
                "method": [
                    "str",
                    "None"
                ],
                "url": [
                    "str",
                    "None"
                ]
            }
        },
        "_parse_pagination_link": {
            "name": "_parse_pagination_link",
            "location": 69,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_list_api": {
            "name": "_list_api",
            "location": 76,
            "return": [
                "list[]"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str",
                    "int"
                ],
                "all_pages": [
                    "bool"
                ]
            }
        },
        "_get_list": {
            "name": "_get_list",
            "location": 117,
            "return": [],
            "arguments": {
                "relative_url": [
                    "str"
                ]
            }
        },
        "_get_sections": {
            "name": "_get_sections",
            "location": 121,
            "return": [
                "tuple[dict[str, str]]"
            ],
            "arguments": {}
        },
        "_get_assignments": {
            "name": "_get_assignments",
            "location": 134,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {}
        },
        "_get_submissions": {
            "name": "_get_submissions",
            "location": 140,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None,typing.Any]]"
            ],
            "arguments": {
                "assignment_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_normalize_pathname": {
            "name": "_normalize_pathname",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "pathname": [
                    "str"
                ]
            }
        },
        "_mkdir": {
            "name": "_mkdir",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_pp_list": {
            "name": "_pp_list",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "str",
                    "tuple[typing.Sequence[str]]",
                    "dict[str, typing.Any]",
                    "list[B]",
                    "list[]"
                ]
            }
        },
        "_find_key": {
            "name": "_find_key",
            "location": 160,
            "return": [],
            "arguments": {
                "keys": [
                    "list[str]",
                    "str",
                    "bytes"
                ],
                "needle": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_write_name": {
            "name": "_write_name",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "student": [
                    "str"
                ]
            }
        },
        "_fetch_attachments": {
            "name": "_fetch_attachments",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "attachments": [
                    "str"
                ]
            }
        }
    },
    "staffeli-master/tests/common.py": {
        "canvas": {
            "name": "canvas",
            "location": 40,
            "return": [
                "Canvas"
            ],
            "arguments": {}
        },
        "_create_course_if_missing": {
            "name": "_create_course_if_missing",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [],
                "name": []
            }
        },
        "course_name": {
            "name": "course_name",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "init_course": {
            "name": "init_course",
            "location": 60,
            "return": [
                "Course"
            ],
            "arguments": {
                "canvas": [],
                "course_name": []
            }
        },
        "_get_section_or_create": {
            "name": "_get_section_or_create",
            "location": 65,
            "return": [],
            "arguments": {
                "init_course": [],
                "name": []
            }
        },
        "section_name": {
            "name": "section_name",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "section_id": {
            "name": "section_id",
            "location": 81,
            "return": [],
            "arguments": {
                "init_course": [],
                "section_name": []
            }
        },
        "user_id": {
            "name": "user_id",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "user_ids": {
            "name": "user_ids",
            "location": 94,
            "return": [
                "list[]"
            ],
            "arguments": {
                "init_course": []
            }
        },
        "gcat_ids": {
            "name": "gcat_ids",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "init_course": []
            }
        },
        "_get_gcat_or_create": {
            "name": "_get_gcat_or_create",
            "location": 117,
            "return": [],
            "arguments": {
                "init_course": [],
                "name": []
            }
        },
        "gcat_name": {
            "name": "gcat_name",
            "location": 128,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "gcat_id": {
            "name": "gcat_id",
            "location": 133,
            "return": [],
            "arguments": {
                "init_course": [],
                "gcat_name": []
            }
        }
    },
    "staffeli-master/tests/test_courses.py": {
        "is_valid_course": {
            "name": "is_valid_course",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "course": []
            }
        },
        "test_create_course": {
            "name": "test_create_course",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Exception"
                ],
                "canvas": []
            }
        }
    },
    "staffeli-master/tests/test_gcats.py": {
        "is_valid_group_category": {
            "name": "is_valid_group_category",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "gcat": []
            }
        },
        "course": {
            "name": "course",
            "location": 21,
            "return": [],
            "arguments": {
                "init_course": []
            }
        },
        "test_create_group_category": {
            "name": "test_create_group_category",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[]",
                    "bool"
                ],
                "course": []
            }
        },
        "test_create_group_categories": {
            "name": "test_create_group_categories",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "list[str]",
                    "str"
                ],
                "course": []
            }
        }
    },
    "staffeli-master/tests/test_groups.py": {
        "is_valid_group": {
            "name": "is_valid_group",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "group": []
            }
        },
        "course": {
            "name": "course",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "init_course": [
                    "str",
                    "int"
                ],
                "user_ids": [
                    "list[int]",
                    "set[int]",
                    "str"
                ]
            }
        },
        "gcat": {
            "name": "gcat",
            "location": 35,
            "return": [
                "GroupCategory"
            ],
            "arguments": {
                "init_course": [
                    "int",
                    "str",
                    "None"
                ],
                "gcat_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_test_create_group": {
            "name": "_test_create_group",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "gcat": []
            }
        },
        "_test_create_groups": {
            "name": "_test_create_groups",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "list[str]",
                    "str",
                    "set[str]",
                    "dict[str, str]"
                ],
                "gcat": []
            }
        }
    },
    "staffeli-master/tests/test_sections.py": {
        "is_valid_section": {
            "name": "is_valid_section",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "section": []
            }
        },
        "course": {
            "name": "course",
            "location": 23,
            "return": [],
            "arguments": {
                "init_course": [],
                "course_name": [
                    "str"
                ],
                "section_name": [
                    "str"
                ]
            }
        },
        "test_create_section": {
            "name": "test_create_section",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Exception"
                ],
                "course": []
            }
        },
        "test_enroll_user": {
            "name": "test_enroll_user",
            "location": 51,
            "return": [],
            "arguments": {
                "course": [],
                "section_id": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "user_id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_create_sections": {
            "name": "test_create_sections",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "list[str]",
                    "str",
                    "set[str]",
                    "dict[str, str]"
                ],
                "course": []
            }
        }
    }
}
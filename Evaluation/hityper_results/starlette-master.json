{
    "starlette-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "starlette-master/starlette/applications.py": {
        "Starlette.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "routes": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "middleware": [
                    "None",
                    "int",
                    "list[str]",
                    "tuple[typing.Union[str,str]]",
                    "list[typing.AnyStr]",
                    "set[str]"
                ],
                "exception_handlers": [
                    "None",
                    "bool",
                    "typing.Any",
                    "str",
                    "dict[typing.Any, bool]",
                    "float",
                    "tuple[typing.Union[str,str]]"
                ],
                "on_startup": [
                    "None",
                    "typing.Sequence[typing.Callable[, ]]",
                    "float",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "on_shutdown": [
                    "None",
                    "typing.Sequence[typing.Callable[, ]]",
                    "float",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "lifespan": [
                    "None",
                    "typing.Sequence[typing.Callable[, ]]",
                    "float",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ]
            }
        },
        "Starlette.build_middleware_stack": {
            "name": "build_middleware_stack",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Starlette.routes": {
            "name": "routes",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Starlette.debug": {
            "name": "debug",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Starlette.url_path_for": {
            "name": "url_path_for",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Starlette.on_event": {
            "name": "on_event",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "event_type": [
                    "dict[, ]",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Starlette.mount": {
            "name": "mount",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "app": [
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "Starlette.host": {
            "name": "host",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "float"
                ],
                "app": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "float"
                ],
                "name": [
                    "None",
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "Starlette.add_middleware": {
            "name": "add_middleware",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "middleware_class": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Starlette.add_exception_handler": {
            "name": "add_exception_handler",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_class_or_status_code": [
                    "dict[str, typing.Any]",
                    "list[typing.Mapping]",
                    "bool",
                    "None",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "str",
                    "typing.Callable[typing.Any, collections.abc.Coroutine]"
                ],
                "handler": [
                    "dict[str, typing.Any]",
                    "list[typing.Mapping]",
                    "bool",
                    "None",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "str",
                    "typing.Callable[typing.Any, collections.abc.Coroutine]"
                ]
            }
        },
        "Starlette.add_event_handler": {
            "name": "add_event_handler",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "None"
                ],
                "func": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "Starlette.add_route": {
            "name": "add_route",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "route": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "methods": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "name": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "include_in_schema": [
                    "bool"
                ]
            }
        },
        "Starlette.add_websocket_route": {
            "name": "add_websocket_route",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "route": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Starlette.exception_handler": {
            "name": "exception_handler",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "exc_class_or_status_code": [
                    "int",
                    "typing.Type",
                    "tuple[int]"
                ]
            }
        },
        "Starlette.route": {
            "name": "route",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[]"
                ],
                "methods": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "list[]"
                ],
                "name": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "list[]"
                ],
                "include_in_schema": [
                    "bool"
                ]
            }
        },
        "Starlette.websocket_route": {
            "name": "websocket_route",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Starlette.middleware": {
            "name": "middleware",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "middleware_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "Starlette.exception_handler.decorator": {
            "name": "decorator",
            "location": 204,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Starlette.route.decorator": {
            "name": "decorator",
            "location": 229,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Starlette.websocket_route.decorator": {
            "name": "decorator",
            "location": 256,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Starlette.middleware.decorator": {
            "name": "decorator",
            "location": 279,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "starlette-master/starlette/authentication.py": {
        "has_required_scope": {
            "name": "has_required_scope",
            "location": 15,
            "return": [],
            "arguments": {
                "conn": [],
                "scopes": []
            }
        },
        "requires": {
            "name": "requires",
            "location": 22,
            "return": [],
            "arguments": {
                "scopes": [],
                "status_code": [],
                "redirect": []
            }
        },
        "requires.decorator": {
            "name": "decorator",
            "location": 29,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "AuthCredentials.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "BaseUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.display_name": {
            "name": "display_name",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.identity": {
            "name": "identity",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleUser.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "SimpleUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleUser.display_name": {
            "name": "display_name",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedUser.display_name": {
            "name": "display_name",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "requires.decorator.sync_wrapper": {
            "name": "sync_wrapper",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "starlette-master/starlette/background.py": {
        "BackgroundTask.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "set[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BackgroundTasks.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str], typing.Any]",
                    "str"
                ]
            }
        },
        "BackgroundTasks.add_task": {
            "name": "add_task",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "starlette-master/starlette/concurrency.py": {
        "_next": {
            "name": "_next",
            "location": 48,
            "return": [],
            "arguments": {
                "iterator": []
            }
        }
    },
    "starlette-master/starlette/config.py": {
        "Environ.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": []
            }
        },
        "Environ.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Environ.__setitem__": {
            "name": "__setitem__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Environ.__delitem__": {
            "name": "__delitem__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Environ.__iter__": {
            "name": "__iter__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Environ.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_file": [
                    "None",
                    "typing.IO",
                    "str",
                    "dict[str, str]"
                ],
                "environ": [
                    "Environ"
                ]
            }
        },
        "Config.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "dict[str, str]",
                    "int",
                    "float",
                    "str"
                ],
                "cast": [
                    "bytes",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "dict[str, str]",
                    "int",
                    "float",
                    "str"
                ],
                "default": [
                    "bytes",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,u]]",
                    "dict[str, str]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Config.get": {
            "name": "get",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ],
                "cast": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "default": [
                    "undefined"
                ]
            }
        },
        "Config._read_file": {
            "name": "_read_file",
            "location": 114,
            "return": [
                "dict[, typing.Union[str,list[],bytes]]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "Config._perform_cast": {
            "name": "_perform_cast",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [],
                "cast": [
                    "None",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "starlette-master/starlette/convertors.py": {
        "register_url_convertor": {
            "name": "register_url_convertor",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "convertor": [
                    "str"
                ]
            }
        },
        "Convertor.convert": {
            "name": "convert",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Convertor.to_string": {
            "name": "to_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringConvertor.convert": {
            "name": "convert",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "StringConvertor.to_string": {
            "name": "to_string",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "PathConvertor.convert": {
            "name": "convert",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PathConvertor.to_string": {
            "name": "to_string",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "IntegerConvertor.convert": {
            "name": "convert",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntegerConvertor.to_string": {
            "name": "to_string",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FloatConvertor.convert": {
            "name": "convert",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FloatConvertor.to_string": {
            "name": "to_string",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "UUIDConvertor.convert": {
            "name": "convert",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "UUIDConvertor.to_string": {
            "name": "to_string",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "starlette-master/starlette/datastructures.py": {
        "URL.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "typing.Text"
                ],
                "scope": [
                    "None"
                ]
            }
        },
        "URL.components": {
            "name": "components",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.scheme": {
            "name": "scheme",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.netloc": {
            "name": "netloc",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.path": {
            "name": "path",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.query": {
            "name": "query",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.fragment": {
            "name": "fragment",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.username": {
            "name": "username",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.password": {
            "name": "password",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.hostname": {
            "name": "hostname",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.port": {
            "name": "port",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.is_secure": {
            "name": "is_secure",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.replace": {
            "name": "replace",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.include_query_params": {
            "name": "include_query_params",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.replace_query_params": {
            "name": "replace_query_params",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.remove_query_params": {
            "name": "remove_query_params",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "URL.__eq__": {
            "name": "__eq__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float,float]]",
                    "int"
                ]
            }
        },
        "URL.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLPath.__new__": {
            "name": "__new__",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "protocol": [
                    "typing.Text"
                ],
                "host": [
                    "typing.Text"
                ]
            }
        },
        "URLPath.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ],
                "protocol": [
                    "typing.Text"
                ],
                "host": [
                    "typing.Text"
                ]
            }
        },
        "URLPath.make_absolute_url": {
            "name": "make_absolute_url",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "Secret.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Secret.__repr__": {
            "name": "__repr__",
            "location": 209,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Secret.__str__": {
            "name": "__str__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Secret.__bool__": {
            "name": "__bool__",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedStrings.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "CommaSeparatedStrings.__len__": {
            "name": "__len__",
            "location": 230,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedStrings.__getitem__": {
            "name": "__getitem__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CommaSeparatedStrings.__iter__": {
            "name": "__iter__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedStrings.__repr__": {
            "name": "__repr__",
            "location": 239,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedStrings.__str__": {
            "name": "__str__",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.getlist": {
            "name": "getlist",
            "location": 288,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ]
            }
        },
        "ImmutableMultiDict.keys": {
            "name": "keys",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.values": {
            "name": "values",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.items": {
            "name": "items",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.multi_items": {
            "name": "multi_items",
            "location": 300,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "ImmutableMultiDict.__contains__": {
            "name": "__contains__",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "ImmutableMultiDict.__iter__": {
            "name": "__iter__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__len__": {
            "name": "__len__",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__eq__": {
            "name": "__eq__",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.MutableMapping",
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "ImmutableMultiDict.__repr__": {
            "name": "__repr__",
            "location": 320,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__setitem__": {
            "name": "__setitem__",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MultiDict.__delitem__": {
            "name": "__delitem__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "list[str]",
                    "list[int]",
                    "str",
                    "typing.Match",
                    "set[]"
                ]
            }
        },
        "MultiDict.pop": {
            "name": "pop",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Match",
                    "list[int]",
                    "list[str]"
                ],
                "default": [
                    "None",
                    "str",
                    "int",
                    "typing.Hashable",
                    "dict[str, str]"
                ]
            }
        },
        "MultiDict.popitem": {
            "name": "popitem",
            "location": 338,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.poplist": {
            "name": "poplist",
            "location": 343,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "MultiDict.clear": {
            "name": "clear",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.setdefault": {
            "name": "setdefault",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "list[str]"
                ],
                "default": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Type"
                ]
            }
        },
        "MultiDict.setlist": {
            "name": "setlist",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "list[dict[, ]]"
                ],
                "values": [
                    "str",
                    "list[]"
                ]
            }
        },
        "MultiDict.append": {
            "name": "append",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "float",
                    "typing.Iterable[str]",
                    "typing.Callable[str, typing.Any]",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float",
                    "typing.Iterable[str]",
                    "typing.Callable[str, typing.Any]",
                    "None"
                ]
            }
        },
        "MultiDict.update": {
            "name": "update",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__str__": {
            "name": "__str__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__repr__": {
            "name": "__repr__",
            "location": 420,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadFile.__init__": {
            "name": "__init__",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "file": [
                    "None",
                    "str",
                    "typing.IO",
                    "bool",
                    "dict[str, str]"
                ],
                "content_type": [
                    "typing.Text"
                ]
            }
        },
        "UploadFile._in_memory": {
            "name": "_in_memory",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormData.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "raw": [
                    "None",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "scope": [
                    "str",
                    "None",
                    "list[tuple[typing.Union[bytes,bytes]]]"
                ]
            }
        },
        "Headers.raw": {
            "name": "raw",
            "location": 528,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.keys": {
            "name": "keys",
            "location": 531,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.values": {
            "name": "values",
            "location": 534,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.items": {
            "name": "items",
            "location": 537,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.get": {
            "name": "get",
            "location": 543,
            "return": [
                "None",
                "str",
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "None"
                ],
                "default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "Headers.getlist": {
            "name": "getlist",
            "location": 549,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Headers.mutablecopy": {
            "name": "mutablecopy",
            "location": 557,
            "return": [
                "MutableHeaders"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__getitem__": {
            "name": "__getitem__",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Headers.__contains__": {
            "name": "__contains__",
            "location": 567,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Headers.__iter__": {
            "name": "__iter__",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Headers.__len__": {
            "name": "__len__",
            "location": 577,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__eq__": {
            "name": "__eq__",
            "location": 580,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "Headers.__repr__": {
            "name": "__repr__",
            "location": 585,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableHeaders.__setitem__": {
            "name": "__setitem__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MutableHeaders.__delitem__": {
            "name": "__delitem__",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MutableHeaders.__ior__": {
            "name": "__ior__",
            "location": 630,
            "return": [
                "MutableHeaders"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "MutableHeaders.__or__": {
            "name": "__or__",
            "location": 636,
            "return": [
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MutableHeaders.raw": {
            "name": "raw",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableHeaders.setdefault": {
            "name": "setdefault",
            "location": 647,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MutableHeaders.update": {
            "name": "update",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "MutableHeaders.append": {
            "name": "append",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MutableHeaders.add_vary_header": {
            "name": "add_vary_header",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vary": [
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "State.__setattr__": {
            "name": "__setattr__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "State.__getattr__": {
            "name": "__getattr__",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "State.__delattr__": {
            "name": "__delattr__",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        }
    },
    "starlette-master/starlette/endpoints.py": {
        "HTTPEndpoint.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ],
                "receive": [
                    "int",
                    "float"
                ],
                "send": [
                    "int",
                    "float"
                ]
            }
        },
        "HTTPEndpoint.__await__": {
            "name": "__await__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketEndpoint.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ],
                "receive": [
                    "int",
                    "float"
                ],
                "send": [
                    "int",
                    "float"
                ]
            }
        },
        "WebSocketEndpoint.__await__": {
            "name": "__await__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/starlette/exceptions.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "__dir__": {
            "name": "__dir__",
            "location": 43,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "HTTPException.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "detail": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "list[tuple[typing.Union[typing.Any,float]]]"
                ],
                "headers": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[str,str]]",
                    "dict[, ]"
                ]
            }
        },
        "HTTPException.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/starlette/formparsers.py": {
        "_user_safe_decode": {
            "name": "_user_safe_decode",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "src": [
                    "bytes"
                ],
                "codec": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "None"
                ]
            }
        },
        "MultiPartException.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "FormParser.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "typing.MutableMapping"
                ],
                "stream": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "FormParser.on_field_start": {
            "name": "on_field_start",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormParser.on_field_name": {
            "name": "on_field_name",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "FormParser.on_field_data": {
            "name": "on_field_data",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "start": [
                    "int",
                    "bytes"
                ],
                "end": [
                    "int",
                    "bytes"
                ]
            }
        },
        "FormParser.on_field_end": {
            "name": "on_field_end",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormParser.on_end": {
            "name": "on_end",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "typing.MutableMapping"
                ],
                "stream": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "MultiPartParser.on_part_begin": {
            "name": "on_part_begin",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.on_part_data": {
            "name": "on_part_data",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "start": [
                    "int",
                    "bytes"
                ],
                "end": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MultiPartParser.on_part_end": {
            "name": "on_part_end",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.on_header_field": {
            "name": "on_header_field",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "start": [
                    "int",
                    "bytes"
                ],
                "end": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MultiPartParser.on_header_value": {
            "name": "on_header_value",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "start": [
                    "int",
                    "bytes"
                ],
                "end": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MultiPartParser.on_header_end": {
            "name": "on_header_end",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.on_headers_finished": {
            "name": "on_headers_finished",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPartParser.on_end": {
            "name": "on_end",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/starlette/requests.py": {
        "cookie_parser": {
            "name": "cookie_parser",
            "location": 31,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "cookie_string": [
                    "str"
                ]
            }
        },
        "HTTPConnection.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ],
                "receive": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "HTTPConnection.__getitem__": {
            "name": "__getitem__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "HTTPConnection.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.__len__": {
            "name": "__len__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.app": {
            "name": "app",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.url": {
            "name": "url",
            "location": 92,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.base_url": {
            "name": "base_url",
            "location": 98,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.headers": {
            "name": "headers",
            "location": 110,
            "return": [
                "Headers"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.query_params": {
            "name": "query_params",
            "location": 116,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.path_params": {
            "name": "path_params",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.cookies": {
            "name": "cookies",
            "location": 126,
            "return": [
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.client": {
            "name": "client",
            "location": 137,
            "return": [
                "Address",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.session": {
            "name": "session",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.auth": {
            "name": "auth",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.user": {
            "name": "user",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.state": {
            "name": "state",
            "location": 166,
            "return": [
                "State"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.url_for": {
            "name": "url_for",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "receive": [],
                "send": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.receive": {
            "name": "receive",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/starlette/responses.py": {
        "guess_type": {
            "name": "guess_type",
            "location": 30,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "None",
                    "dict[, ]",
                    "dict[str, str]",
                    "list[list[str]]",
                    "int",
                    "str"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "int"
                ],
                "media_type": [
                    "None",
                    "str"
                ],
                "background": [
                    "None",
                    "list[str]",
                    "str",
                    "int",
                    "tuple[typing.Union[typing.Any,int]]",
                    "dict[int, float]",
                    "list[]"
                ]
            }
        },
        "Response.render": {
            "name": "render",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "None"
                ]
            }
        },
        "Response.init_headers": {
            "name": "init_headers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "None",
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 98,
            "return": [
                "MutableHeaders"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.set_cookie": {
            "name": "set_cookie",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "value": [
                    "typing.Text"
                ],
                "max_age": [
                    "None",
                    "int",
                    "list[int]",
                    "list[\"Outcome\"]"
                ],
                "expires": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "path": [
                    "typing.Text"
                ],
                "domain": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "secure": [
                    "bool"
                ],
                "httponly": [
                    "bool"
                ],
                "samesite": [
                    "typing.Text"
                ]
            }
        },
        "Response.delete_cookie": {
            "name": "delete_cookie",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "path": [
                    "typing.Text"
                ],
                "domain": [
                    "None",
                    "str"
                ],
                "secure": [
                    "bool"
                ],
                "httponly": [
                    "bool"
                ],
                "samesite": [
                    "typing.Text"
                ]
            }
        },
        "JSONResponse.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "media_type": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "background": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "JSONResponse.render": {
            "name": "render",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "float",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "RedirectResponse.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "bytes"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "dict[, ]",
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "background": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "StreamingResponse.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "int"
                ],
                "media_type": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, bool]",
                    "list[str]"
                ],
                "background": [
                    "None",
                    "list[str]",
                    "str",
                    "int",
                    "tuple[typing.Union[typing.Any,int]]",
                    "dict[int, float]",
                    "list[]"
                ]
            }
        },
        "FileResponse.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "bytes",
                    "dict[str, str]"
                ],
                "media_type": [
                    "None",
                    "bool",
                    "str"
                ],
                "background": [
                    "None",
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ],
                "stat_result": [
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "method": [
                    "str"
                ],
                "content_disposition_type": [
                    "typing.Text"
                ]
            }
        },
        "FileResponse.set_stat_headers": {
            "name": "set_stat_headers",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat_result": [
                    "str",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "starlette-master/starlette/routing.py": {
        "iscoroutinefunction_or_partial": {
            "name": "iscoroutinefunction_or_partial",
            "location": 40,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "request_response": {
            "name": "request_response",
            "location": 55,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "websocket_session": {
            "name": "websocket_session",
            "location": 73,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 86,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "replace_params": {
            "name": "replace_params",
            "location": 92,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "path": [],
                "param_convertors": [],
                "path_params": []
            }
        },
        "compile_path": {
            "name": "compile_path",
            "location": 110,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "path": []
            }
        },
        "_wrap_gen_lifespan_context": {
            "name": "_wrap_gen_lifespan_context",
            "location": 523,
            "return": [],
            "arguments": {
                "lifespan_context": []
            }
        },
        "NoMatchFound.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "path_params": []
            }
        },
        "BaseRoute.matches": {
            "name": "matches",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "BaseRoute.url_path_for": {
            "name": "url_path_for",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Route.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "endpoint": []
            }
        },
        "Route.matches": {
            "name": "matches",
            "location": 235,
            "return": [
                "tuple[dict[typing.Text, dict[, ]]]",
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Route.url_path_for": {
            "name": "url_path_for",
            "location": 251,
            "return": [
                "URLPath"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Route.__eq__": {
            "name": "__eq__",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WebSocketRoute.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "endpoint": []
            }
        },
        "WebSocketRoute.matches": {
            "name": "matches",
            "location": 307,
            "return": [
                "tuple[dict[typing.Text, dict[, ]]]",
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "WebSocketRoute.url_path_for": {
            "name": "url_path_for",
            "location": 320,
            "return": [
                "URLPath"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "WebSocketRoute.__eq__": {
            "name": "__eq__",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mount.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "app": [
                    "None"
                ],
                "routes": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "Mount.routes": {
            "name": "routes",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mount.matches": {
            "name": "matches",
            "location": 370,
            "return": [
                "tuple[dict[typing.Text, dict[, ]]]",
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Mount.url_path_for": {
            "name": "url_path_for",
            "location": 393,
            "return": [
                "URLPath"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Mount.__eq__": {
            "name": "__eq__",
            "location": 429,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Host.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "app": [],
                "name": [
                    "None"
                ]
            }
        },
        "Host.routes": {
            "name": "routes",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Host.matches": {
            "name": "matches",
            "location": 451,
            "return": [
                "tuple[dict[typing.Text, dict[, ]]]",
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Host.url_path_for": {
            "name": "url_path_for",
            "location": 466,
            "return": [
                "URLPath"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Host.__eq__": {
            "name": "__eq__",
            "location": 496,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AsyncLiftContextManager.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cm": []
            }
        },
        "_wrap_gen_lifespan_context.wrapper": {
            "name": "wrapper",
            "location": 529,
            "return": [
                "_AsyncLiftContextManager"
            ],
            "arguments": {
                "app": []
            }
        },
        "_DefaultLifespan.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "_DefaultLifespan.__call__": {
            "name": "__call__",
            "location": 545,
            "return": [
                "_DefaultLifespan"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "None"
                ],
                "redirect_slashes": [
                    "bool"
                ],
                "default": [
                    "None"
                ],
                "on_startup": [
                    "None"
                ],
                "on_shutdown": [
                    "None"
                ],
                "lifespan": [
                    "None"
                ]
            }
        },
        "Router.url_path_for": {
            "name": "url_path_for",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Router.__eq__": {
            "name": "__eq__",
            "location": 711,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Router.mount": {
            "name": "mount",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "app": [],
                "name": [
                    "None"
                ]
            }
        },
        "Router.host": {
            "name": "host",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "app": [],
                "name": [
                    "None"
                ]
            }
        },
        "Router.add_route": {
            "name": "add_route",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "endpoint": [],
                "methods": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "include_in_schema": [
                    "bool"
                ]
            }
        },
        "Router.add_websocket_route": {
            "name": "add_websocket_route",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "endpoint": [],
                "name": [
                    "None"
                ]
            }
        },
        "Router.route": {
            "name": "route",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "methods": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "include_in_schema": [
                    "bool"
                ]
            }
        },
        "Router.websocket_route": {
            "name": "websocket_route",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "name": [
                    "None"
                ]
            }
        },
        "Router.add_event_handler": {
            "name": "add_event_handler",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [],
                "func": []
            }
        },
        "Router.on_event": {
            "name": "on_event",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "event_type": []
            }
        },
        "Router.route.decorator": {
            "name": "decorator",
            "location": 794,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Router.websocket_route.decorator": {
            "name": "decorator",
            "location": 821,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Router.on_event.decorator": {
            "name": "decorator",
            "location": 838,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "starlette-master/starlette/schemas.py": {
        "OpenAPIResponse.render": {
            "name": "render",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "BaseSchemaGenerator.get_schema": {
            "name": "get_schema",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BaseSchemaGenerator.get_endpoints": {
            "name": "get_endpoints",
            "location": 36,
            "return": [
                "list[EndpointInfo]"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "str"
                ]
            }
        },
        "BaseSchemaGenerator._remove_converter": {
            "name": "_remove_converter",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseSchemaGenerator.parse_docstring": {
            "name": "parse_docstring",
            "location": 95,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "func_or_method": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "int",
                    "float",
                    "list[]"
                ]
            }
        },
        "BaseSchemaGenerator.OpenAPIResponse": {
            "name": "OpenAPIResponse",
            "location": 119,
            "return": [
                "OpenAPIResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SchemaGenerator.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_schema": [
                    "int"
                ]
            }
        },
        "SchemaGenerator.get_schema": {
            "name": "get_schema",
            "location": 129,
            "return": [
                "str",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "bool"
                ]
            }
        }
    },
    "starlette-master/starlette/staticfiles.py": {
        "NotModifiedResponse.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "StaticFiles.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticFiles.get_directories": {
            "name": "get_directories",
            "location": 57,
            "return": [
                "list[typing.Union[str,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]]]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "str"
                ],
                "packages": [
                    "None",
                    "list[str]",
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "StaticFiles.get_path": {
            "name": "get_path",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "str"
                ]
            }
        },
        "StaticFiles.lookup_path": {
            "name": "lookup_path",
            "location": 160,
            "return": [
                "tuple[str]",
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "StaticFiles.file_response": {
            "name": "file_response",
            "location": 176,
            "return": [
                "NotModifiedResponse",
                "FileResponse"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "bytes",
                    "bool",
                    "typing.Mapping"
                ],
                "stat_result": [
                    "bytes",
                    "bool",
                    "typing.Mapping"
                ],
                "scope": [
                    "str",
                    "bytes"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "StaticFiles.is_not_modified": {
            "name": "is_not_modified",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response_headers": [],
                "request_headers": []
            }
        }
    },
    "starlette-master/starlette/status.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "bool"
                ]
            }
        },
        "__dir__": {
            "name": "__dir__",
            "location": 198,
            "return": [
                "list[typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "starlette-master/starlette/templating.py": {
        "_TemplateResponse.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [],
                "context": [
                    "bool",
                    "None",
                    "str"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "media_type": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "background": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Jinja2Templates.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "bool",
                    "Exception",
                    "None",
                    "str"
                ]
            }
        },
        "Jinja2Templates._create_env": {
            "name": "_create_env",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "Jinja2Templates.get_template": {
            "name": "get_template",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Jinja2Templates.TemplateResponse": {
            "name": "TemplateResponse",
            "location": 86,
            "return": [
                "_TemplateResponse"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]"
                ],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "None",
                    "dict[, ]",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]"
                ],
                "media_type": [
                    "None",
                    "dict[, ]",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]"
                ],
                "background": [
                    "None",
                    "dict[, ]",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]"
                ]
            }
        },
        "Jinja2Templates._create_env.url_for": {
            "name": "url_for",
            "location": 71,
            "return": [],
            "arguments": {
                "context": [],
                "name": []
            }
        }
    },
    "starlette-master/starlette/testclient.py": {
        "_get_reason_phrase": {
            "name": "_get_reason_phrase",
            "location": 77,
            "return": [],
            "arguments": {
                "status_code": []
            }
        },
        "_is_asgi3": {
            "name": "_is_asgi3",
            "location": 84,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "_HeaderDict.get_all": {
            "name": "get_all",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "_MockOriginalResponse.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "_MockOriginalResponse.isclosed": {
            "name": "isclosed",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Upgrade.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "_WrapASGI2.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "_ASGIAdapter.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "portal_factory": [],
                "raise_server_exceptions": [],
                "root_path": []
            }
        },
        "_ASGIAdapter.send": {
            "name": "send",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "WebSocketTestSession.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "scope": [],
                "portal_factory": []
            }
        },
        "WebSocketTestSession.__enter__": {
            "name": "__enter__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTestSession.__exit__": {
            "name": "__exit__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTestSession._raise_on_close": {
            "name": "_raise_on_close",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "WebSocketTestSession.send": {
            "name": "send",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "WebSocketTestSession.send_text": {
            "name": "send_text",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WebSocketTestSession.send_bytes": {
            "name": "send_bytes",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WebSocketTestSession.send_json": {
            "name": "send_json",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "mode": []
            }
        },
        "WebSocketTestSession.close": {
            "name": "close",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "WebSocketTestSession.receive": {
            "name": "receive",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTestSession.receive_text": {
            "name": "receive_text",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTestSession.receive_bytes": {
            "name": "receive_bytes",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTestSession.receive_json": {
            "name": "receive_json",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "TestClient.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "base_url": [],
                "raise_server_exceptions": [],
                "root_path": [],
                "backend": [],
                "backend_options": []
            }
        },
        "TestClient._portal_factory": {
            "name": "_portal_factory",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.request": {
            "name": "request",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "url": [],
                "params": [],
                "data": [],
                "headers": [],
                "cookies": [],
                "files": [],
                "auth": [],
                "timeout": [],
                "allow_redirects": [],
                "proxies": [],
                "hooks": [],
                "stream": [],
                "verify": [],
                "cert": [],
                "json": []
            }
        },
        "TestClient.websocket_connect": {
            "name": "websocket_connect",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "subprotocols": []
            }
        },
        "TestClient.__enter__": {
            "name": "__enter__",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.__exit__": {
            "name": "__exit__",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.__enter__.reset_portal": {
            "name": "reset_portal",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "TestClient.__enter__.wait_shutdown": {
            "name": "wait_shutdown",
            "location": 532,
            "return": [],
            "arguments": {}
        }
    },
    "starlette-master/starlette/types.py": {},
    "starlette-master/starlette/websockets.py": {
        "WebSocketDisconnect.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "reason": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "WebSocket.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "receive": [
                    "int",
                    "float"
                ],
                "send": [
                    "int",
                    "float"
                ]
            }
        },
        "WebSocket._raise_on_disconnect": {
            "name": "_raise_on_disconnect",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "WebSocketClose.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "reason": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "starlette-master/starlette/_compat.py": {
        "md5_hexdigest": {
            "name": "md5_hexdigest",
            "location": 28,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "starlette-master/starlette/_utils.py": {
        "is_async_callable": {
            "name": "is_async_callable",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "starlette-master/starlette/__init__.py": {},
    "starlette-master/starlette/middleware/authentication.py": {
        "AuthenticationMiddleware.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "backend": [
                    "bool",
                    "dict[, ]"
                ],
                "on_error": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AuthenticationMiddleware.default_on_error": {
            "name": "default_on_error",
            "location": 51,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "conn": [
                    "Exception",
                    "dict[, ]"
                ],
                "exc": [
                    "Exception",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/base.py": {
        "BaseHTTPMiddleware.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "dispatch": [
                    "None",
                    "bool"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/cors.py": {
        "CORSMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "allow_origins": [
                    "tuple[]"
                ],
                "allow_methods": [
                    "tuple[typing.Text]"
                ],
                "allow_headers": [
                    "tuple[]"
                ],
                "allow_credentials": [
                    "bool"
                ],
                "allow_origin_regex": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "expose_headers": [
                    "tuple[]"
                ],
                "max_age": [
                    "int"
                ]
            }
        },
        "CORSMiddleware.is_allowed_origin": {
            "name": "is_allowed_origin",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "CORSMiddleware.preflight_response": {
            "name": "preflight_response",
            "location": 105,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "self": [],
                "request_headers": []
            }
        },
        "CORSMiddleware.allow_explicit_origin": {
            "name": "allow_explicit_origin",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [],
                "origin": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/errors.py": {
        "ServerErrorMiddleware.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "handler": [
                    "None",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "ServerErrorMiddleware.format_line": {
            "name": "format_line",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "list[str]",
                    "str",
                    "list[]",
                    "typing.Iterator",
                    "typing.Counter"
                ],
                "line": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "frame_lineno": [],
                "frame_index": []
            }
        },
        "ServerErrorMiddleware.generate_frame_html": {
            "name": "generate_frame_html",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "is_collapsed": [
                    "bool",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "ServerErrorMiddleware.generate_html": {
            "name": "generate_html",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "bool",
                    "None"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "ServerErrorMiddleware.generate_plain_text": {
            "name": "generate_plain_text",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "ServerErrorMiddleware.debug_response": {
            "name": "debug_response",
            "location": 244,
            "return": [
                "HTMLResponse",
                "PlainTextResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "exc": [
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "ServerErrorMiddleware.error_response": {
            "name": "error_response",
            "location": 253,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "str",
                    "dict[, ]"
                ],
                "exc": [
                    "Exception",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/exceptions.py": {
        "ExceptionMiddleware.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "handlers": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "ExceptionMiddleware.add_exception_handler": {
            "name": "add_exception_handler",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_class_or_status_code": [
                    "int",
                    "typing.Type",
                    "bytes",
                    "dict[, ]",
                    "str"
                ],
                "handler": [
                    "int",
                    "typing.Sequence[int]",
                    "typing.Any",
                    "None",
                    "str"
                ]
            }
        },
        "ExceptionMiddleware._lookup_exception_handler": {
            "name": "_lookup_exception_handler",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Exception",
                    "str"
                ]
            }
        },
        "ExceptionMiddleware.http_exception": {
            "name": "http_exception",
            "location": 88,
            "return": [
                "Response",
                "PlainTextResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "exc": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/gzip.py": {
        "GZipMiddleware.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "minimum_size": [
                    "int"
                ],
                "compresslevel": [
                    "int"
                ]
            }
        },
        "GZipResponder.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "minimum_size": [
                    "int",
                    "typing.Any",
                    "None",
                    "str"
                ],
                "compresslevel": [
                    "int"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/httpsredirect.py": {
        "HTTPSRedirectMiddleware.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "starlette-master/starlette/middleware/sessions.py": {
        "SessionMiddleware.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "secret_key": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "session_cookie": [
                    "typing.Text"
                ],
                "max_age": [
                    "int"
                ],
                "path": [
                    "typing.Text"
                ],
                "same_site": [
                    "typing.Text"
                ],
                "https_only": [
                    "bool"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/trustedhost.py": {
        "TrustedHostMiddleware.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "allowed_hosts": [
                    "None",
                    "typing.Sequence[str]",
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "www_redirect": [
                    "bool"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/wsgi.py": {
        "build_environ": {
            "name": "build_environ",
            "location": 18,
            "return": [
                "str",
                "list[str]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "scope": [],
                "body": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "WSGIMiddleware.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "WSGIResponder.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "scope": [
                    "str"
                ]
            }
        },
        "WSGIResponder.start_response": {
            "name": "start_response",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "response_headers": [
                    "str",
                    "bytes"
                ],
                "exc_info": [
                    "None",
                    "bool",
                    "str",
                    "typing.Any",
                    "tuple[]",
                    "dict[str, str]"
                ]
            }
        },
        "WSGIResponder.wsgi": {
            "name": "wsgi",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        }
    },
    "starlette-master/starlette/middleware/__init__.py": {
        "Middleware.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "None"
                ]
            }
        },
        "Middleware.__iter__": {
            "name": "__iter__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Middleware.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/tests/conftest.py": {
        "no_trio_support": {
            "name": "no_trio_support",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "anyio_backend_name": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_client_factory": {
            "name": "test_client_factory",
            "location": 15,
            "return": [],
            "arguments": {
                "anyio_backend_name": [
                    "str",
                    "bool"
                ],
                "anyio_backend_options": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "starlette-master/tests/test_applications.py": {
        "func_homepage": {
            "name": "func_homepage",
            "location": 28,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "all_users_page": {
            "name": "all_users_page",
            "location": 41,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "user_page": {
            "name": "user_page",
            "location": 45,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "custom_subdomain": {
            "name": "custom_subdomain",
            "location": 50,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "runtime_error": {
            "name": "runtime_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 103,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_url_path_for": {
            "name": "test_url_path_for",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_route": {
            "name": "test_func_route",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_async_route": {
            "name": "test_async_route",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_class_route": {
            "name": "test_class_route",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_mounted_route": {
            "name": "test_mounted_route",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_mounted_route_path_params": {
            "name": "test_mounted_route_path_params",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_subdomain_route": {
            "name": "test_subdomain_route",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_route": {
            "name": "test_websocket_route",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_400": {
            "name": "test_400",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_405": {
            "name": "test_405",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_500": {
            "name": "test_500",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_middleware": {
            "name": "test_middleware",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_routes": {
            "name": "test_routes",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_mount": {
            "name": "test_app_mount",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_app_debug": {
            "name": "test_app_debug",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_add_route": {
            "name": "test_app_add_route",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_add_websocket_route": {
            "name": "test_app_add_websocket_route",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_add_event_handler": {
            "name": "test_app_add_event_handler",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_async_cm_lifespan": {
            "name": "test_app_async_cm_lifespan",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_async_gen_lifespan": {
            "name": "test_app_async_gen_lifespan",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_sync_gen_lifespan": {
            "name": "test_app_sync_gen_lifespan",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "Homepage.get": {
            "name": "get",
            "location": 37,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "test_app_add_event_handler.run_startup": {
            "name": "run_startup",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_add_event_handler.run_cleanup": {
            "name": "run_cleanup",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_sync_gen_lifespan.lifespan": {
            "name": "lifespan",
            "location": 371,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "starlette-master/tests/test_authentication.py": {
        "homepage": {
            "name": "homepage",
            "location": 40,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "dashboard_sync": {
            "name": "dashboard_sync",
            "location": 70,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "admin_sync": {
            "name": "admin_sync",
            "location": 91,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "async_inject_decorator": {
            "name": "async_inject_decorator",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "sync_inject_decorator": {
            "name": "sync_inject_decorator",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "decorated_sync": {
            "name": "decorated_sync",
            "location": 145,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [],
                "additional": []
            }
        },
        "ws_inject_decorator": {
            "name": "ws_inject_decorator",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_invalid_decorator_usage": {
            "name": "test_invalid_decorator_usage",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_interface": {
            "name": "test_user_interface",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_authentication_required": {
            "name": "test_authentication_required",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_authentication_required": {
            "name": "test_websocket_authentication_required",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_authentication_redirect": {
            "name": "test_authentication_redirect",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "on_auth_error": {
            "name": "on_auth_error",
            "location": 330,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [],
                "exc": [
                    "Exception",
                    "int",
                    "str"
                ]
            }
        },
        "control_panel": {
            "name": "control_panel",
            "location": 335,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "test_custom_on_error": {
            "name": "test_custom_on_error",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "Dashboard.get": {
            "name": "get",
            "location": 81,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "async_inject_decorator.wrapper": {
            "name": "wrapper",
            "location": 112,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "sync_inject_decorator.wrapper": {
            "name": "wrapper",
            "location": 134,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "ws_inject_decorator.wrapper": {
            "name": "wrapper",
            "location": 156,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "sync_inject_decorator.wrapper.app": {
            "name": "app",
            "location": 135,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ws_inject_decorator.wrapper.app": {
            "name": "app",
            "location": 157,
            "return": [],
            "arguments": {
                "websocket": []
            }
        },
        "test_invalid_decorator_usage.foo": {
            "name": "foo",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_background.py": {
        "test_async_task": {
            "name": "test_async_task",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_sync_task": {
            "name": "test_sync_task",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_multiple_tasks": {
            "name": "test_multiple_tasks",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_multi_tasks_failure_avoids_next_execution": {
            "name": "test_multi_tasks_failure_avoids_next_execution",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_sync_task.sync_task": {
            "name": "sync_task",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_tasks.increment": {
            "name": "increment",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": []
            }
        },
        "test_multi_tasks_failure_avoids_next_execution.increment": {
            "name": "increment",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_concurrency.py": {
        "test_accessing_context_from_threaded_sync_endpoint": {
            "name": "test_accessing_context_from_threaded_sync_endpoint",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_accessing_context_from_threaded_sync_endpoint.endpoint": {
            "name": "endpoint",
            "location": 35,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/test_config.py": {
        "test_config": {
            "name": "test_config",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": []
            }
        },
        "test_environ": {
            "name": "test_environ",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config.cast_to_int": {
            "name": "cast_to_int",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "starlette-master/tests/test_convertors.py": {
        "refresh_convertor_types": {
            "name": "refresh_convertor_types",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 29,
            "return": [
                "Router"
            ],
            "arguments": {}
        },
        "test_datetime_convertor": {
            "name": "test_datetime_convertor",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": [],
                "app": []
            }
        },
        "DateTimeConvertor.convert": {
            "name": "convert",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Iterable[str]",
                    "float",
                    "bool"
                ]
            }
        },
        "DateTimeConvertor.to_string": {
            "name": "to_string",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "app.datetime_convertor": {
            "name": "datetime_convertor",
            "location": 32,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/test_database.py": {
        "create_test_database": {
            "name": "create_test_database",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_database": {
            "name": "test_database",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_database_execute_many": {
            "name": "test_database_execute_many",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_database_isolated_during_test_cases": {
            "name": "test_database_isolated_during_test_cases",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        }
    },
    "starlette-master/tests/test_datastructures.py": {
        "test_url": {
            "name": "test_url",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_query_params": {
            "name": "test_url_query_params",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hidden_password": {
            "name": "test_hidden_password",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_csv": {
            "name": "test_csv",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_from_scope": {
            "name": "test_url_from_scope",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers": {
            "name": "test_headers",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers": {
            "name": "test_mutable_headers",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers_merge": {
            "name": "test_mutable_headers_merge",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers_merge_dict": {
            "name": "test_mutable_headers_merge_dict",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers_update": {
            "name": "test_mutable_headers_update",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers_update_dict": {
            "name": "test_mutable_headers_update_dict",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_headers_merge_not_mapping": {
            "name": "test_mutable_headers_merge_not_mapping",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_mutablecopy": {
            "name": "test_headers_mutablecopy",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_blank_params": {
            "name": "test_url_blank_params",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparams": {
            "name": "test_queryparams",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_formdata": {
            "name": "test_formdata",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multidict": {
            "name": "test_multidict",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_endpoints.py": {
        "client": {
            "name": "client",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_http_endpoint_route": {
            "name": "test_http_endpoint_route",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_http_endpoint_route_path_params": {
            "name": "test_http_endpoint_route_path_params",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_http_endpoint_route_method": {
            "name": "test_http_endpoint_route_method",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_websocket_endpoint_on_connect": {
            "name": "test_websocket_endpoint_on_connect",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_receive_bytes": {
            "name": "test_websocket_endpoint_on_receive_bytes",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_receive_json": {
            "name": "test_websocket_endpoint_on_receive_json",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_receive_json_binary": {
            "name": "test_websocket_endpoint_on_receive_json_binary",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_receive_text": {
            "name": "test_websocket_endpoint_on_receive_text",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_default": {
            "name": "test_websocket_endpoint_on_default",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_endpoint_on_disconnect": {
            "name": "test_websocket_endpoint_on_disconnect",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        }
    },
    "starlette-master/tests/test_exceptions.py": {
        "raise_runtime_error": {
            "name": "raise_runtime_error",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "not_acceptable": {
            "name": "not_acceptable",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "no_content": {
            "name": "no_content",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "not_modified": {
            "name": "not_modified",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "with_headers": {
            "name": "with_headers",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_not_acceptable": {
            "name": "test_not_acceptable",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_no_content": {
            "name": "test_no_content",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_not_modified": {
            "name": "test_not_modified",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_with_headers": {
            "name": "test_with_headers",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_websockets_should_raise": {
            "name": "test_websockets_should_raise",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_handled_exc_after_response": {
            "name": "test_handled_exc_after_response",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": [],
                "client": []
            }
        },
        "test_force_500_response": {
            "name": "test_force_500_response",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exception_middleware_deprecation": {
            "name": "test_exception_middleware_deprecation",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_formparsers.py": {
        "test_multipart_request_data": {
            "name": "test_multipart_request_data",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_files": {
            "name": "test_multipart_request_files",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_files_with_content_type": {
            "name": "test_multipart_request_files_with_content_type",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_multiple_files": {
            "name": "test_multipart_request_multiple_files",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_multiple_files_with_headers": {
            "name": "test_multipart_request_multiple_files_with_headers",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multi_items": {
            "name": "test_multi_items",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_mixed_files_and_data": {
            "name": "test_multipart_request_mixed_files_and_data",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_with_charset_for_filename": {
            "name": "test_multipart_request_with_charset_for_filename",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_without_charset_for_filename": {
            "name": "test_multipart_request_without_charset_for_filename",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_request_with_encoded_value": {
            "name": "test_multipart_request_with_encoded_value",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_urlencoded_request_data": {
            "name": "test_urlencoded_request_data",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_no_request_data": {
            "name": "test_no_request_data",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_urlencoded_percent_encoding": {
            "name": "test_urlencoded_percent_encoding",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_urlencoded_percent_encoding_keys": {
            "name": "test_urlencoded_percent_encoding_keys",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_urlencoded_multi_field_app_reads_body": {
            "name": "test_urlencoded_multi_field_app_reads_body",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_multipart_multi_field_app_reads_body": {
            "name": "test_multipart_multi_field_app_reads_body",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_user_safe_decode_helper": {
            "name": "test_user_safe_decode_helper",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_safe_decode_ignores_wrong_charset": {
            "name": "test_user_safe_decode_ignores_wrong_charset",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_boundary_parameter": {
            "name": "test_missing_boundary_parameter",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "expectation": [],
                "test_client_factory": []
            }
        },
        "test_missing_name_parameter_on_content_disposition": {
            "name": "test_missing_name_parameter_on_content_disposition",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "expectation": [],
                "test_client_factory": []
            }
        },
        "ForceMultipartDict.__bool__": {
            "name": "__bool__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/tests/test_requests.py": {
        "test_request_url": {
            "name": "test_request_url",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_query_params": {
            "name": "test_request_query_params",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_headers": {
            "name": "test_request_headers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_client": {
            "name": "test_request_client",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "scope": [],
                "expected_client": []
            }
        },
        "test_request_body": {
            "name": "test_request_body",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_stream": {
            "name": "test_request_stream",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_form_urlencoded": {
            "name": "test_request_form_urlencoded",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_body_then_stream": {
            "name": "test_request_body_then_stream",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_stream_then_body": {
            "name": "test_request_stream_then_body",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_json": {
            "name": "test_request_json",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_scope_interface": {
            "name": "test_request_scope_interface",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_raw_path": {
            "name": "test_request_raw_path",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_without_setting_receive": {
            "name": "test_request_without_setting_receive",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_disconnect": {
            "name": "test_request_disconnect",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "anyio_backend_name": [],
                "anyio_backend_options": []
            }
        },
        "test_request_is_disconnected": {
            "name": "test_request_is_disconnected",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_state_object": {
            "name": "test_request_state_object",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_state": {
            "name": "test_request_state",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_cookies": {
            "name": "test_request_cookies",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cookie_lenient_parsing": {
            "name": "test_cookie_lenient_parsing",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cookies_edge_cases": {
            "name": "test_cookies_edge_cases",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "set_cookie": [],
                "expected": [],
                "test_client_factory": []
            }
        },
        "test_cookies_invalid": {
            "name": "test_cookies_invalid",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "set_cookie": [],
                "expected": [],
                "test_client_factory": []
            }
        },
        "test_chunked_encoding": {
            "name": "test_chunked_encoding",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_send_push_promise": {
            "name": "test_request_send_push_promise",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_send_push_promise_without_push_extension": {
            "name": "test_request_send_push_promise_without_push_extension",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_request_send_push_promise_without_setting_send": {
            "name": "test_request_send_push_promise_without_setting_send",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_chunked_encoding.post_body": {
            "name": "post_body",
            "location": 432,
            "return": [
                "typing.Generator[bytes]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_responses.py": {
        "test_text_response": {
            "name": "test_text_response",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_bytes_response": {
            "name": "test_bytes_response",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_json_none_response": {
            "name": "test_json_none_response",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_redirect_response": {
            "name": "test_redirect_response",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_quoting_redirect_response": {
            "name": "test_quoting_redirect_response",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_redirect_response_content_length_header": {
            "name": "test_redirect_response_content_length_header",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_streaming_response": {
            "name": "test_streaming_response",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_streaming_response_custom_iterator": {
            "name": "test_streaming_response_custom_iterator",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_streaming_response_custom_iterable": {
            "name": "test_streaming_response_custom_iterable",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_sync_streaming_response": {
            "name": "test_sync_streaming_response",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_response_headers": {
            "name": "test_response_headers",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_response_phrase": {
            "name": "test_response_phrase",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_file_response": {
            "name": "test_file_response",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_file_response_with_directory_raises_error": {
            "name": "test_file_response_with_directory_raises_error",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_file_response_with_missing_file_raises_error": {
            "name": "test_file_response_with_missing_file_raises_error",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_file_response_with_chinese_filename": {
            "name": "test_file_response_with_chinese_filename",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_file_response_with_inline_disposition": {
            "name": "test_file_response_with_inline_disposition",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_set_cookie": {
            "name": "test_set_cookie",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_delete_cookie": {
            "name": "test_delete_cookie",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_populate_headers": {
            "name": "test_populate_headers",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_head_method": {
            "name": "test_head_method",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_empty_response": {
            "name": "test_empty_response",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_empty_204_response": {
            "name": "test_empty_204_response",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_non_empty_response": {
            "name": "test_non_empty_response",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_file_response_known_size": {
            "name": "test_file_response_known_size",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_streaming_response_unknown_size": {
            "name": "test_streaming_response_unknown_size",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_streaming_response_known_size": {
            "name": "test_streaming_response_known_size",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_sync_streaming_response.app.numbers": {
            "name": "numbers",
            "location": 162,
            "return": [
                "typing.Generator[str]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "minimum": [],
                "maximum": []
            }
        },
        "test_streaming_response_custom_iterator.app.CustomAsyncIterator.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_streaming_response_custom_iterator.app.CustomAsyncIterator.__aiter__": {
            "name": "__aiter__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-master/tests/test_routing.py": {
        "homepage": {
            "name": "homepage",
            "location": 13,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "users": {
            "name": "users",
            "location": 17,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 21,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "user_me": {
            "name": "user_me",
            "location": 26,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "disable_user": {
            "name": "disable_user",
            "location": 31,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "user_no_match": {
            "name": "user_no_match",
            "location": 36,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "func_homepage": {
            "name": "func_homepage",
            "location": 63,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "contact": {
            "name": "contact",
            "location": 67,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "int_convertor": {
            "name": "int_convertor",
            "location": 71,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "float_convertor": {
            "name": "float_convertor",
            "location": 76,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "path_convertor": {
            "name": "path_convertor",
            "location": 81,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "uuid_converter": {
            "name": "uuid_converter",
            "location": 86,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "path_with_parentheses": {
            "name": "path_with_parentheses",
            "location": 91,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "client": {
            "name": "client",
            "location": 156,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_router": {
            "name": "test_router",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_route_converters": {
            "name": "test_route_converters",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_url_path_for": {
            "name": "test_url_path_for",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_for": {
            "name": "test_url_for",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_add_route": {
            "name": "test_router_add_route",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_router_duplicate_path": {
            "name": "test_router_duplicate_path",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_router_add_websocket_route": {
            "name": "test_router_add_websocket_route",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "http_endpoint": {
            "name": "http_endpoint",
            "location": 325,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_protocol_switch": {
            "name": "test_protocol_switch",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_mount_urls": {
            "name": "test_mount_urls",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_reverse_mount_urls": {
            "name": "test_reverse_mount_urls",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mount_at_root": {
            "name": "test_mount_at_root",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "users_api": {
            "name": "users_api",
            "location": 395,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "test_host_routing": {
            "name": "test_host_routing",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_host_reverse_urls": {
            "name": "test_host_reverse_urls",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subdomain_routing": {
            "name": "test_subdomain_routing",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_subdomain_reverse_urls": {
            "name": "test_subdomain_reverse_urls",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_for_with_root_path": {
            "name": "test_url_for_with_root_path",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_url_for_with_double_mount": {
            "name": "test_url_for_with_double_mount",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standalone_route_matches": {
            "name": "test_standalone_route_matches",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_standalone_route_does_not_match": {
            "name": "test_standalone_route_does_not_match",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_standalone_ws_route_matches": {
            "name": "test_standalone_ws_route_matches",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_standalone_ws_route_does_not_match": {
            "name": "test_standalone_ws_route_does_not_match",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_lifespan_async": {
            "name": "test_lifespan_async",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_lifespan_sync": {
            "name": "test_lifespan_sync",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_raise_on_startup": {
            "name": "test_raise_on_startup",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_raise_on_shutdown": {
            "name": "test_raise_on_shutdown",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_partial_async_endpoint": {
            "name": "test_partial_async_endpoint",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_partial_async_ws_endpoint": {
            "name": "test_partial_async_ws_endpoint",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_duplicated_param_names": {
            "name": "test_duplicated_param_names",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route_name": {
            "name": "test_route_name",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "list[str]"
                ],
                "expected_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_exception_on_mounted_apps": {
            "name": "test_exception_on_mounted_apps",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_lifespan_sync.hello_world": {
            "name": "hello_world",
            "location": 640,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_lifespan_sync.run_startup": {
            "name": "run_startup",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lifespan_sync.run_shutdown": {
            "name": "run_shutdown",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_on_startup.run_startup": {
            "name": "run_startup",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_on_shutdown.run_shutdown": {
            "name": "run_shutdown",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Endpoint.__call__": {
            "name": "__call__",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "test_exception_on_mounted_apps.exc": {
            "name": "exc",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/test_schemas.py": {
        "ws": {
            "name": "ws",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "list[]"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "regular_docstring_and_schema": {
            "name": "regular_docstring_and_schema",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "regular_docstring": {
            "name": "regular_docstring",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "no_docstring": {
            "name": "no_docstring",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "subapp_endpoint": {
            "name": "subapp_endpoint",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "schema": {
            "name": "schema",
            "location": 104,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "test_schema_generation": {
            "name": "test_schema_generation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_endpoint": {
            "name": "test_schema_endpoint",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "OrganisationsEndpoint.get": {
            "name": "get",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "OrganisationsEndpoint.post": {
            "name": "post",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ]
            }
        }
    },
    "starlette-master/tests/test_staticfiles.py": {
        "test_staticfiles": {
            "name": "test_staticfiles",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_pathlib": {
            "name": "test_staticfiles_with_pathlib",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_staticfiles_head_with_middleware": {
            "name": "test_staticfiles_head_with_middleware",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_package": {
            "name": "test_staticfiles_with_package",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_staticfiles_post": {
            "name": "test_staticfiles_post",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_directory_returns_404": {
            "name": "test_staticfiles_with_directory_returns_404",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_missing_file_returns_404": {
            "name": "test_staticfiles_with_missing_file_returns_404",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_instantiated_with_missing_directory": {
            "name": "test_staticfiles_instantiated_with_missing_directory",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_staticfiles_configured_with_missing_directory": {
            "name": "test_staticfiles_configured_with_missing_directory",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_configured_with_file_instead_of_directory": {
            "name": "test_staticfiles_configured_with_file_instead_of_directory",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_config_check_occurs_only_once": {
            "name": "test_staticfiles_config_check_occurs_only_once",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "None"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_prevents_breaking_out_of_directory": {
            "name": "test_staticfiles_prevents_breaking_out_of_directory",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_staticfiles_never_read_file_for_head_method": {
            "name": "test_staticfiles_never_read_file_for_head_method",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_304_with_etag_match": {
            "name": "test_staticfiles_304_with_etag_match",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_304_with_last_modified_compare_last_req": {
            "name": "test_staticfiles_304_with_last_modified_compare_last_req",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_html_normal": {
            "name": "test_staticfiles_html_normal",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_html_without_index": {
            "name": "test_staticfiles_html_without_index",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_html_without_404": {
            "name": "test_staticfiles_html_without_404",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_html_only_files": {
            "name": "test_staticfiles_html_only_files",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_cache_invalidation_for_deleted_file_html_mode": {
            "name": "test_staticfiles_cache_invalidation_for_deleted_file_html_mode",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_invalid_dir_permissions_returns_401": {
            "name": "test_staticfiles_with_invalid_dir_permissions_returns_401",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_with_missing_dir_returns_404": {
            "name": "test_staticfiles_with_missing_dir_returns_404",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_access_file_as_dir_returns_404": {
            "name": "test_staticfiles_access_file_as_dir_returns_404",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_staticfiles_unhandled_os_error_returns_500": {
            "name": "test_staticfiles_unhandled_os_error_returns_500",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": [],
                "monkeypatch": []
            }
        },
        "test_staticfiles_unhandled_os_error_returns_500.mock_timeout": {
            "name": "mock_timeout",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/test_status.py": {
        "test_deprecated_types": {
            "name": "test_deprecated_types",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "constant": [],
                "msg": [
                    "int"
                ]
            }
        }
    },
    "starlette-master/tests/test_templates.py": {
        "test_templates": {
            "name": "test_templates",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "test_client_factory": []
            }
        },
        "test_template_response_requires_request": {
            "name": "test_template_response_requires_request",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "starlette-master/tests/test_testclient.py": {
        "mock_service_endpoint": {
            "name": "mock_service_endpoint",
            "location": 17,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]"
                ]
            }
        },
        "current_task": {
            "name": "current_task",
            "location": 28,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, list[typing.Any]]",
                "None"
            ],
            "arguments": {}
        },
        "startup": {
            "name": "startup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_use_testclient_in_endpoint": {
            "name": "test_use_testclient_in_endpoint",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_use_testclient_as_contextmanager": {
            "name": "test_use_testclient_as_contextmanager",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": [],
                "anyio_backend_name": []
            }
        },
        "test_error_on_startup": {
            "name": "test_error_on_startup",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_exception_in_middleware": {
            "name": "test_exception_in_middleware",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_testclient_asgi2": {
            "name": "test_testclient_asgi2",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_testclient_asgi3": {
            "name": "test_testclient_asgi3",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_blocking_receive": {
            "name": "test_websocket_blocking_receive",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_use_testclient_in_endpoint.homepage": {
            "name": "homepage",
            "location": 58,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_use_testclient_as_contextmanager.get_identity": {
            "name": "get_identity",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_testclient_asgi2.app": {
            "name": "app",
            "location": 173,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_websocket_blocking_receive.app": {
            "name": "app",
            "location": 208,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_exception_in_middleware.BrokenMiddleware.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "starlette-master/tests/test_websockets.py": {
        "test_websocket_url": {
            "name": "test_websocket_url",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_binary_json": {
            "name": "test_websocket_binary_json",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_query_params": {
            "name": "test_websocket_query_params",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_headers": {
            "name": "test_websocket_headers",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_port": {
            "name": "test_websocket_port",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_send_and_receive_text": {
            "name": "test_websocket_send_and_receive_text",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_send_and_receive_bytes": {
            "name": "test_websocket_send_and_receive_bytes",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_send_and_receive_json": {
            "name": "test_websocket_send_and_receive_json",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_iter_text": {
            "name": "test_websocket_iter_text",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_iter_bytes": {
            "name": "test_websocket_iter_bytes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_iter_json": {
            "name": "test_websocket_iter_json",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_concurrency_pattern": {
            "name": "test_websocket_concurrency_pattern",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_client_close": {
            "name": "test_client_close",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_application_close": {
            "name": "test_application_close",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_rejected_connection": {
            "name": "test_rejected_connection",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_subprotocol": {
            "name": "test_subprotocol",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_additional_headers": {
            "name": "test_additional_headers",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_no_additional_headers": {
            "name": "test_no_additional_headers",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_exception": {
            "name": "test_websocket_exception",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_duplicate_close": {
            "name": "test_duplicate_close",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_duplicate_disconnect": {
            "name": "test_duplicate_disconnect",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_websocket_scope_interface": {
            "name": "test_websocket_scope_interface",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_websocket_close_reason": {
            "name": "test_websocket_close_reason",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_send_json_invalid_mode": {
            "name": "test_send_json_invalid_mode",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_json_invalid_mode": {
            "name": "test_receive_json_invalid_mode",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_text_before_accept": {
            "name": "test_receive_text_before_accept",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_bytes_before_accept": {
            "name": "test_receive_bytes_before_accept",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_json_before_accept": {
            "name": "test_receive_json_before_accept",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_send_before_accept": {
            "name": "test_send_before_accept",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_send_wrong_message_type": {
            "name": "test_send_wrong_message_type",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_before_accept": {
            "name": "test_receive_before_accept",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_receive_wrong_message_type": {
            "name": "test_receive_wrong_message_type",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        }
    },
    "starlette-master/tests/test__utils.py": {
        "test_async_func": {
            "name": "test_async_func",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_partial": {
            "name": "test_async_partial",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_method": {
            "name": "test_async_method",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_object_call": {
            "name": "test_async_object_call",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_partial_object_call": {
            "name": "test_async_partial_object_call",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_nested_partial": {
            "name": "test_async_nested_partial",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_func.func": {
            "name": "func",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_partial.func": {
            "name": "func",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_async_method.Sync.method": {
            "name": "method",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_async_object_call.Sync.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_async_partial_object_call.Sync.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    },
    "starlette-master/tests/__init__.py": {},
    "starlette-master/tests/middleware/test_base.py": {
        "homepage": {
            "name": "homepage",
            "location": 20,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "exc": {
            "name": "exc",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "exc_stream": {
            "name": "exc_stream",
            "location": 28,
            "return": [
                "StreamingResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "_generate_faulty_stream": {
            "name": "_generate_faulty_stream",
            "location": 32,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_custom_middleware": {
            "name": "test_custom_middleware",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_state_data_across_multiple_middlewares": {
            "name": "test_state_data_across_multiple_middlewares",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_app_middleware_argument": {
            "name": "test_app_middleware_argument",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_fully_evaluated_response": {
            "name": "test_fully_evaluated_response",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_contextvars": {
            "name": "test_contextvars",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": [],
                "middleware_cls": []
            }
        },
        "NoResponse.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "receive": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "send": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "NoResponse.__await__": {
            "name": "__await__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_state_data_across_multiple_middlewares.homepage": {
            "name": "homepage",
            "location": 110,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_app_middleware_argument.homepage": {
            "name": "homepage",
            "location": 130,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "CustomMiddlewareWithoutBaseHTTPMiddleware.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "starlette-master/tests/middleware/test_cors.py": {
        "test_cors_allow_all": {
            "name": "test_cors_allow_all",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_all_except_credentials": {
            "name": "test_cors_allow_all_except_credentials",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_specific_origin": {
            "name": "test_cors_allow_specific_origin",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_disallowed_preflight": {
            "name": "test_cors_disallowed_preflight",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_preflight_allows_request_origin_if_origins_wildcard_and_credentials_allowed": {
            "name": "test_preflight_allows_request_origin_if_origins_wildcard_and_credentials_allowed",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_preflight_allow_all_methods": {
            "name": "test_cors_preflight_allow_all_methods",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_all_methods": {
            "name": "test_cors_allow_all_methods",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_origin_regex": {
            "name": "test_cors_allow_origin_regex",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_origin_regex_fullmatch": {
            "name": "test_cors_allow_origin_regex_fullmatch",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_credentialed_requests_return_specific_origin": {
            "name": "test_cors_credentialed_requests_return_specific_origin",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_vary_header_defaults_to_origin": {
            "name": "test_cors_vary_header_defaults_to_origin",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_vary_header_is_not_set_for_non_credentialed_request": {
            "name": "test_cors_vary_header_is_not_set_for_non_credentialed_request",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_vary_header_is_properly_set_for_credentialed_request": {
            "name": "test_cors_vary_header_is_properly_set_for_credentialed_request",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_vary_header_is_properly_set_when_allow_origins_is_not_wildcard": {
            "name": "test_cors_vary_header_is_properly_set_when_allow_origins_is_not_wildcard",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allowed_origin_does_not_leak_between_credentialed_requests": {
            "name": "test_cors_allowed_origin_does_not_leak_between_credentialed_requests",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_cors_allow_all.homepage": {
            "name": "homepage",
            "location": 9,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allow_all_except_credentials.homepage": {
            "name": "homepage",
            "location": 68,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allow_specific_origin.homepage": {
            "name": "homepage",
            "location": 117,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_disallowed_preflight.homepage": {
            "name": "homepage",
            "location": 164,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_preflight_allows_request_origin_if_origins_wildcard_and_credentials_allowed.homepage": {
            "name": "homepage",
            "location": 205,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_preflight_allow_all_methods.homepage": {
            "name": "homepage",
            "location": 238,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allow_all_methods.homepage": {
            "name": "homepage",
            "location": 262,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allow_origin_regex.homepage": {
            "name": "homepage",
            "location": 288,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allow_origin_regex_fullmatch.homepage": {
            "name": "homepage",
            "location": 358,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_credentialed_requests_return_specific_origin.homepage": {
            "name": "homepage",
            "location": 394,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_vary_header_defaults_to_origin.homepage": {
            "name": "homepage",
            "location": 413,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_vary_header_is_not_set_for_non_credentialed_request.homepage": {
            "name": "homepage",
            "location": 431,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_vary_header_is_properly_set_for_credentialed_request.homepage": {
            "name": "homepage",
            "location": 448,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_vary_header_is_properly_set_when_allow_origins_is_not_wildcard.homepage": {
            "name": "homepage",
            "location": 469,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_cors_allowed_origin_does_not_leak_between_credentialed_requests.homepage": {
            "name": "homepage",
            "location": 490,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/middleware/test_errors.py": {
        "test_handler": {
            "name": "test_handler",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_debug_text": {
            "name": "test_debug_text",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_debug_html": {
            "name": "test_debug_html",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_debug_after_response_sent": {
            "name": "test_debug_after_response_sent",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_debug_not_http": {
            "name": "test_debug_not_http",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_background_task": {
            "name": "test_background_task",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_handler.error_500": {
            "name": "error_500",
            "location": 14,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [],
                "exc": []
            }
        },
        "test_background_task.error_handler": {
            "name": "error_handler",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "exc": []
            }
        },
        "test_background_task.raise_exception": {
            "name": "raise_exception",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/middleware/test_gzip.py": {
        "test_gzip_responses": {
            "name": "test_gzip_responses",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_gzip_not_in_accept_encoding": {
            "name": "test_gzip_not_in_accept_encoding",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_gzip_ignored_for_small_responses": {
            "name": "test_gzip_ignored_for_small_responses",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_gzip_streaming_response": {
            "name": "test_gzip_streaming_response",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_gzip_responses.homepage": {
            "name": "homepage",
            "location": 9,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_gzip_not_in_accept_encoding.homepage": {
            "name": "homepage",
            "location": 26,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_gzip_ignored_for_small_responses.homepage": {
            "name": "homepage",
            "location": 43,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_gzip_streaming_response.homepage": {
            "name": "homepage",
            "location": 60,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/middleware/test_https_redirect.py": {
        "test_https_redirect_middleware": {
            "name": "test_https_redirect_middleware",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_https_redirect_middleware.homepage": {
            "name": "homepage",
            "location": 9,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/middleware/test_middleware.py": {
        "test_middleware_repr": {
            "name": "test_middleware_repr",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/middleware/test_session.py": {
        "view_session": {
            "name": "view_session",
            "location": 10,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "list[]",
                    "str"
                ]
            }
        },
        "test_session": {
            "name": "test_session",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_session_expires": {
            "name": "test_session_expires",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_secure_session": {
            "name": "test_secure_session",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_session_cookie_subpath": {
            "name": "test_session_cookie_subpath",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_invalid_session_cookie": {
            "name": "test_invalid_session_cookie",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_session_cookie": {
            "name": "test_session_cookie",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        }
    },
    "starlette-master/tests/middleware/test_trusted_host.py": {
        "test_trusted_host_middleware": {
            "name": "test_trusted_host_middleware",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_default_allowed_hosts": {
            "name": "test_default_allowed_hosts",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_www_redirect": {
            "name": "test_www_redirect",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_trusted_host_middleware.homepage": {
            "name": "homepage",
            "location": 9,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_www_redirect.homepage": {
            "name": "homepage",
            "location": 41,
            "return": [
                "PlainTextResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "starlette-master/tests/middleware/test_wsgi.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 8,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "echo_body": {
            "name": "echo_body",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "raise_exception": {
            "name": "raise_exception",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "return_exc_info": {
            "name": "return_exc_info",
            "location": 34,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "test_wsgi_get": {
            "name": "test_wsgi_get",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_wsgi_post": {
            "name": "test_wsgi_post",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_wsgi_exception": {
            "name": "test_wsgi_exception",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_wsgi_exc_info": {
            "name": "test_wsgi_exc_info",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client_factory": []
            }
        },
        "test_build_environ": {
            "name": "test_build_environ",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_environ_encoding": {
            "name": "test_build_environ_encoding",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-master/tests/middleware/__init__.py": {}
}
{
    "supertunnel-master/setup.py": {},
    "supertunnel-master/scripts/format.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "check": [
                    "bool",
                    "str",
                    "list[str]",
                    "None",
                    "tuple[str]"
                ],
                "path": [
                    "str",
                    "typing.BinaryIO",
                    "typing.Callable[pathlib.Path, str]"
                ]
            }
        }
    },
    "supertunnel-master/scripts/helpers.py": {
        "gitroot": {
            "name": "gitroot",
            "location": 9,
            "return": [],
            "arguments": {
                "rel": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "exclude_path": {
            "name": "exclude_path",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "expand_paths": {
            "name": "expand_paths",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "paths": []
            }
        }
    },
    "supertunnel-master/scripts/sort-imports.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "check": [
                    "bool",
                    "str",
                    "list[str]",
                    "None",
                    "tuple[str]"
                ],
                "paths": [
                    "str",
                    "typing.Iterable[pathlib.Path]"
                ]
            }
        }
    },
    "supertunnel-master/scripts/typecheck.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {
                "exclude_pytest": [],
                "path": []
            }
        }
    },
    "supertunnel-master/supertunnel/command.py": {
        "main": {
            "name": "main",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "verbose": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "debug_format": [
                    "str",
                    "typing.Iterable[]",
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "host_args": [
                    "list[tuple[typing.Union[str,int]]]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "forward": {
            "name": "forward",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "host_args": [
                    "str"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/command_test.py": {
        "test_base_group": {
            "name": "test_base_group",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "int",
                    "str"
                ]
            }
        },
        "test_forward": {
            "name": "test_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/conftest.py": {
        "stream": {
            "name": "stream",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "messenger": {
            "name": "messenger",
            "location": 43,
            "return": [
                "MockMessenger"
            ],
            "arguments": {
                "monkeypatch": [
                    "list[str]",
                    "list[]",
                    "str"
                ],
                "stream": [
                    "str",
                    "typing.TextIO",
                    "bool"
                ]
            }
        },
        "click_result_msg": {
            "name": "click_result_msg",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "result": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "assert_click_result": {
            "name": "assert_click_result",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "dict[, ]",
                    "typing.OrderedDict",
                    "list[T]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "invoke_ssh_args": {
            "name": "invoke_ssh_args",
            "location": 59,
            "return": [
                "tuple[typing.Union[str,typing.OrderedDict,dict[str, typing.Any],list[]]]",
                "tuple[typing.Union[str,typing.OrderedDict,dict[str, typing.Any],dict[typing.Any, tuple[typing.Union[str,typing.Any]]],list[]]]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "typing.Type",
                    "bool",
                    "Exception"
                ],
                "args": [],
                "is_error": [
                    "bool"
                ]
            }
        },
        "invoke": {
            "name": "invoke",
            "location": 76,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MockMessenger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "list[str]",
                    "int",
                    "None",
                    "typing.Type",
                    "str"
                ],
                "status": [
                    "typing.Text"
                ]
            }
        },
        "MockMessenger.__enter__": {
            "name": "__enter__",
            "location": 19,
            "return": [
                "MockMessenger"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessenger.__exit__": {
            "name": "__exit__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessenger.status": {
            "name": "status",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "bytes",
                    "str",
                    "None"
                ]
            }
        },
        "MockMessenger.message": {
            "name": "message",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/jupyter.py": {
        "iter_json_data": {
            "name": "iter_json_data",
            "location": 25,
            "return": [],
            "arguments": {
                "output": []
            }
        },
        "iter_processes": {
            "name": "iter_processes",
            "location": 42,
            "return": [],
            "arguments": {
                "cfg": [],
                "pattern": [],
                "restrict_to_user": []
            }
        },
        "iter_jupyter_ports": {
            "name": "iter_jupyter_ports",
            "location": 105,
            "return": [],
            "arguments": {
                "cfg": [],
                "cmd": []
            }
        },
        "find_jupyter_command": {
            "name": "find_jupyter_command",
            "location": 133,
            "return": [],
            "arguments": {
                "proc": []
            }
        },
        "get_relevant_ports": {
            "name": "get_relevant_ports",
            "location": 155,
            "return": [],
            "arguments": {
                "cfg": [],
                "restrict_to_user": [],
                "show_urls": []
            }
        },
        "discover": {
            "name": "discover",
            "location": 207,
            "return": [],
            "arguments": {
                "ctx": [],
                "host_args": [],
                "restrict_user": []
            }
        },
        "jupyter": {
            "name": "jupyter",
            "location": 238,
            "return": [],
            "arguments": {
                "ctx": [],
                "host_args": [],
                "auto": [],
                "auto_restrict_user": []
            }
        },
        "JupyterInfo.port": {
            "name": "port",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JupyterInfo.full_url": {
            "name": "full_url",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JupyterInfo.notebook_dir": {
            "name": "notebook_dir",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JupyterCommand.argument": {
            "name": "argument",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "supertunnel-master/supertunnel/jupyter_test.py": {
        "mock_run_ssh": {
            "name": "mock_run_ssh",
            "location": 20,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "config": {
            "name": "config",
            "location": 77,
            "return": [
                "SSHConfiguration"
            ],
            "arguments": {}
        },
        "ssh": {
            "name": "ssh",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_discovery": {
            "name": "test_discovery",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "config": []
            }
        },
        "test_discovery_no_jupyter": {
            "name": "test_discovery_no_jupyter",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "config": []
            }
        },
        "test_discovery_decode_error": {
            "name": "test_discovery_decode_error",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "config": [],
                "caplog": []
            }
        },
        "test_discovery_pgrep_self": {
            "name": "test_discovery_pgrep_self",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "config": []
            }
        },
        "test_discovery_error": {
            "name": "test_discovery_error",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "config": []
            }
        },
        "test_discovery_no_python": {
            "name": "test_discovery_no_python",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "config": []
            }
        },
        "test_discovery_decoy_jupyter": {
            "name": "test_discovery_decoy_jupyter",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "config": []
            }
        },
        "test_discovery_restrict_user": {
            "name": "test_discovery_restrict_user",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "str"
                ],
                "config": []
            }
        },
        "test_jupyter_command": {
            "name": "test_jupyter_command",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "str",
                    "typing.Mapping"
                ],
                "invoke": [
                    "str"
                ]
            }
        },
        "test_jupyter_auto_command": {
            "name": "test_jupyter_auto_command",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "str",
                    "typing.Mapping"
                ],
                "invoke": [
                    "bool"
                ]
            }
        },
        "test_jupyter_error_command": {
            "name": "test_jupyter_error_command",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [
                    "str"
                ],
                "invoke": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_jupyter_no_ports": {
            "name": "test_jupyter_no_ports",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh": [],
                "invoke": [
                    "bool"
                ]
            }
        },
        "test_jupyter_no_ports.test_jupyter_helper": {
            "name": "test_jupyter_helper",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "supertunnel-master/supertunnel/log.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "PIDFilter.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "float"
                ]
            }
        },
        "PIDFilter.filter": {
            "name": "filter",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/messaging.py": {
        "format_timedelta": {
            "name": "format_timedelta",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "td": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[str, T]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "echo_subprocess_error": {
            "name": "echo_subprocess_error",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "str",
                    "None",
                    "bool",
                    "list[]"
                ],
                "message": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "_Terminfo.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Terminfo.__ensure": {
            "name": "__ensure",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "cap": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "_Terminfo.has": {
            "name": "has",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Terminfo.send": {
            "name": "send",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusMessage.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool"
                ],
                "status": [
                    "typing.Text"
                ]
            }
        },
        "StatusMessage.__enter__": {
            "name": "__enter__",
            "location": 99,
            "return": [
                "StatusMessage"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusMessage.__exit__": {
            "name": "__exit__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ],
                "value": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ],
                "traceback": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ]
            }
        },
        "StatusMessage.status": {
            "name": "status",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "StatusMessage.message": {
            "name": "message",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ]
            }
        },
        "StatusMessage._build_message": {
            "name": "_build_message",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatusMessage._update": {
            "name": "_update",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "supertunnel-master/supertunnel/messaging_test.py": {
        "test_format_timedelta": {
            "name": "test_format_timedelta",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "td": [
                    "str",
                    "float",
                    "dict[, ]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "float",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "messenger": {
            "name": "messenger",
            "location": 27,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 33,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "float",
                    "list[bytes]"
                ]
            }
        },
        "clean_message": {
            "name": "clean_message",
            "location": 43,
            "return": [],
            "arguments": {
                "msg": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "test_buildmessage": {
            "name": "test_buildmessage",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "messenger": [
                    "str",
                    "float"
                ],
                "now": [
                    "str",
                    "typing.Mapping"
                ],
                "stream": [
                    "str",
                    "float"
                ]
            }
        },
        "terminfo": {
            "name": "terminfo",
            "location": 69,
            "return": [
                "MockTerminfo"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_statusmessage": {
            "name": "test_statusmessage",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "terminfo": [
                    "str",
                    "float"
                ],
                "now": [
                    "str",
                    "typing.Mapping"
                ],
                "stream": []
            }
        },
        "echo": {
            "name": "echo",
            "location": 88,
            "return": [
                "list[]"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_print_subprocess_error": {
            "name": "test_print_subprocess_error",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "echo": [
                    "typing.Mapping"
                ]
            }
        },
        "MockTerminfo.send": {
            "name": "send",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTerminfo.has": {
            "name": "has",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "echo._mock_echo": {
            "name": "_mock_echo",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "now.DateTime.now": {
            "name": "now",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "supertunnel-master/supertunnel/port.py": {
        "ForwardingPort.source": {
            "name": "source",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardingPort.destination": {
            "name": "destination",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardingPort.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardingPort.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardingPort.parse": {
            "name": "parse",
            "location": 34,
            "return": [
                "cls"
            ],
            "arguments": {
                "cls": [
                    "typing.Match",
                    "float",
                    "str",
                    "list[]",
                    "tuple[typing.Union[str,int]]"
                ],
                "value": [
                    "str",
                    "typing.Hashable",
                    "dict[, ]"
                ]
            }
        },
        "ForwardingPortArgument.convert": {
            "name": "convert",
            "location": 80,
            "return": [
                "None",
                "int",
                "str",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "None",
                    "typing.Any"
                ],
                "param": [
                    "str",
                    "None"
                ],
                "ctx": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/port_test.py": {
        "test_port_str": {
            "name": "test_port_str",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "int",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_port_parse": {
            "name": "test_port_parse",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "bool",
                    "str"
                ],
                "expected": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "test_passthrough_parse": {
            "name": "test_passthrough_parse",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_failure": {
            "name": "test_parse_failure",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_argtype_convert": {
            "name": "test_argtype_convert",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "expected": [
                    "float",
                    "list[int]",
                    "list[float]",
                    "dict[str, list[int]]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_argtype_failure": {
            "name": "test_argtype_failure",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "set[str]",
                    "typing.Type"
                ]
            }
        },
        "Args.new": {
            "name": "new",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "typing.Callable[..., T]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Args.apply": {
            "name": "apply",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/__init__.py": {},
    "supertunnel-master/supertunnel/ssh/config.py": {
        "parse_quoted_string": {
            "name": "parse_quoted_string",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "parse_ssh_config_line": {
            "name": "parse_ssh_config_line",
            "location": 111,
            "return": [
                "None",
                "ConfigValue"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 135,
            "return": [
                "typing.Generator[typing.Union[str,dict[str, typing.Union[typing.Any,typing.Any]],dict[str, str],dict[str, list[str]]]]"
            ],
            "arguments": {
                "file": [
                    "list[str]"
                ]
            }
        },
        "SSHConfiguration.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "None",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "dict[, ]",
                    "bytes",
                    "str"
                ],
                "args": [
                    "None"
                ],
                "options": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, typing.Union[int,str]]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "SSHConfiguration.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHConfiguration.copy": {
            "name": "copy",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHConfiguration.set_host": {
            "name": "set_host",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SSHConfiguration.extend": {
            "name": "extend",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[typing.Union[C,str]]",
                    "int",
                    "list[]"
                ]
            }
        },
        "SSHConfiguration.arguments": {
            "name": "arguments",
            "location": 84,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "include_cmd_args": [
                    "bool"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/ssh/config_test.py": {
        "test_configuration": {
            "name": "test_configuration",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout": {
            "name": "test_timeout",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hostcheck": {
            "name": "test_hostcheck",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_portfowarding": {
            "name": "test_portfowarding",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cfg_host": {
            "name": "test_cfg_host",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "test_cfg_extend": {
            "name": "test_cfg_extend",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_configparsing": {
            "name": "test_configparsing",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bytes"
                ],
                "expected": [
                    "float",
                    "bytes"
                ]
            }
        },
        "test_configparsing_comments": {
            "name": "test_configparsing_comments",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/ssh/continuous.py": {
        "ContinuousSSH.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "stream": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ContinuousSSH.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousSSH.run": {
            "name": "run",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousSSH._backoff": {
            "name": "_backoff",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousSSH.timeout": {
            "name": "timeout",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousSSH._await_output": {
            "name": "_await_output",
            "location": 103,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "proc": [],
                "timeout": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, int]"
                ]
            }
        },
        "ContinuousSSH._handle_ssh_line": {
            "name": "_handle_ssh_line",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ],
                "sshlog": []
            }
        },
        "ContinuousSSH._run_once": {
            "name": "_run_once",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "supertunnel-master/supertunnel/ssh/continuous_test.py": {
        "config": {
            "name": "config",
            "location": 19,
            "return": [
                "SSHConfiguration"
            ],
            "arguments": {}
        },
        "popen": {
            "name": "popen",
            "location": 25,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str"
                ]
            }
        },
        "proc": {
            "name": "proc",
            "location": 31,
            "return": [
                "ContinuousSSH"
            ],
            "arguments": {
                "popen": [
                    "dict[str, typing.Any]",
                    "int"
                ],
                "messenger": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "stream": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_continuous_repr": {
            "name": "test_continuous_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ssh_log_line": {
            "name": "test_ssh_log_line",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "str"
                ],
                "logline": [
                    "str"
                ],
                "expected_action": [
                    "str"
                ],
                "caplog": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_backoff": {
            "name": "test_backoff",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int"
                ],
                "proc": [],
                "caplog": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "selector": {
            "name": "selector",
            "location": 161,
            "return": [
                "MockSelector"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "list[str]",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "get_transitions": {
            "name": "get_transitions",
            "location": 166,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "proc": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_run_continuous": {
            "name": "test_run_continuous",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "selector": [
                    "str",
                    "int"
                ],
                "proc": [],
                "caplog": [
                    "str"
                ],
                "popen": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "test_run_continuous_hang": {
            "name": "test_run_continuous_hang",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "selector": [
                    "str",
                    "int"
                ],
                "proc": [],
                "caplog": [
                    "str"
                ],
                "popen": []
            }
        },
        "test_run_continuous_raise": {
            "name": "test_run_continuous_raise",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "selector": [
                    "str",
                    "int"
                ],
                "proc": [],
                "caplog": [
                    "str"
                ],
                "popen": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "proc": []
            }
        },
        "test_backoff.mock_sleep": {
            "name": "mock_sleep",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "duration": []
            }
        },
        "test_backoff.mock_monotonic": {
            "name": "mock_monotonic",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "MockPopen.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "float"
                ]
            }
        },
        "MockPopen._finish": {
            "name": "_finish",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPopen.poll": {
            "name": "poll",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockPopen.wait": {
            "name": "wait",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockPopen.kill": {
            "name": "kill",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockPopen.terminate": {
            "name": "terminate",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockSelector.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSelector.close": {
            "name": "close",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSelector.register": {
            "name": "register",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "int",
                    "dict[, ]"
                ],
                "event": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "MockSelector.select": {
            "name": "select",
            "location": 153,
            "return": [
                "list[]",
                "list[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_run.mock_run_once": {
            "name": "mock_run_once",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "supertunnel-master/supertunnel/ssh/helpers.py": {
        "SSHTypeError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "bool"
                ],
                "value": [
                    "None",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "SSHTypeError.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHConfigBase.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHDescriptorBase.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str"
                ],
                "type": [
                    "str"
                ],
                "default": [
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "SSHDescriptorBase.__set_name__": {
            "name": "__set_name__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "list[int]",
                    "typing.Type"
                ],
                "name": [
                    "str",
                    "None",
                    "tuple[typing.Union[str,None,str,None]]"
                ]
            }
        },
        "SSHDescriptorBase.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHDescriptorBase.value": {
            "name": "value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "str"
                ]
            }
        },
        "SSHDescriptorBase.__get__": {
            "name": "__get__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "float",
                    "dict[, ]",
                    "bool"
                ],
                "owner": [
                    "typing.Type"
                ]
            }
        },
        "SSHDescriptorBase.__set__": {
            "name": "__set__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ],
                "value": [
                    "str",
                    "typing.Sequence[]",
                    "bytes",
                    "bool",
                    "None",
                    "typing.Any",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SSHDescriptorBase.option": {
            "name": "option",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHDescriptorBase.callback": {
            "name": "callback",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "SSHMultiDescriptor.__get__": {
            "name": "__get__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "float",
                    "dict[, ]",
                    "bool"
                ],
                "owner": [
                    "typing.Type"
                ]
            }
        },
        "SSHMultiDescriptor.__set__": {
            "name": "__set__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "typing.Type",
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SSHMultiDescriptor.values": {
            "name": "values",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "SSHMultiDescriptor.callback": {
            "name": "callback",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "SSHMultiDescriptor.option": {
            "name": "option",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHOption.arguments": {
            "name": "arguments",
            "location": 140,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SSHFlag.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "float"
                ],
                "default": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "SSHFlag.arguments": {
            "name": "arguments",
            "location": 169,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SSHPortForwarding.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text"
                ],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "SSHPortForwarding.arguments": {
            "name": "arguments",
            "location": 188,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SSHPortForwarding.option": {
            "name": "option",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHOptions.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "None",
                    "dict[, ]",
                    "list[float]"
                ]
            }
        },
        "SSHOptions.add": {
            "name": "add",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "owner": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Type"
                ],
                "option": [
                    "list[]",
                    "list[list[typing.Any]]",
                    "dict[str, typing.Any]",
                    "int",
                    "str"
                ]
            }
        },
        "SSHOptions.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SSHOptions.__setitem__": {
            "name": "__setitem__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "SSHOptions.__len__": {
            "name": "__len__",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHOptions.__iter__": {
            "name": "__iter__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHOptions.setdefault": {
            "name": "setdefault",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "list[]"
                ]
            }
        },
        "SSHOptions.get": {
            "name": "get",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": []
            }
        },
        "SSHOptions.update": {
            "name": "update",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "options": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "None",
                    "typing.OrderedDict"
                ]
            }
        },
        "SSHOptions.options": {
            "name": "options",
            "location": 252,
            "return": [],
            "arguments": {
                "cls": [
                    "list[typing.Any]",
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "owner": [
                    "str",
                    "None",
                    "tuple[typing.Type]",
                    "int",
                    "dict[bytes, int]"
                ]
            }
        }
    },
    "supertunnel-master/supertunnel/ssh/__init__.py": {}
}
{
    "suq-master/app.py": {
        "handle_thrown_api_exceptions": {
            "name": "handle_thrown_api_exceptions",
            "location": 50,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "add_header": {
            "name": "add_header",
            "location": 63,
            "return": [
                "dict[, ]",
                "typing.Iterator"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "typing.Iterator"
                ]
            }
        },
        "load_user": {
            "name": "load_user",
            "location": 73,
            "return": [
                "None",
                "dict[int, str]",
                "typing.Callable[..., typing.Any]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[str, str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "frontend": {
            "name": "frontend",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "redirect_url": {
            "name": "redirect_url",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "check_login": {
            "name": "check_login",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "whats_due": {
            "name": "whats_due",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "fb_friends": {
            "name": "fb_friends",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "add_friend": {
            "name": "add_friend",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "breaks": {
            "name": "breaks",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "calendar": {
            "name": "calendar",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "profile": {
            "name": "profile",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "statuses": {
            "name": "statuses",
            "location": 397,
            "return": [],
            "arguments": {}
        },
        "fb_login": {
            "name": "fb_login",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "fb_app_id": {
            "name": "fb_app_id",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "settings.make_settings_response": {
            "name": "make_settings_response",
            "location": 337,
            "return": [],
            "arguments": {
                "current_user": []
            }
        },
        "status.make_status_response": {
            "name": "make_status_response",
            "location": 363,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "calendar.is_url_valid": {
            "name": "is_url_valid",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": []
            }
        }
    },
    "suq-master/config.py": {},
    "suq-master/backend/middleware.py": {
        "get_whats_due": {
            "name": "get_whats_due",
            "location": 11,
            "return": [
                "list[]"
            ],
            "arguments": {
                "subjects": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_whats_due.try_parsing_date": {
            "name": "try_parsing_date",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "xs": []
            }
        },
        "get_whats_due.make_assessment_piece": {
            "name": "make_assessment_piece",
            "location": 74,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "completed": []
            }
        }
    },
    "suq-master/backend/models.py": {
        "get_events": {
            "name": "get_events",
            "location": 393,
            "return": [
                "list[Event_]"
            ],
            "arguments": {
                "cal": []
            }
        },
        "get_datetime_of_week_start": {
            "name": "get_datetime_of_week_start",
            "location": 409,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "get_breaks": {
            "name": "get_breaks",
            "location": 420,
            "return": [
                "list[]"
            ],
            "arguments": {
                "events": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "weeks_events_to_dictionary": {
            "name": "weeks_events_to_dictionary",
            "location": 445,
            "return": [
                "dict[str, list[typing.Any]]",
                "dict[str, dict[, ]]",
                "dict[str, dict[str, typing.Any]]",
                "str"
            ],
            "arguments": {
                "events": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "get_this_weeks_events": {
            "name": "get_this_weeks_events",
            "location": 462,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "instant": [
                    "bool",
                    "list[int]",
                    "tuple[int]"
                ],
                "events": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_todays_events": {
            "name": "get_todays_events",
            "location": 471,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "instant": [
                    "str"
                ],
                "events": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "cull_past_breaks": {
            "name": "cull_past_breaks",
            "location": 479,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "events": [
                    "dict[, ]",
                    "list[list[str]]"
                ]
            }
        },
        "get_shared_breaks": {
            "name": "get_shared_breaks",
            "location": 489,
            "return": [],
            "arguments": {
                "group_members": []
            }
        },
        "get_remaining_shared_breaks_this_week": {
            "name": "get_remaining_shared_breaks_this_week",
            "location": 501,
            "return": [],
            "arguments": {
                "group_members": [
                    "float",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_request_status": {
            "name": "get_request_status",
            "location": 520,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None"
                ],
                "friend_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Period.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Period.__contains__": {
            "name": "__contains__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instant": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Break.is_short": {
            "name": "is_short",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.is_overnight": {
            "name": "is_overnight",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event_.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "int",
                    "str",
                    "float",
                    "tuple[]",
                    "list[str]",
                    "typing.Callable[..., None]"
                ],
                "location": [
                    "bool",
                    "str"
                ],
                "start": [
                    "int",
                    "None"
                ],
                "end": [
                    "int",
                    "None"
                ]
            }
        },
        "Event_.to_dict": {
            "name": "to_dict",
            "location": 96,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event_.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "email": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "fb_user_id": [
                    "str",
                    "int",
                    "set[int]",
                    "None"
                ],
                "fb_access_token": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "User.add_calendar": {
            "name": "add_calendar",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "User.remove_calendar": {
            "name": "remove_calendar",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.profile_picture": {
            "name": "profile_picture",
            "location": 178,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.breaks": {
            "name": "breaks",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.calendar": {
            "name": "calendar",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.events": {
            "name": "events",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.subjects": {
            "name": "subjects",
            "location": 199,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.timetable": {
            "name": "timetable",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.current_event": {
            "name": "current_event",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.current_break": {
            "name": "current_break",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.whats_due": {
            "name": "whats_due",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.status": {
            "name": "status",
            "location": 234,
            "return": [
                "dict[dict[typing.Text, ], ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.availability": {
            "name": "availability",
            "location": 301,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": [],
                "friend": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "User.confirmed_friends": {
            "name": "confirmed_friends",
            "location": 313,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_in": {
            "name": "check_in",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_out": {
            "name": "check_out",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.at_uni": {
            "name": "at_uni",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.begin_break": {
            "name": "begin_break",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.end_break": {
            "name": "end_break",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.on_break": {
            "name": "on_break",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFriend.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fb_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "friend_fb_id": [
                    "set[str]",
                    "int",
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "get_shared_breaks.concat": {
            "name": "concat",
            "location": 493,
            "return": [
                "list[]"
            ],
            "arguments": {
                "xs": []
            }
        },
        "User.status.make_user_status": {
            "name": "make_user_status",
            "location": 242,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "status": [],
                "status_info": []
            }
        }
    },
    "suq-master/backend/responses.py": {
        "_data": {
            "name": "_data",
            "location": 86,
            "return": [
                "int",
                "dict[str, int]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "typing.MutableMapping"
                ]
            }
        },
        "ok": {
            "name": "ok",
            "location": 96,
            "return": [],
            "arguments": {
                "data": [
                    "None",
                    "dict[str, typing.Any]",
                    "bytes",
                    "list[]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "created": {
            "name": "created",
            "location": 103,
            "return": [],
            "arguments": {
                "data": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "list[]",
                    "str"
                ]
            }
        },
        "no_content": {
            "name": "no_content",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "to_json": {
            "name": "to_json",
            "location": 118,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "APIException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "message": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "payload": [
                    "None",
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "APIException.to_dict": {
            "name": "to_dict",
            "location": 30,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRequest.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "payload": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Forbidden.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "payload": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "NotFound.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "payload": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "payload": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "NotImplemented.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "payload": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "to_json.wrapper": {
            "name": "wrapper",
            "location": 125,
            "return": [],
            "arguments": {}
        }
    },
    "suq-master/backend/test.py": {
        "TestGetDatetimeOfWeekStart.test_sunday": {
            "name": "test_sunday",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDatetimeOfWeekStart.test_monday": {
            "name": "test_monday",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDatetimeOfWeekStart.test_wednesday": {
            "name": "test_wednesday",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarParsing.test_broken_ical": {
            "name": "test_broken_ical",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_invalid_calendar_url": {
            "name": "test_invalid_calendar_url",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_get_valid_calendar": {
            "name": "test_get_valid_calendar",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_subjects": {
            "name": "test_subjects",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhatsDue.test_simple": {
            "name": "test_simple",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "suq-master/backend/__init__.py": {}
}
{
    "swmp-master/src/abilities.py": {
        "Ability.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ability.can_use": {
            "name": "can_use",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "float",
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "Ability.add_use_condition": {
            "name": "add_use_condition",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "list[]",
                    "tuple[]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "Ability.cooldown_fraction": {
            "name": "cooldown_fraction",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ability.use": {
            "name": "use",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "int"
                ]
            }
        },
        "Ability.add_use_effect": {
            "name": "add_use_effect",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "str",
                    "list[]",
                    "tuple[]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "AbilityData.__new__": {
            "name": "__new__",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "cool_down_time": [
                    "int",
                    "str"
                ],
                "finite_uses": [
                    "bool"
                ],
                "uses_left": [
                    "int"
                ],
                "energy_required": [
                    "int"
                ],
                "sound_on_use": [
                    "None",
                    "int",
                    "str"
                ],
                "kickback": [
                    "int"
                ],
                "spread": [
                    "int"
                ],
                "projectile_count": [
                    "int"
                ],
                "projectile_label": [
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "muzzle_flash": [
                    "bool"
                ],
                "heal_amount": [
                    "int"
                ],
                "recharge_amount": [
                    "int"
                ]
            }
        },
        "AbilityData.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GenericAbility.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "GenericAbility.cooldown_fraction": {
            "name": "cooldown_fraction",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericAbility._load_regeneration_options": {
            "name": "_load_regeneration_options",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GenericAbility._load_projectile_options": {
            "name": "_load_projectile_options",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DecrementUses.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ability": [
                    "int",
                    "float"
                ]
            }
        },
        "DecrementUses.activate": {
            "name": "activate",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "swmp-master/src/conditions.py": {
        "condition_from_data": {
            "name": "condition_from_data",
            "location": 136,
            "return": [
                "IsDamaged",
                "AlwaysTrue",
                "IsDead",
                "TargetClose",
                "RandomEventAtRate",
                "int"
            ],
            "arguments": {
                "condition_data": [],
                "player": [
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Condition.check": {
            "name": "check",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Condition.__or__": {
            "name": "__or__",
            "location": 25,
            "return": [
                "_Or"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Condition.__and__": {
            "name": "__and__",
            "location": 29,
            "return": [
                "_And"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Condition.__invert__": {
            "name": "__invert__",
            "location": 33,
            "return": [
                "_Not"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Not.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "int",
                    "float"
                ]
            }
        },
        "_Not.check": {
            "name": "check",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_Or.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond_0": [
                    "int",
                    "float"
                ],
                "cond_1": [
                    "int",
                    "float"
                ]
            }
        },
        "_Or.check": {
            "name": "check",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_And.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond_0": [
                    "int",
                    "float"
                ],
                "cond_1": [
                    "int",
                    "float"
                ]
            }
        },
        "_And.check": {
            "name": "check",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TargetClose.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ],
                "close_threshold": [
                    "int",
                    "float"
                ]
            }
        },
        "TargetClose.check": {
            "name": "check",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str"
                ]
            }
        },
        "RandomEventAtRate.check": {
            "name": "check",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "RandomEventAtRate.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "int",
                    "float"
                ]
            }
        },
        "CooldownCondition.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cool_down_time": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "CooldownCondition._time_since_last_use": {
            "name": "_time_since_last_use",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CooldownCondition.check": {
            "name": "check",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "CooldownCondition.update_last_use": {
            "name": "update_last_use",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str"
                ]
            }
        },
        "CooldownCondition.cooldown_fraction": {
            "name": "cooldown_fraction",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyAvailable.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "energy_required": [
                    "int",
                    "float"
                ]
            }
        },
        "EnergyAvailable.check": {
            "name": "check",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str"
                ]
            }
        },
        "IsDamaged.check": {
            "name": "check",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "EnergyNotFull.check": {
            "name": "check",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "bool",
                    "list[str]",
                    "str",
                    "typing.Mapping",
                    "None",
                    "tuple[int]"
                ]
            }
        },
        "IsDead.check": {
            "name": "check",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "AlwaysTrue.check": {
            "name": "check",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "swmp-master/src/effects.py": {
        "Effect.activate": {
            "name": "activate",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "StopMotion.activate": {
            "name": "activate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "EquipAndUseMod.activate": {
            "name": "activate",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "EquipAndUseMod.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "int",
                    "float"
                ]
            }
        },
        "UpdateLastUse.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cool_down_condition": [
                    "int",
                    "float"
                ]
            }
        },
        "UpdateLastUse.activate": {
            "name": "activate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, list[typing.Any]]",
                    "list[list[str]]",
                    "list[list[int]]",
                    "bool"
                ]
            }
        },
        "Heal.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "heal_amount": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "Heal.activate": {
            "name": "activate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Recharge.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recharge_amount": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "Recharge.activate": {
            "name": "activate",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "bool",
                    "str",
                    "list[str]",
                    "dict[str, int]"
                ]
            }
        },
        "ExpendEnergy.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "energy_required": [
                    "int",
                    "float"
                ]
            }
        },
        "ExpendEnergy.activate": {
            "name": "activate",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "str"
                ]
            }
        },
        "PlaySound.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sound_file": [
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "collections.abc.AsyncGenerator",
                    "collections.abc.Coroutine",
                    "list[str]"
                ]
            }
        },
        "PlaySound.activate": {
            "name": "activate",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DrawOnScreen.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_draw_file": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "angled": [
                    "bool"
                ]
            }
        },
        "DrawOnScreen.activate": {
            "name": "activate",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": []
            }
        },
        "PlayRandomSound.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sound_files": [
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "collections.abc.AsyncGenerator",
                    "collections.abc.Coroutine",
                    "list[str]"
                ]
            }
        },
        "PlayRandomSound.activate": {
            "name": "activate",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Kickback.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kickback": [
                    "int",
                    "float"
                ]
            }
        },
        "Kickback.activate": {
            "name": "activate",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MakeProjectile.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "projectile_data": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "spread": [
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "projectile_count": [
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "MakeProjectile.activate": {
            "name": "activate",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MuzzleFlashEffect.activate": {
            "name": "activate",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DropItem.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_label": [
                    "dict[str, set[str]]",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "DropItem.activate": {
            "name": "activate",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": []
            }
        },
        "FaceAndPursueTarget.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ]
            }
        },
        "FaceAndPursueTarget.activate": {
            "name": "activate",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": []
            }
        },
        "FaceTarget.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ]
            }
        },
        "FaceTarget.activate": {
            "name": "activate",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "typing.Callable[[], object]"
                ]
            }
        },
        "Kill.activate": {
            "name": "activate",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": []
            }
        }
    },
    "swmp-master/src/items.py": {
        "ItemData.__new__": {
            "name": "__new__",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool"
                ],
                "mod_label": [
                    "bytes",
                    "str"
                ],
                "image_file": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ItemObject.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "int",
                    "float"
                ],
                "pos": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "ItemObject.mod": {
            "name": "mod",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemObject.update": {
            "name": "update",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemObject._bob_offset": {
            "name": "_bob_offset",
            "location": 55,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemObject.rect": {
            "name": "rect",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemObject.image": {
            "name": "image",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemFromData.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_data": [
                    "str",
                    "typing.Type",
                    "dict[, ]",
                    "typing.IO",
                    "list[str]",
                    "bool"
                ],
                "pos": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ItemFromData.image": {
            "name": "image",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/main.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.new": {
            "name": "new",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.run": {
            "name": "run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.show_go_screen": {
            "name": "show_go_screen",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._quit": {
            "name": "_quit",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._handle_events": {
            "name": "_handle_events",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._toggle_paused": {
            "name": "_toggle_paused",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._wait_for_key": {
            "name": "_wait_for_key",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._game_over": {
            "name": "_game_over",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._pause_game": {
            "name": "_pause_game",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/model.py": {
        "initialize": {
            "name": "initialize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "timer": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Groups.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Groups.empty": {
            "name": "empty",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clock": [
                    "int",
                    "float"
                ]
            }
        },
        "Timer.dt": {
            "name": "dt",
            "location": 38,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.current_time": {
            "name": "current_time",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsAccess.groups": {
            "name": "groups",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsAccess.initialize_groups": {
            "name": "initialize_groups",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]"
                ],
                "groups": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GroupsAccess._class_initialized": {
            "name": "_class_initialized",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [
                    "int"
                ]
            }
        },
        "GameObject.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "list[int]",
                    "int",
                    "list[]"
                ]
            }
        },
        "GameObject.image": {
            "name": "image",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameObject.rect": {
            "name": "rect",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obstacle.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_left": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ],
                "w": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ],
                "h": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ]
            }
        },
        "Zone.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_left": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ],
                "w": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ],
                "h": [
                    "tuple[typing.Union[float,float,float]]",
                    "float"
                ]
            }
        },
        "TimeAccess.initialize": {
            "name": "initialize",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ],
                "timer": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "TimeAccess.timer": {
            "name": "timer",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/mods.py": {
        "ModData.__new__": {
            "name": "__new__",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "location": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "ability_label": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None",
                    "bytes"
                ],
                "equipped_image_file": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "backpack_image_file": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "stackable": [
                    "bool"
                ],
                "buffs": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "proficiencies": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "Mod.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "Mod.loc": {
            "name": "loc",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.expended": {
            "name": "expended",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.ability": {
            "name": "ability",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.equipped_image": {
            "name": "equipped_image",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.backpack_image": {
            "name": "backpack_image",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.description": {
            "name": "description",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.stackable": {
            "name": "stackable",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "typing.AbstractSet",
                    "float"
                ]
            }
        },
        "Mod.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/projectiles.py": {
        "Projectile.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "direction": [
                    "int",
                    "float"
                ],
                "hits_player": [
                    "bool"
                ]
            }
        },
        "Projectile.update": {
            "name": "update",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projectile.rect": {
            "name": "rect",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Projectile._lifetime_exceeded": {
            "name": "_lifetime_exceeded",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projectile.image": {
            "name": "image",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projectile.max_lifetime": {
            "name": "max_lifetime",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projectile.speed": {
            "name": "speed",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projectile.damage": {
            "name": "damage",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectileData.__new__": {
            "name": "__new__",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "hits_player": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "damage": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "speed": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "max_lifetime": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "image_file": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None"
                ],
                "angled_image": [
                    "bool"
                ],
                "rotating_image": [
                    "bool"
                ],
                "drops_on_kill": [
                    "None",
                    "bool",
                    "str",
                    "list[typing.Any]"
                ]
            }
        },
        "SimpleProjectile.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "None"
                ],
                "direction": [
                    "str",
                    "None"
                ],
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "bytes"
                ]
            }
        },
        "SimpleProjectile.damage": {
            "name": "damage",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleProjectile.image": {
            "name": "image",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleProjectile.max_lifetime": {
            "name": "max_lifetime",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleProjectile.speed": {
            "name": "speed",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FancyProjectile.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bytes",
                    "tuple[int]",
                    "typing.Any",
                    "None"
                ],
                "direction": [
                    "str",
                    "typing.Iterable[allennlp.data.instance.Instance]",
                    "None"
                ],
                "data": [
                    "str",
                    "typing.Iterable[allennlp.data.instance.Instance]",
                    "None"
                ]
            }
        },
        "FancyProjectile._init_image": {
            "name": "_init_image",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "list[str]"
                ],
                "direction": []
            }
        },
        "FancyProjectile._rotate_image": {
            "name": "_rotate_image",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ]
            }
        },
        "FancyProjectile.image": {
            "name": "image",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FancyProjectile.kill": {
            "name": "kill",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectileFactory.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[str, str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "ProjectileFactory.build": {
            "name": "build",
            "location": 148,
            "return": [
                "FancyProjectile"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bool"
                ],
                "direction": [
                    "str",
                    "bool"
                ]
            }
        },
        "MuzzleFlash.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "MuzzleFlash.update": {
            "name": "update",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuzzleFlash.image": {
            "name": "image",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MuzzleFlash._fade_out": {
            "name": "_fade_out",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuzzleFlash.rect": {
            "name": "rect",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/settings.py": {},
    "swmp-master/src/tilemap.py": {
        "MapObject.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tile_object": []
            }
        },
        "TiledMap.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "TiledMap._format_tileobject_names": {
            "name": "_format_tileobject_names",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TiledMap._validate_tmxdata": {
            "name": "_validate_tmxdata",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TiledMap.render": {
            "name": "render",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "TiledMap.make_map_img": {
            "name": "make_map_img",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/__init__.py": {},
    "swmp-master/src/controllers/base.py": {
        "initialize_controller": {
            "name": "initialize_controller",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "quit_func": [
                    "float",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "Controller.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.set_player_data": {
            "name": "set_player_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Controller.draw": {
            "name": "draw",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update": {
            "name": "update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/controllers/decision_controller.py": {
        "DecisionController.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "int",
                    "str",
                    "None"
                ],
                "decisions": []
            }
        },
        "DecisionController.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionController.draw": {
            "name": "draw",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionController.set_player_data": {
            "name": "set_player_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "list[]"
                ]
            }
        }
    },
    "swmp-master/src/controllers/dungeon_controller.py": {
        "Dungeon.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "map_file": []
            }
        },
        "Dungeon._init_map_objects": {
            "name": "_init_map_objects",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dungeon.update": {
            "name": "update",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dungeon._handle_collisions": {
            "name": "_handle_collisions",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "dungeon": [],
                "resolutions": []
            }
        },
        "DungeonController.set_player_data": {
            "name": "set_player_data",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DungeonController.draw": {
            "name": "draw",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController.update": {
            "name": "update",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._hud_just_clicked": {
            "name": "_hud_just_clicked",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._init_controls": {
            "name": "_init_controls",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "DungeonController._handle_hud": {
            "name": "_handle_hud",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._try_equip": {
            "name": "_try_equip",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._equip_mod_in_backpack": {
            "name": "_equip_mod_in_backpack",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._unequip_mod": {
            "name": "_unequip_mod",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._pass_mouse_pos_to_player": {
            "name": "_pass_mouse_pos_to_player",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._abs_mouse_pos": {
            "name": "_abs_mouse_pos",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._toggle_hide_backpack": {
            "name": "_toggle_hide_backpack",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController.__del__": {
            "name": "__del__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonController._teleport": {
            "name": "_teleport",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/controllers/keyboards.py": {
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.reset_bindings": {
            "name": "reset_bindings",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.bind": {
            "name": "bind",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "bound_func": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ]
            }
        },
        "Keyboard.bind_on_press": {
            "name": "bind_on_press",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "bound_func": [
                    "int",
                    "str"
                ]
            }
        },
        "Keyboard.bind_mouse": {
            "name": "bind_mouse",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "bound_func": [
                    "int",
                    "str"
                ]
            }
        },
        "Keyboard.handle_input": {
            "name": "handle_input",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_keys": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "Keyboard._call_binding": {
            "name": "_call_binding",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "key_id": [
                    "str",
                    "bytes",
                    "int"
                ],
                "funcs": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ],
                "allowed_keys": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Keyboard.mouse_just_clicked": {
            "name": "mouse_just_clicked",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.mouse_pos": {
            "name": "mouse_pos",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Keyboard._set_previous_input": {
            "name": "_set_previous_input",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard._bind_quit": {
            "name": "_bind_quit",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard._just_pressed_keys": {
            "name": "_just_pressed_keys",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard._just_pressed_mouse": {
            "name": "_just_pressed_mouse",
            "location": 95,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard._pressed_keys": {
            "name": "_pressed_keys",
            "location": 103,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/controllers/skill_check_controller.py": {
        "DifficultyRating.success_probability": {
            "name": "success_probability",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckController.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "int",
                    "float"
                ],
                "failure": [
                    "int",
                    "float"
                ],
                "rating": [
                    "int",
                    "float"
                ]
            }
        },
        "SkillCheckController.draw": {
            "name": "draw",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckController.update": {
            "name": "update",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckController.set_player_data": {
            "name": "set_player_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "list[]"
                ]
            }
        },
        "SkillCheck.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "int",
                    "float"
                ],
                "failure": [
                    "int",
                    "float"
                ],
                "rating": [
                    "int",
                    "float"
                ]
            }
        },
        "SkillCheck.resolve": {
            "name": "resolve",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "swmp-master/src/controllers/transition_controller.py": {
        "TransitionController.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "bool"
                ],
                "continue_dec": [
                    "bool",
                    "dict[str, str]",
                    "str"
                ],
                "gained_item": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "TransitionController.update": {
            "name": "update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionController.draw": {
            "name": "draw",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionController.set_player_data": {
            "name": "set_player_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "list[]"
                ]
            }
        }
    },
    "swmp-master/src/controllers/turnbased_controller.py": {
        "TurnBasedDungeon.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "map_file": []
            }
        },
        "TurnBasedDungeon._init_map_objects": {
            "name": "_init_map_objects",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedDungeon.update": {
            "name": "update",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "dungeon": [],
                "resolutions": []
            }
        },
        "TurnBasedController.set_player_data": {
            "name": "set_player_data",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TurnBasedController.draw": {
            "name": "draw",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController.update": {
            "name": "update",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController._handle_mouse": {
            "name": "_handle_mouse",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController._init_controls": {
            "name": "_init_controls",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController._abs_mouse_pos": {
            "name": "_abs_mouse_pos",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedController.__del__": {
            "name": "__del__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/controllers/__init__.py": {},
    "swmp-master/src/creatures/enemies.py": {
        "EnemyData.__new__": {
            "name": "__new__",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str"
                ],
                "max_speed": [
                    "int",
                    "float",
                    "str"
                ],
                "max_health": [
                    "int",
                    "float",
                    "str"
                ],
                "hit_rect_width": [
                    "int",
                    "float",
                    "None"
                ],
                "hit_rect_height": [
                    "int",
                    "float",
                    "None"
                ],
                "image_file": [
                    "int",
                    "float",
                    "str"
                ],
                "damage": [
                    "int",
                    "float",
                    "str"
                ],
                "behavior": [
                    "int",
                    "float",
                    "str"
                ],
                "knockback": [
                    "int"
                ]
            }
        },
        "EnemyData.replace": {
            "name": "replace",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Behavior.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "player": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Behavior.determine_state": {
            "name": "determine_state",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Behavior.do_state_behavior": {
            "name": "do_state_behavior",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Behavior._set_state_effects_conditions": {
            "name": "_set_state_effects_conditions",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior_dict": [
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, int]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "player": [
                    "dict[, ]"
                ]
            }
        },
        "Behavior._set_state_condition_values": {
            "name": "_set_state_condition_values",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior_dict": [
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, int]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "player": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Behavior._effect_from_data": {
            "name": "_effect_from_data",
            "location": 145,
            "return": [
                "str",
                "list[int]",
                "dict[str, str]",
                "int",
                "float",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "effect_data": [
                    "list[]"
                ],
                "effect_label": [
                    "dict[, ]",
                    "dict[str, float]",
                    "int",
                    "float"
                ],
                "player": [
                    "str",
                    "list[]",
                    "int"
                ]
            }
        },
        "Behavior._condition_value_from_data": {
            "name": "_condition_value_from_data",
            "location": 178,
            "return": [],
            "arguments": {
                "condition_data": []
            }
        },
        "Enemy.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ],
                "player": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "Enemy.image": {
            "name": "image",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enemy._draw_health_bar": {
            "name": "_draw_health_bar",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "float",
                    "bool"
                ],
                "full_width": [
                    "int",
                    "str"
                ]
            }
        },
        "Enemy.update": {
            "name": "update",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enemy._check_class_initialized": {
            "name": "_check_class_initialized",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enemy._avoid_mobs": {
            "name": "_avoid_mobs",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enemy.update_acc": {
            "name": "update_acc",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enemy._target_close": {
            "name": "_target_close",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "target_dist": []
            }
        },
        "Enemy._health_bar_color": {
            "name": "_health_bar_color",
            "location": 247,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/creatures/humanoids.py": {
        "collide_hit_rect_with_rect": {
            "name": "collide_hit_rect_with_rect",
            "location": 282,
            "return": [],
            "arguments": {
                "humanoid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "sprite": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Backpack.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backpack.is_full": {
            "name": "is_full",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backpack.add_mod": {
            "name": "add_mod",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Backpack._first_empty_slot": {
            "name": "_first_empty_slot",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backpack.remove_mod": {
            "name": "remove_mod",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "int",
                    "list[]",
                    "list[int]"
                ]
            }
        },
        "Backpack.slot_occupied": {
            "name": "slot_occupied",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "list[]",
                    "list[str]",
                    "None",
                    "bool",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "Backpack.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Backpack.__len__": {
            "name": "__len__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inventory.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inventory.attempt_pickup": {
            "name": "attempt_pickup",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Inventory.unequip": {
            "name": "unequip",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "bool"
                ]
            }
        },
        "Inventory.equip": {
            "name": "equip",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_mod": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Status.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_health": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Status.increment_health": {
            "name": "increment_health",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Status.health": {
            "name": "health",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.max_health": {
            "name": "max_health",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.damaged": {
            "name": "damaged",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.is_dead": {
            "name": "is_dead",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humanoid.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hit_rect": [
                    "dict[str, typing.Any]"
                ],
                "pos": [
                    "str",
                    "None"
                ],
                "max_health": [
                    "int",
                    "str"
                ]
            }
        },
        "Humanoid.rect": {
            "name": "rect",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Humanoid.image": {
            "name": "image",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humanoid._use_ability_at": {
            "name": "_use_ability_at",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "Humanoid.ability_caller": {
            "name": "ability_caller",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Humanoid.update": {
            "name": "update",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humanoid.data": {
            "name": "data",
            "location": 188,
            "return": [
                "HumanoidData"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Motion.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humanoid": [
                    "int",
                    "float"
                ],
                "timer": [
                    "int",
                    "float"
                ],
                "walls": [
                    "int",
                    "float"
                ],
                "hit_rect": [
                    "int",
                    "float"
                ]
            }
        },
        "Motion.direction": {
            "name": "direction",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motion.rect": {
            "name": "rect",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motion.pos": {
            "name": "pos",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Motion.update": {
            "name": "update",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion._update_trajectory": {
            "name": "_update_trajectory",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion._collide_with_walls": {
            "name": "_collide_with_walls",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion.stop_x": {
            "name": "stop_x",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion.stop_y": {
            "name": "stop_y",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion.stop": {
            "name": "stop",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Motion._collide_walls_in_direction": {
            "name": "_collide_walls_in_direction",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "EnergySource.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_energy": [
                    "int",
                    "None"
                ],
                "recharge_rate": [
                    "int",
                    "float"
                ]
            }
        },
        "EnergySource.fraction_remaining": {
            "name": "fraction_remaining",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySource.energy_available": {
            "name": "energy_available",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySource.max_energy": {
            "name": "max_energy",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySource.increment_energy": {
            "name": "increment_energy",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "EnergySource.expend_energy": {
            "name": "expend_energy",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "EnergySource.passive_recharge": {
            "name": "passive_recharge",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "str",
                    "int"
                ]
            }
        },
        "Humanoid.ability_caller.called_ability": {
            "name": "called_ability",
            "location": 175,
            "return": [],
            "arguments": {}
        }
    },
    "swmp-master/src/creatures/party.py": {
        "example_party": {
            "name": "example_party",
            "location": 52,
            "return": [
                "Party"
            ],
            "arguments": {}
        },
        "Party.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Party.prepare_for_combat": {
            "name": "prepare_for_combat",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Party.add_member": {
            "name": "add_member",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Party.remove_member": {
            "name": "remove_member",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Party.active_member": {
            "name": "active_member",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Party.member_is_active": {
            "name": "member_is_active",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "float",
                    "Exception",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "Party.next_member": {
            "name": "next_member",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Party.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Party.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "Party.__delitem__": {
            "name": "__delitem__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "Party.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/creatures/party_member.py": {
        "PartyMember.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool"
                ],
                "image": [
                    "bool",
                    "dict[, ]"
                ],
                "speed": [
                    "int",
                    "bytes",
                    "str",
                    "list[]"
                ]
            }
        },
        "PartyMember.prepare_combat": {
            "name": "prepare_combat",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartyMember.rect": {
            "name": "rect",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartyMember.image": {
            "name": "image",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartyMember.can_reach": {
            "name": "can_reach",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "swmp-master/src/creatures/players.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "Player.move_towards_mouse": {
            "name": "move_towards_mouse",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.image": {
            "name": "image",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.translate_up": {
            "name": "translate_up",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.translate_down": {
            "name": "translate_down",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.translate_right": {
            "name": "translate_right",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.translate_left": {
            "name": "translate_left",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player._step_forward": {
            "name": "_step_forward",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.update": {
            "name": "update",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.set_mouse_pos": {
            "name": "set_mouse_pos",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "float"
                ]
            }
        },
        "Player._distance_to_mouse": {
            "name": "_distance_to_mouse",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player._rotate_towards_cursor": {
            "name": "_rotate_towards_cursor",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/creatures/__init__.py": {},
    "swmp-master/src/data/constructors.py": {
        "build_map_object": {
            "name": "build_map_object",
            "location": 14,
            "return": [
                "Enemy",
                "ItemFromData",
                "Zone",
                "Obstacle"
            ],
            "arguments": {
                "label": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "pos": [
                    "None",
                    "str",
                    "typing.Callable[[], str]",
                    "int",
                    "list[T]",
                    "float",
                    "dict[, ]"
                ],
                "player": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "dimensions": [
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        }
    },
    "swmp-master/src/data/input_output.py": {
        "load_item_data_kwargs": {
            "name": "load_item_data_kwargs",
            "location": 31,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_mod_data_kwargs": {
            "name": "load_mod_data_kwargs",
            "location": 37,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_ability_data_kwargs": {
            "name": "load_ability_data_kwargs",
            "location": 43,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_projectile_data_kwargs": {
            "name": "load_projectile_data_kwargs",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_npc_data_kwargs": {
            "name": "load_npc_data_kwargs",
            "location": 56,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_quest_data": {
            "name": "load_quest_data",
            "location": 62,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_npc_type": {
            "name": "is_npc_type",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_item_type": {
            "name": "is_item_type",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "image_filenames": {
            "name": "image_filenames",
            "location": 79,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "sound_filenames": {
            "name": "sound_filenames",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_mod_image_filenames": {
            "name": "_mod_image_filenames",
            "location": 93,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "_item_image_filenames": {
            "name": "_item_image_filenames",
            "location": 108,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "_ability_sound_filenames": {
            "name": "_ability_sound_filenames",
            "location": 115,
            "return": [
                "set[typing.Union[str,dict[str, dict[str, str]]]]"
            ],
            "arguments": {}
        },
        "_projectile_image_filenames": {
            "name": "_projectile_image_filenames",
            "location": 125,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "_npc_image_filenames": {
            "name": "_npc_image_filenames",
            "location": 132,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "_npc_sound_filenames": {
            "name": "_npc_sound_filenames",
            "location": 136,
            "return": [
                "set[]"
            ],
            "arguments": {}
        }
    },
    "swmp-master/src/data/__init__.py": {},
    "swmp-master/src/quests/quest.py": {
        "Quest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quest_data": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Quest.update_and_draw": {
            "name": "update_and_draw",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quest._get_scene": {
            "name": "_get_scene",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Quest._make_quest_graph": {
            "name": "_make_quest_graph",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quest_data": [
                    "dict[, ]"
                ]
            }
        },
        "Quest._add_edges_to_graph": {
            "name": "_add_edges_to_graph",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quest_data": [
                    "bytes"
                ],
                "label_scene_map": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Quest._set_current_scene": {
            "name": "_set_current_scene",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "bool",
                    "float"
                ]
            }
        },
        "Quest._resolution_to_next_scene_map": {
            "name": "_resolution_to_next_scene_map",
            "location": 75,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "current_scene": [
                    "str",
                    "typing.Iterable[int]"
                ],
                "resolutions": [
                    "float",
                    "str",
                    "int",
                    "tuple[]",
                    "list[int]"
                ]
            }
        },
        "Quest._resolved_resolution": {
            "name": "_resolved_resolution",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/resolutions.py": {
        "_add_sprites_of_label": {
            "name": "_add_sprites_of_label",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "res_data": [
                    "str"
                ],
                "group": []
            }
        },
        "resolution_from_data": {
            "name": "resolution_from_data",
            "location": 178,
            "return": [
                "typing.Callable[typing.Any, bool]"
            ],
            "arguments": {
                "res_data": []
            }
        },
        "ResolutionType.arg_labels": {
            "name": "arg_labels",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResolutionType.constructor": {
            "name": "constructor",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResolutionModifiers.has_value": {
            "name": "has_value",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[enum.Enum]"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "set[enum.Enum]"
                ]
            }
        },
        "Resolution.is_resolved": {
            "name": "is_resolved",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolution.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "typing.Type",
                    "int",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int,str]]]",
                    "typing.IO"
                ]
            }
        },
        "RequiresTeleport.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_resolution": [
                    "int"
                ]
            }
        },
        "RequiresTeleport.is_resolved": {
            "name": "is_resolved",
            "location": 60,
            "return": [
                "int",
                "float",
                "list[]",
                "list[typing.Callable[[], bool]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiresTeleport.can_resolve": {
            "name": "can_resolve",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequiresTeleport.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "RequiresTeleport.toggle_teleport": {
            "name": "toggle_teleport",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KillGroup.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_label": [
                    "bytes",
                    "str",
                    "typing.IO",
                    "int",
                    "typing.ByteString"
                ]
            }
        },
        "KillGroup.is_resolved": {
            "name": "is_resolved",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KillGroup.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "int",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "typing.Sequence[T]"
                ]
            }
        },
        "EnterZone.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone_label": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "bytes"
                ],
                "entering_label": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "EnterZone.is_resolved": {
            "name": "is_resolved",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnterZone.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "str"
                ]
            }
        },
        "ConditionSatisfied.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tested_label": [
                    "int",
                    "str",
                    "typing.Type",
                    "float",
                    "typing.Sequence[str]"
                ],
                "condition_data": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "ConditionSatisfied.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "int",
                    "typing.Type",
                    "set[]"
                ]
            }
        },
        "ConditionSatisfied.is_resolved": {
            "name": "is_resolved",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MakeDecision.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "int",
                    "str"
                ]
            }
        },
        "MakeDecision.choose": {
            "name": "choose",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakeDecision.is_resolved": {
            "name": "is_resolved",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MakeDecision.load_sprite_data": {
            "name": "load_sprite_data",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite_categories": [
                    "typing.Type",
                    "int",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int,str]]]",
                    "typing.IO"
                ]
            }
        },
        "MakeDecision.__str__": {
            "name": "__str__",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/__init__.py": {},
    "swmp-master/src/quests/scenes/builder.py": {
        "make_scene": {
            "name": "make_scene",
            "location": 39,
            "return": [],
            "arguments": {
                "scene_data": []
            }
        },
        "next_scene_labels": {
            "name": "next_scene_labels",
            "location": 46,
            "return": [
                "list[typing.Union[str,int,list[]]]",
                "list[dict[, ]]"
            ],
            "arguments": {
                "scene_data": [
                    "list[dict[, ]]"
                ]
            }
        },
        "SceneType.arg_labels": {
            "name": "arg_labels",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SceneType.scene_constructor": {
            "name": "scene_constructor",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/decisions.py": {
        "DecisionScene.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "decision_data": [
                    "list[]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "DecisionScene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 15,
            "return": [
                "tuple[typing.Union[DecisionController,list[MakeDecision]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/dungeons.py": {
        "DungeonScene.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map_file": [
                    "str",
                    "bool",
                    "None"
                ],
                "resolution_datas": [
                    "list[dict[, ]]",
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DungeonScene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 14,
            "return": [
                "tuple[typing.Union[DungeonController,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/interface.py": {
        "Scene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/skill_checks.py": {
        "SkillCheckScene.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success_data": [
                    "str",
                    "bytes"
                ],
                "failure_data": [
                    "str",
                    "bytes"
                ],
                "difficulty": [
                    "dict[, ]",
                    "None",
                    "int"
                ]
            }
        },
        "SkillCheckScene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 16,
            "return": [
                "tuple[typing.Union[SkillCheckController,list[MakeDecision]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/transitions.py": {
        "TransitionScene.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "gained_item_label": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "TransitionScene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 13,
            "return": [
                "tuple[typing.Union[TransitionController,list[MakeDecision]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/turnbased.py": {
        "TurnBasedScene.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map_file": [
                    "str",
                    "bool",
                    "None"
                ],
                "resolution_datas": [
                    "list[dict[, ]]",
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TurnBasedScene.make_controller_and_resolutions": {
            "name": "make_controller_and_resolutions",
            "location": 14,
            "return": [
                "tuple[typing.Union[TurnBasedController,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/quests/scenes/__init__.py": {},
    "swmp-master/src/test/pygame_mock.py": {
        "initialize_pygame": {
            "name": "initialize_pygame",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initialize_everything": {
            "name": "initialize_everything",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "None",
                    "str",
                    "set[]",
                    "bool"
                ],
                "timer": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "set[]"
                ]
            }
        },
        "Key.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_keys": [
                    "int"
                ]
            }
        },
        "Key.get_pressed": {
            "name": "get_pressed",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pygame.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTimer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTimer.current_time": {
            "name": "current_time",
            "location": 36,
            "return": [
                "int",
                "list[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_time": []
            }
        },
        "MockTimer.dt": {
            "name": "dt",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTimer.reset": {
            "name": "reset",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/testing_utilities.py": {
        "make_player": {
            "name": "make_player",
            "location": 16,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {}
        },
        "make_zombie": {
            "name": "make_zombie",
            "location": 22,
            "return": [],
            "arguments": {
                "player": [
                    "None",
                    "int"
                ]
            }
        },
        "make_item": {
            "name": "make_item",
            "location": 30,
            "return": [],
            "arguments": {
                "label": [
                    "str",
                    "tuple[]",
                    "bool",
                    "dict[str, list[typing.Any]]",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "make_dungeon_controller": {
            "name": "make_dungeon_controller",
            "location": 35,
            "return": [
                "DungeonController"
            ],
            "arguments": {}
        },
        "make_turnbased_controller": {
            "name": "make_turnbased_controller",
            "location": 43,
            "return": [
                "TurnBasedController"
            ],
            "arguments": {}
        }
    },
    "swmp-master/src/test/test_abilities.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbilitiesTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_fire_projectile_cannot_shoot_at_first": {
            "name": "test_fire_projectile_cannot_shoot_at_first",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_fireprojectile_use_instantiates_bullet_and_flash": {
            "name": "test_fireprojectile_use_instantiates_bullet_and_flash",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_fireprojectile_use_ignores_can_use": {
            "name": "test_fireprojectile_use_ignores_can_use",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_fireprojectile_cannot_use_after_firing": {
            "name": "test_fireprojectile_cannot_use_after_firing",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_player_shoot_kickback": {
            "name": "test_player_shoot_kickback",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_fire_many_bullets": {
            "name": "test_fire_many_bullets",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_heal_player_not_damaged": {
            "name": "test_heal_player_not_damaged",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_heal_player_damaged_to_full": {
            "name": "test_heal_player_damaged_to_full",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_heal_player_damaged_correct_amount": {
            "name": "test_heal_player_damaged_correct_amount",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_regenerate_player_energy_correct_amount": {
            "name": "test_regenerate_player_energy_correct_amount",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilitiesTest.test_ability_data_equality": {
            "name": "test_ability_data_equality",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_a_initializations.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_initialization_tests": {
            "name": "_initialization_tests",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_assert_runtime_exception_raised": {
            "name": "_assert_runtime_exception_raised",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tested_fun": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, int]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "InitsTest.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitsTest.test_pass": {
            "name": "test_pass",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_behavior.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HumanoidsTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_behavior_load_from_data_correct_state_conditions": {
            "name": "test_behavior_load_from_data_correct_state_conditions",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_behavior_load_from_data_correct_effects": {
            "name": "test_behavior_load_from_data_correct_effects",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_enemy_construction_with_behavior": {
            "name": "test_enemy_construction_with_behavior",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_turret_behavior": {
            "name": "test_turret_behavior",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_constructors.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConstructorTest.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstructorTest.test_build_obstacle": {
            "name": "test_build_obstacle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstructorTest.test_build_zone": {
            "name": "test_build_zone",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_controller.py": {
        "KeyboardTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.set_a": {
            "name": "set_a",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ]
            }
        },
        "KeyboardTest.set_b": {
            "name": "set_b",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "float",
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "KeyboardTest.set_c": {
            "name": "set_c",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "typing.Counter",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "KeyboardTest.set_d": {
            "name": "set_d",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "KeyboardTest.set_e": {
            "name": "set_e",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "KeyboardTest.test_bind": {
            "name": "test_bind",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_bind_down": {
            "name": "test_bind_down",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_mouse": {
            "name": "test_mouse",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_multiple_press": {
            "name": "test_multiple_press",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_only_handle": {
            "name": "test_only_handle",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_decision_controller.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DecisionControllerTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionControllerTest.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionControllerTest.test_set_option_0": {
            "name": "test_set_option_0",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "bool"
                ]
            }
        }
    },
    "swmp-master/src/test/test_dungeon_controller.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DungeonControllerTest.test_health_pack_in_backpack_does_not_prevent_equip": {
            "name": "test_health_pack_in_backpack_does_not_prevent_equip",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonControllerTest.test_items_do_not_move_in_backpack_after_equip": {
            "name": "test_items_do_not_move_in_backpack_after_equip",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonControllerTest.test_equip_nothing_from_backpack": {
            "name": "test_equip_nothing_from_backpack",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonControllerTest.test_set_player_data": {
            "name": "test_set_player_data",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonControllerTest.test_unequip": {
            "name": "test_unequip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_humanoid.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_dist": {
            "name": "_dist",
            "location": 23,
            "return": [],
            "arguments": {
                "pos_0": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "pos_1": [
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HumanoidsTest.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_groups_immutable_container": {
            "name": "test_groups_immutable_container",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_humanoid_increment_health": {
            "name": "test_humanoid_increment_health",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_player_move": {
            "name": "test_player_move",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_player_turn": {
            "name": "test_player_turn",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_player_move_to_mouse": {
            "name": "test_player_move_to_mouse",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_mouse_too_close": {
            "name": "test_mouse_too_close",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_player_stop": {
            "name": "test_player_stop",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_mob_move_to_player": {
            "name": "test_mob_move_to_player",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_mob_damage_and_death": {
            "name": "test_mob_damage_and_death",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_pickup_stackable_adds_to_active_mods": {
            "name": "test_pickup_stackable_adds_to_active_mods",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_use_ability_at_empty_slot_no_effect": {
            "name": "test_use_ability_at_empty_slot_no_effect",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_collide_hit_rect_with_rect": {
            "name": "test_collide_hit_rect_with_rect",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_x_wall_collisions": {
            "name": "test_x_wall_collisions",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_y_wall_collisions": {
            "name": "test_y_wall_collisions",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_hit_rect_matches_rect": {
            "name": "test_hit_rect_matches_rect",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumanoidsTest.test_player_move_to_mouse.normalize": {
            "name": "normalize",
            "location": 116,
            "return": [
                "tuple[float]",
                "tuple[]"
            ],
            "arguments": {
                "pos": []
            }
        }
    },
    "swmp-master/src/test/test_input_output.py": {
        "InputOutputTest.test_load_projectile_data": {
            "name": "test_load_projectile_data",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_projectile_bad_input": {
            "name": "test_load_projectile_bad_input",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_regeneration_ability_data": {
            "name": "test_load_regeneration_ability_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_ability_data_bad_name": {
            "name": "test_load_ability_data_bad_name",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_projectile_ability": {
            "name": "test_load_projectile_ability",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_typical_mod": {
            "name": "test_load_typical_mod",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputOutputTest.test_load_typical_item": {
            "name": "test_load_typical_item",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_items.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ModTest.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.testmake_item_in_groups": {
            "name": "testmake_item_in_groups",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_backpack_full": {
            "name": "test_backpack_full",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_pickup_healthpacks": {
            "name": "test_pickup_healthpacks",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_health_pack_not_used_full_health": {
            "name": "test_health_pack_not_used_full_health",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_health_pack_heals_back_to_full": {
            "name": "test_health_pack_heals_back_to_full",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest._player_with_ready_healthpack": {
            "name": "_player_with_ready_healthpack",
            "location": 120,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_add_weapons": {
            "name": "test_add_weapons",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_mod_stacking_in_active_mods": {
            "name": "test_mod_stacking_in_active_mods",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_mod_stacking_in_backpack": {
            "name": "test_mod_stacking_in_backpack",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_pickup_several_items": {
            "name": "test_pickup_several_items",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_creation_of_usable_items_from_data": {
            "name": "test_creation_of_usable_items_from_data",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_keyboard.py": {
        "KeyboardTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.set_a": {
            "name": "set_a",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ]
            }
        },
        "KeyboardTest.set_b": {
            "name": "set_b",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "float",
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "KeyboardTest.set_c": {
            "name": "set_c",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "typing.Counter",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "KeyboardTest.set_d": {
            "name": "set_d",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "KeyboardTest.set_e": {
            "name": "set_e",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "KeyboardTest.test_bind": {
            "name": "test_bind",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_bind_down": {
            "name": "test_bind_down",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_mouse": {
            "name": "test_mouse",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_multiple_press": {
            "name": "test_multiple_press",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardTest.test_only_handle": {
            "name": "test_only_handle",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_lasers.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LaserTest.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest.test_player_fire_laser_available_after_cooldown_time": {
            "name": "test_player_fire_laser_available_after_cooldown_time",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest.test_player_fires_laser_makes_projectile": {
            "name": "test_player_fires_laser_makes_projectile",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest.test_player_fires_laser_expends_energy": {
            "name": "test_player_fires_laser_expends_energy",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest.test_player_cannot_fire_laser_with_too_low_energy": {
            "name": "test_player_cannot_fire_laser_with_too_low_energy",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest._player_with_ready_laser": {
            "name": "_player_with_ready_laser",
            "location": 78,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_mods.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ModTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_item_object_bob_motion": {
            "name": "test_item_object_bob_motion",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTest.test_mod_str_output": {
            "name": "test_mod_str_output",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_party.py": {
        "TestParty.test_create_party": {
            "name": "test_create_party",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParty.test_party_speed": {
            "name": "test_party_speed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_projectiles.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProjectilesTest.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_projectile_moves_in_direction": {
            "name": "test_projectile_moves_in_direction",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_projectile_dies_after_lifetime_exceeded": {
            "name": "test_projectile_dies_after_lifetime_exceeded",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_projectile_with_drops_on_kill_instantiates_object": {
            "name": "test_projectile_with_drops_on_kill_instantiates_object",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_fancy_projectile_rotating_image_changes_width": {
            "name": "test_fancy_projectile_rotating_image_changes_width",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_fancy_projectile_angled_image_changes_angle": {
            "name": "test_fancy_projectile_angled_image_changes_angle",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_projectile_factory_build": {
            "name": "test_projectile_factory_build",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectilesTest.test_projectile_data_eq": {
            "name": "test_projectile_data_eq",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_quest.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QuestTest.test_init_simple_quest": {
            "name": "test_init_simple_quest",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestTest.test_init_no_root_error": {
            "name": "test_init_no_root_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_resolutions.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResolutionsTest.test_kill_group_starts_resolved": {
            "name": "test_kill_group_starts_resolved",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_kill_group_resolved_after_death": {
            "name": "test_kill_group_resolved_after_death",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_enter_zone_resolved_after_collision": {
            "name": "test_enter_zone_resolved_after_collision",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_condition_satisfied_is_resolved": {
            "name": "test_condition_satisfied_is_resolved",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_condition_satisfied_too_many_labels_error": {
            "name": "test_condition_satisfied_too_many_labels_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_make_decision_is_resolved_after_choice": {
            "name": "test_make_decision_is_resolved_after_choice",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_make_decision_str": {
            "name": "test_make_decision_str",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionsTest.test_make_decision_null_load_data": {
            "name": "test_make_decision_null_load_data",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_skill_check_controller.py": {
        "SkillCheckControllerTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckControllerTest.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckControllerTest.test_skill_check_controller_starts_unresolved": {
            "name": "test_skill_check_controller_starts_unresolved",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckControllerTest.test_skill_check_controller_unresolved_after_update": {
            "name": "test_skill_check_controller_unresolved_after_update",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckControllerTest.test_skill_check_controller_one_resolves_after_space": {
            "name": "test_skill_check_controller_one_resolves_after_space",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkillCheckControllerTest.test_skill_check_controller_impossible_never_success": {
            "name": "test_skill_check_controller_impossible_never_success",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "SkillCheckControllerTest.test_skill_check_scene_typical_behavior": {
            "name": "test_skill_check_scene_typical_behavior",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_sounds.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SoundTest.test_load_sounds": {
            "name": "test_load_sounds",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_transitions.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransitionControllerTest.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionControllerTest.test_set_player_adds_gained_item": {
            "name": "test_set_player_adds_gained_item",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionControllerTest.test_set_player_gained_item_removed_from_groups_even_if_not_picked_up": {
            "name": "test_set_player_gained_item_removed_from_groups_even_if_not_picked_up",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_turnbased_controller.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TurnBasedControllerTest.test_create_and_draw": {
            "name": "test_create_and_draw",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedControllerTest.test_collide_line": {
            "name": "test_collide_line",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedControllerTest.test_try_move_member": {
            "name": "test_try_move_member",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_turnbased_scene.py": {
        "TestTurnBasedScene.test_create_scene": {
            "name": "test_create_scene",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_view.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ViewTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTest.test_click_mod": {
            "name": "test_click_mod",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTest.test_click_item": {
            "name": "test_click_item",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTest.test_click_twice_reset": {
            "name": "test_click_twice_reset",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTest.test_click_backpack_when_hidden": {
            "name": "test_click_backpack_when_hidden",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/test_weapons.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WeaponsTest.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeaponsTest.test_fire_projectile_distance_independent_of_count": {
            "name": "test_fire_projectile_distance_independent_of_count",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/test/__init__.py": {},
    "swmp-master/src/view/camera.py": {
        "Camera.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "typing.Iterator",
                    "str"
                ],
                "height": [
                    "int",
                    "typing.Iterator",
                    "str"
                ]
            }
        },
        "Camera.get_shifted_rect": {
            "name": "get_shifted_rect",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "sprite": [
                    "str",
                    "bool"
                ]
            }
        },
        "Camera.shift_by_topleft": {
            "name": "shift_by_topleft",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "rect": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Camera.update": {
            "name": "update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "typing.Callable[T, bool]",
                    "str"
                ]
            }
        }
    },
    "swmp-master/src/view/decision_view.py": {
        "_break_string_into_lines": {
            "name": "_break_string_into_lines",
            "location": 10,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "max_chars_per_line": [
                    "int"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "DecisionView.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "bool",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "dict[int, str]",
                    "str"
                ],
                "options": [
                    "str"
                ],
                "enumerate_options": [
                    "bool"
                ]
            }
        },
        "DecisionView.draw": {
            "name": "draw",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/draw_effects.py": {},
    "swmp-master/src/view/draw_utils.py": {
        "draw_text": {
            "name": "draw_text",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "screen": [
                    "str",
                    "int",
                    "bytes"
                ],
                "text": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "None",
                    "float"
                ],
                "font_name": [
                    "str",
                    "tuple[typing.Union[str,list[str],list[str]]]",
                    "bool"
                ],
                "size": [
                    "str",
                    "tuple[typing.Union[str,list[str],list[str]]]",
                    "bool"
                ],
                "color": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "None",
                    "float"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "align": [
                    "typing.Text"
                ]
            }
        }
    },
    "swmp-master/src/view/dungeon_view.py": {
        "DungeonView.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.set_camera_range": {
            "name": "set_camera_range",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "DungeonView.draw": {
            "name": "draw",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "tile_map": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "DungeonView._draw_sprite": {
            "name": "_draw_sprite",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite": [
                    "int"
                ]
            }
        },
        "DungeonView._draw_teleport_text": {
            "name": "_draw_teleport_text",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView._rect_on_screen": {
            "name": "_rect_on_screen",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "rect": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "DungeonView._draw_debug_rects": {
            "name": "_draw_debug_rects",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.render_fog": {
            "name": "render_fog",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "DungeonView.toggle_debug": {
            "name": "toggle_debug",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.toggle_night": {
            "name": "toggle_night",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.try_click_hud": {
            "name": "try_click_hud",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DungeonView._try_click_mod": {
            "name": "_try_click_mod",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DungeonView._try_click_item": {
            "name": "_try_click_item",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "float",
                    "typing.Iterable[typing.Iterable[T]]"
                ]
            }
        },
        "DungeonView.clicked_rect_index": {
            "name": "clicked_rect_index",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rects": [
                    "str"
                ],
                "pos": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "DungeonView.hud_collide_point": {
            "name": "hud_collide_point",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DungeonView.selected_item": {
            "name": "selected_item",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.selected_mod": {
            "name": "selected_mod",
            "location": 153,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DungeonView.set_selected_item": {
            "name": "set_selected_item",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "dict[int, dict[int, typing.Any]]",
                    "typing.MutableMapping"
                ]
            }
        },
        "DungeonView.toggle_hide_backpack": {
            "name": "toggle_hide_backpack",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/hud.py": {
        "HUD.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD.draw": {
            "name": "draw",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HUD.toggle_hide_backpack": {
            "name": "toggle_hide_backpack",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD.collide_point": {
            "name": "collide_point",
            "location": 54,
            "return": [
                "bool",
                "int",
                "list[list[int]]",
                "list[typing.Type]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "HUD._draw_hud_base": {
            "name": "_draw_hud_base",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD._draw_backpack_base": {
            "name": "_draw_backpack_base",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD._draw_bar": {
            "name": "_draw_bar",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "bar_type": [
                    "str"
                ]
            }
        },
        "HUD._draw_mods": {
            "name": "_draw_mods",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HUD._draw_cooldown": {
            "name": "_draw_cooldown",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "cooldown_fraction": [
                    "int"
                ],
                "image": []
            }
        },
        "HUD._draw_mod_ammo": {
            "name": "_draw_mod_ammo",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img_rect": [
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "int",
                    "None",
                    "tuple[]"
                ],
                "mod": [
                    "str",
                    "typing.OrderedDict"
                ],
                "title_font": [
                    "str",
                    "float",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "HUD._draw_backpack": {
            "name": "_draw_backpack",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "HUD._generate_mod_rects": {
            "name": "_generate_mod_rects",
            "location": 183,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD._generate_backpack_rects": {
            "name": "_generate_backpack_rects",
            "location": 197,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HUD._generate_backpack_base": {
            "name": "_generate_backpack_base",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/images.py": {
        "initialize_images": {
            "name": "initialize_images",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_image": {
            "name": "get_image",
            "location": 59,
            "return": [],
            "arguments": {
                "image_name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "get_font": {
            "name": "get_font",
            "location": 65,
            "return": [],
            "arguments": {
                "font_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_muzzle_flash": {
            "name": "get_muzzle_flash",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "party_member_image": {
            "name": "party_member_image",
            "location": 78,
            "return": [],
            "arguments": {
                "member_number": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Images.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/initiative_tracker.py": {
        "InitiativeTracker.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "party": []
            }
        },
        "InitiativeTracker.draw": {
            "name": "draw",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitiativeTracker.collide_point": {
            "name": "collide_point",
            "location": 37,
            "return": [
                "bool",
                "int",
                "list[list[int]]",
                "list[typing.Type]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "InitiativeTracker._draw_tracker_base": {
            "name": "_draw_tracker_base",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitiativeTracker._draw_images": {
            "name": "_draw_images",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitiativeTracker._generate_character_rects": {
            "name": "_generate_character_rects",
            "location": 71,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/screen.py": {
        "ScreenAccess.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenAccess.initialize": {
            "name": "initialize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "typing.Callable[..., T]",
                    "str",
                    "dict[, ]"
                ],
                "screen": [
                    "None",
                    "bytes",
                    "typing.Iterable[]"
                ]
            }
        },
        "ScreenAccess.screen": {
            "name": "screen",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/sounds.py": {
        "initialize_sounds": {
            "name": "initialize_sounds",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "play": {
            "name": "play",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "sound_name": [
                    "str",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "player_hit_sound": {
            "name": "player_hit_sound",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mob_moan_sound": {
            "name": "mob_moan_sound",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SoundEffects.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swmp-master/src/view/turnbased_view.py": {
        "TurnBasedView.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "party": [
                    "int",
                    "float"
                ]
            }
        },
        "TurnBasedView.set_camera_range": {
            "name": "set_camera_range",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "TurnBasedView.draw": {
            "name": "draw",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tile_map": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "TurnBasedView._draw_sprite": {
            "name": "_draw_sprite",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sprite": [
                    "int"
                ]
            }
        },
        "TurnBasedView._rect_on_screen": {
            "name": "_rect_on_screen",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "rect": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "TurnBasedView._highlight_rect": {
            "name": "_highlight_rect",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "str"
                ],
                "red": [
                    "bool"
                ]
            }
        },
        "TurnBasedView._draw_debug_rects": {
            "name": "_draw_debug_rects",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedView._draw_move_options": {
            "name": "_draw_move_options",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedView._move_option_rects": {
            "name": "_move_option_rects",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedView._path_is_clear": {
            "name": "_path_is_clear",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rect1": [
                    "str",
                    "bool"
                ],
                "rect2": [
                    "str",
                    "bool"
                ]
            }
        },
        "TurnBasedView._points_between": {
            "name": "_points_between",
            "location": 145,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "rect1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "rect2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TurnBasedView.toggle_debug": {
            "name": "toggle_debug",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnBasedView._try_move": {
            "name": "_try_move",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str"
                ]
            }
        }
    },
    "swmp-master/src/view/__init__.py": {}
}
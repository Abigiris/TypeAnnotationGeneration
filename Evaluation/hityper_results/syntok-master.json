{
    "syntok-master/setup.py": {},
    "syntok-master/syntok/segmenter.py": {
        "analyze": {
            "name": "analyze",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "document": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "bracket_skip_len": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "document": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "bracket_skip_len": [
                    "None",
                    "float",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 49,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "preprocess_with_offsets": {
            "name": "preprocess_with_offsets",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 84,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [
                    "typing.Iterator",
                    "str",
                    "bytes"
                ],
                "bracket_skip_len": [
                    "None",
                    "typing.Iterator",
                    "str",
                    "bytes"
                ]
            }
        },
        "segment": {
            "name": "segment",
            "location": 96,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tokens": [
                    "list[T]",
                    "typing.Iterator",
                    "list[str]",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ],
                "bracket_skip_len": [
                    "None"
                ]
            }
        },
        "preprocess_with_offsets.finditer": {
            "name": "finditer",
            "location": 72,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {}
        },
        "do": {
            "name": "do",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "document": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "syntok-master/syntok/segmenter_test.py": {
        "TestSegmenter.test_segmenter": {
            "name": "test_segmenter",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_simple": {
            "name": "test_simple",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_empty": {
            "name": "test_empty",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_one_token": {
            "name": "test_one_token",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_tokens": {
            "name": "test_two_tokens",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences": {
            "name": "test_two_sentences",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_exclamations": {
            "name": "test_two_exclamations",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_questions": {
            "name": "test_two_questions",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_parenthesis_in_second": {
            "name": "test_two_sentences_with_parenthesis_in_second",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_parenthesis_in_first": {
            "name": "test_two_sentences_with_parenthesis_in_first",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_quotes_in_second": {
            "name": "test_two_sentences_with_quotes_in_second",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_with_single_quotes": {
            "name": "test_sentence_with_single_quotes",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_quotes_in_first": {
            "name": "test_two_sentences_with_quotes_in_first",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_quotes_in_both": {
            "name": "test_two_sentences_with_quotes_in_both",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_two_sentences_with_quotes_and_prenthesis_in_both": {
            "name": "test_two_sentences_with_quotes_and_prenthesis_in_both",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_simple_abbreviations": {
            "name": "test_sentences_with_simple_abbreviations",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_common_abbreviations": {
            "name": "test_sentences_with_common_abbreviations",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_single_letter_abbreviations": {
            "name": "test_sentences_with_single_letter_abbreviations",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_nasty_abbreviations": {
            "name": "test_sentences_with_nasty_abbreviations",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_special_abbreviations": {
            "name": "test_sentences_with_special_abbreviations",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_nasty_special_abbreviations": {
            "name": "test_sentences_with_nasty_special_abbreviations",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_ending_with_false_positive_month_abbreviation_1": {
            "name": "test_sentences_ending_with_false_positive_month_abbreviation_1",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_ending_with_false_positive_month_abbreviation_2": {
            "name": "test_sentences_ending_with_false_positive_month_abbreviation_2",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_enumerations": {
            "name": "test_sentences_with_enumerations",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_letter_enumerations": {
            "name": "test_sentences_with_letter_enumerations",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentences_with_Roman_enumerations": {
            "name": "test_sentences_with_Roman_enumerations",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_one_word_sentences": {
            "name": "test_one_word_sentences",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_brackets_before_the_terminal": {
            "name": "test_brackets_before_the_terminal",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_marker_after_abbreviation": {
            "name": "test_sentence_marker_after_abbreviation",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_ends_in_abbreviation": {
            "name": "test_sentence_ends_in_abbreviation",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_ends_in_single_letter_and_starts_with_starter_word": {
            "name": "test_sentence_ends_in_single_letter_and_starts_with_starter_word",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_with_dot_following_abbreviation": {
            "name": "test_split_with_dot_following_abbreviation",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_with_complext_abbreviation_pattern": {
            "name": "test_split_with_complext_abbreviation_pattern",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_with_abbreviation_indictated_by_punctuation": {
            "name": "test_sentence_with_abbreviation_indictated_by_punctuation",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_with_abbreviation_with_dot": {
            "name": "test_sentence_with_abbreviation_with_dot",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_with_single_letter_abbreviation": {
            "name": "test_sentence_with_single_letter_abbreviation",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_sentence_with_single_letter_at_end": {
            "name": "test_sentence_with_single_letter_at_end",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_abbreviation_followed_by_large_number": {
            "name": "test_abbreviation_followed_by_large_number",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_abbreviation_no_followed_by_alnum_token": {
            "name": "test_abbreviation_no_followed_by_alnum_token",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_abbreviation_followed_by_parenthesis": {
            "name": "test_abbreviation_followed_by_parenthesis",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_do_not_split_bible_citation": {
            "name": "test_do_not_split_bible_citation",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_self_standing_parenthesis": {
            "name": "test_split_self_standing_parenthesis",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_do_not_split_short_text_inside_parenthesis": {
            "name": "test_do_not_split_short_text_inside_parenthesis",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_do_not_split_short_text_inside_parenthesis3": {
            "name": "test_do_not_split_short_text_inside_parenthesis3",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_do_not_split_short_text_inside_parenthesis4": {
            "name": "test_do_not_split_short_text_inside_parenthesis4",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_long_text_inside_parenthesis": {
            "name": "test_split_long_text_inside_parenthesis",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_long_text_inside_parenthesis2": {
            "name": "test_split_long_text_inside_parenthesis2",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_sentence_with_parenthesis_at_start": {
            "name": "test_split_sentence_with_parenthesis_at_start",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_with_complex_parenthesis_structure": {
            "name": "test_split_with_complex_parenthesis_structure",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_split_with_a_simple_parenthesis_structure": {
            "name": "test_split_with_a_simple_parenthesis_structure",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_no_split_with_simple_inner_bracketed_text": {
            "name": "test_no_split_with_simple_inner_bracketed_text",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_no_split_on_strange_text": {
            "name": "test_no_split_on_strange_text",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_no_split_on_strange_text2": {
            "name": "test_no_split_on_strange_text2",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_no_split_on_strange_text3": {
            "name": "test_no_split_on_strange_text3",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.test_preprocess_with_offsets": {
            "name": "test_preprocess_with_offsets",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocess.test_preprocess": {
            "name": "test_preprocess",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalyze.test_analyze": {
            "name": "test_analyze",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcess.test_process": {
            "name": "test_process",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSegmenter.test_segmenter.make_sentences": {
            "name": "make_sentences",
            "location": 159,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "segmented_tokens": []
            }
        }
    },
    "syntok-master/syntok/tokenizer.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "space_prefix": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ],
                "value": [
                    "int",
                    "str"
                ],
                "offset": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None"
                ]
            }
        },
        "Token.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.value": {
            "name": "value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.spacing": {
            "name": "spacing",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.offset": {
            "name": "offset",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.update": {
            "name": "update",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Tokenizer.join_hyphenated_words_across_linebreaks": {
            "name": "join_hyphenated_words_across_linebreaks",
            "location": 102,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Tokenizer.to_text": {
            "name": "to_text",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "frozenset"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emit_hyphen_or_underscore_sep": [
                    "bool"
                ],
                "replace_not_contraction": [
                    "bool"
                ]
            }
        },
        "Tokenizer.split": {
            "name": "split",
            "location": 131,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 135,
            "return": [
                "typing.Generator[Token]",
                "typing.Generator[]",
                "typing.Generator[list[Token]]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "base_offset": [
                    "int"
                ]
            }
        },
        "Tokenizer._find_start": {
            "name": "_find_start",
            "location": 171,
            "return": [
                "int",
                "list[]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "list[]"
                ],
                "end": [
                    "int"
                ],
                "text": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Tokenizer._find_end": {
            "name": "_find_end",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "text": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ]
            }
        },
        "Tokenizer._split_nonword_prefix": {
            "name": "_split_nonword_prefix",
            "location": 191,
            "return": [
                "typing.Generator[Token]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "mo": [],
                "offset": [
                    "str",
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Tokenizer._split_word": {
            "name": "_split_word",
            "location": 202,
            "return": [
                "typing.Generator[Token]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "int"
                ],
                "word": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Tokenizer._produce_separator_split_token": {
            "name": "_produce_separator_split_token",
            "location": 215,
            "return": [
                "typing.Generator[Token]",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "remainder": [
                    "int",
                    "float"
                ],
                "word": [],
                "mo": [],
                "prefix": [
                    "str",
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Tokenizer._can_emit": {
            "name": "_can_emit",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "syntok-master/syntok/tokenizer_test.py": {
        "s": {
            "name": "s",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [
                    "dict[, ]"
                ]
            }
        },
        "TestTokenizer.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_lines": {
            "name": "test_lines",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_clean_text": {
            "name": "test_clean_text",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_clean_text_Unicode": {
            "name": "test_clean_text_Unicode",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_split_dot": {
            "name": "test_split_dot",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_split_camel_case": {
            "name": "test_split_camel_case",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_hyphens": {
            "name": "test_hyphens",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_apostrophes": {
            "name": "test_apostrophes",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_emit_dash": {
            "name": "test_emit_dash",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_emit_underscore": {
            "name": "test_emit_underscore",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_spacing_prefix": {
            "name": "test_spacing_prefix",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_inner_ellipsis": {
            "name": "test_inner_ellipsis",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_nonword_prefix": {
            "name": "test_nonword_prefix",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_nonword_high_prefix": {
            "name": "test_nonword_high_prefix",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_apostrophe_offset_without_replace_not_contraction": {
            "name": "test_apostrophe_offset_without_replace_not_contraction",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_apostrophe_offset_with_replace_not_contraction": {
            "name": "test_apostrophe_offset_with_replace_not_contraction",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToText.setUp": {
            "name": "setUp",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToText.test_lines": {
            "name": "test_lines",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToText.test_lines_emit_and_do_not_replace": {
            "name": "test_lines_emit_and_do_not_replace",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "syntok-master/syntok/_segmentation_states.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "queue": [],
                "history": []
            }
        },
        "State.collect_history": {
            "name": "collect_history",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [
                "typing.Generator[State]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__next__": {
            "name": "__next__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._stream": {
            "name": "_stream",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State._queue": {
            "name": "_queue",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State._history": {
            "name": "_history",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.at_sentence": {
            "name": "at_sentence",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_a_terminal": {
            "name": "next_is_a_terminal",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_a_potential_abbreviation_marker": {
            "name": "next_is_a_potential_abbreviation_marker",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_a_post_terminal_symbol_part_of_sentence": {
            "name": "next_is_a_post_terminal_symbol_part_of_sentence",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_a_closing_quote": {
            "name": "next_is_a_closing_quote",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_an_opening_bracket": {
            "name": "next_is_an_opening_bracket",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_has_no_spacing": {
            "name": "next_has_no_spacing",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_lowercase": {
            "name": "next_is_lowercase",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_numeric": {
            "name": "next_is_numeric",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_alphanumeric_containing_numeric_char": {
            "name": "next_is_alphanumeric_containing_numeric_char",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_a_large_number": {
            "name": "next_is_a_large_number",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_inner_sentence_punctuation": {
            "name": "next_is_inner_sentence_punctuation",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_month_abbreviation": {
            "name": "next_is_month_abbreviation",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_is_sentence_starter": {
            "name": "next_is_sentence_starter",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.is_empty": {
            "name": "is_empty",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.last": {
            "name": "last",
            "location": 228,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._fetch_next": {
            "name": "_fetch_next",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__find_next_token_after_bracket": {
            "name": "__find_next_token_after_bracket",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__find_token_after_next": {
            "name": "__find_token_after_next",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._skip_bracketed_text": {
            "name": "_skip_bracketed_text",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__find_end_of_bracketed_text": {
            "name": "__find_end_of_bracketed_text",
            "location": 296,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._move": {
            "name": "_move",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._move_and_skip_bracketed_text": {
            "name": "_move_and_skip_bracketed_text",
            "location": 344,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "State._move_and_maybe_extract_terminal": {
            "name": "_move_and_maybe_extract_terminal",
            "location": 354,
            "return": [
                "State",
                "Terminal"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__move_to_next_relevant_word_and_return_token_after_terminal": {
            "name": "__move_to_next_relevant_word_and_return_token_after_terminal",
            "location": 440,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.is_single_letter_or_roman_numeral": {
            "name": "is_single_letter_or_roman_numeral",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": []
            }
        },
        "State.is_single_consonant": {
            "name": "is_single_consonant",
            "location": 484,
            "return": [
                "bool"
            ],
            "arguments": {
                "token_before": []
            }
        },
        "FirstToken.__next__": {
            "name": "__next__",
            "location": 489,
            "return": [
                "Terminal",
                "InnerToken",
                "End"
            ],
            "arguments": {
                "self": []
            }
        },
        "InnerToken.__next__": {
            "name": "__next__",
            "location": 507,
            "return": [
                "InnerToken",
                "End"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.at_sentence": {
            "name": "at_sentence",
            "location": 521,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.__next__": {
            "name": "__next__",
            "location": 524,
            "return": [
                "FirstToken",
                "End"
            ],
            "arguments": {
                "self": []
            }
        },
        "End.at_sentence": {
            "name": "at_sentence",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "End.__next__": {
            "name": "__next__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Begin.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Begin.__next__": {
            "name": "__next__",
            "location": 546,
            "return": [
                "End",
                "FirstToken"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "syntok-master/syntok/__init__.py": {}
}
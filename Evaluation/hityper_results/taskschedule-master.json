{
    "taskschedule-master/setup.py": {},
    "taskschedule-master/__main__.py": {},
    "taskschedule-master/taskschedule/config_parser.py": {
        "ConfigParser.config": {
            "name": "config",
            "location": 14,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/taskschedule/hooks.py": {
        "run_hooks": {
            "name": "run_hooks",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "hook_type": [
                    "str"
                ],
                "data": [
                    "dict[typing.Text, typing.Union[int,typing.Text]]"
                ]
            }
        }
    },
    "taskschedule-master/taskschedule/main.py": {
        "Main.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "Main.check_files": {
            "name": "check_files",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.parse_args": {
            "name": "parse_args",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "list[str]",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "Main.main": {
            "name": "main",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.run": {
            "name": "run",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/taskschedule/notifier.py": {
        "Notifier.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "float"
                ]
            }
        },
        "Notifier.notify": {
            "name": "notify",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        },
        "Notifier.send_notifications": {
            "name": "send_notifications",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/taskschedule/schedule.py": {
        "Schedule.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "float"
                ],
                "scheduled_after": [
                    "int",
                    "float"
                ],
                "scheduled_before": [
                    "int",
                    "float"
                ]
            }
        },
        "Schedule.get_timebox_estimate_count": {
            "name": "get_timebox_estimate_count",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.get_timebox_real_count": {
            "name": "get_timebox_real_count",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.get_active_timeboxed_task": {
            "name": "get_active_timeboxed_task",
            "location": 67,
            "return": [
                "float",
                "int",
                "dict[str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.stop_active_timeboxed_task": {
            "name": "stop_active_timeboxed_task",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.clear_cache": {
            "name": "clear_cache",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.tasks": {
            "name": "tasks",
            "location": 91,
            "return": [
                "ScheduledTaskQuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.get_time_slots": {
            "name": "get_time_slots",
            "location": 97,
            "return": [
                "dict[, dict[, list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.get_max_length": {
            "name": "get_max_length",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Schedule.get_column_offsets": {
            "name": "get_column_offsets",
            "location": 145,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.get_next_task": {
            "name": "get_next_task",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict[, ]"
                ]
            }
        }
    },
    "taskschedule-master/taskschedule/scheduled_task.py": {
        "ScheduledTask.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.has_scheduled_time": {
            "name": "has_scheduled_time",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.scheduled_start_datetime": {
            "name": "scheduled_start_datetime",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.scheduled_end_datetime": {
            "name": "scheduled_end_datetime",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.notified": {
            "name": "notified",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.should_be_active": {
            "name": "should_be_active",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.overdue": {
            "name": "overdue",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTask.as_dict": {
            "name": "as_dict",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/taskschedule/screen.py": {
        "Screen.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [],
                "scheduled_after": [],
                "scheduled_before": [],
                "hide_projects": [
                    "bool"
                ],
                "hide_empty": [
                    "bool"
                ]
            }
        },
        "Screen.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.init_colors": {
            "name": "init_colors",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.get_task_color": {
            "name": "get_task_color",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "task": [],
                "alternate": []
            }
        },
        "Screen.get_maxyx": {
            "name": "get_maxyx",
            "location": 143,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.scroll": {
            "name": "scroll",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "Screen.prerender_footnote": {
            "name": "prerender_footnote",
            "location": 158,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.draw_footnote": {
            "name": "draw_footnote",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.draw": {
            "name": "draw",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Screen.render_timeboxes": {
            "name": "render_timeboxes",
            "location": 287,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "color": []
            }
        },
        "Screen.prerender_headers": {
            "name": "prerender_headers",
            "location": 314,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.prerender_divider": {
            "name": "prerender_divider",
            "location": 352,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "day": [],
                "current_line": []
            }
        },
        "Screen.run_hook": {
            "name": "run_hook",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.prerender_empty_line": {
            "name": "prerender_empty_line",
            "location": 402,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "alternate": [],
                "current_line": [],
                "hour": [],
                "day": []
            }
        },
        "Screen.prerender_task": {
            "name": "prerender_task",
            "location": 426,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "task_num": [],
                "task": [],
                "alternate": [],
                "hour": [],
                "current_line": [],
                "day": []
            }
        },
        "Screen.refresh_buffer": {
            "name": "refresh_buffer",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/taskschedule/taskwarrior.py": {
        "PatchedTaskWarrior.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchedTaskWarrior.filter_tasks": {
            "name": "filter_tasks",
            "location": 17,
            "return": [
                "list[ScheduledTask]"
            ],
            "arguments": {
                "self": [],
                "filter_obj": []
            }
        }
    },
    "taskschedule-master/taskschedule/utils.py": {
        "calculate_datetime": {
            "name": "calculate_datetime",
            "location": 7,
            "return": [],
            "arguments": {
                "date_str": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "taskschedule-master/taskschedule/__init__.py": {},
    "taskschedule-master/tests/conftest.py": {
        "tw": {
            "name": "tw",
            "location": 19,
            "return": [
                "typing.Generator[PatchedTaskWarrior]"
            ],
            "arguments": {}
        },
        "schedule": {
            "name": "schedule",
            "location": 60,
            "return": [
                "typing.Generator[Schedule]"
            ],
            "arguments": {
                "tw": []
            }
        },
        "screen": {
            "name": "screen",
            "location": 97,
            "return": [
                "typing.Generator[Screen]"
            ],
            "arguments": {
                "tw": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "schedule": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "taskschedule-master/tests/test_config_parser.py": {
        "TestConfigParser.test_config_parser": {
            "name": "test_config_parser",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests/test_main.py": {
        "TestMain.test_main_init_creates_backend_and_schedule": {
            "name": "test_main_init_creates_backend_and_schedule",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tw": []
            }
        },
        "TestMain.test_main_command_args": {
            "name": "test_main_command_args",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tw": []
            }
        }
    },
    "taskschedule-master/tests/test_schedule.py": {
        "TestSchedule.test_get_tasks_returns_correct_tasks": {
            "name": "test_get_tasks_returns_correct_tasks",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "str"
                ]
            }
        },
        "TestSchedule.test_clear_cache": {
            "name": "test_clear_cache",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_time_slots_returns_correct_amount_of_days": {
            "name": "test_get_time_slots_returns_correct_amount_of_days",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_time_slots_has_correct_tasks": {
            "name": "test_get_time_slots_has_correct_tasks",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_max_length": {
            "name": "test_get_max_length",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_column_offsets": {
            "name": "test_get_column_offsets",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_next_task_returns_next_task": {
            "name": "test_get_next_task_returns_next_task",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "TestSchedule.test_get_next_task_for_last_task_returns_none": {
            "name": "test_get_next_task_for_last_task_returns_none",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": []
            }
        }
    },
    "taskschedule-master/tests/test_scheduled_task.py": {
        "test_as_dict": {
            "name": "test_as_dict",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "int"
                ]
            }
        },
        "test_has_scheduled_time": {
            "name": "test_has_scheduled_time",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "int"
                ]
            }
        },
        "test_scheduled_start_datetime": {
            "name": "test_scheduled_start_datetime",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "int"
                ]
            }
        },
        "test_scheduled_end_datetime": {
            "name": "test_scheduled_end_datetime",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "str"
                ]
            }
        },
        "test_notified": {
            "name": "test_notified",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "int"
                ]
            }
        },
        "test_should_be_active": {
            "name": "test_should_be_active",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": [
                    "dict[str, typing.Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_overdue": {
            "name": "test_overdue",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tw": []
            }
        }
    },
    "taskschedule-master/tests/test_screen.py": {
        "TestScreen.test_screen_scroll_up_at_top_is_blocked": {
            "name": "test_screen_scroll_up_at_top_is_blocked",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_screen_scroll_down_and_up": {
            "name": "test_screen_scroll_down_and_up",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_prerender_footnote": {
            "name": "test_prerender_footnote",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_prerender_buffer": {
            "name": "test_prerender_buffer",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_predender_divider": {
            "name": "test_predender_divider",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_prerender_empty_line": {
            "name": "test_prerender_empty_line",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "TestScreen.test_prerender_task": {
            "name": "test_prerender_task",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        }
    },
    "taskschedule-master/tests/test_utils.py": {
        "test_calculate_datetime": {
            "name": "test_calculate_datetime",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taskschedule-master/tests/__init__.py": {},
    "taskschedule-master/tests-old/context.py": {},
    "taskschedule-master/tests-old/test_cli.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Debug.test_print_term_info": {
            "name": "test_print_term_info",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_cli_valid_date_does_not_error": {
            "name": "test_cli_valid_date_does_not_error",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_cli_invalid_date_prints_error": {
            "name": "test_cli_invalid_date_prints_error",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_cli_no_args_does_not_error": {
            "name": "test_cli_no_args_does_not_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_cli_help_returns_help_message": {
            "name": "test_cli_help_returns_help_message",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests-old/test_main.py": {
        "CLITest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.create_test_files": {
            "name": "create_test_files",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taskrc": [
                    "bool"
                ],
                "taskdir": [
                    "bool"
                ]
            }
        },
        "CLITest.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_main": {
            "name": "test_main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_main_no_task_dir_exits_with_1": {
            "name": "test_main_no_task_dir_exits_with_1",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLITest.test_main_no_taskrc_exits_with_1": {
            "name": "test_main_no_taskrc_exits_with_1",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests-old/test_missing_data.py": {
        "MissingDataTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.create_schedule": {
            "name": "create_schedule",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.test_no_uda_estimate_type_raises_exception": {
            "name": "test_no_uda_estimate_type_raises_exception",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.test_no_uda_estimate_label_raises_exception": {
            "name": "test_no_uda_estimate_label_raises_exception",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.test_no_task_dir_raises_exception": {
            "name": "test_no_task_dir_raises_exception",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingDataTest.test_no_taskrc_raises_exception": {
            "name": "test_no_taskrc_raises_exception",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests-old/test_schedule.py": {
        "ScheduleTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.tearDown": {
            "name": "tearDown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.test_schedule_can_be_initialized": {
            "name": "test_schedule_can_be_initialized",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.test_get_calculated_date_returns_correct_values": {
            "name": "test_get_calculated_date_returns_correct_values",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.test_get_timeslots_returns_correct_amount_of_days": {
            "name": "test_get_timeslots_returns_correct_amount_of_days",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.test_get_time_slots": {
            "name": "test_get_time_slots",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleTest.test_align_matrix": {
            "name": "test_align_matrix",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests-old/test_screen.py": {
        "ScreenTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenTest.tearDown": {
            "name": "tearDown",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenTest.test_screen_draw_no_tasks_to_display": {
            "name": "test_screen_draw_no_tasks_to_display",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenTest.test_screen_draw": {
            "name": "test_screen_draw",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenTest.test_screen_scroll_up_at_top_is_blocked": {
            "name": "test_screen_scroll_up_at_top_is_blocked",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenTest.test_screen_scroll_down_and_up": {
            "name": "test_screen_scroll_down_and_up",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskschedule-master/tests-old/__init__.py": {}
}
{
    "taskwarrior-syncall-master/taskwarrior_syncall/aggregator.py": {
        "Aggregator.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.__enter__": {
            "name": "__enter__",
            "location": 120,
            "return": [
                "Aggregator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.__exit__": {
            "name": "__exit__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.detect_changes": {
            "name": "detect_changes",
            "location": 127,
            "return": [
                "SideChanges"
            ],
            "arguments": {
                "self": [],
                "helper": [
                    "str",
                    "int"
                ],
                "items": []
            }
        },
        "Aggregator.sync": {
            "name": "sync",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.start": {
            "name": "start",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.finish": {
            "name": "finish",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.inserter_to": {
            "name": "inserter_to",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ],
                "helper": [
                    "str",
                    "int"
                ]
            }
        },
        "Aggregator.updater_to": {
            "name": "updater_to",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "helper": [
                    "str",
                    "int",
                    "dict[str, typing.Union[int,typing.Any,bool]]"
                ]
            }
        },
        "Aggregator.deleter_to": {
            "name": "deleter_to",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int"
                ],
                "helper": [
                    "str"
                ]
            }
        },
        "Aggregator.item_getter_for": {
            "name": "item_getter_for",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "float"
                ],
                "helper": [
                    "str",
                    "int"
                ]
            }
        },
        "Aggregator._item_has_update": {
            "name": "_item_has_update",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "prev_item": [
                    "typing.Iterator",
                    "str",
                    "dict[, ]"
                ],
                "new_item": [
                    "typing.Iterator",
                    "str",
                    "dict[, ]"
                ],
                "helper": [
                    "typing.Callable[, ]",
                    "typing.MutableSet"
                ]
            }
        },
        "Aggregator._get_ids_map": {
            "name": "_get_ids_map",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "helper": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Aggregator._get_serdes_dirs": {
            "name": "_get_serdes_dirs",
            "location": 271,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "helper": [
                    "str"
                ]
            }
        },
        "Aggregator._get_side_instances": {
            "name": "_get_side_instances",
            "location": 277,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "helper": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "Aggregator._remove_serdes_files": {
            "name": "_remove_serdes_files",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "helper": [
                    "str",
                    "int",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "Aggregator._summary_of": {
            "name": "_summary_of",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "helper": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "short": [
                    "bool"
                ]
            }
        },
        "Aggregator.__init__.side_B_fn": {
            "name": "side_B_fn",
            "location": 92,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "Aggregator.__init__.side_A_fn": {
            "name": "side_A_fn",
            "location": 97,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "Aggregator._remove_serdes_files.full_path": {
            "name": "full_path",
            "location": 286,
            "return": [],
            "arguments": {
                "id_": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/app_utils.py": {
        "get_resolution_strategy": {
            "name": "get_resolution_strategy",
            "location": 40,
            "return": [],
            "arguments": {
                "resolution_strategy_name": [],
                "side_A_type": [],
                "side_B_type": []
            }
        },
        "app_name": {
            "name": "app_name",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "get_config_name_for_args": {
            "name": "get_config_name_for_args",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "get_named_combinations": {
            "name": "get_named_combinations",
            "location": 111,
            "return": [],
            "arguments": {
                "config_fname": []
            }
        },
        "list_named_combinations": {
            "name": "list_named_combinations",
            "location": 121,
            "return": [],
            "arguments": {
                "config_fname": []
            }
        },
        "fetch_app_configuration": {
            "name": "fetch_app_configuration",
            "location": 134,
            "return": [],
            "arguments": {
                "config_fname": [],
                "combination": []
            }
        },
        "cache_or_reuse_cached_combination": {
            "name": "cache_or_reuse_cached_combination",
            "location": 162,
            "return": [],
            "arguments": {
                "config_args": [],
                "config_fname": [],
                "custom_combination_savename": []
            }
        },
        "report_toplevel_exception": {
            "name": "report_toplevel_exception",
            "location": 193,
            "return": [],
            "arguments": {
                "is_verbose": []
            }
        },
        "inform_about_combination_name_usage": {
            "name": "inform_about_combination_name_usage",
            "location": 209,
            "return": [],
            "arguments": {
                "combination_name": []
            }
        },
        "inform_about_app_extras": {
            "name": "inform_about_app_extras",
            "location": 219,
            "return": [],
            "arguments": {
                "extras": []
            }
        },
        "fetch_from_pass_manager": {
            "name": "fetch_from_pass_manager",
            "location": 232,
            "return": [],
            "arguments": {
                "password_path": []
            }
        },
        "get_config_name_for_args.quote_": {
            "name": "quote_",
            "location": 98,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_config_name_for_args.format_": {
            "name": "format_",
            "location": 101,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/cli.py": {
        "opt_list_combinations": {
            "name": "opt_list_combinations",
            "location": 12,
            "return": [],
            "arguments": {
                "name_A": [
                    "str",
                    "tuple[]",
                    "set[str]",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "name_B": [
                    "str",
                    "tuple[]",
                    "set[str]",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "opt_tw_tags": {
            "name": "opt_tw_tags",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "opt_tw_project": {
            "name": "opt_tw_project",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "opt_resolution_strategy": {
            "name": "opt_resolution_strategy",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "opt_combination": {
            "name": "opt_combination",
            "location": 52,
            "return": [],
            "arguments": {
                "name_A": [
                    "str",
                    "typing.Mapping",
                    "dict[typing.Union[str,None], str]",
                    "bool",
                    "float"
                ],
                "name_B": [
                    "str",
                    "typing.Mapping",
                    "dict[typing.Union[str,None], str]",
                    "bool",
                    "float"
                ]
            }
        },
        "opt_custom_combination_savename": {
            "name": "opt_custom_combination_savename",
            "location": 62,
            "return": [],
            "arguments": {
                "name_A": [
                    "str",
                    "bool",
                    "None"
                ],
                "name_B": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "opt_notion_page_id": {
            "name": "opt_notion_page_id",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "opt_notion_token_pass_path": {
            "name": "opt_notion_token_pass_path",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "opt_gkeep_user_pass_path": {
            "name": "opt_gkeep_user_pass_path",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "opt_gkeep_passwd_pass_path": {
            "name": "opt_gkeep_passwd_pass_path",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "opt_gcal_calendar": {
            "name": "opt_gcal_calendar",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "opt_gkeep_note": {
            "name": "opt_gkeep_note",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "opt_google_secret_override": {
            "name": "opt_google_secret_override",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "opt_google_oauth_port": {
            "name": "opt_google_oauth_port",
            "location": 145,
            "return": [],
            "arguments": {}
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/constants.py": {},
    "taskwarrior-syncall-master/taskwarrior_syncall/notion_side.py": {
        "NotionSide.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "str",
                    "bytes"
                ],
                "page_id": [
                    "str",
                    "int"
                ]
            }
        },
        "NotionSide.id_key": {
            "name": "id_key",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NotionSide.summary_key": {
            "name": "summary_key",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "NotionSide.last_modification_key": {
            "name": "last_modification_key",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "NotionSide.start": {
            "name": "start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotionSide._get_todo_blocks": {
            "name": "_get_todo_blocks",
            "location": 43,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotionSide.get_all_items": {
            "name": "get_all_items",
            "location": 50,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotionSide.get_item": {
            "name": "get_item",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "None",
                    "typing.Iterable[int]"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "NotionSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ]
            }
        },
        "NotionSide.get_vanilla_notion_todo_section": {
            "name": "get_vanilla_notion_todo_section",
            "location": 80,
            "return": [
                "dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,bool,typing.Sequence[dict[str, str]]]]]]],str,bool,typing.Sequence[dict[str, str]]]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]"
                ],
                "is_checked": [
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]"
                ]
            }
        },
        "NotionSide.update_item": {
            "name": "update_item",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "NotionSide.add_item": {
            "name": "add_item",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NotionSide.add_todo_block": {
            "name": "add_todo_block",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "title": [
                    "typing.IO"
                ],
                "checked": [
                    "bool"
                ]
            }
        },
        "NotionSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item1": [],
                "item2": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "typing.Mapping",
                    "str"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        },
        "NotionSide.find_todos": {
            "name": "find_todos",
            "location": 134,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "page_contents": [
                    "str"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/notion_todo_block.py": {
        "NotionTodoBlock.compare": {
            "name": "compare",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        },
        "NotionTodoBlock.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "NotionTodoBlock.__iter__": {
            "name": "__iter__",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotionTodoBlock.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotionTodoBlock.from_raw_item": {
            "name": "from_raw_item",
            "location": 65,
            "return": [
                "NotionTodoBlock"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "block_item": []
            }
        },
        "NotionTodoBlock.is_todo": {
            "name": "is_todo",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item": []
            }
        },
        "NotionTodoBlock.get_plaintext": {
            "name": "get_plaintext",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "todo_section": [
                    "list[int]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "NotionTodoBlock.serialize": {
            "name": "serialize",
            "location": 103,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, ]]]]]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/side_helper.py": {
        "SideHelper.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SideHelper.from_side": {
            "name": "from_side",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "side": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/sync_side.py": {
        "SyncSide.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "fullname": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "SyncSide.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.fullname": {
            "name": "fullname",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.name": {
            "name": "name",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.start": {
            "name": "start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.finish": {
            "name": "finish",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.get_all_items": {
            "name": "get_all_items",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSide.get_item": {
            "name": "get_item",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "bool"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "SyncSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "SyncSide.update_item": {
            "name": "update_item",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "SyncSide.add_item": {
            "name": "add_item",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[T]",
                    "str"
                ]
            }
        },
        "SyncSide.id_key": {
            "name": "id_key",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SyncSide.summary_key": {
            "name": "summary_key",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "SyncSide.last_modification_key": {
            "name": "last_modification_key",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "SyncSide.get_task_id": {
            "name": "get_task_id",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "item": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "SyncSide.get_summary": {
            "name": "get_summary",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "SyncSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item1": [
                    "bool",
                    "str"
                ],
                "item2": [
                    "bool",
                    "str"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        },
        "SyncSide._items_are_identical": {
            "name": "_items_are_identical",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "item1": [],
                "item2": [],
                "keys": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/taskwarrior_side.py": {
        "parse_datetime_": {
            "name": "parse_datetime_",
            "location": 24,
            "return": [
                "datetime_@_datetime"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "int"
                ]
            }
        },
        "TaskWarriorSide.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "list[]"
                ],
                "project": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ],
                "config_file": [
                    "Path"
                ]
            }
        },
        "TaskWarriorSide.start": {
            "name": "start",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskWarriorSide._load_all_items": {
            "name": "_load_all_items",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskWarriorSide.get_all_items": {
            "name": "get_all_items",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "skip_completed": [
                    "bool"
                ],
                "order_by": [
                    "None",
                    "bool",
                    "str",
                    "Exception"
                ],
                "use_ascending_order": [
                    "bool"
                ]
            }
        },
        "TaskWarriorSide.get_item": {
            "name": "get_item",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "TaskWarriorSide.update_item": {
            "name": "update_item",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TaskWarriorSide.add_item": {
            "name": "add_item",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TaskWarriorSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TaskWarriorSide.id_key": {
            "name": "id_key",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "TaskWarriorSide.summary_key": {
            "name": "summary_key",
            "location": 187,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TaskWarriorSide.last_modification_key": {
            "name": "last_modification_key",
            "location": 191,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TaskWarriorSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item1": [
                    "list[dict[str, typing.Any]]"
                ],
                "item2": [
                    "list[dict[str, typing.Any]]"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/tw_gcal_utils.py": {
        "convert_tw_to_gcal": {
            "name": "convert_tw_to_gcal",
            "location": 14,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "tw_item": []
            }
        },
        "convert_gcal_to_tw": {
            "name": "convert_gcal_to_tw",
            "location": 69,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "gcal_item": []
            }
        },
        "_parse_gcal_item_desc": {
            "name": "_parse_gcal_item_desc",
            "location": 123,
            "return": [
                "tuple[typing.Union[list[],typing.Text,None]]",
                "tuple[typing.Union[list[],typing.Text,None,UUID]]"
            ],
            "arguments": {
                "gcal_item": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/tw_gkeep_utils.py": {
        "convert_tw_to_gkeep_todo": {
            "name": "convert_tw_to_gkeep_todo",
            "location": 8,
            "return": [
                "GKeepTodoItem"
            ],
            "arguments": {
                "tw_item": [
                    "str",
                    "list[dict[, ]]",
                    "list[float]"
                ]
            }
        },
        "convert_gkeep_todo_to_tw": {
            "name": "convert_gkeep_todo_to_tw",
            "location": 14,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "gkeep_todo": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/tw_notion_utils.py": {
        "create_page": {
            "name": "create_page",
            "location": 12,
            "return": [],
            "arguments": {
                "parent_page_id": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "title": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "client": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "convert_tw_to_notion": {
            "name": "convert_tw_to_notion",
            "location": 25,
            "return": [
                "NotionTodoBlock"
            ],
            "arguments": {
                "tw_item": [
                    "str"
                ]
            }
        },
        "convert_notion_to_tw": {
            "name": "convert_notion_to_tw",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "todo_block": [
                    "str",
                    "list[\"Block\"]",
                    "bool"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/types.py": {},
    "taskwarrior-syncall-master/taskwarrior_syncall/__init__.py": {},
    "taskwarrior-syncall-master/taskwarrior_syncall/google/gcal_side.py": {
        "GCalSide.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCalSide.start": {
            "name": "start",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCalSide._fetch_cal_id": {
            "name": "_fetch_cal_id",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCalSide._clear_all_calendar_entries": {
            "name": "_clear_all_calendar_entries",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCalSide.get_all_items": {
            "name": "get_all_items",
            "location": 111,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCalSide.get_item": {
            "name": "get_item",
            "location": 138,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int",
                    "str"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "GCalSide.get_item_refresh": {
            "name": "get_item_refresh",
            "location": 145,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "GCalSide.update_item": {
            "name": "update_item",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int"
                ]
            }
        },
        "GCalSide.add_item": {
            "name": "add_item",
            "location": 173,
            "return": [
                "dict[, ]",
                "dict[str, typing.Union[typing.Any,int,str]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "GCalSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int",
                    "str"
                ]
            }
        },
        "GCalSide.id_key": {
            "name": "id_key",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "GCalSide.summary_key": {
            "name": "summary_key",
            "location": 189,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GCalSide.last_modification_key": {
            "name": "last_modification_key",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "GCalSide.get_date_key": {
            "name": "get_date_key",
            "location": 197,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GCalSide.get_event_time": {
            "name": "get_event_time",
            "location": 205,
            "return": [],
            "arguments": {
                "item": [],
                "t": [
                    "dict[, ]"
                ]
            }
        },
        "GCalSide.format_datetime": {
            "name": "format_datetime",
            "location": 218,
            "return": [],
            "arguments": {
                "dt": [
                    "str",
                    "int"
                ]
            }
        },
        "GCalSide.parse_datetime": {
            "name": "parse_datetime",
            "location": 223,
            "return": [
                "typing.Pattern",
                "str",
                "typing.Match",
                "None",
                "datetime_@_datetime"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, str]",
                    "str"
                ],
                "dt": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GCalSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [],
                "item1": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[, ]]"
                ],
                "item2": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[, ]]"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/google/gkeep_todo_item.py": {
        "GKeepTodoItem.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_checked": [
                    "bool"
                ],
                "plaintext": [
                    "typing.Text"
                ]
            }
        },
        "GKeepTodoItem.id": {
            "name": "id",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoItem.from_raw_item": {
            "name": "from_raw_item",
            "location": 43,
            "return": [
                "dict[, ]",
                "tuple[]",
                "list[]",
                "list[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None"
                ],
                "gkeep_raw_item": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "list[dict[str, str]]",
                    "list[str]"
                ]
            }
        },
        "GKeepTodoItem.is_checked": {
            "name": "is_checked",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "GKeepTodoItem.last_modified_date": {
            "name": "last_modified_date",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoItem.plaintext": {
            "name": "plaintext",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "GKeepTodoItem.from_gkeep_list_item": {
            "name": "from_gkeep_list_item",
            "location": 70,
            "return": [
                "int",
                "list[list[int]]",
                "typing.Callable[, ]",
                "list[]",
                "dict[int, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "str"
                ],
                "list_item": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "GKeepTodoItem.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "GKeepTodoItem.__iter__": {
            "name": "__iter__",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoItem.__len__": {
            "name": "__len__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoItem.delete": {
            "name": "delete",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoItem.compare": {
            "name": "compare",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/google/gkeep_todo_side.py": {
        "GKeepTodoSide.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "note_title": [
                    "str",
                    "None"
                ],
                "gkeep_user": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "gkeep_passwd": [
                    "str",
                    "None"
                ],
                "notes_label": [
                    "None",
                    "str"
                ]
            }
        },
        "GKeepTodoSide.start": {
            "name": "start",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoSide._note_has_label": {
            "name": "_note_has_label",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "typing.Callable[, ]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "label": [
                    "str",
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "GKeepTodoSide._note_has_label_str": {
            "name": "_note_has_label_str",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "float"
                ],
                "label_str": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "GKeepTodoSide.finish": {
            "name": "finish",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoSide._get_label_by_name": {
            "name": "_get_label_by_name",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "list[str]",
                    "str",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "GKeepTodoSide._create_note": {
            "name": "_create_note",
            "location": 161,
            "return": [
                "int",
                "set[]",
                "typing.Type",
                "list[str]",
                "set[str]",
                "dict[str, typing.Type]",
                "float"
            ],
            "arguments": {
                "self": [],
                "note_title": [
                    "dict[, ]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str"
                ]
            }
        },
        "GKeepTodoSide.get_all_items": {
            "name": "get_all_items",
            "location": 172,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GKeepTodoSide.get_item": {
            "name": "get_item",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "bool"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "GKeepTodoSide.update_item": {
            "name": "update_item",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "None",
                    "set[int]",
                    "float"
                ]
            }
        },
        "GKeepTodoSide.add_item": {
            "name": "add_item",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "GKeepTodoSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "GKeepTodoSide._get_item_by_id": {
            "name": "_get_item_by_id",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": [
                    "str"
                ]
            }
        },
        "GKeepTodoSide.id_key": {
            "name": "id_key",
            "location": 214,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "GKeepTodoSide.summary_key": {
            "name": "summary_key",
            "location": 218,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GKeepTodoSide.last_modification_key": {
            "name": "last_modification_key",
            "location": 222,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "GKeepTodoSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 226,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item1": [],
                "item2": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "typing.Mapping",
                    "str"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/google/google_side.py": {
        "GoogleSide.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes"
                ],
                "oauth_port": [
                    "bool",
                    "typing.Iterable[I]",
                    "float"
                ],
                "credentials_cache": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes"
                ],
                "client_secret": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes"
                ]
            }
        },
        "GoogleSide._get_credentials": {
            "name": "_get_credentials",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/google/__init__.py": {},
    "taskwarrior-syncall-master/taskwarrior_syncall/scripts/tw_gcal_sync.py": {
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "gcal_calendar": [
                    "bool",
                    "float"
                ],
                "google_secret": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "oauth_port": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "tw_tags": [
                    "bool",
                    "str",
                    "None"
                ],
                "tw_project": [
                    "bool",
                    "float"
                ],
                "resolution_strategy": [
                    "int",
                    "float"
                ],
                "verbose": [
                    "bool"
                ],
                "combination_name": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "custom_combination_savename": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "do_list_combinations": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/scripts/tw_gkeep_sync.py": {
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "gkeep_note": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "gkeep_user_pass_path": [
                    "str",
                    "None"
                ],
                "gkeep_passwd_pass_path": [
                    "str",
                    "bool"
                ],
                "tw_tags": [
                    "bool"
                ],
                "tw_project": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "resolution_strategy": [
                    "int",
                    "float"
                ],
                "verbose": [
                    "bool"
                ],
                "combination_name": [
                    "str",
                    "bool"
                ],
                "custom_combination_savename": [
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "do_list_combinations": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/taskwarrior_syncall/scripts/tw_notion_sync.py": {
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "notion_page_id": [
                    "str",
                    "None",
                    "bool"
                ],
                "tw_tags": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "tw_project": [
                    "str",
                    "int",
                    "None"
                ],
                "token_pass_path": [
                    "str",
                    "None"
                ],
                "resolution_strategy": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ],
                "combination_name": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ],
                "custom_combination_savename": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ],
                "do_list_combinations": [
                    "str",
                    "bool",
                    "tuple[]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/tests/conftest.py": {
        "test_data": {
            "name": "test_data",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "caplog": {
            "name": "caplog",
            "location": 20,
            "return": [
                "typing.Generator[typing.Union[int,str,typing.Iterable['Context']]]"
            ],
            "arguments": {
                "_caplog": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "mock_prefs_manager": {
            "name": "mock_prefs_manager",
            "location": 49,
            "return": [
                "MockPrefsManager"
            ],
            "arguments": {}
        },
        "MockPrefsManager.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPrefsManager._cleanup": {
            "name": "_cleanup",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "caplog.PropagateHandler.emit": {
            "name": "emit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/conftest_gkeep.py": {
        "gkeep_raw_item": {
            "name": "gkeep_raw_item",
            "location": 5,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "gkeep_simple_done_item": {
            "name": "gkeep_simple_done_item",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],None,bool]]"
            ],
            "arguments": {}
        },
        "gkeep_simple_pending_item": {
            "name": "gkeep_simple_pending_item",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],None,bool]]"
            ],
            "arguments": {}
        },
        "gkeep_list0": {
            "name": "gkeep_list0",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],bool,list[]]]"
            ],
            "arguments": {}
        },
        "gkeep_list1": {
            "name": "gkeep_list1",
            "location": 99,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]]],bool,list[]]]"
            ],
            "arguments": {}
        },
        "gkeep_note": {
            "name": "gkeep_note",
            "location": 138,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],bool,list[dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {}
        }
    },
    "taskwarrior-syncall-master/tests/conftest_notion.py": {
        "notion_todo": {
            "name": "notion_todo",
            "location": 10,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "notion_simple_todo": {
            "name": "notion_simple_todo",
            "location": 17,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,None]],dict[typing.Text, typing.Union[bool,typing.Text]],None]]],bool]]]]"
            ],
            "arguments": {}
        },
        "notion_simple_checked_todo": {
            "name": "notion_simple_checked_todo",
            "location": 54,
            "return": [],
            "arguments": {
                "notion_simple_todo": []
            }
        },
        "notion_simple_diff_edited_time_todo": {
            "name": "notion_simple_diff_edited_time_todo",
            "location": 62,
            "return": [],
            "arguments": {
                "notion_simple_todo": []
            }
        },
        "notion_simple_archived_todo": {
            "name": "notion_simple_archived_todo",
            "location": 72,
            "return": [],
            "arguments": {
                "notion_simple_todo": []
            }
        },
        "notion_chained_todo": {
            "name": "notion_chained_todo",
            "location": 82,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,None]],dict[typing.Text, typing.Union[bool,typing.Text]],None]]],bool]]]]"
            ],
            "arguments": {}
        },
        "page_contents": {
            "name": "page_contents",
            "location": 192,
            "return": [],
            "arguments": {}
        }
    },
    "taskwarrior-syncall-master/tests/conftest_tw.py": {
        "tw_task": {
            "name": "tw_task",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "tw_simple_pending_task": {
            "name": "tw_simple_pending_task",
            "location": 14,
            "return": [
                "tuple[typing.Union[int,dict[typing.Text, typing.Union[int,typing.Text,float]]]]"
            ],
            "arguments": {}
        },
        "tw_simple_completed_task": {
            "name": "tw_simple_completed_task",
            "location": 31,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, typing.Union[int,typing.Text,list[typing.Text],float]]]]"
            ],
            "arguments": {}
        }
    },
    "taskwarrior-syncall-master/tests/generic_test_case.py": {
        "GenericTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "GenericTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GenericTestCase.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_aggregator.py": {
        "MockSide.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "fullname": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "MockSide.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockSide.get_all_items": {
            "name": "get_all_items",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSide.get_item": {
            "name": "get_item",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "bool"
                ],
                "use_cached": [
                    "bool"
                ]
            }
        },
        "MockSide.delete_single_item": {
            "name": "delete_single_item",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "MockSide.update_item": {
            "name": "update_item",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "MockSide.add_item": {
            "name": "add_item",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[T]",
                    "str"
                ]
            }
        },
        "MockSide.id_key": {
            "name": "id_key",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MockSide.summary_key": {
            "name": "summary_key",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "MockSide.items_are_identical": {
            "name": "items_are_identical",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "item1": [
                    "bool",
                    "str"
                ],
                "item2": [
                    "bool",
                    "str"
                ],
                "ignore_keys": [
                    "list[]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_app_utils.py": {
        "test_list_named_combinations": {
            "name": "test_list_named_combinations",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [],
                "caplog": [],
                "mock_prefs_manager": []
            }
        },
        "test_fetch_app_configuration": {
            "name": "test_fetch_app_configuration",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "list[int]"
                ],
                "caplog": [],
                "mock_prefs_manager": []
            }
        },
        "test_report_toplevel_exception": {
            "name": "test_report_toplevel_exception",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_inform_about_combination_name_usage": {
            "name": "test_inform_about_combination_name_usage",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "bool",
                    "list[str]"
                ],
                "caplog": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_cache_or_reuse_cached_combination": {
            "name": "test_cache_or_reuse_cached_combination",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [],
                "caplog": [],
                "mock_prefs_manager": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_gkeep.py": {
        "compare_items": {
            "name": "compare_items",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "gkeep_item": [
                    "str",
                    "int",
                    "None"
                ],
                "tw_item": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "test_convert_gkeep_to_tw": {
            "name": "test_convert_gkeep_to_tw",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "gkeep_raw_item": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_convert_tw_to_gkeep_todo": {
            "name": "test_convert_tw_to_gkeep_todo",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tw_task": []
            }
        },
        "test_gkeep_todo_item_creation_from_raw": {
            "name": "test_gkeep_todo_item_creation_from_raw",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "gkeep_raw_item": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_notion.py": {
        "compare_items": {
            "name": "compare_items",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_item": [],
                "tw_item": []
            }
        },
        "test_convert_notion_to_tw": {
            "name": "test_convert_notion_to_tw",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_todo": []
            }
        },
        "test_convert_tw_to_notion": {
            "name": "test_convert_tw_to_notion",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "tw_task": []
            }
        },
        "test_find_todos_in_page": {
            "name": "test_find_todos_in_page",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "page_contents": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_notion_todo_block.py": {
        "test_notion_todo_block_compare0": {
            "name": "test_notion_todo_block_compare0",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_notion_todo_block_compare1": {
            "name": "test_notion_todo_block_compare1",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": [
                    "dict[str, typing.Any]"
                ],
                "notion_chained_todo": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_notion_todo_block_compare2": {
            "name": "test_notion_todo_block_compare2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": [
                    "dict[str, typing.Any]"
                ],
                "notion_simple_checked_todo": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_notion_todo_block_compare3": {
            "name": "test_notion_todo_block_compare3",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": [
                    "dict[str, typing.Any]"
                ],
                "notion_simple_archived_todo": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_notion_todo_block_compare4": {
            "name": "test_notion_todo_block_compare4",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": [
                    "bool",
                    "str"
                ],
                "notion_simple_diff_edited_time_todo": [
                    "bool"
                ]
            }
        },
        "test_notion_todo_block0": {
            "name": "test_notion_todo_block0",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_todo": []
            }
        },
        "test_notion_todo_block1": {
            "name": "test_notion_todo_block1",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_chained_todo": []
            }
        },
        "test_notion_todo_block2": {
            "name": "test_notion_todo_block2",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_checked_todo": []
            }
        },
        "test_notion_todo_block3": {
            "name": "test_notion_todo_block3",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "notion_simple_archived_todo": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_tw_gcal_conversions.py": {
        "TestConversions.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestConversions.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.load_sample_items": {
            "name": "load_sample_items",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_tw_gcal_basic_convert": {
            "name": "test_tw_gcal_basic_convert",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_gcal_tw_basic_convert": {
            "name": "test_gcal_tw_basic_convert",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_gcal_tw_date_convert": {
            "name": "test_gcal_tw_date_convert",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_tw_gcal_n_back": {
            "name": "test_tw_gcal_n_back",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConversions.test_gcal_tw_n_back": {
            "name": "test_gcal_tw_n_back",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/test_util_methods.py": {
        "TestTW.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestTW.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTW.test_get_items": {
            "name": "test_get_items",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taskwarrior-syncall-master/tests/__init__.py": {}
}
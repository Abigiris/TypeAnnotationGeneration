{
    "taxonomy_re_api-master/src/exceptions.py": {
        "MethodNotFound.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "REError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "REError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/__init__.py": {},
    "taxonomy_re_api-master/src/server/main.py": {
        "transform_taxon_results": {
            "name": "transform_taxon_results",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "taxa": [
                    "list[list[int]]"
                ],
                "ns": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "list[]",
                    "float"
                ],
                "ns_config": [
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "transform_query_params": {
            "name": "transform_query_params",
            "location": 34,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "params": [
                    "dict[, ]"
                ],
                "required_ns_fields": [
                    "list[]"
                ],
                "field_name_remappings": [
                    "dict[, ]"
                ]
            }
        },
        "_get_taxon": {
            "name": "_get_taxon",
            "location": 85,
            "return": [
                "dict[typing.Text, typing.Union[str,bytes]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bytes"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_taxon_from_ws_obj": {
            "name": "_get_taxon_from_ws_obj",
            "location": 98,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "params": [],
                "headers": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_lineage": {
            "name": "_get_lineage",
            "location": 111,
            "return": [
                "dict[typing.Text, typing.Union[str,bytes]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bytes"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_children": {
            "name": "_get_children",
            "location": 124,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "params": [
                    "str"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_siblings": {
            "name": "_get_siblings",
            "location": 138,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "params": [
                    "str"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_search_taxa": {
            "name": "_search_taxa",
            "location": 152,
            "return": [
                "dict[typing.Text, typing.Union[str,typing.Callable[, ]]]"
            ],
            "arguments": {
                "params": [
                    "tuple[]",
                    "str",
                    "list[typing.Callable[, ]]"
                ],
                "headers": [
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "_search_species": {
            "name": "_search_species",
            "location": 171,
            "return": [
                "dict[typing.Text, ]",
                "dict[typing.Text, typing.Union[list[],None]]"
            ],
            "arguments": {
                "params": [
                    "str"
                ],
                "headers": [
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "_get_associated_ws_objects": {
            "name": "_get_associated_ws_objects",
            "location": 221,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "None",
                    "typing.ValuesView"
                ],
                "headers": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "_get_data_sources": {
            "name": "_get_data_sources",
            "location": 243,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "params": [
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "headers": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_rpc_resp": {
            "name": "_rpc_resp",
            "location": 278,
            "return": [],
            "arguments": {
                "req": [
                    "str",
                    "None",
                    "collections.abc.Awaitable[]",
                    "int"
                ],
                "resp": [],
                "status": [
                    "int"
                ]
            }
        },
        "get_json_type": {
            "name": "get_json_type",
            "location": 294,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "json_value": [
                    "str",
                    "tuple[]",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bytes"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/server/__init__.py": {},
    "taxonomy_re_api-master/src/test/test_base.py": {
        "api_url": {
            "name": "api_url",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "verify_ssl": {
            "name": "verify_ssl",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestBase.assert_is_jsonrpc_base": {
            "name": "assert_is_jsonrpc_base",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_response": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "TestBase.assert_is_error_response": {
            "name": "assert_is_error_response",
            "location": 33,
            "return": [
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "rpc_response": [
                    "str"
                ],
                "code": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "message": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "error": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestBase.assert_is_result_response": {
            "name": "assert_is_result_response",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "rpc_response": []
            }
        },
        "TestBase.assert_query_results": {
            "name": "assert_query_results",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sciname_target": [
                    "str",
                    "None",
                    "float",
                    "int"
                ],
                "search_text_exp_hit": [
                    "list[str]"
                ],
                "search_text_exp_miss": [
                    "list[]"
                ],
                "expired": [
                    "bool"
                ]
            }
        },
        "TestBase.request": {
            "name": "request",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "rpc": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/test/__init__.py": {},
    "taxonomy_re_api-master/src/test/integration/test_integration.py": {
        "TestIntegration.test_status": {
            "name": "test_status",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_lineage": {
            "name": "test_get_lineage",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_children": {
            "name": "test_get_children",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_children_search": {
            "name": "test_get_children_search",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_siblings": {
            "name": "test_get_siblings",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_taxon": {
            "name": "test_get_taxon",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_taxa": {
            "name": "test_search_taxa",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species_gtdb": {
            "name": "test_search_species_gtdb",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species": {
            "name": "test_search_species",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species__syntax": {
            "name": "test_search_species__syntax",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species__exact_hit": {
            "name": "test_search_species__exact_hit",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_associated_ws_objects": {
            "name": "test_get_associated_ws_objects",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_taxon_from_ws_obj": {
            "name": "test_get_taxon_from_ws_obj",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_taxa_rdp": {
            "name": "test_search_taxa_rdp",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/integration/test_jsonrpc.py": {
        "TestJSONRPC.test_invalid_http_method": {
            "name": "test_invalid_http_method",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_string": {
            "name": "test_invalid_params_type_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_boolean": {
            "name": "test_invalid_params_type_boolean",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_number1": {
            "name": "test_invalid_params_type_number1",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_number2": {
            "name": "test_invalid_params_type_number2",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_null": {
            "name": "test_invalid_params_type_null",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_object": {
            "name": "test_invalid_params_type_object",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_missing_method": {
            "name": "test_missing_method",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_method_type": {
            "name": "test_invalid_method_type",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_unknown_method": {
            "name": "test_unknown_method",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_missing_params": {
            "name": "test_missing_params",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/integration/__init__.py": {},
    "taxonomy_re_api-master/src/test/local_integration/test_get_data_sources.py": {
        "TestGetDataSources.test_get_data_sources_all_null_ns": {
            "name": "test_get_data_sources_all_null_ns",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_all_missing_ns": {
            "name": "test_get_data_sources_all_missing_ns",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_all_no_params": {
            "name": "test_get_data_sources_all_no_params",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_with_filtering_one": {
            "name": "test_get_data_sources_with_filtering_one",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_with_filtering_three": {
            "name": "test_get_data_sources_with_filtering_three",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_bad_ns": {
            "name": "test_get_data_sources_bad_ns",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_provide_undefined_param": {
            "name": "test_get_data_sources_provide_undefined_param",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_missing_method": {
            "name": "test_get_data_sources_missing_method",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_missing_params": {
            "name": "test_get_data_sources_missing_params",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/local_integration/__init__.py": {},
    "taxonomy_re_api-master/src/test/unit/test_misc.py": {
        "test_validate_search_text": {
            "name": "test_validate_search_text",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 9,
            "return": [
                "dict[typing.Text, typing.Union[typing.Pattern,bool]]"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/re_api.py": {
        "query": {
            "name": "query",
            "location": 12,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Callable[..., T]"
                ],
                "params": [
                    "str",
                    "typing.Callable[..., T]"
                ],
                "tok": [
                    "None",
                    "str",
                    "typing.Callable[..., T]"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/utils/schemas.py": {
        "load_schemas": {
            "name": "load_schemas",
            "location": 7,
            "return": [
                "dict[typing.Union[str,tuple[typing.Union[str,str]]], ]"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/search.py": {
        "clean_search_text": {
            "name": "clean_search_text",
            "location": 4,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/utils/wait_for_services.py": {
        "wait_for_app": {
            "name": "wait_for_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/__init__.py": {}
}
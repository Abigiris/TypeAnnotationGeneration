{
    "tdd-route-search-master/tests.py": {
        "test_able_to_access": {
            "name": "test_able_to_access",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_staiton": {
            "name": "test_unknown_staiton",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linked_indirectly": {
            "name": "test_linked_indirectly",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tdd-route-search-master/route/exceptions.py": {},
    "tdd-route-search-master/route/__init__.py": {
        "Router.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.cross_link": {
            "name": "cross_link",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "station_a": [
                    "typing.Callable[[], typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[int, set[int]]"
                ],
                "station_b": [
                    "typing.Callable[[], typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[int, set[int]]"
                ]
            }
        },
        "Router.is_linked": {
            "name": "is_linked",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "from_station": [
                    "bool",
                    "float"
                ],
                "to_station": [
                    "bool",
                    "list[str]",
                    "dict[tuple[typing.Union[int,int]], str]"
                ]
            }
        },
        "Router.is_linked._is_linked": {
            "name": "_is_linked",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "from_station": [],
                "scanned": []
            }
        }
    }
}
{
    "teslajsonpy-master/docs/conf.py": {},
    "teslajsonpy-master/teslajsonpy/connection.py": {
        "get_inputs": {
            "name": "get_inputs",
            "location": 583,
            "return": [
                "dict[, typing.Text]"
            ],
            "arguments": {
                "soup": [],
                "searchfield": [
                    "None"
                ]
            }
        },
        "_process_resp": {
            "name": "_process_resp",
            "location": 601,
            "return": [
                "str"
            ],
            "arguments": {
                "resp": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "websession": [],
                "email": [
                    "None"
                ],
                "password": [
                    "None"
                ],
                "access_token": [
                    "None"
                ],
                "refresh_token": [
                    "None"
                ],
                "authorization_token": [
                    "None"
                ],
                "expiration": [
                    "int"
                ],
                "auth_domain": []
            }
        },
        "Connection.__sethead": {
            "name": "__sethead",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [],
                "expires_in": [
                    "int"
                ],
                "expiration": [
                    "int"
                ]
            }
        },
        "Connection.get_authorization_code_link": {
            "name": "get_authorization_code_link",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "new": [
                    "bool"
                ]
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/const.py": {},
    "teslajsonpy-master/teslajsonpy/controller.py": {
        "min_expo": {
            "name": "min_expo",
            "location": 73,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[None]"
            ],
            "arguments": {
                "base": [
                    "int"
                ],
                "factor": [],
                "max_value": [],
                "min_value": []
            }
        },
        "wake_up.valid_result": {
            "name": "valid_result",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "Controller.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "websession": [
                    "None"
                ],
                "email": [
                    "None"
                ],
                "password": [
                    "None"
                ],
                "access_token": [
                    "None"
                ],
                "refresh_token": [
                    "None"
                ],
                "expiration": [
                    "int"
                ],
                "update_interval": [],
                "enable_websocket": [
                    "bool"
                ],
                "polling_policy": [
                    "None"
                ],
                "auth_domain": []
            }
        },
        "Controller.is_token_refreshed": {
            "name": "is_token_refreshed",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.get_tokens": {
            "name": "get_tokens",
            "location": 476,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.get_expiration": {
            "name": "get_expiration",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.get_oauth_url": {
            "name": "get_oauth_url",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.set_authorization_code": {
            "name": "set_authorization_code",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "Controller.set_authorization_domain": {
            "name": "set_authorization_domain",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": []
            }
        },
        "Controller.register_websocket_callback": {
            "name": "register_websocket_callback",
            "location": 519,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Controller.get_homeassistant_components": {
            "name": "get_homeassistant_components",
            "location": 706,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller._add_energysite_components": {
            "name": "_add_energysite_components",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "energysite": []
            }
        },
        "Controller._add_car_components": {
            "name": "_add_car_components",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car": []
            }
        },
        "Controller._calculate_next_interval": {
            "name": "_calculate_next_interval",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "vin": []
            }
        },
        "Controller.get_climate_params": {
            "name": "get_climate_params",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_climate_params": {
            "name": "set_climate_params",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.is_climate_on": {
            "name": "is_climate_on",
            "location": 1084,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.get_charging_params": {
            "name": "get_charging_params",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_charging_params": {
            "name": "set_charging_params",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.charging_state": {
            "name": "charging_state",
            "location": 1130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.get_power_params": {
            "name": "get_power_params",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "site_id": []
            }
        },
        "Controller.get_state_params": {
            "name": "get_state_params",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_state_params": {
            "name": "set_state_params",
            "location": 1171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.is_sentry_mode_on": {
            "name": "is_sentry_mode_on",
            "location": 1181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.get_config_params": {
            "name": "get_config_params",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_config_params": {
            "name": "set_config_params",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.get_drive_params": {
            "name": "get_drive_params",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_drive_params": {
            "name": "set_drive_params",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.shift_state": {
            "name": "shift_state",
            "location": 1265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.is_in_gear": {
            "name": "is_in_gear",
            "location": 1273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.get_gui_params": {
            "name": "get_gui_params",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_gui_params": {
            "name": "set_gui_params",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "Controller.get_updates": {
            "name": "get_updates",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_updates": {
            "name": "set_updates",
            "location": 1349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [],
                "value": [
                    "bool"
                ]
            }
        },
        "Controller.get_last_update_time": {
            "name": "get_last_update_time",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_last_update_time": {
            "name": "set_last_update_time",
            "location": 1410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ],
                "timestamp": [
                    "int"
                ]
            }
        },
        "Controller.get_last_park_time": {
            "name": "get_last_park_time",
            "location": 1419,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_last_park_time": {
            "name": "set_last_park_time",
            "location": 1445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [],
                "timestamp": [
                    "int"
                ],
                "shift_state": [
                    "None"
                ]
            }
        },
        "Controller.get_last_wake_up_time": {
            "name": "get_last_wake_up_time",
            "location": 1464,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_last_wake_up_time": {
            "name": "set_last_wake_up_time",
            "location": 1490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [],
                "timestamp": [
                    "int"
                ]
            }
        },
        "Controller.set_car_online": {
            "name": "set_car_online",
            "location": 1500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [],
                "online_status": [
                    "bool"
                ]
            }
        },
        "Controller.get_car_online": {
            "name": "get_car_online",
            "location": 1534,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.is_car_online": {
            "name": "is_car_online",
            "location": 1562,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller.set_id_vin": {
            "name": "set_id_vin",
            "location": 1566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [],
                "vin": []
            }
        },
        "Controller.set_vehicle_id_vin": {
            "name": "set_vehicle_id_vin",
            "location": 1572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vehicle_id": [],
                "vin": []
            }
        },
        "Controller.update_interval": {
            "name": "update_interval",
            "location": 1589,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Controller.set_update_interval_vin": {
            "name": "set_update_interval_vin",
            "location": 1597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [],
                "value": []
            }
        },
        "Controller.get_update_interval_vin": {
            "name": "get_update_interval_vin",
            "location": 1613,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": [
                    "None"
                ],
                "vin": [
                    "None"
                ]
            }
        },
        "Controller._id_to_vin": {
            "name": "_id_to_vin",
            "location": 1623,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": []
            }
        },
        "Controller._vin_to_id": {
            "name": "_vin_to_id",
            "location": 1627,
            "return": [],
            "arguments": {
                "self": [],
                "vin": []
            }
        },
        "Controller._vehicle_id_to_vin": {
            "name": "_vehicle_id_to_vin",
            "location": 1631,
            "return": [],
            "arguments": {
                "self": [],
                "vehicle_id": []
            }
        },
        "Controller._vehicle_id_to_id": {
            "name": "_vehicle_id_to_id",
            "location": 1635,
            "return": [],
            "arguments": {
                "self": [],
                "vehicle_id": []
            }
        },
        "Controller.vin_to_vehicle_id": {
            "name": "vin_to_vehicle_id",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": [],
                "vin": []
            }
        },
        "Controller._id_to_energysiteid": {
            "name": "_id_to_energysiteid",
            "location": 1643,
            "return": [],
            "arguments": {
                "self": [],
                "site_id": []
            }
        },
        "Controller._update_id": {
            "name": "_update_id",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": [],
                "car_id": []
            }
        },
        "Controller._process_websocket_message": {
            "name": "_process_websocket_message",
            "location": 1654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Controller._process_websocket_disconnect": {
            "name": "_process_websocket_disconnect",
            "location": 1734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/exceptions.py": {
        "should_giveup": {
            "name": "should_giveup",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "ex": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TeslaException.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ]
            }
        },
        "IncompleteCredentials.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/teslaproxy.py": {
        "TeslaProxy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str"
                ],
                "host_url": [
                    "str"
                ]
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/__init__.py": {},
    "teslajsonpy-master/teslajsonpy/__version__.py": {},
    "teslajsonpy-master/teslajsonpy/homeassistant/alerts.py": {
        "Horn.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Horn.has_battery": {
            "name": "has_battery",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FlashLights.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "FlashLights.has_battery": {
            "name": "has_battery",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/battery_sensor.py": {
        "Battery.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Battery.refresh": {
            "name": "refresh",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battery.has_battery": {
            "name": "has_battery",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Battery.get_value": {
            "name": "get_value",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Battery.battery_level": {
            "name": "battery_level",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Battery.battery_charging": {
            "name": "battery_charging",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Battery.device_class": {
            "name": "device_class",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Range.refresh": {
            "name": "refresh",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.has_battery": {
            "name": "has_battery",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Range.get_value": {
            "name": "get_value",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.device_class": {
            "name": "device_class",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/binary_sensor.py": {
        "BinarySensor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "BinarySensor.get_value": {
            "name": "get_value",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinarySensor.sensor_type": {
            "name": "sensor_type",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinarySensor.has_battery": {
            "name": "has_battery",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ParkingSensor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ParkingSensor.refresh": {
            "name": "refresh",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingSensor.get_value": {
            "name": "get_value",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargerConnectionSensor.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ChargerConnectionSensor.refresh": {
            "name": "refresh",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargerConnectionSensor.get_value": {
            "name": "get_value",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineSensor.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "OnlineSensor.refresh": {
            "name": "refresh",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineSensor.get_value": {
            "name": "get_value",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateSensor.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "UpdateSensor.refresh": {
            "name": "refresh",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateSensor.get_value": {
            "name": "get_value",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateSensor.device_state_attributes": {
            "name": "device_state_attributes",
            "location": 263,
            "return": [
                "None",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/charger.py": {
        "ChargerSwitch.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "ChargerSwitch.refresh": {
            "name": "refresh",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargerSwitch.is_charging": {
            "name": "is_charging",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargerSwitch.has_battery": {
            "name": "has_battery",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "RangeSwitch.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "RangeSwitch.refresh": {
            "name": "refresh",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSwitch.is_maxrange": {
            "name": "is_maxrange",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSwitch.has_battery": {
            "name": "has_battery",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ChargingSensor.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "ChargingSensor.refresh": {
            "name": "refresh",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.has_battery": {
            "name": "has_battery",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ChargingSensor.charging_rate": {
            "name": "charging_rate",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.time_left": {
            "name": "time_left",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.added_range": {
            "name": "added_range",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charge_current_request": {
            "name": "charge_current_request",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charge_current_request_max": {
            "name": "charge_current_request_max",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charger_actual_current": {
            "name": "charger_actual_current",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charger_voltage": {
            "name": "charger_voltage",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charge_energy_added": {
            "name": "charge_energy_added",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charge_limit_soc": {
            "name": "charge_limit_soc",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.charger_power": {
            "name": "charger_power",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.device_class": {
            "name": "device_class",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingSensor.state_class": {
            "name": "state_class",
            "location": 287,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "ChargingEnergySensor.refresh": {
            "name": "refresh",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.has_battery": {
            "name": "has_battery",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ChargingEnergySensor.charging_rate": {
            "name": "charging_rate",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.time_left": {
            "name": "time_left",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.added_range": {
            "name": "added_range",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charge_current_request": {
            "name": "charge_current_request",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charge_current_request_max": {
            "name": "charge_current_request_max",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charger_actual_current": {
            "name": "charger_actual_current",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charger_voltage": {
            "name": "charger_voltage",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charge_energy_added": {
            "name": "charge_energy_added",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charge_limit_soc": {
            "name": "charge_limit_soc",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.charger_power": {
            "name": "charger_power",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.device_class": {
            "name": "device_class",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.last_reset": {
            "name": "last_reset",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.state_class": {
            "name": "state_class",
            "location": 434,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargingEnergySensor.get_value": {
            "name": "get_value",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/climate.py": {
        "Climate.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Climate.is_hvac_enabled": {
            "name": "is_hvac_enabled",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Climate.get_current_temp": {
            "name": "get_current_temp",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Climate.get_goal_temp": {
            "name": "get_goal_temp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Climate.get_fan_status": {
            "name": "get_fan_status",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Climate.refresh": {
            "name": "refresh",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Climate.preset_mode": {
            "name": "preset_mode",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Climate.preset_modes": {
            "name": "preset_modes",
            "location": 174,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Climate.has_battery": {
            "name": "has_battery",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TempSensor.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TempSensor.get_inside_temp": {
            "name": "get_inside_temp",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempSensor.get_outside_temp": {
            "name": "get_outside_temp",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempSensor.refresh": {
            "name": "refresh",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempSensor.has_battery": {
            "name": "has_battery",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TempSensor.device_class": {
            "name": "device_class",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/gps.py": {
        "GPS.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "GPS.get_location": {
            "name": "get_location",
            "location": 49,
            "return": [
                "int",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[str, str]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPS.refresh": {
            "name": "refresh",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPS.has_battery": {
            "name": "has_battery",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Odometer.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Odometer.refresh": {
            "name": "refresh",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Odometer.has_battery": {
            "name": "has_battery",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Odometer.get_value": {
            "name": "get_value",
            "location": 154,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Odometer.device_class": {
            "name": "device_class",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/heated_seats.py": {
        "HeatedSeatSelect.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "seat_name": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "HeatedSeatSelect.refresh": {
            "name": "refresh",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeatedSeatSelect.get_seat_heat_level": {
            "name": "get_seat_heat_level",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeatedSeatSelect.has_battery": {
            "name": "has_battery",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/heated_steering_wheel.py": {
        "HeatedSteeringWheelSwitch.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "HeatedSteeringWheelSwitch.refresh": {
            "name": "refresh",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeatedSteeringWheelSwitch.get_steering_wheel_heat": {
            "name": "get_steering_wheel_heat",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeatedSteeringWheelSwitch.has_battery": {
            "name": "has_battery",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/homelink.py": {
        "TriggerHomelink.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TriggerHomelink.has_battery": {
            "name": "has_battery",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TriggerHomelink.available": {
            "name": "available",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TriggerHomelink.refresh": {
            "name": "refresh",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/lock.py": {
        "Lock.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Lock.refresh": {
            "name": "refresh",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.is_locked": {
            "name": "is_locked",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.has_battery": {
            "name": "has_battery",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ChargerLock.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ChargerLock.refresh": {
            "name": "refresh",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargerLock.is_locked": {
            "name": "is_locked",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChargerLock.has_battery": {
            "name": "has_battery",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/power.py": {
        "EnergySiteDevice.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": [
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "EnergySiteDevice._name": {
            "name": "_name",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice._uniq_name": {
            "name": "_uniq_name",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice.id": {
            "name": "id",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice.energy_site_id": {
            "name": "energy_site_id",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice.site_name": {
            "name": "site_name",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice.solar_type": {
            "name": "solar_type",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnergySiteDevice.refresh": {
            "name": "refresh",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "PowerSensor.refresh": {
            "name": "refresh",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.get_value": {
            "name": "get_value",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.get_power": {
            "name": "get_power",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.get_generating_status": {
            "name": "get_generating_status",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.device_class": {
            "name": "device_class",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerSensor.state_class": {
            "name": "state_class",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/sentry_mode.py": {
        "SentryModeSwitch.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "SentryModeSwitch.refresh": {
            "name": "refresh",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentryModeSwitch.available": {
            "name": "available",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentryModeSwitch.is_on": {
            "name": "is_on",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentryModeSwitch.has_battery": {
            "name": "has_battery",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/trunk.py": {
        "TrunkLock.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TrunkLock.refresh": {
            "name": "refresh",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrunkLock.is_locked": {
            "name": "is_locked",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrunkLock.has_battery": {
            "name": "has_battery",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FrunkLock.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ],
                "controller": [
                    "typing.Any",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "FrunkLock.refresh": {
            "name": "refresh",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrunkLock.is_locked": {
            "name": "is_locked",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrunkLock.has_battery": {
            "name": "has_battery",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/vehicle.py": {
        "VehicleDevice.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bytearray"
                ],
                "controller": [
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "VehicleDevice._name": {
            "name": "_name",
            "location": 60,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice._uniq_name": {
            "name": "_uniq_name",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.id": {
            "name": "id",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.vin": {
            "name": "vin",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.vehicle_id": {
            "name": "vehicle_id",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.car_name": {
            "name": "car_name",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.car_version": {
            "name": "car_version",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.update_available": {
            "name": "update_available",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.update_version": {
            "name": "update_version",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.car_type": {
            "name": "car_type",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.sentry_mode_available": {
            "name": "sentry_mode_available",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.assumed_state": {
            "name": "assumed_state",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.refresh": {
            "name": "refresh",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDevice.is_armable": {
            "name": "is_armable",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "VehicleDevice.is_armed": {
            "name": "is_armed",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/vehicle_data.py": {
        "VehicleDataSensor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "VehicleDataSensor.refresh": {
            "name": "refresh",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleDataSensor.get_value": {
            "name": "get_value",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDataSensor.device_class": {
            "name": "device_class",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleDataSensor._dict_to_attr": {
            "name": "_dict_to_attr",
            "location": 72,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "exclude_dicts": [
                    "None"
                ],
                "prepend": [
                    "None"
                ]
            }
        },
        "ClimateStateDataSensor.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "ClimateStateDataSensor.refresh": {
            "name": "refresh",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChargeStateDataSensor.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "ChargeStateDataSensor.refresh": {
            "name": "refresh",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleStateDataSensor.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "VehicleStateDataSensor.refresh": {
            "name": "refresh",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftwareDataSensor.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "SoftwareDataSensor.refresh": {
            "name": "refresh",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeedLimitDataSensor.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "SpeedLimitDataSensor.refresh": {
            "name": "refresh",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VehicleConfigDataSensor.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "VehicleConfigDataSensor.refresh": {
            "name": "refresh",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriveStateDataSensor.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "DriveStateDataSensor.refresh": {
            "name": "refresh",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuiSettingsDataSensor.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "controller": []
            }
        },
        "GuiSettingsDataSensor.refresh": {
            "name": "refresh",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "teslajsonpy-master/teslajsonpy/homeassistant/__init__.py": {},
    "teslajsonpy-master/tests/tesla_mock.py": {
        "TeslaMock.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TeslaMock.mock_api": {
            "name": "mock_api",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_connect": {
            "name": "mock_connect",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_command": {
            "name": "mock_command",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_charging_params": {
            "name": "mock_get_charging_params",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_climate_params": {
            "name": "mock_get_climate_params",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_power_params": {
            "name": "mock_get_power_params",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_power_unknown_grid_params": {
            "name": "mock_get_power_unknown_grid_params",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_drive_params": {
            "name": "mock_get_drive_params",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_gui_params": {
            "name": "mock_get_gui_params",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_state_params": {
            "name": "mock_get_state_params",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_vehicles": {
            "name": "mock_get_vehicles",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_get_last_update_time": {
            "name": "mock_get_last_update_time",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.mock_update": {
            "name": "mock_update",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_connect": {
            "name": "controller_connect",
            "location": 134,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {}
        },
        "TeslaMock.controller_get_charging_params": {
            "name": "controller_get_charging_params",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_climate_params": {
            "name": "controller_get_climate_params",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_power_params": {
            "name": "controller_get_power_params",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_power_unknown_grid_params": {
            "name": "controller_get_power_unknown_grid_params",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_drive_params": {
            "name": "controller_get_drive_params",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_gui_params": {
            "name": "controller_get_gui_params",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_state_params": {
            "name": "controller_get_state_params",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.controller_get_vehicles": {
            "name": "controller_get_vehicles",
            "location": 177,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "TeslaMock.connection_generate_oauth": {
            "name": "connection_generate_oauth",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TeslaMock.data_request_vehicle": {
            "name": "data_request_vehicle",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_charge_state": {
            "name": "data_request_charge_state",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_climate_state": {
            "name": "data_request_climate_state",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_vehicle_state": {
            "name": "data_request_vehicle_state",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_energy_site": {
            "name": "data_request_energy_site",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_energy_site_no_name": {
            "name": "data_request_energy_site_no_name",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_energy_state": {
            "name": "data_request_energy_state",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.data_request_energy_state_unknown_grid": {
            "name": "data_request_energy_state_unknown_grid",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TeslaMock.command_ok": {
            "name": "command_ok",
            "location": 224,
            "return": [],
            "arguments": {}
        }
    },
    "teslajsonpy-master/tests/test_tesla_exception.py": {
        "test_code_as_string": {
            "name": "test_code_as_string",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_lt_300": {
            "name": "test_code_lt_300",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_400": {
            "name": "test_code_400",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_401": {
            "name": "test_code_401",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_402": {
            "name": "test_code_402",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_403": {
            "name": "test_code_403",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_404": {
            "name": "test_code_404",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_405": {
            "name": "test_code_405",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_408": {
            "name": "test_code_408",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_423": {
            "name": "test_code_423",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_429": {
            "name": "test_code_429",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_500": {
            "name": "test_code_500",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_503": {
            "name": "test_code_503",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_504": {
            "name": "test_code_504",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_505": {
            "name": "test_code_505",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/tests/__init__.py": {},
    "teslajsonpy-master/tests/unit_tests/test_polling_interval.py": {
        "test_update_interval": {
            "name": "test_update_interval",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_set_update_interval_vin": {
            "name": "test_set_update_interval_vin",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_update_interval_vin": {
            "name": "test_get_update_interval_vin",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/__init__.py": {},
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_alerts.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_battery_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_class": {
            "name": "test_device_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_calculate_update_interval.py": {
        "test_interval_driving": {
            "name": "test_interval_driving",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_default_charging": {
            "name": "test_interval_policy_default_charging",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_default_charging_idle": {
            "name": "test_interval_policy_default_charging_idle",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_default_completed": {
            "name": "test_interval_policy_default_completed",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_default_completed_idle": {
            "name": "test_interval_policy_default_completed_idle",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_default_disconnected_idle": {
            "name": "test_interval_policy_default_disconnected_idle",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_always": {
            "name": "test_interval_policy_always",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_always_disconnected_idle": {
            "name": "test_interval_policy_always_disconnected_idle",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_connected_charging": {
            "name": "test_interval_policy_connected_charging",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_connected_completed": {
            "name": "test_interval_policy_connected_completed",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_connected_completed_idle": {
            "name": "test_interval_policy_connected_completed_idle",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_connected_disconnected": {
            "name": "test_interval_policy_connected_disconnected",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_interval_policy_connected_disconnected_idle": {
            "name": "test_interval_policy_connected_disconnected_idle",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_charger_connection_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_charger_lock.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_locked_on_init": {
            "name": "test_is_locked_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_charger_switch.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_charging_on_init": {
            "name": "test_is_charging_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_charging_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_class": {
            "name": "test_device_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_state_class": {
            "name": "test_state_class",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_climate.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_values_on_init": {
            "name": "test_get_values_on_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_frunk_lock.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_locked_on_init": {
            "name": "test_is_locked_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_gps_tracker.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_location_on_init": {
            "name": "test_get_location_on_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_heated_seat.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_seat_heat_level_on_init": {
            "name": "test_get_seat_heat_level_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_heated_steering_wheel.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_steering_wheel_heat_on_init": {
            "name": "test_get_steering_wheel_heat_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_helper_functions.py": {
        "test_climate_params": {
            "name": "test_climate_params",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_charging_params": {
            "name": "test_charging_params",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_state_params": {
            "name": "test_state_params",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_drive_params": {
            "name": "test_drive_params",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_updates_helper": {
            "name": "test_updates_helper",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_update_time": {
            "name": "test_last_update_time",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_park_time": {
            "name": "test_last_park_time",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_wake_up_time": {
            "name": "test_last_wake_up_time",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_car_online": {
            "name": "test_set_car_online",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_homelink.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_lock.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_locked_on_init": {
            "name": "test_is_locked_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_odometer_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_class": {
            "name": "test_device_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_online_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_parking_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_power_sensor.py": {
        "test_device_class": {
            "name": "test_device_class",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_no_name": {
            "name": "test_device_no_name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_power_on_init": {
            "name": "test_get_power_on_init",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_range_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_class": {
            "name": "test_device_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_value_on_init": {
            "name": "test_get_value_on_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_range_switch.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_maxrange_on_init": {
            "name": "test_is_maxrange_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_sentry_mode_switch.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_available_true": {
            "name": "test_available_true",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_available_false": {
            "name": "test_available_false",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_on_false": {
            "name": "test_is_on_false",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_on_true": {
            "name": "test_is_on_true",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_on_unavailable": {
            "name": "test_is_on_unavailable",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_temp_sensor.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_device_class": {
            "name": "test_device_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_temp_on_init": {
            "name": "test_get_temp_on_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_trunk_lock.py": {
        "test_has_battery": {
            "name": "test_has_battery",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_locked_on_init": {
            "name": "test_is_locked_on_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_vehicle_data.py": {
        "test_dict_to_attr": {
            "name": "test_dict_to_attr",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_dict_to_attr_no_dicts": {
            "name": "test_dict_to_attr_no_dicts",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/test_vehicle_device.py": {
        "test_is_armable": {
            "name": "test_is_armable",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_is_armed": {
            "name": "test_is_armed",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_values_on_init": {
            "name": "test_values_on_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "teslajsonpy-master/tests/unit_tests/homeassistant/__init__.py": {}
}
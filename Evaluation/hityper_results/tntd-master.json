{
    "tntd-master/src/tntd/src/__init__.py": {},
    "tntd-master/src/tntd/src/main/__init__.py": {},
    "tntd-master/src/tntd/src/main/boilerplate_mixins/eq_mixin.py": {
        "EqMixin.__eq__": {
            "name": "__eq__",
            "location": 2,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EqMixin.__ne__": {
            "name": "__ne__",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "tntd-master/src/tntd/src/main/boilerplate_mixins/hash_mixin.py": {
        "HashMixin.__hash__": {
            "name": "__hash__",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/boilerplate_mixins/repr_mixin.py": {
        "ReprMixin.__repr__": {
            "name": "__repr__",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/boilerplate_mixins/str_mixin.py": {
        "StrMixin.__str__": {
            "name": "__str__",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/boilerplate_mixins/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_service": [
                    "bytes",
                    "None",
                    "str",
                    "bool",
                    "list[int]",
                    "float",
                    "dict[, ]"
                ],
                "state_service": [
                    "bytes",
                    "None",
                    "str",
                    "bool",
                    "list[int]",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "Application.process_commands": {
            "name": "process_commands",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/data_sources/config_data_source.py": {
        "ConfigDataSource.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/data_sources/displays_data_source.py": {
        "DisplaysDataSource.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/data_sources/mouse_data_source.py": {
        "MouseDataSource.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MouseDataSource._get_mouse": {
            "name": "_get_mouse",
            "location": 16,
            "return": [
                "Mouse",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/data_sources/state_data_source.py": {
        "StateDataSource.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/data_sources/windows_data_source.py": {
        "WindowsDataSource.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsDataSource._is_window_visible": {
            "name": "_is_window_visible",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str"
                ]
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/data_sources/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/models/area.py": {},
    "tntd-master/src/tntd/src/main/core/models/config.py": {},
    "tntd-master/src/tntd/src/main/core/models/display.py": {},
    "tntd-master/src/tntd/src/main/core/models/geometry.py": {},
    "tntd-master/src/tntd/src/main/core/models/identity.py": {},
    "tntd-master/src/tntd/src/main/core/models/mouse.py": {},
    "tntd-master/src/tntd/src/main/core/models/point.py": {},
    "tntd-master/src/tntd/src/main/core/models/state.py": {},
    "tntd-master/src/tntd/src/main/core/models/window.py": {},
    "tntd-master/src/tntd/src/main/core/models/window_state.py": {},
    "tntd-master/src/tntd/src/main/core/models/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/repositories/mouse_repository.py": {
        "MouseRepository.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mouse_data_source": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ],
                "displays_data_source": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MouseRepository.get_mouse_position": {
            "name": "get_mouse_position",
            "location": 16,
            "return": [
                "None",
                "Point"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/repositories/state_repository.py": {
        "StateRepository.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_data_source": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "StateRepository.get_states": {
            "name": "get_states",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateRepository.update_state": {
            "name": "update_state",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "dict[str, int]"
                ]
            }
        },
        "StateRepository.get_state_index_by_area": {
            "name": "get_state_index_by_area",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "area": [
                    "typing.Any",
                    "None",
                    "bytes",
                    "bool",
                    "bytearray"
                ]
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/repositories/window_repository.py": {
        "WindowRepository.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows_data_source": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "dict[str, str]",
                    "None"
                ],
                "displays_data_source": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "dict[str, str]",
                    "None"
                ],
                "config_data_source": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "WindowRepository.get_window_geometry": {
            "name": "get_window_geometry",
            "location": 27,
            "return": [
                "Geometry"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str"
                ]
            }
        },
        "WindowRepository.get_area_by_window": {
            "name": "get_area_by_window",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "str"
                ]
            }
        },
        "WindowRepository.is_window_in_area": {
            "name": "is_window_in_area",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "dict[, ]"
                ],
                "area": [
                    "dict[, ]"
                ]
            }
        },
        "WindowRepository.get_all_windows_from_area": {
            "name": "get_all_windows_from_area",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "area": [
                    "list[]",
                    "str"
                ]
            }
        },
        "WindowRepository.get_window_by_id": {
            "name": "get_window_by_id",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "WindowRepository.get_active_window_id": {
            "name": "get_active_window_id",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowRepository.get_area_by_display": {
            "name": "get_area_by_display",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display": [
                    "typing.Callable[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WindowRepository.get_display_by_position": {
            "name": "get_display_by_position",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "set[typing.Optional[str]]",
                    "list[list[int]]"
                ]
            }
        },
        "WindowRepository.get_areas_related_to_displays": {
            "name": "get_areas_related_to_displays",
            "location": 81,
            "return": [
                "list[Area]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/repositories/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/services/state_service.py": {
        "StateService.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_repository": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "None",
                    "float"
                ],
                "window_repository": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "StateService.write_state_to_file": {
            "name": "write_state_to_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateService.update_states": {
            "name": "update_states",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateService._get_updated_state": {
            "name": "_get_updated_state",
            "location": 31,
            "return": [
                "list[src.main.core.models.state.State]",
                "list[src.scrape.models.Media]",
                "list[A]",
                "list[src.main.core.models.display.Display]",
                "list[reversion.models.Version]",
                "list[typing.Union[src.main.core.models.state.State,src.scrape.models.Media,A,src.main.core.models.display.Display,reversion.models.Version]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateService._get_actual_state": {
            "name": "_get_actual_state",
            "location": 58,
            "return": [
                "list[State]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/services/window_service.py": {
        "WindowService.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_repository": [
                    "list[dict[, ]]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "mouse_repository": [
                    "list[dict[, ]]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "state_repository": [
                    "list[dict[, ]]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "config_data_source": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "None",
                    "dict[str, dict[str, typing.Any]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "WindowService.activate_window": {
            "name": "activate_window",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str"
                ]
            }
        },
        "WindowService.control_window": {
            "name": "control_window",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "int",
                    "str"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "w": [
                    "int",
                    "str"
                ],
                "h": [
                    "int",
                    "str"
                ]
            }
        },
        "WindowService.tall": {
            "name": "tall",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "area": [
                    "int"
                ],
                "windows": []
            }
        },
        "WindowService.tile": {
            "name": "tile",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowService.cycle_backward": {
            "name": "cycle_backward",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowService.cycle": {
            "name": "cycle",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowService.control_window.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "twindow_id": [],
                "tx": [],
                "ty": [],
                "tw": [],
                "th": []
            }
        }
    },
    "tntd-master/src/tntd/src/main/core/services/__init__.py": {},
    "tntd-master/src/tntd/src/main/core/utils/constants.py": {},
    "tntd-master/src/tntd/src/main/core/utils/__init__.py": {},
    "tntd-master/src/tntd/src/tests/__init__.py": {},
    "tntd-master/src/tntd/src/tests/repositories/test_mouse_repository.py": {
        "TestWindowRepository.mouse_repository": {
            "name": "mouse_repository",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWindowRepository.test_get_mouse_position": {
            "name": "test_get_mouse_position",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mouse_repository": []
            }
        }
    },
    "tntd-master/src/tntd/src/tests/repositories/test_window_repository.py": {
        "TestWindowRepository.window_repository": {
            "name": "window_repository",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWindowRepository.dumb_windows": {
            "name": "dumb_windows",
            "location": 27,
            "return": [
                "list[Window]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowRepository.dumb_identities": {
            "name": "dumb_identities",
            "location": 35,
            "return": [
                "list[Identity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowRepository.dumb_areas": {
            "name": "dumb_areas",
            "location": 43,
            "return": [
                "list[Area]"
            ],
            "arguments": {
                "self": [],
                "dumb_identities": [
                    "str"
                ]
            }
        },
        "TestWindowRepository.dumb_displays": {
            "name": "dumb_displays",
            "location": 51,
            "return": [
                "list[Display]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWindowRepository.test_get_window_geometry": {
            "name": "test_get_window_geometry",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [],
                "window_repository": []
            }
        },
        "TestWindowRepository.test_get_area_by_window": {
            "name": "test_get_area_by_window",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "list[src.main.core.models.area.Area]"
                ],
                "window_repository": [],
                "dumb_areas": [
                    "list[src.main.core.models.area.Area]"
                ]
            }
        },
        "TestWindowRepository.test_is_window_in_area": {
            "name": "test_is_window_in_area",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "list[src.main.core.models.area.Area]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Callable[, ]]]]"
                ],
                "window_repository": [],
                "dumb_areas": [
                    "list[src.main.core.models.area.Area]",
                    "list[src.main.core.models.display.Display]"
                ]
            }
        },
        "TestWindowRepository.test_get_all_windows_from_area": {
            "name": "test_get_all_windows_from_area",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "bool",
                    "list[src.main.core.models.area.Area]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "str",
                    "dict[, ]"
                ],
                "window_repository": [],
                "dumb_windows": [
                    "list[src.main.core.models.window.Window]",
                    "list[src.main.core.models.display.Display]",
                    "tuple[]"
                ],
                "dumb_areas": [
                    "list[src.main.core.models.area.Area]",
                    "list[str]"
                ]
            }
        },
        "TestWindowRepository.test_get_window_by_id": {
            "name": "test_get_window_by_id",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "bool"
                ],
                "window_repository": [],
                "dumb_windows": [
                    "list[src.main.core.models.window.Window]",
                    "typing.Mapping",
                    "list[str]"
                ]
            }
        },
        "TestWindowRepository.test_get_active_window_id": {
            "name": "test_get_active_window_id",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ],
                "window_repository": []
            }
        },
        "TestWindowRepository.test_get_area_by_display": {
            "name": "test_get_area_by_display",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "list[src.main.core.models.area.Area]",
                    "int",
                    "str",
                    "dict[, ]",
                    "typing.Callable[..., None]"
                ],
                "window_repository": [],
                "dumb_areas": [
                    "list[src.main.core.models.area.Area]",
                    "dict[, ]"
                ],
                "dumb_displays": [
                    "list[src.main.core.models.display.Display]",
                    "list[src.main.core.models.area.Area]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestWindowRepository.test_get_display_by_position": {
            "name": "test_get_display_by_position",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "list[src.main.core.models.area.Area]",
                    "int",
                    "str",
                    "dict[, ]",
                    "typing.Callable[..., None]"
                ],
                "window_repository": [],
                "dumb_displays": [
                    "list[src.main.core.models.display.Display]",
                    "list[]"
                ]
            }
        },
        "TestWindowRepository.test_get_areas_related_to_displays": {
            "name": "test_get_areas_related_to_displays",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "list[src.main.core.models.area.Area]",
                    "bool"
                ],
                "window_repository": [],
                "dumb_areas": [
                    "list[src.main.core.models.area.Area]",
                    "bool"
                ],
                "dumb_displays": [
                    "list[src.main.core.models.display.Display]",
                    "list[src.main.core.models.window.Window]",
                    "bytes"
                ]
            }
        }
    },
    "tntd-master/src/tntd/src/tests/repositories/__init__.py": {},
    "tntd-master/src/tntd/src/tests/services/__init__.py": {}
}
{
    "todb-master/setup.py": {},
    "todb-master/test/test_config_parsing.py": {
        "InputFileConfigParsingTest.test_should_return_default_config_on_empty_input": {
            "name": "test_should_return_default_config_on_empty_input",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFileConfigParsingTest.test_should_return_custom_config_on_custom_input": {
            "name": "test_should_return_custom_config_on_custom_input",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/test_csv_parsing.py": {
        "CsvParsingTest.test_should_parse_example_csv_file": {
            "name": "test_should_parse_example_csv_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/test_data_types.py": {
        "DataModelParsingTest.test_should_parse_model_file": {
            "name": "test_should_parse_model_file",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataModelParsingTest.test_should_parse_lat_lon_strings": {
            "name": "test_should_parse_lat_lon_strings",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataModelParsingTest.test_should_parse_lat_lon_canonical_strings": {
            "name": "test_should_parse_lat_lon_canonical_strings",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataModelParsingTest.test_should_parse_float_in_comma_notation": {
            "name": "test_should_parse_float_in_comma_notation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/test_db_utils.py": {
        "setup_db_repository_test_class": {
            "name": "setup_db_repository_test_class",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ]
            }
        },
        "get_test_db_engine": {
            "name": "get_test_db_engine",
            "location": 15,
            "return": [],
            "arguments": {
                "debug": [
                    "bool"
                ]
            }
        }
    },
    "todb-master/test/test_entity_builder.py": {
        "EntityBuilderTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityBuilderTest.test_should_build_entity_with_each_type": {
            "name": "test_should_build_entity_with_each_type",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityBuilderTest.test_should_return_none_on_non_nullable_column": {
            "name": "test_should_return_none_on_non_nullable_column",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityBuilderTest.test_should_return_none_on_too_many_columns": {
            "name": "test_should_return_none_on_too_many_columns",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityBuilderTest.test_should_replace_value_with_none_if_column_nullable_and_value_non_parsable": {
            "name": "test_should_replace_value_with_none_if_column_nullable_and_value_non_parsable",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/test_sql_client.py": {
        "SqlClientTest.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "SqlClientTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClientTest.tearDown": {
            "name": "tearDown",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClientTest.test_should_create_and_drop_tables": {
            "name": "test_should_create_and_drop_tables",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClientTest.test_should_create_table_and_insert_data": {
            "name": "test_should_create_table_and_insert_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/test_utils.py": {
        "UtilsTest.test_should_measure_seconds_since_event": {
            "name": "test_should_measure_seconds_since_event",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_should_measure_seconds_between_events": {
            "name": "test_should_measure_seconds_between_events",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/test/__init__.py": {},
    "todb-master/todb/abstract.py": {
        "Model.__repr__": {
            "name": "__repr__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/todb/data_model.py": {
        "handle_lat_lon": {
            "name": "handle_lat_lon",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "lat_or_lon": []
            }
        },
        "handle_float": {
            "name": "handle_float",
            "location": 81,
            "return": [
                "float"
            ],
            "arguments": {
                "value": []
            }
        },
        "get_python_type": {
            "name": "get_python_type",
            "location": 93,
            "return": [],
            "arguments": {
                "conf_type": []
            }
        },
        "get_sql_type": {
            "name": "get_sql_type",
            "location": 97,
            "return": [],
            "arguments": {
                "conf_type": []
            }
        },
        "get_cass_type": {
            "name": "get_cass_type",
            "location": 101,
            "return": [],
            "arguments": {
                "conf_type": []
            }
        },
        "parse_model_file": {
            "name": "parse_model_file",
            "location": 133,
            "return": [
                "tuple[typing.Union[list[ConfColumn],InputFileConfig]]"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "_parse_primary_key_config": {
            "name": "_parse_primary_key_config",
            "location": 152,
            "return": [
                "None",
                "PrimaryKeyConf"
            ],
            "arguments": {
                "col_names": [],
                "pkey_value": []
            }
        },
        "InputFileConfig.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf_dict": []
            }
        },
        "InputFileConfig.file_encoding": {
            "name": "file_encoding",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFileConfig.has_header_row": {
            "name": "has_header_row",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFileConfig.row_delimiter": {
            "name": "row_delimiter",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFileConfig.cell_delimiter": {
            "name": "cell_delimiter",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfColumn.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "col_index": [],
                "conf_type": [],
                "nullable": [],
                "indexed": [],
                "unique": []
            }
        },
        "PrimaryKeyConf.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "columns": []
            }
        },
        "PrimaryKeyConf.is_clustered": {
            "name": "is_clustered",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/todb/db_client.py": {
        "DbClient.init_table": {
            "name": "init_table",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[todb.data_model.ConfColumn]",
                    "float",
                    "bool"
                ],
                "columns": [
                    "str",
                    "list[todb.data_model.ConfColumn]",
                    "float",
                    "bool"
                ],
                "pkey": [
                    "str",
                    "list[todb.data_model.ConfColumn]",
                    "float",
                    "bool"
                ]
            }
        },
        "DbClient.insert_in_batch": {
            "name": "insert_in_batch",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "list[list[str]]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Any",
                    "None"
                ],
                "objects": [
                    "str",
                    "list[list[str]]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "DbClient.insert_one_by_one": {
            "name": "insert_one_by_one",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "list[list[str]]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Any",
                    "None"
                ],
                "objects": [
                    "str",
                    "list[list[str]]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "DbClient.drop_table": {
            "name": "drop_table",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "DbClient.count": {
            "name": "count",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "list[list[str]]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "DbClient.close": {
            "name": "close",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/todb/entity_builder.py": {
        "EntityBuilder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "EntityBuilder.to_entity": {
            "name": "to_entity",
            "location": 27,
            "return": [
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "cells_in_row": [
                    "list[str]",
                    "list[int]",
                    "list[]",
                    "str"
                ]
            }
        },
        "EntityBuilder._cast_value_to_sql_compatible": {
            "name": "_cast_value_to_sql_compatible",
            "location": 36,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "column": [],
                "value": []
            }
        }
    },
    "todb-master/todb/fail_row_handler.py": {
        "FailRowHandler.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file_config": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[str, cerulean.path.Path]",
                    "dict[, ]"
                ],
                "output_file_path": [
                    "str",
                    "None"
                ]
            }
        },
        "FailRowHandler.handle_failed_rows": {
            "name": "handle_failed_rows",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": []
            }
        },
        "FailRowHandler._convert_rows_to_bytes": {
            "name": "_convert_rows_to_bytes",
            "location": 29,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[str, bool]",
                    "dict[str, list[typing.Any]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "todb-master/todb/importer.py": {
        "Importer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_client": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Importer.parse_and_import": {
            "name": "parse_and_import",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "dict[, ]"
                ],
                "rows": []
            }
        },
        "Importer.close": {
            "name": "close",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/todb/logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [],
                "log_file": [
                    "None",
                    "str"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "calling_module": [
                    "typing.Text"
                ]
            }
        }
    },
    "todb-master/todb/main.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "todb": {
            "name": "todb",
            "location": 39,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "cli_main": {
            "name": "cli_main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "todb-master/todb/parallel_executor.py": {
        "ParallelExecutor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "input_file_config": [
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "columns": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "pkey": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "table_name": [
                    "str",
                    "None"
                ],
                "failed_rows_file": [
                    "str",
                    "int"
                ]
            }
        },
        "ParallelExecutor.start": {
            "name": "start",
            "location": 28,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "input_file_name": [
                    "str"
                ]
            }
        },
        "ParsingWorker.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_queue": [
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]",
                    "str",
                    "dict[str, C]"
                ],
                "unsuccessful_rows_queue": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "Exception",
                    "None",
                    "dict[, ]",
                    "bool"
                ],
                "importer": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "table_name": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "ParsingWorker.run": {
            "name": "run",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsuccessfulRowsHandlingWorker.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unsuccessful_rows_queue": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "handler": [
                    "int",
                    "str",
                    "typing.Sequence[typing.MutableMapping]",
                    "typing.Sequence[typing.MutableSet]",
                    "dict[str, str]"
                ]
            }
        },
        "UnsuccessfulRowsHandlingWorker.run": {
            "name": "run",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todb-master/todb/params.py": {
        "InputParams.from_args": {
            "name": "from_args",
            "location": 21,
            "return": [
                "InputParams"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "dict[, ]"
                ],
                "args": []
            }
        },
        "InputParams.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "input_path": [
                    "str"
                ],
                "fail_output_path": [
                    "str",
                    "None"
                ],
                "sql_db": [
                    "bool",
                    "str",
                    "None",
                    "typing.MutableMapping"
                ],
                "cass_db": [
                    "bool",
                    "str",
                    "None",
                    "typing.MutableMapping"
                ],
                "table_name": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "processes": [
                    "None",
                    "str",
                    "bool"
                ],
                "chunk_size_kB": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "ca_file": [
                    "None",
                    "str"
                ]
            }
        },
        "InputParams._generate_table_name": {
            "name": "_generate_table_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "date_time": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "InputParams.validate": {
            "name": "validate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputParams._validate_path_exists": {
            "name": "_validate_path_exists",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_path": [
                    "str",
                    "None"
                ],
                "err_msg_fmt": [
                    "str"
                ]
            }
        },
        "InputParams._generate_fail_file_name": {
            "name": "_generate_fail_file_name",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "input_path": [
                    "str"
                ]
            }
        }
    },
    "todb-master/todb/parsing.py": {
        "CsvParser.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file_config": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "chunk_size_kB": [
                    "bool",
                    "float",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CsvParser.read_rows_in_chunks": {
            "name": "read_rows_in_chunks",
            "location": 13,
            "return": [
                "typing.Generator[list[]]",
                "typing.Generator[typing.Union[list[list[str]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "todb-master/todb/sql_client.py": {
        "SqlClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_url": [
                    "str",
                    "bool"
                ],
                "entity_builder": [
                    "bool",
                    "str",
                    "list[]",
                    "None",
                    "dict[str, str]"
                ],
                "db_engine": [
                    "None",
                    "bool",
                    "str",
                    "list[]",
                    "dict[str, str]"
                ],
                "ca_file": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SqlClient.init_table": {
            "name": "init_table",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "columns": [
                    "str",
                    "int",
                    "None"
                ],
                "pkey": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "SqlClient.drop_table": {
            "name": "drop_table",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SqlClient.count": {
            "name": "count",
            "location": 38,
            "return": [
                "tuple[typing.Union[str,str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "None"
                ]
            }
        },
        "SqlClient.insert_in_batch": {
            "name": "insert_in_batch",
            "location": 49,
            "return": [
                "tuple[typing.Union[bool,typing.Sequence[typing.Any],list[]]]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "None"
                ],
                "rows": [
                    "list[list[str]]",
                    "dict[str, int]",
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "SqlClient.insert_one_by_one": {
            "name": "insert_one_by_one",
            "location": 61,
            "return": [
                "list[typing.Union[list[str],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "None"
                ],
                "rows": [
                    "list[list[str]]",
                    "str"
                ]
            }
        },
        "SqlClient.close": {
            "name": "close",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClient._build_entities_from_rows": {
            "name": "_build_entities_from_rows",
            "location": 77,
            "return": [
                "tuple[typing.Union[list[typing.Union[list[],dict[, ]]],list[typing.Union[list[str],typing.Text,dict[, ]]]]]"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "list[list[str]]",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "SqlClient._insert_entities": {
            "name": "_insert_entities",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "list_of_model_dicts": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "str"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SqlClient._get_table": {
            "name": "_get_table",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Sequence[float]",
                    "float",
                    "None"
                ]
            }
        },
        "SqlClient._get_connection": {
            "name": "_get_connection",
            "location": 105,
            "return": [
                "frozenset",
                "int",
                "list[]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClient._get_db_engine": {
            "name": "_get_db_engine",
            "location": 110,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlClient._sql_table_from_columns": {
            "name": "_sql_table_from_columns",
            "location": 120,
            "return": [
                "Table"
            ],
            "arguments": {
                "self": [],
                "sql_metadata": [
                    "str",
                    "None",
                    "set[str]",
                    "typing.Callable[..., T]",
                    "dict[str, str]"
                ],
                "table_name": [
                    "str",
                    "None",
                    "set[str]",
                    "typing.Callable[..., T]",
                    "dict[str, str]"
                ],
                "columns": [
                    "str"
                ],
                "pkey": [
                    "str",
                    "None",
                    "bool",
                    "typing.Any"
                ]
            }
        }
    },
    "todb-master/todb/util.py": {
        "seconds_between": {
            "name": "seconds_between",
            "location": 9,
            "return": [
                "float"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "None",
                    "int"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "proj_path_to_abs": {
            "name": "proj_path_to_abs",
            "location": 13,
            "return": [],
            "arguments": {
                "rel_project_path": [
                    "str"
                ]
            }
        },
        "limit_or_default": {
            "name": "limit_or_default",
            "location": 19,
            "return": [
                "int",
                "float",
                "set[]",
                "list[]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "default": [
                    "int",
                    "float",
                    "set[]"
                ],
                "lower_bound": [
                    "None",
                    "int",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "upper_bound": [
                    "None",
                    "int",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "gen_uuid_from_obj": {
            "name": "gen_uuid_from_obj",
            "location": 34,
            "return": [],
            "arguments": {
                "o": [
                    "str"
                ],
                "sorted_keys": []
            }
        },
        "gen_uuid": {
            "name": "gen_uuid",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "typing.BinaryIO",
                    "bool"
                ]
            }
        },
        "split_in_half": {
            "name": "split_in_half",
            "location": 43,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "values": []
            }
        }
    },
    "todb-master/todb/__init__.py": {}
}
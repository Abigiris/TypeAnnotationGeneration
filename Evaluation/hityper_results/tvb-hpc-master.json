{
    "tvb-hpc-master/.ycm_extra_conf.py": {
        "FlagsForFile": {
            "name": "FlagsForFile",
            "location": 12,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "list[tuple[typing.Union[str,str,str]]]"
                ]
            }
        }
    },
    "tvb-hpc-master/setup.py": {},
    "tvb-hpc-master/docs/conf.py": {},
    "tvb-hpc-master/dsl/__init__.py": {},
    "tvb-hpc-master/dsl/dsl_cuda/LEMS2CUDA.py": {
        "default_lems_folder": {
            "name": "default_lems_folder",
            "location": 10,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {}
        },
        "lems_file": {
            "name": "lems_file",
            "location": 16,
            "return": [],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "folder": [
                    "None",
                    "str"
                ]
            }
        },
        "default_template": {
            "name": "default_template",
            "location": 20,
            "return": [
                "Template"
            ],
            "arguments": {}
        },
        "load_model": {
            "name": "load_model",
            "location": 26,
            "return": [
                "Model"
            ],
            "arguments": {
                "model_filename": [
                    "str",
                    "typing.Pattern",
                    "None"
                ],
                "folder": [
                    "None",
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "render_model": {
            "name": "render_model",
            "location": 37,
            "return": [],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "template": [
                    "None",
                    "str",
                    "typing.Mapping"
                ],
                "folder": [
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "cuda_templating": {
            "name": "cuda_templating",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "model_filename": [
                    "str"
                ],
                "folder": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "tvb-hpc-master/dsl/dsl_cuda/tmpl8_CUDA.py": {},
    "tvb-hpc-master/dsl/dsl_cuda/__init__.py": {},
    "tvb-hpc-master/dsl/dsl_cuda/example/cuda_run.py": {
        "CudaRun.make_kernel": {
            "name": "make_kernel",
            "location": 15,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "warp_size": [
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "list[str]"
                ],
                "block_dim_x": [
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "list[str]"
                ],
                "args": [],
                "lineinfo": [
                    "bool"
                ],
                "nh": [
                    "typing.Text"
                ]
            }
        },
        "CudaRun.cf": {
            "name": "cf",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "CudaRun.nbytes": {
            "name": "nbytes",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CudaRun.make_gpu_data": {
            "name": "make_gpu_data",
            "location": 58,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], ]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "CudaRun.gpu_info": {
            "name": "gpu_info",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CudaRun.run_simulation": {
            "name": "run_simulation",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [
                    "int",
                    "list[str]"
                ],
                "lengths": [
                    "int",
                    "list[str]"
                ],
                "params_matrix": [
                    "int",
                    "list[str]"
                ],
                "speeds": [
                    "bool",
                    "float",
                    "str",
                    "dict[, ]"
                ],
                "logger": [],
                "args": [],
                "n_nodes": [
                    "int",
                    "float"
                ],
                "n_work_items": [
                    "bool"
                ],
                "n_params": [
                    "int",
                    "dict[, ]",
                    "float"
                ],
                "nstep": [
                    "int",
                    "None",
                    "float",
                    "list[]"
                ],
                "n_inner_steps": [
                    "int",
                    "dict[, ]",
                    "float"
                ],
                "buf_len": [
                    "typing.Mapping"
                ],
                "states": [
                    "typing.Mapping",
                    "float"
                ],
                "dt": [
                    "int",
                    "dict[, ]",
                    "float"
                ],
                "min_speed": [
                    "int",
                    "dict[, ]",
                    "float"
                ]
            }
        }
    },
    "tvb-hpc-master/dsl/dsl_cuda/example/cuda_setup.py": {
        "TVB_test.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TVB_test.tvb_connectivity": {
            "name": "tvb_connectivity",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "speed": [],
                "global_coupling": [],
                "dt": []
            }
        },
        "TVB_test.parse_args": {
            "name": "parse_args",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TVB_test.expand_params": {
            "name": "expand_params",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "couplings": [],
                "speeds": []
            }
        },
        "TVB_test.setup_params": {
            "name": "setup_params",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "nc": [],
                "ns": []
            }
        },
        "TVB_test.check_results": {
            "name": "check_results",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "n_nodes": [],
                "n_work_items": [],
                "tavg": [],
                "weights": [],
                "speeds": [],
                "couplings": [],
                "logger": [],
                "args": []
            }
        },
        "TVB_test.start_cuda": {
            "name": "start_cuda",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "TVB_test.set_CUDAmodel_dir": {
            "name": "set_CUDAmodel_dir",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TVB_test.set_states": {
            "name": "set_states",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TVB_test.compare_with_ref": {
            "name": "compare_with_ref",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "tavg0": []
            }
        },
        "TVB_test.startsim": {
            "name": "startsim",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/dsl_cuda/example/__init__.py": {},
    "tvb-hpc-master/dsl/dsl_cuda/XMLmodels/__init__.py": {},
    "tvb-hpc-master/dsl/lems/__init__.py": {},
    "tvb-hpc-master/dsl/lems/base/base.py": {
        "LEMSBase.copy": {
            "name": "copy",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LEMSBase.toxml": {
            "name": "toxml",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/base/errors.py": {
        "LEMSError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LEMSError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/base/map.py": {
        "Map.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/base/stack.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.top": {
            "name": "top",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/base/util.py": {
        "make_id": {
            "name": "make_id",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "merge_maps": {
            "name": "merge_maps",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "typing.Sequence[T]",
                    "float"
                ],
                "base": []
            }
        },
        "merge_lists": {
            "name": "merge_lists",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [],
                "base": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "validate_lems": {
            "name": "validate_lems",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "tvb-hpc-master/dsl/lems/base/__init__.py": {},
    "tvb-hpc-master/dsl/lems/model/component.py": {
        "Parameter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dimension": [],
                "description": []
            }
        },
        "Parameter.toxml": {
            "name": "toxml",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [],
                "value": [],
                "description": []
            }
        },
        "Fixed.toxml": {
            "name": "toxml",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Property.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dimension": [],
                "default_value": [],
                "description": []
            }
        },
        "Property.toxml": {
            "name": "toxml",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexParameter.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "IndexParameter.toxml": {
            "name": "toxml",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DerivedParameter.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "expression": [],
                "description": []
            }
        },
        "DerivedParameter.toxml": {
            "name": "toxml",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": [],
                "domain": [],
                "symbol": [],
                "description": []
            }
        },
        "Constant.toxml": {
            "name": "toxml",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "dimension": [],
                "symbol": [],
                "description": []
            }
        },
        "Function.toxml": {
            "name": "toxml",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exposure.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "choices": [],
                "default": [],
                "description": []
            }
        },
        "Exposure.toxml": {
            "name": "toxml",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dimension": [],
                "description": []
            }
        },
        "Requirement.toxml": {
            "name": "toxml",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComponentRequirement.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "ComponentRequirement.toxml": {
            "name": "toxml",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceRequirement.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type": [],
                "description": []
            }
        },
        "InstanceRequirement.toxml": {
            "name": "toxml",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Children.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_": [],
                "multiple": []
            }
        },
        "Children.toxml": {
            "name": "toxml",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "Text.toxml": {
            "name": "toxml",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.__str__": {
            "name": "__str__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.__repr__": {
            "name": "__repr__",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_": [],
                "description": []
            }
        },
        "Link.toxml": {
            "name": "toxml",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": []
            }
        },
        "Path.toxml": {
            "name": "toxml",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventPort.__init__": {
            "name": "__init__",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "direction": [],
                "description": []
            }
        },
        "EventPort.toxml": {
            "name": "toxml",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComponentReference.__init__": {
            "name": "__init__",
            "location": 637,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_": [],
                "local": []
            }
        },
        "ComponentReference.toxml": {
            "name": "toxml",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attachments.__init__": {
            "name": "__init__",
            "location": 675,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_": [],
                "description": []
            }
        },
        "Attachments.toxml": {
            "name": "toxml",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fat.__init__": {
            "name": "__init__",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fat.add_parameter": {
            "name": "add_parameter",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "Fat.add_property": {
            "name": "add_property",
            "location": 808,
            "return": [],
            "arguments": {
                "self": [],
                "property": []
            }
        },
        "Fat.add_derived_parameter": {
            "name": "add_derived_parameter",
            "location": 818,
            "return": [],
            "arguments": {
                "self": [],
                "derived_parameter": []
            }
        },
        "Fat.add_index_parameter": {
            "name": "add_index_parameter",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "index_parameter": []
            }
        },
        "Fat.add_constant": {
            "name": "add_constant",
            "location": 838,
            "return": [],
            "arguments": {
                "self": [],
                "constant": []
            }
        },
        "Fat.add_function": {
            "name": "add_function",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Fat.add_exposure": {
            "name": "add_exposure",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "exposure": []
            }
        },
        "Fat.add_requirement": {
            "name": "add_requirement",
            "location": 868,
            "return": [],
            "arguments": {
                "self": [],
                "requirement": []
            }
        },
        "Fat.add_component_requirement": {
            "name": "add_component_requirement",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "component_requirement": []
            }
        },
        "Fat.add_instance_requirement": {
            "name": "add_instance_requirement",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "instance_requirement": []
            }
        },
        "Fat.add_children": {
            "name": "add_children",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "children": []
            }
        },
        "Fat.add_text": {
            "name": "add_text",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Fat.add_link": {
            "name": "add_link",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Fat.add_path": {
            "name": "add_path",
            "location": 928,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Fat.add_event_port": {
            "name": "add_event_port",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "event_port": []
            }
        },
        "Fat.add_component_reference": {
            "name": "add_component_reference",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "component_reference": []
            }
        },
        "Fat.add_attachments": {
            "name": "add_attachments",
            "location": 958,
            "return": [],
            "arguments": {
                "self": [],
                "attachments": []
            }
        },
        "Fat.add": {
            "name": "add",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "ComponentType.__init__": {
            "name": "__init__",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "extends": []
            }
        },
        "ComponentType.__str__": {
            "name": "__str__",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComponentType.toxml": {
            "name": "toxml",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [],
                "type_": []
            }
        },
        "Component.__str__": {
            "name": "__str__",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.__repr__": {
            "name": "__repr__",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.set_parameter": {
            "name": "set_parameter",
            "location": 1164,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [],
                "value": []
            }
        },
        "Component.add_child": {
            "name": "add_child",
            "location": 1177,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Component.add": {
            "name": "add",
            "location": 1187,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Component.set_parent_id": {
            "name": "set_parent_id",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": [],
                "parent_id": []
            }
        },
        "Component.toxml": {
            "name": "toxml",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FatComponent.__init__": {
            "name": "__init__",
            "location": 1235,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [],
                "type_": []
            }
        },
        "FatComponent.__str__": {
            "name": "__str__",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FatComponent.add_child_component": {
            "name": "add_child_component",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": [],
                "child_component": []
            }
        },
        "FatComponent.add": {
            "name": "add",
            "location": 1274,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "FatComponent.set_parent_id": {
            "name": "set_parent_id",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": [],
                "parent_id": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/dynamics.py": {
        "StateVariable.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "bool",
                    "str"
                ],
                "boundaries": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "StateVariable.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariable.toxml": {
            "name": "toxml",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DerivedVariable.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "DerivedVariable.toxml": {
            "name": "toxml",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "Exception",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Case.toxml": {
            "name": "toxml",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalDerivedVariable.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "condition": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "exposure": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ],
                "cases": [
                    "str"
                ]
            }
        },
        "ConditionalDerivedVariable.add_case": {
            "name": "add_case",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "float",
                    "int"
                ]
            }
        },
        "ConditionalDerivedVariable.add": {
            "name": "add",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "typing.IO",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "ConditionalDerivedVariable.toxml": {
            "name": "toxml",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeDerivative.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "None"
                ],
                "expression": [
                    "str"
                ]
            }
        },
        "TimeDerivative.toxml": {
            "name": "toxml",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateAssignment.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "StateAssignment.toxml": {
            "name": "toxml",
            "location": 323,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventOut.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "float"
                ]
            }
        },
        "EventOut.toxml": {
            "name": "toxml",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transition.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regime": [
                    "int",
                    "float"
                ]
            }
        },
        "Transition.toxml": {
            "name": "toxml",
            "location": 375,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.__str__": {
            "name": "__str__",
            "location": 397,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.add_action": {
            "name": "add_action",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "float",
                    "int"
                ]
            }
        },
        "EventHandler.add": {
            "name": "add",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "OnStart.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnStart.__str__": {
            "name": "__str__",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnStart.toxml": {
            "name": "toxml",
            "location": 443,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnCondition.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "OnCondition.__str__": {
            "name": "__str__",
            "location": 486,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnCondition.toxml": {
            "name": "toxml",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnEvent.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "float"
                ]
            }
        },
        "OnEvent.__str__": {
            "name": "__str__",
            "location": 528,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnEvent.toxml": {
            "name": "toxml",
            "location": 532,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnEntry.__init__": {
            "name": "__init__",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnEntry.toxml": {
            "name": "toxml",
            "location": 564,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KineticScheme.__init__": {
            "name": "__init__",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "typing.Sequence[typing.Any]",
                    "bool"
                ],
                "nodes": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "state_variable": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "edges": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "edge_source": [
                    "bool",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "edge_target": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "forward_rate": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "reverse_rate": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "KineticScheme.toxml": {
            "name": "toxml",
            "location": 630,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavioral.__init__": {
            "name": "__init__",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavioral.has_content": {
            "name": "has_content",
            "location": 693,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavioral.clear": {
            "name": "clear",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavioral.add_state_variable": {
            "name": "add_state_variable",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sv": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None",
                    "set[str]",
                    "typing.Sequence[]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "Behavioral.add_derived_variable": {
            "name": "add_derived_variable",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv": [
                    "set[T]"
                ]
            }
        },
        "Behavioral.add_conditional_derived_variable": {
            "name": "add_conditional_derived_variable",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cdv": [
                    "typing.Pattern",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Behavioral.add_time_derivative": {
            "name": "add_time_derivative",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "td": [
                    "set[str]",
                    "dict[, ]",
                    "str",
                    "dict[str, list[str]]"
                ]
            }
        },
        "Behavioral.add_event_handler": {
            "name": "add_event_handler",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eh": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Behavioral.add_kinetic_scheme": {
            "name": "add_kinetic_scheme",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ks": [
                    "int",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Behavioral.add": {
            "name": "add",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "dict[, ]"
                ]
            }
        },
        "Behavioral.toxml": {
            "name": "toxml",
            "location": 793,
            "return": [
                "tuple[typing.Text]",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regime.__init__": {
            "name": "__init__",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ],
                "parent_behavioral": [
                    "int",
                    "str",
                    "typing.Sequence[]"
                ],
                "initial": [
                    "bool"
                ]
            }
        },
        "Dynamics.__init__": {
            "name": "__init__",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.add_regime": {
            "name": "add_regime",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regime": [
                    "str",
                    "int"
                ]
            }
        },
        "Dynamics.add": {
            "name": "add",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "set[int]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Dynamics.has_content": {
            "name": "has_content",
            "location": 904,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/fundamental.py": {
        "Include.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Include.toxml": {
            "name": "toxml",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimension.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "Dimension.toxml": {
            "name": "toxml",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "symbol": [
                    "bool",
                    "typing.Hashable"
                ],
                "dimension": [
                    "bool",
                    "float",
                    "str",
                    "None",
                    "list[typing.Any]",
                    "tuple[str]"
                ],
                "power": [
                    "int"
                ],
                "scale": [
                    "float"
                ],
                "offset": [
                    "float"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "Unit.toxml": {
            "name": "toxml",
            "location": 146,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_includes": [
                    "bool"
                ],
                "fail_on_missing_includes": [
                    "bool"
                ]
            }
        },
        "Model.add_target": {
            "name": "add_target",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "float",
                    "int"
                ]
            }
        },
        "Model.add_include": {
            "name": "add_include",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "Model.add_dimension": {
            "name": "add_dimension",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "str",
                    "int"
                ]
            }
        },
        "Model.add_unit": {
            "name": "add_unit",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.add_component_type": {
            "name": "add_component_type",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_type": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.add_component": {
            "name": "add_component",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "bool",
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Model.add_fat_component": {
            "name": "add_fat_component",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fat_component": [
                    "int",
                    "str"
                ]
            }
        },
        "Model.add_constant": {
            "name": "add_constant",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constant": [
                    "str",
                    "int"
                ]
            }
        },
        "Model.add": {
            "name": "add",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Model.import_from_file": {
            "name": "import_from_file",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Model.resolve": {
            "name": "resolve",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.resolve_component_type": {
            "name": "resolve_component_type",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_type": [
                    "typing.Type"
                ]
            }
        },
        "Model.merge_component_types": {
            "name": "merge_component_types",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ct": [],
                "base_ct": []
            }
        },
        "Model.fatten_component": {
            "name": "fatten_component",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "c": [
                    "list[str]",
                    "typing.Counter"
                ]
            }
        },
        "Model.get_parent_component": {
            "name": "get_parent_component",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fc": [
                    "typing.Sequence[str]",
                    "None",
                    "str"
                ]
            }
        },
        "Model.resolve_structure": {
            "name": "resolve_structure",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fc": [
                    "str",
                    "int"
                ],
                "ct": [
                    "int",
                    "list['cirq.Qid']",
                    "list[]"
                ]
            }
        },
        "Model.resolve_simulation": {
            "name": "resolve_simulation",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fc": [
                    "str",
                    "int",
                    "float"
                ],
                "ct": []
            }
        },
        "Model.get_numeric_value": {
            "name": "get_numeric_value",
            "location": 804,
            "return": [
                "None",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "value_str": [],
                "dimension": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/simulation.py": {
        "Run.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "str",
                    "int",
                    "set[str]"
                ],
                "variable": [
                    "str",
                    "int",
                    "set[str]"
                ],
                "increment": [
                    "str",
                    "int",
                    "set[str]"
                ],
                "total": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "Run.toxml": {
            "name": "toxml",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "scale": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "color": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Record.toxml": {
            "name": "toxml",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventRecord.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "eventPort": [
                    "int",
                    "str"
                ]
            }
        },
        "EventRecord.toxml": {
            "name": "toxml",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataOutput.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataDisplay.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "data_region": [
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "DataDisplay.toxml": {
            "name": "toxml",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataWriter.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "file_name": [
                    "str",
                    "None"
                ]
            }
        },
        "DataWriter.toxml": {
            "name": "toxml",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataWriter.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventWriter.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "file_name": [
                    "str",
                    "int",
                    "None"
                ],
                "format": [
                    "str",
                    "bool"
                ]
            }
        },
        "EventWriter.toxml": {
            "name": "toxml",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventWriter.__str__": {
            "name": "__str__",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulation.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulation.add_run": {
            "name": "add_run",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run": [
                    "str",
                    "bool",
                    "set[]"
                ]
            }
        },
        "Simulation.add_record": {
            "name": "add_record",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Simulation.add_event_record": {
            "name": "add_event_record",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_record": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[R]"
                ]
            }
        },
        "Simulation.add_data_display": {
            "name": "add_data_display",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_display": [
                    "bool",
                    "str"
                ]
            }
        },
        "Simulation.add_data_writer": {
            "name": "add_data_writer",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_writer": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Simulation.add_event_writer": {
            "name": "add_event_writer",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_writer": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Simulation.add": {
            "name": "add",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Simulation.toxml": {
            "name": "toxml",
            "location": 367,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/structure.py": {
        "With.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ],
                "as_": [
                    "int",
                    "str",
                    "float"
                ],
                "list": [
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ],
                "index": [
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "With.toxml": {
            "name": "toxml",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tunnel.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "end_a": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "end_b": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "component_a": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "component_b": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "dict[int, dict[int, typing.Any]]"
                ]
            }
        },
        "Tunnel.toxml": {
            "name": "toxml",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventConnection.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "int",
                    "None",
                    "str"
                ],
                "to": [
                    "int",
                    "None",
                    "str"
                ],
                "source_port": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "target_port": [
                    "str",
                    "None",
                    "int"
                ],
                "receiver": [
                    "bool",
                    "str",
                    "typing.Callable[str, typing.Any]",
                    "typing.Mapping"
                ],
                "receiver_container": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "typing.Pattern"
                ]
            }
        },
        "EventConnection.__eq__": {
            "name": "__eq__",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int"
                ]
            }
        },
        "EventConnection.toxml": {
            "name": "toxml",
            "location": 140,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildInstance.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "int",
                    "typing.Collection"
                ],
                "referenced_component": [
                    "None",
                    "int",
                    "typing.Collection"
                ]
            }
        },
        "ChildInstance.__eq__": {
            "name": "__eq__",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "ChildInstance.toxml": {
            "name": "toxml",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assign.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property": [
                    "int",
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "int",
                    "typing.BinaryIO",
                    "dict[, ]"
                ]
            }
        },
        "Assign.__eq__": {
            "name": "__eq__",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ]
            }
        },
        "Assign.toxml": {
            "name": "toxml",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstantiate.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "None",
                    "str",
                    "bool",
                    "typing.Type"
                ],
                "number": [
                    "None",
                    "int",
                    "str"
                ],
                "component_type": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "MultiInstantiate.__eq__": {
            "name": "__eq__",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "tuple[]",
                    "int"
                ]
            }
        },
        "MultiInstantiate.add_assign": {
            "name": "add_assign",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assign": [
                    "float",
                    "int"
                ]
            }
        },
        "MultiInstantiate.add": {
            "name": "add",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "typing.IO",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "MultiInstantiate.toxml": {
            "name": "toxml",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForEach.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "list[]"
                ],
                "as_": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ForEach.add_for_each": {
            "name": "add_for_each",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fe": [
                    "float",
                    "int"
                ]
            }
        },
        "ForEach.add_event_connection": {
            "name": "add_event_connection",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ec": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ForEach.toxml": {
            "name": "toxml",
            "location": 334,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Structure.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Structure.has_content": {
            "name": "has_content",
            "location": 384,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Structure.add_with": {
            "name": "add_with",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_": [
                    "float",
                    "typing.Iterable[int]",
                    "bool"
                ]
            }
        },
        "Structure.add_tunnel": {
            "name": "add_tunnel",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tunnel": [
                    "str",
                    "int"
                ]
            }
        },
        "Structure.add_event_connection": {
            "name": "add_event_connection",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ec": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Structure.add_child_instance": {
            "name": "add_child_instance",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ci": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Structure.add_multi_instantiate": {
            "name": "add_multi_instantiate",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mi": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Structure.add_for_each": {
            "name": "add_for_each",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fe": [
                    "float",
                    "int"
                ]
            }
        },
        "Structure.add": {
            "name": "add",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "Structure.toxml": {
            "name": "toxml",
            "location": 474,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/model/__init__.py": {},
    "tvb-hpc-master/dsl/lems/parser/expr.py": {
        "ExprNode.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ]
            }
        },
        "ValueNode.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ValueNode.clean_up": {
            "name": "clean_up",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueNode.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueNode.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueNode.to_python_expr": {
            "name": "to_python_expr",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpNode.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[]"
                ],
                "left": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[]"
                ],
                "right": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[]"
                ]
            }
        },
        "OpNode.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpNode.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpNode.to_python_expr": {
            "name": "to_python_expr",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Func1Node.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ],
                "param": [
                    "int",
                    "float",
                    "list[list[T]]"
                ]
            }
        },
        "Func1Node.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Func1Node.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Func1Node.to_python_expr": {
            "name": "to_python_expr",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprParser.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_string": [
                    "str"
                ]
            }
        },
        "ExprParser.is_op": {
            "name": "is_op",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ExprParser.is_func": {
            "name": "is_func",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "int"
                ]
            }
        },
        "ExprParser.is_sym": {
            "name": "is_sym",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "ExprParser.priority": {
            "name": "priority",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "op": [
                    "int"
                ]
            }
        },
        "ExprParser.tokenize": {
            "name": "tokenize",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprParser.make_op_node": {
            "name": "make_op_node",
            "location": 327,
            "return": [
                "Func1Node",
                "OpNode"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "dict[str, typing.Any]"
                ],
                "right": [
                    "int"
                ]
            }
        },
        "ExprParser.cleanup_stacks": {
            "name": "cleanup_stacks",
            "location": 341,
            "return": [
                "ValueNode",
                "list[]",
                "int",
                "bytes",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprParser.parse_token_list_rec": {
            "name": "parse_token_list_rec",
            "location": 362,
            "return": [
                "int",
                "list[int]",
                "dict[int, str]",
                "typing.Final"
            ],
            "arguments": {
                "self": [],
                "min_precedence": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "ExprParser.parse": {
            "name": "parse",
            "location": 488,
            "return": [
                "str",
                "list[str]",
                "dict[, ]",
                "dict[str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprParser.parse2": {
            "name": "parse2",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprParser.__str__": {
            "name": "__str__",
            "location": 519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/dsl/lems/parser/LEMS.py": {
        "get_nons_tag_from_node": {
            "name": "get_nons_tag_from_node",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "node": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "LEMSXMLNode.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pyxmlnode": [
                    "str"
                ]
            }
        },
        "LEMSXMLNode.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEMSFileParser.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None"
                ],
                "include_dirs": [
                    "list[]"
                ],
                "include_includes": [
                    "bool"
                ]
            }
        },
        "LEMSFileParser.init_parser": {
            "name": "init_parser",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEMSFileParser.process_nested_tags": {
            "name": "process_nested_tags",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Iterable[object]",
                    "bytes",
                    "typing.Sequence[str]",
                    "None",
                    "bool"
                ],
                "tag": [
                    "typing.Text"
                ]
            }
        },
        "LEMSFileParser.parse": {
            "name": "parse",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xmltext": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "LEMSFileParser.raise_error": {
            "name": "raise_error",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_assertion": {
            "name": "parse_assertion",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ]
            }
        },
        "LEMSFileParser.parse_attachments": {
            "name": "parse_attachments",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_child": {
            "name": "parse_child",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_child_instance": {
            "name": "parse_child_instance",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ]
            }
        },
        "LEMSFileParser.parse_children": {
            "name": "parse_children",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_component_by_typename": {
            "name": "parse_component_by_typename",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "list[]"
                ],
                "type_": [
                    "list[str]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "list[]",
                    "None",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_component": {
            "name": "parse_component",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_component_reference": {
            "name": "parse_component_reference",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_component_type": {
            "name": "parse_component_type",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_constant": {
            "name": "parse_constant",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_function": {
            "name": "parse_function",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes"
                ]
            }
        },
        "LEMSFileParser.parse_data_display": {
            "name": "parse_data_display",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "LEMSFileParser.parse_data_writer": {
            "name": "parse_data_writer",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "LEMSFileParser.parse_event_writer": {
            "name": "parse_event_writer",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "None",
                    "typing.Type",
                    "list[]"
                ]
            }
        },
        "LEMSFileParser.parse_derived_parameter": {
            "name": "parse_derived_parameter",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_derived_variable": {
            "name": "parse_derived_variable",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_conditional_derived_variable": {
            "name": "parse_conditional_derived_variable",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_case": {
            "name": "parse_case",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_dimension": {
            "name": "parse_dimension",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_dynamics": {
            "name": "parse_dynamics",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_event_connection": {
            "name": "parse_event_connection",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Mapping",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_event_out": {
            "name": "parse_event_out",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_event_port": {
            "name": "parse_event_port",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_exposure": {
            "name": "parse_exposure",
            "location": 952,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_fixed": {
            "name": "parse_fixed",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_for_each": {
            "name": "parse_for_each",
            "location": 1009,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_include": {
            "name": "parse_include",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_kinetic_scheme": {
            "name": "parse_kinetic_scheme",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_link": {
            "name": "parse_link",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_multi_instantiate": {
            "name": "parse_multi_instantiate",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_on_condition": {
            "name": "parse_on_condition",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_on_entry": {
            "name": "parse_on_entry",
            "location": 1181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_on_event": {
            "name": "parse_on_event",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_on_start": {
            "name": "parse_on_start",
            "location": 1219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_parameter": {
            "name": "parse_parameter",
            "location": 1235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_property": {
            "name": "parse_property",
            "location": 1266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_index_parameter": {
            "name": "parse_index_parameter",
            "location": 1300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_tunnel": {
            "name": "parse_tunnel",
            "location": 1325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_path": {
            "name": "parse_path",
            "location": 1362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[str]",
                    "typing.Type",
                    "set[str]"
                ]
            }
        },
        "LEMSFileParser.parse_record": {
            "name": "parse_record",
            "location": 1379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_event_record": {
            "name": "parse_event_record",
            "location": 1402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_regime": {
            "name": "parse_regime",
            "location": 1427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_requirement": {
            "name": "parse_requirement",
            "location": 1454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set[str]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_component_requirement": {
            "name": "parse_component_requirement",
            "location": 1474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LEMSFileParser.parse_instance_requirement": {
            "name": "parse_instance_requirement",
            "location": 1489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "LEMSFileParser.parse_run": {
            "name": "parse_run",
            "location": 1509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_show": {
            "name": "parse_show",
            "location": 1541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ]
            }
        },
        "LEMSFileParser.parse_simulation": {
            "name": "parse_simulation",
            "location": 1551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_state_assignment": {
            "name": "parse_state_assignment",
            "location": 1565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_state_variable": {
            "name": "parse_state_variable",
            "location": 1589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LEMSFileParser.parse_structure": {
            "name": "parse_structure",
            "location": 1617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LEMSFileParser.parse_target": {
            "name": "parse_target",
            "location": 1629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "LEMSFileParser.parse_text": {
            "name": "parse_text",
            "location": 1639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[str]",
                    "set[str]",
                    "typing.Type"
                ]
            }
        },
        "LEMSFileParser.parse_time_derivative": {
            "name": "parse_time_derivative",
            "location": 1656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "LEMSFileParser.parse_transition": {
            "name": "parse_transition",
            "location": 1680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ]
            }
        },
        "LEMSFileParser.parse_unit": {
            "name": "parse_unit",
            "location": 1697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "tuple[object]",
                    "int"
                ]
            }
        },
        "LEMSFileParser.parse_with": {
            "name": "parse_with",
            "location": 1738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "LEMSFileParser.init_parser.counter": {
            "name": "counter",
            "location": 228,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        }
    },
    "tvb-hpc-master/dsl/lems/parser/__init__.py": {},
    "tvb-hpc-master/examples/btest.py": {},
    "tvb-hpc-master/examples/hcp100.py": {
        "comp": {
            "name": "comp",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "batch_knl": {
            "name": "batch_knl",
            "location": 75,
            "return": [],
            "arguments": {
                "knl": []
            }
        },
        "step": {
            "name": "step",
            "location": 104,
            "return": [],
            "arguments": {
                "n_step": []
            }
        }
    },
    "tvb-hpc-master/examples/progressive_knl.py": {},
    "tvb-hpc-master/examples/sep645.py": {
        "comp": {
            "name": "comp",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "batch_knl": {
            "name": "batch_knl",
            "location": 102,
            "return": [],
            "arguments": {
                "knl": [
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "n_step": [
                    "int"
                ]
            }
        }
    },
    "tvb-hpc-master/examples/sim515k.py": {
        "from_matlab": {
            "name": "from_matlab",
            "location": 20,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "comp": {
            "name": "comp",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "step": {
            "name": "step",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "n_step": [
                    "int"
                ]
            }
        }
    },
    "tvb-hpc-master/phase_plane_interactive/ast_tranfrom.py": {
        "index_dfun": {
            "name": "index_dfun",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "IndexArithmetic.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_map": [
                    "int",
                    "float"
                ]
            }
        },
        "IndexArithmetic.visit_Name": {
            "name": "visit_Name",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "tvb-hpc-master/phase_plane_interactive/cuda_template.py": {},
    "tvb-hpc-master/phase_plane_interactive/dsl2C.py": {
        "gen_index_arithmetic": {
            "name": "gen_index_arithmetic",
            "location": 11,
            "return": [],
            "arguments": {
                "index": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "bool"
                ],
                "dims": []
            }
        },
        "dfuns_to_c": {
            "name": "dfuns_to_c",
            "location": 38,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dfuns": [
                    "str",
                    "dict[str, int]"
                ]
            }
        },
        "PyBasicConversionsExtended.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "tvb-hpc-master/phase_plane_interactive/dsl2python.py": {},
    "tvb-hpc-master/phase_plane_interactive/hackathon_cuda.py": {
        "make_data": {
            "name": "make_data",
            "location": 29,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "prep_arrays": {
            "name": "prep_arrays",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "nsims": [
                    "int",
                    "str"
                ],
                "nnode": [
                    "int",
                    "str"
                ]
            }
        },
        "run_all": {
            "name": "run_all",
            "location": 50,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tvb-hpc-master/phase_plane_interactive/models.py": {},
    "tvb-hpc-master/phase_plane_interactive/numba_model.py": {},
    "tvb-hpc-master/phase_plane_interactive/ppi.py": {
        "Oscillator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eta": [
                    "float"
                ],
                "gamma": [
                    "float"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "Oscillator.dfun": {
            "name": "dfun",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "state_variables": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PhasePlaneInteractive.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None"
                ]
            }
        },
        "PhasePlaneInteractive.plot_trajectory": {
            "name": "plot_trajectory",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": []
            }
        },
        "PhasePlaneInteractive.onclick": {
            "name": "onclick",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]"
                ]
            }
        },
        "PhasePlaneInteractive.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhasePlaneInteractive.__call__.clear": {
            "name": "clear",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        }
    },
    "tvb-hpc-master/phase_plane_interactive/template.py": {},
    "tvb-hpc-master/phase_plane_interactive/template_numbacuda.py": {},
    "tvb-hpc-master/phase_plane_interactive/util.py": {
        "pformat_ast": {
            "name": "pformat_ast",
            "location": 4,
            "return": [],
            "arguments": {
                "node": [
                    "str",
                    "bytes"
                ],
                "include_attrs": [
                    "bool"
                ]
            }
        },
        "ast2tree": {
            "name": "ast2tree",
            "location": 7,
            "return": [],
            "arguments": {
                "node": [
                    "dict[, ]"
                ],
                "include_attrs": [
                    "bool"
                ]
            }
        },
        "ast2tree._transform": {
            "name": "_transform",
            "location": 8,
            "return": [
                "tuple[]",
                "list[]",
                "str",
                "ast_@_AST"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/base.py": {
        "BaseKernel.code": {
            "name": "code",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseKernel.kernel": {
            "name": "kernel",
            "location": 29,
            "return": [
                "dict[str, str]",
                "set[typing.Union[str,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "list[dict[, ]]"
                ],
                "typed": [
                    "bool"
                ]
            }
        },
        "BaseKernel.kernel_domains": {
            "name": "kernel_domains",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseKernel.kernel_data": {
            "name": "kernel_data",
            "location": 46,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseKernel.kernel_dtypes": {
            "name": "kernel_dtypes",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseKernel.kernel_isns": {
            "name": "kernel_isns",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/bold.py": {
        "_balloon_windkessel_constants": {
            "name": "_balloon_windkessel_constants",
            "location": 24,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {}
        }
    },
    "tvb-hpc-master/tvb_hpc/compiler.py": {
        "Spec.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "float": [
                    "typing.Text"
                ],
                "width": [
                    "int"
                ],
                "align": [
                    "None",
                    "float",
                    "int",
                    "tuple[]",
                    "str"
                ],
                "openmp": [
                    "bool"
                ],
                "layout": [
                    "None",
                    "float",
                    "int",
                    "tuple[]",
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Spec.dtype": {
            "name": "dtype",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spec.np_dtype": {
            "name": "np_dtype",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spec.ct_dtype": {
            "name": "ct_dtype",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spec.dict": {
            "name": "dict",
            "location": 73,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compiler.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cc": [
                    "None",
                    "bool",
                    "str"
                ],
                "cflags": [
                    "None",
                    "str",
                    "bytes"
                ],
                "ldflags": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Compiler._tempname": {
            "name": "_tempname",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Compiler._call": {
            "name": "_call",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Compiler.build": {
            "name": "build",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Compiler.compile_args": {
            "name": "compile_args",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "c_fname": [
                    "int",
                    "typing.Final",
                    "list[str]",
                    "tuple[]",
                    "str"
                ]
            }
        },
        "Compiler.link_args": {
            "name": "link_args",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "obj_fname": [
                    "bool",
                    "typing.Iterable[typing.Any]"
                ],
                "dll_fname": [
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "CompiledKernel.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "knl": [
                    "typing.IO",
                    "str",
                    "None",
                    "list[str]"
                ],
                "comp": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CompiledKernel.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledKernel._append_arg": {
            "name": "_append_arg",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "dtype": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "pointer": [
                    "bool"
                ]
            }
        },
        "CompiledKernel._visit_const": {
            "name": "_visit_const",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CompiledKernel._visit_pointer": {
            "name": "_visit_pointer",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CompiledKernel._visit_func_decl": {
            "name": "_visit_func_decl",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_decl": [
                    "dict[, ]"
                ]
            }
        },
        "CompiledKernel._dtype_to_ctype": {
            "name": "_dtype_to_ctype",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ],
                "pointer": [
                    "bool"
                ]
            }
        },
        "OpenMPCASTBuilder.emit_sequential_loop": {
            "name": "emit_sequential_loop",
            "location": 230,
            "return": [
                "Block",
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "codegen_state": [],
                "iname": [],
                "iname_dtype": [],
                "lbound": [],
                "ubound": [],
                "inner": []
            }
        },
        "OpenMPCTarget.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenMPCTarget.get_device_ast_builder": {
            "name": "get_device_ast_builder",
            "location": 250,
            "return": [
                "OpenMPCASTBuilder"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/coupling.py": {
        "BaseCoupling.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "set[]"
                ]
            }
        },
        "BaseCoupling._check_io": {
            "name": "_check_io",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCoupling.post_stat": {
            "name": "post_stat",
            "location": 86,
            "return": [
                "PostSumStat"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/metric.py": {},
    "tvb-hpc-master/tvb_hpc/model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.indvars": {
            "name": "indvars",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.partial": {
            "name": "partial",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "BaseModel.prep_arrays": {
            "name": "prep_arrays",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "nnode": [
                    "int",
                    "str",
                    "list[list[int]]",
                    "list[str]",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "BaseModel.kernel_domains": {
            "name": "kernel_domains",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.kernel_dtypes": {
            "name": "kernel_dtypes",
            "location": 92,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.kernel_data": {
            "name": "kernel_data",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.kernel_isns": {
            "name": "kernel_isns",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._insn_constants": {
            "name": "_insn_constants",
            "location": 113,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._insn_unpack": {
            "name": "_insn_unpack",
            "location": 119,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._insn_auxex": {
            "name": "_insn_auxex",
            "location": 126,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._insn_store": {
            "name": "_insn_store",
            "location": 131,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._wrap_limit": {
            "name": "_wrap_limit",
            "location": 142,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": [],
                "svar_idx": [
                    "list[str]",
                    "list[typing.Optional[float]]",
                    "tuple[frozenset]",
                    "int"
                ]
            }
        },
        "Kuramoto._insn_store": {
            "name": "_insn_store",
            "location": 180,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/network.py": {
        "Connectivity.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nnode": [
                    "bool",
                    "float"
                ],
                "nz": [
                    "bool",
                    "float"
                ],
                "nnz": [
                    "bool",
                    "float"
                ],
                "col": [
                    "bool",
                    "float"
                ],
                "row": [
                    "bool",
                    "str",
                    "None",
                    "typing.Container"
                ],
                "wnz": [
                    "bool",
                    "float"
                ],
                "lnz": [
                    "bool",
                    "float"
                ]
            }
        },
        "Connectivity.from_dense": {
            "name": "from_dense",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "weights": [
                    "str"
                ],
                "lengths": [
                    "bytes"
                ]
            }
        },
        "Connectivity.from_npz": {
            "name": "from_npz",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "int"
                ],
                "fname": [
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "list[str]",
                    "str",
                    "bytes"
                ],
                "weights_key": [
                    "typing.Text"
                ],
                "lengths_key": [
                    "typing.Text"
                ]
            }
        },
        "Connectivity.hcp0": {
            "name": "hcp0",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Network.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None"
                ],
                "cfun": [
                    "bool",
                    "None"
                ]
            }
        },
        "Network._insn_cfun": {
            "name": "_insn_cfun",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "None"
                ],
                "pre": [
                    "dict[str, list[str]]"
                ],
                "post": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "Network.kernel_isns": {
            "name": "kernel_isns",
            "location": 138,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.kernel_domains": {
            "name": "kernel_domains",
            "location": 145,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.kernel_dtypes": {
            "name": "kernel_dtypes",
            "location": 151,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.kernel_data": {
            "name": "kernel_data",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/numba.py": {
        "NumbaTarget.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumbaTarget.get_kernel_executor_cache_key": {
            "name": "get_kernel_executor_cache_key",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumbaTarget.get_kernel_executor": {
            "name": "get_kernel_executor",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "knl": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "NumbaCudaTarget.get_kernel_executor_cache_key": {
            "name": "get_kernel_executor_cache_key",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumbaCudaTarget.get_kernel_executor": {
            "name": "get_kernel_executor",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "knl": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "NumbaCudaTarget._wrap_dims": {
            "name": "_wrap_dims",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "nbc_knl": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "NumbaCudaTarget._wrap_dims._": {
            "name": "_",
            "location": 48,
            "return": [],
            "arguments": {
                "griddim": [],
                "blockdim": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/rng.py": {
        "RNG.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comp": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "RNG.generate_c": {
            "name": "generate_c",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "None"
                ]
            }
        },
        "RNG.build": {
            "name": "build",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "None",
                    "list[dict[, ]]",
                    "bool"
                ]
            }
        },
        "RNG.fill": {
            "name": "fill",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list[typing.Deque]",
                    "str",
                    "float"
                ],
                "seed": [
                    "int"
                ]
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/scheme.py": {
        "euler": {
            "name": "euler",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "f": [
                    "str"
                ],
                "dt": [
                    "None",
                    "int",
                    "typing.Mapping",
                    "float"
                ]
            }
        },
        "euler_maruyama": {
            "name": "euler_maruyama",
            "location": 35,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "f": [
                    "int",
                    "float"
                ],
                "g": [
                    "int",
                    "float"
                ],
                "dt": [
                    "None",
                    "int",
                    "float"
                ],
                "dWt": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "euler_maruyama_logp": {
            "name": "euler_maruyama_logp",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [],
                "f": [
                    "typing.Mapping",
                    "int"
                ],
                "g": [],
                "xn": [
                    "None",
                    "int",
                    "float"
                ],
                "dt": [
                    "None",
                    "float",
                    "int",
                    "tuple[]"
                ],
                "step": []
            }
        },
        "EulerStep.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "str"
                ]
            }
        },
        "EulerStep.kernel_dtypes": {
            "name": "kernel_dtypes",
            "location": 62,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EulerStep.kernel_data": {
            "name": "kernel_data",
            "location": 71,
            "return": [
                "list[str]",
                "list[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EulerStep.kernel_domains": {
            "name": "kernel_domains",
            "location": 77,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EulerStep.kernel_isns": {
            "name": "kernel_isns",
            "location": 82,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EulerMaryuyamaStep.kernel_isns": {
            "name": "kernel_isns",
            "location": 90,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EulerMaryuyamaStep.kernel_data": {
            "name": "kernel_data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EulerMaryuyamaStep.kernel_dtypes": {
            "name": "kernel_dtypes",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/template_varlist.py": {},
    "tvb-hpc-master/tvb_hpc/tests.py": {
        "TestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.timeit": {
            "name": "timeit",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "int",
                    "tuple[]",
                    "list[str]",
                    "typing.TextIO"
                ]
            }
        },
        "TestCase.tearDown": {
            "name": "tearDown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_var_subst": {
            "name": "test_var_subst",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCl.setUp": {
            "name": "setUp",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCl.test_copy": {
            "name": "test_copy",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCl.test_add_loops": {
            "name": "test_add_loops",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.setUp": {
            "name": "setUp",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms._dtype_and_code": {
            "name": "_dtype_and_code",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "knl": [
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestLoopTransforms.test_chunk_iname": {
            "name": "test_chunk_iname",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.test_split_iname2": {
            "name": "test_split_iname2",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.test_wrap_loop": {
            "name": "test_wrap_loop",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.test_wrap_loop_with_param": {
            "name": "test_wrap_loop_with_param",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.test_split_iname3": {
            "name": "test_split_iname3",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoopTransforms.test_sparse_matmul": {
            "name": "test_sparse_matmul",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumbaTarget.test_simple": {
            "name": "test_simple",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiledKernel.test_simple_kernel": {
            "name": "test_simple_kernel",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogProb.setUp": {
            "name": "setUp",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogProb.test_partials": {
            "name": "test_partials",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel._test": {
            "name": "_test",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "log_code": [
                    "bool"
                ]
            }
        },
        "TestModel.test_balloon_model": {
            "name": "test_balloon_model",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_hmje": {
            "name": "test_hmje",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_rww": {
            "name": "test_rww",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_jr": {
            "name": "test_jr",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_linear": {
            "name": "test_linear",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_g2do": {
            "name": "test_g2do",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRNG.test_r123_normal": {
            "name": "test_r123_normal",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoupling.test_linear": {
            "name": "test_linear",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoupling.test_diff": {
            "name": "test_diff",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoupling.test_sigm": {
            "name": "test_sigm",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoupling.test_kura": {
            "name": "test_kura",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetwork._test_dense": {
            "name": "_test_dense",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Model": [
                    "str",
                    "int"
                ],
                "Cfun": [
                    "str",
                    "int"
                ]
            }
        },
        "TestNetwork.test_hmje": {
            "name": "test_hmje",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetwork.test_kuramoto": {
            "name": "test_kuramoto",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetwork.test_jr": {
            "name": "test_jr",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScheme._test_scheme": {
            "name": "_test_scheme",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": []
            }
        },
        "TestScheme.test_euler_dt_literal": {
            "name": "test_euler_dt_literal",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScheme.test_euler_dt_var": {
            "name": "test_euler_dt_var",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScheme.test_em_dt_literal": {
            "name": "test_em_dt_literal",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScheme.test_em_dt_var": {
            "name": "test_em_dt_var",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceTestsMixIn.test_copy": {
            "name": "test_copy",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkspaceNumba.make_workspace": {
            "name": "make_workspace",
            "location": 428,
            "return": [
                "Workspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkspaceCL.make_workspace": {
            "name": "make_workspace",
            "location": 433,
            "return": [
                "CLWorkspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_ocov": {
            "name": "test_ocov",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_bcov": {
            "name": "test_bcov",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRmap.test_rmap_to_avg": {
            "name": "test_rmap_to_avg",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRmap.test_rmap_from_avg": {
            "name": "test_rmap_from_avg",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/transforms.py": {
        "network_time_step": {
            "name": "network_time_step",
            "location": 23,
            "return": [],
            "arguments": {
                "model": [],
                "coupling": [
                    "str",
                    "set[int]",
                    "int"
                ],
                "scheme": [],
                "target": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/utils.py": {
        "can_bcast": {
            "name": "can_bcast",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ]
            }
        },
        "getLogger": {
            "name": "getLogger",
            "location": 39,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 48,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "exe": [
                    "str",
                    "int"
                ]
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 59,
            "return": [],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "vars": {
            "name": "vars",
            "location": 67,
            "return": [],
            "arguments": {
                "svars": []
            }
        },
        "exprs": {
            "name": "exprs",
            "location": 76,
            "return": [],
            "arguments": {
                "sexprs": [
                    "str"
                ]
            }
        },
        "subst_vars": {
            "name": "subst_vars",
            "location": 123,
            "return": [],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "scaling": {
            "name": "scaling",
            "location": 128,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ary": [
                    "str",
                    "int"
                ]
            }
        },
        "loadtxt_many": {
            "name": "loadtxt_many",
            "location": 137,
            "return": [],
            "arguments": {
                "fnames": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "timer.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "timer.__enter__": {
            "name": "__enter__",
            "location": 99,
            "return": [
                "timer"
            ],
            "arguments": {
                "self": []
            }
        },
        "timer.__exit__": {
            "name": "__exit__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarSubst.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "VarSubst.map_variable": {
            "name": "map_variable",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "var": [
                    "str",
                    "dict[, ]",
                    "float"
                ]
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/workspace.py": {
        "Workspace.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "str"
                ]
            }
        },
        "Workspace._alloc": {
            "name": "_alloc",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dtype": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Workspace._shape": {
            "name": "_shape",
            "location": 36,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "str"
                ]
            }
        },
        "CLWorkspace.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cq": [
                    "int",
                    "float"
                ]
            }
        },
        "CLWorkspace._alloc": {
            "name": "_alloc",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dtype": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "tvb-hpc-master/tvb_hpc/__init__.py": {},
    "tvb-hpc-master/tvb_hpc/examples/hackathon.py": {
        "make_knl": {
            "name": "make_knl",
            "location": 23,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "make_data": {
            "name": "make_data",
            "location": 36,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "run_one": {
            "name": "run_one",
            "location": 41,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tvb-hpc-master/tvb_hpc/examples/__init__.py": {}
}
{
    "txmaker-master/main.py": {},
    "txmaker-master/txmaker/bitcoin.py": {
        "estimate_tx_size": {
            "name": "estimate_tx_size",
            "location": 20,
            "return": [],
            "arguments": {
                "n_in": [],
                "in_size": [],
                "n_out": [],
                "out_size": []
            }
        },
        "calc_in_size": {
            "name": "calc_in_size",
            "location": 33,
            "return": [],
            "arguments": {
                "n_in": []
            }
        },
        "calc_out_size": {
            "name": "calc_out_size",
            "location": 40,
            "return": [],
            "arguments": {
                "addresses": []
            }
        },
        "estimate_tx_fee": {
            "name": "estimate_tx_fee",
            "location": 47,
            "return": [],
            "arguments": {
                "n_in": [],
                "in_size": [],
                "n_out": [],
                "out_size": [],
                "fee_kb": []
            }
        },
        "select_unspents": {
            "name": "select_unspents",
            "location": 74,
            "return": [],
            "arguments": {
                "source_address": [],
                "unspents": [],
                "outputs": [],
                "fee_kb": []
            }
        },
        "is_valid_address": {
            "name": "is_valid_address",
            "location": 158,
            "return": [],
            "arguments": {
                "bitcoin_address": []
            }
        }
    },
    "txmaker-master/txmaker/config.py": {
        "Settings.min_confirmations": {
            "name": "min_confirmations",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.blockchain_info_base_url": {
            "name": "blockchain_info_base_url",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.btc_network": {
            "name": "btc_network",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "txmaker-master/txmaker/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "mock_unspent_response.mock.mock_handler": {
            "name": "mock_handler",
            "location": 37,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "fake_server_client_factory.factory.FakeClientSession.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "txmaker-master/txmaker/server.py": {
        "run_app": {
            "name": "run_app",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "txmaker-master/txmaker/server_test.py": {},
    "txmaker-master/txmaker/utils.py": {
        "error_response": {
            "name": "error_response",
            "location": 21,
            "return": [],
            "arguments": {
                "code": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "message": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "validate_request": {
            "name": "validate_request",
            "location": 35,
            "return": [],
            "arguments": {
                "req_model": [
                    "Exception",
                    "None",
                    "list[dict[, ]]",
                    "dict[str, list[str]]",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DecimalJsonEncoder.default": {
            "name": "default",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "validate_request.decorator": {
            "name": "decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "txmaker-master/txmaker/__init__.py": {},
    "txmaker-master/txmaker/testing/mocks.py": {
        "FakeResolver.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fakes": [
                    "int",
                    "float"
                ]
            }
        },
        "FakeServer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hosts": [
                    "int",
                    "float"
                ],
                "loop": [
                    "None",
                    "list[str]",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "FakeServer.add_routes": {
            "name": "add_routes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        }
    }
}
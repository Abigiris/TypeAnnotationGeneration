{
    "typecats-master/env_runner.py": {
        "run_cmd_in_pipenv": {
            "name": "run_cmd_in_pipenv",
            "location": 10,
            "return": [],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "list[str]",
                    "typing.TextIO"
                ],
                "fileorpath": [
                    "str"
                ],
                "cli_args": [
                    "tuple[]"
                ]
            }
        }
    },
    "typecats-master/setup.py": {},
    "typecats-master/tests/data_utils.py": {
        "ld": {
            "name": "ld",
            "location": 4,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "typecats-master/tests/test_cats.py": {
        "test_cats_decorator": {
            "name": "test_cats_decorator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_with_structurer": {
            "name": "test_nested_with_structurer",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_structuring": {
            "name": "test_union_structuring",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_exceptions.py": {
        "test_exceptions_get_logged": {
            "name": "test_exceptions_get_logged",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_exceptions_have_type_path": {
            "name": "test_exceptions_have_type_path",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_try_struc_no_exception_if_common": {
            "name": "test_try_struc_no_exception_if_common",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "typecats-master/tests/test_funcs.py": {
        "test_funcs_work": {
            "name": "test_funcs_work",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_strip_defaults.py": {
        "test_clean_cats_basic": {
            "name": "test_clean_cats_basic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_method_works_also": {
            "name": "test_method_works_also",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clean_wildcat": {
            "name": "test_clean_wildcat",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clean_literal": {
            "name": "test_clean_literal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clean_with_wildcat_underneath": {
            "name": "test_clean_with_wildcat_underneath",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_works_with_pure_attrs_obj": {
            "name": "test_works_with_pure_attrs_obj",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_comparsion_works_on_structured_value": {
            "name": "test_default_comparsion_works_on_structured_value",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_validators.py": {
        "test_typecat_validators": {
            "name": "test_typecat_validators",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimal_zero": {
            "name": "test_decimal_zero",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typecat_validators.Foo._is_bar": {
            "name": "_is_bar",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "test_typecat_validators.FooCat._is_bar": {
            "name": "_is_bar",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "test_typecat_validators.NotNone._isnt_none": {
            "name": "_isnt_none",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "test_typecat_validators.WithDefault._not_null": {
            "name": "_not_null",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "test_typecat_validators.EmptyAllowed._not_bar": {
            "name": "_not_bar",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        }
    },
    "typecats-master/tests/test_wildcats.py": {
        "test_wildcats": {
            "name": "test_wildcats",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attr_in_wildcat_dict_is_unstructured": {
            "name": "test_attr_in_wildcat_dict_is_unstructured",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_wildcats_still_unstructure": {
            "name": "test_nested_wildcats_still_unstructure",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wildcat_with_id": {
            "name": "test_wildcat_with_id",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wildcat_repr_no_conflicts": {
            "name": "test_wildcat_repr_no_conflicts",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wildcat_equality_takes_wildcat_key_values_into_account": {
            "name": "test_wildcat_equality_takes_wildcat_key_values_into_account",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typecats-master/typecats/attrs_shim.py": {
        "cat_attrs": {
            "name": "cat_attrs",
            "location": 25,
            "return": [],
            "arguments": {
                "maybe_cls": [],
                "these": [],
                "repr_ns": [],
                "repr": [],
                "cmp": [],
                "hash": [],
                "init": [],
                "slots": [],
                "frozen": [],
                "weakref_slot": [],
                "str": [],
                "auto_attribs": [],
                "kw_only": [],
                "cache_hash": [],
                "disallow_empties": [],
                "auto_exc": [],
                "eq": [],
                "order": [],
                "auto_detect": [],
                "collect_by_mro": [],
                "getstate_setstate": [],
                "on_setattr": [],
                "field_transformer": []
            }
        },
        "nonempty_validator": {
            "name": "nonempty_validator",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "value": []
            }
        },
        "_hack_add_validator": {
            "name": "_hack_add_validator",
            "location": 197,
            "return": [],
            "arguments": {
                "attrib": [],
                "validator": []
            }
        },
        "_hook_builder_before_doing_anything": {
            "name": "_hook_builder_before_doing_anything",
            "location": 211,
            "return": [],
            "arguments": {
                "builder": [],
                "disallow_empties": []
            }
        },
        "get_attrs_names": {
            "name": "get_attrs_names",
            "location": 224,
            "return": [],
            "arguments": {
                "Type": []
            }
        },
        "drop_nonattrs": {
            "name": "drop_nonattrs",
            "location": 232,
            "return": [],
            "arguments": {
                "d": [],
                "Type": []
            }
        },
        "cat_attrs.wrap": {
            "name": "wrap",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_hack_add_validator.combine_validators": {
            "name": "combine_validators",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "att": [],
                "val": []
            }
        }
    },
    "typecats-master/typecats/cats_mypy_plugin.py": {
        "fullname": {
            "name": "fullname",
            "location": 43,
            "return": [],
            "arguments": {
                "x": [
                    "bool"
                ]
            }
        },
        "nameit": {
            "name": "nameit",
            "location": 50,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 57,
            "return": [],
            "arguments": {
                "_version": [
                    "str"
                ]
            }
        },
        "make_optional": {
            "name": "make_optional",
            "location": 62,
            "return": [],
            "arguments": {
                "typ": [
                    "typing.Type"
                ]
            }
        },
        "serialize_info_name": {
            "name": "serialize_info_name",
            "location": 149,
            "return": [],
            "arguments": {
                "info": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "class_path": [
                    "str"
                ]
            }
        },
        "deserialize_funcdefs": {
            "name": "deserialize_funcdefs",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "stmts": [
                    "str"
                ]
            }
        },
        "add_static_method": {
            "name": "add_static_method",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "None"
                ],
                "function_name": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "args": [],
                "return_type": [
                    "None"
                ]
            }
        },
        "CatsPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "CatsPlugin.get_class_decorator_hook.add_struc_and_unstruc_to_classdefcontext": {
            "name": "add_struc_and_unstruc_to_classdefcontext",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "cls_def_ctx": []
            }
        }
    },
    "typecats-master/typecats/cattrs_hooks.py": {
        "patch_cattrs_function_dispatch": {
            "name": "patch_cattrs_function_dispatch",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "multistrategy_dispatch": [],
                "patch": [
                    "str",
                    "typing.Iterable[]",
                    "bool"
                ]
            }
        },
        "PostFunctionDispatchPatch.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__original_handler": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "patch_cattrs_function_dispatch.make_patched_handler": {
            "name": "make_patched_handler",
            "location": 36,
            "return": [],
            "arguments": {
                "original_handler": []
            }
        },
        "ConverterContextPatch.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "tuple[]",
                    "bool",
                    "None"
                ]
            }
        },
        "ConverterContextPatch.structure_patch": {
            "name": "structure_patch",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "original_handler": [
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ],
                "obj": [
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ],
                "Type": [
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "ConverterContextPatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "original_handler": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "Exception"
                ],
                "obj": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "patch_cattrs_function_dispatch.make_patched_handler.wrapper_handler": {
            "name": "wrapper_handler",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "typecats-master/typecats/exceptions.py": {
        "_simple_type_name": {
            "name": "_simple_type_name",
            "location": 19,
            "return": [],
            "arguments": {
                "Type": [
                    "typing.Type",
                    "list[\"ElementHandle\"]"
                ]
            }
        },
        "_assemble_default_exception_msg": {
            "name": "_assemble_default_exception_msg",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ],
                "item": [
                    "dict[str, typing.Any]",
                    "set[int]",
                    "list[int]",
                    "dict[int, typing.Any]"
                ],
                "Type": [
                    "Exception",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ],
                "typecats_stack": [
                    "list[str]"
                ]
            }
        },
        "_default_log_structure_exception": {
            "name": "_default_log_structure_exception",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "typing.Type",
                    "Exception",
                    "str",
                    "int"
                ],
                "item": [
                    "typing.Type",
                    "Exception",
                    "str",
                    "int"
                ],
                "Type": [
                    "typing.Type",
                    "Exception",
                    "str",
                    "int"
                ],
                "typecats_stack": [
                    "typing.Type",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "set_default_exception_hook": {
            "name": "set_default_exception_hook",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "hook": [
                    "int"
                ]
            }
        },
        "_extract_typecats_stack_if_any": {
            "name": "_extract_typecats_stack_if_any",
            "location": 61,
            "return": [
                "list[]"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_emit_exception_to_default_handler": {
            "name": "_emit_exception_to_default_handler",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]"
                ],
                "item": [
                    "Exception",
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]"
                ],
                "Type": [
                    "Exception",
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]"
                ],
                "typecats_stack": [
                    "Exception",
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "typecats-master/typecats/patch.py": {
        "patch_converter_for_typecats": {
            "name": "patch_converter_for_typecats",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "converter": [
                    "list[]",
                    "str",
                    "tuple[]",
                    "typing.Callable[[], None]",
                    "float"
                ]
            }
        },
        "_embed_exception_info": {
            "name": "_embed_exception_info",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str",
                    "typing.Type"
                ],
                "item": [
                    "typing.Type",
                    "int",
                    "list[int]"
                ],
                "Type": [
                    "typing.Type",
                    "int",
                    "list[int]"
                ]
            }
        },
        "TypecatsCattrPatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 34,
            "return": [
                "str",
                "float",
                "list[bool]"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "bytes"
                ],
                "obj_to_unstructure": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "TypecatsCattrPatch.structure_patch": {
            "name": "structure_patch",
            "location": 49,
            "return": [
                "str",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "bool",
                    "str"
                ],
                "obj_to_structure": [
                    "typing.Type",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "Type": [
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        }
    },
    "typecats-master/typecats/strip_defaults.py": {
        "_get_factory_default": {
            "name": "_get_factory_default",
            "location": 17,
            "return": [],
            "arguments": {
                "_attr": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[, ]]",
                    "None",
                    "bool"
                ]
            }
        },
        "_get_attr_default_value": {
            "name": "_get_attr_default_value",
            "location": 21,
            "return": [],
            "arguments": {
                "attribute": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_strip_attr_defaults": {
            "name": "_strip_attr_defaults",
            "location": 27,
            "return": [
                "dict[tuple[typing.Union[str,typing.Type]], tuple[typing.Union[str,typing.Type]]]"
            ],
            "arguments": {
                "attrs_type": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "m": [
                    "dict[str, typing.Type]"
                ]
            }
        },
        "_get_names_of_defaulted_nonliteral_attrs": {
            "name": "_get_names_of_defaulted_nonliteral_attrs",
            "location": 48,
            "return": [
                "set[]"
            ],
            "arguments": {
                "attrs_obj": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_strip_attrs_defaults": {
            "name": "_strip_attrs_defaults",
            "location": 59,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], tuple[typing.Union[str,typing.Any]]]",
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ],
            "arguments": {
                "unstructured_but_unclean": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "obj_to_unstructure": [
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "get_stripping_converter": {
            "name": "get_stripping_converter",
            "location": 82,
            "return": [
                "Converter"
            ],
            "arguments": {}
        },
        "unstruc_strip_defaults": {
            "name": "unstruc_strip_defaults",
            "location": 86,
            "return": [],
            "arguments": {
                "obj": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "StripAttrsDefaultsOnUnstructurePatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "original_handler": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "bytes"
                ],
                "obj_to_unstructure": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "typecats-master/typecats/tc.py": {
        "make_struc": {
            "name": "make_struc",
            "location": 47,
            "return": [],
            "arguments": {
                "converter": [
                    "bool",
                    "str"
                ]
            }
        },
        "make_unstruc": {
            "name": "make_unstruc",
            "location": 73,
            "return": [],
            "arguments": {
                "converter": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "stripping_converter": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "_try_struc": {
            "name": "_try_struc",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "structure_method": [
                    "int"
                ],
                "cl": [
                    "typing.Type",
                    "None"
                ],
                "obj": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "get_default_converter": {
            "name": "get_default_converter",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "register_struc_hook": {
            "name": "register_struc_hook",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register_unstruc_hook": {
            "name": "register_unstruc_hook",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Cat": {
            "name": "Cat",
            "location": 135,
            "return": [],
            "arguments": {
                "maybe_cls": [
                    "None",
                    "int",
                    "str",
                    "typing.AnyStr",
                    "typing.Callable[str, int]",
                    "dict[, ]"
                ],
                "auto_attribs": [
                    "bool"
                ],
                "disallow_empties": [
                    "bool"
                ],
                "converter": []
            }
        },
        "set_struc_converter": {
            "name": "set_struc_converter",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "None",
                    "bool",
                    "typing.Hashable"
                ],
                "converter": []
            }
        },
        "set_unstruc_converter": {
            "name": "set_unstruc_converter",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "bytes",
                    "dict[str, str]",
                    "None",
                    "bool"
                ],
                "converter": [],
                "strip_defaults_converter": [
                    "bool"
                ]
            }
        },
        "TypeCat.struc": {
            "name": "struc",
            "location": 36,
            "return": [
                "TypeCat"
            ],
            "arguments": {
                "_d": [
                    "typing.Mapping",
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Deque"
                ]
            }
        },
        "TypeCat.try_struc": {
            "name": "try_struc",
            "location": 40,
            "return": [
                "TypeCat"
            ],
            "arguments": {
                "_d": [
                    "typing.Mapping",
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Deque"
                ]
            }
        },
        "TypeCat.unstruc": {
            "name": "unstruc",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_struc._struc_with_hook": {
            "name": "_struc_with_hook",
            "location": 61,
            "return": [],
            "arguments": {
                "cl": [],
                "obj": []
            }
        },
        "make_unstruc._unstruc": {
            "name": "_unstruc",
            "location": 77,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Cat.make_cat": {
            "name": "make_cat",
            "location": 174,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "set_struc_converter.struc_cat": {
            "name": "struc_cat",
            "location": 218,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "set_struc_converter.try_struc_cat": {
            "name": "try_struc_cat",
            "location": 222,
            "return": [],
            "arguments": {
                "d": []
            }
        }
    },
    "typecats-master/typecats/types.py": {},
    "typecats-master/typecats/wildcat.py": {
        "is_wildcat": {
            "name": "is_wildcat",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "enrich_structured_wildcat": {
            "name": "enrich_structured_wildcat",
            "location": 21,
            "return": [],
            "arguments": {
                "wildcat": [],
                "prestructured_obj_dict": [],
                "Type": []
            }
        },
        "enrich_unstructured_wildcat": {
            "name": "enrich_unstructured_wildcat",
            "location": 46,
            "return": [],
            "arguments": {
                "converter": [],
                "obj": [],
                "unstructured_obj_dict": []
            }
        },
        "_strip_defined_abstract_methods": {
            "name": "_strip_defined_abstract_methods",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations": {
            "name": "setup_warnings_for_dangerous_dict_subclass_operations",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "mixin_wildcat_post_attrs_methods": {
            "name": "mixin_wildcat_post_attrs_methods",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.warn_key_set_on_attribute": {
            "name": "warn_key_set_on_attribute",
            "location": 81,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.__setitem__": {
            "name": "__setitem__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "item": []
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.__getitem__": {
            "name": "__getitem__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.update": {
            "name": "update",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "other_dict": []
            }
        },
        "mixin_wildcat_post_attrs_methods.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mixin_wildcat_post_attrs_methods.__bool__": {
            "name": "__bool__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mixin_wildcat_post_attrs_methods.__eq__": {
            "name": "__eq__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "typecats-master/typecats/__about__.py": {},
    "typecats-master/typecats/__init__.py": {}
}
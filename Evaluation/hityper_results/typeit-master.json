{
    "typeit-master/setup.py": {
        "extras_require": {
            "name": "extras_require",
            "location": 14,
            "return": [],
            "arguments": {
                "all_extras": []
            }
        },
        "requirements": {
            "name": "requirements",
            "location": 22,
            "return": [],
            "arguments": {
                "at_path": []
            }
        }
    },
    "typeit-master/docs/conf.py": {},
    "typeit-master/tests/paths.py": {},
    "typeit-master/tests/test_cli.py": {
        "test_cli": {
            "name": "test_cli",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "stdin_data": [
                    "int"
                ],
                "reference_snippet": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "typeit-master/tests/test_combinators.py": {
        "test_combinators": {
            "name": "test_combinators",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_global_names_override": {
            "name": "test_global_names_override",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "modifier": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "expected_dict": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "typeit-master/tests/test_custom_types.py": {
        "test_json_string_direct_application": {
            "name": "test_json_string_direct_application",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_string_structures": {
            "name": "test_json_string_structures",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_json_string": {
            "name": "test_nested_json_string",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_optional_json_string": {
            "name": "test_nested_optional_json_string",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/test_errors.py": {
        "test_error": {
            "name": "test_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/test_pyrsistent.py": {
        "test_pyrsistent_types": {
            "name": "test_pyrsistent_types",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/test_sums.py": {
        "test_enum_like_api": {
            "name": "test_enum_like_api",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_variant_data_is_typed": {
            "name": "test_sum_variant_data_is_typed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_variants": {
            "name": "test_sum_variants",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_variant_subclass_positional": {
            "name": "test_sum_variant_subclass_positional",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generic_either": {
            "name": "test_generic_either",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sums_as_dict": {
            "name": "test_sums_as_dict",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sumtype_attr_strictness": {
            "name": "test_sumtype_attr_strictness",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/test_tokenizer.py": {
        "test_tokenizer": {
            "name": "test_tokenizer",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_tokenizer.translate_tokens_to_graphql": {
            "name": "translate_tokens_to_graphql",
            "location": 40,
            "return": [],
            "arguments": {
                "typ": []
            }
        }
    },
    "typeit-master/tests/test_utils.py": {
        "test_normalization": {
            "name": "test_normalization",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_invalid_data": {
            "name": "test_iter_invalid_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_root_data": {
            "name": "test_invalid_root_data",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_invalid_serialize": {
            "name": "test_iter_invalid_serialize",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/__init__.py": {},
    "typeit-master/tests/parser/test_codegen.py": {
        "test_parser_empty_struct": {
            "name": "test_parser_empty_struct",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typeit": {
            "name": "test_typeit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_parse_structure_with_sequences": {
            "name": "test_parse_structure_with_sequences",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser_github_pull_request_payload": {
            "name": "test_parser_github_pull_request_payload",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/test_dataclasses.py": {
        "test_dataclasses": {
            "name": "test_dataclasses",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_default_values": {
            "name": "test_with_default_values",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherited_dataclasses": {
            "name": "test_inherited_dataclasses",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/test_extending.py": {
        "test_extending": {
            "name": "test_extending",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extending.MoneySchema.deserialize": {
            "name": "deserialize",
            "location": 15,
            "return": [
                "Money"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cstruct": []
            }
        },
        "test_extending.MoneySchema.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": []
            }
        }
    },
    "typeit-master/tests/parser/test_forward_reference.py": {
        "test_forward_ref_struct": {
            "name": "test_forward_ref_struct",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_ref": {
            "name": "test_recursive_ref",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/test_newtype.py": {
        "test_newtype": {
            "name": "test_newtype",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/test_overrides.py": {
        "test_global_and_specific_overrides": {
            "name": "test_global_and_specific_overrides",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/test_parser.py": {
        "test_type_with_unclarified_list": {
            "name": "test_type_with_unclarified_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_primitives_strictness": {
            "name": "test_primitives_strictness",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_list": {
            "name": "test_serialize_list",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_union_lists": {
            "name": "test_serialize_union_lists",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_sequence": {
            "name": "test_type_with_sequence",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_tuple_primitives": {
            "name": "test_type_with_tuple_primitives",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_complex_tuples": {
            "name": "test_type_with_complex_tuples",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsupported_variable_length_tuples": {
            "name": "test_unsupported_variable_length_tuples",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_like_types": {
            "name": "test_enum_like_types",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_types_as_union": {
            "name": "test_sum_types_as_union",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_unions_serialization": {
            "name": "test_enum_unions_serialization",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_empty_enum_variant": {
            "name": "test_type_with_empty_enum_variant",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_set": {
            "name": "test_type_with_set",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_sequence": {
            "name": "test_parse_sequence",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_builtins": {
            "name": "test_parse_builtins",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "data": []
            }
        },
        "test_schema_node": {
            "name": "test_schema_node",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_dict": {
            "name": "test_type_with_dict",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_overrides": {
            "name": "test_name_overrides",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_builtins_and_sequences": {
            "name": "test_parse_builtins_and_sequences",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": []
            }
        },
        "test_default_namedtuple_values": {
            "name": "test_default_namedtuple_values",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_init_based_value": {
            "name": "test_default_init_based_value",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_init_based_value.X.__init__": {
            "name": "__init__",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "int"
                ]
            }
        }
    },
    "typeit-master/tests/parser/test_regular_classes.py": {
        "test_regular_classes": {
            "name": "test_regular_classes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/parser/__init__.py": {},
    "typeit-master/tests/std_types/test_bytes.py": {
        "test_bytes": {
            "name": "test_bytes",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/std_types/test_path.py": {
        "test_path": {
            "name": "test_path",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_union": {
            "name": "test_path_union",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/std_types/test_typing.py": {
        "test_mapping": {
            "name": "test_mapping",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typed_mapping": {
            "name": "test_typed_mapping",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typed_mapping_values": {
            "name": "test_typed_mapping_values",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequence": {
            "name": "test_sequence",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sets": {
            "name": "test_sets",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literals": {
            "name": "test_literals",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literals_included": {
            "name": "test_literals_included",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_special_case_none_type": {
            "name": "test_special_case_none_type",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/std_types/__init__.py": {},
    "typeit-master/tests/unions/test_forward_refs.py": {
        "test_forward_refs": {
            "name": "test_forward_refs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/unions/test_unions.py": {
        "test_type_with_unions": {
            "name": "test_type_with_unions",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_with_primitive_union": {
            "name": "test_type_with_primitive_union",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_primitive_match": {
            "name": "test_union_primitive_match",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_test_union_primitive_and_compound_types": {
            "name": "test_test_union_primitive_and_compound_types",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_mappings": {
            "name": "test_union_mappings",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_errors": {
            "name": "test_union_errors",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typeit-master/tests/unions/__init__.py": {},
    "typeit-master/typeit/compat.py": {},
    "typeit-master/typeit/definitions.py": {},
    "typeit-master/typeit/flags.py": {
        "_Flag.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "typing.Sequence[typing.Any]"
                ],
                "default_setting": [
                    "int",
                    "list[C]",
                    "set[str]",
                    "None",
                    "str"
                ]
            }
        },
        "_Flag.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Flag.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "_ModifiedFlag",
                "_Flag"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "_Flag.__and__": {
            "name": "__and__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "typeit-master/typeit/interface.py": {
        "ITraversable.__getitem__": {
            "name": "__getitem__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "IType._asdict": {
            "name": "_asdict",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeit-master/typeit/utils.py": {
        "normalize_name": {
            "name": "normalize_name",
            "location": 19,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "pattern": []
            }
        },
        "is_named_tuple": {
            "name": "is_named_tuple",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "typing.Type",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "clone_schema_node": {
            "name": "clone_schema_node",
            "location": 40,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "get_global_name_overrider": {
            "name": "get_global_name_overrider",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "overrides": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "typeit-master/typeit/__init__.py": {},
    "typeit-master/typeit/cli/gen.py": {
        "setup": {
            "name": "setup",
            "location": 10,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "out_channel": []
            }
        },
        "_read_data": {
            "name": "_read_data",
            "location": 34,
            "return": [],
            "arguments": {
                "fd": []
            }
        }
    },
    "typeit-master/typeit/cli/__init__.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "stdout": []
            }
        }
    },
    "typeit-master/typeit/codegen/__init__.py": {
        "_type_name_getter": {
            "name": "_type_name_getter",
            "location": 27,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "_annotation_name_getter": {
            "name": "_annotation_name_getter",
            "location": 31,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "codegen_py": {
            "name": "codegen_py",
            "location": 85,
            "return": [],
            "arguments": {
                "typeit_schema": [],
                "top": [],
                "indent": []
            }
        },
        "literal_for_type": {
            "name": "literal_for_type",
            "location": 225,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "typeit": {
            "name": "typeit",
            "location": 241,
            "return": [],
            "arguments": {
                "python_data": []
            }
        },
        "traverse_non_sequence": {
            "name": "traverse_non_sequence",
            "location": 270,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "typing_for": {
            "name": "typing_for",
            "location": 292,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "parse_mapping": {
            "name": "parse_mapping",
            "location": 298,
            "return": [],
            "arguments": {
                "mapping": [],
                "parent_prefix": []
            }
        },
        "clarify_struct_type": {
            "name": "clarify_struct_type",
            "location": 314,
            "return": [],
            "arguments": {
                "field_name": [],
                "field_struct": [],
                "parent_prefix": []
            }
        },
        "_clarify_field_type_dict": {
            "name": "_clarify_field_type_dict",
            "location": 323,
            "return": [],
            "arguments": {
                "field_name": [],
                "field_struct": [],
                "parent_prefix": []
            }
        },
        "_clarify_field_type_list": {
            "name": "_clarify_field_type_list",
            "location": 339,
            "return": [],
            "arguments": {
                "field_name": [],
                "field_struct": [],
                "parent_prefix": []
            }
        },
        "construct_type": {
            "name": "construct_type",
            "location": 373,
            "return": [],
            "arguments": {
                "name": [],
                "fields": []
            }
        }
    },
    "typeit-master/typeit/combinator/combinator.py": {
        "Combinator.__and__": {
            "name": "__and__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "typeit-master/typeit/combinator/constructor.py": {
        "_TypeConstructor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "overrides": []
            }
        },
        "_TypeConstructor.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "overrides": []
            }
        },
        "_TypeConstructor.__and__": {
            "name": "__and__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "override": []
            }
        },
        "_TypeConstructor.__xor__": {
            "name": "__xor__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "typeit-master/typeit/combinator/__init__.py": {},
    "typeit-master/typeit/custom_types/json_string.py": {
        "JsonStringSchema.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonStringSchema.deserialize": {
            "name": "deserialize",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "cstruct": []
            }
        },
        "JsonStringSchema.serialize": {
            "name": "serialize",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": []
            }
        }
    },
    "typeit-master/typeit/custom_types/__init__.py": {},
    "typeit-master/typeit/parser/__init__.py": {
        "inner_type_boundaries": {
            "name": "inner_type_boundaries",
            "location": 40,
            "return": [],
            "arguments": {
                "typ": [
                    "typing.Type",
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "_maybe_node_for_none": {
            "name": "_maybe_node_for_none",
            "location": 47,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "overrides": [
                    "str",
                    "bool",
                    "typing.Type"
                ],
                "memo": [
                    "None",
                    "int"
                ],
                "forward_refs": [
                    "None",
                    "int"
                ],
                "supported_type": [
                    "set[None]"
                ]
            }
        },
        "_maybe_node_for_forward_ref": {
            "name": "_maybe_node_for_forward_ref",
            "location": 62,
            "return": [
                "tuple[typing.Union[dict[, ],typing.Callable[, ],typing.Type,dict[str, str],None,int]]",
                "tuple[typing.Union[None,dict[, ],typing.Callable[, ],typing.Type,dict[str, str],int]]"
            ],
            "arguments": {
                "typ": [
                    "typing.Iterable[T]",
                    "str",
                    "int"
                ],
                "overrides": [
                    "bool",
                    "list[str]",
                    "str"
                ],
                "memo": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[str, str]",
                    "None",
                    "int"
                ],
                "forward_refs": []
            }
        },
        "_maybe_node_for_newtype": {
            "name": "_maybe_node_for_newtype",
            "location": 75,
            "return": [
                "tuple[typing.Union[None,str,int,float]]"
            ],
            "arguments": {
                "typ": [
                    "bool",
                    "str"
                ],
                "overrides": [
                    "str",
                    "int",
                    "float"
                ],
                "memo": [
                    "str",
                    "int",
                    "float"
                ],
                "forward_refs": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_maybe_node_for_primitive": {
            "name": "_maybe_node_for_primitive",
            "location": 91,
            "return": [
                "tuple[typing.Union[None,set[],bool,typing.Type,tuple[int],str,float]]",
                "tuple[typing.Union[set[],bool,typing.Type,tuple[int],str,float]]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type",
                    "typing.Sequence[T]"
                ],
                "overrides": [
                    "int",
                    "str"
                ],
                "memo": [
                    "set[]",
                    "bool",
                    "typing.Type",
                    "tuple[int]",
                    "str",
                    "float"
                ],
                "forward_refs": [
                    "set[]",
                    "bool",
                    "typing.Type",
                    "tuple[int]",
                    "str",
                    "float"
                ]
            }
        },
        "_maybe_node_for_type_var": {
            "name": "_maybe_node_for_type_var",
            "location": 112,
            "return": [
                "tuple[typing.Optional[typing.Type]]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "float"
                ],
                "overrides": [
                    "list[str]",
                    "None",
                    "typing.AbstractSet",
                    "list[tuple[typing.Union[int,typing.Any]]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "memo": [
                    "typing.Type",
                    "None"
                ],
                "forward_refs": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "_maybe_node_for_subclass_based": {
            "name": "_maybe_node_for_subclass_based",
            "location": 128,
            "return": [
                "tuple[typing.Union[None,tuple[typing.Union[typing.Type,typing.Type]],bool,str]]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "list[str]",
                    "None",
                    "list[int]"
                ],
                "overrides": [
                    "bool",
                    "list[str]",
                    "str"
                ],
                "memo": [
                    "bool",
                    "str"
                ],
                "forward_refs": [
                    "bool",
                    "str"
                ]
            }
        },
        "_maybe_node_for_union": {
            "name": "_maybe_node_for_union",
            "location": 154,
            "return": [
                "tuple[typing.Union[bool,str]]",
                "tuple[typing.Union[tuple[],None,float,dict[typing.Any, list[str]],str,bool,typing.Pattern,dict[int, typing.Union[int,None]],list[tuple[typing.Union[str,bool,typing.Any]]],list[],typing.Type]]",
                "tuple[typing.Union[None,bool,str,dict[typing.Any, list[str]],typing.Pattern,dict[int, typing.Union[int,None]],list[tuple[typing.Union[str,bool,typing.Any]]],list[],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]],typing.Type]]"
            ],
            "arguments": {
                "typ": [
                    "str"
                ],
                "overrides": [
                    "str",
                    "int",
                    "None"
                ],
                "memo": [
                    "bool",
                    "str"
                ],
                "forward_refs": [
                    "bool",
                    "str"
                ],
                "supported_type": [
                    "set[]"
                ],
                "supported_origin": [
                    "set[typing.Union[]]"
                ]
            }
        },
        "_maybe_node_for_sum_type": {
            "name": "_maybe_node_for_sum_type",
            "location": 207,
            "return": [
                "tuple[typing.Union[None,set[],int,str,list[T]]]"
            ],
            "arguments": {
                "typ": [
                    "list[int]"
                ],
                "overrides": [
                    "int",
                    "list[T]",
                    "None",
                    "str",
                    "typing.Type"
                ],
                "memo": [
                    "int",
                    "str",
                    "None",
                    "list[T]"
                ],
                "forward_refs": [
                    "int",
                    "str",
                    "None",
                    "list[T]"
                ],
                "supported_type": [
                    "set[]"
                ],
                "supported_origin": [
                    "set[]"
                ]
            }
        },
        "_maybe_node_for_literal": {
            "name": "_maybe_node_for_literal",
            "location": 245,
            "return": [
                "tuple[typing.Union[None,str,int,dict[str, typing.Literal],dict[, ]]]"
            ],
            "arguments": {
                "typ": [
                    "str"
                ],
                "overrides": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "memo": [
                    "bool",
                    "str"
                ],
                "forward_refs": [
                    "bool",
                    "str"
                ],
                "supported_type": [
                    "set[]"
                ],
                "supported_origin": [
                    "set[typing.Literal]"
                ],
                "_supported_literal_types": [
                    "set[typing.Union[bool,str,bytes,typing.Type]]"
                ]
            }
        },
        "_maybe_node_for_sequence": {
            "name": "_maybe_node_for_sequence",
            "location": 272,
            "return": [
                "tuple[typing.Union[None,list[str],str,typing.Type,dict[, ],int,tuple[typing.Union[typing.Any,typing.Any,typing.Any]],list[dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "overrides": [
                    "str",
                    "int",
                    "None"
                ],
                "memo": [
                    "str",
                    "int",
                    "None"
                ],
                "forward_refs": [
                    "str",
                    "int",
                    "None"
                ],
                "supported_type": [
                    "set[]"
                ],
                "supported_origin": [
                    "set[typing.Union[list[],typing.Sequence[]]]"
                ]
            }
        },
        "get_origin_39": {
            "name": "get_origin_39",
            "location": 309,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "typ": [
                    "bool",
                    "str",
                    "list[int]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_maybe_node_for_set": {
            "name": "_maybe_node_for_set",
            "location": 317,
            "return": [
                "tuple[typing.Union[None,tuple[typing.Union[typing.Type,typing.Type]],str,tuple[typing.Union[int,int,int,int,int,int,int,int,int,int]],int,list[str],typing.Sequence[typing.Any],list[dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "typ": [
                    "str"
                ],
                "overrides": [
                    "int",
                    "list[str]",
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]"
                ],
                "memo": [
                    "int",
                    "list[str]",
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]"
                ],
                "forward_refs": [
                    "int",
                    "list[str]",
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]"
                ],
                "supported_type": [
                    "set[typing.Union[set[],frozenset]]"
                ],
                "supported_origin": [
                    "set[typing.Union[set[],typing.MutableSet,frozenset]]"
                ]
            }
        },
        "_maybe_node_for_tuple": {
            "name": "_maybe_node_for_tuple",
            "location": 356,
            "return": [
                "tuple[typing.Union[None,str,list[str],int,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]],list[],typing.Counter,typing.Pattern,list[dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "typing.Type"
                ],
                "overrides": [
                    "bool",
                    "str"
                ],
                "memo": [
                    "bool",
                    "str"
                ],
                "forward_refs": [
                    "bool",
                    "str"
                ],
                "supported_type": [
                    "set[tuple[]]"
                ],
                "supported_origin": [
                    "set[tuple[]]"
                ]
            }
        },
        "are_generic_bases_match": {
            "name": "are_generic_bases_match",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "bases": [
                    "list[]",
                    "list[typing.Type]"
                ],
                "template": [
                    "str",
                    "list[T]",
                    "list[str]"
                ]
            }
        },
        "is_pmap": {
            "name": "is_pmap",
            "location": 397,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "None",
                    "float",
                    "bytes"
                ]
            }
        },
        "is_39_deprecated_dict": {
            "name": "is_39_deprecated_dict",
            "location": 403,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "_maybe_node_for_dict": {
            "name": "_maybe_node_for_dict",
            "location": 410,
            "return": [
                "tuple[typing.Union[None,str,int,float,list[],typing.Pattern]]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "tuple[int]",
                    "bool"
                ],
                "overrides": [
                    "int",
                    "str",
                    "None"
                ],
                "memo": [
                    "int",
                    "str",
                    "None"
                ],
                "forward_refs": [
                    "int",
                    "str",
                    "None"
                ],
                "supported_type": [
                    "set[dict[, ]]"
                ],
                "supported_origin": [
                    "set[dict[, ]]"
                ]
            }
        },
        "_type_hints_getter": {
            "name": "_type_hints_getter",
            "location": 468,
            "return": [
                "list[AttrInfo]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "int",
                    "bytes",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_maybe_node_for_user_type": {
            "name": "_maybe_node_for_user_type",
            "location": 474,
            "return": [],
            "arguments": {
                "typ": [
                    "int"
                ],
                "overrides": [
                    "str"
                ],
                "memo": [
                    "bool",
                    "typing.Callable[T, typing.Any]"
                ],
                "forward_refs": [
                    "bool",
                    "typing.Callable[T, typing.Any]"
                ]
            }
        },
        "_maybe_node_for_overridden": {
            "name": "_maybe_node_for_overridden",
            "location": 604,
            "return": [
                "tuple[typing.Union[None,dict[, ],str,typing.Pattern,int]]"
            ],
            "arguments": {
                "typ": [
                    "bool"
                ],
                "overrides": [
                    "str"
                ],
                "memo": [
                    "int",
                    "str"
                ],
                "forward_refs": [
                    "int",
                    "str"
                ]
            }
        },
        "decide_node_type": {
            "name": "decide_node_type",
            "location": 645,
            "return": [
                "tuple[typing.Union[str,int,list[str],list[int],typing.Collection,None,set[],list[]]]",
                "tuple[typing.Union[int,list[str],typing.Pattern,list[],list[tuple[typing.Union[int,int]]],frozenset]]"
            ],
            "arguments": {
                "typ": [
                    "int"
                ],
                "overrides": [
                    "bool"
                ],
                "memo": [
                    "list[str]",
                    "list[int]"
                ],
                "forward_refs": [
                    "typing.Collection",
                    "None",
                    "set[]",
                    "list[str]",
                    "list[]"
                ]
            }
        }
    },
    "typeit-master/typeit/schema/errors.py": {
        "iter_invalid": {
            "name": "iter_invalid",
            "location": 40,
            "return": [
                "typing.Generator[InvalidData]"
            ],
            "arguments": {
                "error": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "data": [
                    "list[dict[, ]]"
                ]
            }
        },
        "errors_aware_constructor": {
            "name": "errors_aware_constructor",
            "location": 87,
            "return": [],
            "arguments": {
                "construct": [
                    "bytes",
                    "dict[, ]",
                    "typing.Type",
                    "int"
                ],
                "data": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "bytes",
                    "typing.Hashable"
                ]
            }
        },
        "InvalidData.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation_error": [
                    "str",
                    "int"
                ],
                "sample_data": [
                    "dict[, ]",
                    "int",
                    "None",
                    "bytes",
                    "typing.Any"
                ]
            }
        },
        "Error.__iter__": {
            "name": "__iter__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeit-master/typeit/schema/meta.py": {
        "TypeExtension.__and__": {
            "name": "__and__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeExtension.__add__": {
            "name": "__add__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "list[]",
                    "str",
                    "list[list[T]]",
                    "int"
                ]
            }
        },
        "SubscriptableSchemaTypeM.__getitem__": {
            "name": "__getitem__",
            "location": 31,
            "return": [
                "TypeExtension"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[, ]",
                    "int"
                ],
                "item": [
                    "typing.Type",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "SubscriptableSchemaTypeM.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeit-master/typeit/schema/nodes.py": {
        "SchemaNode.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetSchema.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetSchema.deserialize": {
            "name": "deserialize",
            "location": 33,
            "return": [
                "dict[tuple[typing.Union[int,int]], str]",
                "dict[str, typing.Any]",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PVectorSchema.deserialize": {
            "name": "deserialize",
            "location": 43,
            "return": [
                "str",
                "tuple[]",
                "dict[str, str]",
                "dict[str, typing.Union[int,None]]",
                "dict[, ]",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMapSchema.deserialize": {
            "name": "deserialize",
            "location": 51,
            "return": [
                "str",
                "tuple[]",
                "dict[str, str]",
                "dict[str, typing.Union[int,None]]",
                "dict[, ]",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeit-master/typeit/schema/primitives.py": {
        "_strict_deserialize": {
            "name": "_strict_deserialize",
            "location": 11,
            "return": [
                "int",
                "typing.Type",
                "str"
            ],
            "arguments": {
                "node": [
                    "bool",
                    "list[int]",
                    "typing.Type"
                ],
                "allowed_type": [
                    "typing.Type",
                    "str",
                    "int"
                ],
                "cstruct": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "_strict_serialize": {
            "name": "_strict_serialize",
            "location": 24,
            "return": [
                "int",
                "typing.Type",
                "str"
            ],
            "arguments": {
                "node": [
                    "bool",
                    "list[int]",
                    "typing.Type"
                ],
                "allowed_type": [
                    "typing.Type",
                    "str",
                    "int"
                ],
                "appstruct": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "AcceptEverything.serialize": {
            "name": "serialize",
            "location": 42,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ],
                "appstruct": [
                    "list[int]"
                ]
            }
        },
        "AcceptEverything.deserialize": {
            "name": "deserialize",
            "location": 45,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ],
                "cstruct": [
                    "list[int]"
                ]
            }
        },
        "NonStrictInt.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonStrictInt.serialize": {
            "name": "serialize",
            "location": 53,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "appstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Int.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.deserialize": {
            "name": "deserialize",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "None"
                ],
                "cstruct": [
                    "str",
                    "None"
                ]
            }
        },
        "Int.serialize": {
            "name": "serialize",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "None"
                ],
                "appstruct": [
                    "str",
                    "None"
                ]
            }
        },
        "NonStrictBool.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonStrictBool.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "appstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Bool.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.deserialize": {
            "name": "deserialize",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "cstruct": []
            }
        },
        "Bool.serialize": {
            "name": "serialize",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": []
            }
        },
        "Bytes.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supported_conversions": [
                    "tuple[typing.Union[int,str,bytes]]"
                ]
            }
        },
        "Bytes.serialize": {
            "name": "serialize",
            "location": 118,
            "return": [
                "None",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ],
                "appstruct": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "NonStrictStr.serialize": {
            "name": "serialize",
            "location": 145,
            "return": [
                "None",
                "typing.Pattern",
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "appstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Str.deserialize": {
            "name": "deserialize",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bytes"
                ],
                "cstruct": [
                    "bytes"
                ]
            }
        },
        "Str.serialize": {
            "name": "serialize",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bytes"
                ],
                "appstruct": [
                    "bytes"
                ]
            }
        },
        "NonStrictFloat.__repr__": {
            "name": "__repr__",
            "location": 173,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonStrictFloat.serialize": {
            "name": "serialize",
            "location": 176,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "appstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Float.__repr__": {
            "name": "__repr__",
            "location": 184,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.deserialize": {
            "name": "deserialize",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ],
                "cstruct": [
                    "int"
                ]
            }
        },
        "Float.serialize": {
            "name": "serialize",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ],
                "appstruct": [
                    "int"
                ]
            }
        }
    },
    "typeit-master/typeit/schema/types.py": {
        "TypedMapping.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedMapping.deserialize": {
            "name": "deserialize",
            "location": 28,
            "return": [
                "dict[str, typing.Literal]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cstruct": []
            }
        },
        "TypedMapping.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                "dict[str, typing.Literal]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "appstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "float"
                ]
            }
        },
        "Path.serialize": {
            "name": "serialize",
            "location": 64,
            "return": [
                "Null",
                "str",
                "typing.Generator[typing.Union[pathlib.Path,None,None]]",
                "dict[str, typing.Union[float,str]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "None"
                ],
                "appstruct": [
                    "str",
                    "set[]",
                    "int"
                ]
            }
        },
        "Path.deserialize": {
            "name": "deserialize",
            "location": 70,
            "return": [
                "Null"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ],
                "cstruct": [
                    "dict[, ]"
                ]
            }
        },
        "Structure.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "float"
                ],
                "attrs": [
                    "int",
                    "float"
                ],
                "deserialize_overrides": [
                    "int"
                ],
                "unknown": [
                    "typing.Text"
                ]
            }
        },
        "Structure.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Structure.deserialize": {
            "name": "deserialize",
            "location": 104,
            "return": [
                "Null"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str"
                ],
                "cstruct": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Structure.serialize": {
            "name": "serialize",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "appstruct": []
            }
        },
        "Sum.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "typing.Mapping",
                    "str",
                    "None"
                ],
                "variant_nodes": [],
                "as_dict_key": [
                    "None",
                    "bool",
                    "list[float]",
                    "set[tuple[typing.Union[int,int]]]",
                    "dict[str, dict[str, str]]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "Sum.deserialize": {
            "name": "deserialize",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "tuple[object]"
                ],
                "cstruct": []
            }
        },
        "Sum.serialize": {
            "name": "serialize",
            "location": 202,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": []
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "float"
                ]
            }
        },
        "Enum.serialize": {
            "name": "serialize",
            "location": 230,
            "return": [
                "Null",
                "str",
                "typing.DefaultDict",
                "list[]",
                "typing.OrderedDict",
                "list[float]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": [
                    "typing.Pattern",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Enum.deserialize": {
            "name": "deserialize",
            "location": 236,
            "return": [
                "Null"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ],
                "cstruct": [
                    "dict[, ]"
                ]
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variants": [
                    "int",
                    "float"
                ]
            }
        },
        "Literal.deserialize": {
            "name": "deserialize",
            "location": 254,
            "return": [
                "Null",
                "int",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cstruct": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "Literal.serialize": {
            "name": "serialize",
            "location": 267,
            "return": [
                "None",
                "int",
                "list[int]",
                "Null"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "appstruct": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "Union.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant_nodes": [
                    "list[int]",
                    "str"
                ],
                "primitive_types": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Union.__repr__": {
            "name": "__repr__",
            "location": 305,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Union.deserialize": {
            "name": "deserialize",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "cstruct": []
            }
        },
        "Union.serialize": {
            "name": "serialize",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "appstruct": [
                    "int"
                ]
            }
        },
        "ForwardReferenceType.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "forward_ref": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "ref_registry": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ForwardReferenceType.__repr__": {
            "name": "__repr__",
            "location": 445,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardReferenceType.deserialize": {
            "name": "deserialize",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ],
                "cstruct": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "ForwardReferenceType.serialize": {
            "name": "serialize",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ],
                "appstruct": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "typeit-master/typeit/schema/__init__.py": {},
    "typeit-master/typeit/sums/impl.py": {
        "verify_consistency": {
            "name": "verify_consistency",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "base_variants": [],
                "variants": []
            }
        },
        "compare_attrs": {
            "name": "compare_attrs",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "attrs": [
                    "dict[, ]",
                    "str"
                ],
                "fst": [
                    "dict[, ]",
                    "str"
                ],
                "snd": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "SumTypeMetaData.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "typing.Type"
                ],
                "variants": [
                    "str",
                    "typing.Type"
                ],
                "values": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "SumTypeMetaclass.__new__": {
            "name": "__new__",
            "location": 37,
            "return": [],
            "arguments": {
                "mcs": [
                    "tuple[typing.Type]",
                    "str"
                ],
                "class_name": [
                    "str",
                    "None",
                    "typing.Type",
                    "int"
                ],
                "bases": [
                    "tuple[typing.Type]",
                    "str"
                ],
                "attrs": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "SumTypeMetaclass.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "SumTypeMetaclass.__call__": {
            "name": "__call__",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [
                    "str",
                    "typing.Iterable[T]",
                    "Exception",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "SumType.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SumType.values": {
            "name": "values",
            "location": 147,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SumType.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant_meta": [],
                "data_args": [
                    "None",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "list[dict[str, int]]"
                ],
                "data_kwargs": [
                    "None",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "list[dict[str, int]]"
                ]
            }
        },
        "SumType.__getattr__": {
            "name": "__getattr__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "SumType.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumType.__eq__": {
            "name": "__eq__",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "SumType.__repr__": {
            "name": "__repr__",
            "location": 192,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumType.__new__": {
            "name": "__new__",
            "location": 199,
            "return": [
                "str",
                "bool",
                "typing.Iterable[typing.Hashable]",
                "typing.Type",
                "typing.Sequence[str]",
                "cls"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "typing.Type",
                    "typing.Sequence[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Hashable]",
                    "typing.Type",
                    "typing.Sequence[str]"
                ]
            }
        },
        "SumType.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 222,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "typeit-master/typeit/sums/types.py": {},
    "typeit-master/typeit/sums/__init__.py": {},
    "typeit-master/typeit/tokenizer/__init__.py": {
        "iter_tokens": {
            "name": "iter_tokens",
            "location": 56,
            "return": [
                "typing.Generator[BeginType]",
                "typing.Generator[]",
                "typing.Generator[EndType]"
            ],
            "arguments": {
                "typ": [
                    "typing.Callable[str, bool]",
                    "None",
                    "int",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[]"
                ],
                "typer": []
            }
        },
        "iter_schema_node": {
            "name": "iter_schema_node",
            "location": 83,
            "return": [
                "typing.Generator[BeginAttribute]",
                "typing.Generator[]",
                "typing.Generator[EndAttribute]"
            ],
            "arguments": {
                "typ_schema": [
                    "dict[, ]"
                ],
                "typer": []
            }
        },
        "iter_sequence_node": {
            "name": "iter_sequence_node",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "typ_schema": [
                    "typing.Any",
                    "None",
                    "str",
                    "typing.Callable[_, None]",
                    "bool"
                ]
            }
        }
    }
}
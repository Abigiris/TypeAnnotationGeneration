{
    "typesafe-monads-master/setup.py": {},
    "typesafe-monads-master/monads/applicative.py": {
        "Applicative.pure": {
            "name": "pure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Applicative.apply": {
            "name": "apply",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "typesafe-monads-master/monads/currying.py": {
        "curry": {
            "name": "curry",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "typing.Iterator"
                ]
            }
        },
        "uncurry": {
            "name": "uncurry",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool"
                ]
            }
        },
        "Curried.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurriedBinary.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurriedTernary.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurriedQuaternary.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurriedQuinary.__call__": {
            "name": "__call__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "curry.wrapped": {
            "name": "wrapped",
            "location": 135,
            "return": [],
            "arguments": {
                "args": [],
                "remaining": []
            }
        },
        "uncurry.wrapped": {
            "name": "wrapped",
            "location": 191,
            "return": [],
            "arguments": {}
        }
    },
    "typesafe-monads-master/monads/functor.py": {
        "Functor.map": {
            "name": "map",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        }
    },
    "typesafe-monads-master/monads/future.py": {
        "Future.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "awaitable": [
                    "int",
                    "float"
                ]
            }
        },
        "Future.pure": {
            "name": "pure",
            "location": 20,
            "return": [
                "Future"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Future.map": {
            "name": "map",
            "location": 26,
            "return": [
                "Future"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Future.apply": {
            "name": "apply",
            "location": 33,
            "return": [
                "Future"
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Future.bind": {
            "name": "bind",
            "location": 41,
            "return": [
                "Future"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Future.sequence": {
            "name": "sequence",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "float",
                    "bytes",
                    "bytearray",
                    "memoryview",
                    "typing.Iterable[list[T]]",
                    "int"
                ]
            }
        },
        "Future.__await__": {
            "name": "__await__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.sequence.mcons": {
            "name": "mcons",
            "location": 53,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        }
    },
    "typesafe-monads-master/monads/list.py": {
        "List.pure": {
            "name": "pure",
            "location": 15,
            "return": [
                "List"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float",
                    "typing.Callable[object, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "List.bind": {
            "name": "bind",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Type",
                    "str",
                    "typing.Callable[typing.Callable[, ], typing.Callable[..., None]]"
                ]
            }
        },
        "List.map": {
            "name": "map",
            "location": 21,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "List.apply": {
            "name": "apply",
            "location": 24,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "typing.Collection",
                    "int",
                    "typing.Deque"
                ]
            }
        },
        "List.sequence": {
            "name": "sequence",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "typing.Iterable[list[T]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "List.mzero": {
            "name": "mzero",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "List.mappend": {
            "name": "mappend",
            "location": 43,
            "return": [
                "List"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.sequence.mcons": {
            "name": "mcons",
            "location": 33,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        }
    },
    "typesafe-monads-master/monads/maybe.py": {
        "maybe": {
            "name": "maybe",
            "location": 115,
            "return": [
                "Just",
                "Nothing"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "list[]",
                    "None"
                ],
                "predicate": [
                    "None",
                    "int",
                    "list[]",
                    "list[float]",
                    "tuple[]",
                    "str"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 140,
            "return": [],
            "arguments": {
                "xs": [
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 161,
            "return": [],
            "arguments": {
                "xs": [
                    "list[]"
                ]
            }
        },
        "Maybe.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.pure": {
            "name": "pure",
            "location": 18,
            "return": [
                "Just"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "float",
                    "typing.Callable[typing.Any, T]",
                    "bool"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 21,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 28,
            "return": [
                "Just",
                "Nothing"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "Maybe.apply": {
            "name": "apply",
            "location": 35,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "int",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "Maybe.sequence": {
            "name": "sequence",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "float",
                    "bytes",
                    "bytearray",
                    "memoryview",
                    "typing.Iterable[list[T]]",
                    "int"
                ]
            }
        },
        "Maybe.withDefault": {
            "name": "withDefault",
            "location": 52,
            "return": [
                "list[]",
                "int",
                "typing.Sequence[]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "list[]",
                    "int",
                    "typing.Sequence[]"
                ]
            }
        },
        "Maybe.fromResult": {
            "name": "fromResult",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "m": [
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Maybe.toResult": {
            "name": "toResult",
            "location": 62,
            "return": [
                "Ok",
                "Err"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "dict[, ]",
                    "float",
                    "typing.Callable[typing.Callable[, ], typing.Callable[..., typing.Any]]"
                ]
            }
        },
        "Maybe.fromOptional": {
            "name": "fromOptional",
            "location": 69,
            "return": [
                "Nothing",
                "Just"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "None",
                    "typing.Any",
                    "int"
                ]
            }
        },
        "Maybe.toOptional": {
            "name": "toOptional",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.fromList": {
            "name": "fromList",
            "location": 82,
            "return": [
                "Just",
                "Nothing"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "Just.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Just.__eq__": {
            "name": "__eq__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]"
                ]
            }
        },
        "Just.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.__eq__": {
            "name": "__eq__",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "First.mzero": {
            "name": "mzero",
            "location": 125,
            "return": [
                "First"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "First.mappend": {
            "name": "mappend",
            "location": 128,
            "return": [
                "First",
                "list[str]",
                "int",
                "float",
                "typing.AbstractSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "First.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Last.mzero": {
            "name": "mzero",
            "location": 146,
            "return": [
                "Last"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Last.mappend": {
            "name": "mappend",
            "location": 149,
            "return": [
                "typing.Iterable[typing.Any]",
                "typing.AbstractSet",
                "Last"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[typing.Any]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Last.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.sequence.mcons": {
            "name": "mcons",
            "location": 46,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        }
    },
    "typesafe-monads-master/monads/monad.py": {
        "Monad.bind": {
            "name": "bind",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "Monad.pure": {
            "name": "pure",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Monad.sequence": {
            "name": "sequence",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[typing.Any]",
                    "bool"
                ],
                "xs": [
                    "typing.Iterable[typing.Any]",
                    "bool"
                ]
            }
        }
    },
    "typesafe-monads-master/monads/monoid.py": {
        "Monoid.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Monoid.mappend": {
            "name": "mappend",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "Monoid.mzero": {
            "name": "mzero",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Monoid.mconcat": {
            "name": "mconcat",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "float"
                ]
            }
        },
        "Monoid.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[T]"
                ]
            }
        },
        "Monoidal.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.mzero": {
            "name": "mzero",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "String.mappend": {
            "name": "mappend",
            "location": 48,
            "return": [
                "String"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Addition.mzero": {
            "name": "mzero",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Addition.mappend": {
            "name": "mappend",
            "location": 59,
            "return": [
                "Addition"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiplication.mzero": {
            "name": "mzero",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Multiplication.mappend": {
            "name": "mappend",
            "location": 70,
            "return": [
                "Multiplication"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "typesafe-monads-master/monads/reader.py": {
        "Reader.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Reader.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "environment": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "Reader.pure": {
            "name": "pure",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "value": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Reader.map": {
            "name": "map",
            "location": 42,
            "return": [
                "Reader"
            ],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Reader.apply": {
            "name": "apply",
            "location": 46,
            "return": [
                "Reader"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ]
            }
        },
        "Reader.bind": {
            "name": "bind",
            "location": 50,
            "return": [
                "Reader"
            ],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Reader.sequence": {
            "name": "sequence",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "typing.Iterable[list[T]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Reader.__eq__": {
            "name": "__eq__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type"
                ]
            }
        },
        "Reader.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.sequence.mcons": {
            "name": "mcons",
            "location": 58,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        },
        "Reader.pure.constant.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        }
    },
    "typesafe-monads-master/monads/result.py": {
        "safe": {
            "name": "safe",
            "location": 119,
            "return": [],
            "arguments": {
                "function": [
                    "typing.Callable[..., T]",
                    "float"
                ]
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.pure": {
            "name": "pure",
            "location": 18,
            "return": [
                "Ok"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float",
                    "typing.Callable[object, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "Result.bind": {
            "name": "bind",
            "location": 21,
            "return": [
                "Err"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Result.map": {
            "name": "map",
            "location": 30,
            "return": [
                "Err"
            ],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Result.mapError": {
            "name": "mapError",
            "location": 39,
            "return": [
                "Err",
                "Ok"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Result.apply": {
            "name": "apply",
            "location": 47,
            "return": [
                "Err"
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "int",
                    "float",
                    "typing.Callable[int, None]",
                    "str"
                ]
            }
        },
        "Result.sequence": {
            "name": "sequence",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "xs": [
                    "float",
                    "bytes",
                    "bytearray",
                    "memoryview",
                    "typing.Iterable[list[T]]",
                    "int"
                ]
            }
        },
        "Result.withDefault": {
            "name": "withDefault",
            "location": 66,
            "return": [
                "list[]",
                "int",
                "typing.Sequence[]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "list[]",
                    "int",
                    "typing.Sequence[]"
                ]
            }
        },
        "Result.fromMaybe": {
            "name": "fromMaybe",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "typing.Callable[[], None]"
                ],
                "m": [
                    "bool"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "Result.toMaybe": {
            "name": "toMaybe",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.fromOptional": {
            "name": "fromOptional",
            "location": 80,
            "return": [
                "Err",
                "Ok"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "collections.abc.Coroutine",
                    "bool"
                ],
                "value": [
                    "None",
                    "str",
                    "bool"
                ],
                "error": [
                    "str",
                    "float",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Result.toOptional": {
            "name": "toOptional",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ok.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Ok.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Hashable"
                ]
            }
        },
        "Ok.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Err.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "int",
                    "float"
                ]
            }
        },
        "Err.__eq__": {
            "name": "__eq__",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Err.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "safe.wrapped": {
            "name": "wrapped",
            "location": 129,
            "return": [
                "Ok",
                "Err"
            ],
            "arguments": {}
        },
        "Result.sequence.mcons": {
            "name": "mcons",
            "location": 60,
            "return": [],
            "arguments": {
                "acc": [],
                "x": []
            }
        }
    },
    "typesafe-monads-master/monads/__init__.py": {},
    "typesafe-monads-master/tests/fixtures.py": {
        "monad": {
            "name": "monad",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "typesafe-monads-master/tests/test_applicatives.py": {
        "test_fmap_using_ap": {
            "name": "test_fmap_using_ap",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_apply_and_operator": {
            "name": "test_apply_and_operator",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        }
    },
    "typesafe-monads-master/tests/test_currying.py": {
        "test_curry": {
            "name": "test_curry",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_call_curried_function_with_multiple_arguments": {
            "name": "test_call_curried_function_with_multiple_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curried_function_annotation_matches_original_function": {
            "name": "test_curried_function_annotation_matches_original_function",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curried_function_annotation_drops_arguments_as_it_is_applied": {
            "name": "test_curried_function_annotation_drops_arguments_as_it_is_applied",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curry.add3": {
            "name": "add3",
            "location": 6,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_call_curried_function_with_multiple_arguments.add5": {
            "name": "add5",
            "location": 14,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": []
            }
        },
        "test_curried_function_annotation_matches_original_function.add3": {
            "name": "add3",
            "location": 21,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_curried_function_annotation_drops_arguments_as_it_is_applied.add3": {
            "name": "add3",
            "location": 28,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        }
    },
    "typesafe-monads-master/tests/test_functors.py": {
        "test_identity": {
            "name": "test_identity",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_map_mul_operator": {
            "name": "test_map_mul_operator",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_map_rmul_operator": {
            "name": "test_map_rmul_operator",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        }
    },
    "typesafe-monads-master/tests/test_future.py": {
        "test_monad_left_identity.f": {
            "name": "f",
            "location": 80,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_monad_associativity.f": {
            "name": "f",
            "location": 94,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_monad_associativity.g": {
            "name": "g",
            "location": 97,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "typesafe-monads-master/tests/test_maybe.py": {
        "test_types": {
            "name": "test_types",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_just": {
            "name": "test_bind_just",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_nothing": {
            "name": "test_bind_nothing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_just_to_just": {
            "name": "test_apply_just_to_just",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_just_to_nothing": {
            "name": "test_apply_just_to_nothing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_nothing_to_just": {
            "name": "test_apply_nothing_to_just",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_nothing_to_nothing": {
            "name": "test_apply_nothing_to_nothing",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_just_withdefault": {
            "name": "test_just_withdefault",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nothing_withdefault": {
            "name": "test_nothing_withdefault",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_none": {
            "name": "test_maybe_none",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_something": {
            "name": "test_maybe_something",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_boolean_false": {
            "name": "test_maybe_boolean_false",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_boolean_true": {
            "name": "test_maybe_boolean_true",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first": {
            "name": "test_first",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last": {
            "name": "test_last",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_empty_list": {
            "name": "test_from_empty_list",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_nonempty_list": {
            "name": "test_from_nonempty_list",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_ok": {
            "name": "test_from_ok",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_err": {
            "name": "test_from_err",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_just_to_result": {
            "name": "test_just_to_result",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nothing_to_result": {
            "name": "test_nothing_to_result",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_optional_value": {
            "name": "test_from_optional_value",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_optional_none": {
            "name": "test_from_optional_none",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_just_to_optional": {
            "name": "test_just_to_optional",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nothing_to_optional": {
            "name": "test_nothing_to_optional",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typesafe-monads-master/tests/test_monads.py": {
        "test_bind": {
            "name": "test_bind",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_bind_rshift_operator": {
            "name": "test_bind_rshift_operator",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_left_identity": {
            "name": "test_left_identity",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": [
                    "int"
                ]
            }
        },
        "test_right_identity": {
            "name": "test_right_identity",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": []
            }
        },
        "test_sequence": {
            "name": "test_sequence",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "monad": [
                    "str",
                    "float"
                ]
            }
        },
        "test_left_identity.f": {
            "name": "f",
            "location": 23,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_associativity.f": {
            "name": "f",
            "location": 37,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_associativity.g": {
            "name": "g",
            "location": 40,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "typesafe-monads-master/tests/test_monoids.py": {
        "constructor": {
            "name": "constructor",
            "location": 22,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "construct": {
            "name": "construct",
            "location": 26,
            "return": [],
            "arguments": {
                "constructor": [
                    "float",
                    "int",
                    "None"
                ],
                "value": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_mappend_add_operator": {
            "name": "test_mappend_add_operator",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "constructor": []
            }
        },
        "test_associative": {
            "name": "test_associative",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "constructor": [
                    "int"
                ]
            }
        },
        "test_mconcat_empty": {
            "name": "test_mconcat_empty",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "constructor": [
                    "bool"
                ]
            }
        },
        "test_mconcat": {
            "name": "test_mconcat",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "constructor": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "typesafe-monads-master/tests/test_reader.py": {
        "test_types": {
            "name": "test_types",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_identity": {
            "name": "test_functor_identity",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_associativity": {
            "name": "test_functor_associativity",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_map_mul_operator": {
            "name": "test_functor_map_mul_operator",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_map_rmul_operator": {
            "name": "test_functor_map_rmul_operator",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applicative_fmap_using_ap": {
            "name": "test_applicative_fmap_using_ap",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_bind": {
            "name": "test_monad_bind",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_bind_rshift_operator": {
            "name": "test_monad_bind_rshift_operator",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_left_identity": {
            "name": "test_monad_left_identity",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_right_identity": {
            "name": "test_monad_right_identity",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_associativity": {
            "name": "test_monad_associativity",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pure_annotation_includes_concrete_type": {
            "name": "test_pure_annotation_includes_concrete_type",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monad_left_identity.f": {
            "name": "f",
            "location": 68,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_monad_associativity.f": {
            "name": "f",
            "location": 83,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_monad_associativity.g": {
            "name": "g",
            "location": 86,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "typesafe-monads-master/tests/test_result.py": {
        "test_types": {
            "name": "test_types",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_ok": {
            "name": "test_bind_ok",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_err": {
            "name": "test_bind_err",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_ok_to_ok": {
            "name": "test_apply_ok_to_ok",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_ok_to_err": {
            "name": "test_apply_ok_to_err",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_err_to_ok": {
            "name": "test_apply_err_to_ok",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_err_to_err": {
            "name": "test_apply_err_to_err",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ok_withdefault": {
            "name": "test_ok_withdefault",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err_withdefault": {
            "name": "test_err_withdefault",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map": {
            "name": "test_map",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_infix": {
            "name": "test_map_infix",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_error_err": {
            "name": "test_map_error_err",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_error_ok": {
            "name": "test_map_error_ok",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind": {
            "name": "test_bind",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_infix": {
            "name": "test_bind_infix",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline": {
            "name": "test_pipeline",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsafe_wrapped_function_returns_error": {
            "name": "test_unsafe_wrapped_function_returns_error",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_wrapped_function_returns_ok": {
            "name": "test_safe_wrapped_function_returns_ok",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_just": {
            "name": "test_from_just",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_nothing": {
            "name": "test_from_nothing",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ok_to_maybe": {
            "name": "test_ok_to_maybe",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err_to_maybe": {
            "name": "test_err_to_maybe",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_optional_value": {
            "name": "test_from_optional_value",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_optional_none": {
            "name": "test_from_optional_none",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ok_to_optional": {
            "name": "test_ok_to_optional",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err_to_optional": {
            "name": "test_err_to_optional",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline.load_config": {
            "name": "load_config",
            "location": 108,
            "return": [
                "Ok"
            ],
            "arguments": {}
        },
        "test_unsafe_wrapped_function_returns_error.unsafe": {
            "name": "unsafe",
            "location": 124,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_safe_wrapped_function_returns_ok.unsafe": {
            "name": "unsafe",
            "location": 138,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_pipeline.Frobnicator.create": {
            "name": "create",
            "location": 102,
            "return": [
                "Ok"
            ],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "test_pipeline.Frobnicator.dostuff": {
            "name": "dostuff",
            "location": 105,
            "return": [
                "Ok"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typesafe-monads-master/tests/__init__.py": {}
}
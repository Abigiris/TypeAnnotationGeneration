{
    "vistautils-master/setup.py": {},
    "vistautils-master/docs/conf.py": {},
    "vistautils-master/tests/misc_utils_test.py": {
        "ExceptionUtilsTest.test_limit_str": {
            "name": "test_limit_str",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionUtilsTest.test_flatten_once": {
            "name": "test_flatten_once",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_annotated_text_utils.py": {
        "TestAnnotatedTextUtils.test_format": {
            "name": "test_format",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_checkpoints.py": {
        "TestCheckpoints.test_filesystem_checkpoints": {
            "name": "test_filesystem_checkpoints",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_class_utils.py": {
        "TestClassUtils.test_fully_qualified_name": {
            "name": "test_fully_qualified_name",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_collection_utils.py": {
        "TestCollectionUtils.test_get_only": {
            "name": "test_get_only",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_generic_bug.py": {
        "TestGenericBug.test_no_slots_ok": {
            "name": "test_no_slots_ok",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericBug.test_no_attrs": {
            "name": "test_no_attrs",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericBug.test_frozen_with_generic_parent_ok": {
            "name": "test_frozen_with_generic_parent_ok",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericBug.test_slots_with_no_parent": {
            "name": "test_slots_with_no_parent",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericBug.test_frozen_with_generic_parent_ok.Foo2.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "vistautils-master/tests/test_graph.py": {
        "TestGraph.test_initialization": {
            "name": "test_initialization",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph.test_in_degree": {
            "name": "test_in_degree",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph.test_topological_sort": {
            "name": "test_topological_sort",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_io_utils.py": {
        "test_file_lines_to_set": {
            "name": "test_file_lines_to_set",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_to_file_byte": {
            "name": "test_to_file_byte",
            "location": 173,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "TestIOUtils.test_empty": {
            "name": "test_empty",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_wrap": {
            "name": "test_wrap",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_from_file": {
            "name": "test_from_file",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_from_gzip_file": {
            "name": "test_from_gzip_file",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_empty_gzip": {
            "name": "test_empty_gzip",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_from_within_tgz_file": {
            "name": "test_from_within_tgz_file",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_null_sink": {
            "name": "test_null_sink",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_to_file_write": {
            "name": "test_to_file_write",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_to_file_write_string_arg": {
            "name": "test_to_file_write_string_arg",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_to_file_open": {
            "name": "test_to_file_open",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_file_in_zip": {
            "name": "test_file_in_zip",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_string_sink": {
            "name": "test_string_sink",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_byte_buffer_sink": {
            "name": "test_byte_buffer_sink",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIOUtils.test_read_write_doc_id_to_file_map": {
            "name": "test_read_write_doc_id_to_file_map",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_iter_utils.py": {
        "_as_iterable": {
            "name": "_as_iterable",
            "location": 10,
            "return": [
                "dict[str, int]",
                "bool"
            ],
            "arguments": {
                "it": [
                    "dict[str, int]",
                    "bool"
                ]
            }
        },
        "_as_iterator": {
            "name": "_as_iterator",
            "location": 14,
            "return": [],
            "arguments": {
                "it": [
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "test_non_none": {
            "name": "test_non_none",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestIterUtils.test_drop": {
            "name": "test_drop",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_only": {
            "name": "test_only",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_windowed_bad_window_size": {
            "name": "test_windowed_bad_window_size",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_single_element_window": {
            "name": "test_single_element_window",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_two_element_window": {
            "name": "test_two_element_window",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_window_size_equals_sequence_size": {
            "name": "test_window_size_equals_sequence_size",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterUtils.test_window_size_exceeds_sequence_size": {
            "name": "test_window_size_exceeds_sequence_size",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_key_value.py": {
        "test_char_source_sink_from_params": {
            "name": "test_char_source_sink_from_params",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "int"
                ]
            }
        },
        "test_binary_source_sink_from_params": {
            "name": "test_binary_source_sink_from_params",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_doc_id_from_file": {
            "name": "test_doc_id_from_file",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_empty_zip_key_value": {
            "name": "test_empty_zip_key_value",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_from_path_mapping_char": {
            "name": "test_from_path_mapping_char",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_directory_char_key_value_sink": {
            "name": "test_directory_char_key_value_sink",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_directory_byte_key_value_sink": {
            "name": "test_directory_byte_key_value_sink",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "TestKeyValue.test_zip_bytes": {
            "name": "test_zip_bytes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyValue.test_zip_chars": {
            "name": "test_zip_chars",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyValue.test_tgz_chars": {
            "name": "test_tgz_chars",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyValue.test_tgz_chars.write_string_to_tar": {
            "name": "write_string_to_tar",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "val": []
            }
        },
        "TestKeyValue.test_tgz_chars.filter_out_keys_containing_bad": {
            "name": "filter_out_keys_containing_bad",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": []
            }
        },
        "TestKeyValue.test_tgz_chars.keep_only_first_three_chars_of_key_ban_too_short": {
            "name": "keep_only_first_three_chars_of_key_ban_too_short",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "vistautils-master/tests/test_memory_amount.py": {
        "test_memory_unit": {
            "name": "test_memory_unit",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "reference_unit": [
                    "str",
                    "bool"
                ],
                "string_to_parse": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bad_memory_unit": {
            "name": "test_bad_memory_unit",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_amount": {
            "name": "test_memory_amount",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "reference_amount": [
                    "str",
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "amount_string": [
                    "str"
                ],
                "reference_unit": [
                    "str",
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "unit_string": [
                    "str"
                ],
                "spaces": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        }
    },
    "vistautils-master/tests/test_misc_utils.py": {
        "TestMiscUtils.test_eval_in_context_of_modules": {
            "name": "test_eval_in_context_of_modules",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiscUtils.test_eval_in_context_of_modules_mismatched_type": {
            "name": "test_eval_in_context_of_modules_mismatched_type",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_parameters.py": {
        "test_enum_members": {
            "name": "test_enum_members",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sub_namespaces": {
            "name": "test_sub_namespaces",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assert_exactly_one_present": {
            "name": "test_assert_exactly_one_present",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolating_nested_parameters": {
            "name": "test_interpolating_nested_parameters",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_exception_when_interpolating_unknown_param": {
            "name": "test_exception_when_interpolating_unknown_param",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_namespaced_items": {
            "name": "test_namespaced_items",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_path_list": {
            "name": "test_relative_path_list",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_relative_path_from_yaml_list": {
            "name": "test_relative_path_from_yaml_list",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_path_map": {
            "name": "test_relative_path_map",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "TestParameters.test_writing_to_yaml": {
            "name": "test_writing_to_yaml",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_from_key_value_pairs": {
            "name": "test_from_key_value_pairs",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_boolean": {
            "name": "test_boolean",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_existing_file": {
            "name": "test_optional_existing_file",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_existing_directory": {
            "name": "test_optional_existing_directory",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_creatable_directory": {
            "name": "test_optional_creatable_directory",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_creatable_empty_directory": {
            "name": "test_optional_creatable_empty_directory",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_creatable_file": {
            "name": "test_optional_creatable_file",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_string": {
            "name": "test_string",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_float": {
            "name": "test_float",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_integer": {
            "name": "test_integer",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_interpolation": {
            "name": "test_interpolation",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_environmental_variable_interpolation": {
            "name": "test_environmental_variable_interpolation",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_double_context_fail": {
            "name": "test_double_context_fail",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_inclusion": {
            "name": "test_inclusion",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_arbitrary_list": {
            "name": "test_arbitrary_list",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_positive_integer": {
            "name": "test_positive_integer",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_absents": {
            "name": "test_absents",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optionals_when_present": {
            "name": "test_optionals_when_present",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_object_from_parameters": {
            "name": "test_object_from_parameters",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_optional_defaults": {
            "name": "test_optional_defaults",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_namespace_prefix": {
            "name": "test_namespace_prefix",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_pickled_object_from_file": {
            "name": "test_pickled_object_from_file",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameters.test_object_from_parameters.default_creator": {
            "name": "default_creator",
            "location": 525,
            "return": [
                "int"
            ],
            "arguments": {
                "params": []
            }
        },
        "TestParameters.test_object_from_parameters.TestObj.from_parameters": {
            "name": "from_parameters",
            "location": 498,
            "return": [
                "TestObj"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "vistautils-master/tests/test_parameters_only_entry_point.py": {
        "sample_main": {
            "name": "sample_main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "float",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "test_parameters_only_entry_point": {
            "name": "test_parameters_only_entry_point",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "int"
                ]
            }
        }
    },
    "vistautils-master/tests/test_preconditions.py": {
        "TestPreconditions.test_check_arg_interpolation": {
            "name": "test_check_arg_interpolation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreconditions.test_not_none": {
            "name": "test_not_none",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_range.py": {
        "TestRange.test_open": {
            "name": "test_open",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_closed": {
            "name": "test_closed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_open_closed": {
            "name": "test_open_closed",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_closed_open": {
            "name": "test_closed_open",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_singleton": {
            "name": "test_singleton",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_empty_1": {
            "name": "test_empty_1",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_empty_2": {
            "name": "test_empty_2",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_less_than": {
            "name": "test_less_than",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_greater_than": {
            "name": "test_greater_than",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_at_least": {
            "name": "test_at_least",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_at_most": {
            "name": "test_at_most",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_all": {
            "name": "test_all",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_equals": {
            "name": "test_equals",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_encloses_open": {
            "name": "test_encloses_open",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_encloses_closed": {
            "name": "test_encloses_closed",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.check_contains": {
            "name": "check_contains",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "bytes"
                ]
            }
        },
        "TestRange.assert_unbounded_below": {
            "name": "assert_unbounded_below",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "TestRange.assert_unbounded_above": {
            "name": "assert_unbounded_above",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "TestRange.test_cuts": {
            "name": "test_cuts",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_intersection_empty": {
            "name": "test_intersection_empty",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_intersection_de_facto_empty": {
            "name": "test_intersection_de_facto_empty",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_intersection_singleton": {
            "name": "test_intersection_singleton",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_intersection_general": {
            "name": "test_intersection_general",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_intersects": {
            "name": "test_intersects",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_create_spanning": {
            "name": "test_create_spanning",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_check_usable_in_set": {
            "name": "test_check_usable_in_set",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_range_set_equality": {
            "name": "test_range_set_equality",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_range_enclosing_range": {
            "name": "test_range_enclosing_range",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_range_clear": {
            "name": "test_range_clear",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_immutable_range_map_empty": {
            "name": "test_immutable_range_map_empty",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRange.test_ranges_enclosed_by_out_of_bounds": {
            "name": "test_ranges_enclosed_by_out_of_bounds",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_range_map.py": {
        "TestRangeMap.test_empty": {
            "name": "test_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_no_overlap": {
            "name": "test_no_overlap",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_lookup": {
            "name": "test_lookup",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_enclosed": {
            "name": "test_enclosed",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_overlapping_keys_banned": {
            "name": "test_overlapping_keys_banned",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_temporary_exception_on_connected_range_keys": {
            "name": "test_temporary_exception_on_connected_range_keys",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_get_rightmost_containing_or_below": {
            "name": "test_get_rightmost_containing_or_below",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_get_leftmost_containing_or_above": {
            "name": "test_get_leftmost_containing_or_above",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeMap.test_pickling": {
            "name": "test_pickling",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_range_set.py": {
        "TestRangeSet.test_empty_enclosing": {
            "name": "test_empty_enclosing",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_empty_intersects": {
            "name": "test_empty_intersects",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_all_single_ranges_enclosing": {
            "name": "test_all_single_ranges_enclosing",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_all_pair_ranges_enclosing": {
            "name": "test_all_pair_ranges_enclosing",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_intersect_ranges": {
            "name": "test_intersect_ranges",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_merges_connected_with_overlap": {
            "name": "test_merges_connected_with_overlap",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_merges_connected_disjoint": {
            "name": "test_merges_connected_disjoint",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_ignores_smaller_sharing_no_bound": {
            "name": "test_ignores_smaller_sharing_no_bound",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_ignores_smaller_sharing_lower_bound": {
            "name": "test_ignores_smaller_sharing_lower_bound",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_ignores_smaller_sharing_upper_bound": {
            "name": "test_ignores_smaller_sharing_upper_bound",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_ignores_equal": {
            "name": "test_ignores_equal",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_extend_same_lower_bound": {
            "name": "test_extend_same_lower_bound",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_extend_same_upper_bound": {
            "name": "test_extend_same_upper_bound",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_extend_both_directions": {
            "name": "test_extend_both_directions",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_add_empty": {
            "name": "test_add_empty",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_fill_hole_exactly": {
            "name": "test_fill_hole_exactly",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_fill_hole_with_overlap": {
            "name": "test_fill_hole_with_overlap",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_add_many_pairs": {
            "name": "test_add_many_pairs",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_range_containing1": {
            "name": "test_range_containing1",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_add_all": {
            "name": "test_add_all",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_all_single_ranges_intersecting": {
            "name": "test_all_single_ranges_intersecting",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_all_two_ranges_intersecting": {
            "name": "test_all_two_ranges_intersecting",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_rightmost_containing_or_below": {
            "name": "test_rightmost_containing_or_below",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_leftmost_containing_or_above": {
            "name": "test_leftmost_containing_or_above",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_len": {
            "name": "test_len",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet._pair_test": {
            "name": "_pair_test",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "TestRangeSet._test_encloses": {
            "name": "_test_encloses",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "range_set": []
            }
        },
        "TestRangeSet._test_intersects": {
            "name": "_test_intersects",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "range_set": []
            }
        },
        "TestRangeSet._test_invariants": {
            "name": "_test_invariants",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "range_set": []
            }
        },
        "TestRangeSet.test_entry_above_below": {
            "name": "test_entry_above_below",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeSet.test_pickling": {
            "name": "test_pickling",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/test_span.py": {
        "TestSpan.test_index": {
            "name": "test_index",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpan.test_disjoint_index": {
            "name": "test_disjoint_index",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpan.test_intersection": {
            "name": "test_intersection",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/tests/__init__.py": {},
    "vistautils-master/tests/scripts/test_directory_to_key_value_store.py": {
        "test_directory_key_value_store": {
            "name": "test_directory_key_value_store",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [],
                "key_function": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "vistautils-master/tests/scripts/test_downsample_key_value_store.py": {
        "test_downsample_key_value_store": {
            "name": "test_downsample_key_value_store",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "vistautils-master/tests/scripts/test_split_key_value_store.py": {
        "test_split_key_value_store_explicit_split": {
            "name": "test_split_key_value_store_explicit_split",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_split_key_value_store_explicit_split_non_exhaustive_disallowed": {
            "name": "test_split_key_value_store_explicit_split_non_exhaustive_disallowed",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_split_key_value_store_explicit_split_non_exhaustive_allowed": {
            "name": "test_split_key_value_store_explicit_split_non_exhaustive_allowed",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_split_key_value_store_even_split_random_seed": {
            "name": "test_split_key_value_store_even_split_random_seed",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "vistautils-master/tests/scripts/__init__.py": {},
    "vistautils-master/vistautils/annotated_text_utils.py": {
        "to_start_tag": {
            "name": "to_start_tag",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "annotated_range": [
                    "str",
                    "dict[str, str]",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "to_end_tag": {
            "name": "to_end_tag",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "annotated_range": [
                    "str",
                    "int"
                ]
            }
        },
        "AnnotatedSpan.create_div_of_class": {
            "name": "create_div_of_class",
            "location": 44,
            "return": [
                "AnnotatedSpan"
            ],
            "arguments": {
                "span": [
                    "str",
                    "typing.Callable[..., T]",
                    "bool"
                ],
                "clazz": [
                    "str",
                    "typing.Callable[..., T]",
                    "bool"
                ]
            }
        },
        "AnnotatedSpan.create_span_of_class": {
            "name": "create_span_of_class",
            "location": 48,
            "return": [
                "AnnotatedSpan"
            ],
            "arguments": {
                "span": [
                    "str",
                    "typing.Callable[..., T]",
                    "bool"
                ],
                "clazz": [
                    "str",
                    "typing.Callable[..., T]",
                    "bool"
                ]
            }
        },
        "HTMLStyleAnnotationFormatter.annotated_text": {
            "name": "annotated_text",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "annotations": [
                    "str"
                ]
            }
        },
        "HTMLStyleAnnotationFormatter._clip_to_offsets_and_shift": {
            "name": "_clip_to_offsets_and_shift",
            "location": 121,
            "return": [
                "list[]"
            ],
            "arguments": {
                "unclipped_annotations": [
                    "str"
                ],
                "text_offsets": [
                    "str"
                ]
            }
        },
        "HTMLStyleAnnotationFormatter._tag_sequence": {
            "name": "_tag_sequence",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "annotations": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "HTMLStyleAnnotationFormatter._tag_sequence.start_tag_key": {
            "name": "start_tag_key",
            "location": 168,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "annotation": []
            }
        },
        "HTMLStyleAnnotationFormatter._tag_sequence.end_tag_key": {
            "name": "end_tag_key",
            "location": 173,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "annotation": []
            }
        }
    },
    "vistautils-master/vistautils/attrutils.py": {
        "attrib_instance_of": {
            "name": "attrib_instance_of",
            "location": 19,
            "return": [],
            "arguments": {
                "type_": [
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "attrib_opt_instance_of": {
            "name": "attrib_opt_instance_of",
            "location": 33,
            "return": [],
            "arguments": {
                "type_": [
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "str",
                    "list[]"
                ]
            }
        },
        "attrib_factory": {
            "name": "attrib_factory",
            "location": 47,
            "return": [],
            "arguments": {
                "factory": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]",
                    "tuple[]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "attrib_immutable": {
            "name": "attrib_immutable",
            "location": 57,
            "return": [],
            "arguments": {
                "type_": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "attrib_private_immutable_builder": {
            "name": "attrib_private_immutable_builder",
            "location": 72,
            "return": [],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "attrib_opt_immutable": {
            "name": "attrib_opt_immutable",
            "location": 94,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "opt_instance_of": {
            "name": "opt_instance_of",
            "location": 119,
            "return": [],
            "arguments": {
                "type_": [
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "_check_immutable_collection": {
            "name": "_check_immutable_collection",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "list[tuple[str]]",
                    "BaseException",
                    "typing.Type"
                ]
            }
        },
        "_empty_immutable_if_none": {
            "name": "_empty_immutable_if_none",
            "location": 131,
            "return": [],
            "arguments": {
                "val": [
                    "str",
                    "typing.Type",
                    "typing.Callable[bool, None]",
                    "None"
                ],
                "type_": []
            }
        },
        "non_empty": {
            "name": "non_empty",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "_self": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "_attr": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "val": []
            }
        }
    },
    "vistautils-master/vistautils/checkpoints.py": {
        "Checkpoints.set": {
            "name": "set",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Checkpoints.reset_all": {
            "name": "reset_all",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkpoints.from_directory": {
            "name": "from_directory",
            "location": 29,
            "return": [
                "_CheckPointDirectory"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_CheckPointDirectory.set": {
            "name": "set",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "_CheckPointDirectory.__contains__": {
            "name": "__contains__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[typing.TextIO]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_CheckPointDirectory.reset_all": {
            "name": "reset_all",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/vistautils/class_utils.py": {
        "fully_qualified_name": {
            "name": "fully_qualified_name",
            "location": 6,
            "return": [],
            "arguments": {
                "class_or_module": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "fully_qualified_name_of_type": {
            "name": "fully_qualified_name_of_type",
            "location": 31,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "typing.Type"
                ]
            }
        }
    },
    "vistautils-master/vistautils/collection_utils.py": {
        "get_only": {
            "name": "get_only",
            "location": 8,
            "return": [],
            "arguments": {
                "seq": []
            }
        }
    },
    "vistautils-master/vistautils/io_utils.py": {
        "is_empty_directory": {
            "name": "is_empty_directory",
            "location": 35,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "file_lines_to_set": {
            "name": "file_lines_to_set",
            "location": 645,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "write_doc_id_to_file_map": {
            "name": "write_doc_id_to_file_map",
            "location": 658,
            "return": [],
            "arguments": {
                "doc_id_to_file_map": [],
                "sink": []
            }
        },
        "read_doc_id_to_file_map": {
            "name": "read_doc_id_to_file_map",
            "location": 671,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "CharSource.open": {
            "name": "open",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSource.read_all": {
            "name": "read_all",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSource.readlines": {
            "name": "readlines",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSource.is_empty": {
            "name": "is_empty",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSource.from_nowhere": {
            "name": "from_nowhere",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "CharSource.from_string": {
            "name": "from_string",
            "location": 99,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "CharSource.from_byte_source": {
            "name": "from_byte_source",
            "location": 106,
            "return": [],
            "arguments": {
                "wrapped_source": []
            }
        },
        "CharSource.from_file": {
            "name": "from_file",
            "location": 117,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "CharSource.from_gzipped_file": {
            "name": "from_gzipped_file",
            "location": 126,
            "return": [],
            "arguments": {
                "p": [],
                "encoding": []
            }
        },
        "CharSource.from_file_in_tgz": {
            "name": "from_file_in_tgz",
            "location": 137,
            "return": [],
            "arguments": {
                "tgz_path": [],
                "path_within_tgz": [],
                "encoding": []
            }
        },
        "CharSource.from_file_in_zip": {
            "name": "from_file_in_zip",
            "location": 149,
            "return": [],
            "arguments": {
                "zip_file": [],
                "path_within_zip": []
            }
        },
        "_StringCharSource.open": {
            "name": "open",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_StringCharSource.is_empty": {
            "name": "is_empty",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_StringCharSource.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileCharSource.open": {
            "name": "open",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileCharSource.is_empty": {
            "name": "is_empty",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CharSourceWrappingByteSource.open": {
            "name": "open",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GZipFileSource.open": {
            "name": "open",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GZipFileSource.is_empty": {
            "name": "is_empty",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileWithinTgzCharSource.open": {
            "name": "open",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileWithinTgzCharSource.is_empty": {
            "name": "is_empty",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSink.open": {
            "name": "open",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharSink.to_nowhere": {
            "name": "to_nowhere",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "CharSink.to_file": {
            "name": "to_file",
            "location": 281,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "CharSink.to_string": {
            "name": "to_string",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "CharSink.write": {
            "name": "write",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ByteSource.open": {
            "name": "open",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteSource.read": {
            "name": "read",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ByteSource.from_file": {
            "name": "from_file",
            "location": 339,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "ByteSource.from_file_in_zip": {
            "name": "from_file_in_zip",
            "location": 346,
            "return": [],
            "arguments": {
                "zip_file": [],
                "path_within_zip": []
            }
        },
        "_FileByteSource.open": {
            "name": "open",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileByteSource.is_empty": {
            "name": "is_empty",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ByteSourceFromPathInZipFile.open": {
            "name": "open",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ByteSourceFromPathInOpenZipFile.open": {
            "name": "open",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteSink.open": {
            "name": "open",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteSink.file_in_zip": {
            "name": "file_in_zip",
            "location": 423,
            "return": [],
            "arguments": {
                "zip_file": [],
                "filename_in_zip": []
            }
        },
        "ByteSink.to_buffer": {
            "name": "to_buffer",
            "location": 430,
            "return": [],
            "arguments": {}
        },
        "ByteSink.to_file": {
            "name": "to_file",
            "location": 439,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "ByteSink.write": {
            "name": "write",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_NullCharSink.open": {
            "name": "open",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringCharSink.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringCharSink.open": {
            "name": "open",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileCharSink.open": {
            "name": "open",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileByteSink.open": {
            "name": "open",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileInZipByteSink.open": {
            "name": "open",
            "location": 607,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferByteSink.__init__": {
            "name": "__init__",
            "location": 631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferByteSink.open": {
            "name": "open",
            "location": 634,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FileWithinTgzCharSource.open.new_close": {
            "name": "new_close",
            "location": 239,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "_ByteSourceFromPathInZipFile.open.new_close": {
            "name": "new_close",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.__enter__": {
            "name": "__enter__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.name": {
            "name": "name",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.mode": {
            "name": "mode",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.closed": {
            "name": "closed",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.buffer": {
            "name": "buffer",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.encoding": {
            "name": "encoding",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.errors": {
            "name": "errors",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.line_buffering": {
            "name": "line_buffering",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.newlines": {
            "name": "newlines",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.close": {
            "name": "close",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.fileno": {
            "name": "fileno",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.flush": {
            "name": "flush",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.isatty": {
            "name": "isatty",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.read": {
            "name": "read",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_NullCharSink.NullFileLike.readable": {
            "name": "readable",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.readline": {
            "name": "readline",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "_NullCharSink.NullFileLike.readlines": {
            "name": "readlines",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "hint": []
            }
        },
        "_NullCharSink.NullFileLike.seek": {
            "name": "seek",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "whence": []
            }
        },
        "_NullCharSink.NullFileLike.seekable": {
            "name": "seekable",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.tell": {
            "name": "tell",
            "location": 535,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.truncate": {
            "name": "truncate",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "_NullCharSink.NullFileLike.writable": {
            "name": "writable",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.write": {
            "name": "write",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "_NullCharSink.NullFileLike.writelines": {
            "name": "writelines",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "_NullCharSink.NullFileLike.__next__": {
            "name": "__next__",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.__iter__": {
            "name": "__iter__",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NullCharSink.NullFileLike.__exit__": {
            "name": "__exit__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "value": [],
                "traceback": []
            }
        },
        "_FileInZipByteSink.open.new_close": {
            "name": "new_close",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringCharSink.open.StringFileLike.__exit__": {
            "name": "__exit__",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BufferByteSink.open.BytesFileLike.__exit__": {
            "name": "__exit__",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "vistautils-master/vistautils/iterutils.py": {
        "tile_with_pairs": {
            "name": "tile_with_pairs",
            "location": 10,
            "return": [],
            "arguments": {
                "iterable": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "vistautils-master/vistautils/iter_utils.py": {
        "drop": {
            "name": "drop",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "it": [
                    "int"
                ],
                "num_to_skip": [
                    "int",
                    "None"
                ]
            }
        },
        "only": {
            "name": "only",
            "location": 61,
            "return": [
                "int",
                "str",
                "typing.Type",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[]"
            ],
            "arguments": {
                "it": [
                    "typing.Iterator"
                ]
            }
        },
        "windowed": {
            "name": "windowed",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "it": [
                    "int",
                    "bytes",
                    "tuple[int]",
                    "dict[, ]"
                ],
                "window_size": [
                    "int",
                    "None"
                ]
            }
        },
        "_complete_windows": {
            "name": "_complete_windows",
            "location": 149,
            "return": [
                "None",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "it": [
                    "str",
                    "tuple[int]"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "_possibly_incomplete_windows": {
            "name": "_possibly_incomplete_windows",
            "location": 172,
            "return": [
                "None",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "it": [
                    "str",
                    "tuple[int]"
                ],
                "window_size": [
                    "int",
                    "float"
                ]
            }
        },
        "non_none": {
            "name": "non_none",
            "location": 208,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "iterable": [
                    "str"
                ]
            }
        },
        "_DropIterable.__iter__": {
            "name": "__iter__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_WindowedIterable.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/vistautils/key_value.py": {
        "_identity": {
            "name": "_identity",
            "location": 42,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "_read_keys_from_keys_file": {
            "name": "_read_keys_from_keys_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": []
            }
        },
        "_write_keys_to_keys_file": {
            "name": "_write_keys_to_keys_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": [
                    "typing.AbstractSet",
                    "str",
                    "None",
                    "bytes"
                ],
                "keys": [
                    "typing.AbstractSet",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "_doc_id_source_from_params": {
            "name": "_doc_id_source_from_params",
            "location": 847,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_doc_id_binary_source_from_params": {
            "name": "_doc_id_binary_source_from_params",
            "location": 851,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "char_key_value_linear_source_from_params": {
            "name": "char_key_value_linear_source_from_params",
            "location": 855,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "bytes"
                ]
            }
        },
        "byte_key_value_linear_source_from_params": {
            "name": "byte_key_value_linear_source_from_params",
            "location": 898,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "bytes"
                ]
            }
        },
        "char_key_value_source_from_params": {
            "name": "char_key_value_source_from_params",
            "location": 941,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, int]",
                    "dict[str, dict[typing.Any, int]]"
                ]
            }
        },
        "byte_key_value_source_from_params": {
            "name": "byte_key_value_source_from_params",
            "location": 980,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "None"
                ]
            }
        },
        "char_key_value_sink_from_params": {
            "name": "char_key_value_sink_from_params",
            "location": 1030,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "byte_key_value_sink_from_params": {
            "name": "byte_key_value_sink_from_params",
            "location": 1067,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "KeyValueSink.put": {
            "name": "put",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "KeyValueSink.__setitem__": {
            "name": "__setitem__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "KeyValueSink.__enter__": {
            "name": "__enter__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueSink.__exit__": {
            "name": "__exit__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "KeyValueSink.zip_character_sink": {
            "name": "zip_character_sink",
            "location": 99,
            "return": [
                "_ZipCharFileKeyValueSink"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "typing.Callable[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "KeyValueSink.zip_bytes_sink": {
            "name": "zip_bytes_sink",
            "location": 136,
            "return": [
                "_ZipBytesFileKeyValueSink"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "typing.Callable[str, str]",
                    "str"
                ]
            }
        },
        "KeyValueLinearSource.items": {
            "name": "items",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyValueLinearSource.byte_linear_source_from_tar_gz": {
            "name": "byte_linear_source_from_tar_gz",
            "location": 187,
            "return": [
                "TarGzipBytesLinearKeyValueSource"
            ],
            "arguments": {
                "tgz_file": [
                    "str",
                    "bool"
                ],
                "key_function": [
                    "typing.Callable[, ]"
                ],
                "name_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyValueLinearSource.str_linear_source_from_tar_gz": {
            "name": "str_linear_source_from_tar_gz",
            "location": 213,
            "return": [],
            "arguments": {
                "tgz_file": [
                    "str",
                    "None",
                    "bool",
                    "typing.Any"
                ],
                "key_function": [
                    "typing.Callable[, ]"
                ],
                "name_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyValueLinearSource.interpret_values": {
            "name": "interpret_values",
            "location": 232,
            "return": [
                "InterpretedLinearKeyValueSource"
            ],
            "arguments": {
                "wrapped": [
                    "bool",
                    "typing.DefaultDict",
                    "None"
                ],
                "interpretation_function": [
                    "bool",
                    "typing.DefaultDict",
                    "None"
                ]
            }
        },
        "KeyValueSource.__getitem__": {
            "name": "__getitem__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "KeyValueSource.get": {
            "name": "get",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "_default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "KeyValueSource.keys": {
            "name": "keys",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValueSource.items": {
            "name": "items",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "key_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyValueSource.from_path_mapping": {
            "name": "from_path_mapping",
            "location": 310,
            "return": [
                "_PathMappingCharKeyValueSource"
            ],
            "arguments": {
                "id_to_path": [
                    "str",
                    "None"
                ]
            }
        },
        "KeyValueSource.from_doc_id_to_file_map": {
            "name": "from_doc_id_to_file_map",
            "location": 319,
            "return": [
                "_PathMappingCharKeyValueSource"
            ],
            "arguments": {
                "map_file": [
                    "str"
                ]
            }
        },
        "KeyValueSource.binary_from_doc_id_to_file_map": {
            "name": "binary_from_doc_id_to_file_map",
            "location": 329,
            "return": [
                "_PathMappingBytesKeyValueSource"
            ],
            "arguments": {
                "map_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "KeyValueSource.zip_character_source": {
            "name": "zip_character_source",
            "location": 339,
            "return": [
                "_ZipCharFileKeyValuesSource"
            ],
            "arguments": {
                "path": [
                    "typing.Callable[str, str]",
                    "dict[, ]",
                    "int"
                ],
                "filename_function": [],
                "keys_function": []
            }
        },
        "KeyValueSource.zip_bytes_source": {
            "name": "zip_bytes_source",
            "location": 362,
            "return": [
                "_ZipBytesFileKeyValuesSource"
            ],
            "arguments": {
                "path": [
                    "typing.Callable[str, str]",
                    "str"
                ],
                "filename_function": [],
                "keys_function": []
            }
        },
        "KeyValueSource.interpret_values": {
            "name": "interpret_values",
            "location": 387,
            "return": [
                "_InterpretedKeyValueSource"
            ],
            "arguments": {
                "wrapped": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, bool]",
                    "None"
                ],
                "interpretation_function": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, bool]",
                    "None"
                ]
            }
        },
        "_DirectoryCharKeyValueSink.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "_DirectoryCharKeyValueSink.put": {
            "name": "put",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_DirectoryCharKeyValueSink.__enter__": {
            "name": "__enter__",
            "location": 410,
            "return": [
                "_DirectoryCharKeyValueSink"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DirectoryCharKeyValueSink.__exit__": {
            "name": "__exit__",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "_DirectoryCharKeyValueSink.from_parameters": {
            "name": "from_parameters",
            "location": 420,
            "return": [
                "_DirectoryCharKeyValueSink"
            ],
            "arguments": {
                "params": []
            }
        },
        "_DirectoryBytesKeyValueSink.__init__": {
            "name": "__init__",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "_DirectoryBytesKeyValueSink.put": {
            "name": "put",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_DirectoryBytesKeyValueSink.__enter__": {
            "name": "__enter__",
            "location": 437,
            "return": [
                "_DirectoryBytesKeyValueSink"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DirectoryBytesKeyValueSink.__exit__": {
            "name": "__exit__",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "_DirectoryBytesKeyValueSink.from_parameters": {
            "name": "from_parameters",
            "location": 447,
            "return": [
                "_DirectoryBytesKeyValueSink"
            ],
            "arguments": {
                "params": []
            }
        },
        "_ZipKeyValueSink.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "bool",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "_ZipKeyValueSink.put": {
            "name": "put",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_ZipKeyValueSink._to_bytes": {
            "name": "_to_bytes",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "typing.IO",
                    "typing.Iterator"
                ]
            }
        },
        "_ZipKeyValueSink.__enter__": {
            "name": "__enter__",
            "location": 495,
            "return": [
                "_ZipKeyValueSink"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ZipKeyValueSink.__exit__": {
            "name": "__exit__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "_ZipCharFileKeyValueSink._to_bytes": {
            "name": "_to_bytes",
            "location": 512,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "_ZipCharFileKeyValueSink.from_parameters": {
            "name": "from_parameters",
            "location": 516,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_ZipBytesFileKeyValueSink._to_bytes": {
            "name": "_to_bytes",
            "location": 527,
            "return": [
                "bytes",
                "dict[, ]",
                "bool",
                "list[str]",
                "typing.IO",
                "typing.Iterator"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "typing.IO",
                    "typing.Iterator"
                ]
            }
        },
        "_ZipBytesFileKeyValueSink.from_parameters": {
            "name": "from_parameters",
            "location": 531,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_AbstractPathMappingKeyValueSource.keys": {
            "name": "keys",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PathMappingCharKeyValueSource.__getitem__": {
            "name": "__getitem__",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "_PathMappingCharKeyValueSource.get": {
            "name": "get",
            "location": 556,
            "return": [
                "None",
                "str",
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "_default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "_PathMappingCharKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 562,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "_PathMappingBytesKeyValueSource.__getitem__": {
            "name": "__getitem__",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "_PathMappingBytesKeyValueSource.get": {
            "name": "get",
            "location": 571,
            "return": [
                "None",
                "str",
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "_default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "_PathMappingBytesKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 577,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "_ZipFileKeyValueSource.__init__": {
            "name": "__init__",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "list[str]",
                    "set[str]"
                ],
                "filename_function": [],
                "keys_function": [
                    "None",
                    "list[str]",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "list[]"
                ]
            }
        },
        "_ZipFileKeyValueSource.keys": {
            "name": "keys",
            "location": 594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ZipFileKeyValueSource.__getitem__": {
            "name": "__getitem__",
            "location": 598,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "dict[str, str]",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "_ZipFileKeyValueSource.get": {
            "name": "get",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "_default": [
                    "None",
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "_ZipFileKeyValueSource._internal_get": {
            "name": "_internal_get",
            "location": 607,
            "return": [
                "bool",
                "str",
                "typing.Mapping",
                "None",
                "list[str]",
                "typing.Callable[_, float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_ZipFileKeyValueSource._process_bytes": {
            "name": "_process_bytes",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_bytes": [
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "_ZipFileKeyValueSource.__enter__": {
            "name": "__enter__",
            "location": 628,
            "return": [
                "_ZipFileKeyValueSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ZipFileKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "_ZipBytesFileKeyValuesSource.__init__": {
            "name": "__init__",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "typing.Callable[str, str]",
                    "str"
                ]
            }
        },
        "_ZipBytesFileKeyValuesSource._process_bytes": {
            "name": "_process_bytes",
            "location": 650,
            "return": [
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "_bytes": [
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "_ZipBytesFileKeyValuesSource.from_parameters": {
            "name": "from_parameters",
            "location": 654,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_ZipBytesFileKeyValuesSource.__repr__": {
            "name": "__repr__",
            "location": 666,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ZipCharFileKeyValuesSource.__init__": {
            "name": "__init__",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "typing.Callable[str, str]",
                    "str"
                ]
            }
        },
        "_ZipCharFileKeyValuesSource._process_bytes": {
            "name": "_process_bytes",
            "location": 680,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_bytes": [
                    "bytes"
                ]
            }
        },
        "_ZipCharFileKeyValuesSource.from_parameters": {
            "name": "from_parameters",
            "location": 684,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "TarGzipBytesLinearKeyValueSource.__init__": {
            "name": "__init__",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tgz_path": [
                    "str",
                    "None"
                ],
                "key_function": [
                    "typing.Callable[, ]"
                ],
                "name_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TarGzipBytesLinearKeyValueSource.items": {
            "name": "items",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "key_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TarGzipBytesLinearKeyValueSource.__enter__": {
            "name": "__enter__",
            "location": 753,
            "return": [
                "TarGzipBytesLinearKeyValueSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "TarGzipBytesLinearKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 757,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "InterpretedLinearKeyValueSource.__init__": {
            "name": "__init__",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped_source": [
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "interpretation_function": [
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "InterpretedLinearKeyValueSource.items": {
            "name": "items",
            "location": 777,
            "return": [],
            "arguments": {
                "self": [],
                "key_filter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "InterpretedLinearKeyValueSource.__enter__": {
            "name": "__enter__",
            "location": 788,
            "return": [
                "InterpretedLinearKeyValueSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpretedLinearKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "BaseException",
                    "Exception",
                    "typing.Type"
                ],
                "exc_val": [
                    "BaseException",
                    "Exception",
                    "typing.Type"
                ],
                "exc_tb": [
                    "BaseException",
                    "Exception",
                    "typing.Type"
                ]
            }
        },
        "_InterpretedKeyValueSource.__init__": {
            "name": "__init__",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped_source": [
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "interpretation_function": [
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "_InterpretedKeyValueSource.keys": {
            "name": "keys",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_InterpretedKeyValueSource.get": {
            "name": "get",
            "location": 812,
            "return": [
                "None",
                "str",
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Any",
                    "int"
                ],
                "_default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "_InterpretedKeyValueSource.__getitem__": {
            "name": "__getitem__",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "int",
                    "typing.Type",
                    "typing.Mapping"
                ]
            }
        },
        "_InterpretedKeyValueSource.__enter__": {
            "name": "__enter__",
            "location": 828,
            "return": [
                "_InterpretedKeyValueSource"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InterpretedKeyValueSource.__exit__": {
            "name": "__exit__",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ],
                "exc_value": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ],
                "traceback": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "TarGzipBytesLinearKeyValueSource.items.generator_function": {
            "name": "generator_function",
            "location": 738,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        },
        "InterpretedLinearKeyValueSource.items.generator_function": {
            "name": "generator_function",
            "location": 780,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        },
        "KeyValueSource.items.generator_func": {
            "name": "generator_func",
            "location": 296,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        }
    },
    "vistautils-master/vistautils/logging_utils.py": {
        "configure_logging_from": {
            "name": "configure_logging_from",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "_config_logging_from_params": {
            "name": "_config_logging_from_params",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "vistautils-master/vistautils/memory_amount.py": {
        "MemoryUnit.parse": {
            "name": "parse",
            "location": 25,
            "return": [],
            "arguments": {
                "memory_unit_string": [
                    "str"
                ]
            }
        },
        "MemoryAmount.parse": {
            "name": "parse",
            "location": 66,
            "return": [
                "MemoryAmount"
            ],
            "arguments": {
                "memory_string": [
                    "str"
                ]
            }
        }
    },
    "vistautils-master/vistautils/misc_utils.py": {
        "str_list_limited": {
            "name": "str_list_limited",
            "location": 11,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "_list": [],
                "limit": [
                    "bool"
                ]
            }
        },
        "eval_in_context_of_modules": {
            "name": "eval_in_context_of_modules",
            "location": 43,
            "return": [
                "expected_type"
            ],
            "arguments": {
                "to_eval": [
                    "int",
                    "float",
                    "str"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "pathify": {
            "name": "pathify",
            "location": 84,
            "return": [
                "Path"
            ],
            "arguments": {
                "p": [
                    "str",
                    "bytes"
                ]
            }
        },
        "strip_extension": {
            "name": "strip_extension",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "flatten_once_to_list": {
            "name": "flatten_once_to_list",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iterable_of_iterables": [
                    "str",
                    "list[float]",
                    "bool"
                ]
            }
        },
        "WithId.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scored.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/vistautils/parameters.py": {
        "_extend_prefix": {
            "name": "_extend_prefix",
            "location": 1366,
            "return": [],
            "arguments": {
                "namespace_prefix": [],
                "new_element": []
            }
        },
        "Parameters.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters.empty": {
            "name": "empty",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "Parameters.from_mapping": {
            "name": "from_mapping",
            "location": 99,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "Parameters.from_key_value_pairs": {
            "name": "from_key_value_pairs",
            "location": 128,
            "return": [],
            "arguments": {
                "kv_pairs": [],
                "namespace_separator": []
            }
        },
        "Parameters.as_nested_dicts": {
            "name": "as_nested_dicts",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters.namespaced_items": {
            "name": "namespaced_items",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters.unify": {
            "name": "unify",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "new_params": []
            }
        },
        "Parameters.creatable_directory": {
            "name": "creatable_directory",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.optional_creatable_directory": {
            "name": "optional_creatable_directory",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.creatable_empty_directory": {
            "name": "creatable_empty_directory",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.optional_creatable_empty_directory": {
            "name": "optional_creatable_empty_directory",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.creatable_file": {
            "name": "creatable_file",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.optional_creatable_file": {
            "name": "optional_creatable_file",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.existing_file": {
            "name": "existing_file",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.optional_existing_file": {
            "name": "optional_existing_file",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.existing_directory": {
            "name": "existing_directory",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.optional_existing_directory": {
            "name": "optional_existing_directory",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.enum": {
            "name": "enum",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [],
                "enum_class": []
            }
        },
        "Parameters.string": {
            "name": "string",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [],
                "valid_options": [],
                "default": []
            }
        },
        "Parameters.optional_string": {
            "name": "optional_string",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [],
                "valid_options": []
            }
        },
        "Parameters.__contains__": {
            "name": "__contains__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": []
            }
        },
        "Parameters.namespace": {
            "name": "namespace",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.has_namespace": {
            "name": "has_namespace",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.integer": {
            "name": "integer",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_integer": {
            "name": "optional_integer",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.positive_integer": {
            "name": "positive_integer",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_positive_integer": {
            "name": "optional_positive_integer",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.floating_point": {
            "name": "floating_point",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "valid_range": []
            }
        },
        "Parameters.optional_floating_point": {
            "name": "optional_floating_point",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "valid_range": []
            }
        },
        "Parameters.optional_float": {
            "name": "optional_float",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "valid_range": []
            }
        },
        "Parameters.boolean": {
            "name": "boolean",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_boolean": {
            "name": "optional_boolean",
            "location": 710,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_boolean_with_default": {
            "name": "optional_boolean_with_default",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default_value": []
            }
        },
        "Parameters.optional_namespace": {
            "name": "optional_namespace",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.namespace_or_empty": {
            "name": "namespace_or_empty",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.arbitrary_list": {
            "name": "arbitrary_list",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_arbitrary_list": {
            "name": "optional_arbitrary_list",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Parameters.optional_evaluate": {
            "name": "optional_evaluate",
            "location": 803,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expected_type": []
            }
        },
        "Parameters._context_modules_from_prefix": {
            "name": "_context_modules_from_prefix",
            "location": 827,
            "return": [],
            "arguments": {
                "maybe_fully_qualified_name": []
            }
        },
        "Parameters.evaluate": {
            "name": "evaluate",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expected_type": []
            }
        },
        "Parameters.object_from_parameters": {
            "name": "object_from_parameters",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expected_type": []
            }
        },
        "Parameters.get": {
            "name": "get",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [],
                "param_type": [],
                "default": []
            }
        },
        "Parameters.get_optional": {
            "name": "get_optional",
            "location": 1123,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [],
                "param_type": []
            }
        },
        "Parameters.assert_exactly_one_present": {
            "name": "assert_exactly_one_present",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": [],
                "param_names": []
            }
        },
        "Parameters.sub_namespaces": {
            "name": "sub_namespaces",
            "location": 1164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters.path_list_from_file": {
            "name": "path_list_from_file",
            "location": 1174,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.path_map_from_file": {
            "name": "path_map_from_file",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "Parameters.pickled_object_from_file": {
            "name": "pickled_object_from_file",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": []
            }
        },
        "Parameters._private_get": {
            "name": "_private_get",
            "location": 1272,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": []
            }
        },
        "Parameters.__str__": {
            "name": "__str__",
            "location": 1339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters._namespace_message": {
            "name": "_namespace_message",
            "location": 1344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters.as_mapping": {
            "name": "as_mapping",
            "location": 1356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameters._warn_about_default": {
            "name": "_warn_about_default",
            "location": 1359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YAMLParametersLoader.load": {
            "name": "load",
            "location": 1404,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "context": []
            }
        },
        "YAMLParametersLoader.load_string": {
            "name": "load_string",
            "location": 1446,
            "return": [],
            "arguments": {
                "self": [],
                "param_file_content": []
            }
        },
        "YAMLParametersLoader._inner_load_from_string": {
            "name": "_inner_load_from_string",
            "location": 1466,
            "return": [],
            "arguments": {
                "self": [],
                "param_file_content": [],
                "error_string": []
            }
        },
        "YAMLParametersLoader._validate": {
            "name": "_validate",
            "location": 1530,
            "return": [],
            "arguments": {
                "raw_yaml": []
            }
        },
        "YAMLParametersLoader._check_all_keys_strings": {
            "name": "_check_all_keys_strings",
            "location": 1539,
            "return": [],
            "arguments": {
                "mapping": [],
                "path": []
            }
        },
        "YAMLParametersLoader._interpolate": {
            "name": "_interpolate",
            "location": 1558,
            "return": [],
            "arguments": {
                "to_interpolate": [],
                "context": []
            }
        },
        "YAMLParametersWriter.write": {
            "name": "write",
            "location": 1736,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "sink": []
            }
        },
        "YAMLParametersWriter._preprocess_dicts": {
            "name": "_preprocess_dicts",
            "location": 1753,
            "return": [],
            "arguments": {
                "self": [],
                "param_node": []
            }
        },
        "Parameters.as_nested_dicts.dictify": {
            "name": "dictify",
            "location": 158,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "Parameters.evaluate.handle_special_values": {
            "name": "handle_special_values",
            "location": 878,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "Parameters.object_from_parameters.validate": {
            "name": "validate",
            "location": 975,
            "return": [],
            "arguments": {
                "candidate_ret": []
            }
        },
        "Parameters.object_from_parameters.apply_factory": {
            "name": "apply_factory",
            "location": 984,
            "return": [],
            "arguments": {
                "factory": [],
                "params_to_pass": []
            }
        },
        "YAMLParametersLoader._interpolate.get_from_nested_dict": {
            "name": "get_from_nested_dict",
            "location": 1593,
            "return": [],
            "arguments": {
                "nested_dict": [],
                "param_name": []
            }
        },
        "YAMLParametersLoader._interpolate.set_in_nested_dict": {
            "name": "set_in_nested_dict",
            "location": 1606,
            "return": [],
            "arguments": {
                "nested_dict": [],
                "fully_qualified_param_name": [],
                "value": []
            }
        },
        "YAMLParametersLoader._interpolate.gather_interpolation_edges": {
            "name": "gather_interpolation_edges",
            "location": 1634,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "YAMLParametersLoader._interpolate.get_backing_off_to_context": {
            "name": "get_backing_off_to_context",
            "location": 1658,
            "return": [],
            "arguments": {
                "param_name": []
            }
        },
        "YAMLParametersLoader._interpolate.replace_param": {
            "name": "replace_param",
            "location": 1699,
            "return": [],
            "arguments": {
                "param_match": []
            }
        }
    },
    "vistautils-master/vistautils/parameters_only_entrypoint.py": {
        "parameters_only_entry_point": {
            "name": "parameters_only_entry_point",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "main_method": [
                    "int"
                ],
                "usage_message": [
                    "None",
                    "int"
                ]
            }
        },
        "_real_parameters_only_entry_point": {
            "name": "_real_parameters_only_entry_point",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "main_method": [
                    "bool",
                    "typing.Sequence[]",
                    "list[str]",
                    "str",
                    "None",
                    "typing.Mapping",
                    "typing.Type"
                ],
                "usage_message": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "vistautils-master/vistautils/preconditions.py": {
        "check_not_none": {
            "name": "check_not_none",
            "location": 14,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ],
                "msg": [
                    "None",
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "check_arg": {
            "name": "check_arg",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "msg": [],
                "msg_args": [
                    "None",
                    "str",
                    "tuple[]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "check_state": {
            "name": "check_state",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "int",
                    "list[typing.Optional['Cell']]",
                    "list[str]"
                ],
                "msg": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "check_args_are_none": {
            "name": "check_args_are_none",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_args_not_none": {
            "name": "check_args_not_none",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_isinstance": {
            "name": "check_isinstance",
            "location": 58,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "item": [
                    "list[dict[, ]]"
                ],
                "classinfo": [
                    "list[dict[, ]]"
                ]
            }
        },
        "check_opt_isinstance": {
            "name": "check_opt_isinstance",
            "location": 68,
            "return": [],
            "arguments": {
                "item": [],
                "classinfo": []
            }
        },
        "check_all_isinstance": {
            "name": "check_all_isinstance",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "str"
                ],
                "classinfo": [
                    "int",
                    "str"
                ]
            }
        },
        "check_issubclass": {
            "name": "check_issubclass",
            "location": 88,
            "return": [
                "typing.Type",
                "int",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "item": [
                    "typing.Type",
                    "int",
                    "typing.Callable[, ]"
                ],
                "classinfo": [
                    "typing.Type",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "check_in": {
            "name": "check_in",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "int",
                    "None"
                ],
                "legal_values": [
                    "str"
                ],
                "item_name": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "vistautils-master/vistautils/range.py": {
        "immutablerangemap": {
            "name": "immutablerangemap",
            "location": 1398,
            "return": [
                "ImmutableRangeMap"
            ],
            "arguments": {
                "mappings": [
                    "None"
                ]
            }
        },
        "_value_below": {
            "name": "_value_below",
            "location": 1405,
            "return": [
                "None"
            ],
            "arguments": {
                "sorted_dict": [],
                "key": []
            }
        },
        "_value_at_or_below": {
            "name": "_value_at_or_below",
            "location": 1421,
            "return": [
                "None"
            ],
            "arguments": {
                "sorted_dict": [],
                "key": []
            }
        },
        "_value_at_or_above": {
            "name": "_value_at_or_above",
            "location": 1440,
            "return": [
                "None"
            ],
            "arguments": {
                "sorted_dict": [],
                "key": []
            }
        },
        "_clear": {
            "name": "_clear",
            "location": 1450,
            "return": [
                "None"
            ],
            "arguments": {
                "sorted_dict": [],
                "start_key_inclusive": [],
                "stop_key_exclusive": []
            }
        },
        "BoundType.open": {
            "name": "open",
            "location": 46,
            "return": [
                "None",
                "_Open"
            ],
            "arguments": {}
        },
        "BoundType.closed": {
            "name": "closed",
            "location": 50,
            "return": [
                "None",
                "_Closed"
            ],
            "arguments": {}
        },
        "BoundType.flip": {
            "name": "flip",
            "location": 53,
            "return": [
                "None",
                "_Closed",
                "_Open"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.endpoint": {
            "name": "endpoint",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.is_less_than": {
            "name": "is_less_than",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.as_upper_bound": {
            "name": "as_upper_bound",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.as_lower_bound": {
            "name": "as_lower_bound",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.describe_as_lower_bound": {
            "name": "describe_as_lower_bound",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.describe_as_upper_bound": {
            "name": "describe_as_upper_bound",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Cut.compare_to": {
            "name": "compare_to",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.__lt__": {
            "name": "__lt__",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.__le__": {
            "name": "__le__",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.__gt__": {
            "name": "__gt__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.__ge__": {
            "name": "__ge__",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Cut.__eq__": {
            "name": "__eq__",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BelowAll.endpoint": {
            "name": "endpoint",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowAll.is_less_than": {
            "name": "is_less_than",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BelowAll.as_upper_bound": {
            "name": "as_upper_bound",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowAll.as_lower_bound": {
            "name": "as_lower_bound",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowAll.describe_as_lower_bound": {
            "name": "describe_as_lower_bound",
            "location": 178,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowAll.describe_as_upper_bound": {
            "name": "describe_as_upper_bound",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowAll.compare_to": {
            "name": "compare_to",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BelowAll.__hash__": {
            "name": "__hash__",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.endpoint": {
            "name": "endpoint",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.is_less_than": {
            "name": "is_less_than",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AboveAll.as_upper_bound": {
            "name": "as_upper_bound",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.as_lower_bound": {
            "name": "as_lower_bound",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.describe_as_lower_bound": {
            "name": "describe_as_lower_bound",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.describe_as_upper_bound": {
            "name": "describe_as_upper_bound",
            "location": 214,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveAll.compare_to": {
            "name": "compare_to",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AboveAll.__hash__": {
            "name": "__hash__",
            "location": 223,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.endpoint": {
            "name": "endpoint",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.is_less_than": {
            "name": "is_less_than",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BelowValue.as_upper_bound": {
            "name": "as_upper_bound",
            "location": 246,
            "return": [
                "None",
                "_Open"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.as_lower_bound": {
            "name": "as_lower_bound",
            "location": 249,
            "return": [
                "None",
                "_Closed"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.__hash__": {
            "name": "__hash__",
            "location": 252,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.__eq__": {
            "name": "__eq__",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_BelowValue.describe_as_lower_bound": {
            "name": "describe_as_lower_bound",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.describe_as_upper_bound": {
            "name": "describe_as_upper_bound",
            "location": 263,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BelowValue.__repr__": {
            "name": "__repr__",
            "location": 266,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.endpoint": {
            "name": "endpoint",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.is_less_than": {
            "name": "is_less_than",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AboveValue.as_upper_bound": {
            "name": "as_upper_bound",
            "location": 282,
            "return": [
                "None",
                "_Closed"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.as_lower_bound": {
            "name": "as_lower_bound",
            "location": 285,
            "return": [
                "None",
                "_Open"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.__hash__": {
            "name": "__hash__",
            "location": 288,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.__eq__": {
            "name": "__eq__",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AboveValue.describe_as_lower_bound": {
            "name": "describe_as_lower_bound",
            "location": 297,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.describe_as_upper_bound": {
            "name": "describe_as_upper_bound",
            "location": 300,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AboveValue.__repr__": {
            "name": "__repr__",
            "location": 303,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.open": {
            "name": "open",
            "location": 390,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": [],
                "upper": []
            }
        },
        "Range.closed": {
            "name": "closed",
            "location": 394,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": [],
                "upper": []
            }
        },
        "Range.closed_open": {
            "name": "closed_open",
            "location": 398,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": [],
                "upper": []
            }
        },
        "Range.open_closed": {
            "name": "open_closed",
            "location": 402,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": [],
                "upper": []
            }
        },
        "Range.less_than": {
            "name": "less_than",
            "location": 406,
            "return": [
                "Range"
            ],
            "arguments": {
                "upper": []
            }
        },
        "Range.at_most": {
            "name": "at_most",
            "location": 410,
            "return": [
                "Range"
            ],
            "arguments": {
                "upper": []
            }
        },
        "Range.greater_than": {
            "name": "greater_than",
            "location": 414,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": []
            }
        },
        "Range.at_least": {
            "name": "at_least",
            "location": 418,
            "return": [
                "Range"
            ],
            "arguments": {
                "lower": []
            }
        },
        "Range.all": {
            "name": "all",
            "location": 422,
            "return": [
                "None",
                "Range"
            ],
            "arguments": {}
        },
        "Range.create_spanning": {
            "name": "create_spanning",
            "location": 426,
            "return": [
                "Range"
            ],
            "arguments": {
                "ranges": []
            }
        },
        "Range.has_lower_bound": {
            "name": "has_lower_bound",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.has_upper_bound": {
            "name": "has_upper_bound",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.lower_bound_type": {
            "name": "lower_bound_type",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.upper_bound_type": {
            "name": "upper_bound_type",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.lower_endpoint": {
            "name": "lower_endpoint",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.upper_endpoint": {
            "name": "upper_endpoint",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Range.is_empty": {
            "name": "is_empty",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__contains__": {
            "name": "__contains__",
            "location": 469,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Range.encloses": {
            "name": "encloses",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Range.is_connected": {
            "name": "is_connected",
            "location": 482,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Range.span": {
            "name": "span",
            "location": 508,
            "return": [
                "Range"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Range.intersection": {
            "name": "intersection",
            "location": 533,
            "return": [
                "Range"
            ],
            "arguments": {
                "self": [],
                "connected_range": []
            }
        },
        "Range.intersects": {
            "name": "intersects",
            "location": 562,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_range": []
            }
        },
        "Range.__eq__": {
            "name": "__eq__",
            "location": 586,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Range.__hash__": {
            "name": "__hash__",
            "location": 594,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__repr__": {
            "name": "__repr__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.create_mutable": {
            "name": "create_mutable",
            "location": 637,
            "return": [],
            "arguments": {}
        },
        "RangeSet.__contains__": {
            "name": "__contains__",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RangeSet.encloses": {
            "name": "encloses",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeSet.encloses_all": {
            "name": "encloses_all",
            "location": 654,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rngs": []
            }
        },
        "RangeSet.intersects": {
            "name": "intersects",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeSet.ranges_overlapping": {
            "name": "ranges_overlapping",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeSet.range_containing": {
            "name": "range_containing",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RangeSet.range_enclosing_range": {
            "name": "range_enclosing_range",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RangeSet.ranges_enclosed_by": {
            "name": "ranges_enclosed_by",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeSet.rightmost_containing_or_below": {
            "name": "rightmost_containing_or_below",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upper_limit": []
            }
        },
        "RangeSet.leftmost_containing_or_above": {
            "name": "leftmost_containing_or_above",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_limit": []
            }
        },
        "RangeSet.maximal_containing_or_below": {
            "name": "maximal_containing_or_below",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "upper_limit": []
            }
        },
        "RangeSet.minimal_containing_or_above": {
            "name": "minimal_containing_or_above",
            "location": 766,
            "return": [],
            "arguments": {
                "self": [],
                "lower_limit": []
            }
        },
        "RangeSet.as_ranges": {
            "name": "as_ranges",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__eq__": {
            "name": "__eq__",
            "location": 773,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__hash__": {
            "name": "__hash__",
            "location": 779,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.is_empty": {
            "name": "is_empty",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.span": {
            "name": "span",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__repr__": {
            "name": "__repr__",
            "location": 797,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__getstate__": {
            "name": "__getstate__",
            "location": 800,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__setstate__": {
            "name": "__setstate__",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "ImmutableRangeSet.builder": {
            "name": "builder",
            "location": 821,
            "return": [
                "Builder"
            ],
            "arguments": {}
        },
        "MutableRangeSet.add": {
            "name": "add",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "MutableRangeSet.add_all": {
            "name": "add_all",
            "location": 856,
            "return": [
                "MutableRangeSet"
            ],
            "arguments": {
                "self": [],
                "rngs": []
            }
        },
        "MutableRangeSet.clear": {
            "name": "clear",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableRangeSet.remove": {
            "name": "remove",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "MutableRangeSet.remove_all": {
            "name": "remove_all",
            "location": 891,
            "return": [
                "MutableRangeSet"
            ],
            "arguments": {
                "self": [],
                "rngs": []
            }
        },
        "_SortedDictRangeSet.__init__": {
            "name": "__init__",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ranges_by_lower_bound": []
            }
        },
        "_SortedDictRangeSet.range_containing": {
            "name": "range_containing",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_SortedDictRangeSet.range_enclosing_range": {
            "name": "range_enclosing_range",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_SortedDictRangeSet.ranges_enclosed_by": {
            "name": "ranges_enclosed_by",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "query_rng": []
            }
        },
        "_SortedDictRangeSet.__contains__": {
            "name": "__contains__",
            "location": 957,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_SortedDictRangeSet.encloses": {
            "name": "encloses",
            "location": 966,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_SortedDictRangeSet.intersects": {
            "name": "intersects",
            "location": 975,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_SortedDictRangeSet.ranges_overlapping": {
            "name": "ranges_overlapping",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_SortedDictRangeSet.rightmost_containing_or_below": {
            "name": "rightmost_containing_or_below",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "upper_limit": []
            }
        },
        "_SortedDictRangeSet.leftmost_containing_or_above": {
            "name": "leftmost_containing_or_above",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_limit": []
            }
        },
        "_SortedDictRangeSet.as_ranges": {
            "name": "as_ranges",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.is_empty": {
            "name": "is_empty",
            "location": 1060,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.span": {
            "name": "span",
            "location": 1064,
            "return": [
                "Range"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.immutable_copy": {
            "name": "immutable_copy",
            "location": 1072,
            "return": [
                "_ImmutableSortedDictRangeSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.__repr__": {
            "name": "__repr__",
            "location": 1075,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.__len__": {
            "name": "__len__",
            "location": 1078,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SortedDictRangeSet.__setstate__": {
            "name": "__setstate__",
            "location": 1081,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "_MutableSortedDictRangeSet.create": {
            "name": "create",
            "location": 1091,
            "return": [
                "_MutableSortedDictRangeSet"
            ],
            "arguments": {}
        },
        "_MutableSortedDictRangeSet.add": {
            "name": "add",
            "location": 1094,
            "return": [
                "_MutableSortedDictRangeSet"
            ],
            "arguments": {
                "self": [],
                "range_to_add": []
            }
        },
        "_MutableSortedDictRangeSet.add_all": {
            "name": "add_all",
            "location": 1133,
            "return": [
                "_MutableSortedDictRangeSet"
            ],
            "arguments": {
                "self": [],
                "ranges_to_add": []
            }
        },
        "_MutableSortedDictRangeSet.clear": {
            "name": "clear",
            "location": 1142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MutableSortedDictRangeSet.remove": {
            "name": "remove",
            "location": 1145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_MutableSortedDictRangeSet._replace_range_with_same_lower_bound": {
            "name": "_replace_range_with_same_lower_bound",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeMap.__contains__": {
            "name": "__contains__",
            "location": 1199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RangeMap.get_enclosed_by": {
            "name": "get_enclosed_by",
            "location": 1206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "RangeMap.get_from_rightmost_containing_or_below": {
            "name": "get_from_rightmost_containing_or_below",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RangeMap.get_from_leftmost_containing_or_above": {
            "name": "get_from_leftmost_containing_or_above",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RangeMap.get_from_maximal_containing_or_below": {
            "name": "get_from_maximal_containing_or_below",
            "location": 1274,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RangeMap.get_from_minimal_containing_or_above": {
            "name": "get_from_minimal_containing_or_above",
            "location": 1283,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RangeMap.__eq__": {
            "name": "__eq__",
            "location": 1286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeMap.as_dict": {
            "name": "as_dict",
            "location": 1293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeMap.__hash__": {
            "name": "__hash__",
            "location": 1296,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeMap.is_empty": {
            "name": "is_empty",
            "location": 1300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeMap.__repr__": {
            "name": "__repr__",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.empty": {
            "name": "empty",
            "location": 1337,
            "return": [
                "ImmutableRangeMap"
            ],
            "arguments": {}
        },
        "ImmutableRangeMap.builder": {
            "name": "builder",
            "location": 1341,
            "return": [
                "Builder"
            ],
            "arguments": {}
        },
        "ImmutableRangeMap.__contains__": {
            "name": "__contains__",
            "location": 1344,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ImmutableRangeMap.get_enclosed_by": {
            "name": "get_enclosed_by",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "ImmutableRangeMap.is_empty": {
            "name": "is_empty",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.__getitem__": {
            "name": "__getitem__",
            "location": 1356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ImmutableRangeMap.as_dict": {
            "name": "as_dict",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.get_from_rightmost_containing_or_below": {
            "name": "get_from_rightmost_containing_or_below",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ImmutableRangeMap.get_from_leftmost_containing_or_above": {
            "name": "get_from_leftmost_containing_or_above",
            "location": 1367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ImmutableRangeMap.__reduce__": {
            "name": "__reduce__",
            "location": 1371,
            "return": [
                "tuple[tuple[tuple[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap._init_range_set": {
            "name": "_init_range_set",
            "location": 1379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeSet.Builder.add": {
            "name": "add",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "ImmutableRangeSet.Builder.add_all": {
            "name": "add_all",
            "location": 829,
            "return": [
                "Builder"
            ],
            "arguments": {
                "self": [],
                "ranges": []
            }
        },
        "ImmutableRangeSet.Builder.build": {
            "name": "build",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableSortedDictRangeSet.Builder.__init__": {
            "name": "__init__",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableSortedDictRangeSet.Builder.add": {
            "name": "add",
            "location": 1169,
            "return": [
                "_MutableSortedDictRangeSet"
            ],
            "arguments": {
                "self": [],
                "rng": []
            }
        },
        "_ImmutableSortedDictRangeSet.Builder.build": {
            "name": "build",
            "location": 1173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.Builder.__init__": {
            "name": "__init__",
            "location": 1387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableRangeMap.Builder.put": {
            "name": "put",
            "location": 1390,
            "return": [
                "Builder"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "ImmutableRangeMap.Builder.build": {
            "name": "build",
            "location": 1394,
            "return": [
                "ImmutableRangeMap"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/vistautils/span.py": {
        "_build_range_to_item_index": {
            "name": "_build_range_to_item_index",
            "location": 211,
            "return": [],
            "arguments": {
                "inp": [
                    "typing.Iterable[typing.Any]",
                    "typing.Match",
                    "int"
                ]
            }
        },
        "Span._validate_start": {
            "name": "_validate_start",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "typing.Match",
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, int]"
                ],
                "val": [
                    "typing.Match",
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "Span.from_inclusive_to_exclusive": {
            "name": "from_inclusive_to_exclusive",
            "location": 43,
            "return": [
                "Span"
            ],
            "arguments": {
                "start_inclusive": [
                    "int"
                ],
                "end_exclusive": [
                    "int"
                ]
            }
        },
        "Span.contains_offset": {
            "name": "contains_offset",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Span.contains_span": {
            "name": "contains_span",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Span.precedes": {
            "name": "precedes",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Span.follows": {
            "name": "follows",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Span.overlaps": {
            "name": "overlaps",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Span.intersection": {
            "name": "intersection",
            "location": 83,
            "return": [
                "Span",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Span.as_range": {
            "name": "as_range",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.__contains__": {
            "name": "__contains__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "Span.__len__": {
            "name": "__len__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.clip_to": {
            "name": "clip_to",
            "location": 104,
            "return": [
                "None",
                "Span"
            ],
            "arguments": {
                "self": [],
                "enclosing": []
            }
        },
        "Span.shift": {
            "name": "shift",
            "location": 117,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "shift_amount": [
                    "int",
                    "list[]",
                    "set[str]",
                    "dict[, ]"
                ]
            }
        },
        "Span.minimal_enclosing_span": {
            "name": "minimal_enclosing_span",
            "location": 126,
            "return": [
                "Span"
            ],
            "arguments": {
                "spans": [
                    "list[]",
                    "str",
                    "list[int]",
                    "dict[, ]"
                ]
            }
        },
        "Span.earliest_then_longest_first_key": {
            "name": "earliest_then_longest_first_key",
            "location": 135,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Span.__repr__": {
            "name": "__repr__",
            "location": 139,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasSpan.start": {
            "name": "start",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HasSpan.end": {
            "name": "end",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HasSpan.contains_offset": {
            "name": "contains_offset",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "HasSpan.contains_span": {
            "name": "contains_span",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HasSpanIndex.index": {
            "name": "index",
            "location": 171,
            "return": [
                "_OverLappingHasSpanIndex"
            ],
            "arguments": {
                "items": []
            }
        },
        "HasSpanIndex.index_disjoint": {
            "name": "index_disjoint",
            "location": 181,
            "return": [
                "_DisjointHasSpanIndex"
            ],
            "arguments": {
                "items": []
            }
        },
        "HasSpanIndex.get_exactly_matching": {
            "name": "get_exactly_matching",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "HasSpanIndex.get_overlapping": {
            "name": "get_overlapping",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "HasSpanIndex.get_contained": {
            "name": "get_contained",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "HasSpanIndex.get_containing": {
            "name": "get_containing",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_DisjointHasSpanIndex.get_exactly_matching": {
            "name": "get_exactly_matching",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "span": []
            }
        },
        "_DisjointHasSpanIndex.get_overlapping": {
            "name": "get_overlapping",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "span": []
            }
        },
        "_DisjointHasSpanIndex.get_contained": {
            "name": "get_contained",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "span": []
            }
        },
        "_DisjointHasSpanIndex.get_containing": {
            "name": "get_containing",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": []
            }
        },
        "_OverLappingHasSpanIndex.get_exactly_matching": {
            "name": "get_exactly_matching",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "span": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "_OverLappingHasSpanIndex.get_overlapping": {
            "name": "get_overlapping",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "span": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "None"
                ]
            }
        },
        "_OverLappingHasSpanIndex.get_contained": {
            "name": "get_contained",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "span": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "None"
                ]
            }
        },
        "_OverLappingHasSpanIndex.get_containing": {
            "name": "get_containing",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "span": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "None"
                ]
            }
        }
    },
    "vistautils-master/vistautils/version.py": {},
    "vistautils-master/vistautils/_graph.py": {
        "validate_edges": {
            "name": "validate_edges",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int"
                ],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "edges": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        },
        "_to_immutableset": {
            "name": "_to_immutableset",
            "location": 36,
            "return": [],
            "arguments": {
                "items": [
                    "list[str]"
                ]
            }
        },
        "_to_immutablesetmultidict": {
            "name": "_to_immutablesetmultidict",
            "location": 43,
            "return": [],
            "arguments": {
                "items": [
                    "list[str]"
                ]
            }
        },
        "Digraph.in_degree": {
            "name": "in_degree",
            "location": 69,
            "return": [
                "InDegreeView"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digraph.topological_sort": {
            "name": "topological_sort",
            "location": 72,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digraph.init_predecessors": {
            "name": "init_predecessors",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InDegreeView.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "InDegreeView.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InDegreeView.__getitem__": {
            "name": "__getitem__",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "InDegreeView.__iter__": {
            "name": "__iter__",
            "location": 116,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vistautils-master/vistautils/__init__.py": {},
    "vistautils-master/vistautils/scripts/directory_to_key_value_store.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "key_function_from_params": {
            "name": "key_function_from_params",
            "location": 44,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "identity_key_function": {
            "name": "identity_key_function",
            "location": 61,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "strip_one_extension_key_function": {
            "name": "strip_one_extension_key_function",
            "location": 65,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "vistautils-master/vistautils/scripts/downsample_key_value_store.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "vistautils-master/vistautils/scripts/join_key_value_stores.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "vistautils-master/vistautils/scripts/split_key_value_store.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "_split_into_even_slices": {
            "name": "_split_into_even_slices",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "input_source": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "params": []
            }
        },
        "_explicit_split": {
            "name": "_explicit_split",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "params": []
            }
        }
    },
    "vistautils-master/vistautils/scripts/tar_gz_to_zip.py": {
        "getargs": {
            "name": "getargs",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_output_name": {
            "name": "_output_name",
            "location": 87,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "vistautils-master/vistautils/scripts/text_at_offsets.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vistautils-master/vistautils/scripts/__init__.py": {}
}
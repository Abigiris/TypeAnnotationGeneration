{
    "vtes-master/setup.py": {},
    "vtes-master/tests/conftest.py": {
        "execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "vtes_add": {
            "name": "vtes_add",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "vtes_stats": {
            "name": "vtes_stats",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "specify_namespace": {
            "name": "specify_namespace",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "vtes_decks": {
            "name": "vtes_decks",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "check_command_passed": {
            "name": "check_command_passed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "check_command_failed": {
            "name": "check_command_failed",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "log_some_games": {
            "name": "log_some_games",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "str",
                    "typing.Sequence[str]",
                    "list[str]"
                ],
                "five_games": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "x_players_with_decks": {
            "name": "x_players_with_decks",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "bool",
                    "str"
                ]
            }
        },
        "listed_player_rankings": {
            "name": "listed_player_rankings",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "listed_deck_rankings": {
            "name": "listed_deck_rankings",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "vtes_games": {
            "name": "vtes_games",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "listed_with_namespace": {
            "name": "listed_with_namespace",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "typing.Callable[T, bool]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "listed_with_ml_namespace": {
            "name": "listed_with_ml_namespace",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "typing.Callable[T, bool]",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "vtes-master/tests/fixtures/commands.py": {
        "vtes_command": {
            "name": "vtes_command",
            "location": 66,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "tmpdir": [
                    "list[]",
                    "int",
                    "str"
                ]
            }
        },
        "five_games": {
            "name": "five_games",
            "location": 70,
            "return": [
                "tuple[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "VTESRunnerProxy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "int",
                    "float"
                ]
            }
        },
        "VTESRunnerProxy.with_pickle_file": {
            "name": "with_pickle_file",
            "location": 15,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.with_database": {
            "name": "with_database",
            "location": 19,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.add": {
            "name": "add",
            "location": 23,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.stats": {
            "name": "stats",
            "location": 27,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.gamefix": {
            "name": "gamefix",
            "location": 31,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.games": {
            "name": "games",
            "location": 35,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.decks": {
            "name": "decks",
            "location": 39,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.with_arguments": {
            "name": "with_arguments",
            "location": 43,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "VTESRunnerProxy.namespace": {
            "name": "namespace",
            "location": 47,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "VTESRunnerProxy.execute": {
            "name": "execute",
            "location": 51,
            "return": [
                "VTESRunnerProxy"
            ],
            "arguments": {
                "self": []
            }
        },
        "VTESRunnerProxy.assert_ok": {
            "name": "assert_ok",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vtes-master/tests/functional/test_add_games.py": {
        "x_players": {
            "name": "x_players",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [],
                "vtes_command": []
            }
        },
        "x_players_with_vps": {
            "name": "x_players_with_vps",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "x_players_with_decks_and_vps": {
            "name": "x_players_with_decks_and_vps",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "bool",
                    "str"
                ]
            }
        },
        "check_error_for_player_count": {
            "name": "check_error_for_player_count",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "log_five_games": {
            "name": "log_five_games",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "typing.Iterable[T]",
                    "bool",
                    "typing.Sized",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "log_game_with_vp": {
            "name": "log_game_with_vp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "list[]",
                    "set[str]"
                ],
                "count": [],
                "winning": []
            }
        },
        "log_game_with_decks_and_vp": {
            "name": "log_game_with_decks_and_vp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "set[]",
                    "set[frozenset]"
                ]
            }
        },
        "log_game_with_decks": {
            "name": "log_game_with_decks",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "set[]",
                    "set[frozenset]"
                ]
            }
        },
        "five_games_listed": {
            "name": "five_games_listed",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str"
                ]
            }
        },
        "identifiers": {
            "name": "identifiers",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str"
                ]
            }
        },
        "list_game_with_vp": {
            "name": "list_game_with_vp",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str"
                ],
                "count": [],
                "winning": []
            }
        },
        "decks_and_victory_points": {
            "name": "decks_and_victory_points",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "decks": {
            "name": "decks",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "game_dates": {
            "name": "game_dates",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        }
    },
    "vtes-master/tests/functional/test_db.py": {
        "pickle_and_db": {
            "name": "pickle_and_db",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int"
                ],
                "vtes_command": [
                    "str",
                    "None",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "log_some_games": {
            "name": "log_some_games",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "list[bytes]",
                    "None",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "int"
                ],
                "five_games": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "vtes_stats": {
            "name": "vtes_stats",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]",
                    "list[dict[, ]]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "vtes_add_db": {
            "name": "vtes_add_db",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[dict[str, str]]",
                    "list[]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "typing.Sequence[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "vtes_games": {
            "name": "vtes_games",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "vtes_decks": {
            "name": "vtes_decks",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]",
                    "list[dict[, ]]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "five_games_listed": {
            "name": "five_games_listed",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str"
                ]
            }
        },
        "change_game_1": {
            "name": "change_game_1",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "log_game_with_namespace": {
            "name": "log_game_with_namespace",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "set[]",
                    "typing.Sized",
                    "int",
                    "str"
                ]
            }
        },
        "log_game_with_ml_namespace": {
            "name": "log_game_with_ml_namespace",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "set[]",
                    "typing.Sized",
                    "int",
                    "str"
                ]
            }
        },
        "only_games_with_namespace": {
            "name": "only_games_with_namespace",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str"
                ]
            }
        }
    },
    "vtes-master/tests/functional/test_decks.py": {
        "single_player_decks": {
            "name": "single_player_decks",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "single_player_deck_rankings": {
            "name": "single_player_deck_rankings",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "vtes-master/tests/functional/test_fixgame.py": {
        "change_game_1": {
            "name": "change_game_1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "game_is_changed": {
            "name": "game_is_changed",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "typing.Callable[, ]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "change_game_1_date": {
            "name": "change_game_1_date",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "change_game_1_namespace": {
            "name": "change_game_1_namespace",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "game_date_is_changed": {
            "name": "game_date_is_changed",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "list[str]",
                    "list[]",
                    "int"
                ]
            }
        },
        "game_namespace_is_changed": {
            "name": "game_namespace_is_changed",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[dict[str, str]]",
                    "list[]"
                ]
            }
        }
    },
    "vtes-master/tests/functional/test_namespaces.py": {
        "single_level_namespace": {
            "name": "single_level_namespace",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "triple_level_namespace": {
            "name": "triple_level_namespace",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": []
            }
        },
        "log_game_with_namespace": {
            "name": "log_game_with_namespace",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "typing.Type",
                    "bool",
                    "typing.Iterable[T]",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "log_game_with_ml_namespace": {
            "name": "log_game_with_ml_namespace",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "typing.Type",
                    "bool",
                    "typing.Iterable[T]",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "log_games_with_ml_namespace": {
            "name": "log_games_with_ml_namespace",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "typing.Iterable[T]"
                ]
            }
        },
        "log_games_with_diff_namespaces": {
            "name": "log_games_with_diff_namespaces",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "typing.Iterable[T]"
                ]
            }
        },
        "deck_stats_from_namespace": {
            "name": "deck_stats_from_namespace",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "bytes",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "game_stats_from_namespace": {
            "name": "game_stats_from_namespace",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "games_from_namespace_listed": {
            "name": "games_from_namespace_listed",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "typing.IO"
                ]
            }
        }
    },
    "vtes-master/tests/functional/test_stats.py": {
        "game_win_ratios": {
            "name": "game_win_ratios",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "int",
                    "None",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "vp_snatch_ratios": {
            "name": "vp_snatch_ratios",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "vtes_command": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "vtes-master/tests/unit/test_games.py": {
        "test_parse_player": {
            "name": "test_parse_player",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_player_deck": {
            "name": "test_parse_player_deck",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_player_deck_vp": {
            "name": "test_parse_player_deck_vp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_player_vp": {
            "name": "test_parse_player_vp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_player_negative": {
            "name": "test_parse_player_negative",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game": {
            "name": "test_game",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game_with_vps": {
            "name": "test_game_with_vps",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game_with_draw": {
            "name": "test_game_with_draw",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_colorize": {
            "name": "test_colorize",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date": {
            "name": "test_date",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespace": {
            "name": "test_namespace",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_namespace": {
            "name": "test_parse_namespace",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vtes-master/tests/unit/test_run.py": {
        "store_with_two_games": {
            "name": "store_with_two_games",
            "location": 14,
            "return": [],
            "arguments": {
                "fs": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "test_parse_players": {
            "name": "test_parse_players",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_games_command": {
            "name": "test_games_command",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_print": [],
                "store_with_two_games": []
            }
        },
        "test_stats_command": {
            "name": "test_stats_command",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_print": [],
                "store_with_two_games": []
            }
        },
        "test_add_command_when_exists": {
            "name": "test_add_command_when_exists",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "store_with_two_games": [],
                "fs": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_add_command_when_not_exists": {
            "name": "test_add_command_when_not_exists",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "bool",
                    "str",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "test_gamefix_command": {
            "name": "test_gamefix_command",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "typing.Callable[, ]",
                    "dict[str, str]",
                    "list[list[typing.Any]]",
                    "bool",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "test_gamefix_command_date": {
            "name": "test_gamefix_command_date",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "list[]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "vtes-master/tests/unit/test_store.py": {
        "test_store": {
            "name": "test_store",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fix": {
            "name": "test_fix",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deck_rankings": {
            "name": "test_deck_rankings",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rankings": {
            "name": "test_rankings",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rankings_comparison": {
            "name": "test_rankings_comparison",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_store_rankings": {
            "name": "test_store_rankings",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_store_deck_rankings": {
            "name": "test_store_deck_rankings",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gw_ratio": {
            "name": "test_gw_ratio",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vp_snatch": {
            "name": "test_vp_snatch",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_picklestore_save_load": {
            "name": "test_picklestore_save_load",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vtes-master/vtes/db.py": {
        "DatabaseNamespaceModel.db_create": {
            "name": "db_create",
            "location": 26,
            "return": [],
            "arguments": {
                "namespace": [
                    "str"
                ]
            }
        },
        "DatabaseGameModel.db_create": {
            "name": "db_create",
            "location": 48,
            "return": [],
            "arguments": {
                "game": []
            }
        },
        "DatabaseGameModel.all_games": {
            "name": "all_games",
            "location": 64,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "DatabaseGameModel.namespaces": {
            "name": "namespaces",
            "location": 70,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseGameModel.as_game": {
            "name": "as_game",
            "location": 83,
            "return": [
                "Game"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabasePlayerModel.as_player": {
            "name": "as_player",
            "location": 96,
            "return": [
                "Player"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vtes-master/vtes/game.py": {
        "set_colorize": {
            "name": "set_colorize",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "colorize": [
                    "bool",
                    "float"
                ]
            }
        },
        "parse_player": {
            "name": "parse_player",
            "location": 30,
            "return": [
                "Player"
            ],
            "arguments": {
                "raw_player": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "parse_namespace": {
            "name": "parse_namespace",
            "location": 48,
            "return": [
                "tuple[str]",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "deck": [
                    "str",
                    "None"
                ],
                "points": [
                    "float",
                    "None"
                ]
            }
        },
        "Player.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game._colorize_player_line": {
            "name": "_colorize_player_line",
            "location": 62,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list[str]"
                ],
                "winner": [
                    "bool"
                ],
                "points": [
                    "int"
                ]
            }
        },
        "Game._make_player_line": {
            "name": "_make_player_line",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "player": [
                    "str",
                    "list[str]"
                ],
                "winner": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Game.from_table": {
            "name": "from_table",
            "location": 83,
            "return": [
                "Game"
            ],
            "arguments": {
                "table": [
                    "str",
                    "set[str]",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "list[str]"
                ],
                "date": [
                    "None",
                    "str",
                    "dict[datetime.date, dict[str, typing.Any]]"
                ],
                "namespace": [
                    "None",
                    "str",
                    "dict[datetime.date, dict[str, typing.Any]]"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "list[int]"
                ],
                "winner": [
                    "str",
                    "None"
                ],
                "winning_points": [
                    "float",
                    "None",
                    "int",
                    "str"
                ],
                "date": [
                    "None"
                ],
                "namespace": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Game.players": {
            "name": "players",
            "location": 116,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.in_namespace": {
            "name": "in_namespace",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        }
    },
    "vtes-master/vtes/run.py": {
        "games_command": {
            "name": "games_command",
            "location": 15,
            "return": [],
            "arguments": {
                "journal": [],
                "namespace": []
            }
        },
        "add_command": {
            "name": "add_command",
            "location": 27,
            "return": [],
            "arguments": {
                "players": [],
                "journal": [],
                "date": [],
                "namespace": []
            }
        },
        "gamefix_command": {
            "name": "gamefix_command",
            "location": 41,
            "return": [],
            "arguments": {
                "game_index": [],
                "journal": [],
                "players": [],
                "date": [],
                "namespace": []
            }
        },
        "stats_command": {
            "name": "stats_command",
            "location": 56,
            "return": [],
            "arguments": {
                "journal": [],
                "namespace": []
            }
        },
        "decks_command": {
            "name": "decks_command",
            "location": 66,
            "return": [],
            "arguments": {
                "journal": [],
                "player": [],
                "namespace": []
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "ParsePlayerAction.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParsePlayerAction.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        }
    },
    "vtes-master/vtes/store.py": {
        "Ranking.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "wins": [
                    "int",
                    "str",
                    "None",
                    "dict[tuple[typing.Union[typing.Any,str]], int]"
                ],
                "points": [
                    "float",
                    "str",
                    "int"
                ],
                "games": [
                    "int",
                    "str",
                    "None",
                    "dict[tuple[typing.Union[typing.Any,str]], int]"
                ]
            }
        },
        "Ranking.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Ranking.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float"
                ]
            }
        },
        "Ranking.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ranking.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ranking.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ranking.gw_ratio": {
            "name": "gw_ratio",
            "location": 42,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ranking.vp_ratio": {
            "name": "vp_ratio",
            "location": 47,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckRanking.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "str",
                    "bool"
                ],
                "player": [
                    "str",
                    "bool"
                ],
                "gw": [
                    "int",
                    "bytes"
                ],
                "games": [
                    "int",
                    "bytes"
                ],
                "vp": [
                    "int",
                    "str",
                    "float"
                ],
                "vp_total": [
                    "int",
                    "bytes",
                    "typing.Sequence[typing.Sequence[int]]",
                    "dict[, ]"
                ]
            }
        },
        "DeckRanking.gw_ratio": {
            "name": "gw_ratio",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckRanking.vp_ratio": {
            "name": "vp_ratio",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckRanking.__lt__": {
            "name": "__lt__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DeckRanking.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Mapping"
                ]
            }
        },
        "DeckRanking.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckRanking.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckRanking.__iter__": {
            "name": "__iter__",
            "location": 90,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStore._include_player_in_rankings": {
            "name": "_include_player_in_rankings",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "rankings": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "player": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "game": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "player_count": [
                    "int",
                    "str"
                ]
            }
        },
        "GameStore.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStore.__iter__": {
            "name": "__iter__",
            "location": 113,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStore.__len__": {
            "name": "__len__",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStore.add": {
            "name": "add",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "GameStore.fix": {
            "name": "fix",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "game": []
            }
        },
        "GameStore.rankings": {
            "name": "rankings",
            "location": 127,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "tuple[]",
                    "list[]",
                    "str"
                ]
            }
        },
        "GameStore._include_deck_in_rankings": {
            "name": "_include_deck_in_rankings",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "rankings": [],
                "deck": [
                    "dict[str, str]",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,str]]",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "dict[, ]"
                ],
                "name": [
                    "dict[str, str]",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,str]]",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "dict[, ]"
                ],
                "vp": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "collections.abc.AsyncIterator"
                ],
                "total_vp": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "collections.abc.AsyncIterator"
                ],
                "winner": [
                    "bool",
                    "str",
                    "list[typing.Union[int,typing.Any]]",
                    "None"
                ]
            }
        },
        "GameStore.decks": {
            "name": "decks",
            "location": 156,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "namespace": [
                    "None",
                    "tuple[]",
                    "list[]",
                    "str"
                ]
            }
        },
        "PickleStore.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PickleStore.open": {
            "name": "open",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleStore.save": {
            "name": "save",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleStore.add": {
            "name": "add",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "typing.Callable[L, None]"
                ]
            }
        },
        "PickleStore.fix": {
            "name": "fix",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[str]"
                ],
                "game": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "PickleStore.rankings": {
            "name": "rankings",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "str"
                ]
            }
        },
        "PickleStore.decks": {
            "name": "decks",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "player": [
                    "None",
                    "str",
                    "typing.Iterable[T]"
                ],
                "namespace": [
                    "None",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "PickleStore.games": {
            "name": "games",
            "location": 214,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleStore.__len__": {
            "name": "__len__",
            "location": 218,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleStore.__iter__": {
            "name": "__iter__",
            "location": 221,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleStore.filter": {
            "name": "filter",
            "location": 224,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DatabaseStore.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DatabaseStore.open": {
            "name": "open",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStore.add": {
            "name": "add",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "typing.Container"
                ]
            }
        },
        "DatabaseStore.save": {
            "name": "save",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DatabaseStore.rankings": {
            "name": "rankings",
            "location": 253,
            "return": [],
            "arguments": {
                "namespace": [
                    "None",
                    "str"
                ]
            }
        },
        "DatabaseStore.decks": {
            "name": "decks",
            "location": 260,
            "return": [],
            "arguments": {
                "player": [
                    "None",
                    "str",
                    "typing.Iterable[T]"
                ],
                "namespace": [
                    "None",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "DatabaseStore.__len__": {
            "name": "__len__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStore.__iter__": {
            "name": "__iter__",
            "location": 272,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStore.filter": {
            "name": "filter",
            "location": 275,
            "return": [
                "typing.Generator[list[]]",
                "typing.Generator[DatabaseStore]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "DatabaseStore.fix": {
            "name": "fix",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "game": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "vtes-master/vtes/__init__.py": {}
}
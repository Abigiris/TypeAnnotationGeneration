{
    "wallet-master/src/wallet/app.py": {
        "setup_passport": {
            "name": "setup_passport",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "init": {
            "name": "init",
            "location": 60,
            "return": [],
            "arguments": {
                "app_name": [
                    "str",
                    "typing.Type",
                    "None"
                ],
                "config": [
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "wallet-master/src/wallet/config.py": {
        "StorageConfig.uri": {
            "name": "uri",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VaultProvider.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "mount_point": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "VaultProvider.load": {
            "name": "load",
            "location": 56,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "typing.IO"
                ]
            }
        }
    },
    "wallet-master/src/wallet/openapi.py": {
        "setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "wallet-master/src/wallet/__init__.py": {},
    "wallet-master/src/wallet/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/exceptions.py": {
        "AccountAlreadyExist.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "account": []
            }
        },
        "AccountNotFound.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CategoryAlreadyExist.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "category": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "CategoryNotFound.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CategoriesNotFound.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "set[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "keys": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "UnprocessableOperations.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "operations": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ValidationError.errors": {
            "name": "errors",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wallet-master/src/wallet/core/tools.py": {
        "month_range": {
            "name": "month_range",
            "location": 7,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None",
                    "str"
                ],
                "to": [
                    "None",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/__init__.py": {},
    "wallet-master/src/wallet/core/entities/abc.py": {
        "Entity.__post_init__": {
            "name": "__post_init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityWithBalance.__post_init__": {
            "name": "__post_init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityWithBalance.add_operation": {
            "name": "add_operation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "typing.Callable[[], None]",
                    "float"
                ],
                "operation_type": [
                    "bool",
                    "str",
                    "typing.Type",
                    "None"
                ],
                "created_on": [
                    "int",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "EntityWithBalance.drop_operation": {
            "name": "drop_operation",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [],
                "operation_type": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type"
                ],
                "created_on": [
                    "float",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/entities/accounts.py": {},
    "wallet-master/src/wallet/core/entities/categories.py": {},
    "wallet-master/src/wallet/core/entities/operations.py": {},
    "wallet-master/src/wallet/core/entities/tags.py": {},
    "wallet-master/src/wallet/core/entities/__init__.py": {},
    "wallet-master/src/wallet/core/services/accounts.py": {},
    "wallet-master/src/wallet/core/services/categories.py": {},
    "wallet-master/src/wallet/core/services/operations.py": {},
    "wallet-master/src/wallet/core/services/tags.py": {},
    "wallet-master/src/wallet/core/services/__init__.py": {
        "Service.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "int"
                ],
                "logger": [
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/storage/abc.py": {
        "Repo.fetch": {
            "name": "fetch",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/storage/accounts.py": {},
    "wallet-master/src/wallet/core/storage/categories.py": {},
    "wallet-master/src/wallet/core/storage/operations.py": {},
    "wallet-master/src/wallet/core/storage/tags.py": {},
    "wallet-master/src/wallet/core/storage/__init__.py": {},
    "wallet-master/src/wallet/core/use_cases/accounts.py": {
        "AccountUseCase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "int"
                ],
                "logger": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/use_cases/categories.py": {
        "CategoryUseCase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str"
                ],
                "logger": [
                    "str",
                    "typing.IO",
                    "list[str]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/use_cases/operations.py": {
        "OperationUseCase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "int",
                    "str",
                    "None"
                ],
                "logger": [
                    "str",
                    "bool"
                ]
            }
        },
        "AddBulkUseCase.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "logger": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "SearchUseCase.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "dict[str, list[str]]",
                    "list[str]",
                    "int"
                ],
                "logger": [
                    "str",
                    "dict[str, list[str]]",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "wallet-master/src/wallet/core/use_cases/__init__.py": {},
    "wallet-master/src/wallet/storage/abc.py": {
        "DBRepo.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float"
                ]
            }
        },
        "DBRepo._get_query": {
            "name": "_get_query",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "DBRepo._process_row": {
            "name": "_process_row",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[list[str]]",
                    "typing.Iterator"
                ]
            }
        }
    },
    "wallet-master/src/wallet/storage/accounts.py": {
        "AccountDBRepo._get_query": {
            "name": "_get_query",
            "location": 29,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "AccountDBRepo._process_row": {
            "name": "_process_row",
            "location": 39,
            "return": [
                "Account"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "list[str]",
                    "list[]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/storage/categories.py": {
        "CategoryDBRepo._get_query": {
            "name": "_get_query",
            "location": 49,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "CategoryDBRepo._process_row": {
            "name": "_process_row",
            "location": 59,
            "return": [
                "Category"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "list[str]",
                    "list[]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/storage/operations.py": {
        "OperationDBRepo._get_query": {
            "name": "_get_query",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [
                    "int",
                    "tuple[typing.Union[str,typing.Any]]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "OperationDBRepo._process_row": {
            "name": "_process_row",
            "location": 70,
            "return": [
                "Operation"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        }
    },
    "wallet-master/src/wallet/storage/tags.py": {},
    "wallet-master/src/wallet/storage/__init__.py": {
        "DBStorage.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool"
                ]
            }
        }
    },
    "wallet-master/src/wallet/storage/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "wallet-master/src/wallet/storage/migrations/versions/1d57e04679ca_initial.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "wallet-master/src/wallet/storage/migrations/versions/__init__.py": {},
    "wallet-master/src/wallet/web/__init__.py": {},
    "wallet-master/src/wallet/web/handlers/abc.py": {
        "InvalidParameters.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "InvalidParameters.errors": {
            "name": "errors",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidPayload.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "InvalidPayload.errors": {
            "name": "errors",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperationView.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "typing.OrderedDict"
                ],
                "security": [
                    "list[str]",
                    "None",
                    "str",
                    "typing.Sequence[]",
                    "bool",
                    "typing.Mapping"
                ],
                "tags": [
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "None",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "OperationView.spec": {
            "name": "spec",
            "location": 55,
            "return": [
                "OpenAPISpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationView.get_parameters": {
            "name": "get_parameters",
            "location": 65,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception"
                ]
            }
        },
        "OperationView.create_schema": {
            "name": "create_schema",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "schema_cls": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "typing.Iterable[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "OperationView.process_response": {
            "name": "process_response",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "wallet-master/src/wallet/web/handlers/accounts.py": {},
    "wallet-master/src/wallet/web/handlers/categories.py": {},
    "wallet-master/src/wallet/web/handlers/operations.py": {},
    "wallet-master/src/wallet/web/handlers/passport.py": {
        "PassportView.create_schema": {
            "name": "create_schema",
            "location": 13,
            "return": [
                "bool",
                "set[str]",
                "dict[, ]",
                "float"
            ],
            "arguments": {
                "self": [],
                "schema_cls": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "wallet-master/src/wallet/web/handlers/__init__.py": {},
    "wallet-master/src/wallet/web/middlewares/common.py": {},
    "wallet-master/src/wallet/web/middlewares/passport.py": {},
    "wallet-master/src/wallet/web/middlewares/__init__.py": {},
    "wallet-master/src/wallet/web/schemas/abc.py": {
        "CollectionFiltersSchema.cleanup": {
            "name": "cleanup",
            "location": 36,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "PayloadSchema.build_payload": {
            "name": "build_payload",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [
                    "bool"
                ]
            }
        }
    },
    "wallet-master/src/wallet/web/schemas/accounts.py": {
        "AccountsFilterSchema.make_payload": {
            "name": "make_payload",
            "location": 23,
            "return": [
                "AccountFilters"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/web/schemas/categories.py": {
        "CategoriesFilterSchema.make_payload": {
            "name": "make_payload",
            "location": 23,
            "return": [
                "CategoryFilters"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "wallet-master/src/wallet/web/schemas/operations.py": {
        "OperationsFilterSchema.validate_dates": {
            "name": "validate_dates",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "OperationsFilterSchema.make_payload": {
            "name": "make_payload",
            "location": 61,
            "return": [
                "OperationFilters"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "OperationsFilterSchema.serialize_filters": {
            "name": "serialize_filters",
            "location": 69,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "float",
                    "list[P]"
                ]
            }
        },
        "AddOperationPayloadSchema.make_payload": {
            "name": "make_payload",
            "location": 108,
            "return": [
                "OperationPayload"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "list[str]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "wallet-master/src/wallet/web/schemas/__init__.py": {},
    "wallet-master/tests/conftest.py": {
        "user": {
            "name": "user",
            "location": 21,
            "return": [
                "User"
            ],
            "arguments": {
                "faker": []
            }
        },
        "keypair": {
            "name": "keypair",
            "location": 33,
            "return": [
                "Keypair"
            ],
            "arguments": {}
        },
        "get_token_for": {
            "name": "get_token_for",
            "location": 50,
            "return": [],
            "arguments": {
                "keypair": [
                    "dict[str, list[str]]",
                    "int",
                    "Exception",
                    "list[str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 61,
            "return": [
                "AppConfig"
            ],
            "arguments": {
                "keypair": [
                    "str",
                    "None"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 83,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "config": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "today": {
            "name": "today",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "month": {
            "name": "month",
            "location": 106,
            "return": [],
            "arguments": {
                "today": [
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "str"
                ]
            }
        },
        "get_token_for.generate": {
            "name": "generate",
            "location": 54,
            "return": [],
            "arguments": {
                "user": [],
                "token_type": [],
                "ttl": [
                    "int"
                ]
            }
        }
    },
    "wallet-master/tests/__init__.py": {},
    "wallet-master/tests/core/conftest.py": {
        "logger": {
            "name": "logger",
            "location": 11,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "fake_storage": {
            "name": "fake_storage",
            "location": 22,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "fake_coroutine": {
            "name": "fake_coroutine",
            "location": 33,
            "return": [],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "account": {
            "name": "account",
            "location": 44,
            "return": [
                "Account"
            ],
            "arguments": {
                "faker": [],
                "user": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "category": {
            "name": "category",
            "location": 52,
            "return": [
                "Category"
            ],
            "arguments": {
                "faker": [],
                "user": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "fake_coroutine.coro": {
            "name": "coro",
            "location": 34,
            "return": [],
            "arguments": {
                "result": []
            }
        }
    },
    "wallet-master/tests/core/test_tools.py": {
        "current_month_test_case": {
            "name": "current_month_test_case",
            "location": 8,
            "return": [
                "dict[typing.Text, typing.Union[str,int,dict[, ],list[typing.Union[str,int,dict[, ]]]]]"
            ],
            "arguments": {
                "today": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "month": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "two_months_in_past_test_case": {
            "name": "two_months_in_past_test_case",
            "location": 13,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "today": [],
                "month": []
            }
        },
        "several_months_in_future_test_case": {
            "name": "several_months_in_future_test_case",
            "location": 21,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "today": [],
                "month": []
            }
        },
        "month_ranges": {
            "name": "month_ranges",
            "location": 38,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_month_range": {
            "name": "test_month_range",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "month_ranges": []
            }
        },
        "test_wrong_month_range": {
            "name": "test_wrong_month_range",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "today": []
            }
        }
    },
    "wallet-master/tests/core/entities/__init__.py": {},
    "wallet-master/tests/core/entities/abc/__init__.py": {},
    "wallet-master/tests/core/entities/abc/entity_with_balance/conftest.py": {
        "entity": {
            "name": "entity",
            "location": 11,
            "return": [
                "EntityWithBalance"
            ],
            "arguments": {}
        },
        "amount": {
            "name": "amount",
            "location": 16,
            "return": [
                "Decimal"
            ],
            "arguments": {
                "request": []
            }
        },
        "operation_type": {
            "name": "operation_type",
            "location": 21,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "created_on": {
            "name": "created_on",
            "location": 26,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "today": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "prepare_balance": {
            "name": "prepare_balance",
            "location": 30,
            "return": [
                "dict[typing.Union[str,tuple[str],dict[typing.Any, str]], Balance]"
            ],
            "arguments": {
                "raw": [
                    "list[str]",
                    "list[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ],
                "month": [
                    "dict[, ]",
                    "str",
                    "Exception",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "balance": {
            "name": "balance",
            "location": 47,
            "return": [],
            "arguments": {
                "request": [],
                "month": []
            }
        },
        "expected": {
            "name": "expected",
            "location": 52,
            "return": [],
            "arguments": {
                "request": [],
                "month": []
            }
        }
    },
    "wallet-master/tests/core/entities/abc/entity_with_balance/test_add_operation.py": {
        "test_success": {
            "name": "test_success",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [],
                "amount": [
                    "str",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "operation_type": [
                    "str",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "created_on": [
                    "str",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "expected": [
                    "str",
                    "set[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_success_with_balance": {
            "name": "test_success_with_balance",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [],
                "amount": [
                    "str",
                    "None"
                ],
                "operation_type": [
                    "str",
                    "None"
                ],
                "created_on": [
                    "str",
                    "None"
                ],
                "balance": [
                    "int",
                    "None",
                    "typing.Sequence[typing.Iterable[typing.Any]]",
                    "typing.Iterable[typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "list[]",
                    "set[str]"
                ]
            }
        }
    },
    "wallet-master/tests/core/entities/abc/entity_with_balance/test_drop_operation.py": {
        "test_success": {
            "name": "test_success",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [],
                "amount": [
                    "int",
                    "str"
                ],
                "operation_type": [
                    "int",
                    "str"
                ],
                "created_on": [
                    "int",
                    "str"
                ],
                "balance": [
                    "int",
                    "None",
                    "collections.abc.AsyncIterator"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]",
                    "set[str]",
                    "bool"
                ]
            }
        }
    },
    "wallet-master/tests/core/entities/abc/entity_with_balance/__init__.py": {},
    "wallet-master/tests/core/services/__init__.py": {},
    "wallet-master/tests/core/services/accounts/test_add.py": {
        "prepare_storage": {
            "name": "prepare_storage",
            "location": 17,
            "return": [],
            "arguments": {
                "fake_storage": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "fake_coroutine": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "payload": {
            "name": "payload",
            "location": 28,
            "return": [
                "AccountPayload"
            ],
            "arguments": {
                "faker": [],
                "user": [
                    "list[int]"
                ]
            }
        },
        "prepare_storage.builder": {
            "name": "builder",
            "location": 18,
            "return": [],
            "arguments": {
                "exists": []
            }
        }
    },
    "wallet-master/tests/core/services/accounts/__init__.py": {},
    "wallet-master/tests/core/services/operations/test_add.py": {
        "prepare_storage": {
            "name": "prepare_storage",
            "location": 19,
            "return": [],
            "arguments": {
                "fake_storage": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "fake_coroutine": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "payload_builder": {
            "name": "payload_builder",
            "location": 34,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "typing.Optional[]"
                ]
            }
        },
        "prepare_storage.builder": {
            "name": "builder",
            "location": 20,
            "return": [],
            "arguments": {
                "account": [],
                "category": []
            }
        },
        "payload_builder.builder": {
            "name": "builder",
            "location": 35,
            "return": [],
            "arguments": {
                "account": [],
                "category": [],
                "created_on": []
            }
        }
    },
    "wallet-master/tests/core/services/operations/__init__.py": {},
    "wallet-master/tests/storage/conftest.py": {
        "owners": {
            "name": "owners",
            "location": 15,
            "return": [
                "dict[, User]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "faker": []
            }
        },
        "owner": {
            "name": "owner",
            "location": 27,
            "return": [],
            "arguments": {
                "request": [],
                "owners": []
            }
        },
        "key": {
            "name": "key",
            "location": 83,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 89,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "expected": {
            "name": "expected",
            "location": 95,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/__init__.py": {},
    "wallet-master/tests/storage/accounts/conftest.py": {
        "repo": {
            "name": "repo",
            "location": 7,
            "return": [
                "AccountDBRepo"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "wallet-master/tests/storage/accounts/__init__.py": {},
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_exists.py": {},
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_fetch.py": {
        "expected": {
            "name": "expected",
            "location": 9,
            "return": [
                "list[Account]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "owners": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_fetch_by_key.py": {
        "expected": {
            "name": "expected",
            "location": 10,
            "return": [
                "Account"
            ],
            "arguments": {
                "request": [],
                "owners": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_fetch_by_name.py": {
        "expected": {
            "name": "expected",
            "location": 10,
            "return": [
                "Account"
            ],
            "arguments": {
                "request": [],
                "owners": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_remove.py": {
        "account": {
            "name": "account",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "str",
                    "None"
                ],
                "owner": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, str]",
                    "typing.Callable[, ]"
                ],
                "accounts": []
            }
        }
    },
    "wallet-master/tests/storage/accounts/accounts_db_repo/test_save.py": {},
    "wallet-master/tests/storage/accounts/accounts_db_repo/__init__.py": {},
    "wallet-master/tests/storage/categories/conftest.py": {
        "repo": {
            "name": "repo",
            "location": 7,
            "return": [
                "CategoryDBRepo"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "wallet-master/tests/storage/categories/__init__.py": {},
    "wallet-master/tests/storage/categories/category_db_repo/test_exists.py": {},
    "wallet-master/tests/storage/categories/category_db_repo/test_fetch.py": {
        "expected": {
            "name": "expected",
            "location": 9,
            "return": [
                "list[Category]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "owners": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "wallet-master/tests/storage/categories/category_db_repo/test_fetch_by_key.py": {
        "expected": {
            "name": "expected",
            "location": 10,
            "return": [
                "Category"
            ],
            "arguments": {
                "request": [],
                "owners": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/categories/category_db_repo/test_fetch_by_name.py": {
        "expected": {
            "name": "expected",
            "location": 10,
            "return": [
                "Category"
            ],
            "arguments": {
                "request": [],
                "owners": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/categories/category_db_repo/test_remove.py": {
        "category": {
            "name": "category",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "owner": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "categories": []
            }
        }
    },
    "wallet-master/tests/storage/categories/category_db_repo/test_save.py": {},
    "wallet-master/tests/storage/categories/category_db_repo/__init__.py": {},
    "wallet-master/tests/storage/operations/conftest.py": {
        "repo": {
            "name": "repo",
            "location": 58,
            "return": [
                "OperationDBRepo"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "wallet-master/tests/storage/operations/__init__.py": {},
    "wallet-master/tests/storage/operations/operations_db_repo/test_fetch.py": {
        "filters": {
            "name": "filters",
            "location": 12,
            "return": [
                "OperationFilters"
            ],
            "arguments": {
                "request": [],
                "owners": []
            }
        },
        "expected": {
            "name": "expected",
            "location": 20,
            "return": [
                "tuple[typing.Union[list[Operation],dict[, OperationDependencies]]]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "owners": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "wallet-master/tests/storage/operations/operations_db_repo/test_fetch_by_key.py": {
        "expected": {
            "name": "expected",
            "location": 13,
            "return": [
                "Operation"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "owner": [
                    "int"
                ]
            }
        }
    },
    "wallet-master/tests/storage/operations/operations_db_repo/test_save.py": {
        "operation": {
            "name": "operation",
            "location": 12,
            "return": [
                "Operation"
            ],
            "arguments": {
                "request": [],
                "owner": [],
                "accounts": [
                    "dict[, ]"
                ],
                "categories": [
                    "dict[, ]"
                ]
            }
        }
    },
    "wallet-master/tests/storage/operations/operations_db_repo/__init__.py": {},
    "wallet-master/tests/web/__init__.py": {},
    "wallet-master/tests/web/handlers/__init__.py": {},
    "wallet-master/tests/web/handlers/accounts/test_get_accounts_view.py": {},
    "wallet-master/tests/web/handlers/accounts/__init__.py": {},
    "wallet-master/tests/web/schemas/__init__.py": {},
    "wallet-master/tests/web/schemas/operations_filter_schema/test_load.py": {
        "test_success": {
            "name": "test_success",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "query": [
                    "list[tuple[typing.Union[bool,typing.Any]]]"
                ],
                "expected": [
                    "list[str]",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "None"
                ]
            }
        }
    },
    "wallet-master/tests/web/schemas/operations_filter_schema/__init__.py": {}
}
{
    "wavee-master/manage.py": {},
    "wavee-master/config/urls.py": {},
    "wavee-master/config/wsgi.py": {},
    "wavee-master/config/__init__.py": {},
    "wavee-master/config/settings/base.py": {},
    "wavee-master/config/settings/local.py": {},
    "wavee-master/config/settings/production.py": {},
    "wavee-master/config/settings/test.py": {},
    "wavee-master/config/settings/__init__.py": {},
    "wavee-master/wavee/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory"
            ],
            "arguments": {}
        }
    },
    "wavee-master/wavee/__init__.py": {},
    "wavee-master/wavee/contrib/__init__.py": {},
    "wavee-master/wavee/contrib/sites/__init__.py": {},
    "wavee-master/wavee/contrib/sites/migrations/0001_initial.py": {},
    "wavee-master/wavee/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "wavee-master/wavee/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "wavee-master/wavee/contrib/sites/migrations/__init__.py": {},
    "wavee-master/wavee/images/admin.py": {},
    "wavee-master/wavee/images/apps.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.natural_time": {
            "name": "natural_time",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.natural_time": {
            "name": "natural_time",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/images/serializers.py": {
        "ImageSerializer.get_is_liked": {
            "name": "get_is_liked",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "wavee-master/wavee/images/tests.py": {},
    "wavee-master/wavee/images/urls.py": {},
    "wavee-master/wavee/images/views.py": {
        "Images.get": {
            "name": "get",
            "location": 12,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "list[]"
                ],
                "format": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "LikeImage.get": {
            "name": "get",
            "location": 60,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]"
                ],
                "image_id": [
                    "int",
                    "str",
                    "None"
                ],
                "format": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 73,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "int"
                ],
                "image_id": [
                    "int",
                    "str",
                    "None"
                ],
                "format": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "UnLikeImage.delete": {
            "name": "delete",
            "location": 106,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "str"
                ],
                "format": [
                    "None",
                    "str"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 127,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "image_id": [
                    "int",
                    "str",
                    "None"
                ],
                "format": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 154,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "comment_id": [
                    "bool",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 169,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "format": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "ModerateComments.delete": {
            "name": "delete",
            "location": 189,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "image_id": [
                    "bool",
                    "list[S]",
                    "dict[str, typing.Any]"
                ],
                "comment_id": [
                    "bool",
                    "list[S]",
                    "dict[str, typing.Any]"
                ],
                "format": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ImageDetail.find_own_image": {
            "name": "find_own_image",
            "location": 207,
            "return": [
                "int",
                "list[]",
                "str",
                "bytes",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "int",
                    "str"
                ],
                "user": [
                    "int",
                    "str"
                ]
            }
        },
        "ImageDetail.get": {
            "name": "get",
            "location": 214,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "image_id": [
                    "str",
                    "int"
                ],
                "format": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ImageDetail.put": {
            "name": "put",
            "location": 227,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "None"
                ],
                "image_id": [
                    "str",
                    "bool",
                    "bytes",
                    "None"
                ],
                "format": [
                    "None",
                    "str"
                ]
            }
        },
        "ImageDetail.delete": {
            "name": "delete",
            "location": 250,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "str",
                    "None",
                    "int"
                ],
                "format": [
                    "None",
                    "str"
                ]
            }
        },
        "Images.get.post": {
            "name": "post",
            "location": 42,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "int"
                ],
                "format": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "wavee-master/wavee/images/__init__.py": {},
    "wavee-master/wavee/images/migrations/0001_initial.py": {},
    "wavee-master/wavee/images/migrations/__init__.py": {},
    "wavee-master/wavee/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "user": [],
                "form": []
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "sociallogin": [
                    "dict[, ]"
                ]
            }
        }
    },
    "wavee-master/wavee/users/admin.py": {},
    "wavee-master/wavee/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/users/models.py": {
        "__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "c": {
            "name": "c",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/users/serializers.py": {
        "ListUserSerializer.get_following": {
            "name": "get_following",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SignUpSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 58,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpSerializer.save": {
            "name": "save",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "wavee-master/wavee/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "typing.Iterable[str]"
                ],
                "user": []
            }
        }
    },
    "wavee-master/wavee/users/urls.py": {},
    "wavee-master/wavee/users/views.py": {
        "ExploreUsers.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "format": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 22,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "None",
                    "int",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 42,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "None",
                    "int",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 60,
            "return": [
                "dict[str, str]",
                "str",
                "int",
                "list[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 68,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "username": [
                    "bool",
                    "str",
                    "None"
                ],
                "format": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 80,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "None",
                    "int"
                ],
                "format": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 111,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "username": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]"
                ],
                "format": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 127,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "username": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]"
                ],
                "format": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 143,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 161,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes"
                ],
                "username": [
                    "str",
                    "int"
                ],
                "format": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "wavee-master/wavee/users/__init__.py": {},
    "wavee-master/wavee/users/migrations/0001_initial.py": {},
    "wavee-master/wavee/users/migrations/0002_auto_20181010_2150.py": {},
    "wavee-master/wavee/users/migrations/__init__.py": {},
    "wavee-master/wavee/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "typing.Callable[typing.Any, T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "typing.Callable[typing.Any, T]"
                ]
            }
        }
    },
    "wavee-master/wavee/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wavee-master/wavee/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        }
    },
    "wavee-master/wavee/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "wavee-master/wavee/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "request_factory": []
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "request_factory": []
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ],
                "request_factory": []
            }
        }
    },
    "wavee-master/wavee/users/tests/__init__.py": {}
}
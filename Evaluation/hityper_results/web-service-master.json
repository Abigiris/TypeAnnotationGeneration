{
    "web-service-master/python/asyncio/test.py": {
        "test_tail_only_removes_first_item": {
            "name": "test_tail_only_removes_first_item",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str"
                ]
            }
        }
    },
    "web-service-master/python/asyncio/src/app.py": {
        "_submit_job": {
            "name": "_submit_job",
            "location": 59,
            "return": [
                "Job"
            ],
            "arguments": {
                "job_id": [
                    "int",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "urls": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-service-master/python/asyncio/src/helpers.py": {
        "is_valid_url": {
            "name": "is_valid_url",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "tail": {
            "name": "tail",
            "location": 42,
            "return": [],
            "arguments": {
                "iterable": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 48,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "predicate": [
                    "typing.Callable[T, bool]",
                    "int",
                    "dict[, ]"
                ],
                "iterable": [
                    "int",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        }
    },
    "web-service-master/python/asyncio/src/my_types.py": {},
    "web-service-master/python/asyncio/src/redis_connection.py": {},
    "web-service-master/python/threadpools-in-memory/src/app.py": {
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client_id": [
                    "str",
                    "int",
                    "None"
                ],
                "num_threads": [
                    "str",
                    "int",
                    "None"
                ],
                "conc_reqs": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Images.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_handler": [
                    "bool"
                ]
            }
        },
        "Images.get": {
            "name": "get",
            "location": 22,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jobs.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_handler": [
                    "bool"
                ]
            }
        },
        "Jobs.get": {
            "name": "get",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Jobs.post": {
            "name": "post",
            "location": 51,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/conc_utils.py": {
        "submit_to_executor": {
            "name": "submit_to_executor",
            "location": 8,
            "return": [],
            "arguments": {
                "executor": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "BaseException"
                ],
                "func": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "BaseException"
                ],
                "args": []
            }
        },
        "get_future_result": {
            "name": "get_future_result",
            "location": 29,
            "return": [
                "Success"
            ],
            "arguments": {
                "future": [],
                "to_do": [
                    "str"
                ]
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/http_utils.py": {
        "make_request": {
            "name": "make_request",
            "location": 7,
            "return": [],
            "arguments": {
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "download_image": {
            "name": "download_image",
            "location": 14,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/job_handler.py": {
        "JobHandler.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ],
                "num_threads": [
                    "int",
                    "None",
                    "typing.Sequence[int]"
                ],
                "conc_reqs": [
                    "int"
                ]
            }
        },
        "JobHandler.reset": {
            "name": "reset",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobHandler._make_job": {
            "name": "_make_job",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Union[str,None,dict[typing.Text, list[str]]]]"
            ],
            "arguments": {
                "urls": [
                    "str"
                ]
            }
        },
        "JobHandler.submit": {
            "name": "submit",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "urls": [
                    "str",
                    "float",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "JobHandler._process_concurrently": {
            "name": "_process_concurrently",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "job": [
                    "str"
                ]
            }
        },
        "JobHandler._handle_futures": {
            "name": "_handle_futures",
            "location": 86,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "list[dict[, ]]"
                ],
                "to_do": [
                    "str",
                    "None",
                    "typing.BinaryIO"
                ]
            }
        },
        "JobHandler._process_image_url": {
            "name": "_process_image_url",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "JobHandler._upload_to_imgur": {
            "name": "_upload_to_imgur",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "image_as_b64": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/__init__.py": {},
    "web-service-master/python/threadpools-in-memory/src/tests/mock_server.py": {
        "mock_server": {
            "name": "mock_server",
            "location": 32,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "list[tuple[typing.Union[str,...]]]",
                    "dict[, ]",
                    "list[]",
                    "bool"
                ],
                "json": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "bytes"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "MockResponse.json": {
            "name": "json",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockServerMixin.setup_class": {
            "name": "setup_class",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.MutableMapping",
                    "str",
                    "dict[typing.Any, int]"
                ]
            }
        },
        "MockServerMixin.teardown_class": {
            "name": "teardown_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "Exception"
                ]
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/tests/test_job_handler.py": {
        "TestJobHandler.test_submit": {
            "name": "test_submit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobHandler.test_process_concurrently": {
            "name": "test_process_concurrently",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobHandler.test_handle_futures": {
            "name": "test_handle_futures",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobHandler.test_process_image_url": {
            "name": "test_process_image_url",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobHandler.test_upload_to_imgur": {
            "name": "test_upload_to_imgur",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-service-master/python/threadpools-in-memory/src/tests/test_utils.py": {
        "TestHttp.test_make_request": {
            "name": "test_make_request",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttp.test_download_image": {
            "name": "test_download_image",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConc.func": {
            "name": "func",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "TestConc.test_submit_to_executor": {
            "name": "test_submit_to_executor",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConc.test_get_future_result": {
            "name": "test_get_future_result",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
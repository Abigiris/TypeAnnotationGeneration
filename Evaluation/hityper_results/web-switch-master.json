{
    "web-switch-master/setup.py": {},
    "web-switch-master/tests/client_test.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 41,
            "return": [],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_server_fixture.func": {
            "name": "func",
            "location": 42,
            "return": [
                "ClientTestingServer"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/common.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "filter_records": {
            "name": "filter_records",
            "location": 47,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "records": [
                    "str"
                ],
                "name_pattern": [
                    "None",
                    "str"
                ],
                "msg_pattern": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "find_free_port": {
            "name": "find_free_port",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "free_port": {
            "name": "free_port",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "get_client": {
            "name": "get_client",
            "location": 82,
            "return": [],
            "arguments": {
                "free_port": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ChannelServerBase.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "bool",
                    "str"
                ]
            }
        },
        "ChannelServerBase.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "ChannelServerBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServerBase.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "get_client.func": {
            "name": "func",
            "location": 83,
            "return": [
                "Client"
            ],
            "arguments": {}
        },
        "TimeBox.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "tuple[typing.Union[list[],list[],list[]]]",
                    "bool",
                    "dict[, ]"
                ],
                "slack": [
                    "float"
                ]
            }
        },
        "TimeBox.timelimit": {
            "name": "timelimit",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.elapsed": {
            "name": "elapsed",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.within_timelimit": {
            "name": "within_timelimit",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.__enter__": {
            "name": "__enter__",
            "location": 109,
            "return": [
                "TimeBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.__exit__": {
            "name": "__exit__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        }
    },
    "web-switch-master/tests/conftest.py": {},
    "web-switch-master/tests/server_test.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 51,
            "return": [],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "UniqueError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTestingServer.action_raise_unique_error": {
            "name": "action_raise_unique_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool"
                ]
            }
        },
        "ServerTestingServer.action_nonasync_return": {
            "name": "action_nonasync_return",
            "location": 41,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_server_fixture.func": {
            "name": "func",
            "location": 52,
            "return": [
                "ServerTestingServer"
            ],
            "arguments": {}
        },
        "test_response_dispatch_do_cancel.thread_main": {
            "name": "thread_main",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/util_test.py": {
        "test_message_queue": {
            "name": "test_message_queue",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_map": {
            "name": "test_index_map",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/__init__.py": {},
    "web-switch-master/webswitch/channel_server.py": {
        "cli_main": {
            "name": "cli_main",
            "location": 486,
            "return": [],
            "arguments": {}
        },
        "ChannelServerError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ChannelServerActionError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ChannelServerResponseError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "orig_exc": []
            }
        },
        "ChannelServerResponseError.set_guid": {
            "name": "set_guid",
            "location": 55,
            "return": [],
            "arguments": {
                "exception": [],
                "response": []
            }
        },
        "ChannelClient.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "channel_server": [],
                "conn": []
            }
        },
        "ChannelClient.get_room_key": {
            "name": "get_room_key",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelClient.set_room_key": {
            "name": "set_room_key",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChannelClient.try_send": {
            "name": "try_send",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response_id": []
            }
        },
        "ChannelClient.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelClient.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conversation.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "original": []
            }
        },
        "Conversation.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "max_queue_size": []
            }
        },
        "ChannelServer.get_logger": {
            "name": "get_logger",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.get_next_client_id": {
            "name": "get_next_client_id",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer._add_connection": {
            "name": "_add_connection",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "connection": [],
                "room": [],
                "other_data": []
            }
        },
        "ChannelServer._remove_connection": {
            "name": "_remove_connection",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "ChannelServer._get_client": {
            "name": "_get_client",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "ChannelServer.argument_hook": {
            "name": "argument_hook",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "source": [],
                "action": []
            }
        },
        "ChannelServer.action_complete_handler": {
            "name": "action_complete_handler",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "action_name": [],
                "result": [],
                "response_id": []
            }
        },
        "ChannelServer.on_start": {
            "name": "on_start",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.on_stop": {
            "name": "on_stop",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.stop_serve": {
            "name": "stop_serve",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "ChannelServer.on_new": {
            "name": "on_new",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "path": []
            }
        },
        "ChannelServer.on_remove": {
            "name": "on_remove",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "ChannelServer.on_message": {
            "name": "on_message",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "message": []
            }
        },
        "ChannelServer.action_whoami": {
            "name": "action_whoami",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "ChannelServer.action_enum_clients": {
            "name": "action_enum_clients",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "web-switch-master/webswitch/client.py": {
        "TimestampedList.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__delslice__": {
            "name": "__delslice__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TimestampedList.__delitem__": {
            "name": "__delitem__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TimestampedList.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.append": {
            "name": "append",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TimestampedList.remove_old": {
            "name": "remove_old",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "max_age": []
            }
        },
        "TimestampedList.get": {
            "name": "get",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.oldest_ts": {
            "name": "oldest_ts",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__getitem__": {
            "name": "__getitem__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TimestampedList.__len__": {
            "name": "__len__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__bool__": {
            "name": "__bool__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.get_list_copy": {
            "name": "get_list_copy",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageQueues.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "max_count": [],
                "max_message_age": []
            }
        },
        "MessageQueues.count": {
            "name": "count",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageQueues._remove_oldest_by_count": {
            "name": "_remove_oldest_by_count",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "MessageQueues.remove_oldest": {
            "name": "remove_oldest",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "max_age": []
            }
        },
        "MessageQueues.add": {
            "name": "add",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "guid": [],
                "message": []
            }
        },
        "MessageQueues.get": {
            "name": "get",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "guid": []
            }
        },
        "MessageQueues.get_messages": {
            "name": "get_messages",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "guid": []
            }
        },
        "MessageQueues.get_guids": {
            "name": "get_guids",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "ws_url": [],
                "max_queued_messages": []
            }
        },
        "Client.id": {
            "name": "id",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.client_id": {
            "name": "client_id",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.url": {
            "name": "url",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._extract_guid": {
            "name": "_extract_guid",
            "location": 228,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "Client.get_message": {
            "name": "get_message",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "guid": []
            }
        },
        "Client.convo": {
            "name": "convo",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Convo.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "client": []
            }
        },
        "Convo.id": {
            "name": "id",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Convo.guid": {
            "name": "guid",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Convo.action": {
            "name": "action",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Convo.cancel_expects": {
            "name": "cancel_expects",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnrequitedException.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "ResponseException.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ResponseException.__repr__": {
            "name": "__repr__",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseException.__str__": {
            "name": "__str__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/dispatch.py": {
        "add_action": {
            "name": "add_action",
            "location": 812,
            "return": [],
            "arguments": {
                "action_name": [
                    "None",
                    "bool",
                    "str"
                ],
                "exclusive_async": [
                    "bool"
                ],
                "params": [
                    "None",
                    "bool",
                    "str"
                ],
                "intrinsic_params": [
                    "tuple[]"
                ],
                "timeout": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "ParameterSet.all": {
            "name": "all",
            "location": 34,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveAction.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "float"
                ],
                "provider": [
                    "None",
                    "int"
                ],
                "action_future": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ActiveAction.get_ad_future": {
            "name": "get_ad_future",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveAction.cancel_all": {
            "name": "cancel_all",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "common_params": [
                    "ParameterSet"
                ],
                "exception_handler": [
                    "None",
                    "str",
                    "bool"
                ],
                "complete_handler": [
                    "None",
                    "str",
                    "bool"
                ],
                "argument_hook": [
                    "None",
                    "bool",
                    "list[]"
                ],
                "common_async_params": [
                    "ParameterSet"
                ]
            }
        },
        "ResponseDispatcher.__repr__": {
            "name": "__repr__",
            "location": 205,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.start": {
            "name": "start",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.stop": {
            "name": "stop",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "ResponseDispatcher.cancel_action_by_source": {
            "name": "cancel_action_by_source",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ResponseDispatcher._build_actions": {
            "name": "_build_actions",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher._add_active_action": {
            "name": "_add_active_action",
            "location": 379,
            "return": [
                "ActiveAction"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "action": [
                    "dict[str, str]",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Mapping"
                ],
                "provider": [
                    "dict[str, str]",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "ResponseDispatcher.remove_active_by_action": {
            "name": "remove_active_by_action",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "None",
                    "bool"
                ],
                "guid": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.remove_active_action": {
            "name": "remove_active_action",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active_action": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ResponseDispatcher._try_get_await_dispatch": {
            "name": "_try_get_await_dispatch",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "guid": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ResponseDispatcher._validate_param_set": {
            "name": "_validate_param_set",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "tuple[]"
                ],
                "param_set": [
                    "dict[str, str]",
                    "bool",
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str"
                ]
            }
        },
        "ResponseDispatcher._verify_exposed_arguments": {
            "name": "_verify_exposed_arguments",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "action": [
                    "typing.Callable[, ]"
                ],
                "args": []
            }
        },
        "ResponseDispatcher._verify_full_arguments": {
            "name": "_verify_full_arguments",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Iterator"
                ],
                "action_name": [
                    "str"
                ],
                "params": [
                    "dict[, ]",
                    "dict[int, list[int]]",
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        },
        "ResponseDispatcher.await_dispatch": {
            "name": "await_dispatch",
            "location": 488,
            "return": [
                "str",
                "list[str]",
                "int",
                "dict[str, list[typing.Any]]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "self": [],
                "await_dispatch": [
                    "str",
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "params": [
                    "str",
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "timeout": [
                    "None",
                    "str",
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "ResponseDispatcher._ensure_exclusive": {
            "name": "_ensure_exclusive",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "None",
                    "int"
                ],
                "source": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.dispatch": {
            "name": "dispatch",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "str",
                    "None"
                ],
                "action_name": [
                    "bool",
                    "str",
                    "None"
                ],
                "args": [],
                "response_id": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "add_action.decorator": {
            "name": "decorator",
            "location": 833,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "func": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "func_params": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "params": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "intrinsic_params": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "is_coro": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "has_kwargs": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "exclusive_async": [
                    "float",
                    "str",
                    "int",
                    "None"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Action.get_exposed_params": {
            "name": "get_exposed_params",
            "location": 927,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.clone": {
            "name": "clone",
            "location": 930,
            "return": [
                "Action"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.get_func_params": {
            "name": "get_func_params",
            "location": 933,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 936,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__str__": {
            "name": "__str__",
            "location": 939,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAwaitDispatch.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAwaitDispatch.__call__": {
            "name": "__call__",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "params": [
                    "None",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "timeout": [
                    "None",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AwaitDispatch.__init__": {
            "name": "__init__",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "None",
                    "typing.Sequence[int]",
                    "int"
                ],
                "source": [
                    "str",
                    "bool",
                    "None"
                ],
                "action_name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "default_params": [
                    "str",
                    "None",
                    "typing.Sequence[int]",
                    "int"
                ],
                "guid": [
                    "str",
                    "None",
                    "typing.Sequence[int]",
                    "int"
                ]
            }
        },
        "AwaitDispatch.mark_removed": {
            "name": "mark_removed",
            "location": 978,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.remove_and_cancel_timeout": {
            "name": "remove_and_cancel_timeout",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.cancel_timeout": {
            "name": "cancel_timeout",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.set_timeout_future": {
            "name": "set_timeout_future",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "str",
                    "int",
                    "list[list[int]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AwaitDispatch.set": {
            "name": "set",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "bool",
                    "float"
                ],
                "params": [
                    "bool",
                    "float"
                ]
            }
        },
        "AwaitDispatch.get_current_future": {
            "name": "get_current_future",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.get_current_params": {
            "name": "get_current_params",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.__call__": {
            "name": "__call__",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "params": [
                    "None",
                    "float",
                    "bool",
                    "dict[, ]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "timeout": [
                    "None",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AwaitDispatch.__repr__": {
            "name": "__repr__",
            "location": 1013,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.__str__": {
            "name": "__str__",
            "location": 1016,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 1019,
            "return": [
                "AwaitDispatch"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchError.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchError.__str__": {
            "name": "__str__",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DispatchArgumentError.__init__": {
            "name": "__init__",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "DispatchMissingArgumentError.__init__": {
            "name": "__init__",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.cancel_action_by_source.callback": {
            "name": "callback",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.await_dispatch.create_timeout_callback": {
            "name": "create_timeout_callback",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.done_callback": {
            "name": "done_callback",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "event_manager": [],
                "done_future": []
            }
        },
        "ResponseDispatcher.dispatch.remove_await_callback": {
            "name": "remove_await_callback",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.remove_active_callback": {
            "name": "remove_active_callback",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.set_future_result_callback": {
            "name": "set_future_result_callback",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher._ensure_exclusive.cancel_callback": {
            "name": "cancel_callback",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/webswitch/event_loop.py": {
        "EventLoopManager.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_async_func": [
                    "None",
                    "typing.Type",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "bool"
                ],
                "shutdown_async_func": [
                    "None",
                    "typing.Type",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "bool"
                ],
                "loop": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[]"
                ],
                "executor": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        },
        "EventLoopManager.run": {
            "name": "run",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.join": {
            "name": "join",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EventLoopManager.wait_result": {
            "name": "wait_result",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.shutdown_loop": {
            "name": "shutdown_loop",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.run_coroutine_threadsafe": {
            "name": "run_coroutine_threadsafe",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "coro": [
                    "str",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "EventLoopManager.call_soon_threadsafe": {
            "name": "call_soon_threadsafe",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "web-switch-master/webswitch/index_map.py": {
        "IndexMap.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.add": {
            "name": "add",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[T]",
                    "int",
                    "str"
                ]
            }
        },
        "IndexMap.__len__": {
            "name": "__len__",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.__bool__": {
            "name": "__bool__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.remove": {
            "name": "remove",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[T]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "IndexMap.lookup": {
            "name": "lookup",
            "location": 58,
            "return": [
                "set[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.lookup_one": {
            "name": "lookup_one",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.try_lookup_one": {
            "name": "try_lookup_one",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/logger.py": {},
    "web-switch-master/webswitch/message.py": {
        "MessageJSONEncoder.default": {
            "name": "default",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "success": [
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "typing.Callable[, ]"
                ],
                "error": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bool",
                    "float"
                ],
                "error_data": [
                    "None",
                    "dict[, ]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "Message.load": {
            "name": "load",
            "location": 45,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Message.verify_reserved_use": {
            "name": "verify_reserved_use",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Message.error_from_exc": {
            "name": "error_from_exc",
            "location": 65,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "exc": [
                    "BaseException",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Message._render_tags": {
            "name": "_render_tags",
            "location": 86,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.extend": {
            "name": "extend",
            "location": 104,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.clone": {
            "name": "clone",
            "location": 108,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.json": {
            "name": "json",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/__init__.py": {},
    "web-switch-master/webswitch/router/connection.py": {
        "ConnectionList.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.generate_id": {
            "name": "generate_id",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.add": {
            "name": "add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "list[str]",
                    "list[]",
                    "bytes",
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "ConnectionList.remove": {
            "name": "remove",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ConnectionList.__bool__": {
            "name": "__bool__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.copy": {
            "name": "copy",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.close": {
            "name": "close",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn_list": [],
                "event_loop": [
                    "collections.abc.Coroutine",
                    "float",
                    "None"
                ],
                "ws": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Connection.close_issued": {
            "name": "close_issued",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.copy_to_subclass": {
            "name": "copy_to_subclass",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subclassed_object": [
                    "str",
                    "bool"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "Connection.close.callback": {
            "name": "callback",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/webswitch/router/errors.py": {
        "RouterError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_types": [
                    "bool",
                    "typing.Type"
                ],
                "message": [
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.Type",
                    "typing.Sequence[]"
                ]
            }
        },
        "RouterError.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterResponseError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "RouterConnectionError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "RouterServerError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "web-switch-master/webswitch/router/router.py": {
        "_route_thread": {
            "name": "_route_thread",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message_callback": [
                    "str",
                    "bool"
                ],
                "conn_list": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[]"
                ],
                "receive_queue": [],
                "logger": []
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "None"
                ],
                "port": [
                    "int",
                    "None"
                ],
                "max_queue_size": [
                    "int"
                ]
            }
        },
        "Router.get_logger": {
            "name": "get_logger",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Router.serve": {
            "name": "serve",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.stop_serve": {
            "name": "stop_serve",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._serve_forever": {
            "name": "_serve_forever",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._is_closed": {
            "name": "_is_closed",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Router._set_closed": {
            "name": "_set_closed",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._handle_message": {
            "name": "_handle_message",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "dict[, ]",
                    "dict[str, list[typing.Any]]"
                ],
                "data": []
            }
        },
        "Router.try_send_messages": {
            "name": "try_send_messages",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipients": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Router.on_stop": {
            "name": "on_stop",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.on_start": {
            "name": "on_start",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.on_new": {
            "name": "on_new",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "bool",
                    "str"
                ],
                "path": [
                    "bool",
                    "str"
                ]
            }
        },
        "Router.on_message": {
            "name": "on_message",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Router.on_remove": {
            "name": "on_remove",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "web-switch-master/webswitch/router/__init__.py": {}
}
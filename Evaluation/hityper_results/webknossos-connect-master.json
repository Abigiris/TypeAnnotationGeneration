{
    "webknossos-connect-master/build.py": {
        "build": {
            "name": "build",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_kwargs": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "webknossos-connect-master/benchmarks/decode_jpg.py": {
        "timeit": {
            "name": "timeit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "webknossos-connect-master/stubs/compressed_segmentation.py": {
        "decompress": {
            "name": "decompress",
            "location": 5,
            "return": [],
            "arguments": {
                "encoded": [],
                "volume_size": [],
                "dtype": [],
                "block_size": [],
                "order": []
            }
        }
    },
    "webknossos-connect-master/stubs/gcloud/__init__.py": {},
    "webknossos-connect-master/stubs/gcloud/aio/auth.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "service_file": [],
                "session": [],
                "scopes": []
            }
        }
    },
    "webknossos-connect-master/stubs/gcloud/aio/__init__.py": {},
    "webknossos-connect-master/wkconnect/repository.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.add_dataset": {
            "name": "add_dataset",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "dataset": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Repository.get_dataset": {
            "name": "get_dataset",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "organization_name": [
                    "str",
                    "None"
                ],
                "dataset_name": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/__init__.py": {},
    "webknossos-connect-master/wkconnect/__main__.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomErrorHandler.default": {
            "name": "default",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "exception": []
            }
        },
        "setup.instanciate_backend": {
            "name": "instanciate_backend",
            "location": 143,
            "return": [],
            "arguments": {
                "backend_class": []
            }
        },
        "add_regular_interaction": {
            "name": "add_regular_interaction",
            "location": 198,
            "return": [],
            "arguments": {
                "action_name": [],
                "fn": []
            }
        },
        "Server.load_persisted_datasets.expandvars_hook": {
            "name": "expandvars_hook",
            "location": 67,
            "return": [],
            "arguments": {
                "dict": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/backend.py": {
        "DatasetInfo.to_webknossos": {
            "name": "to_webknossos",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.name": {
            "name": "name",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Backend.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "http_client": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "Backend.clear_dataset_cache": {
            "name": "clear_dataset_cache",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "MeshfileInfo.as_json": {
            "name": "as_json",
            "location": 113,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/__init__.py": {},
    "webknossos-connect-master/wkconnect/backends/boss/backend.py": {
        "Boss.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "http_client": []
            }
        },
        "Boss.clear_dataset_cache": {
            "name": "clear_dataset_cache",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/boss/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_client": [
                    "typing.Callable[, ]"
                ],
                "tokens": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/boss/models.py": {
        "Channel.__post_init__": {
            "name": "__post_init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.wk_datatype": {
            "name": "wk_datatype",
            "location": 44,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.webknossos_layers": {
            "name": "webknossos_layers",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "wk_bounding_box": [
                    "str",
                    "list[app.models.Question]"
                ]
            }
        },
        "Dataset.to_webknossos": {
            "name": "to_webknossos",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/boss/token_repository.py": {
        "TokenKey.__post_init__": {
            "name": "__post_init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenRepository.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_client": []
            }
        },
        "TokenRepository._openid_url": {
            "name": "_openid_url",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/boss/__init__.py": {},
    "webknossos-connect-master/wkconnect/backends/neuroglancer/backend.py": {
        "select_lod": {
            "name": "select_lod",
            "location": 49,
            "return": [],
            "arguments": {
                "meshfile": [
                    "list[int]",
                    "list[str]",
                    "list[]",
                    "int",
                    "typing.Sequence[T]"
                ]
            }
        },
        "Neuroglancer.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "http_client": [
                    "str"
                ]
            }
        },
        "Neuroglancer.create_token": {
            "name": "create_token",
            "location": 62,
            "return": [
                "None",
                "Token"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Neuroglancer.__decode_raw": {
            "name": "__decode_raw",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "buffer": [
                    "str",
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "data_type": [
                    "str",
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "chunk_size": [
                    "str",
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "_": [
                    "None",
                    "bool",
                    "str",
                    "list[]",
                    "typing.Any"
                ]
            }
        },
        "Neuroglancer.__decode_jpeg": {
            "name": "__decode_jpeg",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Any"
                ],
                "data_type": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "chunk_size": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "_": [
                    "None",
                    "bool",
                    "str",
                    "list[]",
                    "typing.Any"
                ]
            }
        },
        "Neuroglancer.__decode_compressed_segmentation": {
            "name": "__decode_compressed_segmentation",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "float"
                ],
                "data_type": [
                    "int",
                    "float"
                ],
                "chunk_size": [],
                "block_size": [
                    "int",
                    "list[int]",
                    "None",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Neuroglancer.__chunks": {
            "name": "__chunks",
            "location": 220,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "requested": [],
                "ds_frame": [
                    "int",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.MutableMapping"
                ],
                "wk_chunk_size": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "Neuroglancer.__cutout": {
            "name": "__cutout",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "chunks": [],
                "box": []
            }
        },
        "Neuroglancer.clear_dataset_cache": {
            "name": "clear_dataset_cache",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/neuroglancer/meshes.py": {
        "Meshfile.fragment_offset_and_shape": {
            "name": "fragment_offset_and_shape",
            "location": 34,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "lod": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fragment": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Meshfile.decode_data": {
            "name": "decode_data",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": [
                    "bool",
                    "str",
                    "list[float]"
                ],
                "buf": [
                    "str",
                    "int",
                    "typing.Generator[]"
                ]
            }
        },
        "MeshInfo.parse": {
            "name": "parse",
            "location": 76,
            "return": [
                "MeshInfo"
            ],
            "arguments": {
                "info_json": []
            }
        },
        "MeshInfo.transform": {
            "name": "transform",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeshInfo.parse_meshfile": {
            "name": "parse_meshfile",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "bytearray"
                ],
                "byte_offset": [
                    "int"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/neuroglancer/mmh3.py": {
        "_xencode": {
            "name": "_xencode",
            "location": 18,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "hash128": {
            "name": "hash128",
            "location": 28,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "hash64": {
            "name": "hash64",
            "location": 219,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "key": [
                    "typing.Hashable",
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "hash128.hash128_x86": {
            "name": "hash128_x86",
            "location": 31,
            "return": [],
            "arguments": {
                "key": [],
                "seed": []
            }
        },
        "hash128.hash128_x86.fmix": {
            "name": "fmix",
            "location": 34,
            "return": [],
            "arguments": {
                "h": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/neuroglancer/models.py": {
        "Scale.__post_init__": {
            "name": "__post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scale.box": {
            "name": "box",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scale.bounding_box": {
            "name": "bounding_box",
            "location": 35,
            "return": [
                "BoundingBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scale.mag1_bounding_box": {
            "name": "mag1_bounding_box",
            "location": 38,
            "return": [
                "BoundingBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.__post_init__": {
            "name": "__post_init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.wk_data_type": {
            "name": "wk_data_type",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer.to_webknossos": {
            "name": "to_webknossos",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Dataset.to_webknossos": {
            "name": "to_webknossos",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.fix_scales": {
            "name": "fix_scales",
            "location": 97,
            "return": [
                "tuple[typing.Union[dict[tuple[typing.Union[str,set[str]]], typing.Union[str,set[str],typing.MutableMapping,dict[, ]]],list[]]]"
            ],
            "arguments": {
                "layers": [
                    "dict[str, set[str]]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/neuroglancer/sharding.py": {
        "compressed_morton_code": {
            "name": "compressed_morton_code",
            "location": 12,
            "return": [],
            "arguments": {
                "pos": [],
                "grid_size": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 43,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "compute_minishard_mask": {
            "name": "compute_minishard_mask",
            "location": 47,
            "return": [],
            "arguments": {
                "minishard_bits": []
            }
        },
        "compute_shard_mask": {
            "name": "compute_shard_mask",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "shard_bits": [],
                "minishard_bits": []
            }
        },
        "ShardingInfo.__post_init__": {
            "name": "__post_init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardingInfo.parse": {
            "name": "parse",
            "location": 105,
            "return": [
                "ShardingInfo"
            ],
            "arguments": {
                "info_json": [],
                "dataset_size": [
                    "None"
                ],
                "chunk_size": [
                    "None"
                ]
            }
        },
        "ShardingInfo.get_chunk_key": {
            "name": "get_chunk_key",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "ShardingInfo.format_shard_for_url": {
            "name": "format_shard_for_url",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "loc": []
            }
        },
        "ShardingInfo.hash_chunk_id": {
            "name": "hash_chunk_id",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_id": []
            }
        },
        "ShardingInfo.get_minishard_info": {
            "name": "get_minishard_info",
            "location": 146,
            "return": [
                "MinishardInfo"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ShardingInfo.get_shard_index_range": {
            "name": "get_shard_index_range",
            "location": 155,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardingInfo.parse_shard_index": {
            "name": "parse_shard_index",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "ShardingInfo.get_minishard_index_range": {
            "name": "get_minishard_index_range",
            "location": 169,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "minishard_number": [],
                "shard_index": []
            }
        },
        "ShardingInfo.parse_minishard_index": {
            "name": "parse_minishard_index",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "ShardingInfo.get_chunk_range": {
            "name": "get_chunk_range",
            "location": 190,
            "return": [
                "None",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "chunk_id": [],
                "minishard_index": []
            }
        },
        "ShardingInfo.parse_chunk": {
            "name": "parse_chunk",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "buf": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/neuroglancer/__init__.py": {},
    "webknossos-connect-master/wkconnect/backends/tiff/backend.py": {
        "Tiff.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, str]"
                ],
                "http_client": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Tiff.clear_dataset_cache": {
            "name": "clear_dataset_cache",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract_dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tiff.path": {
            "name": "path",
            "location": 54,
            "return": [
                "Path"
            ],
            "arguments": {
                "dataset_info": [
                    "str"
                ],
                "organization_name": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]"
                ],
                "dataset_name": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/tiff/models.py": {
        "Dataset.to_webknossos": {
            "name": "to_webknossos",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.layers": {
            "name": "layers",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.layer_to_webknossos": {
            "name": "layer_to_webknossos",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str"
                ]
            }
        },
        "Dataset.read_data": {
            "name": "read_data",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "bool"
                ],
                "mag": [],
                "wk_offset": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "shape": [
                    "str",
                    "float",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Dataset.layer_filepath": {
            "name": "layer_filepath",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str"
                ]
            }
        },
        "Dataset.clear_cache": {
            "name": "clear_cache",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.is_tiled": {
            "name": "is_tiled",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "tif": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "Dataset.read_properties": {
            "name": "read_properties",
            "location": 122,
            "return": [
                "tuple[typing.Union[list[Vec3D],list[tuple[]]]]",
                "tuple[typing.Union[list[Vec3D],list[tuple[]],None]]"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Dataset.read_whole_page": {
            "name": "read_whole_page",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "int",
                    "bytes"
                ],
                "page": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Dataset.read_tile": {
            "name": "read_tile",
            "location": 185,
            "return": [
                "tuple[typing.Union[tuple[],str,dict[str, typing.Any],tuple[int],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "int",
                    "float",
                    "None",
                    "list[L]",
                    "list[str]"
                ],
                "page": [],
                "target_offset": [
                    "str"
                ],
                "target_shape": [
                    "str"
                ]
            }
        },
        "Dataset.read_mmapped": {
            "name": "read_mmapped",
            "location": 227,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "bytes",
                    "int"
                ],
                "dtype": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "byte_offset": [
                    "str",
                    "bytes",
                    "int"
                ],
                "shape": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Dataset.repair_dtype": {
            "name": "repair_dtype",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/tiff/__init__.py": {},
    "webknossos-connect-master/wkconnect/backends/wkw/backend.py": {
        "Wkw.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "http_client": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Wkw.clear_dataset_cache": {
            "name": "clear_dataset_cache",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract_dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Wkw.path": {
            "name": "path",
            "location": 146,
            "return": [
                "Path"
            ],
            "arguments": {
                "dataset_info": [
                    "str"
                ],
                "organization_name": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]"
                ],
                "dataset_name": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Wkw.get_meshes.read_mesh_mapping_name": {
            "name": "read_mesh_mapping_name",
            "location": 57,
            "return": [],
            "arguments": {
                "mesh_path": []
            }
        },
        "Wkw.get_chunks_for_mesh.read_mesh": {
            "name": "read_mesh",
            "location": 95,
            "return": [
                "list[]",
                "list[Vec3D]"
            ],
            "arguments": {
                "mesh_path": [],
                "segment_id": []
            }
        },
        "Wkw.get_chunk_data_for_mesh.read_chunk": {
            "name": "read_chunk",
            "location": 130,
            "return": [],
            "arguments": {
                "mesh_path": [],
                "segment_id": [],
                "position": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/wkw/models.py": {
        "Dataset.to_webknossos": {
            "name": "to_webknossos",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.layer_to_webknossos": {
            "name": "layer_to_webknossos",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "dict[, ]"
                ],
                "layer_properties": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Dataset.get_data_handle": {
            "name": "get_data_handle",
            "location": 57,
            "return": [
                "None",
                "tuple[typing.Union[str,Mag]]"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "list[]"
                ],
                "mag": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Dataset.clear_cache": {
            "name": "clear_cache",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/backends/wkw/__init__.py": {},
    "webknossos-connect-master/wkconnect/routes/trace.py": {},
    "webknossos-connect-master/wkconnect/routes/triggers.py": {},
    "webknossos-connect-master/wkconnect/routes/__init__.py": {},
    "webknossos-connect-master/wkconnect/routes/datasets/connectomes.py": {},
    "webknossos-connect-master/wkconnect/routes/datasets/datasource_properties.py": {},
    "webknossos-connect-master/wkconnect/routes/datasets/histogram.py": {
        "align_positions_with_mag": {
            "name": "align_positions_with_mag",
            "location": 83,
            "return": [
                "tuple[typing.Union[list[Vec3D],Vec3D]]"
            ],
            "arguments": {
                "sample_positions": [],
                "layer": [
                    "typing.Iterable[]",
                    "str",
                    "int"
                ]
            }
        },
        "generate_sample_positions": {
            "name": "generate_sample_positions",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iterations": [
                    "int"
                ],
                "bounding_box": [
                    "int"
                ],
                "resolution_limit": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/routes/datasets/meshes.py": {},
    "webknossos-connect-master/wkconnect/routes/datasets/read_data.py": {
        "convert_data": {
            "name": "convert_data",
            "location": 17,
            "return": [],
            "arguments": {
                "to_four_bit": [
                    "bool",
                    "typing.Callable[typing.Any, int]",
                    "dict[str, typing.Any]"
                ],
                "data": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/routes/datasets/thumbnail.py": {},
    "webknossos-connect-master/wkconnect/routes/datasets/upload.py": {
        "iterate_datasets": {
            "name": "iterate_datasets",
            "location": 18,
            "return": [
                "typing.Generator[tuple[typing.Union[tuple[typing.Union[str,object]],tuple[typing.Union[str,dict[str, int]]],tuple[str]]]]"
            ],
            "arguments": {
                "datasets": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/routes/datasets/__init__.py": {},
    "webknossos-connect-master/wkconnect/utils/blocking.py": {
        "get_thread_pool_executor": {
            "name": "get_thread_pool_executor",
            "location": 11,
            "return": [
                "ThreadPoolExecutor"
            ],
            "arguments": {}
        }
    },
    "webknossos-connect-master/wkconnect/utils/caching.py": {
        "atlru_cache": {
            "name": "atlru_cache",
            "location": 10,
            "return": [],
            "arguments": {
                "seconds_to_use": [
                    "int",
                    "set[tuple[typing.Union[int,int]]]",
                    "str"
                ],
                "maxsize": [
                    "int"
                ],
                "typed": [
                    "bool"
                ]
            }
        },
        "atlru_cache.decorator": {
            "name": "decorator",
            "location": 13,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/colors.py": {},
    "webknossos-connect-master/wkconnect/utils/exceptions.py": {
        "exception_traceback": {
            "name": "exception_traceback",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "BaseException",
                    "str",
                    "None"
                ]
            }
        },
        "format_exception": {
            "name": "format_exception",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "exception": [
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[int,int,int]]",
                    "list[str]"
                ]
            }
        },
        "RuntimeErrorWithUserMessage.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_message": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/json.py": {
        "from_json": {
            "name": "from_json",
            "location": 7,
            "return": [
                "dict[, ]",
                "dict[str, str]",
                "list[]",
                "tuple[]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "yield_jsons": {
            "name": "yield_jsons",
            "location": 55,
            "return": [
                "typing.Generator[typing.Union[dict[, ],dict[str, typing.Union[typing.Any,typing.Any]],set[],str,None]]",
                "typing.Generator[tuple[typing.Union[dict[, ],dict[str, typing.Union[typing.Any,typing.Any]],set[],str,None]]]"
            ],
            "arguments": {
                "obj_iter": [],
                "keys": [
                    "None",
                    "typing.Iterable[str]",
                    "int",
                    "typing.Any"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "tuple[]",
                "list[]"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/scheduler.py": {
        "repeat_every_seconds": {
            "name": "repeat_every_seconds",
            "location": 8,
            "return": [],
            "arguments": {
                "interval_seconds": [
                    "bool",
                    "float",
                    "None",
                    "typing.BinaryIO"
                ],
                "initial_call": [
                    "bool"
                ]
            }
        },
        "repeat_every_seconds.decorator": {
            "name": "decorator",
            "location": 11,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/si.py": {
        "convert_si_units": {
            "name": "convert_si_units",
            "location": 1,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int"
                ],
                "unit_in": [
                    "str",
                    "int",
                    "dict[int, dict[, ]]"
                ],
                "unit_out": [
                    "str",
                    "int",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "convert_si_units.get_exponent": {
            "name": "get_exponent",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "unit": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/types.py": {
        "Vec3D._element_wise": {
            "name": "_element_wise",
            "location": 14,
            "return": [
                "Vec3D"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "fn": [
                    "float"
                ]
            }
        },
        "Vec3D.__add__": {
            "name": "__add__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Vec3D.__sub__": {
            "name": "__sub__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.__mul__": {
            "name": "__mul__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.__floordiv__": {
            "name": "__floordiv__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.__mod__": {
            "name": "__mod__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.ceildiv": {
            "name": "ceildiv",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vec3D.pairmax": {
            "name": "pairmax",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.pairmin": {
            "name": "pairmin",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3D.to_float": {
            "name": "to_float",
            "location": 43,
            "return": [
                "Vec3Df"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3D.to_int": {
            "name": "to_int",
            "location": 46,
            "return": [
                "Vec3D"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3D.as_np": {
            "name": "as_np",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vec3D.as_tuple": {
            "name": "as_tuple",
            "location": 52,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3D.max_dim": {
            "name": "max_dim",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vec3D.zeros": {
            "name": "zeros",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Vec3D.ones": {
            "name": "ones",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Vec3Df._element_wise": {
            "name": "_element_wise",
            "location": 72,
            "return": [
                "Vec3Df"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "typing.Iterable[T]"
                ],
                "fn": []
            }
        },
        "Vec3Df.__add__": {
            "name": "__add__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Vec3Df.__sub__": {
            "name": "__sub__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3Df.__mul__": {
            "name": "__mul__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3Df.__floordiv__": {
            "name": "__floordiv__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3Df.__truediv__": {
            "name": "__truediv__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3Df.__mod__": {
            "name": "__mod__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vec3Df.to_int": {
            "name": "to_int",
            "location": 95,
            "return": [
                "Vec3D"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3Df.as_np": {
            "name": "as_np",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vec3Df.as_tuple": {
            "name": "as_tuple",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3Df.zeros": {
            "name": "zeros",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Box3D.from_size": {
            "name": "from_size",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[]",
                    "str"
                ],
                "left": [
                    "int",
                    "list[]",
                    "str"
                ],
                "size": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "Box3D.to_int": {
            "name": "to_int",
            "location": 121,
            "return": [
                "Box3D"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box3D.size": {
            "name": "size",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Box3D.center": {
            "name": "center",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Box3D._element_wise": {
            "name": "_element_wise",
            "location": 130,
            "return": [
                "Box3D"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ],
                "fn": [
                    "float"
                ]
            }
        },
        "Box3D.__add__": {
            "name": "__add__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Box3D.__sub__": {
            "name": "__sub__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Box3D.__mul__": {
            "name": "__mul__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Box3D.div": {
            "name": "div",
            "location": 144,
            "return": [
                "Box3D"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "Box3D.union": {
            "name": "union",
            "location": 147,
            "return": [
                "Box3D"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ]
            }
        },
        "Box3D.intersect": {
            "name": "intersect",
            "location": 150,
            "return": [
                "Box3D"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ]
            }
        },
        "Box3D.range": {
            "name": "range",
            "location": 153,
            "return": [
                "typing.Generator[Vec3D]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "float"
                ]
            }
        },
        "Box3D.np_slice": {
            "name": "np_slice",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashableDict.__hash__": {
            "name": "__hash__",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/utils/__init__.py": {},
    "webknossos-connect-master/wkconnect/webknossos/access.py": {
        "authorized": {
            "name": "authorized",
            "location": 44,
            "return": [],
            "arguments": {
                "fn_access_request": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "AccessRequest.read_dataset": {
            "name": "read_dataset",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "organization_name": [
                    "str"
                ],
                "dataset_name": [
                    "str"
                ]
            }
        },
        "AccessRequest.administrate_datasets": {
            "name": "administrate_datasets",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "authorized.decorator": {
            "name": "decorator",
            "location": 45,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/webknossos/client.py": {
        "WebKnossosClient.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "http_client": [
                    "str"
                ]
            }
        }
    },
    "webknossos-connect-master/wkconnect/webknossos/models.py": {
        "BoundingBox.box": {
            "name": "box",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.from_box": {
            "name": "from_box",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "box": []
            }
        },
        "DataLayer.__post_init__": {
            "name": "__post_init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webknossos-connect-master/wkconnect/webknossos/__init__.py": {}
}
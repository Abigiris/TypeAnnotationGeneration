{
    "who-owns-what-master/dbtool.py": {
        "get_dataset_dependencies": {
            "name": "get_dataset_dependencies",
            "location": 218,
            "return": [],
            "arguments": {
                "for_api": [
                    "bool",
                    "None",
                    "str",
                    "typing.Callable[[], bool]"
                ]
            }
        },
        "get_sqlfile_paths": {
            "name": "get_sqlfile_paths",
            "location": 225,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "dbshell": {
            "name": "dbshell",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "loadtestdata": {
            "name": "loadtestdata",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "export_table_subset": {
            "name": "export_table_subset",
            "location": 253,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "db": [],
                "table_name": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ],
                "query": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "exporttestdata": {
            "name": "exporttestdata",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "DbContext.from_url": {
            "name": "from_url",
            "location": 43,
            "return": [
                "DbContext"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "list[str]",
                    "float"
                ]
            }
        },
        "DbContext.psycopg2_connect_kwargs": {
            "name": "psycopg2_connect_kwargs",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbContext.connection": {
            "name": "connection",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DbContext.get_pg_env_and_args": {
            "name": "get_pg_env_and_args",
            "location": 94,
            "return": [
                "tuple[list[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NycDbBuilder.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "is_testing": [
                    "int",
                    "str",
                    "list[str]",
                    "typing.Callable[google.cloud.bigquery.table.Row, None]"
                ]
            }
        },
        "NycDbBuilder.call_nycdb": {
            "name": "call_nycdb",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NycDbBuilder.do_tables_exist": {
            "name": "do_tables_exist",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NycDbBuilder.drop_tables": {
            "name": "drop_tables",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NycDbBuilder.delete_downloaded_data": {
            "name": "delete_downloaded_data",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NycDbBuilder.ensure_dataset": {
            "name": "ensure_dataset",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "force_refresh": [
                    "bool"
                ]
            }
        },
        "NycDbBuilder.run_sql_file": {
            "name": "run_sql_file",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlpath": []
            }
        },
        "NycDbBuilder.build": {
            "name": "build",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_refresh": [
                    "bool"
                ]
            }
        },
        "DbContext.connection.connect": {
            "name": "connect",
            "location": 82,
            "return": [],
            "arguments": {}
        }
    },
    "who-owns-what-master/docker_django_management.py": {
        "is_running_dev_server": {
            "name": "is_running_dev_server",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "argv": []
            }
        },
        "get_management_command": {
            "name": "get_management_command",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        },
        "info": {
            "name": "info",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "warn": {
            "name": "warn",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "setup_docker_sigterm_handler": {
            "name": "setup_docker_sigterm_handler",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "wait_for_db": {
            "name": "wait_for_db",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "max_attempts": [
                    "int"
                ],
                "seconds_between_attempts": [
                    "int"
                ]
            }
        },
        "execute_from_command_line": {
            "name": "execute_from_command_line",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        },
        "does_username_exist": {
            "name": "does_username_exist",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "does_uid_exist": {
            "name": "does_uid_exist",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "uid": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "entrypoint": {
            "name": "entrypoint",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "setup_docker_sigterm_handler.get_children": {
            "name": "get_children",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "setup_docker_sigterm_handler.handler": {
            "name": "handler",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [],
                "frame": []
            }
        }
    },
    "who-owns-what-master/manage.py": {},
    "who-owns-what-master/portfoliograph/graph.py": {
        "join_truthies": {
            "name": "join_truthies",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "build_graph": {
            "name": "build_graph",
            "location": 48,
            "return": [],
            "arguments": {
                "dict_cursor": []
            }
        },
        "to_json_graph": {
            "name": "to_json_graph",
            "location": 133,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, int]]]"
            ],
            "arguments": {
                "graph": []
            }
        },
        "Node.to_json": {
            "name": "to_json",
            "location": 15,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "who-owns-what-master/portfoliograph/hpd_regs.py": {
        "build_reg_bbl_map": {
            "name": "build_reg_bbl_map",
            "location": 7,
            "return": [
                "dict[, set[]]"
            ],
            "arguments": {
                "dict_cursor": []
            }
        }
    },
    "who-owns-what-master/portfoliograph/landlord_index.py": {
        "split_sort_join": {
            "name": "split_sort_join",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "dict_hash": {
            "name": "dict_hash",
            "location": 19,
            "return": [],
            "arguments": {
                "dictionary": [
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, typing.Union[str,set[]]]",
                    "bytes",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "get_landlord_data_for_algolia": {
            "name": "get_landlord_data_for_algolia",
            "location": 28,
            "return": [
                "list[dict[typing.Text, dict[typing.Text, typing.Union[list[],dict[str, typing.Callable[[], typing.Any]],dict[str, list[typing.Any]],str]]]]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool",
                    "list[list[str]]",
                    "list[str]"
                ],
                "max_index_char_length": [
                    "int"
                ]
            }
        },
        "get_corpname_data_for_algolia": {
            "name": "get_corpname_data_for_algolia",
            "location": 89,
            "return": [
                "list[dict[typing.Text, dict[typing.Text, ]]]"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "update_landlord_search_index": {
            "name": "update_landlord_search_index",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "algolia_app_id": [
                    "int",
                    "str"
                ],
                "algolia_api_key": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "who-owns-what-master/portfoliograph/table.py": {
        "iter_portfolio_rows": {
            "name": "iter_portfolio_rows",
            "location": 25,
            "return": [
                "typing.Generator[PortfolioRow]"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "export_portfolios_table_json": {
            "name": "export_portfolios_table_json",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "list[str]",
                    "set[int]",
                    "int"
                ],
                "outfile": []
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 73,
            "return": [
                "None",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list[]",
                    "typing.Collection",
                    "typing.Sequence[T]",
                    "list[int]"
                ],
                "iterable": [
                    "int",
                    "None"
                ]
            }
        },
        "populate_portfolios_table": {
            "name": "populate_portfolios_table",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "batch_size": [
                    "int"
                ],
                "table": [
                    "typing.Text"
                ]
            }
        },
        "PortfolioRow.to_json": {
            "name": "to_json",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "who-owns-what-master/portfoliograph/__init__.py": {},
    "who-owns-what-master/project/apps.py": {},
    "who-owns-what-master/project/settings.py": {
        "get_required_env": {
            "name": "get_required_env",
            "location": 20,
            "return": [
                "str",
                "bytes",
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "None",
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "who-owns-what-master/project/settings_pytest.py": {},
    "who-owns-what-master/project/urls.py": {},
    "who-owns-what-master/project/wsgi.py": {},
    "who-owns-what-master/project/__init__.py": {},
    "who-owns-what-master/project/management/__init__.py": {},
    "who-owns-what-master/project/management/commands/raisetesterror.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "who-owns-what-master/project/management/commands/__init__.py": {},
    "who-owns-what-master/tests/conftest.py": {
        "exec_outside_of_transaction": {
            "name": "exec_outside_of_transaction",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "drop_db": {
            "name": "drop_db",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "dbname": [
                    "str"
                ]
            }
        },
        "create_db": {
            "name": "create_db",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "dbname": [
                    "str"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 39,
            "return": [
                "DbContext"
            ],
            "arguments": {}
        },
        "nycdb_ctx": {
            "name": "nycdb_ctx",
            "location": 99,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "DbContext.connect": {
            "name": "connect",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbContext.cursor": {
            "name": "cursor",
            "location": 87,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "nycdb_ctx.get_cursor": {
            "name": "get_cursor",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "who-owns-what-master/tests/generate_factory_from_csv.py": {
        "create_fake_csv_file": {
            "name": "create_fake_csv_file",
            "location": 23,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "munge_colname": {
            "name": "munge_colname",
            "location": 27,
            "return": [],
            "arguments": {
                "colname": []
            }
        },
        "unmunge_colname": {
            "name": "unmunge_colname",
            "location": 43,
            "return": [],
            "arguments": {
                "colname": []
            }
        },
        "generate_code": {
            "name": "generate_code",
            "location": 58,
            "return": [],
            "arguments": {
                "csvfile": [],
                "classname": []
            }
        },
        "hyphens_to_underscores": {
            "name": "hyphens_to_underscores",
            "location": 102,
            "return": [],
            "arguments": {
                "str": []
            }
        },
        "snake_to_camel": {
            "name": "snake_to_camel",
            "location": 110,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "generate_code_for_file": {
            "name": "generate_code_for_file",
            "location": 121,
            "return": [],
            "arguments": {
                "csvpath": []
            }
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "who-owns-what-master/tests/nycdb_context.py": {
        "nycdb_ctx": {
            "name": "nycdb_ctx",
            "location": 91,
            "return": [],
            "arguments": {
                "get_cursor": []
            }
        },
        "NycdbContext.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "root_dir": [],
                "get_cursor": []
            }
        },
        "NycdbContext.load_dataset": {
            "name": "load_dataset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NycdbContext._write_csv_to_file": {
            "name": "_write_csv_to_file",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "csvfile": [],
                "namedtuples": []
            }
        },
        "NycdbContext.write_csv": {
            "name": "write_csv",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "namedtuples": []
            }
        },
        "NycdbContext.write_zip": {
            "name": "write_zip",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "files": []
            }
        },
        "NycdbContext.build_everything": {
            "name": "build_everything",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "who-owns-what-master/tests/test_nycdb_loading.py": {
        "test_loading_violations_works": {
            "name": "test_loading_violations_works",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "nycdb_ctx": []
            }
        },
        "test_loading_pluto_works": {
            "name": "test_loading_pluto_works",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "nycdb_ctx": []
            }
        },
        "test_loading_changes_summary_works": {
            "name": "test_loading_changes_summary_works",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "nycdb_ctx": []
            }
        }
    },
    "who-owns-what-master/tests/test_sql.py": {
        "TestSQL.setup_class_fixture": {
            "name": "setup_class_fixture",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "typing.Any",
                    "None",
                    "BaseException",
                    "typing.Type",
                    "Exception"
                ],
                "nycdb_ctx": []
            }
        },
        "TestSQL.setup_fixture": {
            "name": "setup_fixture",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "TestSQL.query_one": {
            "name": "query_one",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestSQL.query_all": {
            "name": "query_all",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "None",
                    "typing.Sequence[dict[str, str]]"
                ]
            }
        },
        "TestSQL.get_assoc_addrs_from_bbl": {
            "name": "get_assoc_addrs_from_bbl",
            "location": 196,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "bbl": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "expected_bbls": [
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "TestSQL.test_wow_bldgs_is_populated": {
            "name": "test_wow_bldgs_is_populated",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_get_assoc_addrs_from_bbl_returns_one_building_porfolios": {
            "name": "test_get_assoc_addrs_from_bbl_returns_one_building_porfolios",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_get_assoc_addrs_from_bbl_returns_empty_set_on_invalid_bbl": {
            "name": "test_get_assoc_addrs_from_bbl_returns_empty_set_on_invalid_bbl",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_get_assoc_addrs_from_bbl_links_buildings_through_businessaddrs_and_names": {
            "name": "test_get_assoc_addrs_from_bbl_links_buildings_through_businessaddrs_and_names",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_get_assoc_addrs_from_bbl_has_expected_strucure": {
            "name": "test_get_assoc_addrs_from_bbl_has_expected_strucure",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_hpd_registrations_with_contacts_is_populated": {
            "name": "test_hpd_registrations_with_contacts_is_populated",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_built_graph_works": {
            "name": "test_built_graph_works",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_portfolio_graph_works": {
            "name": "test_portfolio_graph_works",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_getting_landlord_names_for_algolia_index": {
            "name": "test_getting_landlord_names_for_algolia_index",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_getting_corporation_names_for_algolia_index": {
            "name": "test_getting_corporation_names_for_algolia_index",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQL.test_portfolio_graph_json_works": {
            "name": "test_portfolio_graph_json_works",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "who-owns-what-master/tests/__init__.py": {},
    "who-owns-what-master/tests/factories/changes_summary.py": {},
    "who-owns-what-master/tests/factories/dob_violations.py": {},
    "who-owns-what-master/tests/factories/dof_exemptions.py": {},
    "who-owns-what-master/tests/factories/dof_exemption_classification_codes.py": {},
    "who-owns-what-master/tests/factories/ecb_violations.py": {},
    "who-owns-what-master/tests/factories/hpd_complaints.py": {},
    "who-owns-what-master/tests/factories/hpd_complaint_problems.py": {},
    "who-owns-what-master/tests/factories/hpd_contacts.py": {},
    "who-owns-what-master/tests/factories/hpd_registrations.py": {},
    "who-owns-what-master/tests/factories/hpd_violations.py": {},
    "who-owns-what-master/tests/factories/marshal_evictions_17.py": {},
    "who-owns-what-master/tests/factories/marshal_evictions_18.py": {},
    "who-owns-what-master/tests/factories/marshal_evictions_19.py": {},
    "who-owns-what-master/tests/factories/marshal_evictions_all.py": {},
    "who-owns-what-master/tests/factories/nycha_bbls_18.py": {},
    "who-owns-what-master/tests/factories/pluto_19v2.py": {},
    "who-owns-what-master/tests/factories/pluto_20v8.py": {},
    "who-owns-what-master/tests/factories/real_property_legals.py": {},
    "who-owns-what-master/tests/factories/real_property_master.py": {},
    "who-owns-what-master/tests/factories/__init__.py": {},
    "who-owns-what-master/wow/apiutil.py": {
        "apply_cors_policy": {
            "name": "apply_cors_policy",
            "location": 20,
            "return": [],
            "arguments": {
                "request": [],
                "response": []
            }
        },
        "api": {
            "name": "api",
            "location": 25,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "get_validated_form_data": {
            "name": "get_validated_form_data",
            "location": 42,
            "return": [],
            "arguments": {
                "form_class": [
                    "str",
                    "int",
                    "None"
                ],
                "data": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "is_api_request": {
            "name": "is_api_request",
            "location": 49,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "InvalidFormError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "InvalidFormError.as_json_response": {
            "name": "as_json_response",
            "location": 10,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "api.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "who-owns-what-master/wow/apps.py": {},
    "who-owns-what-master/wow/csvutil.py": {
        "stringify_owners": {
            "name": "stringify_owners",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "owners": []
            }
        },
        "stringify_contact_address": {
            "name": "stringify_contact_address",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "address": []
            }
        },
        "stringify_full_contacts": {
            "name": "stringify_full_contacts",
            "location": 18,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "contacts": []
            }
        },
        "stringify_complaints": {
            "name": "stringify_complaints",
            "location": 31,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "complaints": []
            }
        },
        "stringify_lists": {
            "name": "stringify_lists",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "d": []
            }
        }
    },
    "who-owns-what-master/wow/datautil.py": {
        "int_or_none": {
            "name": "int_or_none",
            "location": 4,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "float_or_none": {
            "name": "float_or_none",
            "location": 11,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "val": [
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "int"
                ]
            }
        },
        "str_or_none": {
            "name": "str_or_none",
            "location": 18,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type"
                ]
            }
        }
    },
    "who-owns-what-master/wow/dbutil.py": {
        "dictfetchall": {
            "name": "dictfetchall",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cursor": []
            }
        },
        "get_wow_cursor": {
            "name": "get_wow_cursor",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "call_db_func": {
            "name": "call_db_func",
            "location": 24,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "exec_sql": {
            "name": "exec_sql",
            "location": 30,
            "return": [],
            "arguments": {
                "sql": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "params": [
                    "dict[, ]"
                ]
            }
        },
        "exec_db_query": {
            "name": "exec_db_query",
            "location": 36,
            "return": [],
            "arguments": {
                "sql_file": [],
                "params": [
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "who-owns-what-master/wow/forms.py": {},
    "who-owns-what-master/wow/urls.py": {},
    "who-owns-what-master/wow/views.py": {
        "log_unsupported_request_args": {
            "name": "log_unsupported_request_args",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "clean_addr_dict": {
            "name": "clean_addr_dict",
            "location": 37,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "addr": [
                    "str"
                ]
            }
        },
        "get_bbl_from_request": {
            "name": "get_bbl_from_request",
            "location": 46,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterator",
                    "dict[, ]"
                ]
            }
        },
        "address_query": {
            "name": "address_query",
            "location": 53,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "address_query_with_portfolio_graph": {
            "name": "address_query_with_portfolio_graph",
            "location": 69,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "address_dap_aggregate": {
            "name": "address_dap_aggregate",
            "location": 92,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "address_dap_portfoliosize": {
            "name": "address_dap_portfoliosize",
            "location": 106,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "get_request_bbl": {
            "name": "get_request_bbl",
            "location": 127,
            "return": [],
            "arguments": {
                "request": [
                    "tuple[int]"
                ]
            }
        },
        "clean_agg_info_dict": {
            "name": "clean_agg_info_dict",
            "location": 131,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "agg_info": []
            }
        },
        "address_aggregate": {
            "name": "address_aggregate",
            "location": 144,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "clean_building_info_dict": {
            "name": "clean_building_info_dict",
            "location": 151,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "building_info": []
            }
        },
        "address_buildinginfo": {
            "name": "address_buildinginfo",
            "location": 160,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "address_indicatorhistory": {
            "name": "address_indicatorhistory",
            "location": 168,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "_fixup_addr_for_csv": {
            "name": "_fixup_addr_for_csv",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "str"
                ]
            }
        },
        "address_export": {
            "name": "address_export",
            "location": 184,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "server_error": {
            "name": "server_error",
            "location": 208,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "who-owns-what-master/wow/__init__.py": {},
    "who-owns-what-master/wow/tests/conftest.py": {
        "django_db_setup": {
            "name": "django_db_setup",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "django_db_setup": [
                    "bool"
                ],
                "django_db_blocker": []
            }
        }
    },
    "who-owns-what-master/wow/tests/test_datautils.py": {
        "TestDataUtilsWork.test_int_or_none_works": {
            "name": "test_int_or_none_works",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDataUtilsWork.test_float_or_none_works": {
            "name": "test_float_or_none_works",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDataUtilsWork.test_str_or_none_works": {
            "name": "test_str_or_none_works",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "who-owns-what-master/wow/tests/test_dbutil.py": {
        "TestExecSql.test_jsonb_is_retrieved_as_json": {
            "name": "test_jsonb_is_retrieved_as_json",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ]
            }
        }
    },
    "who-owns-what-master/wow/tests/test_views.py": {
        "api_server_error": {
            "name": "api_server_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "server_error": {
            "name": "server_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ApiTest.test_400s_work": {
            "name": "test_400s_work",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str"
                ],
                "client": [
                    "str"
                ]
            }
        },
        "TestAddressQuery.test_it_works": {
            "name": "test_it_works",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressAggregate.test_it_works": {
            "name": "test_it_works",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressDapAggregate.test_it_works": {
            "name": "test_it_works",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressDapPortfolioSize.test_it_returns_portfolio_size_given_bbl": {
            "name": "test_it_returns_portfolio_size_given_bbl",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressDapPortfolioSize.test_it_returns_none_for_unregistered_bbl": {
            "name": "test_it_returns_none_for_unregistered_bbl",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "list[]",
                    "dict[, ]",
                    "str"
                ],
                "client": []
            }
        },
        "TestAddressBuildingInfo.test_it_works": {
            "name": "test_it_works",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressIndicatorHistory.test_it_works": {
            "name": "test_it_works",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressExport.test_it_works": {
            "name": "test_it_works",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestAddressExport.test_it_returns_404_when_no_bbls_exist": {
            "name": "test_it_returns_404_when_no_bbls_exist",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "TestFixupAddrForCsv.test_it_works_when_ownernames_is_none": {
            "name": "test_it_works_when_ownernames_is_none",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerError.setup_fixture": {
            "name": "setup_fixture",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "TestServerError.test_it_returns_html_on_non_api_requests": {
            "name": "test_it_returns_html_on_non_api_requests",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerError.test_it_returns_json_on_api_requests": {
            "name": "test_it_returns_json_on_api_requests",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        }
    },
    "who-owns-what-master/wow/tests/__init__.py": {}
}
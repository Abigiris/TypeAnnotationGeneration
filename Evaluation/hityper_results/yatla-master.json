{
    "yatla-master/manage.py": {},
    "yatla-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str"
                ],
                "merged_file_paths": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "bytes"
                ],
                "append_linesep": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [],
                "merged_file_count": [
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "str"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "yatla-master/config/router.py": {},
    "yatla-master/config/urls.py": {},
    "yatla-master/config/wsgi.py": {},
    "yatla-master/config/__init__.py": {},
    "yatla-master/config/settings/base.py": {},
    "yatla-master/config/settings/local.py": {},
    "yatla-master/config/settings/production.py": {},
    "yatla-master/config/settings/test.py": {},
    "yatla-master/config/settings/__init__.py": {},
    "yatla-master/docs/conf.py": {},
    "yatla-master/docs/__init__.py": {},
    "yatla-master/yatla/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory"
            ],
            "arguments": {}
        }
    },
    "yatla-master/yatla/__init__.py": {},
    "yatla-master/yatla/contrib/__init__.py": {},
    "yatla-master/yatla/contrib/sites/__init__.py": {},
    "yatla-master/yatla/contrib/sites/migrations/0001_initial.py": {},
    "yatla-master/yatla/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "yatla-master/yatla/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "yatla-master/yatla/contrib/sites/migrations/__init__.py": {},
    "yatla-master/yatla/follows/admin.py": {},
    "yatla-master/yatla/follows/apps.py": {
        "FollowsAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/follows/models.py": {},
    "yatla-master/yatla/follows/__init__.py": {},
    "yatla-master/yatla/follows/api/__init__.py": {},
    "yatla-master/yatla/follows/api/v1/filters.py": {},
    "yatla-master/yatla/follows/api/v1/serializers.py": {
        "FollowSerializer.validate_follows": {
            "name": "validate_follows",
            "location": 19,
            "return": [
                "str",
                "typing.Pattern",
                "dict[, ]",
                "float",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "yatla-master/yatla/follows/api/v1/viewsets.py": {
        "FollowViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FollowViewSet.perform_create": {
            "name": "perform_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "yatla-master/yatla/follows/api/v1/__init__.py": {},
    "yatla-master/yatla/follows/migrations/0001_initial.py": {},
    "yatla-master/yatla/follows/migrations/__init__.py": {},
    "yatla-master/yatla/follows/tests/factories.py": {},
    "yatla-master/yatla/follows/tests/test_api.py": {
        "FollowsAPITestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowsAPITestCase.test_start_follow": {
            "name": "test_start_follow",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/follows/tests/__init__.py": {},
    "yatla-master/yatla/twits/admin.py": {},
    "yatla-master/yatla/twits/apps.py": {
        "TwitsAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/twits/managers.py": {
        "TwitQuerySet.timeline": {
            "name": "timeline",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "yatla-master/yatla/twits/models.py": {
        "Twit.likes": {
            "name": "likes",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Twit.retwits": {
            "name": "retwits",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/twits/api/__init__.py": {},
    "yatla-master/yatla/twits/api/v1/filters.py": {},
    "yatla-master/yatla/twits/api/v1/permissions.py": {
        "IsAuthenticatedOnCreate.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ],
                "view": []
            }
        },
        "IsAuthenticatedOnModification.has_permission": {
            "name": "has_permission",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ],
                "view": []
            }
        },
        "IsOwnerOnModification.has_object_permission": {
            "name": "has_object_permission",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "view": [
                    "dict[, ]"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "IsAuthenticatedOnTimeLine.has_permission": {
            "name": "has_permission",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "view": [
                    "set[str]",
                    "str"
                ]
            }
        }
    },
    "yatla-master/yatla/twits/api/v1/serializers.py": {},
    "yatla-master/yatla/twits/api/v1/viewsets.py": {
        "TwitViewSet.perform_create": {
            "name": "perform_create",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TwitViewSet.timeline": {
            "name": "timeline",
            "location": 34,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "tuple[int]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LikeViewSet.perform_create": {
            "name": "perform_create",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ReTwitViewSet.perform_create": {
            "name": "perform_create",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "yatla-master/yatla/twits/api/v1/__init__.py": {},
    "yatla-master/yatla/twits/management/__init__.py": {},
    "yatla-master/yatla/twits/management/commands/createdata.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/twits/management/commands/__init__.py": {},
    "yatla-master/yatla/twits/migrations/0001_initial.py": {},
    "yatla-master/yatla/twits/migrations/0002_auto_20190211_1234.py": {},
    "yatla-master/yatla/twits/migrations/__init__.py": {},
    "yatla-master/yatla/twits/tests/factories.py": {},
    "yatla-master/yatla/twits/tests/test_api.py": {
        "TwitAPITestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitAPITestCase.test_list_twits": {
            "name": "test_list_twits",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitAPITestCase.test_list_timeline": {
            "name": "test_list_timeline",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitAPITestCase.test_create_twit": {
            "name": "test_create_twit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/twits/tests/test_models.py": {
        "CouponTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CouponTests.test_timeline": {
            "name": "test_timeline",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/twits/tests/__init__.py": {},
    "yatla-master/yatla/users/admin.py": {},
    "yatla-master/yatla/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/users/forms.py": {
        "UserCreationForm.clean_email": {
            "name": "clean_email",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/users/helpers.py": {
        "restore_password": {
            "name": "restore_password",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "restore_password_code": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "verify_email": {
            "name": "verify_email",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "yatla-master/yatla/users/managers.py": {
        "UserManager._create_user": {
            "name": "_create_user",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "str"
                ],
                "email": [
                    "bool",
                    "None",
                    "dict[, ]",
                    "list[typing.Any]"
                ],
                "password": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "UserManager.create_user": {
            "name": "create_user",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "email": [
                    "None",
                    "str",
                    "bool"
                ],
                "password": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "UserManager.create_superuser": {
            "name": "create_superuser",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "email": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "yatla-master/yatla/users/models.py": {
        "User.clean": {
            "name": "clean",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_full_name": {
            "name": "get_full_name",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_short_name": {
            "name": "get_short_name",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/users/__init__.py": {},
    "yatla-master/yatla/users/api/__init__.py": {},
    "yatla-master/yatla/users/api/v1/permissions.py": {
        "IsAuthenticatedOnRetrieve.has_permission": {
            "name": "has_permission",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]"
                ],
                "view": []
            }
        },
        "NoDeletes.has_permission": {
            "name": "has_permission",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "set[str]",
                    "str"
                ],
                "view": []
            }
        },
        "NoDeletes.has_object_permission": {
            "name": "has_object_permission",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "view": [
                    "dict[, ]"
                ],
                "obj": [
                    "dict[, ]"
                ]
            }
        }
    },
    "yatla-master/yatla/users/api/v1/serializers.py": {
        "UserSerializer.validate_password": {
            "name": "validate_password",
            "location": 16,
            "return": [
                "float",
                "list[str]",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "yatla-master/yatla/users/api/v1/viewsets.py": {
        "UserViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserViewSet.get_object": {
            "name": "get_object",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/users/api/v1/__init__.py": {},
    "yatla-master/yatla/users/migrations/0001_initial.py": {},
    "yatla-master/yatla/users/migrations/__init__.py": {},
    "yatla-master/yatla/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "typing.Callable[typing.Any, T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "typing.Callable[typing.Any, T]"
                ]
            }
        }
    },
    "yatla-master/yatla/users/tests/test_api.py": {
        "UserAPITests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPITests.test_list_users": {
            "name": "test_list_users",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPITests.test_register_user": {
            "name": "test_register_user",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPITests.test_get_me": {
            "name": "test_get_me",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPITests.test_update_me": {
            "name": "test_update_me",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yatla-master/yatla/users/tests/__init__.py": {}
}
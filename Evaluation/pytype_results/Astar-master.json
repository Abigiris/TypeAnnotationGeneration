{
    "Astar-master/main.py": {},
    "Astar-master/astar/__init__.py": {
        "find_path": {
            "name": "find_path",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "start": [],
                "goal": [],
                "neighbors_fnct": [],
                "reversePath": [],
                "heuristic_cost_estimate_fnct": [],
                "distance_between_fnct": [],
                "is_goal_reached_fnct": []
            }
        },
        "AStar.heuristic_cost_estimate": {
            "name": "heuristic_cost_estimate",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        },
        "AStar.distance_between": {
            "name": "distance_between",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "AStar.neighbors": {
            "name": "neighbors",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AStar.is_goal_reached": {
            "name": "is_goal_reached",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        },
        "AStar.reconstruct_path": {
            "name": "reconstruct_path",
            "location": 69,
            "return": [
                "Union[(Generator[(Any, Any, None)], reversed[nothing])]"
            ],
            "arguments": {
                "self": [],
                "last": [],
                "reversePath": []
            }
        },
        "AStar.astar": {
            "name": "astar",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "goal": [],
                "reversePath": [],
                "method": []
            }
        },
        "AStar.closed_set": {
            "name": "closed_set",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AStar.open_set": {
            "name": "open_set",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AStar.SearchNode.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "gscore": [],
                "fscore": []
            }
        },
        "AStar.SearchNode.__lt__": {
            "name": "__lt__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "AStar.SearchNodeDict.__missing__": {
            "name": "__missing__",
            "location": 43,
            "return": [
                "AStar.SearchNode"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "AStar.reconstruct_path._gen": {
            "name": "_gen",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "find_path.FindPath.heuristic_cost_estimate": {
            "name": "heuristic_cost_estimate",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        },
        "find_path.FindPath.distance_between": {
            "name": "distance_between",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "find_path.FindPath.neighbors": {
            "name": "neighbors",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "find_path.FindPath.is_goal_reached": {
            "name": "is_goal_reached",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        }
    },
    "Astar-master/mazesolver/__init__.py": {
        "MazeSolver.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maze": []
            }
        },
        "MazeSolver.neighbors": {
            "name": "neighbors",
            "location": 45,
            "return": [
                "Tuple[(Tuple[(Any, Any)], ...)]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MazeSolver.reachable": {
            "name": "reachable",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MazeSolver.distance_between": {
            "name": "distance_between",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "MazeSolver.heuristic_cost_estimate": {
            "name": "heuristic_cost_estimate",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        },
        "MazeSolver.is_goal_reached": {
            "name": "is_goal_reached",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current": [],
                "goal": []
            }
        },
        "MazeSolver.solve": {
            "name": "solve",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "MazeSolver.visualize": {
            "name": "visualize",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeSolver.print_maze": {
            "name": "print_maze",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "maze": []
            }
        },
        "MazeSolver.node_representation": {
            "name": "node_representation",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "maze": [],
                "node": []
            }
        },
        "MazeSolver.representation": {
            "name": "representation",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_path": [],
                "with_open_closed": []
            }
        },
        "TerrainMazeSolver.distance_between": {
            "name": "distance_between",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TerrainMazeSolver.node_representation": {
            "name": "node_representation",
            "location": 211,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "maze": [],
                "node": []
            }
        }
    },
    "Astar-master/mazesolver/tests/conftest.py": {
        "maze_solver": {
            "name": "maze_solver",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "Astar-master/mazesolver/tests/test_maze_solver.py": {
        "TestMazeSolver.test_init_with_file": {
            "name": "test_init_with_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_simple_maze_string": {
            "name": "test_simple_maze_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_dimensions_of_maze": {
            "name": "test_dimensions_of_maze",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_start_and_goal_index": {
            "name": "test_start_and_goal_index",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_is_goal_reached": {
            "name": "test_is_goal_reached",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_reachable": {
            "name": "test_reachable",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_neighbours": {
            "name": "test_neighbours",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_complex_neighbours_case": {
            "name": "test_complex_neighbours_case",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeSolver.test_distance_between_adjacent_nodes": {
            "name": "test_distance_between_adjacent_nodes",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maze_solver": []
            }
        },
        "TestMazeSolver.test_heuristic_cost_estimate": {
            "name": "test_heuristic_cost_estimate",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maze_solver": []
            }
        },
        "TestMazeSolver.test_solve": {
            "name": "test_solve",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maze_solver": []
            }
        },
        "TestMazeSolver.test_visualize": {
            "name": "test_visualize",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "maze_solver": [],
                "capsys": []
            }
        },
        "TestMazeSolver.test_solving_solvable_mazes": {
            "name": "test_solving_solvable_mazes",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Astar-master/mazesolver/tests/test_terrain_maze_solver.py": {
        "TestTerrainMazeSolver.test_distance_between_adjacent_nodes": {
            "name": "test_distance_between_adjacent_nodes",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerrainMazeSolver.test_with_the_given_boards": {
            "name": "test_with_the_given_boards",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModificationsOfTheAstarAlgorithm.test_closed_set": {
            "name": "test_closed_set",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModificationsOfTheAstarAlgorithm.test_open_set": {
            "name": "test_open_set",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModificationsOfTheAstarAlgorithm.test_dijkstra_with_the_given_boards": {
            "name": "test_dijkstra_with_the_given_boards",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModificationsOfTheAstarAlgorithm.test_bfs_with_the_given_boards": {
            "name": "test_bfs_with_the_given_boards",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Astar-master/mazesolver/tests/__init__.py": {}
}
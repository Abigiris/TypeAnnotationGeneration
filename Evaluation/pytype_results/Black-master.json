{
    "Black-master/black.py": {
        "supports_feature": {
            "name": "supports_feature",
            "location": 193,
            "return": [],
            "arguments": {
                "target_versions": [],
                "feature": []
            }
        },
        "read_pyproject_toml": {
            "name": "read_pyproject_toml",
            "location": 197,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "main": {
            "name": "main",
            "location": 358,
            "return": [],
            "arguments": {
                "ctx": [],
                "line_length": [],
                "target_version": [],
                "check": [],
                "diff": [],
                "fast": [],
                "pyi": [],
                "py36": [],
                "skip_string_normalization": [],
                "quiet": [],
                "verbose": [],
                "include": [],
                "exclude": [],
                "src": [],
                "config": []
            }
        },
        "reformat_one": {
            "name": "reformat_one",
            "location": 461,
            "return": [],
            "arguments": {
                "src": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": []
            }
        },
        "format_file_in_place": {
            "name": "format_file_in_place",
            "location": 564,
            "return": [],
            "arguments": {
                "src": [],
                "fast": [],
                "mode": [],
                "write_back": [],
                "lock": []
            }
        },
        "format_stdin_to_stdout": {
            "name": "format_stdin_to_stdout",
            "location": 613,
            "return": [],
            "arguments": {
                "fast": []
            }
        },
        "format_file_contents": {
            "name": "format_file_contents",
            "location": 646,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "format_str": {
            "name": "format_str",
            "location": 668,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "decode_bytes": {
            "name": "decode_bytes",
            "location": 708,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "get_grammars": {
            "name": "get_grammars",
            "location": 725,
            "return": [],
            "arguments": {
                "target_versions": []
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 741,
            "return": [],
            "arguments": {
                "src_txt": [],
                "target_versions": []
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 768,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "whitespace": {
            "name": "whitespace",
            "location": 1678,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "preceding_leaf": {
            "name": "preceding_leaf",
            "location": 1908,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "child_towards": {
            "name": "child_towards",
            "location": 1926,
            "return": [],
            "arguments": {
                "ancestor": [],
                "descendant": []
            }
        },
        "container_of": {
            "name": "container_of",
            "location": 1934,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_split_after_delimiter": {
            "name": "is_split_after_delimiter",
            "location": 1959,
            "return": [],
            "arguments": {
                "leaf": [],
                "previous": []
            }
        },
        "is_split_before_delimiter": {
            "name": "is_split_before_delimiter",
            "location": 1973,
            "return": [],
            "arguments": {
                "leaf": [],
                "previous": []
            }
        },
        "generate_comments": {
            "name": "generate_comments",
            "location": 2073,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "list_comments": {
            "name": "list_comments",
            "location": 2115,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "make_comment": {
            "name": "make_comment",
            "location": 2145,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "split_line": {
            "name": "split_line",
            "location": 2164,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": [],
                "inner": [],
                "features": []
            }
        },
        "left_hand_split": {
            "name": "left_hand_split",
            "location": 2240,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "right_hand_split": {
            "name": "right_hand_split",
            "location": 2276,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": [],
                "features": [],
                "omit": []
            }
        },
        "bracket_split_succeeded_or_raise": {
            "name": "bracket_split_succeeded_or_raise",
            "location": 2365,
            "return": [],
            "arguments": {
                "head": [],
                "body": [],
                "tail": []
            }
        },
        "bracket_split_build_line": {
            "name": "bracket_split_build_line",
            "location": 2391,
            "return": [],
            "arguments": {
                "leaves": [],
                "original": [],
                "opening_bracket": []
            }
        },
        "dont_increase_indentation": {
            "name": "dont_increase_indentation",
            "location": 2420,
            "return": [],
            "arguments": {
                "split_func": []
            }
        },
        "delimiter_split": {
            "name": "delimiter_split",
            "location": 2436,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "standalone_comment_split": {
            "name": "standalone_comment_split",
            "location": 2506,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 2536,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_type_comment": {
            "name": "is_type_comment",
            "location": 2550,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "normalize_prefix": {
            "name": "normalize_prefix",
            "location": 2558,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "normalize_string_prefix": {
            "name": "normalize_string_prefix",
            "location": 2576,
            "return": [],
            "arguments": {
                "leaf": [],
                "remove_u_prefix": []
            }
        },
        "normalize_string_quotes": {
            "name": "normalize_string_quotes",
            "location": 2592,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "normalize_numeric_literal": {
            "name": "normalize_numeric_literal",
            "location": 2659,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "format_float_or_int_string": {
            "name": "format_float_or_int_string",
            "location": 2695,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_invisible_parens": {
            "name": "normalize_invisible_parens",
            "location": 2704,
            "return": [],
            "arguments": {
                "node": [],
                "parens_after": []
            }
        },
        "normalize_fmt_off": {
            "name": "normalize_fmt_off",
            "location": 2756,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "convert_one_fmt_off_pair": {
            "name": "convert_one_fmt_off_pair",
            "location": 2763,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "generate_ignored_nodes": {
            "name": "generate_ignored_nodes",
            "location": 2817,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "maybe_make_parens_invisible_in_atom": {
            "name": "maybe_make_parens_invisible_in_atom",
            "location": 2833,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_empty_tuple": {
            "name": "is_empty_tuple",
            "location": 2861,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_one_tuple": {
            "name": "is_one_tuple",
            "location": 2871,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_yield": {
            "name": "is_yield",
            "location": 2894,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_vararg": {
            "name": "is_vararg",
            "location": 2915,
            "return": [],
            "arguments": {
                "leaf": [],
                "within": []
            }
        },
        "is_multiline_string": {
            "name": "is_multiline_string",
            "location": 2938,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_stub_suite": {
            "name": "is_stub_suite",
            "location": 2944,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_stub_body": {
            "name": "is_stub_body",
            "location": 2957,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "max_delimiter_priority_in_atom": {
            "name": "max_delimiter_priority_in_atom",
            "location": 2973,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ensure_visible": {
            "name": "ensure_visible",
            "location": 3001,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "should_explode": {
            "name": "should_explode",
            "location": 3013,
            "return": [],
            "arguments": {
                "line": [],
                "opening_bracket": []
            }
        },
        "get_features_used": {
            "name": "get_features_used",
            "location": 3033,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "detect_target_versions": {
            "name": "detect_target_versions",
            "location": 3074,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "generate_trailers_to_omit": {
            "name": "generate_trailers_to_omit",
            "location": 3082,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": []
            }
        },
        "get_future_imports": {
            "name": "get_future_imports",
            "location": 3132,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "gen_python_files_in_dir": {
            "name": "gen_python_files_in_dir",
            "location": 3175,
            "return": [],
            "arguments": {
                "path": [],
                "root": [],
                "include": [],
                "exclude": [],
                "report": []
            }
        },
        "find_project_root": {
            "name": "find_project_root",
            "location": 3219,
            "return": [],
            "arguments": {
                "srcs": []
            }
        },
        "assert_equivalent": {
            "name": "assert_equivalent",
            "location": 3333,
            "return": [],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "assert_stable": {
            "name": "assert_stable",
            "location": 3405,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "mode": []
            }
        },
        "dump_to_file": {
            "name": "dump_to_file",
            "location": 3421,
            "return": [],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 3435,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": []
            }
        },
        "cancel": {
            "name": "cancel",
            "location": 3446,
            "return": [],
            "arguments": {
                "tasks": []
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 3453,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "sub_twice": {
            "name": "sub_twice",
            "location": 3479,
            "return": [],
            "arguments": {
                "regex": [],
                "replacement": [],
                "original": []
            }
        },
        "re_compile_maybe_verbose": {
            "name": "re_compile_maybe_verbose",
            "location": 3488,
            "return": [],
            "arguments": {
                "regex": []
            }
        },
        "enumerate_reversed": {
            "name": "enumerate_reversed",
            "location": 3498,
            "return": [],
            "arguments": {
                "sequence": []
            }
        },
        "enumerate_with_length": {
            "name": "enumerate_with_length",
            "location": 3506,
            "return": [],
            "arguments": {
                "line": [],
                "reversed": []
            }
        },
        "is_line_short_enough": {
            "name": "is_line_short_enough",
            "location": 3529,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "can_be_split": {
            "name": "can_be_split",
            "location": 3543,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "can_omit_invisible_parens": {
            "name": "can_omit_invisible_parens",
            "location": 3579,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": []
            }
        },
        "get_cache_file": {
            "name": "get_cache_file",
            "location": 3668,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "read_cache": {
            "name": "read_cache",
            "location": 3672,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "get_cache_info": {
            "name": "get_cache_info",
            "location": 3690,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "filter_cached": {
            "name": "filter_cached",
            "location": 3696,
            "return": [],
            "arguments": {
                "cache": [],
                "sources": []
            }
        },
        "write_cache": {
            "name": "write_cache",
            "location": 3712,
            "return": [],
            "arguments": {
                "cache": [],
                "sources": [],
                "mode": []
            }
        },
        "patch_click": {
            "name": "patch_click",
            "location": 3725,
            "return": [],
            "arguments": {}
        },
        "patched_main": {
            "name": "patched_main",
            "location": 3747,
            "return": [],
            "arguments": {}
        },
        "WriteBack.from_configuration": {
            "name": "from_configuration",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TargetVersion.is_python2": {
            "name": "is_python2",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileMode.get_cache_key": {
            "name": "get_cache_key",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_default": {
            "name": "visit_default",
            "location": 796,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 807,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 828,
            "return": [],
            "arguments": {
                "cls": [],
                "code": []
            }
        },
        "BracketTracker.mark": {
            "name": "mark",
            "location": 961,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.any_open_brackets": {
            "name": "any_open_brackets",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BracketTracker.max_delimiter_priority": {
            "name": "max_delimiter_priority",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": []
            }
        },
        "BracketTracker.delimiter_count_with_priority": {
            "name": "delimiter_count_with_priority",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": [],
                "priority": []
            }
        },
        "BracketTracker.maybe_increment_for_loop_variable": {
            "name": "maybe_increment_for_loop_variable",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_decrement_after_for_loop_variable": {
            "name": "maybe_decrement_after_for_loop_variable",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_increment_lambda_arguments": {
            "name": "maybe_increment_lambda_arguments",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_decrement_after_lambda_arguments": {
            "name": "maybe_decrement_after_lambda_arguments",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.get_open_lsqb": {
            "name": "get_open_lsqb",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.append": {
            "name": "append",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [],
                "preformatted": []
            }
        },
        "Line.append_safe": {
            "name": "append_safe",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [],
                "preformatted": []
            }
        },
        "Line.is_comment": {
            "name": "is_comment",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_decorator": {
            "name": "is_decorator",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_import": {
            "name": "is_import",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class": {
            "name": "is_class",
            "location": 1154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_stub_class": {
            "name": "is_stub_class",
            "location": 1163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_def": {
            "name": "is_def",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class_paren_empty": {
            "name": "is_class_paren_empty",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_triple_quoted_string": {
            "name": "is_triple_quoted_string",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_standalone_comments": {
            "name": "contains_standalone_comments",
            "location": 1213,
            "return": [],
            "arguments": {
                "self": [],
                "depth_limit": []
            }
        },
        "Line.contains_inner_type_comments": {
            "name": "contains_inner_type_comments",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_multiline_strings": {
            "name": "contains_multiline_strings",
            "location": 1245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.maybe_remove_trailing_comma": {
            "name": "maybe_remove_trailing_comma",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "closing": []
            }
        },
        "Line.append_comment": {
            "name": "append_comment",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "Line.comments_after": {
            "name": "comments_after",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.remove_trailing_comma": {
            "name": "remove_trailing_comma",
            "location": 1330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_complex_subscript": {
            "name": "is_complex_subscript",
            "location": 1338,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 1356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__bool__": {
            "name": "__bool__",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineTracker.maybe_empty_lines": {
            "name": "maybe_empty_lines",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "EmptyLineTracker._maybe_empty_lines": {
            "name": "_maybe_empty_lines",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "EmptyLineTracker._maybe_empty_lines_for_class_or_def": {
            "name": "_maybe_empty_lines_for_class_or_def",
            "location": 1442,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": [],
                "before": []
            }
        },
        "LineGenerator.line": {
            "name": "line",
            "location": 1500,
            "return": [],
            "arguments": {
                "self": [],
                "indent": []
            }
        },
        "LineGenerator.visit_default": {
            "name": "visit_default",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_INDENT": {
            "name": "visit_INDENT",
            "location": 1546,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_DEDENT": {
            "name": "visit_DEDENT",
            "location": 1552,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_stmt": {
            "name": "visit_stmt",
            "location": 1566,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "keywords": [],
                "parens": []
            }
        },
        "LineGenerator.visit_suite": {
            "name": "visit_suite",
            "location": 1587,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_async_stmt": {
            "name": "visit_async_stmt",
            "location": 1610,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_decorators": {
            "name": "visit_decorators",
            "location": 1625,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_SEMI": {
            "name": "visit_SEMI",
            "location": 1631,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_ENDMARKER": {
            "name": "visit_ENDMARKER",
            "location": 1635,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_STANDALONE_COMMENT": {
            "name": "visit_STANDALONE_COMMENT",
            "location": 1640,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 1645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dont_increase_indentation.split_wrapper": {
            "name": "split_wrapper",
            "location": 2427,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "delimiter_split.append_to_line": {
            "name": "append_to_line",
            "location": 2461,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "standalone_comment_split.append_to_line": {
            "name": "append_to_line",
            "location": 2515,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "get_future_imports.get_imports_from_children": {
            "name": "get_imports_from_children",
            "location": 3136,
            "return": [],
            "arguments": {
                "children": []
            }
        },
        "Report.done": {
            "name": "done",
            "location": 3259,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "changed": []
            }
        },
        "Report.failed": {
            "name": "failed",
            "location": 3275,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "message": []
            }
        },
        "Report.path_ignored": {
            "name": "path_ignored",
            "location": 3280,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "message": []
            }
        },
        "Report.return_code": {
            "name": "return_code",
            "location": 3285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 3303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "assert_equivalent._v": {
            "name": "_v",
            "location": 3339,
            "return": [],
            "arguments": {
                "node": [],
                "depth": []
            }
        },
        "split_line.rhs": {
            "name": "rhs",
            "location": 2198,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        }
    },
    "Black-master/blackd.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [],
            "arguments": {
                "bind_host": [],
                "bind_port": []
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "parse_python_variant_header": {
            "name": "parse_python_variant_header",
            "location": 124,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "patched_main": {
            "name": "patched_main",
            "location": 155,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/blib2to3/pygram.py": {
        "initialize": {
            "name": "initialize",
            "location": 32,
            "return": [],
            "arguments": {
                "cache_dir": []
            }
        },
        "Symbols.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": []
            }
        }
    },
    "Black-master/blib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 21,
            "return": [],
            "arguments": {
                "type_num": []
            }
        },
        "convert": {
            "name": "convert",
            "location": 410,
            "return": [],
            "arguments": {
                "gr": [],
                "raw_node": []
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 843,
            "return": [],
            "arguments": {
                "patterns": [],
                "nodes": []
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "new": []
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "children": [],
                "context": [],
                "prefix": [],
                "fixers_applied": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__unicode__": {
            "name": "__unicode__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.prefix": {
            "name": "prefix",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "child": []
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "child": []
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Node.invalidate_sibling_maps": {
            "name": "invalidate_sibling_maps",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.update_sibling_maps": {
            "name": "update_sibling_maps",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": [],
                "prefix": [],
                "fixers_applied": []
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__unicode__": {
            "name": "__unicode__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.prefix": {
            "name": "prefix",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 450,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "content": [],
                "name": []
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "content": [],
                "name": []
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 634,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "min": [],
                "max": [],
                "name": []
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 692,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 777,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 793,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "count": []
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "Base.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/blib2to3/__init__.py": {},
    "Black-master/blib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "graminit_h": [],
                "graminit_c": []
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/driver.py": {
        "_generate_pickle_name": {
            "name": "_generate_pickle_name",
            "location": 145,
            "return": [],
            "arguments": {
                "gt": [],
                "cache_dir": []
            }
        },
        "load_grammar": {
            "name": "load_grammar",
            "location": 156,
            "return": [],
            "arguments": {
                "gt": [],
                "gp": [],
                "save": [],
                "force": [],
                "logger": []
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 177,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "load_packaged_grammar": {
            "name": "load_packaged_grammar",
            "location": 186,
            "return": [],
            "arguments": {
                "package": [],
                "grammar_source": [],
                "cache_dir": []
            }
        },
        "main": {
            "name": "main",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "convert": [],
                "logger": []
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "debug": []
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "debug": []
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "debug": []
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "encoding": [],
                "debug": []
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "debug": []
            }
        },
        "Driver._partially_consume_prefix": {
            "name": "_partially_consume_prefix",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "column": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Grammar.loads": {
            "name": "loads",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "pkl": []
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 19,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 40,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test": {
            "name": "test",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/blib2to3/pgen2/parse.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "convert": []
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "newstate": [],
                "context": []
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "newdfa": [],
                "newstate": [],
                "context": []
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 384,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "stream": []
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "name": []
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "label": []
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "finish": []
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": [],
                "finish": []
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dfa": []
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "dfa": []
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": []
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "next": [],
                "label": []
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "nfaset": [],
                "final": []
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "next": [],
                "label": []
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 176,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 180,
            "return": [],
            "arguments": {
                "state": [],
                "base": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 76,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 79,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 82,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "_combinations": {
            "name": "_combinations",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 144,
            "return": [],
            "arguments": {
                "type": [],
                "token": [],
                "xxx_todo_changeme": [],
                "xxx_todo_changeme1": [],
                "line": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 150,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 169,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 232,
            "return": [],
            "arguments": {
                "orig_enc": []
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 243,
            "return": [],
            "arguments": {
                "readline": []
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 316,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 337,
            "return": [],
            "arguments": {
                "readline": []
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "iterable": []
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 270,
            "return": [],
            "arguments": {
                "line": []
            }
        }
    },
    "Black-master/blib2to3/pgen2/__init__.py": {},
    "Black-master/docs/conf.py": {
        "get_version": {
            "name": "get_version",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "make_pypi_svg": {
            "name": "make_pypi_svg",
            "location": 35,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "make_filename": {
            "name": "make_filename",
            "location": 44,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "generate_sections_from_readme": {
            "name": "generate_sections_from_readme",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/profiling/dict_big.py": {},
    "Black-master/profiling/dict_huge.py": {},
    "Black-master/profiling/list_big.py": {},
    "Black-master/profiling/list_huge.py": {},
    "Black-master/profiling/mix_big.py": {},
    "Black-master/profiling/mix_huge.py": {},
    "Black-master/profiling/mix_small.py": {},
    "Black-master/tests/test_black.py": {
        "dump_to_stderr": {
            "name": "dump_to_stderr",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 57,
            "return": [],
            "arguments": {
                "name": [],
                "data": []
            }
        },
        "cache_dir": {
            "name": "cache_dir",
            "location": 81,
            "return": [],
            "arguments": {
                "exists": []
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 91,
            "return": [],
            "arguments": {
                "close": []
            }
        },
        "async_test": {
            "name": "async_test",
            "location": 105,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "async_test.wrapper": {
            "name": "wrapper",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "BlackRunner.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackRunner.isolation": {
            "name": "isolation",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.assertFormatEqual": {
            "name": "assertFormatEqual",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": []
            }
        },
        "BlackTestCase.invokeBlack": {
            "name": "invokeBlack",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "exit_code": [],
                "ignore_config": []
            }
        },
        "BlackTestCase.test_empty": {
            "name": "test_empty",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_ff": {
            "name": "test_empty_ff",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_self": {
            "name": "test_self",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_black": {
            "name": "test_black",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping": {
            "name": "test_piping",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping_diff": {
            "name": "test_piping_diff",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_setup": {
            "name": "test_setup",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function": {
            "name": "test_function",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function2": {
            "name": "test_function2",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression": {
            "name": "test_expression",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_ff": {
            "name": "test_expression_ff",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_diff": {
            "name": "test_expression_diff",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fstring": {
            "name": "test_fstring",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_string_quotes": {
            "name": "test_string_quotes",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_slices": {
            "name": "test_slices",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments": {
            "name": "test_comments",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments2": {
            "name": "test_comments2",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments3": {
            "name": "test_comments3",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments4": {
            "name": "test_comments4",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments5": {
            "name": "test_comments5",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments6": {
            "name": "test_comments6",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cantfit": {
            "name": "test_cantfit",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_import_spacing": {
            "name": "test_import_spacing",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_composition": {
            "name": "test_composition",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_lines": {
            "name": "test_empty_lines",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_string_prefixes": {
            "name": "test_string_prefixes",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals": {
            "name": "test_numeric_literals",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals_ignoring_underscores": {
            "name": "test_numeric_literals_ignoring_underscores",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_numeric_literals_py2": {
            "name": "test_numeric_literals_py2",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2": {
            "name": "test_python2",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2_print_function": {
            "name": "test_python2_print_function",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python2_unicode_literals": {
            "name": "test_python2_unicode_literals",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_stub": {
            "name": "test_stub",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python37": {
            "name": "test_python37",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fmtonoff": {
            "name": "test_fmtonoff",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fmtonoff2": {
            "name": "test_fmtonoff2",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_remove_empty_parentheses_after_class": {
            "name": "test_remove_empty_parentheses_after_class",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_new_line_between_class_and_code": {
            "name": "test_new_line_between_class_and_code",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_bracket_match": {
            "name": "test_bracket_match",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tab_comment_indentation": {
            "name": "test_tab_comment_indentation",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose": {
            "name": "test_report_verbose",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_quiet": {
            "name": "test_report_quiet",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_normal": {
            "name": "test_report_normal",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_lib2to3_parse": {
            "name": "test_lib2to3_parse",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_features_used": {
            "name": "test_get_features_used",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_future_imports": {
            "name": "test_get_future_imports",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_debug_visitor": {
            "name": "test_debug_visitor",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_format_file_contents": {
            "name": "test_format_file_contents",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_endmarker": {
            "name": "test_endmarker",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assertFormatEqual": {
            "name": "test_assertFormatEqual",
            "location": 968,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_broken_file": {
            "name": "test_cache_broken_file",
            "location": 987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_single_file_already_cached": {
            "name": "test_cache_single_file_already_cached",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cache_multiple_files": {
            "name": "test_cache_multiple_files",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_cache_when_writeback_diff": {
            "name": "test_no_cache_when_writeback_diff",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_cache_when_stdin": {
            "name": "test_no_cache_when_stdin",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_read_cache_no_cachefile": {
            "name": "test_read_cache_no_cachefile",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_read_cache": {
            "name": "test_write_cache_read_cache",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_filter_cached": {
            "name": "test_filter_cached",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_creates_directory_if_needed": {
            "name": "test_write_cache_creates_directory_if_needed",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_failed_formatting_does_not_get_cached": {
            "name": "test_failed_formatting_does_not_get_cached",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_write_cache_write_fail": {
            "name": "test_write_cache_write_fail",
            "location": 1109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_check_diff_use_together": {
            "name": "test_check_diff_use_together",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_files": {
            "name": "test_no_files",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_broken_symlink": {
            "name": "test_broken_symlink",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_read_cache_line_lengths": {
            "name": "test_read_cache_line_lengths",
            "location": 1141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_pyi": {
            "name": "test_single_file_force_pyi",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_pyi": {
            "name": "test_multi_file_force_pyi",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_pyi": {
            "name": "test_pipe_force_pyi",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_py36": {
            "name": "test_single_file_force_py36",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_py36": {
            "name": "test_multi_file_force_py36",
            "location": 1224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_py36": {
            "name": "test_pipe_force_py36",
            "location": 1248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_include_exclude": {
            "name": "test_include_exclude",
            "location": 1259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_include": {
            "name": "test_empty_include",
            "location": 1275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_exclude": {
            "name": "test_empty_exclude",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_invalid_include_exclude": {
            "name": "test_invalid_include_exclude",
            "location": 1320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings": {
            "name": "test_preserves_line_endings",
            "location": 1324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings_via_stdin": {
            "name": "test_preserves_line_endings_via_stdin",
            "location": 1336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assert_equivalent_different_asts": {
            "name": "test_assert_equivalent_different_asts",
            "location": 1349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_symlink_out_of_root_directory": {
            "name": "test_symlink_out_of_root_directory",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_shhh_click": {
            "name": "test_shhh_click",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly": {
            "name": "test_root_logger_not_used_directly",
            "location": 1406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_blackd_main": {
            "name": "test_blackd_main",
            "location": 1578,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose.out": {
            "name": "out",
            "location": 564,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_verbose.err": {
            "name": "err",
            "location": 567,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_quiet.out": {
            "name": "out",
            "location": 659,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_quiet.err": {
            "name": "err",
            "location": 662,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_normal.out": {
            "name": "out",
            "location": 746,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_normal.err": {
            "name": "err",
            "location": 749,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_debug_visitor.out": {
            "name": "out",
            "location": 923,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_debug_visitor.err": {
            "name": "err",
            "location": 926,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_assertFormatEqual.out": {
            "name": "out",
            "location": 972,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_assertFormatEqual.err": {
            "name": "err",
            "location": 975,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly.fail": {
            "name": "fail",
            "location": 1407,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/bracketmatch.py": {},
    "Black-master/tests/data/cantfit.py": {},
    "Black-master/tests/data/class_blank_parentheses.py": {
        "public_func_with_blank_parentheses": {
            "name": "public_func_with_blank_parentheses",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "class_under_the_func_with_blank_parentheses": {
            "name": "class_under_the_func_with_blank_parentheses",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "ClassWithSpaceParentheses.test_func": {
            "name": "test_func",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithEmptyFunc.func_with_blank_parentheses": {
            "name": "func_with_blank_parentheses",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "NormalClass.func_for_testing": {
            "name": "func_for_testing",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        }
    },
    "Black-master/tests/data/class_methods_new_line.py": {
        "ClassWithInit.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithTheDocstringAndInit.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVars.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInit.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVars.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitWithInner.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitWithInner.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner2.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassSimplestWithInnerWithDocstring.Inner.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/tests/data/comments.py": {
        "function": {
            "name": "function",
            "location": 27,
            "return": [],
            "arguments": {
                "default": []
            }
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/tests/data/comments2.py": {
        "inline_comments_in_brackets_ruin_everything": {
            "name": "inline_comments_in_brackets_ruin_everything",
            "location": 223,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/comments3.py": {
        "func": {
            "name": "func",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/comments4.py": {
        "foo": {
            "name": "foo",
            "location": 69,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo2": {
            "name": "foo2",
            "location": 85,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo3": {
            "name": "foo3",
            "location": 96,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "C.test_fails_invalid_post_data": {
            "name": "test_fails_invalid_post_data",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "pyramid_config": [],
                "db_request": [],
                "post_data": [],
                "message": []
            }
        }
    },
    "Black-master/tests/data/comments5.py": {
        "wat": {
            "name": "wat",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "decorated1": {
            "name": "decorated1",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/comments6.py": {
        "f": {
            "name": "f",
            "location": 41,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "func": {
            "name": "func",
            "location": 72,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "Black-master/tests/data/composition.py": {
        "C.test": {
            "name": "test",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.omitting_trailers": {
            "name": "omitting_trailers",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.easy_asserts": {
            "name": "easy_asserts",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.tricky_asserts": {
            "name": "tricky_asserts",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Black-master/tests/data/debug_visitor.py": {
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "code": []
            }
        }
    },
    "Black-master/tests/data/empty_lines.py": {
        "f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 151,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/expression.py": {
        "gen": {
            "name": "gen",
            "location": 459,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/fmtonoff.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 224,
            "return": [],
            "arguments": {
                "number": [],
                "no_annotation": [],
                "text": []
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 227,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 232,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 246,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "subscriptlist": {
            "name": "subscriptlist",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "import_as_names": {
            "name": "import_as_names",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "testlist_star_expr": {
            "name": "testlist_star_expr",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "yield_expr": {
            "name": "yield_expr",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "example": {
            "name": "example",
            "location": 293,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "off_and_on_without_data": {
            "name": "off_and_on_without_data",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "on_and_off_broken": {
            "name": "on_and_off_broken",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "long_lines": {
            "name": "long_lines",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "single_literal_yapf_disable": {
            "name": "single_literal_yapf_disable",
            "location": 368,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/fmtonoff2.py": {
        "test_fader": {
            "name": "test_fader",
            "location": 18,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "check_fader": {
            "name": "check_fader",
            "location": 21,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "verify_fader": {
            "name": "verify_fader",
            "location": 29,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "test_calculate_fades": {
            "name": "test_calculate_fades",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/force_py36.py": {
        "long_function_name": {
            "name": "long_function_name",
            "location": 7,
            "return": [],
            "arguments": {
                "argument_one": [],
                "argument_two": [],
                "argument_three": [],
                "argument_four": [],
                "argument_five": [],
                "argument_six": []
            }
        }
    },
    "Black-master/tests/data/force_pyi.py": {
        "f": {
            "name": "f",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/fstring.py": {},
    "Black-master/tests/data/function.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 135,
            "return": [],
            "arguments": {
                "number": [],
                "no_annotation": [],
                "text": []
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 146,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 151,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 165,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "example": {
            "name": "example",
            "location": 169,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "long_lines": {
            "name": "long_lines",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "trailing_comma": {
            "name": "trailing_comma",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "f": {
            "name": "f",
            "location": 233,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "__await__": {
            "name": "__await__",
            "location": 243,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/function2.py": {
        "f": {
            "name": "f",
            "location": 27,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "g": {
            "name": "g",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "h": {
            "name": "h",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "g.inner": {
            "name": "inner",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "h.inner": {
            "name": "inner",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/import_spacing.py": {},
    "Black-master/tests/data/numeric_literals.py": {},
    "Black-master/tests/data/numeric_literals_py2.py": {},
    "Black-master/tests/data/numeric_literals_skip_underscores.py": {},
    "Black-master/tests/data/python2.py": {},
    "Black-master/tests/data/python2_print_function.py": {},
    "Black-master/tests/data/python2_unicode_literals.py": {},
    "Black-master/tests/data/python37.py": {
        "f": {
            "name": "f",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "Black-master/tests/data/slices.py": {},
    "Black-master/tests/data/string_prefixes.py": {},
    "Black-master/tests/data/string_quotes.py": {},
    "Black-master/tests/data/include_exclude_tests/b/.definitely_exclude/a.py": {},
    "Black-master/tests/data/include_exclude_tests/b/dont_exclude/a.py": {},
    "Black-master/tests/data/include_exclude_tests/b/exclude/a.py": {}
}
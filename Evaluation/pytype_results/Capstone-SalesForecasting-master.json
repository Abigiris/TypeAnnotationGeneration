{
    "Capstone-SalesForecasting-master/change_reqs.py": {},
    "Capstone-SalesForecasting-master/old_conftest.py": {},
    "Capstone-SalesForecasting-master/setup.py": {},
    "Capstone-SalesForecasting-master/docs/conf.py": {},
    "Capstone-SalesForecasting-master/notebooks/data_wrangling/S01-import.py": {},
    "Capstone-SalesForecasting-master/notebooks/data_wrangling/S02-merge.py": {},
    "Capstone-SalesForecasting-master/notebooks/data_wrangling/test_data_wrangling.py": {
        "TestNotebook_Data_Wrangling_S01.test_gets_all_csvs": {
            "name": "test_gets_all_csvs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebook_Data_Wrangling_S02.test_gets_all_csvs": {
            "name": "test_gets_all_csvs",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/notebooks/EDA/S01-intro.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S02-sales_chart.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S03-correlations.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S04-customers.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S05-promo1.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S06-promo2.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S07-promo_ANOVA.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S08-promo2.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S09-trend.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S10-day_of_week.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S11-state_holiday.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S12-school_holiday.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S13-assortment_store_type.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S14-store_closings.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S15-competition.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/S16-weather.py": {},
    "Capstone-SalesForecasting-master/notebooks/EDA/test_EDA.py": {
        "TestNotebook_EDA_S01.test_it_works": {
            "name": "test_it_works",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/src/__init__.py": {},
    "Capstone-SalesForecasting-master/src/data/make_dataset.py": {
        "import_csvs": {
            "name": "import_csvs",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "convert_to_snake_case": {
            "name": "convert_to_snake_case",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "clean_other_dfs": {
            "name": "clean_other_dfs",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "clean_googletrend_csv": {
            "name": "clean_googletrend_csv",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "clean_store_csv": {
            "name": "clean_store_csv",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "clean_weather_csv": {
            "name": "clean_weather_csv",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "merge_dfs": {
            "name": "merge_dfs",
            "location": 158,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "raw_dfs_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "Capstone-SalesForecasting-master/src/data/__init__.py": {},
    "Capstone-SalesForecasting-master/src/features/build_features.py": {},
    "Capstone-SalesForecasting-master/src/features/__init__.py": {},
    "Capstone-SalesForecasting-master/src/models/predict_model.py": {
        "get_pred_single_val": {
            "name": "get_pred_single_val",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "data": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "errors_in_kwargs": {
            "name": "errors_in_kwargs",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "predict": {
            "name": "predict",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "data_path": [],
                "models_path": []
            }
        }
    },
    "Capstone-SalesForecasting-master/src/models/preprocess.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "inp_df": []
            }
        },
        "gather_args": {
            "name": "gather_args",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "df": []
            }
        }
    },
    "Capstone-SalesForecasting-master/src/models/train_model.py": {
        "rmspe": {
            "name": "rmspe",
            "location": 30,
            "return": [
                "float"
            ],
            "arguments": {
                "predicted": [],
                "actual": []
            }
        },
        "get_pred_new_data_old_model": {
            "name": "get_pred_new_data_old_model",
            "location": 35,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "valid_df": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "get_new_model_and_pred": {
            "name": "get_new_model_and_pred",
            "location": 63,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "train": [],
                "valid": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "compare_rmspes": {
            "name": "compare_rmspes",
            "location": 142,
            "return": [
                "Tuple[(Union[(_T0, _T2)], Union[(_T0, _T2)])]"
            ],
            "arguments": {
                "model0": [
                    "_T0"
                ],
                "rmspe0": [],
                "model1": [
                    "_T2"
                ],
                "rmspe1": []
            }
        },
        "save_models": {
            "name": "save_models",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "winner": [],
                "loser": []
            }
        }
    },
    "Capstone-SalesForecasting-master/src/models/__init__.py": {},
    "Capstone-SalesForecasting-master/src/visualization/visualize.py": {},
    "Capstone-SalesForecasting-master/src/visualization/__init__.py": {},
    "Capstone-SalesForecasting-master/tests/test_make_dataset_with_constraints.py": {
        "test_convert_to_snake_case": {
            "name": "test_convert_to_snake_case",
            "location": 92,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "test_Import_Csvs.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.test_import_csvs_pulls_all_csvs": {
            "name": "test_import_csvs_pulls_all_csvs",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.test_import_csvs_pulls_no_csvs_from_empty_directory": {
            "name": "test_import_csvs_pulls_no_csvs_from_empty_directory",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.test_import_csvs_can_ignore_files": {
            "name": "test_import_csvs_can_ignore_files",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.test_import_csvs_can_ignore_files_as_list": {
            "name": "test_import_csvs_can_ignore_files_as_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Import_Csvs.test_import_csvs_can_ignore_files_as_list_2": {
            "name": "test_import_csvs_can_ignore_files_as_list_2",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.setUp": {
            "name": "setUp",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.tearDown": {
            "name": "tearDown",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_input_csvs_meet_constraints": {
            "name": "test_input_csvs_meet_constraints",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_googletrend": {
            "name": "test_clean_googletrend",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_state_names": {
            "name": "test_clean_state_names",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_store_states": {
            "name": "test_clean_store_states",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_store_csv": {
            "name": "test_clean_store_csv",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_train_csv": {
            "name": "test_clean_train_csv",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_clean_weather_csv": {
            "name": "test_clean_weather_csv",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_merged_csv_has_google_states_names_store_train_and_weather": {
            "name": "test_merged_csv_has_google_states_names_store_train_and_weather",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Merge_Csvs.test_wrangled_csv_meets_constraints": {
            "name": "test_wrangled_csv_meets_constraints",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Wrangled_Csv.setUp": {
            "name": "setUp",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Wrangled_Csv.tearDown": {
            "name": "tearDown",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Wrangled_Csv.test_wrangled_csv_correct": {
            "name": "test_wrangled_csv_correct",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/tests/test_predict_model.py": {
        "TestPredictModel.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.tearDown": {
            "name": "tearDown",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_no_parameters_gets_error_message": {
            "name": "test_no_parameters_gets_error_message",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_both_parameters_gets_error_message": {
            "name": "test_both_parameters_gets_error_message",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_test_value_oob_gets_error_message": {
            "name": "test_test_value_oob_gets_error_message",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_correct_test_value_call_works": {
            "name": "test_correct_test_value_call_works",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_correct_test_value_call_with_context_works": {
            "name": "test_correct_test_value_call_with_context_works",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictModel.test_correct_new_value_call_works": {
            "name": "test_correct_new_value_call_works",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/tests/test_preprocess.py": {
        "Test_Preprocessing.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Preprocessing.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Preprocessing.test_preprocessing": {
            "name": "test_preprocessing",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Preprocessing.test_gather_args": {
            "name": "test_gather_args",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/tests/test_system.py": {
        "test_Make_Dataset.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Make_Dataset.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Make_Dataset.test_make_dataset_happy_path": {
            "name": "test_make_dataset_happy_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Capstone-SalesForecasting-master/tests/test_train_model.py": {
        "TestTrainModel.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainModel.tearDown": {
            "name": "tearDown",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainModel.test_rmspe": {
            "name": "test_rmspe",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainModel.test_get_pred_new_data_old_model": {
            "name": "test_get_pred_new_data_old_model",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainModel.test_get_pred_new_data_old_model_calls_pt1": {
            "name": "test_get_pred_new_data_old_model_calls_pt1",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "mock_load_learner": [],
                "mock_preprocess": []
            }
        },
        "TestTrainModel.test_get_pred_new_data_old_model_calls_pt2": {
            "name": "test_get_pred_new_data_old_model_calls_pt2",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "mock_rmspe": [],
                "mock_get_preds": []
            }
        },
        "TestTrainModel.test_get_pred_new_model_calls_fns": {
            "name": "test_get_pred_new_model_calls_fns",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "mock_tabular_learner": [],
                "mock_tabular_list": [],
                "mock_gather_args": [],
                "mock_preprocess": []
            }
        },
        "TestTrainModel.test_compare_rmspes": {
            "name": "test_compare_rmspes",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainModel.test_save_models": {
            "name": "test_save_models",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "mock_Learner_export": [],
                "mock_Learner_save": []
            }
        }
    },
    "Capstone-SalesForecasting-master/tests/constraints/detect_anomalies.py": {},
    "Capstone-SalesForecasting-master/tests/constraints/generate_constraints.py": {},
    "Capstone-SalesForecasting-master/tests/constraints/verify_constraints.py": {}
}
{
    "Clean-Code-in-Python-master/Chapter01/before_black.py": {
        "my_function": {
            "name": "my_function",
            "location": 14,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/annotations.py": {
        "locate": {
            "name": "locate",
            "location": 14,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lat": [],
                "long": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/test_annotations.py": {
        "test_annotations": {
            "name": "test_annotations",
            "location": 18,
            "return": [],
            "arguments": {
                "element": [],
                "expected": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/__init__.py": {},
    "Clean-Code-in-Python-master/Chapter02/callables.py": {
        "CallCount.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallCount.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/caveats.py": {
        "wrong_user_display": {
            "name": "wrong_user_display",
            "location": 9,
            "return": [],
            "arguments": {
                "user_metadata": []
            }
        },
        "user_display": {
            "name": "user_display",
            "location": 16,
            "return": [],
            "arguments": {
                "user_metadata": []
            }
        },
        "BadList.__getitem__": {
            "name": "__getitem__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "GoodList.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/container.py": {
        "mark_coordinate": {
            "name": "mark_coordinate",
            "location": 4,
            "return": [],
            "arguments": {
                "grid": [],
                "coord": []
            }
        },
        "Boundaries.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        },
        "Boundaries.__contains__": {
            "name": "__contains__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "coord": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        },
        "Grid.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "coord": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/contextmanagers.py": {
        "stop_database": {
            "name": "stop_database",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "start_database": {
            "name": "start_database",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "db_backup": {
            "name": "db_backup",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "db_handler": {
            "name": "db_handler",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "offline_backup": {
            "name": "offline_backup",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "DBHandler.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBHandler.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "ex_value": [],
                "ex_traceback": []
            }
        },
        "dbhandler_decorator.__enter__": {
            "name": "__enter__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dbhandler_decorator.__exit__": {
            "name": "__exit__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ext_type": [],
                "ex_value": [],
                "ex_traceback": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/dynamic.py": {
        "DynamicAttributes.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": []
            }
        },
        "DynamicAttributes.__getattr__": {
            "name": "__getattr__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/indices.py": {
        "index_last": {
            "name": "index_last",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "get_slices": {
            "name": "get_slices",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter02/iterables.py": {
        "DateRangeIterable.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "DateRangeIterable.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateRangeIterable.__next__": {
            "name": "__next__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateRangeContainerIterable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "DateRangeContainerIterable.__iter__": {
            "name": "__iter__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateRangeSequence.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "DateRangeSequence._create_range": {
            "name": "_create_range",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateRangeSequence.__getitem__": {
            "name": "__getitem__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "day_no": []
            }
        },
        "DateRangeSequence.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/properties.py": {
        "is_valid_email": {
            "name": "is_valid_email",
            "location": 8,
            "return": [],
            "arguments": {
                "potentially_valid_email": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "User.email": {
            "name": "email",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "new_email": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/sequences.py": {
        "Items.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Items.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Items.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/test_ch02.py": {
        "TestCaveats.test_bad_list": {
            "name": "test_bad_list",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaveats.test_good_list": {
            "name": "test_good_list",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequences.test_items": {
            "name": "test_items",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_is_valid_email": {
            "name": "test_is_valid_email",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_invalid_email": {
            "name": "test_invalid_email",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_user_valid_email": {
            "name": "test_user_valid_email",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_user_invalid_domain": {
            "name": "test_user_invalid_domain",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterables.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterables._base_test_date_range": {
            "name": "_base_test_date_range",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "range_cls": []
            }
        },
        "TestIterables.test_date_range": {
            "name": "test_date_range",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIterables.test_date_range_sequence": {
            "name": "test_date_range_sequence",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDynamic.test_dynamic_attributes": {
            "name": "test_dynamic_attributes",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_1.py": {
        "Connector.connect": {
            "name": "connect",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connector.send": {
            "name": "send",
            "location": 19,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Event.decode": {
            "name": "decode",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "connector": []
            }
        },
        "DataTransport.deliver_event": {
            "name": "deliver_event",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "DataTransport.connect": {
            "name": "connect",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.send": {
            "name": "send",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_2.py": {
        "connect_with_retry": {
            "name": "connect_with_retry",
            "location": 31,
            "return": [],
            "arguments": {
                "connector": [],
                "retry_n_times": [],
                "retry_threshold": []
            }
        },
        "Connector.connect": {
            "name": "connect",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connector.send": {
            "name": "send",
            "location": 19,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Event.decode": {
            "name": "decode",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "connector": []
            }
        },
        "DataTransport.deliver_event": {
            "name": "deliver_event",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "DataTransport.send": {
            "name": "send",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_3.py": {
        "process": {
            "name": "process",
            "location": 11,
            "return": [],
            "arguments": {
                "data_dictionary": [],
                "record_id": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/inheritance_antipattern.py": {
        "TransactionalPolicy.change_in_policy": {
            "name": "change_in_policy",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "TestPolicy.test_get_policy": {
            "name": "test_get_policy",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/inheritance_patterns.py": {
        "TransactionalPolicy.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "policy_data": []
            }
        },
        "TransactionalPolicy.change_in_policy": {
            "name": "change_in_policy",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "TransactionalPolicy.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "TransactionalPolicy.__len__": {
            "name": "__len__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPolicy.test_get_policy": {
            "name": "test_get_policy",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/kis.py": {
        "ComplicatedNamespace.init_with_data": {
            "name": "init_with_data",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/multiple_inheritance.py": {
        "BaseModule.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "module_name": []
            }
        },
        "BaseModule.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/multiple_inheritance_2.py": {
        "BaseTokenizer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "str_token": []
            }
        },
        "BaseTokenizer.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpperIterableMixin.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/orthogonal.py": {
        "calculate_price": {
            "name": "calculate_price",
            "location": 8,
            "return": [],
            "arguments": {
                "base_price": [],
                "tax": [],
                "discount": []
            }
        },
        "show_price": {
            "name": "show_price",
            "location": 19,
            "return": [],
            "arguments": {
                "price": []
            }
        },
        "str_final_price": {
            "name": "str_final_price",
            "location": 30,
            "return": [],
            "arguments": {
                "base_price": [],
                "tax": [],
                "discount": [],
                "fmt_function": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/packing_1.py": {
        "bad_users_from_rows": {
            "name": "bad_users_from_rows",
            "location": 20,
            "return": [],
            "arguments": {
                "dbrows": []
            }
        },
        "users_from_rows": {
            "name": "users_from_rows",
            "location": 25,
            "return": [],
            "arguments": {
                "dbrows": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "first_name": [],
                "last_name": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_1.py": {
        "FailsAfterNTimes.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "n_times": [],
                "with_exception": []
            }
        },
        "FailsAfterNTimes.connect": {
            "name": "connect",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailsAfterNTimes.send": {
            "name": "send",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestTransport.test_connects_after_retries": {
            "name": "test_connects_after_retries",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_connects_directly": {
            "name": "test_connects_directly",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_connection_error": {
            "name": "test_connection_error",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_error_in_event": {
            "name": "test_error_in_event",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_2.py": {
        "FailsAfterNTimes.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "n_times": [],
                "with_exception": []
            }
        },
        "FailsAfterNTimes.connect": {
            "name": "connect",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailsAfterNTimes.send": {
            "name": "send",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestTransport.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransport.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransport.test_connects_after_retries": {
            "name": "test_connects_after_retries",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_connects_directly": {
            "name": "test_connects_directly",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_connection_error": {
            "name": "test_connection_error",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        },
        "TestTransport.test_error_in_event": {
            "name": "test_error_in_event",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "sleep": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_3.py": {
        "TestExceptions.test_original_exception": {
            "name": "test_original_exception",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/lsp_1.py": {
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": [],
                "override": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/lsp_2.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 19,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "Event.meets_condition_pre": {
            "name": "meets_condition_pre",
            "location": 23,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 40,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 49,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "TransactionEvent.meets_condition": {
            "name": "meets_condition",
            "location": 60,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_1.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_2.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 14,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 24,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 33,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_3.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 17,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 27,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 36,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "TransactionEvent.meets_condition": {
            "name": "meets_condition",
            "location": 47,
            "return": [],
            "arguments": {
                "event_data": []
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "event_data": []
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/srp_1.py": {
        "SystemMonitor.load_activity": {
            "name": "load_activity",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemMonitor.identify_events": {
            "name": "identify_events",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemMonitor.stream_events": {
            "name": "stream_events",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_1.py": {
        "LoginEventSerializer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "LoginEventSerializer.serialize": {
            "name": "serialize",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "ip": [],
                "timestamp": []
            }
        },
        "LoginEvent.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginEventSerialized.test_serializetion": {
            "name": "test_serializetion",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_2.py": {
        "hide_field": {
            "name": "hide_field",
            "location": 11,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 15,
            "return": [],
            "arguments": {
                "field_timestamp": []
            }
        },
        "show_original": {
            "name": "show_original",
            "location": 19,
            "return": [],
            "arguments": {
                "event_field": []
            }
        },
        "EventSerializer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "serialization_fields": []
            }
        },
        "EventSerializer.serialize": {
            "name": "serialize",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Serialization.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Serialization.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "event_class": []
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "ip": [],
                "timestamp": []
            }
        },
        "TestLoginEventSerialized.test_serialization": {
            "name": "test_serialization",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Serialization.__call__.serialize_method": {
            "name": "serialize_method",
            "location": 82,
            "return": [],
            "arguments": {
                "event_instance": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_3.py": {
        "TestLoginEventSerialized.test_serializetion": {
            "name": "test_serializetion",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dataclass": {
            "name": "dataclass",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_function_1.py": {
        "retry": {
            "name": "retry",
            "location": 16,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "run_operation": {
            "name": "run_operation",
            "location": 70,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "retry.wrapped": {
            "name": "wrapped",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "OperationObject.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperationObject.run": {
            "name": "run",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OperationObject.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunWithFailure.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "task": [],
                "fail_n_times": [],
                "exception_cls": []
            }
        },
        "RunWithFailure.run": {
            "name": "run",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_function_2.py": {
        "run_operation": {
            "name": "run_operation",
            "location": 33,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "operation": []
            }
        },
        "Retry.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_doc": {
            "name": "test_doc",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_parametrized_1.py": {
        "with_retry": {
            "name": "with_retry",
            "location": 15,
            "return": [],
            "arguments": {
                "retries_limit": [],
                "allowed_exceptions": []
            }
        },
        "run_operation": {
            "name": "run_operation",
            "location": 38,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_retries_limit": {
            "name": "run_with_custom_retries_limit",
            "location": 43,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_exceptions": {
            "name": "run_with_custom_exceptions",
            "location": 48,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_parameters": {
            "name": "run_with_custom_parameters",
            "location": 55,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "with_retry.retry": {
            "name": "retry",
            "location": 18,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "with_retry.retry.wrapped": {
            "name": "wrapped",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_parametrized_2.py": {
        "run_operation": {
            "name": "run_operation",
            "location": 37,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_retries_limit": {
            "name": "run_with_custom_retries_limit",
            "location": 42,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_exceptions": {
            "name": "run_with_custom_exceptions",
            "location": 47,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "run_with_custom_parameters": {
            "name": "run_with_custom_parameters",
            "location": 54,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "WithRetry.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "retries_limit": [],
                "allowed_exceptions": []
            }
        },
        "WithRetry.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "operation": []
            }
        },
        "WithRetry.__call__.wrapped": {
            "name": "wrapped",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_side_effects_1.py": {
        "traced_function_wrong": {
            "name": "traced_function_wrong",
            "location": 12,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "process_with_delay": {
            "name": "process_with_delay",
            "location": 29,
            "return": [],
            "arguments": {
                "callback": [],
                "delay": []
            }
        },
        "traced_function": {
            "name": "traced_function",
            "location": 34,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "call_with_delay": {
            "name": "call_with_delay",
            "location": 49,
            "return": [],
            "arguments": {
                "callback": [],
                "delay": []
            }
        },
        "traced_function_wrong.wrapped": {
            "name": "wrapped",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "traced_function.wrapped": {
            "name": "wrapped",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_side_effects_2.py": {
        "register_event": {
            "name": "register_event",
            "location": 11,
            "return": [],
            "arguments": {
                "event_cls": []
            }
        },
        "test": {
            "name": "test",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_SoC_1.py": {
        "traced_function": {
            "name": "traced_function",
            "location": 12,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "operation1": {
            "name": "operation1",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "traced_function.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_SoC_2.py": {
        "log_execution": {
            "name": "log_execution",
            "location": 12,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "measure_time": {
            "name": "measure_time",
            "location": 21,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "operation": {
            "name": "operation",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "log_execution.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "measure_time.wrapped": {
            "name": "wrapped",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_universal_1.py": {
        "inject_db_driver": {
            "name": "inject_db_driver",
            "location": 20,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "run_query": {
            "name": "run_query",
            "location": 33,
            "return": [],
            "arguments": {
                "driver": []
            }
        },
        "DBDriver.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "dbstring": []
            }
        },
        "DBDriver.execute": {
            "name": "execute",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "inject_db_driver.wrapped": {
            "name": "wrapped",
            "location": 26,
            "return": [],
            "arguments": {
                "dbstring": []
            }
        },
        "DataHandler.run_query": {
            "name": "run_query",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "driver": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_universal_2.py": {
        "run_query": {
            "name": "run_query",
            "location": 40,
            "return": [],
            "arguments": {
                "driver": []
            }
        },
        "DBDriver.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "dbstring": []
            }
        },
        "DBDriver.execute": {
            "name": "execute",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "inject_db_driver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "inject_db_driver.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "dbstring": []
            }
        },
        "inject_db_driver.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "DataHandler.run_query": {
            "name": "run_query",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "driver": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_wraps_1.py": {
        "trace_decorator": {
            "name": "trace_decorator",
            "location": 10,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "process_account": {
            "name": "process_account",
            "location": 19,
            "return": [],
            "arguments": {
                "account_id": []
            }
        },
        "trace_decorator.wrapped": {
            "name": "wrapped",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_wraps_2.py": {
        "trace_decorator": {
            "name": "trace_decorator",
            "location": 11,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "process_account": {
            "name": "process_account",
            "location": 23,
            "return": [],
            "arguments": {
                "account_id": []
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 29,
            "return": [],
            "arguments": {
                "original_function": []
            }
        },
        "trace_decorator.wrapped": {
            "name": "wrapped",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "decorator.decorated_function": {
            "name": "decorated_function",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/log.py": {},
    "Clean-Code-in-Python-master/Chapter05/test_decorator_parametrized.py": {
        "test_cases": {
            "name": "test_cases",
            "location": 43,
            "return": [],
            "arguments": {
                "test_functions": []
            }
        },
        "WithRetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_retry_custom_limit_ok": {
            "name": "test_retry_custom_limit_ok",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_retry_custom_limit_fail": {
            "name": "test_retry_custom_limit_fail",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_custom_exception_fails": {
            "name": "test_custom_exception_fails",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_custom_parameters_and_exception_fails": {
            "name": "test_custom_parameters_and_exception_fails",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_run_with_custom_parameters_controlled": {
            "name": "test_run_with_custom_parameters_controlled",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_decorator_SoC.py": {
        "mocked_time": {
            "name": "mocked_time",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "mocked_time.time": {
            "name": "time",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "TestSoC1.test_operation": {
            "name": "test_operation",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "time": [],
                "sleep": []
            }
        },
        "TestSoC2.test_operation": {
            "name": "test_operation",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "logger": [],
                "time": [],
                "sleep": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_decorator_universal.py": {
        "TestDecorator.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_function_ok": {
            "name": "test_decorator_function_ok",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_method_fails": {
            "name": "test_decorator_method_fails",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_function_2": {
            "name": "test_decorator_function_2",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_method_2": {
            "name": "test_decorator_method_2",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_wraps.py": {
        "TestWraps1.test_name_incorrect": {
            "name": "test_name_incorrect",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWraps1.test_no_docstring": {
            "name": "test_no_docstring",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWraps2.test_name_solved": {
            "name": "test_name_solved",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWraps2.test_docsting_preserved": {
            "name": "test_docsting_preserved",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_1.py": {
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_1.py": {
        "Method.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Method.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "arg1": [],
                "arg2": []
            }
        },
        "NewMethod.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NewMethod.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "arg1": [],
                "arg2": []
            }
        },
        "NewMethod.__get__": {
            "name": "__get__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_2.py": {
        "Coordinate2D.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "lat": [],
                "long": []
            }
        },
        "Coordinate2D.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_3.py": {
        "read_prefix_from_config": {
            "name": "read_prefix_from_config",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "ClassMethod.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "ClassMethod.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassMethod.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "MyClass.class_method": {
            "name": "class_method",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "arg1": [],
                "arg2": []
            }
        },
        "MyClass.method": {
            "name": "method",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "fget": []
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "TableEvent.topic": {
            "name": "topic",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_implementation_1.py": {
        "SharedDataDescriptor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "SharedDataDescriptor.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "SharedDataDescriptor.__set__": {
            "name": "__set__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_implementation_2.py": {
        "DescriptorClass.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "DescriptorClass.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_1.py": {
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_2.py": {
        "Validation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "validation_function": [],
                "error_msg": []
            }
        },
        "Validation.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__set_name__": {
            "name": "__set_name__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "Field.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.__set__": {
            "name": "__set__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_3.py": {
        "ProtectedAttribute.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "requires_role": []
            }
        },
        "ProtectedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "ProtectedAttribute.__set__": {
            "name": "__set__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "value": []
            }
        },
        "ProtectedAttribute.__delete__": {
            "name": "__delete__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "email": [],
                "permission_list": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_4.py": {
        "DescriptorWithName.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DescriptorWithName.__get__": {
            "name": "__get__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "DescriptorWithName.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "DescriptorWithAutomaticName.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DescriptorWithAutomaticName.__set_name__": {
            "name": "__set_name__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_pythonic_1.py": {
        "Traveller.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "current_city": []
            }
        },
        "Traveller.current_city": {
            "name": "current_city",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "new_city": []
            }
        },
        "Traveller.cities_visited": {
            "name": "cities_visited",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_pythonic_2.py": {
        "HistoryTracedAttribute.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "trace_attribute_name": []
            }
        },
        "HistoryTracedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "HistoryTracedAttribute.__get__": {
            "name": "__get__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "HistoryTracedAttribute.__set__": {
            "name": "__set__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "HistoryTracedAttribute._track_change_in_value_for_instance": {
            "name": "_track_change_in_value_for_instance",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "HistoryTracedAttribute._needs_to_track_change": {
            "name": "_needs_to_track_change",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "HistoryTracedAttribute._set_default": {
            "name": "_set_default",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Traveller.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "current_city": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_types_1.py": {
        "NonDataDescriptor.__get__": {
            "name": "__get__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_types_2.py": {
        "DataDescriptor.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "DataDescriptor.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_uses_1.py": {
        "BaseFieldTransformation.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "transformation": []
            }
        },
        "BaseFieldTransformation.__get__": {
            "name": "__get__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "BaseFieldTransformation.__set_name__": {
            "name": "__set_name__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "BaseFieldTransformation.__set__": {
            "name": "__set__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "ip": [],
                "timestamp": []
            }
        },
        "LoginEvent.serialize": {
            "name": "serialize",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent._fields_to_serialize": {
            "name": "_fields_to_serialize",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/log.py": {},
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_cpython.py": {
        "TestDescriptorsCPython1.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDescriptorsCPython1.test_method_unbound_fails": {
            "name": "test_method_unbound_fails",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDescriptorsCPython1.test_working_example": {
            "name": "test_working_example",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_methods.py": {
        "TestSet.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_name": {
            "name": "test_name",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_invalid_parameters_not_assigned": {
            "name": "test_invalid_parameters_not_assigned",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_assign_valid_data": {
            "name": "test_assign_valid_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_assing_valie_then_invalid": {
            "name": "test_assing_valie_then_invalid",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_email": {
            "name": "test_delete_email",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_no_set_none": {
            "name": "test_no_set_none",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_cannot_delete": {
            "name": "test_cannot_delete",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_uses_1.py": {
        "BaseTestLoginEvent.test_serialization": {
            "name": "test_serialization",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTestLoginEvent.test_retrieve_transformed_value": {
            "name": "test_retrieve_transformed_value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTestLoginEvent.test_object_keeps_original_values": {
            "name": "test_object_keeps_original_values",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoginEvent.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNewLoginEvent.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_1.py": {
        "_load_purchases": {
            "name": "_load_purchases",
            "location": 58,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "load_purchases": {
            "name": "load_purchases",
            "location": 68,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "PurchasesStats.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "purchases": []
            }
        },
        "PurchasesStats._initialize": {
            "name": "_initialize",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats.process": {
            "name": "process",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats._update_min": {
            "name": "_update_min",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "PurchasesStats._update_max": {
            "name": "_update_max",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "PurchasesStats.avg_price": {
            "name": "avg_price",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats._update_avg": {
            "name": "_update_avg",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "PurchasesStats.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_2.py": {
        "sequence": {
            "name": "sequence",
            "location": 7,
            "return": [],
            "arguments": {
                "start": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_coroutines_1.py": {
        "stream_db_records": {
            "name": "stream_db_records",
            "location": 26,
            "return": [],
            "arguments": {
                "db_handler": []
            }
        },
        "stream_data": {
            "name": "stream_data",
            "location": 48,
            "return": [],
            "arguments": {
                "db_handler": []
            }
        },
        "DBHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "DBHandler.read_n_records": {
            "name": "read_n_records",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "DBHandler.close": {
            "name": "close",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_coroutines_2.py": {
        "_stream_db_records": {
            "name": "_stream_db_records",
            "location": 8,
            "return": [],
            "arguments": {
                "db_handler": []
            }
        },
        "stream_db_records": {
            "name": "stream_db_records",
            "location": 24,
            "return": [],
            "arguments": {
                "db_handler": []
            }
        },
        "prepare_coroutine": {
            "name": "prepare_coroutine",
            "location": 35,
            "return": [],
            "arguments": {
                "coroutine": []
            }
        },
        "auto_stream_db_records": {
            "name": "auto_stream_db_records",
            "location": 45,
            "return": [],
            "arguments": {
                "db_handler": []
            }
        },
        "prepare_coroutine.wrapped": {
            "name": "wrapped",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_iteration_1.py": {
        "SequenceIterator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "step": []
            }
        },
        "SequenceIterator.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_iteration_2.py": {
        "SequenceWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "original_sequence": []
            }
        },
        "SequenceWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "SequenceWrapper.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MappedRange.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "transformation": [],
                "start": [],
                "end": []
            }
        },
        "MappedRange.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MappedRange.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_1.py": {
        "sequence": {
            "name": "sequence",
            "location": 58,
            "return": [],
            "arguments": {
                "start": []
            }
        },
        "NumberSequence.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "NumberSequence.next": {
            "name": "next",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceOfNumbers.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "SequenceOfNumbers.__next__": {
            "name": "__next__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceOfNumbers.__iter__": {
            "name": "__iter__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_2.py": {
        "partition": {
            "name": "partition",
            "location": 28,
            "return": [],
            "arguments": {
                "condition": [],
                "iterable": []
            }
        },
        "is_even": {
            "name": "is_even",
            "location": 45,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "show": {
            "name": "show",
            "location": 49,
            "return": [],
            "arguments": {
                "records": []
            }
        },
        "IteratorWrapper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IteratorWrapper.__next__": {
            "name": "__next__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IteratorWrapper.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_3.py": {
        "produce_values": {
            "name": "produce_values",
            "location": 14,
            "return": [],
            "arguments": {
                "how_many": []
            }
        },
        "process_purchases": {
            "name": "process_purchases",
            "location": 20,
            "return": [],
            "arguments": {
                "purchases": []
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_4.py": {
        "search_nested_bad": {
            "name": "search_nested_bad",
            "location": 11,
            "return": [],
            "arguments": {
                "array": [],
                "desired_value": []
            }
        },
        "_iterate_array2d": {
            "name": "_iterate_array2d",
            "location": 30,
            "return": [],
            "arguments": {
                "array2d": []
            }
        },
        "search_nested": {
            "name": "search_nested",
            "location": 36,
            "return": [],
            "arguments": {
                "array": [],
                "desired_value": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_1.py": {
        "chain": {
            "name": "chain",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "_chain": {
            "name": "_chain",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "all_powers": {
            "name": "all_powers",
            "location": 23,
            "return": [],
            "arguments": {
                "n": [],
                "power": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_2.py": {
        "sequence": {
            "name": "sequence",
            "location": 9,
            "return": [],
            "arguments": {
                "name": [],
                "start": [],
                "end": []
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_3.py": {
        "sequence": {
            "name": "sequence",
            "location": 13,
            "return": [],
            "arguments": {
                "name": [],
                "start": [],
                "end": []
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/log.py": {},
    "Clean-Code-in-Python-master/Chapter07/test_generators.py": {
        "TestPurchaseStats.test_calculations": {
            "name": "test_calculations",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPurchaseStats.test_empty": {
            "name": "test_empty",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_coroutines.py": {
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClose.test_close_called": {
            "name": "test_close_called",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrow.test_throw_controlled_exception": {
            "name": "test_throw_controlled_exception",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrow.test_unhandled_exception": {
            "name": "test_unhandled_exception",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_default_value": {
            "name": "test_default_value",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_with_fixed_value": {
            "name": "test_with_fixed_value",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_first_call_fixed_value": {
            "name": "test_first_call_fixed_value",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_default_value": {
            "name": "test_default_value",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_with_fixed_value": {
            "name": "test_with_fixed_value",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_first_call_fixed_value": {
            "name": "test_first_call_fixed_value",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_iteration.py": {
        "TestSequenceWrapper.test_sequence": {
            "name": "test_sequence",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_limits": {
            "name": "test_limits",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_getitem": {
            "name": "test_getitem",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_iterate": {
            "name": "test_iterate",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_pythonic.py": {
        "TestPurchaseStats.test_calculations": {
            "name": "test_calculations",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPurchaseStats.test_empty": {
            "name": "test_empty",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifiedIteration.test_found": {
            "name": "test_found",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifiedIteration.test_not_found": {
            "name": "test_not_found",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/_generate_data.py": {
        "create_purchases_file": {
            "name": "create_purchases_file",
            "location": 8,
            "return": [],
            "arguments": {
                "filename": [],
                "entries": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/constants.py": {},
    "Clean-Code-in-Python-master/Chapter08/coverage_1.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_context": []
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/doctest_module.py": {
        "convert_num": {
            "name": "convert_num",
            "location": 1,
            "return": [],
            "arguments": {
                "num_str": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/doctest_module_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 6,
            "return": [],
            "arguments": {
                "loader": [],
                "tests": [],
                "ignore": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mock_1.py": {
        "author_by_id": {
            "name": "author_by_id",
            "location": 20,
            "return": [],
            "arguments": {
                "commit_id": [],
                "branch": []
            }
        },
        "GitBranch.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "commits": []
            }
        },
        "GitBranch.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "commit_id": []
            }
        },
        "GitBranch.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mock_2.py": {
        "BuildStatus.build_date": {
            "name": "build_date",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "BuildStatus.notify": {
            "name": "notify",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "merge_request_id": [],
                "status": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mrstatus.py": {},
    "Clean-Code-in-Python-master/Chapter08/mutation_testing_1.py": {
        "evaluate_merge_request": {
            "name": "evaluate_merge_request",
            "location": 8,
            "return": [],
            "arguments": {
                "upvote_count": [],
                "downvotes_count": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mutation_testing_2.py": {
        "evaluate_merge_request": {
            "name": "evaluate_merge_request",
            "location": 9,
            "return": [],
            "arguments": {
                "upvote_counts": [],
                "downvotes_count": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/refactoring_1.py": {
        "BuildStatus.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "BuildStatus.build_date": {
            "name": "build_date",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "BuildStatus.compose_payload": {
            "name": "compose_payload",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_id": [],
                "status": []
            }
        },
        "BuildStatus.deliver": {
            "name": "deliver",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "BuildStatus.notify": {
            "name": "notify",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_id": [],
                "status": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/refactoring_2.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_context": []
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_coverage_1.py": {
        "rejected_mr": {
            "name": "rejected_mr",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 19,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_with_approvals": {
            "name": "test_rejected_with_approvals",
            "location": 23,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_pending": {
            "name": "test_rejected_to_pending",
            "location": 29,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_approved": {
            "name": "test_rejected_to_approved",
            "location": 34,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 114,
            "return": [],
            "arguments": {
                "context": [],
                "expected_status": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mock_1.py": {
        "test_find_commit": {
            "name": "test_find_commit",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_find_any": {
            "name": "test_find_any",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mock_2.py": {
        "test_build_notification_sent": {
            "name": "test_build_notification_sent",
            "location": 16,
            "return": [],
            "arguments": {
                "mock_requests": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mutation_testing_1.py": {
        "TestMergeRequestEvaluation.test_approved": {
            "name": "test_approved",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mutation_testing_2.py": {
        "TestMergeRequestEvaluation.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestEvaluation.test_string_values": {
            "name": "test_string_values",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_refactoring_1.py": {
        "build_status": {
            "name": "build_status",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_build_notification_sent": {
            "name": "test_build_notification_sent",
            "location": 22,
            "return": [],
            "arguments": {
                "build_status": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_refactoring_2.py": {
        "TestMergeRequestStatus.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_rejected": {
            "name": "assert_rejected",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_pending": {
            "name": "assert_pending",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_approved": {
            "name": "assert_approved",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_approved": {
            "name": "test_approved",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_invalid_types": {
            "name": "test_invalid_types",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAcceptanceThreshold.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAcceptanceThreshold.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_design_2.py": {
        "TestWrappedClient.test_send_converts_types": {
            "name": "test_send_converts_types",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_frameworks.py": {
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_approved": {
            "name": "test_approved",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_invalid_types": {
            "name": "test_invalid_types",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtendedCases.test_cannot_upvote_on_closed_merge_request": {
            "name": "test_cannot_upvote_on_closed_merge_request",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtendedCases.test_cannot_downvote_on_closed_merge_request": {
            "name": "test_cannot_downvote_on_closed_merge_request",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsUTFrameworks3.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestsUTFrameworks3.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_frameworks_4.py": {
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 89,
            "return": [],
            "arguments": {
                "context": [],
                "expected_status": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_design_1.py": {
        "MetricsClient.send": {
            "name": "send",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "metric_name": [],
                "metric_value": []
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.process_iterations": {
            "name": "process_iterations",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "n_iterations": []
            }
        },
        "Process.run_process": {
            "name": "run_process",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_design_2.py": {
        "MetricsClient.send": {
            "name": "send",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "metric_name": [],
                "metric_value": []
            }
        },
        "WrappedClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WrappedClient.send": {
            "name": "send",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "metric_name": [],
                "metric_value": []
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.process_iterations": {
            "name": "process_iterations",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "n_iterations": []
            }
        },
        "Process.run_process": {
            "name": "run_process",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_1.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_2.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_3.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_context": []
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_4.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_5.py": {
        "rejected_mr": {
            "name": "rejected_mr",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 69,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_with_approvals": {
            "name": "test_rejected_with_approvals",
            "location": 73,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_pending": {
            "name": "test_rejected_to_pending",
            "location": 79,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_approved": {
            "name": "test_rejected_to_approved",
            "location": 84,
            "return": [],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 164,
            "return": [],
            "arguments": {
                "context": [],
                "expected_status": []
            }
        },
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request_context": []
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "by_user": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/adapter_1.py": {
        "UserSource.fetch": {
            "name": "fetch",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "username": []
            }
        },
        "UserSource._adapt_arguments": {
            "name": "_adapt_arguments",
            "location": 15,
            "return": [],
            "arguments": {
                "user_id": [],
                "username": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/adapter_2.py": {
        "UserSource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "username_lookup": []
            }
        },
        "UserSource.fetch": {
            "name": "fetch",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "username": []
            }
        },
        "UserSource._adapt_arguments": {
            "name": "_adapt_arguments",
            "location": 18,
            "return": [],
            "arguments": {
                "user_id": [],
                "username": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/chain_of_responsibility_1.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "next_event": []
            }
        },
        "Event.process": {
            "name": "process",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "logline": []
            }
        },
        "Event._process": {
            "name": "_process",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "logline": []
            }
        },
        "Event.can_process": {
            "name": "can_process",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "logline": []
            }
        },
        "Event._parse_data": {
            "name": "_parse_data",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "logline": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/composite_1.py": {
        "Product.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "price": []
            }
        },
        "Product.price": {
            "name": "price",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductBundle.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "perc_discount": []
            }
        },
        "ProductBundle.price": {
            "name": "price",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/decorator_1.py": {
        "DictQuery.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictQuery.render": {
            "name": "render",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryEnhancer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "QueryEnhancer.render": {
            "name": "render",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoveEmpty.render": {
            "name": "render",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitive.render": {
            "name": "render",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/decorator_2.py": {
        "remove_empty": {
            "name": "remove_empty",
            "location": 32,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "case_insensitive": {
            "name": "case_insensitive",
            "location": 36,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "DictQuery.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictQuery.render": {
            "name": "render",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryEnhancer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "QueryEnhancer.render": {
            "name": "render",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/log.py": {},
    "Clean-Code-in-Python-master/Chapter09/monostate_1.py": {
        "GitFetcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "GitFetcher.current_tag": {
            "name": "current_tag",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "new_tag": []
            }
        },
        "GitFetcher.pull": {
            "name": "pull",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_2.py": {
        "SharedAttribute.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "SharedAttribute.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "SharedAttribute.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "new_value": []
            }
        },
        "SharedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "GitFetcher.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "branch": []
            }
        },
        "GitFetcher.pull": {
            "name": "pull",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_3.py": {
        "BaseFetcher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "TagFetcher.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "TagFetcher.pull": {
            "name": "pull",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BranchFetcher.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "BranchFetcher.pull": {
            "name": "pull",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_4.py": {
        "SharedAllMixin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "TagFetcher.pull": {
            "name": "pull",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BranchFetcher.pull": {
            "name": "pull",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/state_1.py": {
        "MergeRequestState.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request": []
            }
        },
        "MergeRequestState.open": {
            "name": "open",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.close": {
            "name": "close",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.merge": {
            "name": "merge",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.open": {
            "name": "open",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.close": {
            "name": "close",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.merge": {
            "name": "merge",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.open": {
            "name": "open",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.close": {
            "name": "close",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.merge": {
            "name": "merge",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.open": {
            "name": "open",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.close": {
            "name": "close",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.merge": {
            "name": "merge",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "source_branch": [],
                "target_branch": []
            }
        },
        "MergeRequest.state": {
            "name": "state",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "new_state_cls": []
            }
        },
        "MergeRequest.open": {
            "name": "open",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.merge": {
            "name": "merge",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/state_2.py": {
        "MergeRequestState.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "merge_request": []
            }
        },
        "MergeRequestState.open": {
            "name": "open",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.close": {
            "name": "close",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.merge": {
            "name": "merge",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.open": {
            "name": "open",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.close": {
            "name": "close",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Open.merge": {
            "name": "merge",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.open": {
            "name": "open",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.close": {
            "name": "close",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Closed.merge": {
            "name": "merge",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.open": {
            "name": "open",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.close": {
            "name": "close",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Merged.merge": {
            "name": "merge",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "source_branch": [],
                "target_branch": []
            }
        },
        "MergeRequest.state": {
            "name": "state",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "new_state_cls": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__getattr__": {
            "name": "__getattr__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "MergeRequest.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_chain_of_responsibility_1.py": {
        "TestMatching.test_match_login_event": {
            "name": "test_match_login_event",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_match_logout": {
            "name": "test_match_logout",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_session_event": {
            "name": "test_session_event",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_no_reception": {
            "name": "test_no_reception",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_login": {
            "name": "test_login",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_login_first": {
            "name": "test_login_first",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_logout_first": {
            "name": "test_logout_first",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_generic_first": {
            "name": "test_generic_first",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_composite_1.py": {
        "TestProducts.test_product_bundle": {
            "name": "test_product_bundle",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProducts.test_nested_bundle": {
            "name": "test_nested_bundle",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_decorator_1.py": {
        "TestDecoration.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_no_decorate": {
            "name": "test_no_decorate",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_decorate": {
            "name": "test_decorate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_decorator_2.py": {
        "TestDecoration.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_no_decorate": {
            "name": "test_no_decorate",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_decorate": {
            "name": "test_decorate",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_1.py": {
        "TestFetcher.test_fetch_single": {
            "name": "test_fetch_single",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_fetch_multiple": {
            "name": "test_fetch_multiple",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_multiple_consecutive_versions": {
            "name": "test_multiple_consecutive_versions",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_never_set": {
            "name": "test_never_set",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_2.py": {
        "TestCurrentTag.test_fetch_single": {
            "name": "test_fetch_single",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_fetch_multiple": {
            "name": "test_fetch_multiple",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_multiple_consecutive_versions": {
            "name": "test_multiple_consecutive_versions",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_never_set": {
            "name": "test_never_set",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentBranch.test_current_branch": {
            "name": "test_current_branch",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_3.py": {
        "BaseTest.test_pull": {
            "name": "test_pull",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_change_any": {
            "name": "test_change_any",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_not_any": {
            "name": "test_not_any",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTag.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBranch.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagAndBranch.test_tag_and_branch": {
            "name": "test_tag_and_branch",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_4.py": {
        "BaseTest.test_pull": {
            "name": "test_pull",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_change_any": {
            "name": "test_change_any",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_not_any": {
            "name": "test_not_any",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTag.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBranch.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagAndBranch.test_tag_and_branch": {
            "name": "test_tag_and_branch",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_state_1.py": {
        "TestMergeRequestTransitions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_reopen": {
            "name": "test_reopen",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_closed": {
            "name": "test_open_to_closed",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_closed_to_open": {
            "name": "test_closed_to_open",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_double_close": {
            "name": "test_double_close",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_merge": {
            "name": "test_open_to_merge",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_merge_is_final": {
            "name": "test_merge_is_final",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_cannot_merge_closed": {
            "name": "test_cannot_merge_closed",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_state_2.py": {
        "TestMergeRequestTransitions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_reopen": {
            "name": "test_reopen",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_closed": {
            "name": "test_open_to_closed",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_closed_to_open": {
            "name": "test_closed_to_open",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_double_close": {
            "name": "test_double_close",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_merge": {
            "name": "test_open_to_merge",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_merge_is_final": {
            "name": "test_merge_is_final",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_cannot_merge_closed": {
            "name": "test_cannot_merge_closed",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/_adapter_base.py": {
        "UsernameLookup.search": {
            "name": "search",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "user_namespace": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/client.py": {
        "_extract_from_env": {
            "name": "_extract_from_env",
            "location": 12,
            "return": [],
            "arguments": {
                "variable": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/converters.py": {
        "build_dispatched": {
            "name": "build_dispatched",
            "location": 6,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "build_in_transit": {
            "name": "build_in_transit",
            "location": 10,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "build_delivered": {
            "name": "build_delivered",
            "location": 14,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "build_from_row": {
            "name": "build_from_row",
            "location": 37,
            "return": [],
            "arguments": {
                "delivery_id": [],
                "row": []
            }
        },
        "WrappedRow.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "WrappedRow.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "attrname": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/status.py": {
        "DispatchedOrder.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "when": []
            }
        },
        "DispatchedOrder.message": {
            "name": "message",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderInTransit.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "current_location": []
            }
        },
        "OrderInTransit.message": {
            "name": "message",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderDelivered.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "delivered_at": []
            }
        },
        "OrderDelivered.message": {
            "name": "message",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeliveryOrder.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "delivery_id": [],
                "status": []
            }
        },
        "DeliveryOrder.message": {
            "name": "message",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/storage.py": {
        "DeliveryStatusQuery.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "delivery_id": [],
                "dbclient": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/__init__.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/tests/integration/test_retrieve_data.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/src/web/view.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/src/web/__init__.py": {
        "register_route": {
            "name": "register_route",
            "location": 9,
            "return": [],
            "arguments": {
                "view_object": [],
                "route": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/statusweb/service.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/statusweb/__init__.py": {}
}
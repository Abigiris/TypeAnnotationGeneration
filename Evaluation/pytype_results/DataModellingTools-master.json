{
    "DataModellingTools-master/dmt/aadl2glueC.py": {
        "ParseAADLfilesAndResolveSignals": {
            "name": "ParseAADLfilesAndResolveSignals",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "SpecialCodes": {
            "name": "SpecialCodes",
            "location": 234,
            "return": [],
            "arguments": {
                "asnFile": []
            }
        },
        "getSyncBackend": {
            "name": "getSyncBackend",
            "location": 249,
            "return": [],
            "arguments": {
                "modelingLanguage": []
            }
        },
        "ProcessSync": {
            "name": "ProcessSync",
            "location": 257,
            "return": [],
            "arguments": {
                "modelingLanguage": [],
                "asnFile": [],
                "sp": [],
                "sp_impl": [],
                "maybeFVname": [],
                "useOSS": [],
                "badTypes": []
            }
        },
        "getAsyncBackend": {
            "name": "getAsyncBackend",
            "location": 324,
            "return": [],
            "arguments": {
                "modelingLanguage": []
            }
        },
        "ProcessAsync": {
            "name": "ProcessAsync",
            "location": 330,
            "return": [],
            "arguments": {
                "modelingLanguage": [],
                "asnFile": [],
                "sp": [],
                "maybeFVname": [],
                "useOSS": [],
                "badTypes": [],
                "loaded_languages_cache": []
            }
        },
        "ProcessCustomBackends": {
            "name": "ProcessCustomBackends",
            "location": 397,
            "return": [],
            "arguments": {
                "asnFile": [],
                "useOSS": [],
                "SystemsAndImplementations": []
            }
        },
        "main": {
            "name": "main",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "ParseAADLfilesAndResolveSignals.FixMetaClasses": {
            "name": "FixMetaClasses",
            "location": 195,
            "return": [],
            "arguments": {
                "sp": []
            }
        },
        "ProcessCustomBackends.getCustomBackends": {
            "name": "getCustomBackends",
            "location": 411,
            "return": [],
            "arguments": {
                "lang": []
            }
        },
        "ParseAADLfilesAndResolveSignals.FixMetaClasses.patchMe": {
            "name": "patchMe",
            "location": 196,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "main.dumpSpeedData": {
            "name": "dumpSpeedData",
            "location": 497,
            "return": [],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/asn2aadlPlus.py": {
        "cleanNameAsAADLWants": {
            "name": "cleanNameAsAADLWants",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "cleanNameAsAsn1cWants": {
            "name": "cleanNameAsAsn1cWants",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "verifyNodeRange": {
            "name": "verifyNodeRange",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "calculateForNativeAndASN1SCC": {
            "name": "calculateForNativeAndASN1SCC",
            "location": 81,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "absASN1SCCpath": [],
                "autosrc": [],
                "names": [],
                "inputFiles": []
            }
        },
        "ASNtoACN": {
            "name": "ASNtoACN",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "asnFilename": []
            }
        },
        "usage": {
            "name": "usage",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.md5": {
            "name": "md5",
            "location": 300,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "main.checkIfNoWorkIsNeeded": {
            "name": "checkIfNoWorkIsNeeded",
            "location": 307,
            "return": [],
            "arguments": {
                "asnfiles": [],
                "aadlfile": []
            }
        },
        "main.checkIfNoWorkIsNeeded.ok": {
            "name": "ok",
            "location": 320,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "DataModellingTools-master/dmt/asn2dataModel.py": {
        "usage": {
            "name": "usage",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "argsToTools": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "getBackend": {
            "name": "getBackend",
            "location": 61,
            "return": [
                "A_mappers.module_protos.A_Mapper"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/badTypes.py": {
        "main": {
            "name": "main",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/msgPrinter.py": {
        "usage": {
            "name": "usage",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Printer.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Printer.UniqueID": {
            "name": "UniqueID",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Printer.MapInteger": {
            "name": "MapInteger",
            "location": 69,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapReal": {
            "name": "MapReal",
            "location": 72,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapBoolean": {
            "name": "MapBoolean",
            "location": 75,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapOctetString": {
            "name": "MapOctetString",
            "location": 78,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 90,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSequence": {
            "name": "MapSequence",
            "location": 93,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSet": {
            "name": "MapSet",
            "location": 105,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapChoice": {
            "name": "MapChoice",
            "location": 108,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 126,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSetOf": {
            "name": "MapSetOf",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/msgPrinterASN1.py": {
        "usage": {
            "name": "usage",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Printer.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Printer.UniqueID": {
            "name": "UniqueID",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Printer.MapInteger": {
            "name": "MapInteger",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "unused": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapReal": {
            "name": "MapReal",
            "location": 70,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "unused": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapBoolean": {
            "name": "MapBoolean",
            "location": 73,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "unused": [
                    "typing.Any"
                ],
                "_": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapOctetString": {
            "name": "MapOctetString",
            "location": 76,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "unused": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "unused": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "__": [
                    "typing.Any"
                ],
                "___": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSequence": {
            "name": "MapSequence",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSet": {
            "name": "MapSet",
            "location": 117,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapChoice": {
            "name": "MapChoice",
            "location": 120,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 140,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        },
        "Printer.MapSetOf": {
            "name": "MapSetOf",
            "location": 163,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "typing.Any"
                ],
                "prefix": [
                    "typing.Any"
                ],
                "node": [
                    "typing.Any"
                ],
                "leafTypeDict": [
                    "typing.Any"
                ],
                "names": [
                    "typing.Any"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/parse_aadl.py": {
        "ParseAADLfilesAndResolveSignals": {
            "name": "ParseAADLfilesAndResolveSignals",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/smp2asn.py": {
        "usage": {
            "name": "usage",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "coloredMsg": [
                    "str"
                ]
            }
        },
        "MergeASN1_AST": {
            "name": "MergeASN1_AST",
            "location": 60,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "smp2AsnAST": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SaveASN_AST": {
            "name": "SaveASN_AST",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "bPruneUnnamedInnerTASTEtypes": [
                    "bool"
                ],
                "outputAsn1Grammar": [
                    "str"
                ],
                "identicals": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "main.CheckFileExists": {
            "name": "CheckFileExists",
            "location": 165,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "DataModellingTools-master/dmt/__init__.py": {},
    "DataModellingTools-master/dmt/A_mappers/ada_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/c_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/learn_CHOICE_enums.py": {},
    "DataModellingTools-master/dmt/A_mappers/module_protos.py": {
        "A_Mapper.OnStartup": {
            "name": "OnStartup",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "Union[(str, List[str])]"
                ],
                "outputDir": [
                    "str"
                ],
                "badTypes": [
                    "Set[str]"
                ]
            }
        },
        "A_Mapper.OnBasic": {
            "name": "OnBasic",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnSequence": {
            "name": "OnSequence",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnSet": {
            "name": "OnSet",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnChoice": {
            "name": "OnChoice",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnSetOf": {
            "name": "OnSetOf",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnEnumerated": {
            "name": "OnEnumerated",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "A_Mapper.OnShutdown": {
            "name": "OnShutdown",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/og_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/python_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanNameAsPythonWants": {
            "name": "CleanNameAsPythonWants",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "CommonBaseImpl": {
            "name": "CommonBaseImpl",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "comment": [
                    "str"
                ],
                "ctype": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "params": [
                    "Params"
                ],
                "accessPathInC": [
                    "str"
                ],
                "postfix": [
                    "str"
                ],
                "returnPointer": [
                    "bool"
                ]
            }
        },
        "CommonBaseImplSequenceFixed": {
            "name": "CommonBaseImplSequenceFixed",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "comment": [
                    "str"
                ],
                "ctype": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "params": [
                    "Params"
                ],
                "_": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf, dmt.commonPy.asnAST.AsnString)]"
                ],
                "postfix": [
                    "str"
                ]
            }
        },
        "CommonBaseImplIA5String": {
            "name": "CommonBaseImplIA5String",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "comment": [
                    "str"
                ],
                "ctype": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "params": [
                    "Params"
                ],
                "accessPathInC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnAsciiString"
                ]
            }
        },
        "CreateGettersAndSetters": {
            "name": "CreateGettersAndSetters",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "params": [
                    "Params"
                ],
                "accessPathInC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "DumpTypeDumper": {
            "name": "DumpTypeDumper",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "codeIndent": [
                    "str"
                ],
                "outputIndent": [
                    "str"
                ],
                "lines": [
                    "List[str]"
                ],
                "variableName": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "CreateDeclarationForType": {
            "name": "CreateDeclarationForType",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateDeclarationsForAllTypes": {
            "name": "CreateDeclarationsForAllTypes",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnStartup.WorkOnType": {
            "name": "WorkOnType",
            "location": 191,
            "return": [],
            "arguments": {
                "nodeTypeName": []
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ]
            }
        },
        "Params.AddParam": {
            "name": "AddParam",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "varName": [
                    "str"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Params.Pop": {
            "name": "Pop",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.GetDecl": {
            "name": "GetDecl",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/qgenada_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanNameAsSimulinkWants": {
            "name": "CleanNameAsSimulinkWants",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "MapInteger": {
            "name": "MapInteger",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ]
            }
        },
        "CreateAlias": {
            "name": "CreateAlias",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "mappedType": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "DeclareCollection": {
            "name": "DeclareCollection",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "DeclareSimpleCollection": {
            "name": "DeclareSimpleCollection",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf, dmt.commonPy.asnAST.AsnString)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "CreateDeclarationForType": {
            "name": "CreateDeclarationForType",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateDeclarationsForAllTypes": {
            "name": "CreateDeclarationsForAllTypes",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/qgenc_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanNameAsSimulinkWants": {
            "name": "CleanNameAsSimulinkWants",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "MapInteger": {
            "name": "MapInteger",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ]
            }
        },
        "CreateAlias": {
            "name": "CreateAlias",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "mappedType": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "DeclareCollection": {
            "name": "DeclareCollection",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "DeclareSimpleCollection": {
            "name": "DeclareSimpleCollection",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf, dmt.commonPy.asnAST.AsnString)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "CreateDeclarationForType": {
            "name": "CreateDeclarationForType",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateDeclarationsForAllTypes": {
            "name": "CreateDeclarationsForAllTypes",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/rtds_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/scade6_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanNameAsScadeWants": {
            "name": "CleanNameAsScadeWants",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "RandomHex": {
            "name": "RandomHex",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "digits": [
                    "int"
                ]
            }
        },
        "FixupNestedStringsAndEnumerated": {
            "name": "FixupNestedStringsAndEnumerated",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "RenderElements": {
            "name": "RenderElements",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "controlString": [
                    "str"
                ]
            }
        },
        "GetOID": {
            "name": "GetOID",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ]
            }
        },
        "CheckPrerequisites": {
            "name": "CheckPrerequisites",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ]
            }
        },
        "HandleTypedef": {
            "name": "HandleTypedef",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CommonSeqSetChoice": {
            "name": "CommonSeqSetChoice",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "isChoice": [
                    "bool"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/simulink_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanNameAsSimulinkWants": {
            "name": "CleanNameAsSimulinkWants",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "MapInteger": {
            "name": "MapInteger",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ]
            }
        },
        "CreateAlias": {
            "name": "CreateAlias",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "mappedType": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "DeclareCollection": {
            "name": "DeclareCollection",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "DeclareSimpleCollection": {
            "name": "DeclareSimpleCollection",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf, dmt.commonPy.asnAST.AsnString)]"
                ],
                "name": [
                    "str"
                ],
                "internal": [
                    "str"
                ]
            }
        },
        "CreateDeclarationForType": {
            "name": "CreateDeclarationForType",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateDeclarationsForAllTypes": {
            "name": "CreateDeclarationsForAllTypes",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/smp2_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "getUID": {
            "name": "getUID",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "strIdentifier": [
                    "str"
                ],
                "idStore": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "FixupAstForSMP2": {
            "name": "FixupAstForSMP2",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "CleanName": {
            "name": "CleanName",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "fieldName": [
                    "str"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateBasic": {
            "name": "CreateBasic",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateSequence": {
            "name": "CreateSequence",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateEnumerated": {
            "name": "CreateEnumerated",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateSequenceOf": {
            "name": "CreateSequenceOf",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateChoice": {
            "name": "CreateChoice",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "_": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "badTypes": [
                    "Set[str]"
                ]
            }
        },
        "getUID.h": {
            "name": "h",
            "location": 50,
            "return": [],
            "arguments": {
                "digits": []
            }
        },
        "FixupAstForSMP2.neededToAddPseudoType": {
            "name": "neededToAddPseudoType",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/A_mappers/sqlalchemy_A_mapper.py": {
        "OnBasic": {
            "name": "OnBasic",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Version": {
            "name": "Version",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FixupAstForSQLAlchemy": {
            "name": "FixupAstForSQLAlchemy",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "Union[(str, List[str])]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "CleanName": {
            "name": "CleanName",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "fieldName": [
                    "str"
                ]
            }
        },
        "CreateBasic": {
            "name": "CreateBasic",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CommonSeqSetChoice": {
            "name": "CommonSeqSetChoice",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "isChoice": [
                    "bool"
                ]
            }
        },
        "CreateSequence": {
            "name": "CreateSequence",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateEnumerated": {
            "name": "CreateEnumerated",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateSequenceOf": {
            "name": "CreateSequenceOf",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateChoice": {
            "name": "CreateChoice",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "_": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "badTypes": [
                    "Set[str]"
                ]
            }
        },
        "FixupAstForSQLAlchemy.neededToAddPseudoType": {
            "name": "neededToAddPseudoType",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/A_mappers/sql_A_mapper.py": {
        "OnBasic": {
            "name": "OnBasic",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Version": {
            "name": "Version",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FixupAstForSQL": {
            "name": "FixupAstForSQL",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFiles": [
                    "List[str]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "CleanName": {
            "name": "CleanName",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "fieldName": [
                    "str"
                ]
            }
        },
        "CreateBasic": {
            "name": "CreateBasic",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CommonSeqSetChoice": {
            "name": "CommonSeqSetChoice",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "isChoice": [
                    "bool"
                ]
            }
        },
        "CreateSequence": {
            "name": "CreateSequence",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateEnumerated": {
            "name": "CreateEnumerated",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateSequenceOf": {
            "name": "CreateSequenceOf",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "CreateChoice": {
            "name": "CreateChoice",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "badTypes": [
                    "Set[str]"
                ]
            }
        },
        "FixupAstForSQL.neededToAddPseudoType": {
            "name": "neededToAddPseudoType",
            "location": 92,
            "return": [],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/A_mappers/Stubs.py": {
        "CleanNameAsPythonWants": {
            "name": "CleanNameAsPythonWants",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "myassert": {
            "name": "myassert",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "b": []
            }
        },
        "DataStream.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bufferSize": []
            }
        },
        "DataStream.__del__": {
            "name": "__del__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStream.Reset": {
            "name": "Reset",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStream.GetPyString": {
            "name": "GetPyString",
            "location": 107,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStream.SetFromPyString": {
            "name": "SetFromPyString",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "COMMON.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypeName": [],
                "ptr": []
            }
        },
        "COMMON.Reset": {
            "name": "Reset",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "COMMON.GetState": {
            "name": "GetState",
            "location": 224,
            "return": [
                "Tuple[(str, list, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "COMMON.SetData": {
            "name": "SetData",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "COMMON.__del__": {
            "name": "__del__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COMMON.__str__": {
            "name": "__str__",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "COMMON.__getattr__": {
            "name": "__getattr__",
            "location": 241,
            "return": [
                "_TCOMMON"
            ],
            "arguments": {
                "self": [
                    "_TCOMMON"
                ],
                "x": []
            }
        },
        "COMMON.__setattr__": {
            "name": "__setattr__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "COMMON.__getitem__": {
            "name": "__getitem__",
            "location": 252,
            "return": [
                "_TCOMMON"
            ],
            "arguments": {
                "self": [
                    "_TCOMMON"
                ],
                "idx": []
            }
        },
        "COMMON.Get": {
            "name": "Get",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "COMMON.Set": {
            "name": "Set",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "COMMON.GetLength": {
            "name": "GetLength",
            "location": 313,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "COMMON.SetLength": {
            "name": "SetLength",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "reset": []
            }
        },
        "COMMON.getErrCode": {
            "name": "getErrCode",
            "location": 320,
            "return": [
                "int"
            ],
            "arguments": {
                "pErr": []
            }
        },
        "COMMON.Encode": {
            "name": "Encode",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitstream": [],
                "bACN": []
            }
        },
        "COMMON.Decode": {
            "name": "Decode",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitstream": [],
                "bACN": []
            }
        },
        "COMMON.EncodeACN": {
            "name": "EncodeACN",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitstream": []
            }
        },
        "COMMON.DecodeACN": {
            "name": "DecodeACN",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitstream": []
            }
        },
        "COMMON.IsConstraintValid": {
            "name": "IsConstraintValid",
            "location": 357,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "COMMON.SetFromPyString": {
            "name": "SetFromPyString",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "COMMON.GetPyString": {
            "name": "GetPyString",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/vdm_A_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "Union[(str, List[str])]"
                ],
                "outputDir": [
                    "str"
                ],
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_badTypes": [
                    "Set[str]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/A_mappers/__init__.py": {},
    "DataModellingTools-master/dmt/B_mappers/ada_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/antlr.main.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/B_mappers/asynchronousTool.py": {
        "ASynchronousToolGlueGenerator.Version": {
            "name": "Version",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASynchronousToolGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_asnFile": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "unused_encoding": [
                    "str"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "unused_encoding": [
                    "str"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.CleanNameAsToolWants": {
            "name": "CleanNameAsToolWants",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASynchronousToolGlueGenerator.OnStartup": {
            "name": "OnStartup",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.Common": {
            "name": "Common",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnBasic": {
            "name": "OnBasic",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnSequence": {
            "name": "OnSequence",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnSet": {
            "name": "OnSet",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnEnumerated": {
            "name": "OnEnumerated",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnSetOf": {
            "name": "OnSetOf",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnChoice": {
            "name": "OnChoice",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ASynchronousToolGlueGenerator.OnShutdown": {
            "name": "OnShutdown",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/c_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromCtoOSS.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromCtoOSS.UniqueID": {
            "name": "UniqueID",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromCtoOSS.MapInteger": {
            "name": "MapInteger",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapReal": {
            "name": "MapReal",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 70,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 73,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 84,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapSequence": {
            "name": "MapSequence",
            "location": 87,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapSet": {
            "name": "MapSet",
            "location": 99,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapChoice": {
            "name": "MapChoice",
            "location": 102,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromCtoOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 141,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcCVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoC.UniqueID": {
            "name": "UniqueID",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoC.MapInteger": {
            "name": "MapInteger",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapReal": {
            "name": "MapReal",
            "location": 158,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapBoolean": {
            "name": "MapBoolean",
            "location": 161,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapOctetString": {
            "name": "MapOctetString",
            "location": 164,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 176,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapSequence": {
            "name": "MapSequence",
            "location": 179,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapSet": {
            "name": "MapSet",
            "location": 191,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapChoice": {
            "name": "MapChoice",
            "location": 194,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 213,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoC.MapSetOf": {
            "name": "MapSetOf",
            "location": 234,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstCVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "C_GlueGenerator.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C_GlueGenerator.Version": {
            "name": "Version",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C_GlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_asnFile": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "C_GlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "C_GlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/gui_B_mapper.py": {
        "CleanName": {
            "name": "CleanName",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "WriteSourceFileStart": {
            "name": "WriteSourceFileStart",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VerifySingleFieldEnums": {
            "name": "VerifySingleFieldEnums",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Union[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OneTimeOnly": {
            "name": "OneTimeOnly",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "unused_useOSS": [
                    "bool"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "WriteCodeForGUIControls": {
            "name": "WriteCodeForGUIControls",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "parentControl": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "maybeElseZero": {
            "name": "maybeElseZero",
            "location": 650,
            "return": [
                "str"
            ],
            "arguments": {
                "childNo": [
                    "int"
                ]
            }
        },
        "CopyDataFromDlgToASN1": {
            "name": "CopyDataFromDlgToASN1",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "IO"
                ],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "CopyDataFromASN1ToDlg": {
            "name": "CopyDataFromASN1ToDlg",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "fDesc": [
                    "IO"
                ],
                "prefix": [
                    "str"
                ],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "bClear": [
                    "bool"
                ]
            }
        },
        "WriteCodeForSave": {
            "name": "WriteCodeForSave",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "WriteCodeForLoad": {
            "name": "WriteCodeForLoad",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "WriteCodeForGnuPlot": {
            "name": "WriteCodeForGnuPlot",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "WriteCodeForAction": {
            "name": "WriteCodeForAction",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Common": {
            "name": "Common",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 1022,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "OnFinal": {
            "name": "OnFinal",
            "location": 1050,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/B_mappers/micropython_async_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "MapUPyObjData.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapUPyObjData.MapInteger": {
            "name": "MapInteger",
            "location": 176,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapReal": {
            "name": "MapReal",
            "location": 181,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapBoolean": {
            "name": "MapBoolean",
            "location": 190,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapOctetString": {
            "name": "MapOctetString",
            "location": 194,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 202,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapSequence": {
            "name": "MapSequence",
            "location": 206,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapSet": {
            "name": "MapSet",
            "location": 221,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapChoice": {
            "name": "MapChoice",
            "location": 224,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 240,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjData.MapSetOf": {
            "name": "MapSetOf",
            "location": 254,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "MicroPython_GlueGenerator"
                ]
            }
        },
        "MapUPyObjEncode.UniqueID": {
            "name": "UniqueID",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapUPyObjEncode.MapInteger": {
            "name": "MapInteger",
            "location": 267,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapReal": {
            "name": "MapReal",
            "location": 272,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapBoolean": {
            "name": "MapBoolean",
            "location": 282,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapOctetString": {
            "name": "MapOctetString",
            "location": 286,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 301,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapSequence": {
            "name": "MapSequence",
            "location": 306,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapSet": {
            "name": "MapSet",
            "location": 329,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapChoice": {
            "name": "MapChoice",
            "location": 332,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 361,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjEncode.MapSetOf": {
            "name": "MapSetOf",
            "location": 382,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "Tuple[(str, str)]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "MicroPython_GlueGenerator"
                ]
            }
        },
        "MapUPyObjDecode.UniqueID": {
            "name": "UniqueID",
            "location": 391,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapUPyObjDecode.MapInteger": {
            "name": "MapInteger",
            "location": 395,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapReal": {
            "name": "MapReal",
            "location": 399,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapBoolean": {
            "name": "MapBoolean",
            "location": 403,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapOctetString": {
            "name": "MapOctetString",
            "location": 406,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 416,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapSequence": {
            "name": "MapSequence",
            "location": 420,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapSet": {
            "name": "MapSet",
            "location": 437,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapChoice": {
            "name": "MapChoice",
            "location": 440,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 460,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapUPyObjDecode.MapSetOf": {
            "name": "MapSetOf",
            "location": 478,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MicroPython_GlueGenerator.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroPython_GlueGenerator.AddQstrFields": {
            "name": "AddQstrFields",
            "location": 492,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Sequence[str]"
                ]
            }
        },
        "MicroPython_GlueGenerator.AddChoiceFields": {
            "name": "AddChoiceFields",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choiceNode": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "fields": [
                    "List[str]"
                ]
            }
        },
        "MicroPython_GlueGenerator.LookupChoiceFields": {
            "name": "LookupChoiceFields",
            "location": 503,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "choiceNode": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ]
            }
        },
        "MicroPython_GlueGenerator.Version": {
            "name": "Version",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroPython_GlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "MicroPython_GlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "MicroPython_GlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "MicroPython_GlueGenerator.OnShutdown": {
            "name": "OnShutdown",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/module_protos.py": {
        "Sync_B_Mapper.OnStartup": {
            "name": "OnStartup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "Sync_B_Mapper.OnBasic": {
            "name": "OnBasic",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnSequence": {
            "name": "OnSequence",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnSet": {
            "name": "OnSet",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnChoice": {
            "name": "OnChoice",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnSetOf": {
            "name": "OnSetOf",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnEnumerated": {
            "name": "OnEnumerated",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Sync_B_Mapper.OnShutdown": {
            "name": "OnShutdown",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "sp_impl": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "Sync_B_Mapper.OnFinal": {
            "name": "OnFinal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Async_B_Mapper.OnStartup": {
            "name": "OnStartup",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "Async_B_Mapper.OnBasic": {
            "name": "OnBasic",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnSequence": {
            "name": "OnSequence",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnSet": {
            "name": "OnSet",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnChoice": {
            "name": "OnChoice",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnSetOf": {
            "name": "OnSetOf",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnEnumerated": {
            "name": "OnEnumerated",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Async_B_Mapper.OnShutdown": {
            "name": "OnShutdown",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/og_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.UniqueID": {
            "name": "UniqueID",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 119,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 122,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 125,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 128,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 151,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 154,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 166,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 169,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 187,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 208,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.UniqueID": {
            "name": "UniqueID",
            "location": 218,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.MapInteger": {
            "name": "MapInteger",
            "location": 225,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapReal": {
            "name": "MapReal",
            "location": 228,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 231,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 234,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 256,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSequence": {
            "name": "MapSequence",
            "location": 259,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSet": {
            "name": "MapSet",
            "location": 271,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapChoice": {
            "name": "MapChoice",
            "location": 274,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 292,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 312,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.UniqueID": {
            "name": "UniqueID",
            "location": 322,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.MapInteger": {
            "name": "MapInteger",
            "location": 329,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapReal": {
            "name": "MapReal",
            "location": 332,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapBoolean": {
            "name": "MapBoolean",
            "location": 335,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapOctetString": {
            "name": "MapOctetString",
            "location": 338,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 373,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSequence": {
            "name": "MapSequence",
            "location": 376,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSet": {
            "name": "MapSet",
            "location": 388,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapChoice": {
            "name": "MapChoice",
            "location": 391,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 410,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSetOf": {
            "name": "MapSetOf",
            "location": 431,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.UniqueID": {
            "name": "UniqueID",
            "location": 441,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.MapInteger": {
            "name": "MapInteger",
            "location": 448,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapReal": {
            "name": "MapReal",
            "location": 451,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapBoolean": {
            "name": "MapBoolean",
            "location": 454,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapOctetString": {
            "name": "MapOctetString",
            "location": 457,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 491,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSequence": {
            "name": "MapSequence",
            "location": 494,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSet": {
            "name": "MapSet",
            "location": 506,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapChoice": {
            "name": "MapChoice",
            "location": 509,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 528,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSetOf": {
            "name": "MapSetOf",
            "location": 548,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OG_GlueGenerator.__init__": {
            "name": "__init__",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OG_GlueGenerator.Version": {
            "name": "Version",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OG_GlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_asnFile": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "OG_GlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "OG_GlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/pyside_B_mapper.py": {
        "CleanName": {
            "name": "CleanName",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OneTimeOnly": {
            "name": "OneTimeOnly",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "FVname": [
                    "str"
                ],
                "unused_useOSS": [
                    "bool"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "FVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "WriteCodeForGUIControls": {
            "name": "WriteCodeForGUIControls",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "prefixes": [
                    "List[str]"
                ],
                "parentControl": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "nodeTypename": [
                    "str"
                ],
                "isOptional": [
                    "bool"
                ],
                "alwaysPresent": [
                    "bool"
                ],
                "alwaysAbsent": [
                    "bool"
                ]
            }
        },
        "Common": {
            "name": "Common",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "OnFinal": {
            "name": "OnFinal",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/B_mappers/python_B_mapper.py": {
        "CleanName": {
            "name": "CleanName",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "unused_useOSS": [
                    "bool"
                ]
            }
        },
        "Common": {
            "name": "Common",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "OnFinal": {
            "name": "OnFinal",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/B_mappers/qgenada_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/qgenc_B_mapper.py": {
        "IsElementMappedToPrimitive": {
            "name": "IsElementMappedToPrimitive",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 71,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 74,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 87,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 90,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcQGenC": [
                    "str"
                ],
                "unused_destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 102,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 105,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 123,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 142,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapInteger": {
            "name": "MapInteger",
            "location": 148,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapReal": {
            "name": "MapReal",
            "location": 151,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapBoolean": {
            "name": "MapBoolean",
            "location": 154,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapOctetString": {
            "name": "MapOctetString",
            "location": 157,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 170,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapSequence": {
            "name": "MapSequence",
            "location": 175,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapSet": {
            "name": "MapSet",
            "location": 187,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapChoice": {
            "name": "MapChoice",
            "location": 190,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 208,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoQGenC.MapSetOf": {
            "name": "MapSetOf",
            "location": 224,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapInteger": {
            "name": "MapInteger",
            "location": 230,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapReal": {
            "name": "MapReal",
            "location": 233,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 236,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 239,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 251,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapSequence": {
            "name": "MapSequence",
            "location": 254,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapSet": {
            "name": "MapSet",
            "location": 266,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapChoice": {
            "name": "MapChoice",
            "location": 269,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 287,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromQGenCToOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 305,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcQGenC": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapInteger": {
            "name": "MapInteger",
            "location": 311,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapReal": {
            "name": "MapReal",
            "location": 314,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapBoolean": {
            "name": "MapBoolean",
            "location": 317,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapOctetString": {
            "name": "MapOctetString",
            "location": 320,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 331,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapSequence": {
            "name": "MapSequence",
            "location": 336,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapSet": {
            "name": "MapSet",
            "location": 348,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapChoice": {
            "name": "MapChoice",
            "location": 351,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 369,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoQGenC.MapSetOf": {
            "name": "MapSetOf",
            "location": 385,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstQGenC": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "QGenCGlueGenerator.Version": {
            "name": "Version",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QGenCGlueGenerator.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 395,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QGenCGlueGenerator.FromToolToOSS": {
            "name": "FromToolToOSS",
            "location": 398,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QGenCGlueGenerator.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 401,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QGenCGlueGenerator.FromOSStoTool": {
            "name": "FromOSStoTool",
            "location": 404,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QGenCGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "QGenCGlueGenerator.SourceVar": {
            "name": "SourceVar",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "QGenCGlueGenerator.TargetVar": {
            "name": "TargetVar",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "QGenCGlueGenerator.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "QGenCGlueGenerator.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/rtds_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromRTDSToASN1SCC.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToASN1SCC.UniqueID": {
            "name": "UniqueID",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToASN1SCC.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 71,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 103,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 142,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcSDLVariable": [
                    "str"
                ],
                "unused_destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToOSS.UniqueID": {
            "name": "UniqueID",
            "location": 152,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToOSS.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromRTDSToOSS.MapInteger": {
            "name": "MapInteger",
            "location": 159,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapReal": {
            "name": "MapReal",
            "location": 162,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 165,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 168,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 190,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapSequence": {
            "name": "MapSequence",
            "location": 193,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapSet": {
            "name": "MapSet",
            "location": 205,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapChoice": {
            "name": "MapChoice",
            "location": 208,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 226,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromRTDSToOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 246,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcSDLVariable": [
                    "str"
                ],
                "unused_destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoRTDS.UniqueID": {
            "name": "UniqueID",
            "location": 256,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoRTDS.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoRTDS.MapInteger": {
            "name": "MapInteger",
            "location": 263,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapReal": {
            "name": "MapReal",
            "location": 266,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapBoolean": {
            "name": "MapBoolean",
            "location": 269,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapOctetString": {
            "name": "MapOctetString",
            "location": 272,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 290,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapSequence": {
            "name": "MapSequence",
            "location": 293,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapSet": {
            "name": "MapSet",
            "location": 305,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapChoice": {
            "name": "MapChoice",
            "location": 308,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 327,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoRTDS.MapSetOf": {
            "name": "MapSetOf",
            "location": 348,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "str"
                ],
                "unused_dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoRTDS.UniqueID": {
            "name": "UniqueID",
            "location": 358,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoRTDS.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoRTDS.MapInteger": {
            "name": "MapInteger",
            "location": 365,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapReal": {
            "name": "MapReal",
            "location": 368,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapBoolean": {
            "name": "MapBoolean",
            "location": 371,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapOctetString": {
            "name": "MapOctetString",
            "location": 374,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 408,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapSequence": {
            "name": "MapSequence",
            "location": 411,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapSet": {
            "name": "MapSet",
            "location": 423,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapChoice": {
            "name": "MapChoice",
            "location": 426,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 445,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoRTDS.MapSetOf": {
            "name": "MapSetOf",
            "location": 465,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "str"
                ],
                "unused_dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RTDS_GlueGenerator.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTDS_GlueGenerator.Version": {
            "name": "Version",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTDS_GlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_asnFile": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "RTDS_GlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "RTDS_GlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/scade6_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 58,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 81,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 84,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 96,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 99,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 118,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoSCADE.MapInteger": {
            "name": "MapInteger",
            "location": 144,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapReal": {
            "name": "MapReal",
            "location": 147,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapBoolean": {
            "name": "MapBoolean",
            "location": 150,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapOctetString": {
            "name": "MapOctetString",
            "location": 153,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 169,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapSequence": {
            "name": "MapSequence",
            "location": 172,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapSet": {
            "name": "MapSet",
            "location": 184,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapChoice": {
            "name": "MapChoice",
            "location": 187,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 206,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSCADE.MapSetOf": {
            "name": "MapSetOf",
            "location": 232,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapInteger": {
            "name": "MapInteger",
            "location": 239,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapReal": {
            "name": "MapReal",
            "location": 242,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 245,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 248,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 261,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapSequence": {
            "name": "MapSequence",
            "location": 264,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapSet": {
            "name": "MapSet",
            "location": 276,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapChoice": {
            "name": "MapChoice",
            "location": 279,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 298,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSCADEtoOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 314,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcScadeMacro": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoSCADE.MapInteger": {
            "name": "MapInteger",
            "location": 324,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapReal": {
            "name": "MapReal",
            "location": 327,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapBoolean": {
            "name": "MapBoolean",
            "location": 330,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapOctetString": {
            "name": "MapOctetString",
            "location": 333,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 346,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapSequence": {
            "name": "MapSequence",
            "location": 349,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapSet": {
            "name": "MapSet",
            "location": 361,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapChoice": {
            "name": "MapChoice",
            "location": 364,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 383,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSCADE.MapSetOf": {
            "name": "MapSetOf",
            "location": 408,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstScadeMacro": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ScadeGlueGenerator.Version": {
            "name": "Version",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScadeGlueGenerator.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 416,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScadeGlueGenerator.FromToolToOSS": {
            "name": "FromToolToOSS",
            "location": 419,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScadeGlueGenerator.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 422,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScadeGlueGenerator.FromOSStoTool": {
            "name": "FromOSStoTool",
            "location": 425,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScadeGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "ScadeGlueGenerator.SourceVar": {
            "name": "SourceVar",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ScadeGlueGenerator.TargetVar": {
            "name": "TargetVar",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ScadeGlueGenerator.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "ScadeGlueGenerator.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/sdl_B_mapper.py": {
        "OnStartup": {
            "name": "OnStartup",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.UniqueID": {
            "name": "UniqueID",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 120,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 123,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 126,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 129,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 152,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 167,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 170,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 188,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 209,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.UniqueID": {
            "name": "UniqueID",
            "location": 219,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromObjectGeodeToOSS.MapInteger": {
            "name": "MapInteger",
            "location": 226,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapReal": {
            "name": "MapReal",
            "location": 229,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 232,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 235,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 257,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSequence": {
            "name": "MapSequence",
            "location": 260,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSet": {
            "name": "MapSet",
            "location": 272,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapChoice": {
            "name": "MapChoice",
            "location": 275,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 293,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromObjectGeodeToOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 313,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSDLVariable": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.UniqueID": {
            "name": "UniqueID",
            "location": 323,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromASN1SCCtoObjectGeode.MapInteger": {
            "name": "MapInteger",
            "location": 330,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapReal": {
            "name": "MapReal",
            "location": 333,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapBoolean": {
            "name": "MapBoolean",
            "location": 336,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapOctetString": {
            "name": "MapOctetString",
            "location": 339,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 374,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSequence": {
            "name": "MapSequence",
            "location": 377,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSet": {
            "name": "MapSet",
            "location": 389,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapChoice": {
            "name": "MapChoice",
            "location": 392,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 411,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoObjectGeode.MapSetOf": {
            "name": "MapSetOf",
            "location": 432,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.UniqueID": {
            "name": "UniqueID",
            "location": 442,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.DecreaseUniqueID": {
            "name": "DecreaseUniqueID",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromOSStoObjectGeode.MapInteger": {
            "name": "MapInteger",
            "location": 449,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapReal": {
            "name": "MapReal",
            "location": 452,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapBoolean": {
            "name": "MapBoolean",
            "location": 455,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapOctetString": {
            "name": "MapOctetString",
            "location": 458,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 492,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSequence": {
            "name": "MapSequence",
            "location": 495,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSet": {
            "name": "MapSet",
            "location": 507,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapChoice": {
            "name": "MapChoice",
            "location": 510,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 529,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoObjectGeode.MapSetOf": {
            "name": "MapSetOf",
            "location": 549,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSDLVariable": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OG_GlueGenerator.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OG_GlueGenerator.Version": {
            "name": "Version",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OG_GlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_asnFile": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "OG_GlueGenerator.Encoder": {
            "name": "Encoder",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "OG_GlueGenerator.Decoder": {
            "name": "Decoder",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "encoding": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/simulink_B_mapper.py": {
        "IsElementMappedToPrimitive": {
            "name": "IsElementMappedToPrimitive",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 63,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 66,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 69,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 72,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 103,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 121,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 140,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapInteger": {
            "name": "MapInteger",
            "location": 146,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapReal": {
            "name": "MapReal",
            "location": 149,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapBoolean": {
            "name": "MapBoolean",
            "location": 152,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapOctetString": {
            "name": "MapOctetString",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 168,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapSequence": {
            "name": "MapSequence",
            "location": 173,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapSet": {
            "name": "MapSet",
            "location": 185,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapChoice": {
            "name": "MapChoice",
            "location": 188,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 206,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoSimulink.MapSetOf": {
            "name": "MapSetOf",
            "location": 222,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapInteger": {
            "name": "MapInteger",
            "location": 228,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapReal": {
            "name": "MapReal",
            "location": 231,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapBoolean": {
            "name": "MapBoolean",
            "location": 234,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapOctetString": {
            "name": "MapOctetString",
            "location": 237,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 249,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapSequence": {
            "name": "MapSequence",
            "location": 252,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapSet": {
            "name": "MapSet",
            "location": 264,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapChoice": {
            "name": "MapChoice",
            "location": 267,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 285,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromSimulinkToOSS.MapSetOf": {
            "name": "MapSetOf",
            "location": 303,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcSimulink": [
                    "str"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapInteger": {
            "name": "MapInteger",
            "location": 309,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapReal": {
            "name": "MapReal",
            "location": 312,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapBoolean": {
            "name": "MapBoolean",
            "location": 315,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapOctetString": {
            "name": "MapOctetString",
            "location": 318,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 329,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapSequence": {
            "name": "MapSequence",
            "location": 334,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapSet": {
            "name": "MapSet",
            "location": 346,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapChoice": {
            "name": "MapChoice",
            "location": 349,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 367,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromOSStoSimulink.MapSetOf": {
            "name": "MapSetOf",
            "location": 383,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstSimulink": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SimulinkGlueGenerator.Version": {
            "name": "Version",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulinkGlueGenerator.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 393,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulinkGlueGenerator.FromToolToOSS": {
            "name": "FromToolToOSS",
            "location": 396,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulinkGlueGenerator.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 399,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulinkGlueGenerator.FromOSStoTool": {
            "name": "FromOSStoTool",
            "location": 402,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulinkGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "SimulinkGlueGenerator.SourceVar": {
            "name": "SourceVar",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SimulinkGlueGenerator.TargetVar": {
            "name": "TargetVar",
            "location": 432,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SimulinkGlueGenerator.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "SimulinkGlueGenerator.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/synchronousTool.py": {
        "SynchronousToolGlueGeneratorGeneric.Version": {
            "name": "Version",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 48,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.FromToolToOSS": {
            "name": "FromToolToOSS",
            "location": 51,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 54,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.FromOSStoTool": {
            "name": "FromOSStoTool",
            "location": 57,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.SourceVar": {
            "name": "SourceVar",
            "location": 63,
            "return": [
                "TSource"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.TargetVar": {
            "name": "TargetVar",
            "location": 66,
            "return": [
                "TDestin"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.CleanNameAsToolWants": {
            "name": "CleanNameAsToolWants",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.CleanNameAsADAWants": {
            "name": "CleanNameAsADAWants",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnStartup": {
            "name": "OnStartup",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.Encoder": {
            "name": "Encoder",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.Decoder": {
            "name": "Decoder",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.Common": {
            "name": "Common",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnBasic": {
            "name": "OnBasic",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnSequence": {
            "name": "OnSequence",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnSet": {
            "name": "OnSet",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnEnumerated": {
            "name": "OnEnumerated",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnSetOf": {
            "name": "OnSetOf",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnChoice": {
            "name": "OnChoice",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "SynchronousToolGlueGeneratorGeneric.OnShutdown": {
            "name": "OnShutdown",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/vhdlTemplate.py": {},
    "DataModellingTools-master/dmt/B_mappers/vhdlTemplateZestSC1.py": {},
    "DataModellingTools-master/dmt/B_mappers/vhdl_B_mapper.py": {
        "CleanName": {
            "name": "CleanName",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "RegistersAllocated": {
            "name": "RegistersAllocated",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "node_or_str": [
                    "Union[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "AddToStr": {
            "name": "AddToStr",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "d": [
                    "str"
                ]
            }
        },
        "Common": {
            "name": "Common",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 973,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 1009,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "OnFinal": {
            "name": "OnFinal",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VHDL_Circuit.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ]
            }
        },
        "VHDL_Circuit.__str__": {
            "name": "__str__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDL_Circuit.AddParam": {
            "name": "AddParam",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 170,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 185,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "List[int]"
                ],
                "_": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 189,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 200,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 225,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 236,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 248,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 251,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 277,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 297,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapInteger": {
            "name": "MapInteger",
            "location": 304,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapReal": {
            "name": "MapReal",
            "location": 319,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "str"
                ],
                "_": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapBoolean": {
            "name": "MapBoolean",
            "location": 323,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapOctetString": {
            "name": "MapOctetString",
            "location": 333,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 356,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSequence": {
            "name": "MapSequence",
            "location": 368,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSet": {
            "name": "MapSet",
            "location": 380,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapChoice": {
            "name": "MapChoice",
            "location": 383,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 406,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSetOf": {
            "name": "MapSetOf",
            "location": 423,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.Version": {
            "name": "Version",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 433,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(List[int], str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 436,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, List[int])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "VHDLGlueGenerator.SourceVar": {
            "name": "SourceVar",
            "location": 462,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.TargetVar": {
            "name": "TargetVar",
            "location": 471,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "VHDLGlueGenerator.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapInteger": {
            "name": "MapInteger",
            "location": 510,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapReal": {
            "name": "MapReal",
            "location": 518,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapBoolean": {
            "name": "MapBoolean",
            "location": 521,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapOctetString": {
            "name": "MapOctetString",
            "location": 524,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 533,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSequence": {
            "name": "MapSequence",
            "location": 536,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSet": {
            "name": "MapSet",
            "location": 542,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapChoice": {
            "name": "MapChoice",
            "location": 545,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 551,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSetOf": {
            "name": "MapSetOf",
            "location": 563,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapInteger": {
            "name": "MapInteger",
            "location": 570,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapReal": {
            "name": "MapReal",
            "location": 578,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapBoolean": {
            "name": "MapBoolean",
            "location": 581,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapOctetString": {
            "name": "MapOctetString",
            "location": 584,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 593,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSequence": {
            "name": "MapSequence",
            "location": 596,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSet": {
            "name": "MapSet",
            "location": 602,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapChoice": {
            "name": "MapChoice",
            "location": 605,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 611,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSetOf": {
            "name": "MapSetOf",
            "location": 623,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapInteger": {
            "name": "MapInteger",
            "location": 630,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapReal": {
            "name": "MapReal",
            "location": 640,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[int]"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapBoolean": {
            "name": "MapBoolean",
            "location": 643,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapOctetString": {
            "name": "MapOctetString",
            "location": 648,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 663,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSequence": {
            "name": "MapSequence",
            "location": 668,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSet": {
            "name": "MapSet",
            "location": 674,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapChoice": {
            "name": "MapChoice",
            "location": 677,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 683,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSetOf": {
            "name": "MapSetOf",
            "location": 695,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapInteger": {
            "name": "MapInteger",
            "location": 702,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapReal": {
            "name": "MapReal",
            "location": 712,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[int]"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapBoolean": {
            "name": "MapBoolean",
            "location": 715,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapOctetString": {
            "name": "MapOctetString",
            "location": 720,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 735,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSequence": {
            "name": "MapSequence",
            "location": 740,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSet": {
            "name": "MapSet",
            "location": 746,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapChoice": {
            "name": "MapChoice",
            "location": 749,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 755,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSetOf": {
            "name": "MapSetOf",
            "location": 767,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapInteger": {
            "name": "MapInteger",
            "location": 774,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapReal": {
            "name": "MapReal",
            "location": 777,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapBoolean": {
            "name": "MapBoolean",
            "location": 780,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapOctetString": {
            "name": "MapOctetString",
            "location": 783,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 794,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSequence": {
            "name": "MapSequence",
            "location": 797,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSet": {
            "name": "MapSet",
            "location": 803,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapChoice": {
            "name": "MapChoice",
            "location": 806,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 812,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSetOf": {
            "name": "MapSetOf",
            "location": 824,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapInteger": {
            "name": "MapInteger",
            "location": 835,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapReal": {
            "name": "MapReal",
            "location": 839,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "SystemCheaderState"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapBoolean": {
            "name": "MapBoolean",
            "location": 842,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapOctetString": {
            "name": "MapOctetString",
            "location": 846,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 856,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapSequence": {
            "name": "MapSequence",
            "location": 860,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapSet": {
            "name": "MapSet",
            "location": 865,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapChoice": {
            "name": "MapChoice",
            "location": 868,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 873,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCheader.MapSetOf": {
            "name": "MapSetOf",
            "location": 883,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "SystemCheaderState"
                ],
                "systemCvar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapInteger": {
            "name": "MapInteger",
            "location": 889,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "dummy": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapReal": {
            "name": "MapReal",
            "location": 892,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapBoolean": {
            "name": "MapBoolean",
            "location": 895,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "dummy": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapOctetString": {
            "name": "MapOctetString",
            "location": 898,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 909,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSequence": {
            "name": "MapSequence",
            "location": 913,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSet": {
            "name": "MapSet",
            "location": 919,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapChoice": {
            "name": "MapChoice",
            "location": 922,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 927,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSetOf": {
            "name": "MapSetOf",
            "location": 938,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "str"
                ],
                "dstVHDL": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/zestSC1_B_mapper.py": {
        "Version": {
            "name": "Version",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CleanName": {
            "name": "CleanName",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "RegistersAllocated": {
            "name": "RegistersAllocated",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "node_or_str": [
                    "Union[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "Common": {
            "name": "Common",
            "location": 973,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnStartup": {
            "name": "OnStartup",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "outputDir": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ],
                "useOSS": [
                    "bool"
                ]
            }
        },
        "OnBasic": {
            "name": "OnBasic",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnBasicNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequence": {
            "name": "OnSequence",
            "location": 990,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSet": {
            "name": "OnSet",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnEnumerated": {
            "name": "OnEnumerated",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSequenceOf": {
            "name": "OnSequenceOf",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnSetOf": {
            "name": "OnSetOf",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnChoice": {
            "name": "OnChoice",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "OnShutdown": {
            "name": "OnShutdown",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "modelingLanguage": [
                    "str"
                ],
                "asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "subProgramImplementation": [
                    "str"
                ],
                "maybeFVname": [
                    "str"
                ]
            }
        },
        "AddToStr": {
            "name": "AddToStr",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "d": [
                    "str"
                ]
            }
        },
        "OnFinal": {
            "name": "OnFinal",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VHDL_Circuit.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ]
            }
        },
        "VHDL_Circuit.__str__": {
            "name": "__str__",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDL_Circuit.AddParam": {
            "name": "AddParam",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapInteger": {
            "name": "MapInteger",
            "location": 158,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapReal": {
            "name": "MapReal",
            "location": 178,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "List[int]"
                ],
                "_": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapBoolean": {
            "name": "MapBoolean",
            "location": 182,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapOctetString": {
            "name": "MapOctetString",
            "location": 193,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 211,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSequence": {
            "name": "MapSequence",
            "location": 222,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSet": {
            "name": "MapSet",
            "location": 234,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapChoice": {
            "name": "MapChoice",
            "location": 237,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 263,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromVHDLToASN1SCC.MapSetOf": {
            "name": "MapSetOf",
            "location": 281,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVHDL": [
                    "List[int]"
                ],
                "destVar": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapInteger": {
            "name": "MapInteger",
            "location": 287,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapReal": {
            "name": "MapReal",
            "location": 302,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "str"
                ],
                "_": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapBoolean": {
            "name": "MapBoolean",
            "location": 305,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapOctetString": {
            "name": "MapOctetString",
            "location": 315,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 338,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSequence": {
            "name": "MapSequence",
            "location": 350,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSet": {
            "name": "MapSet",
            "location": 362,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapChoice": {
            "name": "MapChoice",
            "location": 365,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 388,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "FromASN1SCCtoVHDL.MapSetOf": {
            "name": "MapSetOf",
            "location": 404,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "str"
                ],
                "dstVHDL": [
                    "List[int]"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.Version": {
            "name": "Version",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.FromToolToASN1SCC": {
            "name": "FromToolToASN1SCC",
            "location": 412,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(List[int], str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.FromASN1SCCtoTool": {
            "name": "FromASN1SCCtoTool",
            "location": 415,
            "return": [
                "dmt.commonPy.recursiveMapper.RecursiveMapperGeneric[(str, List[int])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VHDLGlueGenerator.HeadersOnStartup": {
            "name": "HeadersOnStartup",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_outputDir": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "VHDLGlueGenerator.SourceVar": {
            "name": "SourceVar",
            "location": 472,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.TargetVar": {
            "name": "TargetVar",
            "location": 482,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "unused_nodeTypename": [
                    "str"
                ],
                "unused_encoding": [
                    "str"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "subProgram": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "param": [
                    "dmt.commonPy.aadlAST.Param"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "VHDLGlueGenerator.InitializeBlock": {
            "name": "InitializeBlock",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "unused_sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "VHDLGlueGenerator.ExecuteBlock": {
            "name": "ExecuteBlock",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_modelingLanguage": [
                    "str"
                ],
                "unused_asnFile": [
                    "str"
                ],
                "sp": [
                    "dmt.commonPy.aadlAST.ApLevelContainer"
                ],
                "unused_subProgramImplementation": [
                    "str"
                ],
                "unused_maybeFVname": [
                    "str"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapInteger": {
            "name": "MapInteger",
            "location": 535,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapReal": {
            "name": "MapReal",
            "location": 542,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapBoolean": {
            "name": "MapBoolean",
            "location": 545,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapOctetString": {
            "name": "MapOctetString",
            "location": 548,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 559,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSequence": {
            "name": "MapSequence",
            "location": 562,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSet": {
            "name": "MapSet",
            "location": 568,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapChoice": {
            "name": "MapChoice",
            "location": 571,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 577,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLCircuit.MapSetOf": {
            "name": "MapSetOf",
            "location": 589,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapInteger": {
            "name": "MapInteger",
            "location": 595,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapReal": {
            "name": "MapReal",
            "location": 602,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapBoolean": {
            "name": "MapBoolean",
            "location": 605,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapOctetString": {
            "name": "MapOctetString",
            "location": 608,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 619,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSequence": {
            "name": "MapSequence",
            "location": 622,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSet": {
            "name": "MapSet",
            "location": 628,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapChoice": {
            "name": "MapChoice",
            "location": 631,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 637,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLregisters.MapSetOf": {
            "name": "MapSetOf",
            "location": 649,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapInteger": {
            "name": "MapInteger",
            "location": 655,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapReal": {
            "name": "MapReal",
            "location": 671,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[int]"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapBoolean": {
            "name": "MapBoolean",
            "location": 674,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapOctetString": {
            "name": "MapOctetString",
            "location": 679,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 692,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSequence": {
            "name": "MapSequence",
            "location": 697,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSet": {
            "name": "MapSet",
            "location": 703,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapChoice": {
            "name": "MapChoice",
            "location": 706,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 712,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLreadinputdata.MapSetOf": {
            "name": "MapSetOf",
            "location": 724,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapInteger": {
            "name": "MapInteger",
            "location": 730,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapReal": {
            "name": "MapReal",
            "location": 746,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[int]"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapBoolean": {
            "name": "MapBoolean",
            "location": 749,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapOctetString": {
            "name": "MapOctetString",
            "location": 754,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "_": [
                    "Dict[(str, str)]"
                ],
                "__": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 767,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSequence": {
            "name": "MapSequence",
            "location": 772,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSet": {
            "name": "MapSet",
            "location": 778,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapChoice": {
            "name": "MapChoice",
            "location": 781,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 787,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToVHDLwriteoutputdata.MapSetOf": {
            "name": "MapSetOf",
            "location": 799,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "List[int]"
                ],
                "dstVHDL": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapInteger": {
            "name": "MapInteger",
            "location": 805,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapReal": {
            "name": "MapReal",
            "location": 808,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapBoolean": {
            "name": "MapBoolean",
            "location": 811,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapOctetString": {
            "name": "MapOctetString",
            "location": 814,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 825,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "__": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSequence": {
            "name": "MapSequence",
            "location": 828,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSet": {
            "name": "MapSet",
            "location": 834,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapChoice": {
            "name": "MapChoice",
            "location": 837,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 843,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToSystemCconnections.MapSetOf": {
            "name": "MapSetOf",
            "location": 855,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcRegister": [
                    "str"
                ],
                "dstCircuitPort": [
                    "str"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapInteger": {
            "name": "MapInteger",
            "location": 903,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "dummy": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapReal": {
            "name": "MapReal",
            "location": 906,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "__": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "___": [
                    "Dict[(str, str)]"
                ],
                "dummy": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapBoolean": {
            "name": "MapBoolean",
            "location": 909,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "dummy": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapOctetString": {
            "name": "MapOctetString",
            "location": 912,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "_": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 923,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "_": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "__": [
                    "Dict[(str, str)]"
                ],
                "___": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSequence": {
            "name": "MapSequence",
            "location": 927,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnChoice, dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSet": {
            "name": "MapSet",
            "location": 933,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequence, dmt.commonPy.asnAST.AsnSet)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapChoice": {
            "name": "MapChoice",
            "location": 936,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 941,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "paramName": [
                    "str"
                ],
                "dummy": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "MapASN1ToOutputs.MapSetOf": {
            "name": "MapSetOf",
            "location": 952,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "reginfo": [
                    "str"
                ],
                "dstVHDL": [
                    "int"
                ],
                "node": [
                    "Union[(dmt.commonPy.asnAST.AsnSequenceOf, dmt.commonPy.asnAST.AsnSetOf)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/B_mappers/__init__.py": {},
    "DataModellingTools-master/dmt/commonPy/aadlAST.py": {
        "AadlParameter.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "typ": [
                    "str"
                ]
            }
        },
        "AadlSubProgramFeature.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iid": [
                    "str"
                ],
                "parameter": [
                    "AadlParameter"
                ]
            }
        },
        "AadlPropertyAssociationNoModes.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "pe": []
            }
        },
        "AadlPort.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "typ": [
                    "str"
                ]
            }
        },
        "AadlEventPort.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "sp": [
                    "ApLevelContainer"
                ]
            }
        },
        "AadlEventPort.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AadlEventDataPort.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "typ": [
                    "str"
                ]
            }
        },
        "AadlThreadFeature.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iid": [
                    "str"
                ],
                "port": [
                    "AadlPort"
                ]
            }
        },
        "AadlProcessFeature.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iid": [
                    "str"
                ],
                "port": [
                    "AadlPort"
                ]
            }
        },
        "AadlContainedPropertyAssociation.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFilename": [
                    "str"
                ],
                "asnNodename": [
                    "str"
                ],
                "asnSize": [
                    "int"
                ]
            }
        },
        "Param.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "iid": [
                    "str"
                ],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "InParam.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "iid": [
                    "str"
                ],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "OutParam.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "iid": [
                    "str"
                ],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "InOutParam.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "iid": [
                    "str"
                ],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "UniquePortIdentifier.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "componentId": [
                    "str"
                ],
                "portId": [
                    "str"
                ]
            }
        },
        "ApLevelContainer.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iid": [
                    "str"
                ]
            }
        },
        "ApLevelContainer.AddConnection": {
            "name": "AddConnection",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcUniquePortId": [
                    "UniquePortIdentifier"
                ],
                "destUniquePortId": [
                    "UniquePortIdentifier"
                ]
            }
        },
        "ApLevelContainer.AddParam": {
            "name": "AddParam",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ]
            }
        },
        "ApLevelContainer.SetLanguage": {
            "name": "SetLanguage",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fromC": [
                    "UniquePortIdentifier"
                ],
                "toC": [
                    "UniquePortIdentifier"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/asnAST.py": {
        "CommonIdenticalRangePerSMP2": {
            "name": "CommonIdenticalRangePerSMP2",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "range1": [
                    "List[int]"
                ],
                "range2": [
                    "List[int]"
                ]
            }
        },
        "CommonIdenticalCheck": {
            "name": "CommonIdenticalCheck",
            "location": 446,
            "return": [
                "bool"
            ],
            "arguments": {
                "me": [
                    "Union[(AsnChoice, AsnSequence, AsnSet)]"
                ],
                "other": [
                    "Union[(AsnChoice, AsnSequence, AsnSet)]"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "CommonAsASN1": {
            "name": "CommonAsASN1",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "kind": [
                    "str"
                ],
                "node": [
                    "Union[(AsnChoice, AsnSequence, AsnSet)]"
                ],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "CommonIdenticalArrayCheck": {
            "name": "CommonIdenticalArrayCheck",
            "location": 625,
            "return": [
                "bool"
            ],
            "arguments": {
                "me": [
                    "Union[(AsnSequenceOf, AsnSetOf)]"
                ],
                "other": [
                    "Union[(AsnSequenceOf, AsnSetOf)]"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "CommonAsASN1array": {
            "name": "CommonAsASN1array",
            "location": 639,
            "return": [
                "str"
            ],
            "arguments": {
                "kind": [
                    "str"
                ],
                "node": [
                    "Union[(AsnSequenceOf, AsnSetOf)]"
                ],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "isSequenceVariable": {
            "name": "isSequenceVariable",
            "location": 792,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Union[(AsnSequenceOf, AsnSetOf, AsnString)]"
                ]
            }
        },
        "sourceSequenceLimit": {
            "name": "sourceSequenceLimit",
            "location": 796,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Union[(AsnSequenceOf, AsnSetOf, AsnString)]"
                ],
                "srcCVariable": [
                    "str"
                ]
            }
        },
        "targetSequenceLimit": {
            "name": "targetSequenceLimit",
            "location": 800,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Union[(AsnSequenceOf, AsnSetOf, AsnString)]"
                ],
                "dstCVariable": [
                    "str"
                ]
            }
        },
        "AsnNode.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFilename": [
                    "str"
                ]
            }
        },
        "AsnNode.Location": {
            "name": "Location",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnNode.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unused_other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnNode.AsASN1": {
            "name": "AsASN1",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnBasicNode.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFilename": [
                    "str"
                ]
            }
        },
        "AsnComplexNode.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFilename": [
                    "str"
                ]
            }
        },
        "CommonIdenticalRangePerSMP2.collapseSpan": {
            "name": "collapseSpan",
            "location": 144,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "AsnBool.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnBool.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnBool.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnBool.AsASN1": {
            "name": "AsASN1",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnInt.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnInt.__repr__": {
            "name": "__repr__",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnInt.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnInt.AsASN1": {
            "name": "AsASN1",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnReal.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnReal.__repr__": {
            "name": "__repr__",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnReal.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnReal.AsASN1": {
            "name": "AsASN1",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnString.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnString.__repr__": {
            "name": "__repr__",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnString.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnString.AsASN1": {
            "name": "AsASN1",
            "location": 313,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnOctetString.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnUTF8String.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnAsciiString.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnNumberString.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnVisibleString.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnPrintableString.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnEnumerated.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnEnumerated.__repr__": {
            "name": "__repr__",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnEnumerated.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "unused_mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "unused_othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnEnumerated.AsASN1": {
            "name": "AsASN1",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "CommonIdenticalCheck.resolve": {
            "name": "resolve",
            "location": 451,
            "return": [],
            "arguments": {
                "node": [],
                "d": []
            }
        },
        "AsnSequence.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSequence.__repr__": {
            "name": "__repr__",
            "location": 514,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSequence.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSequence.AsASN1": {
            "name": "AsASN1",
            "location": 529,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSet.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSet.__repr__": {
            "name": "__repr__",
            "location": 555,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSet.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 563,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSet.AsASN1": {
            "name": "AsASN1",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnChoice.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnChoice.__repr__": {
            "name": "__repr__",
            "location": 605,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnChoice.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnChoice.AsASN1": {
            "name": "AsASN1",
            "location": 616,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSequenceOf.__init__": {
            "name": "__init__",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSequenceOf.__repr__": {
            "name": "__repr__",
            "location": 675,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSequenceOf.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 685,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSequenceOf.AsASN1": {
            "name": "AsASN1",
            "location": 690,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSetOf.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSetOf.__repr__": {
            "name": "__repr__",
            "location": 708,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnSetOf.IdenticalPerSMP2": {
            "name": "IdenticalPerSMP2",
            "location": 718,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AsnNode"
                ],
                "mynames": [
                    "Dict[(str, AsnNode)]"
                ],
                "othernames": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnSetOf.AsASN1": {
            "name": "AsASN1",
            "location": 723,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typeDict": [
                    "Dict[(str, AsnNode)]"
                ]
            }
        },
        "AsnMetaMember.__init__": {
            "name": "__init__",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnMetaMember.__repr__": {
            "name": "__repr__",
            "location": 748,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnMetaType.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsnMetaType.__repr__": {
            "name": "__repr__",
            "location": 780,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/asnParser.py": {
        "KnownType": {
            "name": "KnownType",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "CleanNameForAST": {
            "name": "CleanNameForAST",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "VerifyAndFixAST": {
            "name": "VerifyAndFixAST",
            "location": 152,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "IsInvalidType": {
            "name": "IsInvalidType",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "CheckForInvalidKeywords": {
            "name": "CheckForInvalidKeywords",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "node_or_str": [
                    "Union[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "ParseAsnFileList": {
            "name": "ParseAsnFileList",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "listOfFilenames": [
                    "List[str]"
                ]
            }
        },
        "Dump": {
            "name": "Dump",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_asn1": {
            "name": "test_asn1",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VisitAll": {
            "name": "VisitAll",
            "location": 528,
            "return": [
                "list"
            ],
            "arguments": {
                "node": [
                    "Element"
                ],
                "expectedType": [
                    "str"
                ],
                "action": [
                    "Callable[([Element], Any)]"
                ]
            }
        },
        "GetAttr": {
            "name": "GetAttr",
            "location": 538,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": [
                    "Element"
                ],
                "attrName": [
                    "str"
                ]
            }
        },
        "GetChild": {
            "name": "GetChild",
            "location": 545,
            "return": [
                "Optional[Element]"
            ],
            "arguments": {
                "node": [
                    "Element"
                ],
                "childName": [
                    "str"
                ]
            }
        },
        "CreateBoolean": {
            "name": "CreateBoolean",
            "location": 576,
            "return": [
                "dmt.commonPy.asnAST.AsnBool"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "_": []
            }
        },
        "GetRange": {
            "name": "GetRange",
            "location": 585,
            "return": [
                "Tuple[(U, U)]"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "nodeWithMinAndMax": [
                    "Element"
                ],
                "valueType": [
                    "Type[U]"
                ]
            }
        },
        "CreateInteger": {
            "name": "CreateInteger",
            "location": 604,
            "return": [
                "dmt.commonPy.asnAST.AsnInt"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlIntegerNode": [
                    "Element"
                ]
            }
        },
        "CreateReal": {
            "name": "CreateReal",
            "location": 611,
            "return": [
                "dmt.commonPy.asnAST.AsnReal"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlRealNode": [
                    "Element"
                ]
            }
        },
        "CreateEnumerated": {
            "name": "CreateEnumerated",
            "location": 618,
            "return": [
                "dmt.commonPy.asnAST.AsnEnumerated"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlEnumeratedNode": [
                    "Element"
                ]
            }
        },
        "CreateBitString": {
            "name": "CreateBitString",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "CreateOctetString": {
            "name": "CreateOctetString",
            "location": 639,
            "return": [
                "dmt.commonPy.asnAST.AsnOctetString"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlOctetString": [
                    "Element"
                ]
            }
        },
        "CreateIA5String": {
            "name": "CreateIA5String",
            "location": 646,
            "return": [
                "dmt.commonPy.asnAST.AsnAsciiString"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlIA5StringNode": [
                    "Element"
                ]
            }
        },
        "CreateNumericString": {
            "name": "CreateNumericString",
            "location": 656,
            "return": [
                "dmt.commonPy.asnAST.AsnOctetString"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlNumericStringNode": [
                    "Element"
                ]
            }
        },
        "getIntOrFloatOrNone": {
            "name": "getIntOrFloatOrNone",
            "location": 660,
            "return": [
                "Optional[Union[(float, int)]]"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "CreateReference": {
            "name": "CreateReference",
            "location": 673,
            "return": [
                "dmt.commonPy.asnAST.AsnMetaType"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlReferenceNode": [
                    "Element"
                ]
            }
        },
        "CommonSetSeqOf": {
            "name": "CommonSetSeqOf",
            "location": 685,
            "return": [
                "V"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSequenceOfNode": [
                    "Element"
                ],
                "classToCreate": [
                    "Type[V]"
                ]
            }
        },
        "CreateSequenceOf": {
            "name": "CreateSequenceOf",
            "location": 704,
            "return": [
                "dmt.commonPy.asnAST.AsnSequenceOf"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSequenceOfNode": [
                    "Element"
                ]
            }
        },
        "CreateSetOf": {
            "name": "CreateSetOf",
            "location": 708,
            "return": [
                "dmt.commonPy.asnAST.AsnSetOf"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSetOfNode": [
                    "Element"
                ]
            }
        },
        "CommonSeqSetChoice": {
            "name": "CommonSeqSetChoice",
            "location": 715,
            "return": [
                "W"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSequenceNode": [
                    "Element"
                ],
                "classToCreate": [
                    "Type[W]"
                ],
                "childTypeName": [
                    "str"
                ]
            }
        },
        "CreateSequence": {
            "name": "CreateSequence",
            "location": 755,
            "return": [
                "dmt.commonPy.asnAST.AsnSequence"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSequenceNode": [
                    "Element"
                ]
            }
        },
        "CreateSet": {
            "name": "CreateSet",
            "location": 761,
            "return": [
                "dmt.commonPy.asnAST.AsnSet"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlSetNode": [
                    "Element"
                ]
            }
        },
        "CreateChoice": {
            "name": "CreateChoice",
            "location": 767,
            "return": [
                "dmt.commonPy.asnAST.AsnChoice"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "lineNo": [
                    "int"
                ],
                "xmlChoiceNode": [
                    "Element"
                ]
            }
        },
        "GenericFactory": {
            "name": "GenericFactory",
            "location": 773,
            "return": [
                "dmt.commonPy.asnAST.AsnNode"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "xmlType": [
                    "Element"
                ]
            }
        },
        "VisitTypeAssignment": {
            "name": "VisitTypeAssignment",
            "location": 804,
            "return": [
                "Tuple[(str, dmt.commonPy.asnAST.AsnNode)]"
            ],
            "arguments": {
                "newModule": [
                    "Module"
                ],
                "xmlTypeAssignment": [
                    "Element"
                ]
            }
        },
        "VisitAsn1Module": {
            "name": "VisitAsn1Module",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "xmlAsn1File": [
                    "Element"
                ],
                "xmlModule": [
                    "Element"
                ],
                "modules": [
                    "List[Module]"
                ]
            }
        },
        "ParseASN1SCC_AST": {
            "name": "ParseASN1SCC_AST",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "SimpleCleaner": {
            "name": "SimpleCleaner",
            "location": 896,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "PrintType": {
            "name": "PrintType",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "IO"
                ],
                "xmlType": [
                    "Element"
                ],
                "indent": [
                    "str"
                ],
                "nameCleaner": [
                    "Callable[([str], str)]"
                ]
            }
        },
        "PrintGrammarFromAST": {
            "name": "PrintGrammarFromAST",
            "location": 998,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "IO"
                ],
                "nameCleaner": [
                    "Callable[([str], str)]"
                ]
            }
        },
        "PrintGrammarFromASTtoStdOut": {
            "name": "PrintGrammarFromASTtoStdOut",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_xml": {
            "name": "test_xml",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "InputFormatXMLHandler.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "InputFormatXMLHandler.startElement": {
            "name": "startElement",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "InputFormatXMLHandler.endElement": {
            "name": "endElement",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "Pretty.__repr__": {
            "name": "__repr__",
            "location": 553,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintType.addNewOption": {
            "name": "addNewOption",
            "location": 929,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/cleanupNodes.py": {
        "DiscoverBadTypes": {
            "name": "DiscoverBadTypes",
            "location": 22,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "DiscoverBadTypes.CheckNodeForIA5": {
            "name": "CheckNodeForIA5",
            "location": 33,
            "return": [],
            "arguments": {
                "node_or_str": []
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/commonSMP2.py": {
        "setVerbosity": {
            "name": "setVerbosity",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int"
                ]
            }
        },
        "panic": {
            "name": "panic",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "coloredBanner": [
                    "str"
                ]
            }
        },
        "Clean": {
            "name": "Clean",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "fieldName": [
                    "str"
                ]
            }
        },
        "MapSMP2Type": {
            "name": "MapSMP2Type",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "attrs": [
                    "Attributes"
                ],
                "enumOptions": [
                    "List[Tuple[(str, str)]]"
                ],
                "itemTypes": [
                    "list"
                ],
                "fields": [
                    "list"
                ]
            }
        },
        "FixupOutOfOrderIdReferences": {
            "name": "FixupOutOfOrderIdReferences",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "asnTypesDict": [],
                "idToTypeDict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "ConvertCatalogueToASN_AST": {
            "name": "ConvertCatalogueToASN_AST",
            "location": 317,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "inputSmp2Files": [
                    "List[str]"
                ]
            }
        },
        "MagicSmp2SimpleTypesDict.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MagicSmp2SimpleTypesDict.__contains__": {
            "name": "__contains__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MagicSmp2SimpleTypesDict.has_key": {
            "name": "has_key",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DashUnderscoreAgnosticDict.__setitem__": {
            "name": "__setitem__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DashUnderscoreAgnosticDict.__getitem__": {
            "name": "__getitem__",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DashUnderscoreAgnosticDict.__contains__": {
            "name": "__contains__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Attributes.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Attributes.__getattr__": {
            "name": "__getattr__",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "MapSMP2Type.getMaybe": {
            "name": "getMaybe",
            "location": 154,
            "return": [],
            "arguments": {
                "cast": [],
                "x": []
            }
        },
        "MapSMP2Type.HandleTypesInteger": {
            "name": "HandleTypesInteger",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "MapSMP2Type.HandleTypesFloat": {
            "name": "HandleTypesFloat",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "MapSMP2Type.HandleTypesArray": {
            "name": "HandleTypesArray",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "MapSMP2Type.HandleTypesStructure": {
            "name": "HandleTypesStructure",
            "location": 219,
            "return": [],
            "arguments": {}
        }
    },
    "DataModellingTools-master/dmt/commonPy/configMT.py": {},
    "DataModellingTools-master/dmt/commonPy/createInternalTypes.py": {
        "CleanName": {
            "name": "CleanName",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "CreatePseudoType": {
            "name": "CreatePseudoType",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "pseudoType": [
                    "str"
                ],
                "origASTnode": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "results": [
                    "List[str]"
                ]
            }
        },
        "ScanChildren": {
            "name": "ScanChildren",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "nodeTypename": [
                    "str"
                ],
                "node": [
                    "dmt.commonPy.asnAST.AsnNode"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "results": [
                    "List[str]"
                ],
                "isRoot": [
                    "bool"
                ],
                "createInnerNodesInNames": [
                    "bool"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/recursiveMapper.py": {
        "RecursiveMapperGeneric.maybeElse": {
            "name": "maybeElse",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "childNo": [
                    "int"
                ]
            }
        },
        "RecursiveMapperGeneric.CleanName": {
            "name": "CleanName",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        },
        "RecursiveMapperGeneric.Version": {
            "name": "Version",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecursiveMapperGeneric.MapInteger": {
            "name": "MapInteger",
            "location": 50,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnInt"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapReal": {
            "name": "MapReal",
            "location": 53,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnReal"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapBoolean": {
            "name": "MapBoolean",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnBool"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapOctetString": {
            "name": "MapOctetString",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnOctetString"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapEnumerated": {
            "name": "MapEnumerated",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnEnumerated"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapSequence": {
            "name": "MapSequence",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnSequence"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapSet": {
            "name": "MapSet",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnSet"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapChoice": {
            "name": "MapChoice",
            "location": 71,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnChoice"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapSequenceOf": {
            "name": "MapSequenceOf",
            "location": 74,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnSequenceOf"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.MapSetOf": {
            "name": "MapSetOf",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unused_srcVar": [
                    "TSrc"
                ],
                "unused_destVar": [
                    "TDest"
                ],
                "unused_node": [
                    "dmt.commonPy.asnAST.AsnSetOf"
                ],
                "unused_leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "unused_names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        },
        "RecursiveMapperGeneric.Map": {
            "name": "Map",
            "location": 80,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcVar": [
                    "TSrc"
                ],
                "destVar": [
                    "TDest"
                ],
                "node_or_str": [
                    "Union[(str, dmt.commonPy.asnAST.AsnNode)]"
                ],
                "leafTypeDict": [
                    "Dict[(str, str)]"
                ],
                "names": [
                    "Dict[(str, dmt.commonPy.asnAST.AsnNode)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/utility.py": {
        "inform": {
            "name": "inform",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "warn": {
            "name": "warn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "panic": {
            "name": "panic",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "panicWithCallStack": {
            "name": "panicWithCallStack",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "lcfirst": {
            "name": "lcfirst",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "ucfirst": {
            "name": "ucfirst",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "collapseCAPSgroups": {
            "name": "collapseCAPSgroups",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "readContexts": {
            "name": "readContexts",
            "location": 103,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "tapNumbers": [
                    "str"
                ]
            }
        },
        "mysystem": {
            "name": "mysystem",
            "location": 148,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "Matcher.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "flags": []
            }
        },
        "Matcher.match": {
            "name": "match",
            "location": 119,
            "return": [
                "Match"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Matcher.search": {
            "name": "search",
            "location": 124,
            "return": [
                "Match"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Matcher.group": {
            "name": "group",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Matcher.groups": {
            "name": "groups",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy/verify.py": {
        "VerifyNodeRange": {
            "name": "VerifyNodeRange",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "asnAST.AsnNode"
                ]
            }
        },
        "VerifyRanges": {
            "name": "VerifyRanges",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "node_or_str": [
                    "Union[(str, asnAST.AsnNode)]"
                ],
                "names": [
                    "Dict[(str, asnAST.AsnNode)]"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy2/aadlAST.py": {
        "AadlParameter.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "type": []
            }
        },
        "AadlSubProgramFeature.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "parameter": [
                    "AadlParameter"
                ]
            }
        },
        "AadlPropertyAssociationNoModes.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "pe": []
            }
        },
        "AadlPort.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "type": []
            }
        },
        "AadlEventPort.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "sp": [
                    "ApLevelContainer"
                ]
            }
        },
        "AadlEventPort.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AadlEventDataPort.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str"
                ],
                "type": []
            }
        },
        "AadlThreadFeature.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "port": [
                    "AadlPort"
                ]
            }
        },
        "AadlProcessFeature.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "port": [
                    "AadlPort"
                ]
            }
        },
        "AadlContainedPropertyAssociation.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asnFilename": [
                    "str"
                ],
                "asnNodename": [
                    "str"
                ],
                "asnSize": [
                    "int"
                ]
            }
        },
        "Port.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "DualPort.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "UniPort.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "IncomingUniPort.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "OutgoingUniPort.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "ApLevelContainer.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ApLevelContainer.AddCalledAPLC": {
            "name": "AddCalledAPLC",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "idAPLC": []
            }
        },
        "ApLevelContainer.AddConnection": {
            "name": "AddConnection",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcUniquePortId": [
                    "UniquePortIdentifier"
                ],
                "destUniquePortId": [
                    "UniquePortIdentifier"
                ]
            }
        },
        "ApLevelContainer.AddParam": {
            "name": "AddParam",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "Param"
                ]
            }
        },
        "ApLevelContainer.SetLanguage": {
            "name": "SetLanguage",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str"
                ]
            }
        },
        "ApLevelContainer.SetFPGAModes": {
            "name": "SetFPGAModes",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "fpgaModes": []
            }
        },
        "Param.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "id": [],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "InParam.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "id": [],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "OutParam.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "id": [],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "InOutParam.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aplcID": [
                    "str"
                ],
                "id": [],
                "signal": [
                    "Signal"
                ],
                "sourceElement": [
                    "Union[(AadlParameter, AadlPort)]"
                ]
            }
        },
        "UniquePortIdentifier.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "componentId": [
                    "str"
                ],
                "portId": [
                    "str"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fromC": [
                    "UniquePortIdentifier"
                ],
                "toC": [
                    "UniquePortIdentifier"
                ]
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy2/AadlLexer.py": {},
    "DataModellingTools-master/dmt/commonPy2/AadlParser.py": {},
    "DataModellingTools-master/dmt/commonPy2/configMT.py": {},
    "DataModellingTools-master/dmt/commonPy2/utility.py": {
        "inform": {
            "name": "inform",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "format": []
            }
        },
        "warn": {
            "name": "warn",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "format": []
            }
        },
        "panic": {
            "name": "panic",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "panicWithCallStack": {
            "name": "panicWithCallStack",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "lcfirst": {
            "name": "lcfirst",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "ucfirst": {
            "name": "ucfirst",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "collapseCAPSgroups": {
            "name": "collapseCAPSgroups",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "readContexts": {
            "name": "readContexts",
            "location": 98,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "tapNumbers": [
                    "str"
                ]
            }
        },
        "mysystem": {
            "name": "mysystem",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "Matcher.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "flags": []
            }
        },
        "Matcher.match": {
            "name": "match",
            "location": 112,
            "return": [
                "Match"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Matcher.search": {
            "name": "search",
            "location": 117,
            "return": [
                "Match"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Matcher.group": {
            "name": "group",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Matcher.groups": {
            "name": "groups",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/dmt/commonPy2/__init__.py": {},
    "DataModellingTools-master/tests-coverage/createGUIsection.py": {},
    "DataModellingTools-master/tests-sqlalchemy/commonTests.py": {
        "AllTests.test1_Integer": {
            "name": "test1_Integer",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test2_IntegerWithOverridenConstraints": {
            "name": "test2_IntegerWithOverridenConstraints",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test3_SimpleSequence": {
            "name": "test3_SimpleSequence",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test4_Choice": {
            "name": "test4_Choice",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test5_Enumerated": {
            "name": "test5_Enumerated",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test6_ArrayOfInts": {
            "name": "test6_ArrayOfInts",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test7_ComplexTypeWithNestedNestedArrays": {
            "name": "test7_ComplexTypeWithNestedNestedArrays",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTests.test8_VeryComplexType": {
            "name": "test8_VeryComplexType",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DataModellingTools-master/tests-sqlalchemy/diagram.py": {},
    "DataModellingTools-master/tests-sqlalchemy/testSQLengines.py": {}
}
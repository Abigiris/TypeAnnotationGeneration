{
    "Flask-MQTT-master/setup.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Flask-MQTT-master/doc/conf.py": {},
    "Flask-MQTT-master/doc/_themes/pygments.py": {},
    "Flask-MQTT-master/doc/_themes/__init__.py": {
        "get_path": {
            "name": "get_path",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 10,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "Flask-MQTT-master/example/app.py": {
        "index": {
            "name": "index",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "handle_publish": {
            "name": "handle_publish",
            "location": 49,
            "return": [],
            "arguments": {
                "json_str": []
            }
        },
        "handle_subscribe": {
            "name": "handle_subscribe",
            "location": 55,
            "return": [],
            "arguments": {
                "json_str": []
            }
        },
        "handle_unsubscribe_all": {
            "name": "handle_unsubscribe_all",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "handle_mqtt_message": {
            "name": "handle_mqtt_message",
            "location": 66,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "message": []
            }
        },
        "handle_logging": {
            "name": "handle_logging",
            "location": 76,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "level": [],
                "buf": []
            }
        }
    },
    "Flask-MQTT-master/flask_mqtt/__init__.py": {
        "Mqtt.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "connect_async": [
                    "bool"
                ],
                "mqtt_logging": [
                    "bool"
                ]
            }
        },
        "Mqtt.init_app": {
            "name": "init_app",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Mqtt._connect": {
            "name": "_connect",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt._disconnect": {
            "name": "_disconnect",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt._handle_connect": {
            "name": "_handle_connect",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "userdata": [],
                "flags": [
                    "Dict[(str, Any)]"
                ],
                "rc": [
                    "int"
                ]
            }
        },
        "Mqtt._handle_disconnect": {
            "name": "_handle_disconnect",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "userdata": [],
                "rc": [
                    "int"
                ]
            }
        },
        "Mqtt.on_topic": {
            "name": "on_topic",
            "location": 246,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "Mqtt.subscribe": {
            "name": "subscribe",
            "location": 278,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "qos": [
                    "int"
                ]
            }
        },
        "Mqtt.unsubscribe": {
            "name": "unsubscribe",
            "location": 320,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "Mqtt.unsubscribe_all": {
            "name": "unsubscribe_all",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.publish": {
            "name": "publish",
            "location": 360,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "payload": [
                    "Optional[bytes]"
                ],
                "qos": [
                    "int"
                ],
                "retain": [
                    "bool"
                ]
            }
        },
        "Mqtt.on_connect": {
            "name": "on_connect",
            "location": 395,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_disconnect": {
            "name": "on_disconnect",
            "location": 409,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_message": {
            "name": "on_message",
            "location": 423,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_publish": {
            "name": "on_publish",
            "location": 447,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_subscribe": {
            "name": "on_subscribe",
            "location": 467,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_unsubscribe": {
            "name": "on_unsubscribe",
            "location": 484,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_log": {
            "name": "on_log",
            "location": 501,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mqtt.on_topic.decorator": {
            "name": "decorator",
            "location": 272,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_connect.decorator": {
            "name": "decorator",
            "location": 403,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_disconnect.decorator": {
            "name": "decorator",
            "location": 417,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_message.decorator": {
            "name": "decorator",
            "location": 441,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_publish.decorator": {
            "name": "decorator",
            "location": 461,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_subscribe.decorator": {
            "name": "decorator",
            "location": 478,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_unsubscribe.decorator": {
            "name": "decorator",
            "location": 495,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "Mqtt.on_log.decorator": {
            "name": "decorator",
            "location": 513,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "Flask-MQTT-master/tests/test_flaskmqtt.py": {
        "FlaskMQTTTestCase.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_early_initialization_app_is_not_none": {
            "name": "test_early_initialization_app_is_not_none",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_late_initialization_app_is_none": {
            "name": "test_late_initialization_app_is_none",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_mqtt_config_values": {
            "name": "test_mqtt_config_values",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_connect_disconnect": {
            "name": "test_connect_disconnect",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Flask-MQTT-master/tests/test_integration.py": {
        "wait": {
            "name": "wait",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": []
            }
        },
        "FlaskMQTTTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_simple_connect": {
            "name": "test_simple_connect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_connect_with_username": {
            "name": "test_connect_with_username",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_subscribe": {
            "name": "test_subscribe",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_qos": {
            "name": "test_qos",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_topic_count": {
            "name": "test_topic_count",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_publish": {
            "name": "test_publish",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_on_topic": {
            "name": "test_on_topic",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_logging": {
            "name": "test_logging",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_disconnect": {
            "name": "test_disconnect",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskMQTTTestCase.test_subscribe.handle_subscribe": {
            "name": "handle_subscribe",
            "location": 42,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "mid_": [],
                "granted_qos": []
            }
        },
        "FlaskMQTTTestCase.test_subscribe.handle_unsubscribe": {
            "name": "handle_unsubscribe",
            "location": 46,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "mid_": []
            }
        },
        "FlaskMQTTTestCase.test_publish.handle_message": {
            "name": "handle_message",
            "location": 107,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "message": []
            }
        },
        "FlaskMQTTTestCase.test_publish.handle_publish": {
            "name": "handle_publish",
            "location": 111,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "mid": []
            }
        },
        "FlaskMQTTTestCase.test_on_topic.handle_message": {
            "name": "handle_message",
            "location": 130,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "message": []
            }
        },
        "FlaskMQTTTestCase.test_on_topic.handle_on_topic": {
            "name": "handle_on_topic",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "FlaskMQTTTestCase.test_on_topic.handle_connect": {
            "name": "handle_connect",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "FlaskMQTTTestCase.test_logging.handle_logging": {
            "name": "handle_logging",
            "location": 150,
            "return": [],
            "arguments": {
                "client": [],
                "userdata": [],
                "level": [],
                "buf": []
            }
        },
        "FlaskMQTTTestCase.test_disconnect.handle_connect": {
            "name": "handle_connect",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "FlaskMQTTTestCase.test_disconnect.handle_disconnect": {
            "name": "handle_disconnect",
            "location": 166,
            "return": [],
            "arguments": {}
        }
    }
}
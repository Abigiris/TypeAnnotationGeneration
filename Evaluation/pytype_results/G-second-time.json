{
    "G-second-time/bot_vs_bot.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/eval_pg_bot.py": {
        "avg": {
            "name": "avg",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "items": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "board": []
            }
        },
        "name": {
            "name": "name",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "player": []
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 47,
            "return": [
                "GameRecord"
            ],
            "arguments": {
                "black_player": [],
                "white_player": []
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/generate_mcts_games.py": {
        "generate_game": {
            "name": "generate_game",
            "location": 10,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "board_size": [],
                "rounds": [],
                "max_moves": [],
                "temperature": []
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/generate_zobrist.py": {
        "to_python": {
            "name": "to_python",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "player_state": []
            }
        }
    },
    "G-second-time/gtp.py": {},
    "G-second-time/init_ac_agent.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/init_agent.py": {},
    "G-second-time/init_q_agent.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/kerasutils.py": {
        "save_model_to_hdf5_group": {
            "name": "save_model_to_hdf5_group",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "f": []
            }
        },
        "load_model_from_hdf5_group": {
            "name": "load_model_from_hdf5_group",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "f": [],
                "custom_objects": []
            }
        },
        "set_gpu_memory_target": {
            "name": "set_gpu_memory_target",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "frac": []
            }
        }
    },
    "G-second-time/load.py": {},
    "G-second-time/model_from_checkpoint.py": {},
    "G-second-time/parralel_self_play.py": {
        "avg": {
            "name": "avg",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "items": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "board": []
            }
        },
        "name": {
            "name": "name",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "player": []
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 53,
            "return": [
                "GameRecord"
            ],
            "arguments": {
                "black_player": [],
                "white_player": [],
                "board_size": []
            }
        },
        "get_temp_file": {
            "name": "get_temp_file",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "do_self_play": {
            "name": "do_self_play",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "board_size": [],
                "agent_filename": [],
                "num_games": [],
                "temperature": [],
                "experience_filename": [],
                "gpu_frac": []
            }
        },
        "main": {
            "name": "main",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/play_local.py": {},
    "G-second-time/play_train_ac.py": {
        "load_agent": {
            "name": "load_agent",
            "location": 21,
            "return": [
                "dlgo.agent.ac_agent.ACAgent"
            ],
            "arguments": {
                "filename": []
            }
        },
        "avg": {
            "name": "avg",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "items": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "board": []
            }
        },
        "name": {
            "name": "name",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "player": []
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 61,
            "return": [
                "GameRecord"
            ],
            "arguments": {
                "black_player": [],
                "white_player": [],
                "board_size": []
            }
        },
        "get_temp_file": {
            "name": "get_temp_file",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "do_self_play": {
            "name": "do_self_play",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "board_size": [],
                "agent1_filename": [],
                "agent2_filename": [],
                "num_games": [],
                "experience_filename": [],
                "gpu_frac": []
            }
        },
        "generate_experience": {
            "name": "generate_experience",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "learning_agent": [],
                "reference_agent": [],
                "exp_file": [],
                "num_games": [],
                "board_size": [],
                "num_workers": []
            }
        },
        "train_worker": {
            "name": "train_worker",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "learning_agent": [],
                "output_file": [],
                "experience_file": [],
                "lr": [],
                "batch_size": []
            }
        },
        "train_on_experience": {
            "name": "train_on_experience",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "learning_agent": [],
                "output_file": [],
                "experience_file": [],
                "lr": [],
                "batch_size": []
            }
        },
        "play_games": {
            "name": "play_games",
            "location": 214,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 245,
            "return": [
                "Any"
            ],
            "arguments": {
                "learning_agent": [],
                "reference_agent": [],
                "num_games": [],
                "num_workers": [],
                "board_size": []
            }
        },
        "main": {
            "name": "main",
            "location": 271,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "G-second-time/self_play.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/test_samples.py": {},
    "G-second-time/train_generator.py": {},
    "G-second-time/train_generator_plus.py": {},
    "G-second-time/train_pg.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "G-second-time/train_plus.py": {},
    "G-second-time/web.py": {},
    "G-second-time/dlgo/goboard.py": {
        "Move.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "is_pass": [],
                "is_resign": []
            }
        },
        "Move.play": {
            "name": "play",
            "location": 16,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ],
                "point": []
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 20,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 24,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "stones": [],
                "liberties": []
            }
        },
        "GoString.without_liberty": {
            "name": "without_liberty",
            "location": 34,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "point": []
            }
        },
        "GoString.with_liberty": {
            "name": "with_liberty",
            "location": 38,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "point": []
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 42,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "go_string": []
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GoString.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 57,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "memodict": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rows": [],
                "nums_cols": []
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "point": []
            }
        },
        "Board._replace_string": {
            "name": "_replace_string",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_string": []
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get": {
            "name": "get",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 134,
            "return": [
                "_TBoard@@Board@@"
            ],
            "arguments": {
                "self": [
                    "_TBoard@@Board@@"
                ],
                "memodict": []
            }
        },
        "Board.zobrist_hash": {
            "name": "zobrist_hash",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [],
                "next_player": [],
                "previous_state": [],
                "move": []
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 163,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "self": [
                    "_TGameState@@GameState@@"
                ],
                "move": []
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 172,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGameState]"
                ],
                "board_size": []
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": []
            }
        }
    },
    "G-second-time/dlgo/goboard_fast.py": {
        "init_neighbor_table": {
            "name": "init_neighbor_table",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "dim": []
            }
        },
        "init_corner_table": {
            "name": "init_corner_table",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "dim": []
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "stones": [],
                "liberties": []
            }
        },
        "GoString.without_liberty": {
            "name": "without_liberty",
            "location": 62,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "point": []
            }
        },
        "GoString.with_liberty": {
            "name": "with_liberty",
            "location": 66,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "point": []
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 70,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "string": []
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GoString.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 86,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "memodict": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rows": [],
                "num_cols": []
            }
        },
        "Board.neighbors": {
            "name": "neighbors",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.corners": {
            "name": "corners",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "point": []
            }
        },
        "Board._replace_string": {
            "name": "_replace_string",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_string": []
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Board.is_self_capture": {
            "name": "is_self_capture",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "point": []
            }
        },
        "Board.will_capture": {
            "name": "will_capture",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "point": []
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get": {
            "name": "get",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.__eq__": {
            "name": "__eq__",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Board.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 233,
            "return": [
                "_TBoard@@Board@@"
            ],
            "arguments": {
                "self": [
                    "_TBoard@@Board@@"
                ],
                "memodict": []
            }
        },
        "Board.zobrist_hash": {
            "name": "zobrist_hash",
            "location": 241,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "is_pass": [],
                "is_resign": []
            }
        },
        "Move.play": {
            "name": "play",
            "location": 261,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ],
                "point": []
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 266,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 270,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "Move.__str__": {
            "name": "__str__",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__hash__": {
            "name": "__hash__",
            "location": 282,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__eq__": {
            "name": "__eq__",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [],
                "next_player": [],
                "previous": [],
                "move": []
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 303,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "self": [
                    "_TGameState@@GameState@@"
                ],
                "move": []
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 313,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGameState]"
                ],
                "board_size": []
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 338,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": []
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.legal_moves": {
            "name": "legal_moves",
            "location": 356,
            "return": [
                "List[Move]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.winner": {
            "name": "winner",
            "location": 371,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/goboard_slow.py": {
        "Move.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "is_pass": [],
                "is_resign": []
            }
        },
        "Move.play": {
            "name": "play",
            "location": 15,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ],
                "point": []
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 19,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 23,
            "return": [
                "_TMove@@Move@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMove]"
                ]
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "stones": [],
                "liberties": []
            }
        },
        "GoString.remvove_liberty": {
            "name": "remvove_liberty",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "GoString.add_liberty": {
            "name": "add_liberty",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 39,
            "return": [
                "_TGoString@@GoString@@"
            ],
            "arguments": {
                "self": [
                    "_TGoString@@GoString@@"
                ],
                "go_string": []
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rows": [],
                "nums_cols": []
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "point": []
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get": {
            "name": "get",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gostring": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [],
                "next_player": [],
                "previous_state": [],
                "move": []
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 130,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "self": [
                    "_TGameState@@GameState@@"
                ],
                "move": []
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 139,
            "return": [
                "_TGameState@@GameState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGameState]"
                ],
                "board_size": []
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [],
                "move": []
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": []
            }
        }
    },
    "G-second-time/dlgo/gotypes.py": {
        "Player.other": {
            "name": "other",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.neighbors": {
            "name": "neighbors",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/scoring.py": {
        "evaluate_territory": {
            "name": "evaluate_territory",
            "location": 48,
            "return": [
                "Territory"
            ],
            "arguments": {
                "board": []
            }
        },
        "_collect_region": {
            "name": "_collect_region",
            "location": 71,
            "return": [
                "Tuple[(list, set)]"
            ],
            "arguments": {
                "start_pos": [],
                "board": [],
                "visited": []
            }
        },
        "compute_game_result": {
            "name": "compute_game_result",
            "location": 95,
            "return": [
                "GameResult"
            ],
            "arguments": {
                "game_state": []
            }
        },
        "Territory.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "territory_map": []
            }
        },
        "GameResult.winner": {
            "name": "winner",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameResult.winning_margin": {
            "name": "winning_margin",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameResult.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/utils.py": {
        "print_move": {
            "name": "print_move",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [],
                "move": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "board": []
            }
        },
        "point_from_coords": {
            "name": "point_from_coords",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "coords": []
            }
        },
        "coords_from_point": {
            "name": "coords_from_point",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "point": []
            }
        }
    },
    "G-second-time/dlgo/zobrist.py": {},
    "G-second-time/dlgo/__init__.py": {},
    "G-second-time/dlgo/agent/ac_agent.py": {
        "load_ac_agent": {
            "name": "load_ac_agent",
            "location": 106,
            "return": [
                "ACAgent"
            ],
            "arguments": {
                "h5file": []
            }
        },
        "ACAgent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "encoder": []
            }
        },
        "ACAgent.set_temperature": {
            "name": "set_temperature",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temperature": []
            }
        },
        "ACAgent.set_collector": {
            "name": "set_collector",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collector": []
            }
        },
        "ACAgent.select_move": {
            "name": "select_move",
            "location": 33,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "ACAgent.train": {
            "name": "train",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [],
                "lr": [],
                "batch_size": []
            }
        },
        "ACAgent.serialize": {
            "name": "serialize",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": []
            }
        },
        "ACAgent.diagnostics": {
            "name": "diagnostics",
            "location": 102,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/base.py": {
        "Agent.select_move": {
            "name": "select_move",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "Agent.diagnostics": {
            "name": "diagnostics",
            "location": 8,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/helpers.py": {
        "is_point_an_eye": {
            "name": "is_point_an_eye",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [],
                "point": [],
                "color": []
            }
        }
    },
    "G-second-time/dlgo/agent/mcts.py": {
        "uct_score": {
            "name": "uct_score",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "parent_rollouts": [],
                "child_rollouts": [],
                "win_pct": [],
                "temperature": []
            }
        },
        "MCTSAgent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rounds": [],
                "temperature": []
            }
        },
        "MCTSAgent.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "MCTSAgent.select_child": {
            "name": "select_child",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MCTSAgent.simulate_random_game": {
            "name": "simulate_random_game",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "game": []
            }
        }
    },
    "G-second-time/dlgo/agent/naive.py": {
        "RandomBot.select_move": {
            "name": "select_move",
            "location": 9,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        }
    },
    "G-second-time/dlgo/agent/pg.py": {
        "load_policy_agent": {
            "name": "load_policy_agent",
            "location": 79,
            "return": [
                "PolicyAgent"
            ],
            "arguments": {
                "h5file": []
            }
        },
        "PolicyAgent.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "encoder": []
            }
        },
        "PolicyAgent.set_collector": {
            "name": "set_collector",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collector": []
            }
        },
        "PolicyAgent.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "PolicyAgent.serialize": {
            "name": "serialize",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": []
            }
        },
        "PolicyAgent.train": {
            "name": "train",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [],
                "lr": [],
                "clipnorm": [],
                "batch_size": []
            }
        }
    },
    "G-second-time/dlgo/agent/predict.py": {
        "load_prediction_agent": {
            "name": "load_prediction_agent",
            "location": 60,
            "return": [
                "DeepLearningAgent"
            ],
            "arguments": {
                "h5file": []
            }
        },
        "DeepLearningAgent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "encoder": []
            }
        },
        "DeepLearningAgent.predict": {
            "name": "predict",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "DeepLearningAgent.select_move": {
            "name": "select_move",
            "location": 27,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "DeepLearningAgent.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": []
            }
        }
    },
    "G-second-time/dlgo/agent/q_agent.py": {
        "load_q_agent": {
            "name": "load_q_agent",
            "location": 131,
            "return": [
                "QAgent"
            ],
            "arguments": {
                "h5file": []
            }
        },
        "QAgent.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "encoder": [],
                "policy": []
            }
        },
        "QAgent.set_temperature": {
            "name": "set_temperature",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temperature": []
            }
        },
        "QAgent.set_collector": {
            "name": "set_collector",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collector": []
            }
        },
        "QAgent.set_policy": {
            "name": "set_policy",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": []
            }
        },
        "QAgent.select_move": {
            "name": "select_move",
            "location": 37,
            "return": [
                "goboard.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "QAgent.rank_moves_eps_greedy": {
            "name": "rank_moves_eps_greedy",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "QAgent.rank_moves_weighted": {
            "name": "rank_moves_weighted",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "QAgent.train": {
            "name": "train",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [],
                "lr": [],
                "batch_size": []
            }
        },
        "QAgent.serialize": {
            "name": "serialize",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": []
            }
        },
        "QAgent.diagnostics": {
            "name": "diagnostics",
            "location": 127,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/termination.py": {
        "get": {
            "name": "get",
            "location": 42,
            "return": [
                "PassWhenOpponentPasses"
            ],
            "arguments": {
                "termination": []
            }
        },
        "TerminationStrategy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminationStrategy.should_pass": {
            "name": "should_pass",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "TerminationStrategy.should_resign": {
            "name": "should_resign",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "PassWhenOpponentPasses.should_pass": {
            "name": "should_pass",
            "location": 20,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "TerminationAgent.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "strategy": []
            }
        },
        "TerminationAgent.select_move": {
            "name": "select_move",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        }
    },
    "G-second-time/dlgo/agent/__init__.py": {},
    "G-second-time/dlgo/data/generator.py": {
        "DataGenerator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_directory": [],
                "samples": []
            }
        },
        "DataGenerator.get_num_samples": {
            "name": "get_num_samples",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "num_classes": []
            }
        },
        "DataGenerator._generate": {
            "name": "_generate",
            "location": 22,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "num_classes": []
            }
        },
        "DataGenerator.generate": {
            "name": "generate",
            "location": 37,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "num_classes": []
            }
        }
    },
    "G-second-time/dlgo/data/index_processor.py": {
        "worker": {
            "name": "worker",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "url_and_target": []
            }
        },
        "KGSIndex.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kgs_url": [],
                "index_page": [],
                "data_directory": []
            }
        },
        "KGSIndex.download_files": {
            "name": "download_files",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KGSIndex.create_index_page": {
            "name": "create_index_page",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KGSIndex.load_index": {
            "name": "load_index",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/data/parallel_processor.py": {
        "worker": {
            "name": "worker",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "jobinfo": []
            }
        },
        "GoDataProcessor.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [],
                "data_directory": []
            }
        },
        "GoDataProcessor.load_go_data": {
            "name": "load_go_data",
            "location": 37,
            "return": [
                "Union[(dlgo.data.generator.DataGenerator, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "data_type": [],
                "num_samples": [],
                "use_generator": []
            }
        },
        "GoDataProcessor.unzip_data": {
            "name": "unzip_data",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": []
            }
        },
        "GoDataProcessor.process_zip": {
            "name": "process_zip",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [],
                "data_file_name": [],
                "game_list": []
            }
        },
        "GoDataProcessor.consolidate_games": {
            "name": "consolidate_games",
            "location": 115,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "samples": []
            }
        },
        "GoDataProcessor.get_handicap": {
            "name": "get_handicap",
            "location": 148,
            "return": [
                "Tuple[(dlgo.goboard_fast.GameState, bool)]"
            ],
            "arguments": {
                "sgf": []
            }
        },
        "GoDataProcessor.map_to_workers": {
            "name": "map_to_workers",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [],
                "samples": []
            }
        },
        "GoDataProcessor.num_total_examples": {
            "name": "num_total_examples",
            "location": 189,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "zip_file": [],
                "game_list": [],
                "name_list": []
            }
        }
    },
    "G-second-time/dlgo/data/processor.py": {
        "GoDataProcessor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [],
                "data_directory": []
            }
        },
        "GoDataProcessor.load_go_data": {
            "name": "load_go_data",
            "location": 26,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data_type": [],
                "num_samples": []
            }
        },
        "GoDataProcessor.unzip_data": {
            "name": "unzip_data",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": []
            }
        },
        "GoDataProcessor.process_zip": {
            "name": "process_zip",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [],
                "data_file_name": [],
                "game_list": []
            }
        },
        "GoDataProcessor.consolidate_games": {
            "name": "consolidate_games",
            "location": 111,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data_type": [],
                "samples": []
            }
        },
        "GoDataProcessor.get_handicap": {
            "name": "get_handicap",
            "location": 139,
            "return": [
                "Tuple[(dlgo.goboard_fast.GameState, bool)]"
            ],
            "arguments": {
                "sgf": []
            }
        },
        "GoDataProcessor.num_total_examples": {
            "name": "num_total_examples",
            "location": 153,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "zip_file": [],
                "game_list": [],
                "name_list": []
            }
        }
    },
    "G-second-time/dlgo/data/sampling.py": {
        "Sampler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [],
                "num_test_games": [],
                "cap_year": [],
                "seed": []
            }
        },
        "Sampler.draw_data": {
            "name": "draw_data",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_type": [],
                "num_samples": []
            }
        },
        "Sampler.draw_samples": {
            "name": "draw_samples",
            "location": 35,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "num_sample_games": []
            }
        },
        "Sampler.draw_training_games": {
            "name": "draw_training_games",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.compute_test_samples": {
            "name": "compute_test_samples",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.draw_training_samples": {
            "name": "draw_training_samples",
            "location": 92,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "num_sample_games": []
            }
        },
        "Sampler.draw_all_training": {
            "name": "draw_all_training",
            "location": 114,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/base.py": {
        "get_encoder_by_name": {
            "name": "get_encoder_by_name",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "board_size": []
            }
        },
        "Encoder.name": {
            "name": "name",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "Encoder.encode_point": {
            "name": "encode_point",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Encoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Encoder.num_points": {
            "name": "num_points",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.shape": {
            "name": "shape",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/oneplane.py": {
        "create": {
            "name": "create",
            "location": 45,
            "return": [
                "OnePlaneEncoder"
            ],
            "arguments": {
                "board_size": []
            }
        },
        "OnePlaneEncoder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board_size": []
            }
        },
        "OnePlaneEncoder.name": {
            "name": "name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnePlaneEncoder.encode": {
            "name": "encode",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "OnePlaneEncoder.encode_point": {
            "name": "encode_point",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "OnePlaneEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "OnePlaneEncoder.num_points": {
            "name": "num_points",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnePlaneEncoder.shape": {
            "name": "shape",
            "location": 41,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/sevenplane.py": {
        "create": {
            "name": "create",
            "location": 48,
            "return": [
                "SevenPlaneEncoder"
            ],
            "arguments": {
                "board_size": []
            }
        },
        "SevenPlaneEncoder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board_size": []
            }
        },
        "SevenPlaneEncoder.name": {
            "name": "name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SevenPlaneEncoder.encode": {
            "name": "encode",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "SevenPlaneEncoder.encode_point": {
            "name": "encode_point",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "SevenPlaneEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SevenPlaneEncoder.num_points": {
            "name": "num_points",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SevenPlaneEncoder.shape": {
            "name": "shape",
            "location": 44,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/simple.py": {
        "create": {
            "name": "create",
            "location": 62,
            "return": [
                "SimpleEncoder"
            ],
            "arguments": {
                "board_size": []
            }
        },
        "SimpleEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board_size": []
            }
        },
        "SimpleEncoder.name": {
            "name": "name",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEncoder.encode": {
            "name": "encode",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "SimpleEncoder.encode_point": {
            "name": "encode_point",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "SimpleEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SimpleEncoder.num_points": {
            "name": "num_points",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEncoder.shape": {
            "name": "shape",
            "location": 58,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/__init__.py": {},
    "G-second-time/dlgo/gosgf/sgf.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_map": [],
                "presenter": []
            }
        },
        "Node.get_size": {
            "name": "get_size",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_encoding": {
            "name": "get_encoding",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_presenter": {
            "name": "get_presenter",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.has_property": {
            "name": "has_property",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Node.properties": {
            "name": "properties",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_raw_list": {
            "name": "get_raw_list",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Node.get_raw": {
            "name": "get_raw",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Node.get_raw_property_map": {
            "name": "get_raw_property_map",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._set_raw_list": {
            "name": "_set_raw_list",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "values": []
            }
        },
        "Node.unset": {
            "name": "unset",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Node.set_raw_list": {
            "name": "set_raw_list",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "values": []
            }
        },
        "Node.set_raw": {
            "name": "set_raw",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "value": []
            }
        },
        "Node.get": {
            "name": "get",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Node.set": {
            "name": "set",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "value": []
            }
        },
        "Node.get_raw_move": {
            "name": "get_raw_move",
            "location": 203,
            "return": [
                "Tuple[(Optional[str], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_move": {
            "name": "get_move",
            "location": 224,
            "return": [
                "Tuple[(Any, Optional[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_setup_stones": {
            "name": "get_setup_stones",
            "location": 242,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.has_setup_stones": {
            "name": "has_setup_stones",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_move": {
            "name": "set_move",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": [],
                "move": []
            }
        },
        "Node.set_setup_stones": {
            "name": "set_setup_stones",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "black": [],
                "white": [],
                "empty": []
            }
        },
        "Node.add_comment_text": {
            "name": "add_comment_text",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "properties": []
            }
        },
        "Tree_node._add_child": {
            "name": "_add_child",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree_node.__len__": {
            "name": "__len__",
            "location": 361,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.__getitem__": {
            "name": "__getitem__",
            "location": 364,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tree_node.index": {
            "name": "index",
            "location": 367,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Tree_node.new_child": {
            "name": "new_child",
            "location": 370,
            "return": [
                "_TTree_node@@Tree_node@@"
            ],
            "arguments": {
                "self": [
                    "_TTree_node@@Tree_node@@"
                ],
                "index": []
            }
        },
        "Tree_node.delete": {
            "name": "delete",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.reparent": {
            "name": "reparent",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_parent": [],
                "index": []
            }
        },
        "Tree_node.find": {
            "name": "find",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Tree_node.find_property": {
            "name": "find_property",
            "location": 435,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "_Root_tree_node.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_map": [],
                "owner": []
            }
        },
        "_Unexpanded_root_tree_node.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "coarse_tree": []
            }
        },
        "_Unexpanded_root_tree_node._expand": {
            "name": "_expand",
            "location": 471,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Unexpanded_root_tree_node.__len__": {
            "name": "__len__",
            "location": 477,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Unexpanded_root_tree_node.__getitem__": {
            "name": "__getitem__",
            "location": 481,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_Unexpanded_root_tree_node.index": {
            "name": "index",
            "location": 485,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "_Unexpanded_root_tree_node.new_child": {
            "name": "new_child",
            "location": 489,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_Unexpanded_root_tree_node._main_sequence_iter": {
            "name": "_main_sequence_iter",
            "location": 493,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.__new__": {
            "name": "__new__",
            "location": 524,
            "return": [
                "_TSgf_game@@Sgf_game@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSgf_game]"
                ],
                "size": [],
                "encoding": []
            }
        },
        "Sgf_game.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.from_coarse_game_tree": {
            "name": "from_coarse_game_tree",
            "location": 542,
            "return": [
                "_TSgf_game@@Sgf_game@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSgf_game]"
                ],
                "coarse_game": [],
                "override_encoding": []
            }
        },
        "Sgf_game.from_string": {
            "name": "from_string",
            "location": 583,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "s": [],
                "override_encoding": []
            }
        },
        "Sgf_game.serialise": {
            "name": "serialise",
            "location": 597,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "wrap": []
            }
        },
        "Sgf_game.get_property_presenter": {
            "name": "get_property_presenter",
            "location": 634,
            "return": [
                "sgf_properties.Presenter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_root": {
            "name": "get_root",
            "location": 645,
            "return": [
                "_Root_tree_node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_last_node": {
            "name": "get_last_node",
            "location": 649,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_main_sequence": {
            "name": "get_main_sequence",
            "location": 656,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_main_sequence_below": {
            "name": "get_main_sequence_below",
            "location": 669,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Sgf_game.get_sequence_above": {
            "name": "get_sequence_above",
            "location": 685,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Sgf_game.main_sequence_iter": {
            "name": "main_sequence_iter",
            "location": 702,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.extend_main_sequence": {
            "name": "extend_main_sequence",
            "location": 722,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_size": {
            "name": "get_size",
            "location": 730,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_charset": {
            "name": "get_charset",
            "location": 734,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_komi": {
            "name": "get_komi",
            "location": 751,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_handicap": {
            "name": "get_handicap",
            "location": 764,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_player_name": {
            "name": "get_player_name",
            "location": 783,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "colour": []
            }
        },
        "Sgf_game.get_winner": {
            "name": "get_winner",
            "location": 795,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.set_date": {
            "name": "set_date",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": []
            }
        },
        "Node.__str__.format_property": {
            "name": "format_property",
            "location": 325,
            "return": [],
            "arguments": {
                "ident": [],
                "values": []
            }
        }
    },
    "G-second-time/dlgo/gosgf/sgf_grammar.py": {
        "is_valid_property_identifier": {
            "name": "is_valid_property_identifier",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "is_valid_property_value": {
            "name": "is_valid_property_value",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "tokenise": {
            "name": "tokenise",
            "location": 75,
            "return": [
                "Tuple[(List[Tuple[(Any, bytes)]], int)]"
            ],
            "arguments": {
                "s": [],
                "start_position": []
            }
        },
        "_parse_sgf_game": {
            "name": "_parse_sgf_game",
            "location": 141,
            "return": [
                "Tuple[(None, Optional[int])]"
            ],
            "arguments": {
                "s": [],
                "start_position": []
            }
        },
        "parse_sgf_game": {
            "name": "parse_sgf_game",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "parse_sgf_collection": {
            "name": "parse_sgf_collection",
            "location": 232,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": []
            }
        },
        "block_format": {
            "name": "block_format",
            "location": 265,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pieces": [],
                "width": []
            }
        },
        "serialise_game_tree": {
            "name": "serialise_game_tree",
            "location": 291,
            "return": [
                "bytes"
            ],
            "arguments": {
                "game_tree": [],
                "wrap": []
            }
        },
        "make_tree": {
            "name": "make_tree",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "game_tree": [],
                "root": [],
                "node_builder": [],
                "node_adder": []
            }
        },
        "make_coarse_game_tree": {
            "name": "make_coarse_game_tree",
            "location": 364,
            "return": [
                "Coarse_game_tree"
            ],
            "arguments": {
                "root": [],
                "get_children": [],
                "get_properties": []
            }
        },
        "main_sequence_iter": {
            "name": "main_sequence_iter",
            "location": 398,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "game_tree": []
            }
        },
        "parse_compose": {
            "name": "parse_compose",
            "location": 422,
            "return": [
                "Tuple[(Union[(bytes, _T0)], Any)]"
            ],
            "arguments": {
                "s": [
                    "_T0@@"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 440,
            "return": [
                "Any"
            ],
            "arguments": {
                "s1": [],
                "s2": []
            }
        },
        "simpletext_value": {
            "name": "simpletext_value",
            "location": 460,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": []
            }
        },
        "text_value": {
            "name": "text_value",
            "location": 491,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": []
            }
        },
        "escape_text": {
            "name": "escape_text",
            "location": 520,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "Coarse_game_tree.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gosgf/sgf_properties.py": {
        "normalise_charset_name": {
            "name": "normalise_charset_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "interpret_go_point": {
            "name": "interpret_go_point",
            "location": 45,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "s": [],
                "size": []
            }
        },
        "serialise_go_point": {
            "name": "serialise_go_point",
            "location": 73,
            "return": [
                "bytes"
            ],
            "arguments": {
                "move": [],
                "size": []
            }
        },
        "interpret_none": {
            "name": "interpret_none",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_none": {
            "name": "serialise_none",
            "location": 117,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": [],
                "context": []
            }
        },
        "interpret_number": {
            "name": "interpret_number",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_number": {
            "name": "serialise_number",
            "location": 136,
            "return": [
                "bytes"
            ],
            "arguments": {
                "i": [],
                "context": []
            }
        },
        "interpret_real": {
            "name": "interpret_real",
            "location": 145,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_real": {
            "name": "serialise_real",
            "location": 160,
            "return": [
                "bytes"
            ],
            "arguments": {
                "f": [],
                "context": []
            }
        },
        "interpret_double": {
            "name": "interpret_double",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_double": {
            "name": "serialise_double",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [],
                "context": []
            }
        },
        "interpret_colour": {
            "name": "interpret_colour",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_colour": {
            "name": "serialise_colour",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "colour": [],
                "context": []
            }
        },
        "_transcode": {
            "name": "_transcode",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "encoding": []
            }
        },
        "interpret_simpletext": {
            "name": "interpret_simpletext",
            "location": 243,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_simpletext": {
            "name": "serialise_simpletext",
            "location": 256,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "interpret_text": {
            "name": "interpret_text",
            "location": 269,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_text": {
            "name": "serialise_text",
            "location": 282,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "interpret_point": {
            "name": "interpret_point",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_point": {
            "name": "serialise_point",
            "location": 309,
            "return": [
                "bytes"
            ],
            "arguments": {
                "point": [],
                "context": []
            }
        },
        "interpret_move": {
            "name": "interpret_move",
            "location": 322,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_move": {
            "name": "serialise_move",
            "location": 333,
            "return": [
                "bytes"
            ],
            "arguments": {
                "move": [],
                "context": []
            }
        },
        "interpret_point_list": {
            "name": "interpret_point_list",
            "location": 344,
            "return": [
                "set"
            ],
            "arguments": {
                "values": [],
                "context": []
            }
        },
        "serialise_point_list": {
            "name": "serialise_point_list",
            "location": 379,
            "return": [
                "list"
            ],
            "arguments": {
                "points": [],
                "context": []
            }
        },
        "interpret_AP": {
            "name": "interpret_AP",
            "location": 396,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_AP": {
            "name": "serialise_AP",
            "location": 412,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "context": []
            }
        },
        "interpret_ARLN_list": {
            "name": "interpret_ARLN_list",
            "location": 427,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "values": [],
                "context": []
            }
        },
        "serialise_ARLN_list": {
            "name": "serialise_ARLN_list",
            "location": 441,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "values": [],
                "context": []
            }
        },
        "interpret_FG": {
            "name": "interpret_FG",
            "location": 451,
            "return": [
                "Optional[Tuple[(int, Any)]]"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_FG": {
            "name": "serialise_FG",
            "location": 465,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [],
                "context": []
            }
        },
        "interpret_LB_list": {
            "name": "interpret_LB_list",
            "location": 481,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "values": [],
                "context": []
            }
        },
        "serialise_LB_list": {
            "name": "serialise_LB_list",
            "location": 495,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "values": [],
                "context": []
            }
        },
        "_make_property_type": {
            "name": "_make_property_type",
            "location": 515,
            "return": [
                "Property_type"
            ],
            "arguments": {
                "type_name": [],
                "allows_empty_list": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "_Context.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "encoding": []
            }
        },
        "Property_type.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [],
                "serialiser": [],
                "uses_list": [],
                "allows_empty_list": []
            }
        },
        "Presenter.__init__": {
            "name": "__init__",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "encoding": []
            }
        },
        "Presenter.get_property_type": {
            "name": "get_property_type",
            "location": 645,
            "return": [
                "Property_type"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Presenter.register_property": {
            "name": "register_property",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "property_type": []
            }
        },
        "Presenter.deregister_property": {
            "name": "deregister_property",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Presenter.set_private_property_type": {
            "name": "set_private_property_type",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_type": []
            }
        },
        "Presenter._get_effective_property_type": {
            "name": "_get_effective_property_type",
            "location": 669,
            "return": [
                "Property_type"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Presenter.interpret_as_type": {
            "name": "interpret_as_type",
            "location": 678,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "property_type": [],
                "raw_values": []
            }
        },
        "Presenter.interpret": {
            "name": "interpret",
            "location": 697,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "raw_values": []
            }
        },
        "Presenter.serialise_as_type": {
            "name": "serialise_as_type",
            "location": 722,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "property_type": [],
                "value": []
            }
        },
        "Presenter.serialise": {
            "name": "serialise",
            "location": 739,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "value": []
            }
        }
    },
    "G-second-time/dlgo/gosgf/__init__.py": {},
    "G-second-time/dlgo/gtp/board.py": {
        "coords_to_gtp_position": {
            "name": "coords_to_gtp_position",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "move": []
            }
        },
        "gtp_position_to_coords": {
            "name": "gtp_position_to_coords",
            "location": 17,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "gtp_position": []
            }
        }
    },
    "G-second-time/dlgo/gtp/command.py": {
        "parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "Command"
            ],
            "arguments": {
                "command_string": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [],
                "name": [],
                "args": []
            }
        },
        "Command.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/frontend.py": {
        "GTPFrontend.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "termination_agent": [],
                "termination": []
            }
        },
        "GTPFrontend.run": {
            "name": "run",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.process": {
            "name": "process",
            "location": 62,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "GTPFrontend.handle_play": {
            "name": "handle_play",
            "location": 68,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "move": []
            }
        },
        "GTPFrontend.handle_genmove": {
            "name": "handle_genmove",
            "location": 77,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "color": []
            }
        },
        "GTPFrontend.handle_fixed_handicap": {
            "name": "handle_fixed_handicap",
            "location": 86,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "nstones": []
            }
        },
        "GTPFrontend.handle_quit": {
            "name": "handle_quit",
            "location": 93,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_clear_board": {
            "name": "handle_clear_board",
            "location": 97,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_known_command": {
            "name": "handle_known_command",
            "location": 101,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "command_name": []
            }
        },
        "GTPFrontend.handle_boardsize": {
            "name": "handle_boardsize",
            "location": 104,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "GTPFrontend.handle_showboard": {
            "name": "handle_showboard",
            "location": 109,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_time_left": {
            "name": "handle_time_left",
            "location": 113,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "time": [],
                "stones": []
            }
        },
        "GTPFrontend.handle_time_settings": {
            "name": "handle_time_settings",
            "location": 117,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": [],
                "main_time": [],
                "byo_yomi_time": [],
                "byo_yomi_stones": []
            }
        },
        "GTPFrontend.handle_unknown": {
            "name": "handle_unknown",
            "location": 121,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.ignore": {
            "name": "ignore",
            "location": 124,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_protocol_version": {
            "name": "handle_protocol_version",
            "location": 127,
            "return": [
                "response.Response"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/local.py": {
        "LocalGtpBot.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "go_bot": [],
                "termination": [],
                "handicap": [],
                "opponent": [],
                "output_sgf": [],
                "our_color": []
            }
        },
        "LocalGtpBot.send_command": {
            "name": "send_command",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "LocalGtpBot.get_response": {
            "name": "get_response",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.command_and_response": {
            "name": "command_and_response",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "LocalGtpBot.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.set_handicap": {
            "name": "set_handicap",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play": {
            "name": "play",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play_our_move": {
            "name": "play_our_move",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play_their_move": {
            "name": "play_their_move",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/response.py": {
        "success": {
            "name": "success",
            "location": 15,
            "return": [
                "Response"
            ],
            "arguments": {
                "body": []
            }
        },
        "error": {
            "name": "error",
            "location": 19,
            "return": [
                "Response"
            ],
            "arguments": {
                "body": []
            }
        },
        "bool_response": {
            "name": "bool_response",
            "location": 23,
            "return": [
                "Response"
            ],
            "arguments": {
                "boolean": []
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "gtp_command": [],
                "gtp_response": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "body": []
            }
        }
    },
    "G-second-time/dlgo/gtp/utils.py": {
        "SGFWriter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_sgf": []
            }
        },
        "SGFWriter.append": {
            "name": "append",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SGFWriter.write_sgf": {
            "name": "write_sgf",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SGFWriter.coordinates": {
            "name": "coordinates",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "move": []
            }
        }
    },
    "G-second-time/dlgo/gtp/__init__.py": {},
    "G-second-time/dlgo/http/server.py": {
        "get_web_app": {
            "name": "get_web_app",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "bot_map": []
            }
        },
        "get_web_app.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [],
            "arguments": {
                "bot_name": []
            }
        }
    },
    "G-second-time/dlgo/http/__init__.py": {},
    "G-second-time/dlgo/mcts/mcts.py": {
        "MCTSNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [],
                "parent": [],
                "move": []
            }
        },
        "MCTSNode.add_random_child": {
            "name": "add_random_child",
            "location": 21,
            "return": [
                "_TMCTSNode@@MCTSNode@@"
            ],
            "arguments": {
                "self": [
                    "_TMCTSNode@@MCTSNode@@"
                ]
            }
        },
        "MCTSNode.record_win": {
            "name": "record_win",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winner": []
            }
        },
        "MCTSNode.can_add_child": {
            "name": "can_add_child",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTSNode.is_terminal": {
            "name": "is_terminal",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTSNode.winning_pct": {
            "name": "winning_pct",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "player": []
            }
        }
    },
    "G-second-time/dlgo/mcts/__init__.py": {},
    "G-second-time/dlgo/networks/large.py": {
        "layers": {
            "name": "layers",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "input_shape": []
            }
        }
    },
    "G-second-time/dlgo/networks/small.py": {
        "layers": {
            "name": "layers",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "input_shape": []
            }
        }
    },
    "G-second-time/dlgo/networks/two_inputs.py": {
        "build_model": {
            "name": "build_model",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "encoder": []
            }
        }
    },
    "G-second-time/dlgo/networks/__init__.py": {},
    "G-second-time/dlgo/rl/experience.py": {
        "combine_experience": {
            "name": "combine_experience",
            "location": 59,
            "return": [
                "ExperienceBuffer"
            ],
            "arguments": {
                "collectors": []
            }
        },
        "load_experience": {
            "name": "load_experience",
            "location": 73,
            "return": [
                "ExperienceBuffer"
            ],
            "arguments": {
                "h5file": []
            }
        },
        "ExperienceCollector.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceCollector.begin_episode": {
            "name": "begin_episode",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceCollector.record_decision": {
            "name": "record_decision",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "action": [],
                "estimated_value": []
            }
        },
        "ExperienceCollector.complete_episode": {
            "name": "complete_episode",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reward": []
            }
        },
        "ExperienceCollector.to_buffer": {
            "name": "to_buffer",
            "location": 37,
            "return": [
                "ExperienceBuffer"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceBuffer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [],
                "actions": [],
                "rewards": [],
                "advantages": []
            }
        },
        "ExperienceBuffer.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": []
            }
        }
    },
    "G-second-time/dlgo/rl/simulate.py": {
        "simulate_game": {
            "name": "simulate_game",
            "location": 13,
            "return": [
                "GameRecord"
            ],
            "arguments": {
                "black_player": [],
                "white_player": []
            }
        },
        "experience_simulation": {
            "name": "experience_simulation",
            "location": 35,
            "return": [
                "dlgo.rl.experience.ExperienceBuffer"
            ],
            "arguments": {
                "num_games": [],
                "agent1": [],
                "agent2": []
            }
        }
    },
    "G-second-time/dlgo/rl/__init__.py": {},
    "G-second-time/dlgo/scratches/keras_01.py": {},
    "G-second-time/dlgo/scratches/keras_02.py": {},
    "G-second-time/dlgo/scratches/__init__.py": {},
    "G-second-time/mnist/average_digits.py": {
        "average_digit": {
            "name": "average_digit",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "digit": []
            }
        },
        "predict": {
            "name": "predict",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "W": [],
                "b": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "data": [],
                "digit": [],
                "threshold": [],
                "W": [],
                "b": []
            }
        }
    },
    "G-second-time/mnist/layers.py": {
        "sigmoid_double": {
            "name": "sigmoid_double",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "z": []
            }
        },
        "sigmoid_prime_double": {
            "name": "sigmoid_prime_double",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sigmoid_prime": {
            "name": "sigmoid_prime",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "z": []
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.connect": {
            "name": "connect",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "Layer.forward": {
            "name": "forward",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_forward_input": {
            "name": "get_forward_input",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.backward": {
            "name": "backward",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_backward_input": {
            "name": "get_backward_input",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.clear_deltas": {
            "name": "clear_deltas",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.update_params": {
            "name": "update_params",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": []
            }
        },
        "Layer.describe": {
            "name": "describe",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": []
            }
        },
        "ActivationLayer.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.backward": {
            "name": "backward",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.describe": {
            "name": "describe",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": []
            }
        },
        "DenseLayer.forward": {
            "name": "forward",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.backward": {
            "name": "backward",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.update_params": {
            "name": "update_params",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": []
            }
        },
        "DenseLayer.clear_deltas": {
            "name": "clear_deltas",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.describe": {
            "name": "describe",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/mnist/load_mnist.py": {
        "encode_label": {
            "name": "encode_label",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "j": []
            }
        },
        "shape_data": {
            "name": "shape_data",
            "location": 12,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "data": []
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 20,
            "return": [
                "Tuple[(List[nothing], List[nothing])]"
            ],
            "arguments": {}
        }
    },
    "G-second-time/mnist/network.py": {
        "MSE.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSE.loss_function": {
            "name": "loss_function",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "labels": []
            }
        },
        "MSE.loss_derivative": {
            "name": "loss_derivative",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "labels": []
            }
        },
        "SequentialNetwork.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "SequentialNetwork.add": {
            "name": "add",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "SequentialNetwork.train": {
            "name": "train",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_data": [],
                "epochs": [],
                "mini_batch_size": [],
                "learning_rate": [],
                "test_data": []
            }
        },
        "SequentialNetwork.train_batch": {
            "name": "train_batch",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mini_batch": [],
                "learning_rate": []
            }
        },
        "SequentialNetwork.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mini_batch": [],
                "learning_rate": []
            }
        },
        "SequentialNetwork.forward_backward": {
            "name": "forward_backward",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mini_batch": []
            }
        },
        "SequentialNetwork.single_forward": {
            "name": "single_forward",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SequentialNetwork.evaluate": {
            "name": "evaluate",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "test_data": []
            }
        }
    },
    "G-second-time/mnist/run_network.py": {},
    "G-second-time/mnist/__init__.py": {},
    "G-second-time/mnist/keras/mnist.py": {},
    "G-second-time/tests/test_gotypes.py": {
        "TestPlayer.test_other_correct": {
            "name": "test_other_correct",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_other_error": {
            "name": "test_other_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_point_correct": {
            "name": "test_point_correct",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_point_error": {
            "name": "test_point_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_neighbor": {
            "name": "test_neighbor",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/tests/__init__.py": {}
}
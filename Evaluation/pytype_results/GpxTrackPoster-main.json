{
    "GpxTrackPoster-main/setup.py": {
        "_read_reqs": {
            "name": "_read_reqs",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "relpath": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/calendar_drawer.py": {
        "CalendarDrawer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "CalendarDrawer.draw": {
            "name": "draw",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        },
        "CalendarDrawer._draw": {
            "name": "_draw",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": [],
                "year": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/circular_drawer.py": {
        "CircularDrawer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "CircularDrawer.create_args": {
            "name": "create_args",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args_parser": []
            }
        },
        "CircularDrawer.fetch_args": {
            "name": "fetch_args",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CircularDrawer.draw": {
            "name": "draw",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        },
        "CircularDrawer._draw_year": {
            "name": "_draw_year",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": [],
                "year": []
            }
        },
        "CircularDrawer._determine_ring_distance": {
            "name": "_determine_ring_distance",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "CircularDrawer._draw_rings": {
            "name": "_draw_rings",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "center": [],
                "radius_range": []
            }
        },
        "CircularDrawer._draw_circle_segment": {
            "name": "_draw_circle_segment",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "tracks": [],
                "a1": [],
                "a2": [],
                "rr": [],
                "center": [],
                "values": [],
                "key_times": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/cli.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/exceptions.py": {},
    "GpxTrackPoster-main/gpxtrackposter/github_drawer.py": {
        "GithubDrawer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "GithubDrawer.draw": {
            "name": "draw",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/grid_drawer.py": {
        "GridDrawer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "GridDrawer.draw": {
            "name": "draw",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        },
        "GridDrawer._draw_track": {
            "name": "_draw_track",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "tr": [],
                "size": [],
                "offset": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/heatmap_drawer.py": {
        "HeatmapDrawer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "HeatmapDrawer.create_args": {
            "name": "create_args",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args_parser": []
            }
        },
        "HeatmapDrawer.fetch_args": {
            "name": "fetch_args",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HeatmapDrawer._get_line_transparencies_and_widths": {
            "name": "_get_line_transparencies_and_widths",
            "location": 126,
            "return": [
                "List[Tuple[(float, float)]]"
            ],
            "arguments": {
                "self": [],
                "bbox": []
            }
        },
        "HeatmapDrawer._determine_bbox": {
            "name": "_determine_bbox",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeatmapDrawer.draw": {
            "name": "draw",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/localization.py": {
        "localized_day_of_week_name": {
            "name": "localized_day_of_week_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "day_of_week": [],
                "short": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/poster.py": {
        "Poster.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poster.set_language": {
            "name": "set_language",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [],
                "localedir": []
            }
        },
        "Poster.translate": {
            "name": "translate",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Poster.month_name": {
            "name": "month_name",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "month": []
            }
        },
        "Poster.set_athlete": {
            "name": "set_athlete",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "athlete": []
            }
        },
        "Poster.set_title": {
            "name": "set_title",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "Poster.set_with_animation": {
            "name": "set_with_animation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_animation": []
            }
        },
        "Poster.set_animation_time": {
            "name": "set_animation_time",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "animation_time": []
            }
        },
        "Poster.set_tracks": {
            "name": "set_tracks",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "Poster.draw": {
            "name": "draw",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawer": [],
                "output": []
            }
        },
        "Poster.m2u": {
            "name": "m2u",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "Poster.u": {
            "name": "u",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poster.format_distance": {
            "name": "format_distance",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Poster._draw_tracks": {
            "name": "_draw_tracks",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [],
                "size": [],
                "offset": []
            }
        },
        "Poster._draw_header": {
            "name": "_draw_header",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Poster._draw_footer": {
            "name": "_draw_footer",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Poster._compute_track_statistics": {
            "name": "_compute_track_statistics",
            "location": 302,
            "return": [
                "Tuple[(Any, Any, gpxtrackposter.quantity_range.QuantityRange, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poster._compute_years": {
            "name": "_compute_years",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/quantity_range.py": {
        "QuantityRange.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.from_pair": {
            "name": "from_pair",
            "location": 17,
            "return": [
                "_TQuantityRange@@QuantityRange@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TQuantityRange]"
                ],
                "value1": [],
                "value2": []
            }
        },
        "QuantityRange.clear": {
            "name": "clear",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.is_valid": {
            "name": "is_valid",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.lower": {
            "name": "lower",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.upper": {
            "name": "upper",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.diameter": {
            "name": "diameter",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantityRange.contains": {
            "name": "contains",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QuantityRange.extend": {
            "name": "extend",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QuantityRange.interpolate": {
            "name": "interpolate",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "relative": []
            }
        },
        "QuantityRange.relative_position": {
            "name": "relative_position",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/timezone_adjuster.py": {
        "TimezoneAdjuster.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimezoneAdjuster.adjust": {
            "name": "adjust",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "time": [],
                "latlng": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/track.py": {
        "Track.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.load_gpx": {
            "name": "load_gpx",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [],
                "timezone_adjuster": []
            }
        },
        "Track.load_strava": {
            "name": "load_strava",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activity": []
            }
        },
        "Track.has_time": {
            "name": "has_time",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.start_time": {
            "name": "start_time",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.set_start_time": {
            "name": "set_start_time",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Track.end_time": {
            "name": "end_time",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.set_end_time": {
            "name": "set_end_time",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Track.length_meters": {
            "name": "length_meters",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Track.length": {
            "name": "length",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.bbox": {
            "name": "bbox",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track._load_gpx_data": {
            "name": "_load_gpx_data",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gpx": [],
                "timezone_adjuster": []
            }
        },
        "Track.append": {
            "name": "append",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Track.load_cache": {
            "name": "load_cache",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_file_name": []
            }
        },
        "Track.store_cache": {
            "name": "store_cache",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_file_name": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/tracks_drawer.py": {
        "TracksDrawer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_poster": []
            }
        },
        "TracksDrawer.create_args": {
            "name": "create_args",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args_parser": []
            }
        },
        "TracksDrawer.fetch_args": {
            "name": "fetch_args",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TracksDrawer.draw": {
            "name": "draw",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dr": [],
                "g": [],
                "size": [],
                "offset": []
            }
        },
        "TracksDrawer.color": {
            "name": "color",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "length_range": [],
                "length": [],
                "is_special": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/track_loader.py": {
        "load_gpx_file": {
            "name": "load_gpx_file",
            "location": 32,
            "return": [
                "gpxtrackposter.track.Track"
            ],
            "arguments": {
                "file_name": [],
                "timezone_adjuster": []
            }
        },
        "load_cached_track_file": {
            "name": "load_cached_track_file",
            "location": 40,
            "return": [
                "gpxtrackposter.track.Track"
            ],
            "arguments": {
                "cache_file_name": [],
                "file_name": []
            }
        },
        "TrackLoader.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": []
            }
        },
        "TrackLoader.set_cache_dir": {
            "name": "set_cache_dir",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_dir": []
            }
        },
        "TrackLoader.clear_cache": {
            "name": "clear_cache",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackLoader.set_min_length": {
            "name": "set_min_length",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_length": []
            }
        },
        "TrackLoader.set_activity": {
            "name": "set_activity",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activity_type": []
            }
        },
        "TrackLoader.load_tracks": {
            "name": "load_tracks",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "base_dir": []
            }
        },
        "TrackLoader.load_strava_tracks": {
            "name": "load_strava_tracks",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "strava_config": []
            }
        },
        "TrackLoader._filter_tracks": {
            "name": "_filter_tracks",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "TrackLoader._filter_and_merge_tracks": {
            "name": "_filter_and_merge_tracks",
            "location": 172,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "TrackLoader._merge_tracks": {
            "name": "_merge_tracks",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {
                "tracks": []
            }
        },
        "TrackLoader._load_tracks": {
            "name": "_load_tracks",
            "location": 201,
            "return": [
                "Dict[(Any, gpxtrackposter.track.Track)]"
            ],
            "arguments": {
                "self": [],
                "file_names": [],
                "timezone_adjuster": []
            }
        },
        "TrackLoader._load_tracks_from_cache": {
            "name": "_load_tracks_from_cache",
            "location": 231,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "file_names": []
            }
        },
        "TrackLoader._store_tracks_to_cache": {
            "name": "_store_tracks_to_cache",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "TrackLoader._store_strava_tracks_to_cache": {
            "name": "_store_strava_tracks_to_cache",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "TrackLoader._make_strava_cache_dict": {
            "name": "_make_strava_cache_dict",
            "location": 287,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "track": []
            }
        },
        "TrackLoader._strava_cache_to_track": {
            "name": "_strava_cache_to_track",
            "location": 300,
            "return": [
                "gpxtrackposter.track.Track"
            ],
            "arguments": {
                "data": []
            }
        },
        "TrackLoader._list_gpx_files": {
            "name": "_list_gpx_files",
            "location": 312,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "base_dir": []
            }
        },
        "TrackLoader._get_cache_file_name": {
            "name": "_get_cache_file_name",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/units.py": {
        "Units.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/utils.py": {
        "latlng2xy": {
            "name": "latlng2xy",
            "location": 20,
            "return": [
                "gpxtrackposter.xy.XY"
            ],
            "arguments": {
                "latlng": []
            }
        },
        "lng2x": {
            "name": "lng2x",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "lng_deg": []
            }
        },
        "lat2y": {
            "name": "lat2y",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "lat_deg": []
            }
        },
        "project": {
            "name": "project",
            "location": 32,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "bbox": [],
                "size": [],
                "offset": [],
                "latlnglines": []
            }
        },
        "compute_bounds_xy": {
            "name": "compute_bounds_xy",
            "location": 62,
            "return": [
                "Tuple[(gpxtrackposter.value_range.ValueRange, gpxtrackposter.value_range.ValueRange)]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "compute_grid": {
            "name": "compute_grid",
            "location": 72,
            "return": [
                "Tuple[(Any, Optional[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "count": [],
                "dimensions": []
            }
        },
        "interpolate_color": {
            "name": "interpolate_color",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "color1": [],
                "color2": [],
                "ratio": []
            }
        },
        "format_float": {
            "name": "format_float",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "f": []
            }
        },
        "make_key_times": {
            "name": "make_key_times",
            "location": 114,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "year_count": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/value_range.py": {
        "ValueRange.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.from_pair": {
            "name": "from_pair",
            "location": 33,
            "return": [
                "_TValueRange@@ValueRange@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TValueRange]"
                ],
                "value1": [],
                "value2": []
            }
        },
        "ValueRange.clear": {
            "name": "clear",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.is_valid": {
            "name": "is_valid",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.lower": {
            "name": "lower",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.upper": {
            "name": "upper",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.diameter": {
            "name": "diameter",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.contains": {
            "name": "contains",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ValueRange.extend": {
            "name": "extend",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ValueRange.interpolate": {
            "name": "interpolate",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "relative": []
            }
        },
        "ValueRange.relative_position": {
            "name": "relative_position",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/xy.py": {
        "XY.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "XY.__mul__": {
            "name": "__mul__",
            "location": 17,
            "return": [
                "_TXY@@XY@@"
            ],
            "arguments": {
                "self": [
                    "_TXY@@XY@@"
                ],
                "factor": []
            }
        },
        "XY.__rmul__": {
            "name": "__rmul__",
            "location": 22,
            "return": [
                "_TXY@@XY@@"
            ],
            "arguments": {
                "self": [
                    "_TXY@@XY@@"
                ],
                "factor": []
            }
        },
        "XY.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [
                "_TXY@@XY@@"
            ],
            "arguments": {
                "self": [
                    "_TXY@@XY@@"
                ],
                "other": []
            }
        },
        "XY.__sub__": {
            "name": "__sub__",
            "location": 30,
            "return": [
                "_TXY@@XY@@"
            ],
            "arguments": {
                "self": [
                    "_TXY@@XY@@"
                ],
                "other": []
            }
        },
        "XY.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XY.tuple": {
            "name": "tuple",
            "location": 36,
            "return": [
                "builtins.tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/year_range.py": {
        "YearRange.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YearRange.parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "YearRange.clear": {
            "name": "clear",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YearRange.add": {
            "name": "add",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "YearRange.contains": {
            "name": "contains",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "YearRange.count": {
            "name": "count",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "YearRange.iter": {
            "name": "iter",
            "location": 97,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GpxTrackPoster-main/gpxtrackposter/__init__.py": {},
    "GpxTrackPoster-main/scripts/bump_year.py": {
        "bump_year": {
            "name": "bump_year",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": []
            }
        }
    },
    "GpxTrackPoster-main/scripts/check_copyright.py": {
        "has_valid_copyright": {
            "name": "has_valid_copyright",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_name": []
            }
        }
    },
    "GpxTrackPoster-main/scripts/update_readme.py": {},
    "GpxTrackPoster-main/tests/test_timezone_adjuster.py": {
        "test_adjust": {
            "name": "test_adjust",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GpxTrackPoster-main/tests/test_track_loader.py": {
        "mock_activity": {
            "name": "mock_activity",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "mocker": [],
                "activity_type": []
            }
        },
        "fixture_mock_run_activity": {
            "name": "fixture_mock_run_activity",
            "location": 26,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "fixture_mock_walk_activity": {
            "name": "fixture_mock_walk_activity",
            "location": 31,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "fixture_mock_hike_activity": {
            "name": "fixture_mock_hike_activity",
            "location": 36,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "strava_config": {
            "name": "strava_config",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [],
                "activity_type": []
            }
        },
        "fixture_strava_config_without_type_filter": {
            "name": "fixture_strava_config_without_type_filter",
            "location": 54,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "fixture_strava_config_with_run_type_filter": {
            "name": "fixture_strava_config_with_run_type_filter",
            "location": 59,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "fixture_strava_config_with_walk_hike_type_filter": {
            "name": "fixture_strava_config_with_walk_hike_type_filter",
            "location": 64,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "fixture_loader": {
            "name": "fixture_loader",
            "location": 69,
            "return": [],
            "arguments": {
                "mocker": [],
                "mock_run_activity": [],
                "mock_walk_activity": [],
                "mock_hike_activity": []
            }
        },
        "fixture_mock_track_instance": {
            "name": "fixture_mock_track_instance",
            "location": 80,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_strava_tracks_without_activity_type_filter": {
            "name": "test_load_strava_tracks_without_activity_type_filter",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "strava_config_without_type_filter": [],
                "mock_track_instance": [],
                "mock_run_activity": [],
                "mock_walk_activity": [],
                "mock_hike_activity": []
            }
        },
        "test_load_strava_tracks_with_str_activity_type_filter": {
            "name": "test_load_strava_tracks_with_str_activity_type_filter",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "strava_config_with_run_type_filter": [],
                "mock_track_instance": [],
                "mock_run_activity": []
            }
        },
        "test_load_strava_tracks_with_list_activity_type_filter": {
            "name": "test_load_strava_tracks_with_list_activity_type_filter",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "strava_config_with_walk_hike_type_filter": [],
                "mock_track_instance": [],
                "mock_walk_activity": [],
                "mock_hike_activity": []
            }
        }
    },
    "GpxTrackPoster-main/tests/test_utils.py": {
        "test_interpolate_color": {
            "name": "test_interpolate_color",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GpxTrackPoster-main/tests/__init__.py": {}
}
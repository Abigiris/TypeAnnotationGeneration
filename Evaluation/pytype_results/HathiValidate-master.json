{
    "HathiValidate-master/cx_setup.py": {
        "get_project_metadata": {
            "name": "get_project_metadata",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "create_msi_tablename": {
            "name": "create_msi_tablename",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "python_name": [],
                "fullname": []
            }
        },
        "get_tests": {
            "name": "get_tests",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "HathiValidate-master/setup.py": {},
    "HathiValidate-master/docs/source/conf.py": {
        "get_project_metadata": {
            "name": "get_project_metadata",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "HathiValidate-master/features/steps/manifest.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 146,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "HathiValidate-master/features/steps/report.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 93,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/cli.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [],
            "arguments": {
                "cli_args": []
            }
        },
        "AbsValidation.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "logger": []
            }
        },
        "AbsValidation.get_errors": {
            "name": "get_errors",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateMissingComponents.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "logger": []
            }
        },
        "ValidateMissingComponents.get_errors": {
            "name": "get_errors",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateMissingFiles.get_errors": {
            "name": "get_errors",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateExtraSubdirectories.get_errors": {
            "name": "get_errors",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateChecksums.get_errors": {
            "name": "get_errors",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateMarc.get_errors": {
            "name": "get_errors",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateYAML.get_errors": {
            "name": "get_errors",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ValidateOcrFiles.get_errors": {
            "name": "get_errors",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "ReportGenerator.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "logger": [],
                "checks": []
            }
        },
        "ReportGenerator.generate_report": {
            "name": "generate_report",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/configure_logging.py": {
        "configure_logger": {
            "name": "configure_logger",
            "location": 8,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "debug_mode": [],
                "log_file": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/manifest.py": {
        "get_report_as_str": {
            "name": "get_report_as_str",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "manifest": [],
                "width": []
            }
        },
        "PackageManifestDirector.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageManifestDirector.build_manifest": {
            "name": "build_manifest",
            "location": 19,
            "return": [
                "List[PackageManifestBuilder]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageManifestDirector.add_package": {
            "name": "add_package",
            "location": 23,
            "return": [
                "PackageManifestBuilder"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "PackageManifestBuilder.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "PackageManifestBuilder.add_file": {
            "name": "add_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "PackageManifestBuilder.files": {
            "name": "files",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/package.py": {
        "get_dirs": {
            "name": "get_dirs",
            "location": 7,
            "return": [
                "Generator[(Union[(bytes, str)], Any, None)]"
            ],
            "arguments": {
                "root": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/process.py": {
        "find_missing_files": {
            "name": "find_missing_files",
            "location": 39,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "find_extra_subdirectory": {
            "name": "find_extra_subdirectory",
            "location": 62,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "parse_checksum": {
            "name": "parse_checksum",
            "location": 82,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "calculate_md5": {
            "name": "calculate_md5",
            "location": 105,
            "return": [],
            "arguments": {
                "filename": [],
                "chunk_size": []
            }
        },
        "is_same_hash": {
            "name": "is_same_hash",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "find_failing_checksums": {
            "name": "find_failing_checksums",
            "location": 126,
            "return": [],
            "arguments": {
                "path": [],
                "report": []
            }
        },
        "extracts_checksums": {
            "name": "extracts_checksums",
            "location": 173,
            "return": [],
            "arguments": {
                "report": []
            }
        },
        "find_errors_marc": {
            "name": "find_errors_marc",
            "location": 181,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "parse_yaml": {
            "name": "parse_yaml",
            "location": 212,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "find_errors_meta": {
            "name": "find_errors_meta",
            "location": 399,
            "return": [],
            "arguments": {
                "filename": [],
                "path": [],
                "require_page_data": []
            }
        },
        "find_errors_ocr": {
            "name": "find_errors_ocr",
            "location": 420,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "run_validations": {
            "name": "run_validations",
            "location": 477,
            "return": [],
            "arguments": {
                "validators": []
            }
        },
        "run_validation": {
            "name": "run_validation",
            "location": 489,
            "return": [],
            "arguments": {
                "validation_test": []
            }
        },
        "find_non_utf8_characters": {
            "name": "find_non_utf8_characters",
            "location": 496,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "AbsErrorLocator.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "AbsErrorLocator.find_errors": {
            "name": "find_errors",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageDataErrors.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "path": [],
                "metadata": []
            }
        },
        "PageDataErrors.find_errors": {
            "name": "find_errors",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageDataErrors.find_pagedata_file": {
            "name": "find_pagedata_file",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "image_name": []
            }
        },
        "CaptureDateErrors.find_errors": {
            "name": "find_errors",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureAgentErrors.find_errors": {
            "name": "find_errors",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaptureAgentErrors.check_capture_agent_format": {
            "name": "check_capture_agent_format",
            "location": 329,
            "return": [],
            "arguments": {
                "capture_agent_field": []
            }
        },
        "FindErrorsMetadata.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "path": [],
                "require_page_data": []
            }
        },
        "FindErrorsMetadata.find_errors": {
            "name": "find_errors",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "find_errors_ocr.ocr_filter": {
            "name": "ocr_filter",
            "location": 433,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/report.py": {
        "_split_text_line_by_words": {
            "name": "_split_text_line_by_words",
            "location": 13,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "text": [],
                "max_len": []
            }
        },
        "make_point": {
            "name": "make_point",
            "location": 40,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "message": [],
                "width": []
            }
        },
        "get_report_as_str": {
            "name": "get_report_as_str",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "results": [],
                "width": []
            }
        },
        "ReportStringBuilder.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "ReportStringBuilder.build_string": {
            "name": "build_string",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "ReportStringBuilder.get_warnings_section": {
            "name": "get_warnings_section",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "grouped_results": [],
                "report_width": []
            }
        },
        "ReportStringBuilder.build_warning_message": {
            "name": "build_warning_message",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "group_name": [],
                "source_group": [],
                "report_width": []
            }
        },
        "AbsReport.generate": {
            "name": "generate",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report_strategy": []
            }
        },
        "Report.generate": {
            "name": "generate",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "ConsoleReport.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "ConsoleReport.generate": {
            "name": "generate",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "LogReport.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "LogReport.generate": {
            "name": "generate",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "TextReport.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TextReport.generate": {
            "name": "generate",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "AbsReporter.report": {
            "name": "report",
            "location": 316,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "report": []
            }
        },
        "Reporter.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reporter_strategy": []
            }
        },
        "Reporter.report": {
            "name": "report",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": []
            }
        },
        "ConsoleReporter.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "ConsoleReporter.report": {
            "name": "report",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": []
            }
        },
        "FileOutputReporter.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "FileOutputReporter.report": {
            "name": "report",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": []
            }
        },
        "LogReporter.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "LogReporter.report": {
            "name": "report",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_type": []
            }
        },
        "Result.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummary.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummary.__iadd__": {
            "name": "__iadd__",
            "location": 42,
            "return": [
                "_TResultSummary@@ResultSummary@@"
            ],
            "arguments": {
                "self": [
                    "_TResultSummary@@ResultSummary@@"
                ],
                "other": []
            }
        },
        "ResultSummary.__iter__": {
            "name": "__iter__",
            "location": 47,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummary.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummary.__contains__": {
            "name": "__contains__",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AbsResultBuilder.create_new_summary": {
            "name": "create_new_summary",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsResultBuilder.add_result": {
            "name": "add_result",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "AbsResultBuilder.get_summary": {
            "name": "get_summary",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsResultBuilder.set_source": {
            "name": "set_source",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "ResultSummaryBuilder.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummaryBuilder.create_new_summary": {
            "name": "create_new_summary",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummaryBuilder.add_result": {
            "name": "add_result",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "ResultSummaryBuilder.get_summary": {
            "name": "get_summary",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultSummaryBuilder.set_source": {
            "name": "set_source",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "SummaryDirector.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "SummaryDirector.add_error": {
            "name": "add_error",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SummaryDirector.construct": {
            "name": "construct",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/validator.py": {
        "AbsValidator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsValidator.validate": {
            "name": "validate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateMissingFiles.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ValidateMissingFiles.validate": {
            "name": "validate",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateComponents.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "component_regex": []
            }
        },
        "ValidateComponents.validate": {
            "name": "validate",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateComponents._component_filter": {
            "name": "_component_filter",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "ValidateExtraSubdirectories.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ValidateExtraSubdirectories.validate": {
            "name": "validate",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateChecksumReport.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "checksum_report": []
            }
        },
        "ValidateChecksumReport.validate": {
            "name": "validate",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateMetaYML.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "yaml_file": [],
                "path": [],
                "required_page_data": []
            }
        },
        "ValidateMetaYML.validate": {
            "name": "validate",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateMarc.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "marc_file": []
            }
        },
        "ValidateMarc.validate": {
            "name": "validate",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateOCRFiles.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ValidateOCRFiles.validate": {
            "name": "validate",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateUTF8Files.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "ValidateUTF8Files.validate": {
            "name": "validate",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "HathiValidate-master/hathi_validate/__init__.py": {},
    "HathiValidate-master/hathi_validate/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "HathiValidate-master/hathi_validate/xsd/__init__.py": {},
    "HathiValidate-master/tests/test_cli.py": {
        "test_version_exits_after_being_called": {
            "name": "test_version_exits_after_being_called",
            "location": 11,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_main_version_exists": {
            "name": "test_main_version_exists",
            "location": 23,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_generate_report": {
            "name": "test_generate_report",
            "location": 34,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_validate_missing_components_includes_xml_with_ocr_option": {
            "name": "test_validate_missing_components_includes_xml_with_ocr_option",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_validate_success_message": {
            "name": "test_validate_success_message",
            "location": 87,
            "return": [],
            "arguments": {
                "validator_type": [],
                "included_message": [],
                "monkeypatch": []
            }
        },
        "test_validate_success_message.mock_errors": {
            "name": "mock_errors",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "HathiValidate-master/tests/test_package.py": {
        "sample_hathi_package": {
            "name": "sample_hathi_package",
            "location": 21,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "sample_hathi_package_folder": {
            "name": "sample_hathi_package_folder",
            "location": 101,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_folders": {
            "name": "test_get_folders",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_hathi_package_folder": []
            }
        },
        "mockDirEntry.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "source": [],
                "is_dir": []
            }
        },
        "mockDirEntry.is_dir": {
            "name": "is_dir",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "sample_hathi_package.mockreturn": {
            "name": "mockreturn",
            "location": 22,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "sample_hathi_package_folder.mockreturn": {
            "name": "mockreturn",
            "location": 103,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "HathiValidate-master/tests/test_process.py": {
        "checksum_file": {
            "name": "checksum_file",
            "location": 204,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "yaml_file_bb": {
            "name": "yaml_file_bb",
            "location": 211,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_bb_yaml": {
            "name": "test_bb_yaml",
            "location": 224,
            "return": [],
            "arguments": {
                "yaml_file_bb": []
            }
        },
        "ds_with_yml": {
            "name": "ds_with_yml",
            "location": 234,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_ds_yaml": {
            "name": "test_ds_yaml",
            "location": 250,
            "return": [],
            "arguments": {
                "ds_with_yml": []
            }
        },
        "marc_file": {
            "name": "marc_file",
            "location": 259,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_find_failing_checksums": {
            "name": "test_find_failing_checksums",
            "location": 268,
            "return": [],
            "arguments": {
                "checksum_file": []
            }
        },
        "test_parse_checksum": {
            "name": "test_parse_checksum",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "test_parse_checksum_with_two_spaces": {
            "name": "test_parse_checksum_with_two_spaces",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_validate_marc": {
            "name": "test_validate_marc",
            "location": 286,
            "return": [],
            "arguments": {
                "marc_file": []
            }
        },
        "file_with_only_utf8": {
            "name": "file_with_only_utf8",
            "location": 317,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_utf_check_valid": {
            "name": "test_utf_check_valid",
            "location": 342,
            "return": [],
            "arguments": {
                "file_with_only_utf8": []
            }
        },
        "file_with_utf8_and_non_utf8": {
            "name": "file_with_utf8_and_non_utf8",
            "location": 348,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_utf_check_invalid": {
            "name": "test_utf_check_invalid",
            "location": 361,
            "return": [],
            "arguments": {
                "file_with_utf8_and_non_utf8": []
            }
        },
        "test_find_errors_ocr_valid_no_errors": {
            "name": "test_find_errors_ocr_valid_no_errors",
            "location": 365,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_find_errors_ocr_invalid_errors": {
            "name": "test_find_errors_ocr_invalid_errors",
            "location": 394,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "Test_is_same_hash.test_exact_same": {
            "name": "test_exact_same",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_is_same_hash.test_exact_ignore_case": {
            "name": "test_exact_ignore_case",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_is_same_hash.test_false": {
            "name": "test_false",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_is_same_hash.test_three_matching": {
            "name": "test_three_matching",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_is_same_hash.test_three_one_missmatch": {
            "name": "test_three_one_missmatch",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_find_errors_ocr_valid_no_errors.mock_scandir": {
            "name": "mock_scandir",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_find_errors_ocr_invalid_errors.mock_scandir": {
            "name": "mock_scandir",
            "location": 409,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "HathiValidate-master/tests/test_report.py": {
        "test_report_as_str_is_a_string_message": {
            "name": "test_report_as_str_is_a_string_message",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HathiValidate-master/tests/test_result.py": {
        "simple_summary": {
            "name": "simple_summary",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_summary_builder": {
            "name": "test_summary_builder",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_summary": []
            }
        },
        "test_summary_size": {
            "name": "test_summary_size",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_summary": []
            }
        },
        "test_summary_iter": {
            "name": "test_summary_iter",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_summary": []
            }
        },
        "test_summary_report": {
            "name": "test_summary_report",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_summary": []
            }
        },
        "multiple_summary": {
            "name": "multiple_summary",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_multiple_summary_size": {
            "name": "test_multiple_summary_size",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "multiple_summary": []
            }
        }
    },
    "HathiValidate-master/utils/upload_docs.py": {
        "locate_documentation_files": {
            "name": "locate_documentation_files",
            "location": 7,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "root_path": []
            }
        },
        "get_arg_parser": {
            "name": "get_arg_parser",
            "location": 15,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "remove_files_from_directory": {
            "name": "remove_files_from_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "root": []
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
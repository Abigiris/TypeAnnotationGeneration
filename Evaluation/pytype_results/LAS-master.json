{
    "LAS-master/src/asr.py": {
        "ASR.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dim": [],
                "encoder_state_size": [],
                "decoder_state_size": [],
                "mlp_out_size": [],
                "feature_dim": [],
                "tf_rate": []
            }
        },
        "ASR.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "audio_feature": [],
                "decode_step": [],
                "teacher": [],
                "state_len": []
            }
        },
        "ASR.decode": {
            "name": "decode",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "x_len": [],
                "rnn_lm": [],
                "mapper": [],
                "lm_weight": []
            }
        },
        "ASR.init_parameters": {
            "name": "init_parameters",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_size": [],
                "feature_dim": []
            }
        },
        "Listener.get_outdim": {
            "name": "get_outdim",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.forward": {
            "name": "forward",
            "location": 243,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "state_len": [],
                "pack_input": []
            }
        },
        "Speller.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_size": [],
                "encoder_out_size": []
            }
        },
        "Speller.init_rnn": {
            "name": "init_rnn",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "device": []
            }
        },
        "Speller.hidden_state": {
            "name": "hidden_state",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Speller.forward": {
            "name": "forward",
            "location": 314,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_context": []
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlp_out_size": [],
                "encoder_out_size": [],
                "decoder_state_size": []
            }
        },
        "Attention.reset_enc_mem": {
            "name": "reset_enc_mem",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 343,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "decoder_state": [],
                "listener_feature": [],
                "state_len": []
            }
        },
        "pBLSTM.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [],
                "out_dim": []
            }
        },
        "pBLSTM.forward": {
            "name": "forward",
            "location": 406,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "input_x": [],
                "state": [],
                "state_len": [],
                "pack_input": []
            }
        },
        "pBLSTM.downsample": {
            "name": "downsample",
            "location": 429,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ASR.init_parameters.lecun_normal_init_parameters": {
            "name": "lecun_normal_init_parameters",
            "location": 176,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "ASR.init_parameters.set_forget_bias_to_one": {
            "name": "set_forget_bias_to_one",
            "location": 204,
            "return": [],
            "arguments": {
                "bias": []
            }
        }
    },
    "LAS-master/src/ASRDataset.py": {
        "load_df": {
            "name": "load_df",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "load_asr_dataset": {
            "name": "load_asr_dataset",
            "location": 264,
            "return": [
                "Tuple[(Mapper, ASRDataset, Any)]"
            ],
            "arguments": {
                "path": [],
                "batch_size": [],
                "n_jobs": [],
                "text_only": [],
                "use_gpu": [],
                "sort_key": [],
                "sort_ascending": [],
                "drop_rate": []
            }
        },
        "prepare_x": {
            "name": "prepare_x",
            "location": 297,
            "return": [
                "Tuple[(Any, List[int])]"
            ],
            "arguments": {
                "x": [],
                "device": []
            }
        },
        "prepare_y": {
            "name": "prepare_y",
            "location": 319,
            "return": [
                "Tuple[(Any, List[int])]"
            ],
            "arguments": {
                "y": [],
                "device": []
            }
        },
        "ASRDataset.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tsv_file": [],
                "batch_size": [],
                "chars": [],
                "text_only": [],
                "sort_key": [],
                "sort_ascending": [],
                "drop_rate": []
            }
        },
        "ASRDataset.char2idx": {
            "name": "char2idx",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "char": []
            }
        },
        "ASRDataset.idx2char": {
            "name": "idx2char",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ASRDataset.get_fbank": {
            "name": "get_fbank",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ASRDataset.get_fbank_by_path": {
            "name": "get_fbank_by_path",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ASRDataset.get_batched_fbanks": {
            "name": "get_batched_fbanks",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "start_idx": []
            }
        },
        "ASRDataset.get_batched_fbanks_by_paths": {
            "name": "get_batched_fbanks_by_paths",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "ASRDataset.get_text": {
            "name": "get_text",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": [],
                "drop_rate": []
            }
        },
        "ASRDataset.get_batched_texts": {
            "name": "get_batched_texts",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "start_idx": [],
                "pad_token": [],
                "drop_rate": []
            }
        },
        "ASRDataset._batch_range": {
            "name": "_batch_range",
            "location": 153,
            "return": [
                "range"
            ],
            "arguments": {
                "self": [],
                "start_idx": []
            }
        },
        "ASRDataset._stop_ind": {
            "name": "_stop_ind",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "start_idx": []
            }
        },
        "ASRDataset.encode": {
            "name": "encode",
            "location": 167,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ASRDataset.decode": {
            "name": "decode",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "inds": []
            }
        },
        "ASRDataset.get_framelength": {
            "name": "get_framelength",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ASRDataset.get_feature_dim": {
            "name": "get_feature_dim",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.get_char_dim": {
            "name": "get_char_dim",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.__len__": {
            "name": "__len__",
            "location": 203,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRDataset.__getitem__": {
            "name": "__getitem__",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Mapper.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Mapper.get_dim": {
            "name": "get_dim",
            "location": 237,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper.translate": {
            "name": "translate",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "Mapper.ind_to_char": {
            "name": "ind_to_char",
            "location": 254,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ind": []
            }
        },
        "Mapper.char_to_ind": {
            "name": "char_to_ind",
            "location": 261,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "char": []
            }
        }
    },
    "LAS-master/src/charlm.py": {
        "CharLM.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": []
            }
        },
        "CharLM.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "h_1": [],
                "h_2": []
            }
        },
        "CharLM.init_hidden": {
            "name": "init_hidden",
            "location": 59,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "device": []
            }
        }
    },
    "LAS-master/src/discriminator.py": {
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [],
                "hidden_dim": []
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "LAS-master/src/eval.py": {},
    "LAS-master/src/generate.py": {},
    "LAS-master/src/LMDataset.py": {
        "load_lm_dataset": {
            "name": "load_lm_dataset",
            "location": 78,
            "return": [
                "Tuple[(LMDataset, Any)]"
            ],
            "arguments": {
                "filename": [],
                "chunk_size": [],
                "batch_size": [],
                "shuffle": [],
                "label_format": []
            }
        },
        "make_split": {
            "name": "make_split",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "train_file": [],
                "eval_file": [],
                "split": []
            }
        },
        "LMDataset.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "chunk_size": [],
                "chars": [],
                "label_format": []
            }
        },
        "LMDataset.s2l": {
            "name": "s2l",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LMDataset.s2oh": {
            "name": "s2oh",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LMDataset.get_num_chars": {
            "name": "get_num_chars",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LMDataset.__len__": {
            "name": "__len__",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LMDataset.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        }
    },
    "LAS-master/src/lm_predict.py": {},
    "LAS-master/src/LogHandler.py": {
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [],
                "module_id": []
            }
        },
        "LogHandler.scalar": {
            "name": "scalar",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": [],
                "step": []
            }
        },
        "LogHandler.text": {
            "name": "text",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": [],
                "step": []
            }
        },
        "LogHandler.image": {
            "name": "image",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": [],
                "step": []
            }
        },
        "LogHandler.figure": {
            "name": "figure",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": [],
                "step": []
            }
        },
        "LogHandler.embedding": {
            "name": "embedding",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": [],
                "meta": [],
                "step": []
            }
        }
    },
    "LAS-master/src/postprocess.py": {
        "calc_acc": {
            "name": "calc_acc",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "predict": [],
                "label": []
            }
        },
        "calc_err": {
            "name": "calc_err",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "predict": [],
                "label": [],
                "mapper": []
            }
        },
        "draw_att": {
            "name": "draw_att",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "att_maps": [],
                "hyps": []
            }
        },
        "trim_eos": {
            "name": "trim_eos",
            "location": 66,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "sequence": []
            }
        }
    },
    "LAS-master/src/preprocess.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "txt_dir": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "iterate_by_ids": {
            "name": "iterate_by_ids",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {
                "txt_dir": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "process_pair": {
            "name": "process_pair",
            "location": 83,
            "return": [
                "Optional[Tuple[(str, str, int, Any, _T0, _T1)]]"
            ],
            "arguments": {
                "text_path": [
                    "_T0@@"
                ],
                "wav_path": [
                    "_T1@@"
                ],
                "processed_dir": []
            }
        },
        "preprocess_malromur": {
            "name": "preprocess_malromur",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "iterate_malromur_index": {
            "name": "iterate_malromur_index",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "index_path": [],
                "wav_dir": [],
                "processed_dir": []
            }
        },
        "process_malromur_pair": {
            "name": "process_malromur_pair",
            "location": 164,
            "return": [
                "Optional[Tuple[(str, str, int, Any, str, _T1)]]"
            ],
            "arguments": {
                "text": [],
                "wav_path": [
                    "_T1@@"
                ],
                "processed_dir": []
            }
        },
        "log_fbank": {
            "name": "log_fbank",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "y": [],
                "sample_rate": []
            }
        },
        "load_wav": {
            "name": "load_wav",
            "location": 210,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "text_from_file": {
            "name": "text_from_file",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "normalize_string": {
            "name": "normalize_string",
            "location": 226,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "s": [],
                "append_tokens": []
            }
        },
        "zero_pad": {
            "name": "zero_pad",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "fbank": [],
                "max_len": []
            }
        },
        "make_split": {
            "name": "make_split",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "train_r": [],
                "eval_r": []
            }
        },
        "sort_index": {
            "name": "sort_index",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [],
                "sort_key": [],
                "sort_ascending": [],
                "out_index": []
            }
        },
        "subset_by_t": {
            "name": "subset_by_t",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [],
                "index": [],
                "out_index": [],
                "avg_utt_s": []
            }
        }
    },
    "LAS-master/src/speech_autoencoder.py": {
        "SpeechAutoEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener_out_dim": [],
                "feature_dim": [],
                "kernel_sizes": [],
                "num_filters": [],
                "pool_kernel_sizes": []
            }
        },
        "SpeechAutoEncoder.forward": {
            "name": "forward",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "listener_out": [],
                "just_first": []
            }
        },
        "SpeechEncoder.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ks": [],
                "num_filters": [],
                "pool_ks": []
            }
        },
        "SpeechEncoder.forward": {
            "name": "forward",
            "location": 149,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SpeechDecoder.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [],
                "out_dim": []
            }
        },
        "SpeechDecoder.forward": {
            "name": "forward",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "LAS-master/src/text_autoencoder.py": {
        "TextAutoEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_dim": [],
                "emb_dim": [],
                "state_size": [],
                "num_layers": []
            }
        },
        "TextAutoEncoder.forward": {
            "name": "forward",
            "location": 31,
            "return": [
                "Tuple[(_T4, Any)]"
            ],
            "arguments": {
                "self": [],
                "asr": [],
                "y": [],
                "y_noised": [],
                "decode_step": [],
                "noise_lens": [
                    "_T4@@"
                ]
            }
        },
        "TextEncoder.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_dim": [],
                "emb_dim": [],
                "state_size": [],
                "num_layers": []
            }
        },
        "TextEncoder.forward": {
            "name": "forward",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        }
    },
    "LAS-master/src/TrackerHandler.py": {
        "TrackerHandler.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "module_id": []
            }
        },
        "TrackerHandler.do_step": {
            "name": "do_step",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerHandler.get_best": {
            "name": "get_best",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerHandler.set_best": {
            "name": "set_best",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TrackerHandler._save": {
            "name": "_save",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "LAS-master/src/train.py": {},
    "LAS-master/src/trainer.py": {
        "asr_seed_train": {
            "name": "asr_seed_train",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "paras": []
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": [],
                "module_id": []
            }
        },
        "Solver.verbose_summary": {
            "name": "verbose_summary",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.set_if_exists": {
            "name": "set_if_exists",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Solver.verbose": {
            "name": "verbose",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "progress": []
            }
        },
        "Solver.step": {
            "name": "step",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "optim": [],
                "grad_clip": []
            }
        },
        "Solver.setup_module": {
            "name": "setup_module",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "ckp_path": []
            }
        },
        "Solver.genpath": {
            "name": "genpath",
            "location": 170,
            "return": [
                "Union[(Tuple[(Union[(str, _T0)], Union[(str, _T0)])], _T0)]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "_T0@@"
                ],
                "module_id": []
            }
        },
        "Solver.close": {
            "name": "close",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "CHARLMTrainer.load_data": {
            "name": "load_data",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.set_model": {
            "name": "set_model",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.exec": {
            "name": "exec",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CHARLMTrainer.predict": {
            "name": "predict",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "tf_rate": []
            }
        },
        "CHARLMTrainer.generate": {
            "name": "generate",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "length": [],
                "temp": [],
                "start": []
            }
        },
        "CHARLMTrainer.close": {
            "name": "close",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "ASRTrainer.load_data": {
            "name": "load_data",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.set_model": {
            "name": "set_model",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.exec": {
            "name": "exec",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.valid": {
            "name": "valid",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTrainer.close": {
            "name": "close",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "ASRTester.load_data": {
            "name": "load_data",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.set_model": {
            "name": "set_model",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASRTester.exec": {
            "name": "exec",
            "location": 578,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "lm_weight": []
            }
        },
        "TAETrainer.__init__": {
            "name": "__init__",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "TAETrainer.load_data": {
            "name": "load_data",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.set_model": {
            "name": "set_model",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": []
            }
        },
        "TAETrainer.exec": {
            "name": "exec",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.valid": {
            "name": "valid",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAETrainer.close": {
            "name": "close",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.__init__": {
            "name": "__init__",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "SAETrainer.load_data": {
            "name": "load_data",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.set_model": {
            "name": "set_model",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": []
            }
        },
        "SAETrainer.exec": {
            "name": "exec",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.valid": {
            "name": "valid",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAETrainer.close": {
            "name": "close",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.__init__": {
            "name": "__init__",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "paras": []
            }
        },
        "ADVTrainer.load_data": {
            "name": "load_data",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.set_model": {
            "name": "set_model",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asrpath": [],
                "taepath": []
            }
        },
        "ADVTrainer.exec": {
            "name": "exec",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.valid": {
            "name": "valid",
            "location": 1049,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ADVTrainer.close": {
            "name": "close",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "LAS-master/src/xmlparser.py": {
        "prepro_file": {
            "name": "prepro_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "in_file": [],
                "out_file": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "parent_dir": [],
                "out_path": [],
                "reset_file": []
            }
        }
    }
}
{
    "Library_AlgorithmAndDataStructure_Python3-master/datastructure/methods.py": {
        "make_kd_tree": {
            "name": "make_kd_tree",
            "location": 9,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "l": [],
                "r": [],
                "depth": [],
                "points": [],
                "tree": []
            }
        },
        "find_range_search": {
            "name": "find_range_search",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [],
                "sx": [],
                "tx": [],
                "sy": [],
                "ty": [],
                "depth": [],
                "points": [],
                "tree": [],
                "ans": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/datastructure/structs.py": {
        "DisjointSet.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "DisjointSet.__make_set": {
            "name": "__make_set",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DisjointSet.__find_set": {
            "name": "__find_set",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DisjointSet.__link": {
            "name": "__link",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DisjointSet.unite": {
            "name": "unite",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DisjointSet.same": {
            "name": "same",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [],
                "p": [],
                "l": [],
                "r": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point_id": [],
                "x": [],
                "y": []
            }
        },
        "Point.__lt__": {
            "name": "__lt__",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/datastructure/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/dynamicprogramming/common.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/dynamicprogramming/methods.py": {
        "coin_changing_problem": {
            "name": "coin_changing_problem",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "coins": [],
                "n": []
            }
        },
        "zero_one_knapsack_problem": {
            "name": "zero_one_knapsack_problem",
            "location": 28,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "items": [],
                "weight": []
            }
        },
        "lis": {
            "name": "lis",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "a": []
            }
        },
        "get_largest_square": {
            "name": "get_largest_square",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "g": []
            }
        },
        "get_largest_rectangle": {
            "name": "get_largest_rectangle",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "g": []
            }
        },
        "_get_largest_rectangle": {
            "name": "_get_largest_rectangle",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "t": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/dynamicprogramming/structs.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/dynamicprogramming/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/geometry/common.py": {
        "equals": {
            "name": "equals",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "x_0": [],
                "x_1": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/geometry/methods.py": {
        "is_orthogonal": {
            "name": "is_orthogonal",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "is_parallel": {
            "name": "is_parallel",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "p": []
            }
        },
        "reflect": {
            "name": "reflect",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "p": []
            }
        },
        "get_distance": {
            "name": "get_distance",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "get_distance_lp": {
            "name": "get_distance_lp",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "l": [],
                "p": []
            }
        },
        "get_distance_sp": {
            "name": "get_distance_sp",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "p": []
            }
        },
        "get_distance_ss": {
            "name": "get_distance_ss",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "s_1": [],
                "s_2": []
            }
        },
        "get_point_relative_position": {
            "name": "get_point_relative_position",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "p_0": [],
                "p_1": [],
                "p_2": []
            }
        },
        "intersect": {
            "name": "intersect",
            "location": 176,
            "return": [
                "Any"
            ],
            "arguments": {
                "s_1": [],
                "s_2": []
            }
        },
        "get_cross_point": {
            "name": "get_cross_point",
            "location": 192,
            "return": [
                "Optional[geometry.structs.Point]"
            ],
            "arguments": {
                "s_1": [],
                "s_2": []
            }
        },
        "get_cross_points_circle_and_line": {
            "name": "get_cross_points_circle_and_line",
            "location": 211,
            "return": [
                "Optional[List[geometry.structs.Point]]"
            ],
            "arguments": {
                "circle": [],
                "line": []
            }
        },
        "get_common_points_circle_and_circle": {
            "name": "get_common_points_circle_and_circle",
            "location": 235,
            "return": [
                "Optional[List[geometry.structs.Point]]"
            ],
            "arguments": {
                "c_1": [],
                "c_2": []
            }
        },
        "point_contained_in_polygon": {
            "name": "point_contained_in_polygon",
            "location": 271,
            "return": [
                "Any"
            ],
            "arguments": {
                "poly": [],
                "p": []
            }
        },
        "get_convex_hull": {
            "name": "get_convex_hull",
            "location": 297,
            "return": [
                "Union[(geometry.structs.Polygon, _T0)]"
            ],
            "arguments": {
                "g": [
                    "_T0@@"
                ]
            }
        },
        "get_num_of_segment_intersections": {
            "name": "get_num_of_segment_intersections",
            "location": 339,
            "return": [
                "int"
            ],
            "arguments": {
                "segments": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/geometry/structs.py": {
        "Point.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_0": [],
                "y_0": []
            }
        },
        "Point.__add__": {
            "name": "__add__",
            "location": 20,
            "return": [
                "_TPoint@@Point@@"
            ],
            "arguments": {
                "self": [
                    "_TPoint@@Point@@"
                ],
                "other": []
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 28,
            "return": [
                "_TPoint@@Point@@"
            ],
            "arguments": {
                "self": [
                    "_TPoint@@Point@@"
                ],
                "other": []
            }
        },
        "Point.__mul__": {
            "name": "__mul__",
            "location": 36,
            "return": [
                "_TPoint@@Point@@"
            ],
            "arguments": {
                "self": [
                    "_TPoint@@Point@@"
                ],
                "a_0": []
            }
        },
        "Point.__truediv__": {
            "name": "__truediv__",
            "location": 44,
            "return": [
                "Optional[Point]"
            ],
            "arguments": {
                "self": [],
                "a_0": []
            }
        },
        "Point.abs": {
            "name": "abs",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.norm": {
            "name": "norm",
            "location": 66,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__lt__": {
            "name": "__lt__",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.dot": {
            "name": "dot",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.cross": {
            "name": "cross",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Segment.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "EndPoint.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "seg_id": [],
                "end_point_type": []
            }
        },
        "EndPoint.__lt__": {
            "name": "__lt__",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/geometry/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/graph/common.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/graph/methods.py": {
        "warshall_floyd": {
            "name": "warshall_floyd",
            "location": 8,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "distance_matrix": [
                    "_T0@@"
                ]
            }
        },
        "topological_sort": {
            "name": "topological_sort",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "adj_matrix": []
            }
        },
        "__bfs": {
            "name": "__bfs",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "adj_matrix": [],
                "indeg": [],
                "v": [],
                "res": []
            }
        },
        "articulation_point": {
            "name": "articulation_point",
            "location": 81,
            "return": [
                "list"
            ],
            "arguments": {
                "g": []
            }
        },
        "__dfs": {
            "name": "__dfs",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [],
                "prev": [],
                "g": []
            }
        },
        "calc_tree_diameter": {
            "name": "calc_tree_diameter",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "graph": []
            }
        },
        "__bfs_for_calc_tree_diameter": {
            "name": "__bfs_for_calc_tree_diameter",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "starting": []
            }
        },
        "kruskal": {
            "name": "kruskal",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": [],
                "edges": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/graph/structs.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "destination": [],
                "weight": []
            }
        },
        "Edge.__lt__": {
            "name": "__lt__",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/graph/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/heuristicsearch/common.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/heuristicsearch/methods.py": {
        "eight_queen_solver": {
            "name": "eight_queen_solver",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "queens": []
            }
        },
        "__eight_queen_initialize": {
            "name": "__eight_queen_initialize",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "queens": []
            }
        },
        "__recursive": {
            "name": "__recursive",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "i": []
            }
        },
        "__print_board": {
            "name": "__print_board",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "eight_puzzle_solver": {
            "name": "eight_puzzle_solver",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        },
        "_eight_puzzle_bfs": {
            "name": "_eight_puzzle_bfs",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "puzzle": []
            }
        },
        "__is_target": {
            "name": "__is_target",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "puzzle": []
            }
        },
        "sixteen_puzzle_solver_ida_star": {
            "name": "sixteen_puzzle_solver_ida_star",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        },
        "__iterative_deeping": {
            "name": "__iterative_deeping",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "puzzle": []
            }
        },
        "__get_all_md": {
            "name": "__get_all_md",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "puzzle": []
            }
        },
        "__dfs": {
            "name": "__dfs",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "depth": [],
                "prev": []
            }
        },
        "__is_solved": {
            "name": "__is_solved",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "sixteen_puzzle_solver_a_star": {
            "name": "sixteen_puzzle_solver_a_star",
            "location": 201,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        },
        "__aster": {
            "name": "__aster",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/heuristicsearch/structs.py": {
        "Puzzle.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "space": [],
                "path": []
            }
        },
        "Puzzle.__lt__": {
            "name": "__lt__",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Puzzle3.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "space": [],
                "md": [],
                "cost": []
            }
        },
        "Puzzle3.__lt__": {
            "name": "__lt__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "puzzle": [],
                "estimated": []
            }
        },
        "State.__lt__": {
            "name": "__lt__",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/heuristicsearch/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/number/methods.py": {
        "power": {
            "name": "power",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "n": [],
                "m": []
            }
        },
        "is_prime": {
            "name": "is_prime",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": []
            }
        },
        "gcd": {
            "name": "gcd",
            "location": 44,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "x": [
                    "_T0@@"
                ],
                "y": [
                    "_T1@@"
                ]
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/number/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/datastructure/test_methods.py": {
        "DataStructureMethodsTestCase.test_make_kd_tree_normal": {
            "name": "test_make_kd_tree_normal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStructureMethodsTestCase.test_find_range_search_normal": {
            "name": "test_find_range_search_normal",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/datastructure/test_structs.py": {
        "DataStructureStructsTestCase.test_disjoint_set_normal": {
            "name": "test_disjoint_set_normal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStructureStructsTestCase.test_point_normal": {
            "name": "test_point_normal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStructureStructsTestCase.test_point_sort_by_x_normal": {
            "name": "test_point_sort_by_x_normal",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/datastructure/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/dynamicprogramming/test_methods.py": {
        "DynamicProgrammingTestCase.test_coin_changing_problem": {
            "name": "test_coin_changing_problem",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicProgrammingTestCase.test_zero_one_knapsack_problem_normal": {
            "name": "test_zero_one_knapsack_problem_normal",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicProgrammingTestCase.test_lis_normal": {
            "name": "test_lis_normal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicProgrammingTestCase.test_get_largest_square_normal": {
            "name": "test_get_largest_square_normal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicProgrammingTestCase.test_get_largest_rectangle_normal": {
            "name": "test_get_largest_rectangle_normal",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/dynamicprogramming/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/geometry/test_methos.py": {
        "GeometryMethodTestCase.test_is_orthogonal_normal": {
            "name": "test_is_orthogonal_normal",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_is_parallel_normal": {
            "name": "test_is_parallel_normal",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_project_normal": {
            "name": "test_project_normal",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_reflect_normal": {
            "name": "test_reflect_normal",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_distance_normal": {
            "name": "test_get_distance_normal",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_distance_lp_normal": {
            "name": "test_get_distance_lp_normal",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_distance_sp_normal": {
            "name": "test_get_distance_sp_normal",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_distance_ss_normal": {
            "name": "test_get_distance_ss_normal",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_point_relative_position_normal": {
            "name": "test_get_point_relative_position_normal",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_intersect_normal": {
            "name": "test_intersect_normal",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_cross_point_normal": {
            "name": "test_get_cross_point_normal",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_cross_point_line_and_circle": {
            "name": "test_get_cross_point_line_and_circle",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_common_points_circle_and_circle_normal": {
            "name": "test_get_common_points_circle_and_circle_normal",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_point_contained_in_polygon": {
            "name": "test_point_contained_in_polygon",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_convex_hull_normal": {
            "name": "test_get_convex_hull_normal",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryMethodTestCase.test_get_num_of_segment_intersections_normal": {
            "name": "test_get_num_of_segment_intersections_normal",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/geometry/test_structs.py": {
        "GeometryStructsTestCase.test_defined_point_correctly": {
            "name": "test_defined_point_correctly",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryStructsTestCase.test_defined_vector_correctly": {
            "name": "test_defined_vector_correctly",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryStructsTestCase.test_defined_segment_correctly": {
            "name": "test_defined_segment_correctly",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeometryStructsTestCase.test_defined_circle_correctly": {
            "name": "test_defined_circle_correctly",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/geometry/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/graph/test_methods.py": {
        "GraphMethodsTestCase.test_warshall_floyd_normal": {
            "name": "test_warshall_floyd_normal",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMethodsTestCase.test_warshall_floyd_negative_roop": {
            "name": "test_warshall_floyd_negative_roop",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMethodsTestCase.test_topological_sort_normal": {
            "name": "test_topological_sort_normal",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMethodsTestCase.test_articulation_point_normal": {
            "name": "test_articulation_point_normal",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMethodsTestCase.test_calc_tree_diameter_normal": {
            "name": "test_calc_tree_diameter_normal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMethodsTestCase.test_kruskal_normal": {
            "name": "test_kruskal_normal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/graph/test_struct.py": {
        "GraphStructsTestCase.test_edge_normal": {
            "name": "test_edge_normal",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/graph/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/heuristicsearch/test_methods.py": {
        "HeuristicSearchMethodTestCase.test_eight_queen_solver_normal": {
            "name": "test_eight_queen_solver_normal",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeuristicSearchMethodTestCase.test_eight_puzzle_solver_normal": {
            "name": "test_eight_puzzle_solver_normal",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeuristicSearchMethodTestCase.test_sixteen_puzzle_solver_ida_star_normal": {
            "name": "test_sixteen_puzzle_solver_ida_star_normal",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeuristicSearchMethodTestCase.test_sixteen_puzzle_solver_a_star_normal": {
            "name": "test_sixteen_puzzle_solver_a_star_normal",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/heuristicsearch/__init__.py": {},
    "Library_AlgorithmAndDataStructure_Python3-master/tests/number/test_methods.py": {
        "NumberMethodTestCase.test_power_normal": {
            "name": "test_power_normal",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberMethodTestCase.test_is_prime_normal": {
            "name": "test_is_prime_normal",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberMethodTestCase.test_gcd_normal": {
            "name": "test_gcd_normal",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Library_AlgorithmAndDataStructure_Python3-master/tests/number/__init__.py": {}
}
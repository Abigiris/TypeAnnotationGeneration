{
    "MS-project-master/setup.py": {},
    "MS-project-master/notebook-tasks/download_experiments.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/notebook-tasks/visualize_experiments.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/conftest.py": {},
    "MS-project-master/src/__init__.py": {},
    "MS-project-master/src/autoks/callbacks.py": {
        "Callback.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Callback.set_params": {
            "name": "set_params",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Callback.set_model": {
            "name": "set_model",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Callback.on_generation_begin": {
            "name": "on_generation_begin",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        },
        "Callback.on_generation_end": {
            "name": "on_generation_end",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        },
        "Callback.on_evaluate_all_begin": {
            "name": "on_evaluate_all_begin",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_evaluate_all_end": {
            "name": "on_evaluate_all_end",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_evaluate_begin": {
            "name": "on_evaluate_begin",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_evaluate_end": {
            "name": "on_evaluate_end",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_train_begin": {
            "name": "on_train_begin",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_train_end": {
            "name": "on_train_end",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_propose_new_models_begin": {
            "name": "on_propose_new_models_begin",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "Callback.on_propose_new_models_end": {
            "name": "on_propose_new_models_end",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "callbacks": [],
                "queue_length": []
            }
        },
        "CallbackList._reset_model_eval_timing": {
            "name": "_reset_model_eval_timing",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackList.append": {
            "name": "append",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "CallbackList.set_params": {
            "name": "set_params",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "CallbackList.set_model": {
            "name": "set_model",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CallbackList.on_generation_begin": {
            "name": "on_generation_begin",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "generation": [],
                "logs": []
            }
        },
        "CallbackList.on_generation_end": {
            "name": "on_generation_end",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "generation": [],
                "logs": []
            }
        },
        "CallbackList.on_train_begin": {
            "name": "on_train_begin",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_train_end": {
            "name": "on_train_end",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_evaluate_all_begin": {
            "name": "on_evaluate_all_begin",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_evaluate_all_end": {
            "name": "on_evaluate_all_end",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_evaluate_begin": {
            "name": "on_evaluate_begin",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_evaluate_end": {
            "name": "on_evaluate_end",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_propose_new_models_begin": {
            "name": "on_propose_new_models_begin",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.on_propose_new_models_end": {
            "name": "on_propose_new_models_end",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CallbackList.__iter__": {
            "name": "__iter__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseLogger.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "stateful_metrics": []
            }
        },
        "BaseLogger.on_generation_begin": {
            "name": "on_generation_begin",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        },
        "BaseLogger.on_evaluate_all_end": {
            "name": "on_evaluate_all_end",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "BaseLogger.on_generation_end": {
            "name": "on_generation_end",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        },
        "History.on_train_begin": {
            "name": "on_train_begin",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "History.on_generation_end": {
            "name": "on_generation_end",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "generation": [],
                "logs": []
            }
        },
        "ModelSearchLogger.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSearchLogger.set_stat_book_collection": {
            "name": "set_stat_book_collection",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "base_kernel_names": []
            }
        },
        "ModelSearchLogger.on_evaluate_all_end": {
            "name": "on_evaluate_all_end",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "ModelSearchLogger.on_evaluate_end": {
            "name": "on_evaluate_end",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "ModelSearchLogger.on_propose_new_models_end": {
            "name": "on_propose_new_models_end",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "ModelSearchLogger.to_dict": {
            "name": "to_dict",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSearchLogger._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 311,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "ModelSearchLogger.save": {
            "name": "save",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "output_file_name": []
            }
        },
        "ModelSearchLogger.load": {
            "name": "load",
            "location": 323,
            "return": [],
            "arguments": {
                "output_file_name": []
            }
        },
        "GCPCallback.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCPCallback.on_train_end": {
            "name": "on_train_end",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CometCallback.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [],
                "log_params": [],
                "log_metrics": [],
                "log_graph": []
            }
        },
        "CometCallback.on_train_begin": {
            "name": "on_train_begin",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CometCallback.on_evaluate_end": {
            "name": "on_evaluate_end",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "logs": []
            }
        },
        "CometCallback.on_generation_begin": {
            "name": "on_generation_begin",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        },
        "CometCallback.on_generation_end": {
            "name": "on_generation_end",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "gen": [],
                "logs": []
            }
        }
    },
    "MS-project-master/src/autoks/debugging.py": {
        "has_no_nans": {
            "name": "has_no_nans",
            "location": 8,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "assert_valid_kernel_kernel": {
            "name": "assert_valid_kernel_kernel",
            "location": 12,
            "return": [],
            "arguments": {
                "distance_builder": [],
                "n_active_models": [],
                "selected_ind": [],
                "all_candidate_indices": []
            }
        }
    },
    "MS-project-master/src/autoks/gp_regression_models.py": {
        "KernelKernelGPModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "kernel_kernel": [],
                "noise_var": [],
                "exact_f_eval": [],
                "optimizer": [],
                "max_iters": [],
                "optimize_restarts": [],
                "verbose": [],
                "kernel_kernel_hyperpriors": []
            }
        },
        "KernelKernelGPModel.train": {
            "name": "train",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KernelKernelGPModel._create_model": {
            "name": "_create_model",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "KernelKernelGPModel.update": {
            "name": "update",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "x_all": [],
                "y_all": [],
                "x_new": [],
                "y_new": []
            }
        },
        "KernelKernelGPModel._predict": {
            "name": "_predict",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "full_cov": [],
                "include_likelihood": []
            }
        },
        "KernelKernelGPModel.predict": {
            "name": "predict",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "with_noise": []
            }
        },
        "KernelKernelGPModel.get_f_max": {
            "name": "get_f_max",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KernelKernelGPModel.plot": {
            "name": "plot",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/model_selection_criteria.py": {
        "BIC": {
            "name": "BIC",
            "location": 9,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "AIC": {
            "name": "AIC",
            "location": 23,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "pl2": {
            "name": "pl2",
            "location": 36,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "cov_parsimony_pressure": {
            "name": "cov_parsimony_pressure",
            "location": 49,
            "return": [],
            "arguments": {
                "model": [],
                "model_scores": [],
                "model_sizes": []
            }
        },
        "bayes_factor": {
            "name": "bayes_factor",
            "location": 60,
            "return": [],
            "arguments": {
                "model_1": [],
                "model_2": []
            }
        }
    },
    "MS-project-master/src/autoks/preprocessing.py": {
        "standardize": {
            "name": "standardize",
            "location": 1,
            "return": [],
            "arguments": {
                "x": [],
                "x_mean": [],
                "x_std": []
            }
        },
        "inverse_standardize": {
            "name": "inverse_standardize",
            "location": 9,
            "return": [],
            "arguments": {
                "x": [],
                "x_mean": [],
                "x_std": []
            }
        }
    },
    "MS-project-master/src/autoks/statistics.py": {
        "Statistic.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "function": []
            }
        },
        "Statistic.record": {
            "name": "record",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Statistic.plot": {
            "name": "plot",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistic.clear": {
            "name": "clear",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistic.to_dict": {
            "name": "to_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statistic.from_dict": {
            "name": "from_dict",
            "location": 50,
            "return": [],
            "arguments": {
                "input_dict": [],
                "fn_map": []
            }
        },
        "Statistic.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "stats": []
            }
        },
        "MultiStat.add_statistic": {
            "name": "add_statistic",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "statistic": []
            }
        },
        "MultiStat.add_raw_value_stat": {
            "name": "add_raw_value_stat",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "MultiStat.get_raw_values": {
            "name": "get_raw_values",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.stat_names": {
            "name": "stat_names",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.stats_list": {
            "name": "stats_list",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.mean": {
            "name": "mean",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.median": {
            "name": "median",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.maximum": {
            "name": "maximum",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.std": {
            "name": "std",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.var": {
            "name": "var",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.sum": {
            "name": "sum",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.running_max": {
            "name": "running_max",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.running_mean": {
            "name": "running_mean",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.running_std": {
            "name": "running_std",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.plot": {
            "name": "plot",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.clear_all_values": {
            "name": "clear_all_values",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.to_dict": {
            "name": "to_dict",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStat.from_dict": {
            "name": "from_dict",
            "location": 159,
            "return": [],
            "arguments": {
                "input_dict": []
            }
        },
        "MultiStat.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBook.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "multi_stats": []
            }
        },
        "StatBook.name": {
            "name": "name",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "StatBook.add_multi_stat": {
            "name": "add_multi_stat",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat": []
            }
        },
        "StatBook.add_raw_value_stat": {
            "name": "add_raw_value_stat",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": [],
                "function": []
            }
        },
        "StatBook.get_raw_values": {
            "name": "get_raw_values",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.mean": {
            "name": "mean",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.median": {
            "name": "median",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.maximum": {
            "name": "maximum",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.std": {
            "name": "std",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.var": {
            "name": "var",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.sum": {
            "name": "sum",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.running_max": {
            "name": "running_max",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.running_mean": {
            "name": "running_mean",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.running_std": {
            "name": "running_std",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "multi_stat_name": []
            }
        },
        "StatBook.multi_stats_names": {
            "name": "multi_stats_names",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBook.multi_stats_list": {
            "name": "multi_stats_list",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBook.update_stat_book": {
            "name": "update_stat_book",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StatBook.clear_all_values": {
            "name": "clear_all_values",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBook.to_dict": {
            "name": "to_dict",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBook.from_dict": {
            "name": "from_dict",
            "location": 251,
            "return": [],
            "arguments": {
                "input_dict": []
            }
        },
        "StatBook.__repr__": {
            "name": "__repr__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBookCollection.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "stat_books": []
            }
        },
        "StatBookCollection.create_shared_stat_books": {
            "name": "create_shared_stat_books",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "stat_book_names": [],
                "multi_stat_names": [],
                "raw_value_functions": []
            }
        },
        "StatBookCollection.add_stat_book": {
            "name": "add_stat_book",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "stat_book": []
            }
        },
        "StatBookCollection.stat_book_names": {
            "name": "stat_book_names",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBookCollection.stat_book_list": {
            "name": "stat_book_list",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBookCollection.clear_all_values": {
            "name": "clear_all_values",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBookCollection.to_dict": {
            "name": "to_dict",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatBookCollection.from_dict": {
            "name": "from_dict",
            "location": 302,
            "return": [],
            "arguments": {
                "input_dict": []
            }
        },
        "StatBookCollection.save": {
            "name": "save",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "output_file_name": [],
                "compress": []
            }
        },
        "StatBookCollection.load": {
            "name": "load",
            "location": 322,
            "return": [],
            "arguments": {
                "output_filename": []
            }
        },
        "StatBookCollection.__repr__": {
            "name": "__repr__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/tracking.py": {
        "update_stat_book": {
            "name": "update_stat_book",
            "location": 11,
            "return": [],
            "arguments": {
                "stat_book": [],
                "gp_models": [],
                "x_train": [],
                "base_kernel_names": [],
                "n_dims": []
            }
        },
        "get_model_scores": {
            "name": "get_model_scores",
            "location": 26,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_n_operands": {
            "name": "get_n_operands",
            "location": 30,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_n_hyperparams": {
            "name": "get_n_hyperparams",
            "location": 34,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_cov_dists": {
            "name": "get_cov_dists",
            "location": 38,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_diversity_scores": {
            "name": "get_diversity_scores",
            "location": 47,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_best_n_operands": {
            "name": "get_best_n_operands",
            "location": 54,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "get_best_n_hyperparams": {
            "name": "get_best_n_hyperparams",
            "location": 61,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "base_kern_freq": {
            "name": "base_kern_freq",
            "location": 68,
            "return": [],
            "arguments": {
                "base_kern": []
            }
        },
        "base_kern_freq.get_frequency": {
            "name": "get_frequency",
            "location": 69,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        }
    },
    "MS-project-master/src/autoks/util.py": {
        "arg_sort": {
            "name": "arg_sort",
            "location": 4,
            "return": [],
            "arguments": {
                "unsorted_iterable": []
            }
        },
        "arg_unique": {
            "name": "arg_unique",
            "location": 13,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 33,
            "return": [],
            "arguments": {
                "data": [],
                "values": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 48,
            "return": [],
            "arguments": {
                "list_nd": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 61,
            "return": [],
            "arguments": {
                "list_nd": []
            }
        },
        "remove_outer_parens": {
            "name": "remove_outer_parens",
            "location": 73,
            "return": [],
            "arguments": {
                "list_nd": []
            }
        },
        "join_operands": {
            "name": "join_operands",
            "location": 88,
            "return": [],
            "arguments": {
                "operands": [],
                "operator": []
            }
        },
        "type_count": {
            "name": "type_count",
            "location": 104,
            "return": [],
            "arguments": {
                "a": [],
                "cls": []
            }
        },
        "pretty_time_delta": {
            "name": "pretty_time_delta",
            "location": 115,
            "return": [],
            "arguments": {
                "seconds": []
            }
        }
    },
    "MS-project-master/src/autoks/visualization.py": {
        "plot_best_scores": {
            "name": "plot_best_scores",
            "location": 9,
            "return": [],
            "arguments": {
                "score_name": [],
                "evaluations_name": [],
                "stat_book": []
            }
        },
        "plot_score_summary": {
            "name": "plot_score_summary",
            "location": 30,
            "return": [],
            "arguments": {
                "score_name": [],
                "evaluations_name": [],
                "stat_book": []
            }
        },
        "plot_n_hyperparams_summary": {
            "name": "plot_n_hyperparams_summary",
            "location": 55,
            "return": [],
            "arguments": {
                "n_hyperparams_name": [],
                "best_stat_name": [],
                "stat_book": [],
                "x_label": []
            }
        },
        "plot_n_operands_summary": {
            "name": "plot_n_operands_summary",
            "location": 77,
            "return": [],
            "arguments": {
                "n_operands_name": [],
                "best_stat_name": [],
                "stat_book": [],
                "x_label": []
            }
        },
        "plot_base_kernel_freqs": {
            "name": "plot_base_kernel_freqs",
            "location": 99,
            "return": [],
            "arguments": {
                "base_kern_freq_names": [],
                "stat_book": [],
                "x_label": []
            }
        },
        "plot_cov_dist_summary": {
            "name": "plot_cov_dist_summary",
            "location": 125,
            "return": [],
            "arguments": {
                "cov_dists_name": [],
                "stat_book": [],
                "x_label": []
            }
        },
        "plot_kernel_diversity_summary": {
            "name": "plot_kernel_diversity_summary",
            "location": 141,
            "return": [],
            "arguments": {
                "diversity_scores_name": [],
                "stat_book": [],
                "x_label": []
            }
        },
        "create_kernel_tree_img": {
            "name": "create_kernel_tree_img",
            "location": 158,
            "return": [],
            "arguments": {
                "gp_model": [],
                "graph_name": [],
                "directory": []
            }
        },
        "plot_kernel_tree": {
            "name": "plot_kernel_tree",
            "location": 170,
            "return": [],
            "arguments": {
                "gp_model": [],
                "graph_name": [],
                "directory": []
            }
        }
    },
    "MS-project-master/src/autoks/acquisition/ei.py": {
        "expected_improvement": {
            "name": "expected_improvement",
            "location": 7,
            "return": [],
            "arguments": {
                "x": [],
                "model": [],
                "jitter": []
            }
        }
    },
    "MS-project-master/src/autoks/acquisition/util.py": {
        "get_quantiles": {
            "name": "get_quantiles",
            "location": 5,
            "return": [],
            "arguments": {
                "acquisition_par": [],
                "f_max": [],
                "m": [],
                "s": []
            }
        }
    },
    "MS-project-master/src/autoks/acquisition/__init__.py": {},
    "MS-project-master/src/autoks/backend/kernel.py": {
        "get_allowable_kernels": {
            "name": "get_allowable_kernels",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "get_matching_kernels": {
            "name": "get_matching_kernels",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "create_1d_kernel": {
            "name": "create_1d_kernel",
            "location": 41,
            "return": [],
            "arguments": {
                "kernel_family": [],
                "active_dim": [],
                "kernel_mapping": [],
                "kernel_cls": [],
                "hyperpriors": []
            }
        },
        "get_all_1d_kernels": {
            "name": "get_all_1d_kernels",
            "location": 68,
            "return": [],
            "arguments": {
                "base_kernel_names": [],
                "n_dims": [],
                "hyperpriors": []
            }
        },
        "get_priors": {
            "name": "get_priors",
            "location": 92,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "set_priors": {
            "name": "set_priors",
            "location": 105,
            "return": [],
            "arguments": {
                "param": [],
                "priors": [],
                "in_place": []
            }
        },
        "encode_prior": {
            "name": "encode_prior",
            "location": 119,
            "return": [],
            "arguments": {
                "prior": []
            }
        },
        "decode_prior": {
            "name": "decode_prior",
            "location": 125,
            "return": [],
            "arguments": {
                "prior_string": []
            }
        },
        "subkernel_expression": {
            "name": "subkernel_expression",
            "location": 131,
            "return": [],
            "arguments": {
                "kernel": [],
                "show_params": [],
                "html_like": []
            }
        },
        "in_order": {
            "name": "in_order",
            "location": 161,
            "return": [],
            "arguments": {
                "root": [],
                "tokens": []
            }
        },
        "kern_tokens_to_dict": {
            "name": "kern_tokens_to_dict",
            "location": 200,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "dict_to_kern": {
            "name": "dict_to_kern",
            "location": 210,
            "return": [],
            "arguments": {
                "input_dict": []
            }
        },
        "kernel_to_infix_tokens": {
            "name": "kernel_to_infix_tokens",
            "location": 214,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "tokens_to_str": {
            "name": "tokens_to_str",
            "location": 228,
            "return": [],
            "arguments": {
                "tokens": [],
                "show_params": []
            }
        },
        "kernel_to_infix": {
            "name": "kernel_to_infix",
            "location": 249,
            "return": [],
            "arguments": {
                "kernel": [],
                "show_params": []
            }
        },
        "is_base_kernel": {
            "name": "is_base_kernel",
            "location": 260,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "is_sum_kernel": {
            "name": "is_sum_kernel",
            "location": 264,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "is_prod_kernel": {
            "name": "is_prod_kernel",
            "location": 268,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "n_base_kernels": {
            "name": "n_base_kernels",
            "location": 272,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "n_sum_kernels": {
            "name": "n_sum_kernels",
            "location": 281,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "n_prod_kernels": {
            "name": "n_prod_kernels",
            "location": 290,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "count_kernel_types": {
            "name": "count_kernel_types",
            "location": 299,
            "return": [],
            "arguments": {
                "kernel": [],
                "k_type_fn": []
            }
        },
        "compute_kernel": {
            "name": "compute_kernel",
            "location": 317,
            "return": [],
            "arguments": {
                "kernel": [],
                "x": [],
                "x2": []
            }
        },
        "sort_kernel": {
            "name": "sort_kernel",
            "location": 325,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "sort_combination_kernel": {
            "name": "sort_combination_kernel",
            "location": 351,
            "return": [],
            "arguments": {
                "kernel": [],
                "new_ops": []
            }
        },
        "additive_form": {
            "name": "additive_form",
            "location": 380,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "kernels_to_kernel_vecs": {
            "name": "kernels_to_kernel_vecs",
            "location": 415,
            "return": [],
            "arguments": {
                "kernels": [],
                "base_kernels": [],
                "n_dims": []
            }
        },
        "additive_part_to_vec": {
            "name": "additive_part_to_vec",
            "location": 439,
            "return": [],
            "arguments": {
                "additive_part": [],
                "base_kernels": [],
                "n_dims": []
            }
        },
        "decode_kernel": {
            "name": "decode_kernel",
            "location": 482,
            "return": [],
            "arguments": {
                "kern_dict_str": []
            }
        },
        "encode_kernel": {
            "name": "encode_kernel",
            "location": 492,
            "return": [],
            "arguments": {
                "kern": []
            }
        },
        "count_kernel_types.count_k_types": {
            "name": "count_k_types",
            "location": 309,
            "return": [],
            "arguments": {
                "kern": []
            }
        }
    },
    "MS-project-master/src/autoks/backend/model.py": {
        "model_to_infix_tokens": {
            "name": "model_to_infix_tokens",
            "location": 14,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "model_to_infix": {
            "name": "model_to_infix",
            "location": 23,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "model_to_binexptree": {
            "name": "model_to_binexptree",
            "location": 33,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 45,
            "return": [],
            "arguments": {
                "m": [],
                "output_file_name": [],
                "compress": [],
                "save_data": []
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 62,
            "return": [],
            "arguments": {
                "output_file_name": [],
                "data": []
            }
        },
        "set_model_kern": {
            "name": "set_model_kern",
            "location": 73,
            "return": [],
            "arguments": {
                "model": [],
                "new_kern": []
            }
        },
        "is_nan_model": {
            "name": "is_nan_model",
            "location": 86,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "n_data": {
            "name": "n_data",
            "location": 95,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "n_params": {
            "name": "n_params",
            "location": 100,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "log_likelihood": {
            "name": "log_likelihood",
            "location": 106,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "MS-project-master/src/autoks/backend/prior.py": {},
    "MS-project-master/src/autoks/core/active_set.py": {
        "ActiveSet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "max_n_models": []
            }
        },
        "ActiveSet.remove_priority": {
            "name": "remove_priority",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "remove_priority": []
            }
        },
        "ActiveSet.models": {
            "name": "models",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "models": []
            }
        },
        "ActiveSet.get_index_to_insert": {
            "name": "get_index_to_insert",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSet.update": {
            "name": "update",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "candidates": []
            }
        },
        "ActiveSet.add_model": {
            "name": "add_model",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "ActiveSet.get_selected_models": {
            "name": "get_selected_models",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSet.get_candidate_indices": {
            "name": "get_candidate_indices",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSet.get_candidates": {
            "name": "get_candidates",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSet.index": {
            "name": "index",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "ActiveSet.get": {
            "name": "get",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "default": []
            }
        },
        "ActiveSet.__len__": {
            "name": "__len__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveSet.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/covariance.py": {
        "pretty_print_covariances": {
            "name": "pretty_print_covariances",
            "location": 164,
            "return": [],
            "arguments": {
                "covariances": [],
                "kernel_type_label": []
            }
        },
        "tokens_to_kernel_symbols": {
            "name": "tokens_to_kernel_symbols",
            "location": 183,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "euclidean_distance": {
            "name": "euclidean_distance",
            "location": 194,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "kernel_l2_dist": {
            "name": "kernel_l2_dist",
            "location": 199,
            "return": [],
            "arguments": {
                "kernel_1": [],
                "kernel_2": [],
                "x": []
            }
        },
        "covariance_distance": {
            "name": "covariance_distance",
            "location": 213,
            "return": [],
            "arguments": {
                "covariances": [],
                "x": []
            }
        },
        "remove_duplicate_kernels": {
            "name": "remove_duplicate_kernels",
            "location": 232,
            "return": [],
            "arguments": {
                "covariances": []
            }
        },
        "kernel_vec_avg_dist": {
            "name": "kernel_vec_avg_dist",
            "location": 241,
            "return": [],
            "arguments": {
                "kvecs1": [],
                "kvecs2": []
            }
        },
        "all_pairs_avg_dist": {
            "name": "all_pairs_avg_dist",
            "location": 253,
            "return": [],
            "arguments": {
                "covariances": [],
                "base_kernels": [],
                "n_dims": []
            }
        },
        "inner_frob": {
            "name": "inner_frob",
            "location": 278,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "alignment": {
            "name": "alignment",
            "location": 283,
            "return": [],
            "arguments": {
                "k1": [],
                "k2": []
            }
        },
        "centered_alignment": {
            "name": "centered_alignment",
            "location": 301,
            "return": [],
            "arguments": {
                "k1": [],
                "k2": []
            }
        },
        "center_kernel": {
            "name": "center_kernel",
            "location": 311,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "pairwise_centered_alignments": {
            "name": "pairwise_centered_alignments",
            "location": 320,
            "return": [],
            "arguments": {
                "covariances": [],
                "x": []
            }
        },
        "Covariance.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "kernel": []
            }
        },
        "Covariance.raw_kernel": {
            "name": "raw_kernel",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "new_kernel": []
            }
        },
        "Covariance.to_dict": {
            "name": "to_dict",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance._format_input_dict": {
            "name": "_format_input_dict",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "Covariance.to_binary_tree": {
            "name": "to_binary_tree",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.canonical": {
            "name": "canonical",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.to_additive_form": {
            "name": "to_additive_form",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.pretty_print": {
            "name": "pretty_print",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.print_full": {
            "name": "print_full",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.is_base": {
            "name": "is_base",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.is_sum": {
            "name": "is_sum",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.is_prod": {
            "name": "is_prod",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.priors": {
            "name": "priors",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.set_hyperpriors": {
            "name": "set_hyperpriors",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "hyperpriors": []
            }
        },
        "Covariance.symbolically_equals": {
            "name": "symbolically_equals",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Covariance.symbolic_expanded_equals": {
            "name": "symbolic_expanded_equals",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Covariance.infix_equals": {
            "name": "infix_equals",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Covariance.as_latex": {
            "name": "as_latex",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.as_mathml": {
            "name": "as_mathml",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.as_dot": {
            "name": "as_dot",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.as_graph": {
            "name": "as_graph",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.__add__": {
            "name": "__add__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Covariance.__mul__": {
            "name": "__mul__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Covariance.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.set_hyperpriors.set_kern_prior": {
            "name": "set_kern_prior",
            "location": 112,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "MS-project-master/src/autoks/core/fitness_functions.py": {
        "log_likelihood_normalized": {
            "name": "log_likelihood_normalized",
            "location": 7,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "likelihood_normalized": {
            "name": "likelihood_normalized",
            "location": 16,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "negative_bic": {
            "name": "negative_bic",
            "location": 25,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "MS-project-master/src/autoks/core/gp_model.py": {
        "pretty_print_gp_models": {
            "name": "pretty_print_gp_models",
            "location": 127,
            "return": [],
            "arguments": {
                "gp_models": [],
                "kernel_type_label": []
            }
        },
        "remove_duplicate_gp_models": {
            "name": "remove_duplicate_gp_models",
            "location": 133,
            "return": [],
            "arguments": {
                "kernels": [],
                "verbose": []
            }
        },
        "all_same_expansion": {
            "name": "all_same_expansion",
            "location": 161,
            "return": [],
            "arguments": {
                "new_kernels": [],
                "prev_expansions": [],
                "max_expansions": []
            }
        },
        "model_to_infix_set": {
            "name": "model_to_infix_set",
            "location": 169,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "update_kernel_infix_set": {
            "name": "update_kernel_infix_set",
            "location": 174,
            "return": [],
            "arguments": {
                "new_kernels": [],
                "prev_expansions": [],
                "max_expansions": []
            }
        },
        "randomize_models": {
            "name": "randomize_models",
            "location": 186,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "encode_gp_model": {
            "name": "encode_gp_model",
            "location": 193,
            "return": [],
            "arguments": {
                "gp_model": []
            }
        },
        "encode_gp_models": {
            "name": "encode_gp_models",
            "location": 206,
            "return": [],
            "arguments": {
                "gp_models": []
            }
        },
        "GPModel.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "likelihood": [],
                "evaluated": []
            }
        },
        "GPModel.score_model": {
            "name": "score_model",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "scoring_func": []
            }
        },
        "GPModel.build_model": {
            "name": "build_model",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "GPModel.fit": {
            "name": "fit",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "optimizer": [],
                "n_restarts": []
            }
        },
        "GPModel.score": {
            "name": "score",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "score": []
            }
        },
        "GPModel.to_dict": {
            "name": "to_dict",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModel._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "GPModel._format_input_dict": {
            "name": "_format_input_dict",
            "location": 112,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "GPModel.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModel.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/gp_model_population.py": {
        "GPModelPopulation.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.models": {
            "name": "models",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "new_models": []
            }
        },
        "GPModelPopulation.update": {
            "name": "update",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "new_models": []
            }
        },
        "GPModelPopulation.add_model": {
            "name": "add_model",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "GPModelPopulation._hash_model": {
            "name": "_hash_model",
            "location": 37,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "GPModelPopulation.genotypes": {
            "name": "genotypes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.phenotypes": {
            "name": "phenotypes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.candidates": {
            "name": "candidates",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.variety": {
            "name": "variety",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.size": {
            "name": "size",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.sizes": {
            "name": "sizes",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.print_all": {
            "name": "print_all",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPModelPopulation.__len__": {
            "name": "__len__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveModelPopulation.fitness_scores": {
            "name": "fitness_scores",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveModelPopulation.mean_fitness": {
            "name": "mean_fitness",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveModelPopulation.best_fitness": {
            "name": "best_fitness",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveModelPopulation.best_model": {
            "name": "best_model",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveModelPopulation.phenotypic_diversity": {
            "name": "phenotypic_diversity",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/grammar.py": {
        "BaseGrammar.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "BaseGrammar.expand": {
            "name": "expand",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "BaseGrammar.get_candidates": {
            "name": "get_candidates",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "BaseGrammar.build": {
            "name": "build",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "n_dims": []
            }
        },
        "BaseGrammar._get_default_base_kernel_names": {
            "name": "_get_default_base_kernel_names",
            "location": 75,
            "return": [],
            "arguments": {
                "n_dims": []
            }
        },
        "BaseGrammar.to_dict": {
            "name": "to_dict",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseGrammar._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "BaseGrammar._format_input_dict": {
            "name": "_format_input_dict",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "BaseGrammar.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvolutionaryGrammar.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "population_operator": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "EvolutionaryGrammar.expand": {
            "name": "expand",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "EvolutionaryGrammar._get_default_base_kernel_names": {
            "name": "_get_default_base_kernel_names",
            "location": 164,
            "return": [],
            "arguments": {
                "n_dims": []
            }
        },
        "EvolutionaryGrammar.to_dict": {
            "name": "to_dict",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvolutionaryGrammar._format_input_dict": {
            "name": "_format_input_dict",
            "location": 173,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "EvolutionaryGrammar.__repr__": {
            "name": "__repr__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CKSGrammar.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "CKSGrammar.default_base_kernel_names": {
            "name": "default_base_kernel_names",
            "location": 195,
            "return": [],
            "arguments": {
                "n_dims": []
            }
        },
        "CKSGrammar._get_default_base_kernel_names": {
            "name": "_get_default_base_kernel_names",
            "location": 203,
            "return": [],
            "arguments": {
                "n_dims": []
            }
        },
        "CKSGrammar.expand": {
            "name": "expand",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "CKSGrammar.expand_single_kernel": {
            "name": "expand_single_kernel",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "seed_kernel": []
            }
        },
        "CKSGrammar.expand_full_kernel": {
            "name": "expand_full_kernel",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": []
            }
        },
        "CKSGrammar.expand_full_brute_force": {
            "name": "expand_full_brute_force",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "max_n_models": []
            }
        },
        "BomsGrammar.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "BomsGrammar.expand": {
            "name": "expand",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "BomsGrammar.expand_random": {
            "name": "expand_random",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "n_walks": []
            }
        },
        "BomsGrammar.expand_best": {
            "name": "expand_best",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "selected_models": [],
                "fitness_score": []
            }
        },
        "BomsGrammar.to_dict": {
            "name": "to_dict",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BomsGrammar._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 421,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "GeometricRandomGrammar.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "GeometricRandomGrammar.expand": {
            "name": "expand",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "UniformRandomGrammar.__init__": {
            "name": "__init__",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "n_models": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "UniformRandomGrammar.expand": {
            "name": "expand",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "seed_models": [],
                "verbose": []
            }
        },
        "CKSGrammar.expand_full_brute_force.remove_duplicates": {
            "name": "remove_duplicates",
            "location": 291,
            "return": [],
            "arguments": {
                "new_kerns": [],
                "all_kerns": []
            }
        }
    },
    "MS-project-master/src/autoks/core/hyperprior.py": {
        "boms_hyperpriors": {
            "name": "boms_hyperpriors",
            "location": 54,
            "return": [],
            "arguments": {
                "data_noise": []
            }
        },
        "HyperpriorMap.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "prior_map": []
            }
        },
        "HyperpriorMap.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperpriorMap._format_input_dict": {
            "name": "_format_input_dict",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "HyperpriorMap.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperpriorMap.__contains__": {
            "name": "__contains__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "HyperpriorMap.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "HyperpriorMap.__setitem__": {
            "name": "__setitem__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HyperpriorMap.__delitem__": {
            "name": "__delitem__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "MS-project-master/src/autoks/core/kernel_encoding.py": {
        "kernel_to_tree": {
            "name": "kernel_to_tree",
            "location": 46,
            "return": [],
            "arguments": {
                "kernel": []
            }
        },
        "apply_op": {
            "name": "apply_op",
            "location": 53,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "operator": []
            }
        },
        "eval_binexp_tree": {
            "name": "eval_binexp_tree",
            "location": 71,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "tree_to_kernel": {
            "name": "tree_to_kernel",
            "location": 91,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "hd_kern_nodes": {
            "name": "hd_kern_nodes",
            "location": 100,
            "return": [],
            "arguments": {
                "node_1": [],
                "node_2": []
            }
        },
        "KernelNode.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "parent": [],
                "left": [],
                "right": []
            }
        },
        "KernelNode._value_to_label": {
            "name": "_value_to_label",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "KernelNode._value_to_html": {
            "name": "_value_to_html",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "KernelTree.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "MS-project-master/src/autoks/core/prior.py": {
        "PriorDist.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "raw_prior_cls": [],
                "raw_prior_args": []
            }
        },
        "PriorDist.from_prior_str": {
            "name": "from_prior_str",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "prior_name": [],
                "raw_prior_args": []
            }
        },
        "PriorDist.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorDist._format_input_dict": {
            "name": "_format_input_dict",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "PriorDist.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "MS-project-master/src/autoks/core/gp_models/gp_regression.py": {
        "gp_regression": {
            "name": "gp_regression",
            "location": 10,
            "return": [],
            "arguments": {
                "inference_method": [],
                "likelihood_hyperprior": []
            }
        }
    },
    "MS-project-master/src/autoks/core/gp_models/__init__.py": {},
    "MS-project-master/src/autoks/core/model_selection/base.py": {
        "ModelSelector.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "gp_fn": [],
                "gp_args": [],
                "optimizer": [],
                "n_restarts_optimizer": [],
                "standardize_x": [],
                "standardize_y": []
            }
        },
        "ModelSelector.best_model_filename": {
            "name": "best_model_filename",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.train": {
            "name": "train",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "eval_budget": [],
                "max_generations": [],
                "verbose": [],
                "callbacks": [],
                "callback_metrics": []
            }
        },
        "ModelSelector._prepare_data": {
            "name": "_prepare_data",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ModelSelector._train": {
            "name": "_train",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "ModelSelector.predict": {
            "name": "predict",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ModelSelector.evaluate": {
            "name": "evaluate",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ModelSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector._get_initial_candidates": {
            "name": "_get_initial_candidates",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector._initialize": {
            "name": "_initialize",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "ModelSelector._select_parents": {
            "name": "_select_parents",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "ModelSelector._propose_new_models": {
            "name": "_propose_new_models",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "ModelSelector._evaluate_models": {
            "name": "_evaluate_models",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "models": [],
                "eval_budget": [],
                "callbacks": [],
                "verbose": [],
                "skip_evaluated": []
            }
        },
        "ModelSelector._evaluate_model": {
            "name": "_evaluate_model",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "verbose": []
            }
        },
        "ModelSelector.best_model": {
            "name": "best_model",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.load_best_model": {
            "name": "load_best_model",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.save_best_model": {
            "name": "save_best_model",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.to_dict": {
            "name": "to_dict",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 446,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "ModelSelector._format_input_dict": {
            "name": "_format_input_dict",
            "location": 476,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "ModelSelector._get_callback_model": {
            "name": "_get_callback_model",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector.get_timing_report": {
            "name": "get_timing_report",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelSelector._print_search_summary": {
            "name": "_print_search_summary",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "depth": [],
                "population": [],
                "eval_budget": [],
                "max_generations": [],
                "verbose": []
            }
        },
        "ModelSelector._covariances_to_gp_models": {
            "name": "_covariances_to_gp_models",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "covariances": []
            }
        },
        "ModelSelector._covariance_to_gp_model": {
            "name": "_covariance_to_gp_model",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "cov": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/boms_model_selector.py": {
        "BomsModelSelector.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "base_kernel_names": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "gp_fn": [],
                "gp_args": [],
                "optimizer": [],
                "n_restarts_optimizer": []
            }
        },
        "BomsModelSelector._train": {
            "name": "_train",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "BomsModelSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BomsModelSelector._initialize": {
            "name": "_initialize",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "BomsModelSelector._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "BomsModelSelector.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/cks_model_selector.py": {
        "CKSModelSelector.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "base_kernel_names": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "gp_fn": [],
                "gp_args": [],
                "optimizer": [],
                "n_restarts_optimizer": []
            }
        },
        "CKSModelSelector._train": {
            "name": "_train",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "callbacks": [],
                "max_generations": [],
                "verbose": []
            }
        },
        "CKSModelSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CKSModelSelector._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "CKSModelSelector.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/evolutionary_model_selector.py": {
        "EvolutionaryModelSelector.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "base_kernel_names": [],
                "fitness_fn": [],
                "initializer": [],
                "n_init_trees": [],
                "n_parents": [],
                "m_prob": [],
                "cx_prob": [],
                "pop_size": [],
                "additive_form": [],
                "fitness_sharing": [],
                "optimizer": [],
                "n_restarts_optimizer": [],
                "gp_fn": [],
                "gp_args": [],
                "hyperpriors": []
            }
        },
        "EvolutionaryModelSelector._train": {
            "name": "_train",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "EvolutionaryModelSelector._select_parents": {
            "name": "_select_parents",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "EvolutionaryModelSelector.select_offspring": {
            "name": "select_offspring",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "EvolutionaryModelSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvolutionaryModelSelector.to_dict": {
            "name": "to_dict",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvolutionaryModelSelector._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 153,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "EvolutionaryModelSelector._format_input_dict": {
            "name": "_format_input_dict",
            "location": 165,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "EvolutionaryModelSelector._create_default_grammar": {
            "name": "_create_default_grammar",
            "location": 172,
            "return": [],
            "arguments": {
                "n_offspring": [],
                "cx_prob": [],
                "m_prob": [],
                "base_kernel_names": [],
                "hyperpriors": []
            }
        },
        "EvolutionaryModelSelector.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoemsSurrogateSelector.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "acquisition_fn": [],
                "kernel_kernel_model": []
            }
        },
        "BoemsSurrogateSelector._train": {
            "name": "_train",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "BoemsSurrogateSelector._initialize": {
            "name": "_initialize",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "BoemsSurrogateSelector.update_population": {
            "name": "update_population",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "BoemsSurrogateSelector._set_remove_priority": {
            "name": "_set_remove_priority",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "all_candidate_indices": []
            }
        },
        "BoemsSurrogateSelector._evaluate_candidates": {
            "name": "_evaluate_candidates",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "candidate_indices": [],
                "eval_budget": [],
                "verbose": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/random_model_selector.py": {
        "RandomBaseSelector.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "optimizer": [],
                "n_restarts_optimizer": [],
                "gp_fn": [],
                "gp_args": []
            }
        },
        "RandomBaseSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomBaseSelector._train": {
            "name": "_train",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "RandomBaseSelector._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "RandomBaseSelector.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeomRandomModelSelector.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "base_kernel_names": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "optimizer": [],
                "n_restarts_optimizer": [],
                "gp_fn": [],
                "gp_args": []
            }
        },
        "UniformRandomModelSelector.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "hyperprior": [],
                "base_kernel_names": [],
                "fitness_fn": [],
                "n_parents": [],
                "additive_form": [],
                "optimizer": [],
                "n_restarts_optimizer": [],
                "gp_fn": [],
                "gp_args": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/smbo_model_selector.py": {
        "SMBOModelSelector.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "fitness_fn": [],
                "gp_fn": [],
                "gp_args": []
            }
        },
        "SMBOModelSelector._train": {
            "name": "_train",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "max_generations": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "SMBOModelSelector._initialize": {
            "name": "_initialize",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "eval_budget": [],
                "callbacks": [],
                "verbose": []
            }
        },
        "SMBOModelSelector._get_initial_candidate_covariances": {
            "name": "_get_initial_candidate_covariances",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/autoks/core/model_selection/__init__.py": {},
    "MS-project-master/src/autoks/core/strategies/bayes_opt_gp_strategy.py": {
        "BayesOptGPStrategy.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "acquisition_fn": [],
                "kernel_builder": [],
                "kernel_kernel_hyperpriors": []
            }
        },
        "BayesOptGPStrategy.query": {
            "name": "query",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "selected_models": [],
                "fitness_scores": [],
                "x_train": [],
                "y_train": [],
                "eval_budget": [],
                "gp_fn": [],
                "gp_args": []
            }
        }
    },
    "MS-project-master/src/autoks/core/strategies/bayes_opt_strategy.py": {
        "BayesOptStrategy.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "acquisition_fn": [],
                "kernel_builder": [],
                "kernel_kernel_hyperpriors": []
            }
        },
        "BayesOptStrategy.query": {
            "name": "query",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "fitness_scores": [],
                "x_train": [],
                "y_train": [],
                "eval_budget": [],
                "gp_fn": [],
                "gp_args": []
            }
        }
    },
    "MS-project-master/src/autoks/core/strategies/__init__.py": {},
    "MS-project-master/src/autoks/distance/distance.py": {
        "fix_numerical_problem": {
            "name": "fix_numerical_problem",
            "location": 287,
            "return": [],
            "arguments": {
                "k": [],
                "tolerance": []
            }
        },
        "chol_safe": {
            "name": "chol_safe",
            "location": 300,
            "return": [],
            "arguments": {
                "k": [],
                "tolerance": []
            }
        },
        "DistanceBuilder.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "noise_prior": [],
                "num_samples": [],
                "max_num_hyperparameters": [],
                "max_num_kernels": [],
                "active_models": [],
                "initial_model_indices": [],
                "data_X": [],
                "sampling_method": []
            }
        },
        "DistanceBuilder.precompute_information": {
            "name": "precompute_information",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "new_candidates_indices": [],
                "data_X": []
            }
        },
        "DistanceBuilder.update": {
            "name": "update",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "new_candidates_indices": [],
                "all_candidates_indices": [],
                "selected_indices": [],
                "data_X": []
            }
        },
        "DistanceBuilder.get_kernel": {
            "name": "get_kernel",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DistanceBuilder.metric": {
            "name": "metric",
            "location": 107,
            "return": [],
            "arguments": {
                "data_i": [],
                "data_j": []
            }
        },
        "DistanceBuilder.compute_distance": {
            "name": "compute_distance",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "active_models": [],
                "indices_i": [],
                "indices_j": []
            }
        },
        "DistanceBuilder.create_precomputed_info": {
            "name": "create_precomputed_info",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "data_X": []
            }
        },
        "HellingerDistanceBuilder.metric": {
            "name": "metric",
            "location": 132,
            "return": [],
            "arguments": {
                "data_i": [],
                "data_j": []
            }
        },
        "HellingerDistanceBuilder.hellinger_distance": {
            "name": "hellinger_distance",
            "location": 136,
            "return": [],
            "arguments": {
                "log_det_i": [],
                "mini_gram_matrices_i": [],
                "log_det_j": [],
                "mini_gram_matrices_j": [],
                "tol": []
            }
        },
        "HellingerDistanceBuilder.create_precomputed_info": {
            "name": "create_precomputed_info",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "data_X": []
            }
        },
        "FrobeniusDistanceBuilder.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "noise_prior": [],
                "num_samples": [],
                "max_num_hyperparameters": [],
                "max_num_kernels": [],
                "active_models": [],
                "initial_model_indices": [],
                "data_X": []
            }
        },
        "FrobeniusDistanceBuilder.metric": {
            "name": "metric",
            "location": 205,
            "return": [],
            "arguments": {
                "data_i": [],
                "data_j": []
            }
        },
        "FrobeniusDistanceBuilder.frobenius_distance": {
            "name": "frobenius_distance",
            "location": 209,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "FrobeniusDistanceBuilder.create_precomputed_info": {
            "name": "create_precomputed_info",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "data_X": []
            }
        },
        "CorrelationDistanceBuilder.metric": {
            "name": "metric",
            "location": 238,
            "return": [],
            "arguments": {
                "data_i": [],
                "data_j": []
            }
        },
        "CorrelationDistanceBuilder.correlation_distance": {
            "name": "correlation_distance",
            "location": 242,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "CorrelationDistanceBuilder.create_precomputed_info": {
            "name": "create_precomputed_info",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "data_X": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/matlab.py": {
        "start_matlab": {
            "name": "start_matlab",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "quit_matlab": {
            "name": "quit_matlab",
            "location": 10,
            "return": [],
            "arguments": {
                "engine": []
            }
        },
        "prob_samples_matlab": {
            "name": "prob_samples_matlab",
            "location": 14,
            "return": [],
            "arguments": {
                "engine": [],
                "max_num_hyperparameters": [],
                "num_samples": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/metrics.py": {
        "k_vec_metric": {
            "name": "k_vec_metric",
            "location": 14,
            "return": [],
            "arguments": {
                "u": [],
                "v": [],
                "base_kernels": [],
                "n_dims": []
            }
        },
        "shd_metric": {
            "name": "shd_metric",
            "location": 31,
            "return": [],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "euclidean_metric": {
            "name": "euclidean_metric",
            "location": 46,
            "return": [],
            "arguments": {
                "u": [],
                "v": [],
                "get_x_train": []
            }
        },
        "hellinger_metric": {
            "name": "hellinger_metric",
            "location": 63,
            "return": [],
            "arguments": {
                "u": [],
                "v": [],
                "get_x_train": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/util.py": {
        "probability_samples": {
            "name": "probability_samples",
            "location": 8,
            "return": [],
            "arguments": {
                "max_num_hyperparameters": [],
                "num_samples": [],
                "sampling_method": []
            }
        },
        "prior_sample": {
            "name": "prior_sample",
            "location": 21,
            "return": [],
            "arguments": {
                "priors": [],
                "prob_samples": []
            }
        },
        "prior_sample_gaussian": {
            "name": "prior_sample_gaussian",
            "location": 44,
            "return": [],
            "arguments": {
                "priors": [],
                "prob_samples": []
            }
        },
        "prior_sample_log_gaussian": {
            "name": "prior_sample_log_gaussian",
            "location": 66,
            "return": [],
            "arguments": {
                "priors": [],
                "prob_samples": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/__init__.py": {},
    "MS-project-master/src/autoks/distance/sampling/halton.py": {
        "generate_halton": {
            "name": "generate_halton",
            "location": 8,
            "return": [],
            "arguments": {
                "n": [],
                "d": []
            }
        },
        "generate_generalized_halton": {
            "name": "generate_generalized_halton",
            "location": 13,
            "return": [],
            "arguments": {
                "n": [],
                "d": []
            }
        },
        "halton_sample": {
            "name": "halton_sample",
            "location": 18,
            "return": [],
            "arguments": {
                "n_samples": [],
                "n_dims": [],
                "scramble": []
            }
        },
        "generalized_halton_sample": {
            "name": "generalized_halton_sample",
            "location": 30,
            "return": [],
            "arguments": {
                "n_samples": [],
                "n_dims": []
            }
        },
        "HaltonSampler.sample": {
            "name": "sample",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": [],
                "n_dims": []
            }
        },
        "GeneralizedHaltonSampler.sample": {
            "name": "sample",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": [],
                "n_dims": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/random.py": {
        "RandomSampler.sample": {
            "name": "sample",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": [],
                "n_dims": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/sample.py": {
        "sample": {
            "name": "sample",
            "location": 9,
            "return": [],
            "arguments": {
                "sampler_type": [],
                "n_samples": [],
                "n_dims": []
            }
        },
        "_create_sampler": {
            "name": "_create_sampler",
            "location": 19,
            "return": [],
            "arguments": {
                "sampler_type": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/sampler.py": {
        "Sampler.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "Sampler.sample": {
            "name": "sample",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": [],
                "n_dims": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/scramble.py": {
        "scramble_array": {
            "name": "scramble_array",
            "location": 4,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/sobol.py": {
        "gen_sobol": {
            "name": "gen_sobol",
            "location": 11,
            "return": [],
            "arguments": {
                "n": [],
                "d": [],
                "skip": []
            }
        },
        "sobol_sample": {
            "name": "sobol_sample",
            "location": 31,
            "return": [],
            "arguments": {
                "n_samples": [],
                "n_dims": [],
                "skip": [],
                "scramble": []
            }
        },
        "SobolSampler.sample": {
            "name": "sample",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": [],
                "n_dims": []
            }
        }
    },
    "MS-project-master/src/autoks/distance/sampling/__init__.py": {},
    "MS-project-master/src/autoks/postprocessing/evaluation.py": {
        "compute_skmodel_rmse": {
            "name": "compute_skmodel_rmse",
            "location": 11,
            "return": [],
            "arguments": {
                "model": [],
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "compute_gpy_model_rmse": {
            "name": "compute_gpy_model_rmse",
            "location": 30,
            "return": [],
            "arguments": {
                "model": [],
                "x_test": [],
                "y_test": []
            }
        },
        "rmse_rbf": {
            "name": "rmse_rbf",
            "location": 45,
            "return": [],
            "arguments": {
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "rmse_svr": {
            "name": "rmse_svr",
            "location": 62,
            "return": [],
            "arguments": {
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "rmse_lin_reg": {
            "name": "rmse_lin_reg",
            "location": 77,
            "return": [],
            "arguments": {
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "rmse_knn": {
            "name": "rmse_knn",
            "location": 92,
            "return": [],
            "arguments": {
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "rmse_to_smse": {
            "name": "rmse_to_smse",
            "location": 107,
            "return": [],
            "arguments": {
                "rmse": [],
                "y_test": []
            }
        }
    },
    "MS-project-master/src/autoks/postprocessing/report_generator.py": {
        "ExperimentReportGenerator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [],
                "gp_models": [],
                "x_test": [],
                "y_test": [],
                "results_dir_name": []
            }
        },
        "ExperimentReportGenerator.summarize_experiment": {
            "name": "summarize_experiment",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "author": []
            }
        },
        "ExperimentReportGenerator._create_result_file": {
            "name": "_create_result_file",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "width": [],
                "title": [],
                "author": []
            }
        },
        "ExperimentReportGenerator._add_overview": {
            "name": "_add_overview",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_model_scores": {
            "name": "_add_model_scores",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "width": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_kernel_structure_subsection": {
            "name": "_add_kernel_structure_subsection",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "width": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_population_subsection": {
            "name": "_add_population_subsection",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "width": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_model_plot": {
            "name": "_add_model_plot",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "width": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_results": {
            "name": "_add_results",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "width": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_timing_report": {
            "name": "_add_timing_report",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_model_summary": {
            "name": "_add_model_summary",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_comparison": {
            "name": "_add_comparison",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_performance": {
            "name": "_add_performance",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        },
        "ExperimentReportGenerator._add_exp_params": {
            "name": "_add_exp_params",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "title": []
            }
        }
    },
    "MS-project-master/src/autoks/postprocessing/summarize_group.py": {
        "summarize_exp_group": {
            "name": "summarize_exp_group",
            "location": 11,
            "return": [],
            "arguments": {
                "experiment_group_dir_name": []
            }
        },
        "_parse_experiment_group": {
            "name": "_parse_experiment_group",
            "location": 20,
            "return": [],
            "arguments": {
                "experiment_group_dir_name": []
            }
        },
        "create_plots": {
            "name": "create_plots",
            "location": 27,
            "return": [],
            "arguments": {
                "histories": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/autoks/postprocessing/summary.py": {
        "summarize": {
            "name": "summarize",
            "location": 22,
            "return": [],
            "arguments": {
                "experiment_dirname": []
            }
        },
        "_format_exp_dict": {
            "name": "_format_exp_dict",
            "location": 80,
            "return": [],
            "arguments": {
                "exp_dict": []
            }
        },
        "_parse_experiment": {
            "name": "_parse_experiment",
            "location": 88,
            "return": [],
            "arguments": {
                "experiment_dirname": []
            }
        },
        "create_figures": {
            "name": "create_figures",
            "location": 103,
            "return": [],
            "arguments": {
                "best_gp_model": [],
                "best_model": [],
                "tracker": []
            }
        },
        "print_summary": {
            "name": "print_summary",
            "location": 118,
            "return": [],
            "arguments": {
                "best_gp_model": [],
                "best_model": [],
                "x_train": [],
                "y_train": [],
                "x_test": [],
                "y_test": []
            }
        },
        "print_timing_report": {
            "name": "print_timing_report",
            "location": 160,
            "return": [],
            "arguments": {
                "timing_report": []
            }
        },
        "plot_stat_book": {
            "name": "plot_stat_book",
            "location": 171,
            "return": [],
            "arguments": {
                "tracker": [],
                "stat_book": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 198,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/autoks/postprocessing/__init__.py": {},
    "MS-project-master/src/autoks/symbolic/kernel_symbol.py": {
        "KernelSymbol.__new__": {
            "name": "__new__",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "kernel_one_d": []
            }
        }
    },
    "MS-project-master/src/autoks/symbolic/util.py": {
        "apply_add_mul_operator": {
            "name": "apply_add_mul_operator",
            "location": 6,
            "return": [],
            "arguments": {
                "operator": [],
                "operand_1": [],
                "operand_2": []
            }
        },
        "postfix_tokens_to_symbol": {
            "name": "postfix_tokens_to_symbol",
            "location": 13,
            "return": [],
            "arguments": {
                "postfix_token_symbols": []
            }
        }
    },
    "MS-project-master/src/datasets/airline.py": {
        "_download_airline": {
            "name": "_download_airline",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 60,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_data": {
            "name": "_load_data",
            "location": 71,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 79,
            "return": [],
            "arguments": {
                "data_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "AirlineDataset.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "AirlineDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AirlineDataset._subsample": {
            "name": "_subsample",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/concrete.py": {
        "_download_concrete": {
            "name": "_download_concrete",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 59,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 70,
            "return": [],
            "arguments": {
                "data_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "ConcreteDataset.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "ConcreteDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcreteDataset._subsample": {
            "name": "_subsample",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/dataset.py": {
        "_download_raw_dataset": {
            "name": "_download_raw_dataset",
            "location": 43,
            "return": [],
            "arguments": {
                "metadata": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.data_dirname": {
            "name": "data_dirname",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Dataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.split_train_test": {
            "name": "split_train_test",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "test_size": []
            }
        },
        "Dataset.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/housing.py": {
        "_download_housing": {
            "name": "_download_housing",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 57,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 68,
            "return": [],
            "arguments": {
                "data_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "HousingDataset.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "HousingDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HousingDataset._subsample": {
            "name": "_subsample",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/mauna.py": {
        "_download_mauna": {
            "name": "_download_mauna",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 62,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 73,
            "return": [],
            "arguments": {
                "data_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "MaunaDataset.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "MaunaDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaunaDataset._subsample": {
            "name": "_subsample",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/methane.py": {
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 51,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_download_methane": {
            "name": "_download_methane",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 96,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "MethaneDataset.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "MethaneDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethaneDataset._subsample": {
            "name": "_subsample",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/solar.py": {
        "_download_solar": {
            "name": "_download_solar",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 58,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_load_x_y": {
            "name": "_load_x_y",
            "location": 69,
            "return": [],
            "arguments": {
                "data_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "SolarDataset.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "subsample_fraction": []
            }
        },
        "SolarDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolarDataset._subsample": {
            "name": "_subsample",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/util.py": {
        "compute_sha256": {
            "name": "compute_sha256",
            "location": 10,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 32,
            "return": [],
            "arguments": {
                "url": [],
                "filename": []
            }
        },
        "download_urls": {
            "name": "download_urls",
            "location": 38,
            "return": [],
            "arguments": {
                "urls": [],
                "filenames": []
            }
        },
        "TqdmUpTo.update_to": {
            "name": "update_to",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "blocks": [],
                "b_size": [],
                "t_size": []
            }
        }
    },
    "MS-project-master/src/datasets/__init__.py": {},
    "MS-project-master/src/datasets/synthetic/known_gp_dataset.py": {
        "sample_gp": {
            "name": "sample_gp",
            "location": 35,
            "return": [],
            "arguments": {
                "kernel": [],
                "n_pts": [],
                "noise_var": []
            }
        },
        "cks_known_kernels": {
            "name": "cks_known_kernels",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "KnownGPDataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "covariance": [],
                "noise_var": [],
                "n_pts": []
            }
        },
        "KnownGPDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KnownGPDataset.snr": {
            "name": "snr",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KnownGPDataset.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/synthetic/synthetic_data.py": {
        "Sinusoid1Dataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "Sinusoid1Dataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sinusoid2Dataset.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "Sinusoid2Dataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplePeriodic1dDataset.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "SimplePeriodic1dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTrend1dDataset.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "PeriodicTrend1dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearTrend1dDataset.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "LinearTrend1dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RBF1dDataset.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "RBF1dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CubicSine1dDataset.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "CubicSine1dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ToyARD4dDataset.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "ToyARD4dDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntheticRegressionDataset.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": [],
                "min_terms": [],
                "max_terms": [],
                "periodic": []
            }
        },
        "SyntheticRegressionDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntheticRegressionDataset.__repr__": {
            "name": "__repr__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BraninGenerator.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "BraninGenerator.branin": {
            "name": "branin",
            "location": 214,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "BraninGenerator.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SePlusRQ.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SePlusPER.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinTimesLinTimesPer.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntheticRegressionDataset.load_or_generate_data.do_nothing": {
            "name": "do_nothing",
            "location": 149,
            "return": [],
            "arguments": {
                "argv": []
            }
        }
    },
    "MS-project-master/src/datasets/synthetic/synthetic_dataset.py": {
        "SyntheticDataset.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "SyntheticDataset.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Input1DSyntheticDataset.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "n_samples": [],
                "input_dim": []
            }
        },
        "Input1DSyntheticDataset.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/datasets/synthetic/__init__.py": {},
    "MS-project-master/src/evalg/crossover.py": {
        "check_gte_two_parents": {
            "name": "check_gte_two_parents",
            "location": 9,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_two_parents": {
            "name": "check_two_parents",
            "location": 23,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_gte_two_parents.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "check_two_parents.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "Recombinator.crossover": {
            "name": "crossover",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "OnePointBinaryRecombinator.crossover": {
            "name": "crossover",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "TwoPointBinaryRecombinator.crossover": {
            "name": "crossover",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "NPointBinaryRecombinator.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": []
            }
        },
        "NPointBinaryRecombinator.n_points": {
            "name": "n_points",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "n_points": []
            }
        },
        "NPointBinaryRecombinator.crossover": {
            "name": "crossover",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "NPointBinaryRecombinator.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UniformBinaryRecombinator.crossover": {
            "name": "crossover",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        }
    },
    "MS-project-master/src/evalg/encoding.py": {
        "postfix_tokens_to_bin_tree_node": {
            "name": "postfix_tokens_to_bin_tree_node",
            "location": 380,
            "return": [],
            "arguments": {
                "postfix_tokens": [],
                "bin_tree_cls": []
            }
        },
        "postfix_tokens_to_binexp_tree": {
            "name": "postfix_tokens_to_binexp_tree",
            "location": 408,
            "return": [],
            "arguments": {
                "postfix_tokens": [],
                "bin_tree_node_cls": [],
                "bin_tree_cls": []
            }
        },
        "infix_tokens_to_postfix_tokens": {
            "name": "infix_tokens_to_postfix_tokens",
            "location": 415,
            "return": [],
            "arguments": {
                "infix_tokens": []
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "parent": [],
                "children": []
            }
        },
        "TreeNode._value_to_label": {
            "name": "_value_to_label",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeNode._value_to_html": {
            "name": "_value_to_html",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeNode.value": {
            "name": "value",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeNode.has_parent": {
            "name": "has_parent",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.has_children": {
            "name": "has_children",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.add_child": {
            "name": "add_child",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeNode._add_child": {
            "name": "_add_child",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "TreeNode.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "parent": [],
                "left": [],
                "right": []
            }
        },
        "BinaryTreeNode.has_left_child": {
            "name": "has_left_child",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.has_right_child": {
            "name": "has_right_child",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_left_child": {
            "name": "is_left_child",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_right_child": {
            "name": "is_right_child",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_root": {
            "name": "is_root",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.is_leaf": {
            "name": "is_leaf",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.add_left": {
            "name": "add_left",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BinaryTreeNode.add_right": {
            "name": "add_right",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BinaryTreeNode.create_graph": {
            "name": "create_graph",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "BinaryTreeNode.height": {
            "name": "height",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode._height_helper": {
            "name": "_height_helper",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BinaryTreeNode.__iter__": {
            "name": "__iter__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.__contains__": {
            "name": "__contains__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BinaryTreeNode.__len__": {
            "name": "__len__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode._size": {
            "name": "_size",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BinaryTreeNode.__str__": {
            "name": "__str__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeNode.__repr__": {
            "name": "__repr__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BinaryTree.root": {
            "name": "root",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BinaryTree.create_graph": {
            "name": "create_graph",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.select_postorder": {
            "name": "select_postorder",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "node_idx": []
            }
        },
        "BinaryTree.infix": {
            "name": "infix",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.height": {
            "name": "height",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.infix_tokens": {
            "name": "infix_tokens",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.postfix_tokens": {
            "name": "postfix_tokens",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree._infix_helper": {
            "name": "_infix_helper",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "expression": []
            }
        },
        "BinaryTree._infix_tokens_helper": {
            "name": "_infix_tokens_helper",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "tokens": []
            }
        },
        "BinaryTree.__iter__": {
            "name": "__iter__",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.__contains__": {
            "name": "__contains__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BinaryTree.__len__": {
            "name": "__len__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.__repr__": {
            "name": "__repr__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/evalg/fitness.py": {
        "shared_fitness_scores": {
            "name": "shared_fitness_scores",
            "location": 10,
            "return": [],
            "arguments": {
                "individuals": [],
                "raw_fitness_scores": [],
                "metric": [],
                "share_radius": [],
                "alpha": []
            }
        },
        "shared_fitness": {
            "name": "shared_fitness",
            "location": 46,
            "return": [],
            "arguments": {
                "distance_matrix": [],
                "raw_fitness_scores": [],
                "share_radius": [],
                "alpha": []
            }
        },
        "compute_distance": {
            "name": "compute_distance",
            "location": 55,
            "return": [],
            "arguments": {
                "items": [],
                "metric": []
            }
        },
        "parsimony_pressure": {
            "name": "parsimony_pressure",
            "location": 62,
            "return": [],
            "arguments": {
                "fitness": [],
                "size": [],
                "p_coeff": []
            }
        },
        "covariant_parsimony_pressure": {
            "name": "covariant_parsimony_pressure",
            "location": 77,
            "return": [],
            "arguments": {
                "fitness": [],
                "size": [],
                "fitness_list": [],
                "sizes": []
            }
        },
        "structural_hamming_dist": {
            "name": "structural_hamming_dist",
            "location": 101,
            "return": [],
            "arguments": {
                "tree_1": [],
                "tree_2": [],
                "hd": []
            }
        },
        "shd": {
            "name": "shd",
            "location": 115,
            "return": [],
            "arguments": {
                "node_1": [],
                "node_2": [],
                "hd": []
            }
        },
        "_hd": {
            "name": "_hd",
            "location": 152,
            "return": [],
            "arguments": {
                "node_1": [],
                "node_2": []
            }
        }
    },
    "MS-project-master/src/evalg/mutation.py": {
        "Mutator.mutate": {
            "name": "mutate",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "BitFlipMutator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "gene_mut_prob": []
            }
        },
        "BitFlipMutator.mutate": {
            "name": "mutate",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "BitFlipMutator.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterchangeMutator.mutate": {
            "name": "mutate",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "ReverseMutator.mutate": {
            "name": "mutate",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "GaussianMutator.mutate": {
            "name": "mutate",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "BoundaryMutator.mutate": {
            "name": "mutate",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "UniformMutator.mutate": {
            "name": "mutate",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "NonuniformMutator.mutate": {
            "name": "mutate",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        },
        "ShrinkMutator.mutate": {
            "name": "mutate",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "individual": []
            }
        }
    },
    "MS-project-master/src/evalg/population.py": {
        "PopulationBase.genotypes": {
            "name": "genotypes",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationBase.phenotypes": {
            "name": "phenotypes",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationBase.variety": {
            "name": "variety",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationBase.size": {
            "name": "size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationBase.print_all": {
            "name": "print_all",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Population.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Population.variety": {
            "name": "variety",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Population.size": {
            "name": "size",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Population.print_all": {
            "name": "print_all",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/evalg/selection.py": {
        "Selector.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "Selector.n_individuals": {
            "name": "n_individuals",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "Selector._select": {
            "name": "_select",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "Selector.select": {
            "name": "select",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "Selector.arg_select": {
            "name": "arg_select",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "Selector.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityMixin.get_probabilities": {
            "name": "get_probabilities",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "raw_fitness": []
            }
        },
        "AllSelector.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "AllSelector.select": {
            "name": "select",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "AllSelector.arg_select": {
            "name": "arg_select",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "UniformSelector.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "UniformSelector.select": {
            "name": "select",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "UniformSelector.arg_select": {
            "name": "arg_select",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "StochasticUnivSampSelector.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "StochasticUnivSampSelector.select": {
            "name": "select",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "StochasticUnivSampSelector.arg_select": {
            "name": "arg_select",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "BoltzmannSelector.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": [],
                "temperature": [],
                "prev_pop_avg": []
            }
        },
        "BoltzmannSelector.select": {
            "name": "select",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "BoltzmannSelector.arg_select": {
            "name": "arg_select",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "BoltzmannSelector.__repr__": {
            "name": "__repr__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FitnessProportionalSelector.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "FitnessProportionalSelector.select": {
            "name": "select",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "FitnessProportionalSelector.arg_select": {
            "name": "arg_select",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "FitnessProportionalSelector.get_probabilities": {
            "name": "get_probabilities",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "raw_fitness": []
            }
        },
        "SigmaScalingSelector.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "SigmaScalingSelector.select": {
            "name": "select",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "SigmaScalingSelector.arg_select": {
            "name": "arg_select",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "SigmaScalingSelector.get_probabilities": {
            "name": "get_probabilities",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "raw_fitness": []
            }
        },
        "TruncationSelector.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "TruncationSelector.select": {
            "name": "select",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "TruncationSelector.arg_select": {
            "name": "arg_select",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "LinearRankingSelector.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": []
            }
        },
        "LinearRankingSelector.select": {
            "name": "select",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "LinearRankingSelector.arg_select": {
            "name": "arg_select",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "LinearRankingSelector.linear_rankings": {
            "name": "linear_rankings",
            "location": 354,
            "return": [],
            "arguments": {
                "fitness_list": []
            }
        },
        "LinearRankingSelector.get_probabilities": {
            "name": "get_probabilities",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "raw_fitness": []
            }
        },
        "ExponentialRankingSelector.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": [],
                "c": []
            }
        },
        "ExponentialRankingSelector.c": {
            "name": "c",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "ExponentialRankingSelector.select": {
            "name": "select",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "ExponentialRankingSelector.arg_select": {
            "name": "arg_select",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "ExponentialRankingSelector.get_probabilities": {
            "name": "get_probabilities",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "raw_fitness": []
            }
        },
        "ExponentialRankingSelector.__repr__": {
            "name": "__repr__",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentSelector.__init__": {
            "name": "__init__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "n_individuals": [],
                "n_way": []
            }
        },
        "TournamentSelector.n_way": {
            "name": "n_way",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "n_way": []
            }
        },
        "TournamentSelector.select": {
            "name": "select",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "TournamentSelector.arg_select": {
            "name": "arg_select",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "population": [],
                "fitness_list": []
            }
        },
        "TournamentSelector.__repr__": {
            "name": "__repr__",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/evalg/serialization.py": {
        "Serializable.to_dict": {
            "name": "to_dict",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Serializable.from_dict": {
            "name": "from_dict",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "Serializable._build_from_input_dict": {
            "name": "_build_from_input_dict",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "Serializable._format_input_dict": {
            "name": "_format_input_dict",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "Serializable.load": {
            "name": "load",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "output_file_name": []
            }
        },
        "Serializable.save": {
            "name": "save",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "output_filename": [],
                "compress": []
            }
        }
    },
    "MS-project-master/src/evalg/util.py": {
        "swap": {
            "name": "swap",
            "location": 6,
            "return": [],
            "arguments": {
                "arr": [],
                "i": [],
                "j": []
            }
        }
    },
    "MS-project-master/src/evalg/vary.py": {
        "Variator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "operator": []
            }
        },
        "Variator.vary": {
            "name": "vary",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "Variator.to_dict": {
            "name": "to_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variator._format_input_dict": {
            "name": "_format_input_dict",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "Variator.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossoverVariator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "operator": [],
                "n_offspring": [],
                "n_way": [],
                "c_prob": []
            }
        },
        "CrossoverVariator.crossover_all": {
            "name": "crossover_all",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "CrossoverVariator.vary": {
            "name": "vary",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "CrossoverVariator.to_dict": {
            "name": "to_dict",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossoverVariator.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutationVariator.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "operator": [],
                "m_prob": []
            }
        },
        "MutationVariator.mutate_all": {
            "name": "mutate_all",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "individuals": []
            }
        },
        "MutationVariator.vary": {
            "name": "vary",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "MutationVariator.to_dict": {
            "name": "to_dict",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutationVariator.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationOperator.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "PopulationOperator.variators": {
            "name": "variators",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "PopulationOperator.create_offspring": {
            "name": "create_offspring",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "population": []
            }
        },
        "PopulationOperator.to_dict": {
            "name": "to_dict",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PopulationOperator._format_input_dict": {
            "name": "_format_input_dict",
            "location": 195,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "PopulationOperator.__repr__": {
            "name": "__repr__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossMutPopOperator.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "CrossMutPopOperator.variators": {
            "name": "variators",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "CrossMutPopOperator.crossover_variator": {
            "name": "crossover_variator",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "crossover_variator": []
            }
        },
        "CrossMutPopOperator.mutation_variator": {
            "name": "mutation_variator",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "mutation_variator": []
            }
        },
        "CrossoverPopOperator.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "CrossoverPopOperator.variators": {
            "name": "variators",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "CrossoverPopOperator.crossover_variator": {
            "name": "crossover_variator",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "crossover_variator": []
            }
        },
        "MutationPopOperator.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "MutationPopOperator.variators": {
            "name": "variators",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "variators": []
            }
        },
        "MutationPopOperator.mutation_variator": {
            "name": "mutation_variator",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "mutation_variator": []
            }
        }
    },
    "MS-project-master/src/evalg/visualization.py": {
        "plot_best_so_far": {
            "name": "plot_best_so_far",
            "location": 10,
            "return": [],
            "arguments": {
                "best_so_far": [],
                "ax": [],
                "title": [],
                "x_label": [],
                "y_label": []
            }
        },
        "setup_plot": {
            "name": "setup_plot",
            "location": 37,
            "return": [],
            "arguments": {
                "x_label": [],
                "y_label": [],
                "title": [],
                "ax": []
            }
        },
        "setup_values": {
            "name": "setup_values",
            "location": 59,
            "return": [],
            "arguments": {
                "values": [],
                "value_label": [],
                "ax": []
            }
        },
        "setup_stds": {
            "name": "setup_stds",
            "location": 81,
            "return": [],
            "arguments": {
                "stds": [],
                "mu": [],
                "t": [],
                "ax": [],
                "std_label": []
            }
        },
        "setup_optima": {
            "name": "setup_optima",
            "location": 106,
            "return": [],
            "arguments": {
                "x": [],
                "optima": [],
                "optima_label": [],
                "ax": []
            }
        },
        "plot_distribution": {
            "name": "plot_distribution",
            "location": 126,
            "return": [],
            "arguments": {
                "values": [],
                "stds": [],
                "optima": [],
                "x_label": [],
                "value_name": [],
                "metric_name": [],
                "optima_name": []
            }
        }
    },
    "MS-project-master/src/evalg/genprog/crossover.py": {
        "SubtreeExchangeRecombinatorBase._swap_subtrees": {
            "name": "_swap_subtrees",
            "location": 14,
            "return": [],
            "arguments": {
                "node_1": [],
                "node_2": [],
                "tree_1": [],
                "tree_2": []
            }
        },
        "SubtreeExchangeRecombinatorBase._valid_pair": {
            "name": "_valid_pair",
            "location": 63,
            "return": [],
            "arguments": {
                "token_1": [],
                "token_2": []
            }
        },
        "SubtreeExchangeRecombinator._select_token_ind": {
            "name": "_select_token_ind",
            "location": 82,
            "return": [],
            "arguments": {
                "tokens_1": [],
                "tokens_2": []
            }
        },
        "SubtreeExchangeRecombinator.crossover": {
            "name": "crossover",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "SubtreeExchangeLeafBiasedRecombinator.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "t_prob": []
            }
        },
        "SubtreeExchangeLeafBiasedRecombinator.crossover": {
            "name": "crossover",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "SubtreeExchangeLeafBiasedRecombinator.to_dict": {
            "name": "to_dict",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnePointRecombinatorBase._get_common_region": {
            "name": "_get_common_region",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "node_1": [],
                "node_2": [],
                "valid_pairs": []
            }
        },
        "OnePointRecombinatorBase.get_common_region": {
            "name": "get_common_region",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "node_1": [],
                "node_2": []
            }
        },
        "OnePointRecombinatorBase.crossover": {
            "name": "crossover",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "OnePointRecombinatorBase.select_node_pair": {
            "name": "select_node_pair",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "common_region": []
            }
        },
        "OnePointRecombinator.select_node_pair": {
            "name": "select_node_pair",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "common_region": []
            }
        },
        "OnePointStrictRecombinator.get_allowed_pairs": {
            "name": "get_allowed_pairs",
            "location": 262,
            "return": [],
            "arguments": {
                "common_region": []
            }
        },
        "OnePointStrictRecombinator.select_node_pair": {
            "name": "select_node_pair",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "common_region": []
            }
        },
        "OnePointLeafBiasedRecombinator.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "t_prob": []
            }
        },
        "OnePointLeafBiasedRecombinator.select_node_pair": {
            "name": "select_node_pair",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "common_region": []
            }
        },
        "OnePointLeafBiasedRecombinator.to_dict": {
            "name": "to_dict",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnePointStrictLeafBiasedRecombinator.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "t_prob": []
            }
        },
        "OnePointStrictLeafBiasedRecombinator.select_node_pair": {
            "name": "select_node_pair",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "common_region": []
            }
        },
        "OnePointStrictLeafBiasedRecombinator.to_dict": {
            "name": "to_dict",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/evalg/genprog/generators.py": {
        "BinaryTreeGenerator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "BinaryTreeGenerator.max_depth": {
            "name": "max_depth",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": []
            }
        },
        "BinaryTreeGenerator.generate": {
            "name": "generate",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": []
            }
        },
        "BinaryTreeGenerator.to_dict": {
            "name": "to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeGenerator._format_input_dict": {
            "name": "_format_input_dict",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "BinaryTreeGenerator.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GrowGenerator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "GrowGenerator.generate": {
            "name": "generate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": []
            }
        },
        "GrowGenerator.grow": {
            "name": "grow",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": [],
                "depth": []
            }
        },
        "FullGenerator.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "FullGenerator.generate": {
            "name": "generate",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": []
            }
        },
        "FullGenerator.full": {
            "name": "full",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": [],
                "depth": []
            }
        },
        "HalfAndHalfGenerator.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "HalfAndHalfGenerator.generate": {
            "name": "generate",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "binary_operators": [],
                "operands": []
            }
        }
    },
    "MS-project-master/src/evalg/genprog/mutation.py": {
        "TreeMutator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "binary_tree_node_cls": []
            }
        },
        "TreeMutator.mutate": {
            "name": "mutate",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "operators": [],
                "operands": [],
                "individual": []
            }
        },
        "TreeMutator.to_dict": {
            "name": "to_dict",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeMutator._format_input_dict": {
            "name": "_format_input_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "input_dict": []
            }
        },
        "TreeMutator.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreePointMutator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "binary_tree_node_cls": []
            }
        },
        "TreePointMutator.mutate": {
            "name": "mutate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "operators": [],
                "operands": [],
                "individual": []
            }
        },
        "SubTreeExchangeMutator.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "SubTreeExchangeMutator._mutate_subtree_exchange": {
            "name": "_mutate_subtree_exchange",
            "location": 108,
            "return": [],
            "arguments": {
                "operators": [],
                "operands": [],
                "tree": [],
                "tree_generator": []
            }
        },
        "SubTreeExchangeMutator._swap_mut_subtree": {
            "name": "_swap_mut_subtree",
            "location": 129,
            "return": [],
            "arguments": {
                "tree": [],
                "r": [],
                "random_tree": []
            }
        },
        "SubTreeExchangeMutator.to_dict": {
            "name": "to_dict",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubTreeExchangeMutator.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GrowMutator.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "GrowMutator.mutate": {
            "name": "mutate",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "operators": [],
                "operands": [],
                "individual": []
            }
        },
        "FullMutator.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "FullMutator.mutate": {
            "name": "mutate",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "operators": [],
                "operands": [],
                "individual": []
            }
        },
        "HalfAndHalfMutator.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "max_depth": [],
                "binary_tree_node_cls": []
            }
        },
        "HalfAndHalfMutator.mutate": {
            "name": "mutate",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "operators": [],
                "operands": [],
                "individual": []
            }
        }
    },
    "MS-project-master/src/evalg/genprog/util.py": {
        "check_binary_trees": {
            "name": "check_binary_trees",
            "location": 6,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_binary_trees.wrapper": {
            "name": "wrapper",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        }
    },
    "MS-project-master/src/evalg/genprog/__init__.py": {},
    "MS-project-master/src/tests/unit/autoks/test_active_set.py": {
        "TestActiveSet.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_set_bad_remove_priority": {
            "name": "test_set_bad_remove_priority",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_set_empty_remove_priority": {
            "name": "test_set_empty_remove_priority",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_index_to_insert_empty": {
            "name": "test_get_index_to_insert_empty",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_index_to_insert_one_item": {
            "name": "test_get_index_to_insert_one_item",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_index_to_insert_full_no_priority": {
            "name": "test_get_index_to_insert_full_no_priority",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_index_to_insert_full_with_priority": {
            "name": "test_get_index_to_insert_full_with_priority",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_add_model_empty": {
            "name": "test_add_model_empty",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_add_model_same": {
            "name": "test_add_model_same",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_update_empty": {
            "name": "test_update_empty",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_update_exceed_max_no_remove": {
            "name": "test_update_exceed_max_no_remove",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_update_exceed_max_remove_set": {
            "name": "test_update_exceed_max_remove_set",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_update_with_duplicates": {
            "name": "test_update_with_duplicates",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_same_candidate": {
            "name": "test_get_same_candidate",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_same_candidate_expression": {
            "name": "test_get_same_candidate_expression",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_same_candidate_with_default": {
            "name": "test_get_same_candidate_with_default",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_get_new_candidate_with_default": {
            "name": "test_get_new_candidate_with_default",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_index_same_candidate": {
            "name": "test_index_same_candidate",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_index_same_candidate_expression": {
            "name": "test_index_same_candidate_expression",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActiveSet.test_index_new_model": {
            "name": "test_index_new_model",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_autoks_util.py": {
        "TestUtil.test_arg_sort": {
            "name": "test_arg_sort",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_arg_unique": {
            "name": "test_arg_unique",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_remove_duplicates": {
            "name": "test_remove_duplicates",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_remove_duplicates_multi_type": {
            "name": "test_remove_duplicates_multi_type",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_tokenize": {
            "name": "test_tokenize",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_flatten": {
            "name": "test_flatten",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_remove_outer_parens": {
            "name": "test_remove_outer_parens",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_join_operands": {
            "name": "test_join_operands",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_type_count": {
            "name": "test_type_count",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_pretty_time_delta": {
            "name": "test_pretty_time_delta",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_backend_kernel.py": {
        "TestBackendKernel.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_kernel_dict": {
            "name": "test_kernel_dict",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_get_allowable_kernels": {
            "name": "test_get_allowable_kernels",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_get_matching_kernels": {
            "name": "test_get_matching_kernels",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_create_1d_kernel": {
            "name": "test_create_1d_kernel",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_get_priors": {
            "name": "test_get_priors",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_set_priors": {
            "name": "test_set_priors",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_subkernel_expression": {
            "name": "test_subkernel_expression",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_sort_kernel": {
            "name": "test_sort_kernel",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_get_all_1d_kernels": {
            "name": "test_get_all_1d_kernels",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_kernels_to_kernel_vecs": {
            "name": "test_kernels_to_kernel_vecs",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_additive_part_to_vec": {
            "name": "test_additive_part_to_vec",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_decode_kernel": {
            "name": "test_decode_kernel",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBackendKernel.test_encode_kernel": {
            "name": "test_encode_kernel",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_backend_model.py": {
        "TestBackendModel.test_cov_parsimony_pressure": {
            "name": "test_cov_parsimony_pressure",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_covariance.py": {
        "TestCovariance.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_create_empty": {
            "name": "test_create_empty",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_create_one_d": {
            "name": "test_create_one_d",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_to_binary_tree": {
            "name": "test_to_binary_tree",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_to_dict": {
            "name": "test_to_dict",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_from_dict": {
            "name": "test_from_dict",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_canonical": {
            "name": "test_canonical",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_to_additive_form": {
            "name": "test_to_additive_form",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_symbolically_equals": {
            "name": "test_symbolically_equals",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_symbolic_expanded_equals": {
            "name": "test_symbolic_expanded_equals",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_infix_equals": {
            "name": "test_infix_equals",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_is_base": {
            "name": "test_is_base",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_is_sum": {
            "name": "test_is_sum",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_is_prod": {
            "name": "test_is_prod",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_add": {
            "name": "test_add",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_multiply": {
            "name": "test_multiply",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_as_latex": {
            "name": "test_as_latex",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_as_mathml": {
            "name": "test_as_mathml",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_as_dot": {
            "name": "test_as_dot",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovariance.test_as_graph": {
            "name": "test_as_graph",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.setUp": {
            "name": "setUp",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_remove_duplicate_kernels": {
            "name": "test_remove_duplicate_kernels",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_tokens_to_kernel_symbols": {
            "name": "test_tokens_to_kernel_symbols",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_kernel_vec_avg_dist": {
            "name": "test_kernel_vec_avg_dist",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_all_pairs_avg_dist": {
            "name": "test_all_pairs_avg_dist",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_shd_metric": {
            "name": "test_shd_metric",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCovarianceModule.test_euclidean_metric": {
            "name": "test_euclidean_metric",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_distance.py": {
        "create_pool_of_covariances": {
            "name": "create_pool_of_covariances",
            "location": 350,
            "return": [],
            "arguments": {
                "n": [],
                "n_dims": []
            }
        },
        "DistanceMetricCase.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "metric": [],
                "pool": [],
                "n": []
            }
        },
        "DistanceMetricCase.test_non_negativity": {
            "name": "test_non_negativity",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceMetricCase.test_identity_of_indiscernibles": {
            "name": "test_identity_of_indiscernibles",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceMetricCase.test_symmetry": {
            "name": "test_symmetry",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceMetricCase.test_triangle_inequality": {
            "name": "test_triangle_inequality",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundedMetricCase.test_boundedness": {
            "name": "test_boundedness",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistance.test_fix_numerical_problem": {
            "name": "test_fix_numerical_problem",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistance.test_chol_safe": {
            "name": "test_chol_safe",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceBuilder.setUp": {
            "name": "setUp",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceBuilder.test_init": {
            "name": "test_init",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "mock_precompute_information": []
            }
        },
        "TestDistanceBuilder.test_metric": {
            "name": "test_metric",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.setUp": {
            "name": "setUp",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_precompute_information": {
            "name": "test_precompute_information",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_update": {
            "name": "test_update",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_get_kernel": {
            "name": "test_get_kernel",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_compute_distance": {
            "name": "test_compute_distance",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_hellinger_distance": {
            "name": "test_hellinger_distance",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceBuilder.test_create_precomputed_info": {
            "name": "test_create_precomputed_info",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHellingerDistanceMetric.setUp": {
            "name": "setUp",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCorrelationDistanceMetric.setUp": {
            "name": "setUp",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrobeniusDistanceMetric.setUp": {
            "name": "setUp",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_distance_util.py": {
        "TestDistanceUtil.test_probability_samples": {
            "name": "test_probability_samples",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceUtil.test_prior_sample": {
            "name": "test_prior_sample",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceUtil.test_prior_sample_gaussian_fast": {
            "name": "test_prior_sample_gaussian_fast",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceUtil.test_prior_gaussian_sample_slow": {
            "name": "test_prior_gaussian_sample_slow",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDistanceUtil.test_prior_log_gaussian_fast": {
            "name": "test_prior_log_gaussian_fast",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_gp_model.py": {
        "TestGPModel.test_to_binary_tree": {
            "name": "test_to_binary_tree",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModel.test_to_dict": {
            "name": "test_to_dict",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModel.test_from_dict": {
            "name": "test_from_dict",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModel.test_save": {
            "name": "test_save",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModel.test_load": {
            "name": "test_load",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModelModule.test_remove_duplicate_gp_models": {
            "name": "test_remove_duplicate_gp_models",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModelModule.test_encode_gp_model": {
            "name": "test_encode_gp_model",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGPModelModule.test_encode_gp_models": {
            "name": "test_encode_gp_models",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_grammar.py": {
        "TestBaseGrammar.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaseGrammar.test_expand": {
            "name": "test_expand",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaseGrammar.test_to_dict": {
            "name": "test_to_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaseGrammar.test_from_dict": {
            "name": "test_from_dict",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_create_grammar": {
            "name": "test_create_grammar",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_create_grammar_default_base_kern_names_one_d": {
            "name": "test_create_grammar_default_base_kern_names_one_d",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_create_grammar_default_base_kern_names_multi_d": {
            "name": "test_create_grammar_default_base_kern_names_multi_d",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_mask_kernels_multi_d": {
            "name": "test_mask_kernels_multi_d",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand": {
            "name": "test_expand",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_one_dim": {
            "name": "test_expand_one_dim",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_single_kernel_two_dims": {
            "name": "test_expand_single_kernel_two_dims",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_single_kernel_mutli_d": {
            "name": "test_expand_single_kernel_mutli_d",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_full_brute_force_level_0": {
            "name": "test_expand_full_brute_force_level_0",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_full_brute_force_level_1": {
            "name": "test_expand_full_brute_force_level_1",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_full_brute_force_level_2_and_3": {
            "name": "test_expand_full_brute_force_level_2_and_3",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_expand_full_kernel": {
            "name": "test_expand_full_kernel",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_to_dict": {
            "name": "test_to_dict",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSGrammar.test_from_dict": {
            "name": "test_from_dict",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_create": {
            "name": "test_create",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_get_candidates_empty": {
            "name": "test_get_candidates_empty",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_get_candidates": {
            "name": "test_get_candidates",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_expand": {
            "name": "test_expand",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_expand_best": {
            "name": "test_expand_best",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_to_dict": {
            "name": "test_to_dict",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.test_from_dict": {
            "name": "test_from_dict",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsGrammar.tearDown": {
            "name": "tearDown",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryGrammar.setUp": {
            "name": "setUp",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryGrammar.test_create_grammar_default_base_kern_names_one_d": {
            "name": "test_create_grammar_default_base_kern_names_one_d",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryGrammar.test_create_grammar_default_base_kern_names_multi_d": {
            "name": "test_create_grammar_default_base_kern_names_multi_d",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryGrammar.test_to_dict": {
            "name": "test_to_dict",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryGrammar.test_from_dict": {
            "name": "test_from_dict",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGeometricRandomGrammar.test_to_dict": {
            "name": "test_to_dict",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGeometricRandomGrammar.test_from_dict": {
            "name": "test_from_dict",
            "location": 594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformRandomGrammar.test_create": {
            "name": "test_create",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformRandomGrammar.test_build": {
            "name": "test_build",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformRandomGrammar.test_expand_one_d": {
            "name": "test_expand_one_d",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_halton.py": {
        "test_generate_halton_one_d": {
            "name": "test_generate_halton_one_d",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_generate_halton_two_d": {
            "name": "test_generate_halton_two_d",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_generate_generalized_halton": {
            "name": "test_generate_generalized_halton",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_halton_sample_0_leap_no_scramble": {
            "name": "test_halton_sample_0_leap_no_scramble",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_halton_sample_0_leap_scramble": {
            "name": "test_halton_sample_0_leap_scramble",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_hyperprior.py": {
        "TestHyperprior.test_boms_hyperpriors": {
            "name": "test_boms_hyperpriors",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHyperprior.test_to_dict": {
            "name": "test_to_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHyperprior.test_from_dict": {
            "name": "test_from_dict",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_kernel_encoding.py": {
        "TestKernelNode.test_init": {
            "name": "test_init",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKernelNode.test__value_to_label": {
            "name": "test__value_to_label",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKernelTree.test_init": {
            "name": "test_init",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKernelEncoding.test_hd_kern_nodes": {
            "name": "test_hd_kern_nodes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_kernel_symbol.py": {
        "TestKernelSymbol.test_init": {
            "name": "test_init",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_matlab.py": {
        "TestMatlab.test_prob_samples_matlab": {
            "name": "test_prob_samples_matlab",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatlab.tearDownClass": {
            "name": "tearDownClass",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_model_selection.py": {
        "TestModelSelector.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelSelector.test_propose_new_models": {
            "name": "test_propose_new_models",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_candidates": []
            }
        },
        "TestModelSelector.test_to_dict": {
            "name": "test_to_dict",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelSelector.test_from_dict": {
            "name": "test_from_dict",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSModelSelector.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCKSModelSelector.test_get_initial_candidate_covariances": {
            "name": "test_get_initial_candidate_covariances",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBomsModelSelector.setUp": {
            "name": "setUp",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryModelSelector.setUp": {
            "name": "setUp",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryModelSelector.test_to_dict": {
            "name": "test_to_dict",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvolutionaryModelSelector.test_from_dict_unbuilt": {
            "name": "test_from_dict_unbuilt",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_prior.py": {
        "TestPrior.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrior.test_from_str": {
            "name": "test_from_str",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrior.test_to_dict": {
            "name": "test_to_dict",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrior.test_from_dict": {
            "name": "test_from_dict",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_sample.py": {
        "test_sample_sobol": {
            "name": "test_sample_sobol",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_sample_halton": {
            "name": "test_sample_halton",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_sample_generalized_halton": {
            "name": "test_sample_generalized_halton",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_create_sampler_sobol": {
            "name": "test_create_sampler_sobol",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_create_sampler_halton": {
            "name": "test_create_sampler_halton",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_create_sampler_generalized_halton": {
            "name": "test_create_sampler_generalized_halton",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_create_sampler_unknown": {
            "name": "test_create_sampler_unknown",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_sampler.py": {
        "test_create_empty_sampler": {
            "name": "test_create_empty_sampler",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_create_sampler_with_seed": {
            "name": "test_create_sampler_with_seed",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_sample": {
            "name": "test_sample",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_sobol.py": {
        "TestSobol.test_gen_sobol": {
            "name": "test_gen_sobol",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSobol.test_sobol_sample": {
            "name": "test_sobol_sample",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_statistics.py": {
        "TestStatistic.test_record": {
            "name": "test_record",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistic.test_clear": {
            "name": "test_clear",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistic.test_to_dict": {
            "name": "test_to_dict",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistic.test_from_dict": {
            "name": "test_from_dict",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_add_statistic": {
            "name": "test_add_statistic",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_add_raw_value_stat": {
            "name": "test_add_raw_value_stat",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_get_raw_values": {
            "name": "test_get_raw_values",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_stat_names": {
            "name": "test_stat_names",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_stats_list": {
            "name": "test_stats_list",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_mean": {
            "name": "test_mean",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_median": {
            "name": "test_median",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_maximum": {
            "name": "test_maximum",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_std": {
            "name": "test_std",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_var": {
            "name": "test_var",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_sum": {
            "name": "test_sum",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_running_max": {
            "name": "test_running_max",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_running_mean": {
            "name": "test_running_mean",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_running_std": {
            "name": "test_running_std",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_clear_all_values": {
            "name": "test_clear_all_values",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStat.test_to_dict": {
            "name": "test_to_dict",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_add_multistat": {
            "name": "test_add_multistat",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_add_raw_value_stat": {
            "name": "test_add_raw_value_stat",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_get_raw_values": {
            "name": "test_get_raw_values",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_mean": {
            "name": "test_mean",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_median": {
            "name": "test_median",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_maximum": {
            "name": "test_maximum",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_std": {
            "name": "test_std",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_var": {
            "name": "test_var",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_running_max": {
            "name": "test_running_max",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_running_mean": {
            "name": "test_running_mean",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_running_std": {
            "name": "test_running_std",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_multi_stats_names": {
            "name": "test_multi_stats_names",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_multi_stats": {
            "name": "test_multi_stats",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_update_stat_book": {
            "name": "test_update_stat_book",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_clear_all_values": {
            "name": "test_clear_all_values",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBook.test_to_dict": {
            "name": "test_to_dict",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.setUp": {
            "name": "setUp",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.test_add_stat_book": {
            "name": "test_add_stat_book",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.test_to_dict": {
            "name": "test_to_dict",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.test_from_dict": {
            "name": "test_from_dict",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.test_save": {
            "name": "test_save",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatBookCollection.test_load": {
            "name": "test_load",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStatistic.test_from_dict.square": {
            "name": "square",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/test_symbolic_util.py": {
        "TestSymbolicUtil.test_apply_add_mul_operator": {
            "name": "test_apply_add_mul_operator",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSymbolicUtil.test_postfix_tokens_to_symbol": {
            "name": "test_postfix_tokens_to_symbol",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/autoks/support/util.py": {
        "counter_repr": {
            "name": "counter_repr",
            "location": 8,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "lists_equal_without_order": {
            "name": "lists_equal_without_order",
            "location": 17,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "same_combo_type": {
            "name": "same_combo_type",
            "location": 27,
            "return": [],
            "arguments": {
                "k1": [],
                "k2": []
            }
        },
        "base_kernel_eq": {
            "name": "base_kernel_eq",
            "location": 37,
            "return": [],
            "arguments": {
                "kern_1": [],
                "kern_2": []
            }
        },
        "has_combo_kernel_type": {
            "name": "has_combo_kernel_type",
            "location": 43,
            "return": [],
            "arguments": {
                "kernels": [],
                "kern": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_airline_dataset.py": {
        "TestAirlineDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_concrete_dataset.py": {
        "TestConcreteDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_dataset.py": {
        "TestDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_housing_dataset.py": {
        "TestHousingDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_mauna_dataset.py": {
        "TestMaunaDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_methane_dataset.py": {
        "TestMethaneDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/datasets/test_solar_dataset.py": {
        "TestSolarDataset.test_name": {
            "name": "test_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_encoding.py": {
        "TestTreeNode.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_value": {
            "name": "test_value",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_has_parent": {
            "name": "test_has_parent",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_has_children": {
            "name": "test_has_children",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_add_child": {
            "name": "test_add_child",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_has_left_child": {
            "name": "test_has_left_child",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_has_right_child": {
            "name": "test_has_right_child",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_has_parent": {
            "name": "test_has_parent",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_is_left_child": {
            "name": "test_is_left_child",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_is_right_child": {
            "name": "test_is_right_child",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_is_root": {
            "name": "test_is_root",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_is_leaf": {
            "name": "test_is_leaf",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_add_left": {
            "name": "test_add_left",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_add_right": {
            "name": "test_add_right",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_create_graph": {
            "name": "test_create_graph",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_height": {
            "name": "test_height",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_contains": {
            "name": "test_contains",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_iter": {
            "name": "test_iter",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeNode.test_len": {
            "name": "test_len",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.setUp": {
            "name": "setUp",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_root": {
            "name": "test_root",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_create_graph": {
            "name": "test_create_graph",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_select_postorder": {
            "name": "test_select_postorder",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_height": {
            "name": "test_height",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_infix_tokens": {
            "name": "test_infix_tokens",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTree.test_postfix_tokens": {
            "name": "test_postfix_tokens",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_infix_tokens_to_postfix_tokens": {
            "name": "test_infix_tokens_to_postfix_tokens",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_postfix_tokens_to_binexp_tree": {
            "name": "test_postfix_tokens_to_binexp_tree",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_fitness.py": {
        "TestFitness.test_parsimony_pressure": {
            "name": "test_parsimony_pressure",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitness.test_covariant_parsimony_pressure": {
            "name": "test_covariant_parsimony_pressure",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitness.test_structural_hamming_dist_stumps": {
            "name": "test_structural_hamming_dist_stumps",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitness.test_structural_hamming_dist_small_trees": {
            "name": "test_structural_hamming_dist_small_trees",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitness.test_structural_hamming_dist_complex_trees": {
            "name": "test_structural_hamming_dist_complex_trees",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_genprog.py": {
        "TestBinaryTreeGenerator.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeGenerator.test_max_depth": {
            "name": "test_max_depth",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeGenerator.test_generate": {
            "name": "test_generate",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeGenerator.test_to_dict": {
            "name": "test_to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryTreeGenerator.test_from_dict": {
            "name": "test_from_dict",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowGenerator.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowGenerator.test_generate": {
            "name": "test_generate",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowGenerator.test_grow": {
            "name": "test_grow",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowGenerator.test_to_dict": {
            "name": "test_to_dict",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowGenerator.test_from_dict": {
            "name": "test_from_dict",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullGenerator.setUp": {
            "name": "setUp",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullGenerator.test_generate": {
            "name": "test_generate",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullGenerator.test_full": {
            "name": "test_full",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullGenerator.test_to_dict": {
            "name": "test_to_dict",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullGenerator.test_from_dict": {
            "name": "test_from_dict",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfGenerator.setUp": {
            "name": "setUp",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfGenerator.test_generate": {
            "name": "test_generate",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfGenerator.test_to_dict": {
            "name": "test_to_dict",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfGenerator.test_from_dict": {
            "name": "test_from_dict",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeMutator.test_tree_type": {
            "name": "test_tree_type",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePointMutator.setUp": {
            "name": "setUp",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePointMutator.test_mutate": {
            "name": "test_mutate",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePointMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePointMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePointMutator.tearDown": {
            "name": "tearDown",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.setUp": {
            "name": "setUp",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.test_max_depth": {
            "name": "test_max_depth",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.test__mutate_subtree_exchange": {
            "name": "test__mutate_subtree_exchange",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.test__swap_mut_subtree": {
            "name": "test__swap_mut_subtree",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubTreeExchangeMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowMutator.setUp": {
            "name": "setUp",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowMutator.test_mutate": {
            "name": "test_mutate",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrowMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullMutator.setUp": {
            "name": "setUp",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullMutator.test_mutate": {
            "name": "test_mutate",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfMutator.setUp": {
            "name": "setUp",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfMutator.test_mutate": {
            "name": "test_mutate",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfMutator.test_to_dict": {
            "name": "test_to_dict",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHalfAndHalfMutator.test_from_dict": {
            "name": "test_from_dict",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_same_node": {
            "name": "test_swap_same_node",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_none_node": {
            "name": "test_swap_none_node",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_left_nodes": {
            "name": "test_swap_left_nodes",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_right_nodes": {
            "name": "test_swap_right_nodes",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_left_and_right_nodes": {
            "name": "test_swap_left_and_right_nodes",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_right_and_left_nodes": {
            "name": "test_swap_right_and_left_nodes",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_left_and_stump": {
            "name": "test_swap_left_and_stump",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_right_and_stump": {
            "name": "test_swap_right_and_stump",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_stump_and_node": {
            "name": "test_swap_stump_and_node",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_nodes_with_children": {
            "name": "test_swap_nodes_with_children",
            "location": 661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_leaves": {
            "name": "test_swap_leaves",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_swap_complex_trees": {
            "name": "test_swap_complex_trees",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test__valid_pair": {
            "name": "test__valid_pair",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_to_dict": {
            "name": "test_to_dict",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.test_from_dict": {
            "name": "test_from_dict",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinatorBase.tearDown": {
            "name": "tearDown",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinator.test_crossover": {
            "name": "test_crossover",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinator.test__select_token_ind": {
            "name": "test__select_token_ind",
            "location": 800,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinator.test_to_dict": {
            "name": "test_to_dict",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinator.test_from_dict": {
            "name": "test_from_dict",
            "location": 819,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeRecombinator.tearDown": {
            "name": "tearDown",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeLeafBiasedRecombinator.test_crossover": {
            "name": "test_crossover",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeLeafBiasedRecombinator.test_to_dict": {
            "name": "test_to_dict",
            "location": 869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeLeafBiasedRecombinator.test_from_dict": {
            "name": "test_from_dict",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtreeExchangeLeafBiasedRecombinator.tearDown": {
            "name": "tearDown",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.setUp": {
            "name": "setUp",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_get_common_region": {
            "name": "test_get_common_region",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_select_node_pair": {
            "name": "test_select_node_pair",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_stumps": {
            "name": "test_crossover_stumps",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_stump_and_tree": {
            "name": "test_crossover_stump_and_tree",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_roots": {
            "name": "test_crossover_roots",
            "location": 950,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_trees_roots_selected": {
            "name": "test_crossover_trees_roots_selected",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_subtrees": {
            "name": "test_crossover_subtrees",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_crossover_leaves": {
            "name": "test_crossover_leaves",
            "location": 1056,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_to_dict": {
            "name": "test_to_dict",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.test_from_dict": {
            "name": "test_from_dict",
            "location": 1109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinatorBase.tearDown": {
            "name": "tearDown",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinator.setUp": {
            "name": "setUp",
            "location": 1123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinator.test_select_node_pair": {
            "name": "test_select_node_pair",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinator.test_to_dict": {
            "name": "test_to_dict",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointRecombinator.test_from_dict": {
            "name": "test_from_dict",
            "location": 1146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.setUp": {
            "name": "setUp",
            "location": 1158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_one_pair": {
            "name": "test_select_node_pair_one_pair",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_only_operators": {
            "name": "test_select_node_pair_only_operators",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_only_operands": {
            "name": "test_select_node_pair_only_operands",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_operands_and_operators": {
            "name": "test_select_node_pair_operands_and_operators",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_t_prob_1": {
            "name": "test_select_node_pair_t_prob_1",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_select_node_pair_t_prob_0": {
            "name": "test_select_node_pair_t_prob_0",
            "location": 1226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_to_dict": {
            "name": "test_to_dict",
            "location": 1241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointLeafBiasedRecombinator.test_from_dict": {
            "name": "test_from_dict",
            "location": 1248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.setUp": {
            "name": "setUp",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.test_select_node_pair_one_pair": {
            "name": "test_select_node_pair_one_pair",
            "location": 1263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.test_select_node_pair_dif_operator": {
            "name": "test_select_node_pair_dif_operator",
            "location": 1274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.test_select_node_pair_same_operator": {
            "name": "test_select_node_pair_same_operator",
            "location": 1287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.test_to_dict": {
            "name": "test_to_dict",
            "location": 1300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOnePointStrictRecombinator.test_from_dict": {
            "name": "test_from_dict",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_selection.py": {
        "TestSelector.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelector.test_n_individuals": {
            "name": "test_n_individuals",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelector.test_select": {
            "name": "test_select",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAllSelector.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAllSelector.test_select": {
            "name": "test_select",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAllSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformSelector.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformSelector.test_select": {
            "name": "test_select",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUniformSelector.tearDown": {
            "name": "tearDown",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitnessProportionalSelector.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitnessProportionalSelector.test_select": {
            "name": "test_select",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitnessProportionalSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitnessProportionalSelector.test_get_probabilities": {
            "name": "test_get_probabilities",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFitnessProportionalSelector.tearDown": {
            "name": "tearDown",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmaScalingSelector.setUp": {
            "name": "setUp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmaScalingSelector.test_select": {
            "name": "test_select",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmaScalingSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmaScalingSelector.test_get_probabilities": {
            "name": "test_get_probabilities",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmaScalingSelector.tearDown": {
            "name": "tearDown",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncationSelector.setUp": {
            "name": "setUp",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncationSelector.test_select": {
            "name": "test_select",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncationSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.setUp": {
            "name": "setUp",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.test_select": {
            "name": "test_select",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.test_linear_rankings": {
            "name": "test_linear_rankings",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.test_get_probabilities": {
            "name": "test_get_probabilities",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearRankingSelector.tearDown": {
            "name": "tearDown",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.setUp": {
            "name": "setUp",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.test_c_value": {
            "name": "test_c_value",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.test_select": {
            "name": "test_select",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.test_get_probabilities": {
            "name": "test_get_probabilities",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExponentialRankingSelector.tearDown": {
            "name": "tearDown",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentSelector.setUp": {
            "name": "setUp",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentSelector.test_n_way_value": {
            "name": "test_n_way_value",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentSelector.test_select": {
            "name": "test_select",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentSelector.test_arg_select": {
            "name": "test_arg_select",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentSelector.tearDown": {
            "name": "tearDown",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_serialization.py": {
        "TestSerialization.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_to_dict": {
            "name": "test_to_dict",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_from_dict": {
            "name": "test_from_dict",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test__format_input_dict": {
            "name": "test__format_input_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_save": {
            "name": "test_save",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_load": {
            "name": "test_load",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_util.py": {
        "TestUtil.test_swap": {
            "name": "test_swap",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/test_vary.py": {
        "TestVariator.test_to_dict": {
            "name": "test_to_dict",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVariator.test_from_dict": {
            "name": "test_from_dict",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossoverVariator.test_to_dict": {
            "name": "test_to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossoverVariator.test_from_dict": {
            "name": "test_from_dict",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutationVariator.test_to_dict": {
            "name": "test_to_dict",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutationVariator.test_from_dict": {
            "name": "test_from_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPopulationOperator.test_variators": {
            "name": "test_variators",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPopulationOperator.test_to_dict": {
            "name": "test_to_dict",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPopulationOperator.test_from_dict": {
            "name": "test_from_dict",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossMutPopOperator.test_variators": {
            "name": "test_variators",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossMutPopOperator.test_to_dict": {
            "name": "test_to_dict",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossMutPopOperator.test_from_dict": {
            "name": "test_from_dict",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossoverPopOperator.test_variators": {
            "name": "test_variators",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossoverPopOperator.test_to_dict": {
            "name": "test_to_dict",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCrossoverPopOperator.test_from_dict": {
            "name": "test_from_dict",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutationPopOperator.test_variators": {
            "name": "test_variators",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutationPopOperator.test_to_dict": {
            "name": "test_to_dict",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMutationPopOperator.test_from_dict": {
            "name": "test_from_dict",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MS-project-master/src/tests/unit/evalg/support/util.py": {
        "NodeCheckTestCase._check_node": {
            "name": "_check_node",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "value": [],
                "left_value": [],
                "right_value": [],
                "parent_value": []
            }
        },
        "NodeCheckTestCase.check_root": {
            "name": "check_root",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "parent_node": [],
                "value": [],
                "left_value": [],
                "right_value": []
            }
        },
        "NodeCheckTestCase.check_leaf": {
            "name": "check_leaf",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "leaf_node": [],
                "value": [],
                "parent_value": []
            }
        },
        "NodeCheckTestCase.check_stump": {
            "name": "check_stump",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "stump_node": [],
                "value": []
            }
        }
    },
    "MS-project-master/src/training/prepare_experiments.py": {
        "run_experiments": {
            "name": "run_experiments",
            "location": 6,
            "return": [],
            "arguments": {
                "experiments_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/run_experiment.py": {
        "run_experiment": {
            "name": "run_experiment",
            "location": 32,
            "return": [],
            "arguments": {
                "experiment_config": [],
                "save_models": [],
                "save_experiment": [],
                "use_gcp": [],
                "use_comet": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 206,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/run_experiment_from_file.py": {
        "run_experiments": {
            "name": "run_experiments",
            "location": 10,
            "return": [],
            "arguments": {
                "experiments_filename": [],
                "save": [],
                "use_comet": []
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/update_metadata.py": {
        "_get_metadata_filename": {
            "name": "_get_metadata_filename",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/util.py": {
        "train_model": {
            "name": "train_model",
            "location": 14,
            "return": [],
            "arguments": {
                "model": [],
                "dataset": [],
                "eval_budget": [],
                "verbose": [],
                "use_gcp": [],
                "comet_experiment": []
            }
        }
    },
    "MS-project-master/src/training/gcp/core.py": {
        "gcp_metadata_dir": {
            "name": "gcp_metadata_dir",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/gcp/env.py": {
        "get_metadata_dir": {
            "name": "get_metadata_dir",
            "location": 6,
            "return": [],
            "arguments": {
                "default": [],
                "env": []
            }
        }
    },
    "MS-project-master/src/training/gcp/log.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/gcp/run_experiment_gcp.py": {
        "run_experiment_group": {
            "name": "run_experiment_group",
            "location": 10,
            "return": [],
            "arguments": {
                "experiments_filename": [],
                "project": [],
                "bucket": [],
                "zone": [],
                "instance_name_prefix": [],
                "compute": []
            }
        },
        "list_instances": {
            "name": "list_instances",
            "location": 47,
            "return": [],
            "arguments": {
                "compute": [],
                "project": [],
                "zone": []
            }
        },
        "create_instance": {
            "name": "create_instance",
            "location": 52,
            "return": [],
            "arguments": {
                "compute": [],
                "project": [],
                "zone": [],
                "name": [],
                "bucket": [],
                "exp_args": []
            }
        },
        "delete_instance": {
            "name": "delete_instance",
            "location": 215,
            "return": [],
            "arguments": {
                "compute": [],
                "project": [],
                "zone": [],
                "name": []
            }
        },
        "wait_for_operation": {
            "name": "wait_for_operation",
            "location": 222,
            "return": [],
            "arguments": {
                "compute": [],
                "project": [],
                "zone": [],
                "operation": []
            }
        },
        "main": {
            "name": "main",
            "location": 239,
            "return": [],
            "arguments": {}
        }
    },
    "MS-project-master/src/training/gcp/storage.py": {
        "upload_blob": {
            "name": "upload_blob",
            "location": 6,
            "return": [],
            "arguments": {
                "bucket_name": [],
                "data": [],
                "destination_blob_name": []
            }
        },
        "download_blob": {
            "name": "download_blob",
            "location": 21,
            "return": [],
            "arguments": {
                "bucket_name": [],
                "source_blob_name": [],
                "destination_file_name": []
            }
        }
    },
    "MS-project-master/src/training/gcp/__init__.py": {
        "log": {
            "name": "log",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 21,
            "return": [],
            "arguments": {
                "metadata_dir": []
            }
        },
        "save": {
            "name": "save",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    }
}
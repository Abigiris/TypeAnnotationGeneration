{
    "Magic-Spoiler-master/setup.py": {},
    "Magic-Spoiler-master/magic_spoiler/__init__.py": {},
    "Magic-Spoiler-master/magic_spoiler/__main__.py": {
        "__get_session": {
            "name": "__get_session",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "json_download": {
            "name": "json_download",
            "location": 45,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "scryfall_url": [
                    "str"
                ]
            }
        },
        "download_scryfall_set": {
            "name": "download_scryfall_set",
            "location": 58,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "set_code": [
                    "str"
                ]
            }
        },
        "build_types": {
            "name": "build_types",
            "location": 92,
            "return": [
                "Tuple[(List[str], str, List[str])]"
            ],
            "arguments": {
                "sf_card": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "scryfall2mtgjson": {
            "name": "scryfall2mtgjson",
            "location": 121,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "scryfall_cards": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "open_header": {
            "name": "open_header",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "card_xml_file": [
                    "IO"
                ]
            }
        },
        "fill_header_sets": {
            "name": "fill_header_sets",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "card_xml_file": [
                    "IO"
                ],
                "set_obj": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "close_header": {
            "name": "close_header",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "card_xml_file": [
                    "IO"
                ]
            }
        },
        "close_xml_file": {
            "name": "close_xml_file",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "card_xml_file": [
                    "IO"
                ]
            }
        },
        "xml_escape": {
            "name": "xml_escape",
            "location": 266,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "write_cards": {
            "name": "write_cards",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "card_xml_file": [],
                "trice_dict": [
                    "List[Dict[(str, Any)]]"
                ],
                "set_code": [
                    "str"
                ]
            }
        },
        "write_spoilers_xml": {
            "name": "write_spoilers_xml",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "trice_dicts": [
                    "Dict[(str, List[Dict[(str, Any)]])]"
                ]
            }
        },
        "write_spoilers_json": {
            "name": "write_spoilers_json",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "trice_dicts": [
                    "Dict[(str, List[Dict[(str, Any)]])]"
                ]
            }
        },
        "compare_json_content": {
            "name": "compare_json_content",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "f1": [
                    "str"
                ],
                "f2": [
                    "str"
                ]
            }
        },
        "compare_xml_content": {
            "name": "compare_xml_content",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "f1": [
                    "str"
                ],
                "f2": [
                    "str"
                ]
            }
        },
        "write_set_xml": {
            "name": "write_set_xml",
            "location": 502,
            "return": [
                "bool"
            ],
            "arguments": {
                "trice_dict": [
                    "List[Dict[(str, Any)]]"
                ],
                "set_obj": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "write_set_json": {
            "name": "write_set_json",
            "location": 539,
            "return": [
                "bool"
            ],
            "arguments": {
                "trice_dict": [
                    "List[Dict[(str, Any)]]"
                ],
                "set_obj": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "get_spoiler_sets": {
            "name": "get_spoiler_sets",
            "location": 571,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {}
        },
        "delete_old_files": {
            "name": "delete_old_files",
            "location": 594,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
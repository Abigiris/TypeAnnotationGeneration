{
    "MavBot-master/constants.py": {},
    "MavBot-master/mavBot.py": {
        "MavBot.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MavBot.on_end": {
            "name": "on_end",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        },
        "MavBot.choose_bot": {
            "name": "choose_bot",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "iteration": []
            }
        },
        "MavBot.choose_strat": {
            "name": "choose_strat",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MavBot.find_opp_id": {
            "name": "find_opp_id",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MavBot.cancel_buildings": {
            "name": "cancel_buildings",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MavBot.check_worker_rush": {
            "name": "check_worker_rush",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MavBot.save_result": {
            "name": "save_result",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        }
    },
    "MavBot-master/run.py": {},
    "MavBot-master/__init__.py": {
        "run_ladder_game": {
            "name": "run_ladder_game",
            "location": 15,
            "return": [],
            "arguments": {
                "bot": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/ability_manager.py": {
        "AbilityManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "AbilityManager.should_use_forcefield": {
            "name": "should_use_forcefield",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/base_manager.py": {
        "BaseManager.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "BaseManager.debug_bases": {
            "name": "debug_bases",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_bases": {
            "name": "get_bases",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "owner": []
            }
        },
        "BaseManager.get_free_workers": {
            "name": "get_free_workers",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.distribute_workers": {
            "name": "distribute_workers",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_next_mining_base": {
            "name": "get_next_mining_base",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.release_worker": {
            "name": "release_worker",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "BaseManager.check_enemy_main": {
            "name": "check_enemy_main",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "Base.update_base": {
            "name": "update_base",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "enemy_main_spoted": []
            }
        },
        "Base.update_mining_fields": {
            "name": "update_mining_fields",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.check_base": {
            "name": "check_base",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.init_owner": {
            "name": "init_owner",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_ally": {
            "name": "is_ally",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_enemy": {
            "name": "is_enemy",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.check_owner": {
            "name": "check_owner",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.value": {
            "name": "value",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.danger": {
            "name": "danger",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.risk": {
            "name": "risk",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.workers": {
            "name": "workers",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.structures": {
            "name": "structures",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.defenses": {
            "name": "defenses",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.resources": {
            "name": "resources",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_safe_to_expand": {
            "name": "is_safe_to_expand",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "Base.distance_to": {
            "name": "distance_to",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "Base.air_distance_to": {
            "name": "air_distance_to",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "Base.speed_mining": {
            "name": "speed_mining",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.get_next_mining_field": {
            "name": "get_next_mining_field",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/boundByTheKhala.py": {
        "BoundByTheKhala.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "bot": [],
                "strat": []
            }
        },
        "BoundByTheKhala.on_end": {
            "name": "on_end",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        },
        "BoundByTheKhala.load_config": {
            "name": "load_config",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "strat": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/build_manager.py": {
        "BuildManager.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "BuildManager.should_build_forge": {
            "name": "should_build_forge",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_cannon": {
            "name": "should_build_cannon",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_pylon": {
            "name": "should_build_pylon",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_gateway": {
            "name": "should_build_gateway",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_cyberneticscore": {
            "name": "should_build_cyberneticscore",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_stargate": {
            "name": "should_build_stargate",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_roboticsfacility": {
            "name": "should_build_roboticsfacility",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_asimilator": {
            "name": "should_build_asimilator",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_fleetbeacon": {
            "name": "should_build_fleetbeacon",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_roboticsbay": {
            "name": "should_build_roboticsbay",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_shield": {
            "name": "should_build_shield",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.build_asimilator": {
            "name": "build_asimilator",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/run.py": {},
    "MavBot-master/bots/boundbythekhala/strategy_manager.py": {
        "StrategyManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "StrategyManager.check_cloacked": {
            "name": "check_cloacked",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/train_manager.py": {
        "TrainManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "TrainManager.set_rally_points": {
            "name": "set_rally_points",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_probe": {
            "name": "should_train_probe",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_voidray": {
            "name": "should_train_voidray",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_zealot": {
            "name": "should_train_zealot",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_stalker": {
            "name": "should_train_stalker",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_sentry": {
            "name": "should_train_sentry",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_colossus": {
            "name": "should_train_colossus",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_mothership": {
            "name": "should_train_mothership",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_phoenix": {
            "name": "should_train_phoenix",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_observer": {
            "name": "should_train_observer",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/unit_manager.py": {
        "UnitManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "UnitManager.checkEnemyUnits": {
            "name": "checkEnemyUnits",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.worker_is_building": {
            "name": "worker_is_building",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "UnitManager.deffensive_position": {
            "name": "deffensive_position",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.offensive_position": {
            "name": "offensive_position",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.is_in_off_squad": {
            "name": "is_in_off_squad",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "UnitManager.units_not_in_squad": {
            "name": "units_not_in_squad",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.set_off_squad": {
            "name": "set_off_squad",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/boundbythekhala/upgrade_manager.py": {
        "UpgradeManager.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "UpgradeManager.research_upgrades": {
            "name": "research_upgrades",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.should_upgrade_w1": {
            "name": "should_upgrade_w1",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.should_upgrade_a1": {
            "name": "should_upgrade_a1",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade_w1": {
            "name": "upgrade_w1",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade_a1": {
            "name": "upgrade_a1",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/ability_manager.py": {
        "AbilityManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "AbilityManager.should_use_forcefield": {
            "name": "should_use_forcefield",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/base_manager.py": {
        "BaseManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "BaseManager.init_bases": {
            "name": "init_bases",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.update_bases": {
            "name": "update_bases",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.debug_bases": {
            "name": "debug_bases",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_base_minerals": {
            "name": "get_base_minerals",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "BaseManager.get_base_vespene": {
            "name": "get_base_vespene",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "BaseManager.get_bases": {
            "name": "get_bases",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "owner": []
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "Base.check_base": {
            "name": "check_base",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.init_owner": {
            "name": "init_owner",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_ally": {
            "name": "is_ally",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_enemy": {
            "name": "is_enemy",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.check_owner": {
            "name": "check_owner",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.value": {
            "name": "value",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.danger": {
            "name": "danger",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.risk": {
            "name": "risk",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.workers": {
            "name": "workers",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.structures": {
            "name": "structures",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.defenses": {
            "name": "defenses",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.resources": {
            "name": "resources",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.is_safe_to_expand": {
            "name": "is_safe_to_expand",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        }
    },
    "MavBot-master/bots/flyingball/build_manager.py": {
        "BuildManager.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "BuildManager.should_build_forge": {
            "name": "should_build_forge",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_cannon": {
            "name": "should_build_cannon",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_pylon": {
            "name": "should_build_pylon",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_gateway": {
            "name": "should_build_gateway",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_cyberneticscore": {
            "name": "should_build_cyberneticscore",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_stargate": {
            "name": "should_build_stargate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_roboticsfacility": {
            "name": "should_build_roboticsfacility",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_asimilator": {
            "name": "should_build_asimilator",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_fleetbeacon": {
            "name": "should_build_fleetbeacon",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_roboticsbay": {
            "name": "should_build_roboticsbay",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.should_build_shield": {
            "name": "should_build_shield",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildManager.build_asimilator": {
            "name": "build_asimilator",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/constants.py": {},
    "MavBot-master/bots/flyingball/debug_manager.py": {
        "DebugManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "DebugManager.draw_rect": {
            "name": "draw_rect",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "DebugManager.height_offset": {
            "name": "height_offset",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.debug_score": {
            "name": "debug_score",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.debug_units": {
            "name": "debug_units",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.debug_deffensive_position": {
            "name": "debug_deffensive_position",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.debug_offesinsive_group": {
            "name": "debug_offesinsive_group",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.debug_deffense_area": {
            "name": "debug_deffense_area",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugManager.turn3d": {
            "name": "turn3d",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "p2": []
            }
        },
        "DebugManager.getHeight": {
            "name": "getHeight",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        }
    },
    "MavBot-master/bots/flyingball/flyingBall.py": {
        "FlyingBall.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "bot": [],
                "strat": []
            }
        },
        "FlyingBall.on_end": {
            "name": "on_end",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        },
        "FlyingBall.load_config": {
            "name": "load_config",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "strat": []
            }
        }
    },
    "MavBot-master/bots/flyingball/strategy_manager.py": {
        "StrategyManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "StrategyManager.prepare_strat": {
            "name": "prepare_strat",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.doing_strat": {
            "name": "doing_strat",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.do_worker_rush": {
            "name": "do_worker_rush",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.check_cloacked": {
            "name": "check_cloacked",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.enemy_ramp": {
            "name": "enemy_ramp",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.enemy_natural": {
            "name": "enemy_natural",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.get_intersections": {
            "name": "get_intersections",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "r": [],
                "map_center": []
            }
        },
        "StrategyManager.enemy_natural.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 142,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "MavBot-master/bots/flyingball/train_manager.py": {
        "TrainManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "TrainManager.should_train_probe": {
            "name": "should_train_probe",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_voidray": {
            "name": "should_train_voidray",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_zealot": {
            "name": "should_train_zealot",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_stalker": {
            "name": "should_train_stalker",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_sentry": {
            "name": "should_train_sentry",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_colossus": {
            "name": "should_train_colossus",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_mothership": {
            "name": "should_train_mothership",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_phoenix": {
            "name": "should_train_phoenix",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainManager.should_train_observer": {
            "name": "should_train_observer",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/unit_manager.py": {
        "UnitManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "UnitManager.checkEnemyUnits": {
            "name": "checkEnemyUnits",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.deffensive_position": {
            "name": "deffensive_position",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.offensive_position": {
            "name": "offensive_position",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.is_in_off_squad": {
            "name": "is_in_off_squad",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "UnitManager.units_not_in_squad": {
            "name": "units_not_in_squad",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.set_off_squad": {
            "name": "set_off_squad",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitManager.closest_advantaged_terrain": {
            "name": "closest_advantaged_terrain",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "ally_unit": [],
                "enemy_unit": [],
                "min_terrain_advantage": [],
                "advantage_type": [],
                "walk_throug_enemie": [],
                "max_distance": []
            }
        },
        "UnitManager.load_unit": {
            "name": "load_unit",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "ProUnit.__init__": {
            "name": "__init__",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/upgrade_manager.py": {
        "UpgradeManager.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "UpgradeManager.research_upgrades": {
            "name": "research_upgrades",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.should_upgrade_w1": {
            "name": "should_upgrade_w1",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.should_upgrade_a1": {
            "name": "should_upgrade_a1",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade_w1": {
            "name": "upgrade_w1",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade_a1": {
            "name": "upgrade_a1",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/flyingball/worker_manager.py": {
        "WorkerManager.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        }
    },
    "MavBot-master/bots/prismbeams/prismBeams.py": {
        "PrismBeams.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        },
        "PrismBeams.cancel_prismatic_alignment": {
            "name": "cancel_prismatic_alignment",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "vr": []
            }
        },
        "PrismBeams.train_toops": {
            "name": "train_toops",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrismBeams.manage_shieldbatteries": {
            "name": "manage_shieldbatteries",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrismBeams.do_worker_rush": {
            "name": "do_worker_rush",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/bots/prismbeams/strategy_manager.py": {
        "StrategyManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "StrategyManager.check_enemy_main": {
            "name": "check_enemy_main",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.update_bases": {
            "name": "update_bases",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.checkEnemyUnits": {
            "name": "checkEnemyUnits",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.get_safe_route": {
            "name": "get_safe_route",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "startx": [],
                "starty": [],
                "endx": [],
                "endy": []
            }
        },
        "StrategyManager.turrets_map": {
            "name": "turrets_map",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.empty_map": {
            "name": "empty_map",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategyManager.add_enemies": {
            "name": "add_enemies",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "map_data": []
            }
        },
        "StrategyManager.choose_proxy_pylon_position.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 101,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "MavBot-master/bots/prismbeams/worker_manager.py": {
        "WorkerManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "WorkerManager.attack_other_workers": {
            "name": "attack_other_workers",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.speed_mining": {
            "name": "speed_mining",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.get_free_workers": {
            "name": "get_free_workers",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.distribute_workers": {
            "name": "distribute_workers",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.get_next_mining_field": {
            "name": "get_next_mining_field",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.release_worker": {
            "name": "release_worker",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "worker": []
            }
        }
    },
    "MavBot-master/bots/proberush/WorkerRushBot.py": {
        "WorkerRushBot.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        },
        "WorkerRushBot.on_end": {
            "name": "on_end",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        }
    },
    "MavBot-master/pathfinding/setup.py": {},
    "MavBot-master/pathfinding/__init__.py": {},
    "MavBot-master/pathfinding/core/diagonal_movement.py": {},
    "MavBot-master/pathfinding/core/grid.py": {
        "build_nodes": {
            "name": "build_nodes",
            "location": 11,
            "return": [],
            "arguments": {
                "width": [],
                "height": [],
                "matrix": [],
                "inverse": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "matrix": [],
                "inverse": []
            }
        },
        "Grid.set_passable_left_right_border": {
            "name": "set_passable_left_right_border",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grid.set_passable_up_down_border": {
            "name": "set_passable_up_down_border",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grid.node": {
            "name": "node",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Grid.inside": {
            "name": "inside",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Grid.walkable": {
            "name": "walkable",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Grid.neighbors": {
            "name": "neighbors",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "diagonal_movement": []
            }
        },
        "Grid.cleanup": {
            "name": "cleanup",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grid.grid_str": {
            "name": "grid_str",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "start": [],
                "end": [],
                "border": [],
                "start_chr": [],
                "end_chr": [],
                "path_chr": [],
                "empty_chr": [],
                "block_chr": [],
                "show_weight": []
            }
        }
    },
    "MavBot-master/pathfinding/core/heuristic.py": {
        "null": {
            "name": "null",
            "location": 6,
            "return": [],
            "arguments": {
                "dx": [],
                "dy": []
            }
        },
        "manhattan": {
            "name": "manhattan",
            "location": 16,
            "return": [],
            "arguments": {
                "dx": [],
                "dy": []
            }
        },
        "euclidean": {
            "name": "euclidean",
            "location": 21,
            "return": [],
            "arguments": {
                "dx": [],
                "dy": []
            }
        },
        "chebyshev": {
            "name": "chebyshev",
            "location": 26,
            "return": [],
            "arguments": {
                "dx": [],
                "dy": []
            }
        },
        "octile": {
            "name": "octile",
            "location": 31,
            "return": [],
            "arguments": {
                "dx": [],
                "dy": []
            }
        }
    },
    "MavBot-master/pathfinding/core/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "walkable": [],
                "weight": []
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.cleanup": {
            "name": "cleanup",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/pathfinding/core/util.py": {
        "backtrace": {
            "name": "backtrace",
            "location": 10,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "bi_backtrace": {
            "name": "bi_backtrace",
            "location": 23,
            "return": [],
            "arguments": {
                "node_a": [],
                "node_b": []
            }
        },
        "raytrace": {
            "name": "raytrace",
            "location": 34,
            "return": [],
            "arguments": {
                "coords_a": [],
                "coords_b": []
            }
        },
        "bresenham": {
            "name": "bresenham",
            "location": 67,
            "return": [],
            "arguments": {
                "coords_a": [],
                "coords_b": []
            }
        },
        "expand_path": {
            "name": "expand_path",
            "location": 97,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "smoothen_path": {
            "name": "smoothen_path",
            "location": 111,
            "return": [],
            "arguments": {
                "grid": [],
                "path": [],
                "use_raytrace": []
            }
        }
    },
    "MavBot-master/pathfinding/core/__init__.py": {},
    "MavBot-master/pathfinding/finder/a_star.py": {
        "AStarFinder.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": []
            }
        },
        "AStarFinder.check_neighbors": {
            "name": "check_neighbors",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": [],
                "open_list": [],
                "open_value": [],
                "backtrace_by": []
            }
        },
        "AStarFinder.find_path": {
            "name": "find_path",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/best_first.py": {
        "BestFirst.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": []
            }
        },
        "BestFirst.apply_heuristic": {
            "name": "apply_heuristic",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "node_a": [],
                "node_b": [],
                "heuristic": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/bi_a_star.py": {
        "BiAStarFinder.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": []
            }
        },
        "BiAStarFinder.find_path": {
            "name": "find_path",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/breadth_first.py": {
        "BreadthFirstFinder.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": []
            }
        },
        "BreadthFirstFinder.check_neighbors": {
            "name": "check_neighbors",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": [],
                "open_list": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/dijkstra.py": {
        "DijkstraFinder.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/finder.py": {
        "ExecutionTimeException.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ExecutionRunsException.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Finder.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "weighted": [],
                "time_limit": [],
                "max_runs": []
            }
        },
        "Finder.calc_cost": {
            "name": "calc_cost",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "node_a": [],
                "node_b": []
            }
        },
        "Finder.apply_heuristic": {
            "name": "apply_heuristic",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "node_a": [],
                "node_b": [],
                "heuristic": []
            }
        },
        "Finder.find_neighbors": {
            "name": "find_neighbors",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "grid": [],
                "node": [],
                "diagonal_movement": []
            }
        },
        "Finder.keep_running": {
            "name": "keep_running",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Finder.process_node": {
            "name": "process_node",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "parent": [],
                "end": [],
                "open_list": [],
                "open_value": []
            }
        },
        "Finder.check_neighbors": {
            "name": "check_neighbors",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": [],
                "open_list": [],
                "open_value": [],
                "backtrace_by": []
            }
        },
        "Finder.find_path": {
            "name": "find_path",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/ida_star.py": {
        "IDAStarFinder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "heuristic": [],
                "weight": [],
                "diagonal_movement": [],
                "time_limit": [],
                "max_runs": [],
                "track_recursion": []
            }
        },
        "IDAStarFinder.search": {
            "name": "search",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "g": [],
                "cutoff": [],
                "path": [],
                "depth": [],
                "end": [],
                "grid": []
            }
        },
        "IDAStarFinder.find_path": {
            "name": "find_path",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/msp.py": {
        "MinimumSpanningTree.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinimumSpanningTree.tree": {
            "name": "tree",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "grid": [],
                "start": []
            }
        },
        "MinimumSpanningTree.itertree": {
            "name": "itertree",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "grid": [],
                "start": []
            }
        },
        "MinimumSpanningTree.find_path": {
            "name": "find_path",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "grid": []
            }
        }
    },
    "MavBot-master/pathfinding/finder/__init__.py": {},
    "MavBot-master/sc2/action.py": {
        "combine_actions": {
            "name": "combine_actions",
            "location": 16,
            "return": [],
            "arguments": {
                "action_iter": []
            }
        }
    },
    "MavBot-master/sc2/bot_ai.py": {
        "BotAI._initialize_variables": {
            "name": "_initialize_variables",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.time": {
            "name": "time",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.time_formatted": {
            "name": "time_formatted",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.step_time": {
            "name": "step_time",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.game_info": {
            "name": "game_info",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.game_data": {
            "name": "game_data",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.client": {
            "name": "client",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.larva_count": {
            "name": "larva_count",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.alert": {
            "name": "alert",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "alert_code": []
            }
        },
        "BotAI.start_location": {
            "name": "start_location",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.enemy_start_locations": {
            "name": "enemy_start_locations",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.main_base_ramp": {
            "name": "main_base_ramp",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.expansion_locations_list": {
            "name": "expansion_locations_list",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.expansion_locations_dict": {
            "name": "expansion_locations_dict",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.expansion_locations": {
            "name": "expansion_locations",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI._find_expansion_locations": {
            "name": "_find_expansion_locations",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.units_created": {
            "name": "units_created",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI._correct_zerg_supply": {
            "name": "_correct_zerg_supply",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.owned_expansions": {
            "name": "owned_expansions",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.calculate_supply_cost": {
            "name": "calculate_supply_cost",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI.can_feed": {
            "name": "can_feed",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI.calculate_unit_value": {
            "name": "calculate_unit_value",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI.calculate_cost": {
            "name": "calculate_cost",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": []
            }
        },
        "BotAI.can_afford": {
            "name": "can_afford",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": [],
                "check_supply_cost": []
            }
        },
        "BotAI.select_build_worker": {
            "name": "select_build_worker",
            "location": 789,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "force": []
            }
        },
        "BotAI.already_pending_upgrade": {
            "name": "already_pending_upgrade",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "upgrade_type": []
            }
        },
        "BotAI._abilities_all_units": {
            "name": "_abilities_all_units",
            "location": 958,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.structure_type_build_progress": {
            "name": "structure_type_build_progress",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "structure_type": []
            }
        },
        "BotAI.tech_requirement_progress": {
            "name": "tech_requirement_progress",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": [],
                "structure_type": []
            }
        },
        "BotAI.already_pending": {
            "name": "already_pending",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI._worker_orders": {
            "name": "_worker_orders",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.worker_en_route_to_build": {
            "name": "worker_en_route_to_build",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI.structures_without_construction_SCVs": {
            "name": "structures_without_construction_SCVs",
            "location": 1120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.train": {
            "name": "train",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": [],
                "amount": [],
                "closest_to": [],
                "train_only_idle_buildings": []
            }
        },
        "BotAI.research": {
            "name": "research",
            "location": 1330,
            "return": [],
            "arguments": {
                "self": [],
                "upgrade_type": []
            }
        },
        "BotAI.do": {
            "name": "do",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "subtract_cost": [],
                "subtract_supply": [],
                "can_afford_check": [],
                "ignore_warning": []
            }
        },
        "BotAI.prevent_double_actions": {
            "name": "prevent_double_actions",
            "location": 1509,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "BotAI.in_map_bounds": {
            "name": "in_map_bounds",
            "location": 1546,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.get_terrain_height": {
            "name": "get_terrain_height",
            "location": 1556,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.get_terrain_z_height": {
            "name": "get_terrain_z_height",
            "location": 1565,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.in_placement_grid": {
            "name": "in_placement_grid",
            "location": 1573,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.in_pathing_grid": {
            "name": "in_pathing_grid",
            "location": 1583,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.is_visible": {
            "name": "is_visible",
            "location": 1591,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.has_creep": {
            "name": "has_creep",
            "location": 1600,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI._prepare_start": {
            "name": "_prepare_start",
            "location": 1608,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "player_id": [],
                "game_info": [],
                "game_data": [],
                "realtime": [],
                "base_build": []
            }
        },
        "BotAI._prepare_first_step": {
            "name": "_prepare_first_step",
            "location": 1632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI._prepare_step": {
            "name": "_prepare_step",
            "location": 1641,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "proto_game_info": []
            }
        },
        "BotAI._prepare_units": {
            "name": "_prepare_units",
            "location": 1684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.get_next_expansion.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 463,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "BotAI.owned_expansions.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 592,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "MavBot-master/sc2/cache.py": {
        "property_cache_forever": {
            "name": "property_cache_forever",
            "location": 4,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "property_cache_once_per_frame": {
            "name": "property_cache_once_per_frame",
            "location": 17,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "property_cache_once_per_frame_no_copy": {
            "name": "property_cache_once_per_frame_no_copy",
            "location": 40,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "property_immutable_cache": {
            "name": "property_immutable_cache",
            "location": 62,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "property_mutable_cache": {
            "name": "property_mutable_cache",
            "location": 73,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "property_cache_forever.inner": {
            "name": "inner",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "property_cache_once_per_frame.inner": {
            "name": "inner",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "property_cache_once_per_frame_no_copy.inner": {
            "name": "inner",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "property_immutable_cache.inner": {
            "name": "inner",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "property_mutable_cache.inner": {
            "name": "inner",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "ws": []
            }
        },
        "Client.in_game": {
            "name": "in_game",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.debug_text_simple": {
            "name": "debug_text_simple",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Client.debug_text_screen": {
            "name": "debug_text_screen",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "pos": [],
                "color": [],
                "size": []
            }
        },
        "Client.debug_text_2d": {
            "name": "debug_text_2d",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "pos": [],
                "color": [],
                "size": []
            }
        },
        "Client.debug_text_world": {
            "name": "debug_text_world",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "pos": [],
                "color": [],
                "size": []
            }
        },
        "Client.debug_text_3d": {
            "name": "debug_text_3d",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "pos": [],
                "color": [],
                "size": []
            }
        },
        "Client.debug_line_out": {
            "name": "debug_line_out",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "p0": [],
                "p1": [],
                "color": []
            }
        },
        "Client.debug_box_out": {
            "name": "debug_box_out",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "p_min": [],
                "p_max": [],
                "color": []
            }
        },
        "Client.debug_box2_out": {
            "name": "debug_box2_out",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "half_vertex_length": [],
                "color": []
            }
        },
        "Client.debug_sphere_out": {
            "name": "debug_sphere_out",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "r": [],
                "color": []
            }
        },
        "DrawItem.to_debug_color": {
            "name": "to_debug_color",
            "location": 728,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "DrawItemScreenText.__init__": {
            "name": "__init__",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "color": [],
                "text": [],
                "font_size": []
            }
        },
        "DrawItemScreenText.to_proto": {
            "name": "to_proto",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemScreenText.__hash__": {
            "name": "__hash__",
            "location": 764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemWorldText.__init__": {
            "name": "__init__",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "color": [],
                "text": [],
                "font_size": []
            }
        },
        "DrawItemWorldText.to_proto": {
            "name": "to_proto",
            "location": 775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemWorldText.__hash__": {
            "name": "__hash__",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemLine.__init__": {
            "name": "__init__",
            "location": 789,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "end_point": [],
                "color": []
            }
        },
        "DrawItemLine.to_proto": {
            "name": "to_proto",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemLine.__hash__": {
            "name": "__hash__",
            "location": 800,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemBox.__init__": {
            "name": "__init__",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "end_point": [],
                "color": []
            }
        },
        "DrawItemBox.to_proto": {
            "name": "to_proto",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemBox.__hash__": {
            "name": "__hash__",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemSphere.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "radius": [],
                "color": []
            }
        },
        "DrawItemSphere.to_proto": {
            "name": "to_proto",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DrawItemSphere.__hash__": {
            "name": "__hash__",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/constants.py": {
        "return_NOTAUNIT": {
            "name": "return_NOTAUNIT",
            "location": 365,
            "return": [],
            "arguments": {}
        }
    },
    "MavBot-master/sc2/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "ws": [],
                "process": []
            }
        },
        "Controller.running": {
            "name": "running",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/data.py": {},
    "MavBot-master/sc2/distances.py": {
        "DistanceCalculation.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._units_count": {
            "name": "_units_count",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._pdist": {
            "name": "_pdist",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._cdist": {
            "name": "_cdist",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._calculate_distances_method1": {
            "name": "_calculate_distances_method1",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._calculate_distances_method2": {
            "name": "_calculate_distances_method2",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation._calculate_distances_method3": {
            "name": "_calculate_distances_method3",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistanceCalculation.square_to_condensed": {
            "name": "square_to_condensed",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "DistanceCalculation.convert_tuple_to_numpy_array": {
            "name": "convert_tuple_to_numpy_array",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "DistanceCalculation.distance_math_hypot": {
            "name": "distance_math_hypot",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "DistanceCalculation.distance_math_hypot_squared": {
            "name": "distance_math_hypot_squared",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "DistanceCalculation._distance_squared_unit_to_unit_method0": {
            "name": "_distance_squared_unit_to_unit_method0",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "unit1": [],
                "unit2": []
            }
        },
        "DistanceCalculation._distance_squared_unit_to_unit_method1": {
            "name": "_distance_squared_unit_to_unit_method1",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "unit1": [],
                "unit2": []
            }
        },
        "DistanceCalculation._distance_squared_unit_to_unit_method2": {
            "name": "_distance_squared_unit_to_unit_method2",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "unit1": [],
                "unit2": []
            }
        },
        "DistanceCalculation._distance_pos_to_pos": {
            "name": "_distance_pos_to_pos",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "pos1": [],
                "pos2": []
            }
        },
        "DistanceCalculation._distance_units_to_pos": {
            "name": "_distance_units_to_pos",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "pos": []
            }
        },
        "DistanceCalculation._distance_unit_to_points": {
            "name": "_distance_unit_to_points",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "points": []
            }
        },
        "DistanceCalculation._distances_override_functions": {
            "name": "_distances_override_functions",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        }
    },
    "MavBot-master/sc2/expiring_dict.py": {
        "ExpiringDict.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "bot": [],
                "max_age_frames": []
            }
        },
        "ExpiringDict.frame": {
            "name": "frame",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.__contains__": {
            "name": "__contains__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ExpiringDict.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "with_age": []
            }
        },
        "ExpiringDict.__setitem__": {
            "name": "__setitem__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ExpiringDict.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.__len__": {
            "name": "__len__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.pop": {
            "name": "pop",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": [],
                "with_age": []
            }
        },
        "ExpiringDict.get": {
            "name": "get",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": [],
                "with_age": []
            }
        },
        "ExpiringDict.update": {
            "name": "update",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other_dict": []
            }
        },
        "ExpiringDict.items": {
            "name": "items",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.keys": {
            "name": "keys",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpiringDict.values": {
            "name": "values",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/game_data.py": {
        "GameData.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GameData.calculate_ability_cost": {
            "name": "calculate_ability_cost",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "ability": []
            }
        },
        "AbilityData.id_exists": {
            "name": "id_exists",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "ability_id": []
            }
        },
        "AbilityData.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "game_data": [],
                "proto": []
            }
        },
        "AbilityData.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.id": {
            "name": "id",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.exact_id": {
            "name": "exact_id",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.link_name": {
            "name": "link_name",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.button_name": {
            "name": "button_name",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.friendly_name": {
            "name": "friendly_name",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.is_free_morph": {
            "name": "is_free_morph",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.cost": {
            "name": "cost",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "game_data": [],
                "proto": []
            }
        },
        "UnitTypeData.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.id": {
            "name": "id",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.name": {
            "name": "name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.creation_ability": {
            "name": "creation_ability",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.footprint_radius": {
            "name": "footprint_radius",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.attributes": {
            "name": "attributes",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.has_attribute": {
            "name": "has_attribute",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "UnitTypeData.has_minerals": {
            "name": "has_minerals",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.has_vespene": {
            "name": "has_vespene",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cargo_size": {
            "name": "cargo_size",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.tech_requirement": {
            "name": "tech_requirement",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.tech_alias": {
            "name": "tech_alias",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.unit_alias": {
            "name": "unit_alias",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.race": {
            "name": "race",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cost": {
            "name": "cost",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cost_zerg_corrected": {
            "name": "cost_zerg_corrected",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.morph_cost": {
            "name": "morph_cost",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "game_data": [],
                "proto": []
            }
        },
        "UpgradeData.__repr__": {
            "name": "__repr__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.name": {
            "name": "name",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.research_ability": {
            "name": "research_ability",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.cost": {
            "name": "cost",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cost.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "minerals": [],
                "vespene": [],
                "time": []
            }
        },
        "Cost.__repr__": {
            "name": "__repr__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cost.__eq__": {
            "name": "__eq__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cost.__ne__": {
            "name": "__ne__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cost.__bool__": {
            "name": "__bool__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cost.__add__": {
            "name": "__add__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cost.__sub__": {
            "name": "__sub__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cost.__mul__": {
            "name": "__mul__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cost.__rmul__": {
            "name": "__rmul__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "MavBot-master/sc2/game_info.py": {
        "Ramp.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "points": [],
                "game_info": []
            }
        },
        "Ramp._height_map": {
            "name": "_height_map",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp._placement_grid": {
            "name": "_placement_grid",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.size": {
            "name": "size",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.height_at": {
            "name": "height_at",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Ramp.points": {
            "name": "points",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.upper": {
            "name": "upper",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.upper2_for_ramp_wall": {
            "name": "upper2_for_ramp_wall",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.top_center": {
            "name": "top_center",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.lower": {
            "name": "lower",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.bottom_center": {
            "name": "bottom_center",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_in_middle": {
            "name": "barracks_in_middle",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.depot_in_middle": {
            "name": "depot_in_middle",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.corner_depots": {
            "name": "corner_depots",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_can_fit_addon": {
            "name": "barracks_can_fit_addon",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_correct_placement": {
            "name": "barracks_correct_placement",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.protoss_wall_pylon": {
            "name": "protoss_wall_pylon",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.protoss_wall_buildings": {
            "name": "protoss_wall_buildings",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.protoss_wall_warpin": {
            "name": "protoss_wall_warpin",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInfo.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "GameInfo._find_ramps_and_vision_blockers": {
            "name": "_find_ramps_and_vision_blockers",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInfo._find_groups": {
            "name": "_find_groups",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "points": [],
                "minimum_points_per_group": []
            }
        },
        "GameInfo._find_ramps_and_vision_blockers.equal_height_around": {
            "name": "equal_height_around",
            "location": 252,
            "return": [],
            "arguments": {
                "tile": []
            }
        },
        "GameInfo._find_groups.paint": {
            "name": "paint",
            "location": 283,
            "return": [],
            "arguments": {
                "pt": []
            }
        }
    },
    "MavBot-master/sc2/game_state.py": {
        "Blip.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Blip.is_blip": {
            "name": "is_blip",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_snapshot": {
            "name": "is_snapshot",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_visible": {
            "name": "is_visible",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.alliance": {
            "name": "alliance",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_mine": {
            "name": "is_mine",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_enemy": {
            "name": "is_enemy",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.position": {
            "name": "position",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.position3d": {
            "name": "position3d",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Common.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Common.__getattr__": {
            "name": "__getattr__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "EffectData.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "proto": [],
                "fake": []
            }
        },
        "EffectData.id": {
            "name": "id",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.positions": {
            "name": "positions",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.alliance": {
            "name": "alliance",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.is_mine": {
            "name": "is_mine",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.is_enemy": {
            "name": "is_enemy",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.owner": {
            "name": "owner",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.radius": {
            "name": "radius",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EffectData.__repr__": {
            "name": "__repr__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityLookupTemplateClass.exact_id": {
            "name": "exact_id",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityLookupTemplateClass.generic_id": {
            "name": "generic_id",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "response_observation": [],
                "previous_observation": []
            }
        },
        "GameState.dead_units": {
            "name": "dead_units",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.chat": {
            "name": "chat",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.alerts": {
            "name": "alerts",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.actions": {
            "name": "actions",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.actions_unit_commands": {
            "name": "actions_unit_commands",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.actions_toggle_autocast": {
            "name": "actions_toggle_autocast",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.action_errors": {
            "name": "action_errors",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/generate_ids.py": {
        "IdGenerator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "game_data": [],
                "game_version": [],
                "verbose": []
            }
        },
        "IdGenerator.make_key": {
            "name": "make_key",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "IdGenerator.parse_data": {
            "name": "parse_data",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "IdGenerator.parse_simple": {
            "name": "parse_simple",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "d": [],
                "data": []
            }
        },
        "IdGenerator.generate_python_code": {
            "name": "generate_python_code",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "enums": []
            }
        },
        "IdGenerator.update_ids_from_stableid_json": {
            "name": "update_ids_from_stableid_json",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdGenerator.reimport_ids": {
            "name": "reimport_ids",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdGenerator.update_game_data": {
            "name": "update_game_data",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/main.py": {
        "_host_game_iter": {
            "name": "_host_game_iter",
            "location": 534,
            "return": [],
            "arguments": {}
        },
        "get_replay_version": {
            "name": "get_replay_version",
            "location": 584,
            "return": [],
            "arguments": {
                "replay_path": []
            }
        },
        "run_game": {
            "name": "run_game",
            "location": 595,
            "return": [],
            "arguments": {
                "map_settings": [],
                "players": []
            }
        },
        "run_replay": {
            "name": "run_replay",
            "location": 612,
            "return": [],
            "arguments": {
                "ai": [],
                "replay_path": [],
                "realtime": [],
                "observed_id": []
            }
        },
        "process_results": {
            "name": "process_results",
            "location": 712,
            "return": [],
            "arguments": {
                "players": [],
                "async_results": []
            }
        },
        "run_multiple_games": {
            "name": "run_multiple_games",
            "location": 799,
            "return": [],
            "arguments": {
                "matches": []
            }
        },
        "GameMatch.__post_init__": {
            "name": "__post_init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameMatch.needed_sc2_count": {
            "name": "needed_sc2_count",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameMatch.host_game_kwargs": {
            "name": "host_game_kwargs",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameMatch.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlidingTimeWindow.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "SlidingTimeWindow.push": {
            "name": "push",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SlidingTimeWindow.clear": {
            "name": "clear",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlidingTimeWindow.sum": {
            "name": "sum",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlidingTimeWindow.available": {
            "name": "available",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlidingTimeWindow.available_fmt": {
            "name": "available_fmt",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/maps.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Map.name": {
            "name": "name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.data": {
            "name": "data",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.matches": {
            "name": "matches",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Map.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/observer_ai.py": {
        "ObserverAI._initialize_variables": {
            "name": "_initialize_variables",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.time": {
            "name": "time",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.time_formatted": {
            "name": "time_formatted",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.game_info": {
            "name": "game_info",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.game_data": {
            "name": "game_data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.client": {
            "name": "client",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.alert": {
            "name": "alert",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "alert_code": []
            }
        },
        "ObserverAI.start_location": {
            "name": "start_location",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI.enemy_start_locations": {
            "name": "enemy_start_locations",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI._abilities_all_units": {
            "name": "_abilities_all_units",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI._prepare_start": {
            "name": "_prepare_start",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "player_id": [],
                "game_info": [],
                "game_data": [],
                "realtime": [],
                "base_build": []
            }
        },
        "ObserverAI._prepare_first_step": {
            "name": "_prepare_first_step",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObserverAI._prepare_step": {
            "name": "_prepare_step",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "proto_game_info": []
            }
        },
        "ObserverAI._prepare_units": {
            "name": "_prepare_units",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/paths.py": {
        "platform_detect": {
            "name": "platform_detect",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "get_home": {
            "name": "get_home",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "get_user_sc2_install": {
            "name": "get_user_sc2_install",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "get_env": {
            "name": "get_env",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "get_runner_args": {
            "name": "get_runner_args",
            "location": 86,
            "return": [],
            "arguments": {
                "cwd": []
            }
        },
        "latest_executeble": {
            "name": "latest_executeble",
            "location": 101,
            "return": [],
            "arguments": {
                "versions_dir": [],
                "base_build": []
            }
        },
        "_MetaPaths.__setup": {
            "name": "__setup",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MetaPaths.__getattr__": {
            "name": "__getattr__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "MavBot-master/sc2/pixel_map.py": {
        "PixelMap.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "proto": [],
                "in_bits": [],
                "mirrored": []
            }
        },
        "PixelMap.width": {
            "name": "width",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.height": {
            "name": "height",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.bits_per_pixel": {
            "name": "bits_per_pixel",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.bytes_per_pixel": {
            "name": "bytes_per_pixel",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "PixelMap.__setitem__": {
            "name": "__setitem__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "value": []
            }
        },
        "PixelMap.is_set": {
            "name": "is_set",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "PixelMap.is_empty": {
            "name": "is_empty",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "PixelMap.copy": {
            "name": "copy",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.flood_fill": {
            "name": "flood_fill",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "start_point": [],
                "pred": []
            }
        },
        "PixelMap.flood_fill_all": {
            "name": "flood_fill_all",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "pred": []
            }
        },
        "PixelMap.print": {
            "name": "print",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "wide": []
            }
        },
        "PixelMap.save_image": {
            "name": "save_image",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "PixelMap.plot": {
            "name": "plot",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/player.py": {
        "AbstractPlayer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "p_type": [],
                "race": [],
                "name": [],
                "difficulty": [],
                "ai_build": [],
                "fullscreen": []
            }
        },
        "AbstractPlayer.needs_sc2": {
            "name": "needs_sc2",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Human.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "race": [],
                "name": [],
                "fullscreen": []
            }
        },
        "Human.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "race": [],
                "ai": [],
                "name": [],
                "fullscreen": []
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Computer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "race": [],
                "difficulty": [],
                "ai_build": []
            }
        },
        "Computer.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Observer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Observer.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.from_proto": {
            "name": "from_proto",
            "location": 87,
            "return": [],
            "arguments": {
                "cls": [],
                "proto": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "player_id": [],
                "p_type": [],
                "requested_race": [],
                "difficulty": [],
                "actual_race": [],
                "name": [],
                "ai_build": []
            }
        },
        "BotProcess.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "launch_list": [],
                "race": [],
                "name": [],
                "sc2port_arg": [],
                "hostaddress_arg": [],
                "match_arg": [],
                "realtime_arg": [],
                "other_args": [],
                "stdout": []
            }
        },
        "BotProcess.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotProcess.cmd_line": {
            "name": "cmd_line",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "sc2port": [],
                "matchport": [],
                "hostaddress": [],
                "realtime": []
            }
        }
    },
    "MavBot-master/sc2/portconfig.py": {
        "Portconfig.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "guests": [],
                "server_ports": [],
                "player_ports": []
            }
        },
        "Portconfig.clean": {
            "name": "clean",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.as_json": {
            "name": "as_json",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.contiguous_ports": {
            "name": "contiguous_ports",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "guests": [],
                "attempts": []
            }
        },
        "Portconfig.from_json": {
            "name": "from_json",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "json_data": []
            }
        }
    },
    "MavBot-master/sc2/position.py": {
        "_sign": {
            "name": "_sign",
            "location": 17,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "Pointlike.position": {
            "name": "position",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pointlike.distance_to": {
            "name": "distance_to",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Pointlike.distance_to_point2": {
            "name": "distance_to_point2",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike._distance_squared": {
            "name": "_distance_squared",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "p2": []
            }
        },
        "Pointlike.is_closer_than": {
            "name": "is_closer_than",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "p": []
            }
        },
        "Pointlike.is_further_than": {
            "name": "is_further_than",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "p": []
            }
        },
        "Pointlike.sort_by_distance": {
            "name": "sort_by_distance",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.closest": {
            "name": "closest",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.distance_to_closest": {
            "name": "distance_to_closest",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.furthest": {
            "name": "furthest",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.distance_to_furthest": {
            "name": "distance_to_furthest",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.offset": {
            "name": "offset",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike.unit_axes_towards": {
            "name": "unit_axes_towards",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike.towards": {
            "name": "towards",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "distance": [],
                "limit": []
            }
        },
        "Pointlike.__eq__": {
            "name": "__eq__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pointlike.__hash__": {
            "name": "__hash__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.from_proto": {
            "name": "from_proto",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Point2.as_Point2D": {
            "name": "as_Point2D",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.as_PointI": {
            "name": "as_PointI",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.rounded": {
            "name": "rounded",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.length": {
            "name": "length",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.normalized": {
            "name": "normalized",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.x": {
            "name": "x",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.y": {
            "name": "y",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.to2": {
            "name": "to2",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.to3": {
            "name": "to3",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.offset": {
            "name": "offset",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "off": []
            }
        },
        "Point2.random_on_distance": {
            "name": "random_on_distance",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Point2.towards_with_random_angle": {
            "name": "towards_with_random_angle",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "distance": [],
                "max_difference": []
            }
        },
        "Point2.circle_intersection": {
            "name": "circle_intersection",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "r": []
            }
        },
        "Point2.neighbors4": {
            "name": "neighbors4",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.neighbors8": {
            "name": "neighbors8",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.negative_offset": {
            "name": "negative_offset",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__add__": {
            "name": "__add__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__sub__": {
            "name": "__sub__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__neg__": {
            "name": "__neg__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.__abs__": {
            "name": "__abs__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.__bool__": {
            "name": "__bool__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.__mul__": {
            "name": "__mul__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__rmul__": {
            "name": "__rmul__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__truediv__": {
            "name": "__truediv__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.is_same_as": {
            "name": "is_same_as",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "dist": []
            }
        },
        "Point2.direction_vector": {
            "name": "direction_vector",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.manhattan_distance": {
            "name": "manhattan_distance",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.center": {
            "name": "center",
            "location": 321,
            "return": [],
            "arguments": {
                "units_or_points": []
            }
        },
        "Point3.from_proto": {
            "name": "from_proto",
            "location": 333,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Point3.as_Point": {
            "name": "as_Point",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point3.rounded": {
            "name": "rounded",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point3.z": {
            "name": "z",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point3.to3": {
            "name": "to3",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point3.__add__": {
            "name": "__add__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Size.width": {
            "name": "width",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.height": {
            "name": "height",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.from_proto": {
            "name": "from_proto",
            "location": 373,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Rect.x": {
            "name": "x",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.y": {
            "name": "y",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.width": {
            "name": "width",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.height": {
            "name": "height",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.right": {
            "name": "right",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.top": {
            "name": "top",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.size": {
            "name": "size",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.center": {
            "name": "center",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.offset": {
            "name": "offset",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        }
    },
    "MavBot-master/sc2/power_source.py": {
        "PowerSource.from_proto": {
            "name": "from_proto",
            "location": 6,
            "return": [],
            "arguments": {
                "cls": [],
                "proto": []
            }
        },
        "PowerSource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "radius": [],
                "unit_tag": []
            }
        },
        "PowerSource.covers": {
            "name": "covers",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "PowerSource.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PsionicMatrix.from_proto": {
            "name": "from_proto",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "proto": []
            }
        },
        "PsionicMatrix.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "sources": []
            }
        },
        "PsionicMatrix.covers": {
            "name": "covers",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        }
    },
    "MavBot-master/sc2/protocol.py": {
        "ProtocolError.is_game_over_error": {
            "name": "is_game_over_error",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "ws": []
            }
        }
    },
    "MavBot-master/sc2/proxy.py": {
        "Proxy.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "controller": [],
                "player": [],
                "proxyport": [],
                "game_time_limit": [],
                "realtime": []
            }
        }
    },
    "MavBot-master/sc2/renderer.py": {
        "Renderer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "map_size": [],
                "minimap_size": []
            }
        },
        "Renderer._on_mouse_press": {
            "name": "_on_mouse_press",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": [],
                "modifiers": []
            }
        },
        "Renderer._on_mouse_release": {
            "name": "_on_mouse_release",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": [],
                "modifiers": []
            }
        },
        "Renderer._on_mouse_drag": {
            "name": "_on_mouse_drag",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "dx": [],
                "dy": [],
                "buttons": [],
                "modifiers": []
            }
        }
    },
    "MavBot-master/sc2/sc2process.py": {
        "kill_switch.add": {
            "name": "add",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "kill_switch.kill_all": {
            "name": "kill_all",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SC2Process.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "fullscreen": [],
                "resolution": [],
                "placement": [],
                "render": [],
                "sc2_version": [],
                "base_build": [],
                "data_hash": []
            }
        },
        "SC2Process.ws_url": {
            "name": "ws_url",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process.versions": {
            "name": "versions",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process.find_data_hash": {
            "name": "find_data_hash",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "target_sc2_version": []
            }
        },
        "SC2Process._launch": {
            "name": "_launch",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process._clean": {
            "name": "_clean",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process.__aenter__.signal_handler": {
            "name": "signal_handler",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "SC2Process._launch.special_match": {
            "name": "special_match",
            "location": 159,
            "return": [],
            "arguments": {
                "strg": []
            }
        }
    },
    "MavBot-master/sc2/score.py": {
        "ScoreDetails.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "ScoreDetails.summary": {
            "name": "summary",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.score_type": {
            "name": "score_type",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.score": {
            "name": "score",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.idle_production_time": {
            "name": "idle_production_time",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.idle_worker_time": {
            "name": "idle_worker_time",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_value_units": {
            "name": "total_value_units",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_value_structures": {
            "name": "total_value_structures",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_value_units": {
            "name": "killed_value_units",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_value_structures": {
            "name": "killed_value_structures",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collected_minerals": {
            "name": "collected_minerals",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collected_vespene": {
            "name": "collected_vespene",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collection_rate_minerals": {
            "name": "collection_rate_minerals",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collection_rate_vespene": {
            "name": "collection_rate_vespene",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.spent_minerals": {
            "name": "spent_minerals",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.spent_vespene": {
            "name": "spent_vespene",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_none": {
            "name": "food_used_none",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_army": {
            "name": "food_used_army",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_economy": {
            "name": "food_used_economy",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_technology": {
            "name": "food_used_technology",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_upgrade": {
            "name": "food_used_upgrade",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_none": {
            "name": "killed_minerals_none",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_army": {
            "name": "killed_minerals_army",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_economy": {
            "name": "killed_minerals_economy",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_technology": {
            "name": "killed_minerals_technology",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_upgrade": {
            "name": "killed_minerals_upgrade",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_none": {
            "name": "killed_vespene_none",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_army": {
            "name": "killed_vespene_army",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_economy": {
            "name": "killed_vespene_economy",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_technology": {
            "name": "killed_vespene_technology",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_upgrade": {
            "name": "killed_vespene_upgrade",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_none": {
            "name": "lost_minerals_none",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_army": {
            "name": "lost_minerals_army",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_economy": {
            "name": "lost_minerals_economy",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_technology": {
            "name": "lost_minerals_technology",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_upgrade": {
            "name": "lost_minerals_upgrade",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_none": {
            "name": "lost_vespene_none",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_army": {
            "name": "lost_vespene_army",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_economy": {
            "name": "lost_vespene_economy",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_technology": {
            "name": "lost_vespene_technology",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_upgrade": {
            "name": "lost_vespene_upgrade",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_none": {
            "name": "friendly_fire_minerals_none",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_army": {
            "name": "friendly_fire_minerals_army",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_economy": {
            "name": "friendly_fire_minerals_economy",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_technology": {
            "name": "friendly_fire_minerals_technology",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_upgrade": {
            "name": "friendly_fire_minerals_upgrade",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_none": {
            "name": "friendly_fire_vespene_none",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_army": {
            "name": "friendly_fire_vespene_army",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_economy": {
            "name": "friendly_fire_vespene_economy",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_technology": {
            "name": "friendly_fire_vespene_technology",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_upgrade": {
            "name": "friendly_fire_vespene_upgrade",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_none": {
            "name": "used_minerals_none",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_army": {
            "name": "used_minerals_army",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_economy": {
            "name": "used_minerals_economy",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_technology": {
            "name": "used_minerals_technology",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_upgrade": {
            "name": "used_minerals_upgrade",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_none": {
            "name": "used_vespene_none",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_army": {
            "name": "used_vespene_army",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_economy": {
            "name": "used_vespene_economy",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_technology": {
            "name": "used_vespene_technology",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_upgrade": {
            "name": "used_vespene_upgrade",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_none": {
            "name": "total_used_minerals_none",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_army": {
            "name": "total_used_minerals_army",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_economy": {
            "name": "total_used_minerals_economy",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_technology": {
            "name": "total_used_minerals_technology",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_upgrade": {
            "name": "total_used_minerals_upgrade",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_none": {
            "name": "total_used_vespene_none",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_army": {
            "name": "total_used_vespene_army",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_economy": {
            "name": "total_used_vespene_economy",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_technology": {
            "name": "total_used_vespene_technology",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_upgrade": {
            "name": "total_used_vespene_upgrade",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_life": {
            "name": "total_damage_dealt_life",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_shields": {
            "name": "total_damage_dealt_shields",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_energy": {
            "name": "total_damage_dealt_energy",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_life": {
            "name": "total_damage_taken_life",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_shields": {
            "name": "total_damage_taken_shields",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_energy": {
            "name": "total_damage_taken_energy",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_life": {
            "name": "total_healed_life",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_shields": {
            "name": "total_healed_shields",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_energy": {
            "name": "total_healed_energy",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.current_apm": {
            "name": "current_apm",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.current_effective_apm": {
            "name": "current_effective_apm",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/unit.py": {
        "UnitOrder.from_proto": {
            "name": "from_proto",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [],
                "proto": [],
                "bot_object": []
            }
        },
        "UnitOrder.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "ability": [],
                "target": [],
                "progress": []
            }
        },
        "UnitOrder.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "proto_data": [],
                "bot_object": [],
                "distance_calculation_index": [],
                "base_build": []
            }
        },
        "Unit.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.type_id": {
            "name": "type_id",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit._type_data": {
            "name": "_type_data",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit._creation_ability": {
            "name": "_creation_ability",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.name": {
            "name": "name",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.race": {
            "name": "race",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.tag": {
            "name": "tag",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_structure": {
            "name": "is_structure",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_light": {
            "name": "is_light",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_armored": {
            "name": "is_armored",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_biological": {
            "name": "is_biological",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mechanical": {
            "name": "is_mechanical",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_massive": {
            "name": "is_massive",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_psionic": {
            "name": "is_psionic",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.tech_alias": {
            "name": "tech_alias",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.unit_alias": {
            "name": "unit_alias",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit._weapons": {
            "name": "_weapons",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack": {
            "name": "can_attack",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack_both": {
            "name": "can_attack_both",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack_ground": {
            "name": "can_attack_ground",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.ground_dps": {
            "name": "ground_dps",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.ground_range": {
            "name": "ground_range",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack_air": {
            "name": "can_attack_air",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.air_dps": {
            "name": "air_dps",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.air_range": {
            "name": "air_range",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.bonus_damage": {
            "name": "bonus_damage",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.armor": {
            "name": "armor",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.sight_range": {
            "name": "sight_range",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.movement_speed": {
            "name": "movement_speed",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.real_speed": {
            "name": "real_speed",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.calculate_speed": {
            "name": "calculate_speed",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "upgrades": []
            }
        },
        "Unit.distance_per_step": {
            "name": "distance_per_step",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.distance_to_weapon_ready": {
            "name": "distance_to_weapon_ready",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mineral_field": {
            "name": "is_mineral_field",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_vespene_geyser": {
            "name": "is_vespene_geyser",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health": {
            "name": "health",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health_max": {
            "name": "health_max",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health_percentage": {
            "name": "health_percentage",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield": {
            "name": "shield",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_max": {
            "name": "shield_max",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_percentage": {
            "name": "shield_percentage",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_health_percentage": {
            "name": "shield_health_percentage",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy": {
            "name": "energy",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy_max": {
            "name": "energy_max",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy_percentage": {
            "name": "energy_percentage",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.age_in_frames": {
            "name": "age_in_frames",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.age": {
            "name": "age",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_memory": {
            "name": "is_memory",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_snapshot": {
            "name": "is_snapshot",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_visible": {
            "name": "is_visible",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_placeholder": {
            "name": "is_placeholder",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.alliance": {
            "name": "alliance",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mine": {
            "name": "is_mine",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_enemy": {
            "name": "is_enemy",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.owner_id": {
            "name": "owner_id",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.position_tuple": {
            "name": "position_tuple",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.position": {
            "name": "position",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.position3d": {
            "name": "position3d",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.distance_to": {
            "name": "distance_to",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Unit.distance_to_squared": {
            "name": "distance_to_squared",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Unit.target_in_range": {
            "name": "target_in_range",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "bonus_distance": []
            }
        },
        "Unit.in_ability_cast_range": {
            "name": "in_ability_cast_range",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "ability_id": [],
                "target": [],
                "bonus_distance": []
            }
        },
        "Unit.calculate_damage_vs_target": {
            "name": "calculate_damage_vs_target",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "ignore_armor": [],
                "include_overkill_damage": []
            }
        },
        "Unit.calculate_dps_vs_target": {
            "name": "calculate_dps_vs_target",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "ignore_armor": [],
                "include_overkill_damage": []
            }
        },
        "Unit.facing": {
            "name": "facing",
            "location": 799,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_facing": {
            "name": "is_facing",
            "location": 803,
            "return": [],
            "arguments": {
                "self": [],
                "other_unit": [],
                "angle_error": []
            }
        },
        "Unit.footprint_radius": {
            "name": "footprint_radius",
            "location": 818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.radius": {
            "name": "radius",
            "location": 830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.build_progress": {
            "name": "build_progress",
            "location": 835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_ready": {
            "name": "is_ready",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cloak": {
            "name": "cloak",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_cloaked": {
            "name": "is_cloaked",
            "location": 851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_revealed": {
            "name": "is_revealed",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_be_attacked": {
            "name": "can_be_attacked",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.buffs": {
            "name": "buffs",
            "location": 866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_carrying_minerals": {
            "name": "is_carrying_minerals",
            "location": 871,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_carrying_vespene": {
            "name": "is_carrying_vespene",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_carrying_resource": {
            "name": "is_carrying_resource",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.detect_range": {
            "name": "detect_range",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_detector": {
            "name": "is_detector",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.radar_range": {
            "name": "radar_range",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_selected": {
            "name": "is_selected",
            "location": 901,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_on_screen": {
            "name": "is_on_screen",
            "location": 906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_blip": {
            "name": "is_blip",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_powered": {
            "name": "is_powered",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_active": {
            "name": "is_active",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.mineral_contents": {
            "name": "mineral_contents",
            "location": 928,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.vespene_contents": {
            "name": "vespene_contents",
            "location": 933,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_vespene": {
            "name": "has_vespene",
            "location": 938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_flying": {
            "name": "is_flying",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_burrowed": {
            "name": "is_burrowed",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_hallucination": {
            "name": "is_hallucination",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.attack_upgrade_level": {
            "name": "attack_upgrade_level",
            "location": 959,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.armor_upgrade_level": {
            "name": "armor_upgrade_level",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_upgrade_level": {
            "name": "shield_upgrade_level",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.buff_duration_remain": {
            "name": "buff_duration_remain",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.buff_duration_max": {
            "name": "buff_duration_max",
            "location": 982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.orders": {
            "name": "orders",
            "location": 990,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.order_target": {
            "name": "order_target",
            "location": 996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.noqueue": {
            "name": "noqueue",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_idle": {
            "name": "is_idle",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_using_ability": {
            "name": "is_using_ability",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": [],
                "abilities": []
            }
        },
        "Unit.is_moving": {
            "name": "is_moving",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_attacking": {
            "name": "is_attacking",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_patrolling": {
            "name": "is_patrolling",
            "location": 1040,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_gathering": {
            "name": "is_gathering",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_returning": {
            "name": "is_returning",
            "location": 1052,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_collecting": {
            "name": "is_collecting",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_constructing_scv": {
            "name": "is_constructing_scv",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_transforming": {
            "name": "is_transforming",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_repairing": {
            "name": "is_repairing",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.add_on_tag": {
            "name": "add_on_tag",
            "location": 1082,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_add_on": {
            "name": "has_add_on",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_techlab": {
            "name": "has_techlab",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_reactor": {
            "name": "has_reactor",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.add_on_land_position": {
            "name": "add_on_land_position",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.add_on_position": {
            "name": "add_on_position",
            "location": 1112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.passengers": {
            "name": "passengers",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.passengers_tags": {
            "name": "passengers_tags",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_used": {
            "name": "cargo_used",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_cargo": {
            "name": "has_cargo",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_size": {
            "name": "cargo_size",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_max": {
            "name": "cargo_max",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_left": {
            "name": "cargo_left",
            "location": 1157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.assigned_harvesters": {
            "name": "assigned_harvesters",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.ideal_harvesters": {
            "name": "ideal_harvesters",
            "location": 1167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.surplus_harvesters": {
            "name": "surplus_harvesters",
            "location": 1173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.weapon_cooldown": {
            "name": "weapon_cooldown",
            "location": 1181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.weapon_ready": {
            "name": "weapon_ready",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.engaged_target_tag": {
            "name": "engaged_target_tag",
            "location": 1201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_buff": {
            "name": "has_buff",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "buff": []
            }
        },
        "Unit.train": {
            "name": "train",
            "location": 1214,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "queue": [],
                "can_afford_check": []
            }
        },
        "Unit.build": {
            "name": "build",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "position": [],
                "queue": [],
                "can_afford_check": []
            }
        },
        "Unit.build_gas": {
            "name": "build_gas",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": [],
                "target_geysir": [],
                "queue": [],
                "can_afford_check": []
            }
        },
        "Unit.research": {
            "name": "research",
            "location": 1282,
            "return": [],
            "arguments": {
                "self": [],
                "upgrade": [],
                "queue": [],
                "can_afford_check": []
            }
        },
        "Unit.warp_in": {
            "name": "warp_in",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "position": [],
                "can_afford_check": []
            }
        },
        "Unit.attack": {
            "name": "attack",
            "location": 1317,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "queue": []
            }
        },
        "Unit.smart": {
            "name": "smart",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "queue": []
            }
        },
        "Unit.gather": {
            "name": "gather",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "queue": []
            }
        },
        "Unit.return_resource": {
            "name": "return_resource",
            "location": 1343,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "queue": []
            }
        },
        "Unit.move": {
            "name": "move",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "queue": []
            }
        },
        "Unit.scan_move": {
            "name": "scan_move",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.hold_position": {
            "name": "hold_position",
            "location": 1364,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        },
        "Unit.stop": {
            "name": "stop",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        },
        "Unit.patrol": {
            "name": "patrol",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "queue": []
            }
        },
        "Unit.repair": {
            "name": "repair",
            "location": 1390,
            "return": [],
            "arguments": {
                "self": [],
                "repair_target": [],
                "queue": []
            }
        },
        "Unit.__hash__": {
            "name": "__hash__",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.__eq__": {
            "name": "__eq__",
            "location": 1401,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Unit.__call__": {
            "name": "__call__",
            "location": 1407,
            "return": [],
            "arguments": {
                "self": [],
                "ability": [],
                "target": [],
                "queue": [],
                "subtract_cost": [],
                "subtract_supply": [],
                "can_afford_check": []
            }
        }
    },
    "MavBot-master/sc2/units.py": {
        "Units.from_proto": {
            "name": "from_proto",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "units": [],
                "bot_object": []
            }
        },
        "Units.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "bot_object": []
            }
        },
        "Units.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.select": {
            "name": "select",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.copy": {
            "name": "copy",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.__or__": {
            "name": "__or__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.__add__": {
            "name": "__add__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.__and__": {
            "name": "__and__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.__sub__": {
            "name": "__sub__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.__hash__": {
            "name": "__hash__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.amount": {
            "name": "amount",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.empty": {
            "name": "empty",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.exists": {
            "name": "exists",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.find_by_tag": {
            "name": "find_by_tag",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Units.by_tag": {
            "name": "by_tag",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Units.first": {
            "name": "first",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.take": {
            "name": "take",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Units.random": {
            "name": "random",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.random_or": {
            "name": "random_or",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.random_group_of": {
            "name": "random_group_of",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Units.in_attack_range_of": {
            "name": "in_attack_range_of",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "bonus_distance": []
            }
        },
        "Units.closest_distance_to": {
            "name": "closest_distance_to",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Units.furthest_distance_to": {
            "name": "furthest_distance_to",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Units.closest_to": {
            "name": "closest_to",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Units.furthest_to": {
            "name": "furthest_to",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Units.closer_than": {
            "name": "closer_than",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "position": []
            }
        },
        "Units.further_than": {
            "name": "further_than",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [],
                "position": []
            }
        },
        "Units.in_distance_between": {
            "name": "in_distance_between",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "distance1": [],
                "distance2": []
            }
        },
        "Units.closest_n_units": {
            "name": "closest_n_units",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "n": []
            }
        },
        "Units.furthest_n_units": {
            "name": "furthest_n_units",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "n": []
            }
        },
        "Units.in_distance_of_group": {
            "name": "in_distance_of_group",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "other_units": [],
                "distance": []
            }
        },
        "Units.in_closest_distance_to_group": {
            "name": "in_closest_distance_to_group",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "other_units": []
            }
        },
        "Units._list_sorted_closest_to_distance": {
            "name": "_list_sorted_closest_to_distance",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "distance": []
            }
        },
        "Units.n_closest_to_distance": {
            "name": "n_closest_to_distance",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "distance": [],
                "n": []
            }
        },
        "Units.n_furthest_to_distance": {
            "name": "n_furthest_to_distance",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "distance": [],
                "n": []
            }
        },
        "Units.subgroup": {
            "name": "subgroup",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "Units.filter": {
            "name": "filter",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "pred": []
            }
        },
        "Units.sorted": {
            "name": "sorted",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "reverse": []
            }
        },
        "Units._list_sorted_by_distance_to": {
            "name": "_list_sorted_by_distance_to",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "reverse": []
            }
        },
        "Units.sorted_by_distance_to": {
            "name": "sorted_by_distance_to",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "reverse": []
            }
        },
        "Units.tags_in": {
            "name": "tags_in",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.tags_not_in": {
            "name": "tags_not_in",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.of_type": {
            "name": "of_type",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.exclude_type": {
            "name": "exclude_type",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.same_tech": {
            "name": "same_tech",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.same_unit": {
            "name": "same_unit",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Units.center": {
            "name": "center",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.selected": {
            "name": "selected",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.tags": {
            "name": "tags",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.ready": {
            "name": "ready",
            "location": 625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_ready": {
            "name": "not_ready",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.idle": {
            "name": "idle",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.owned": {
            "name": "owned",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.enemy": {
            "name": "enemy",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.flying": {
            "name": "flying",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_flying": {
            "name": "not_flying",
            "location": 655,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.structure": {
            "name": "structure",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_structure": {
            "name": "not_structure",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.gathering": {
            "name": "gathering",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.returning": {
            "name": "returning",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.collecting": {
            "name": "collecting",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.visible": {
            "name": "visible",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.mineral_field": {
            "name": "mineral_field",
            "location": 691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.vespene_geyser": {
            "name": "vespene_geyser",
            "location": 696,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.prefer_idle": {
            "name": "prefer_idle",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitSelection.__init__": {
            "name": "__init__",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "selection": []
            }
        }
    },
    "MavBot-master/sc2/unit_command.py": {
        "UnitCommand.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "ability": [],
                "unit": [],
                "target": [],
                "queue": []
            }
        },
        "UnitCommand.combining_tuple": {
            "name": "combining_tuple",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitCommand.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/versions.py": {},
    "MavBot-master/sc2/wsl.py": {
        "win_path_to_wsl_path": {
            "name": "win_path_to_wsl_path",
            "location": 12,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "wsl_path_to_win_path": {
            "name": "wsl_path_to_win_path",
            "location": 17,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_wsl_home": {
            "name": "get_wsl_home",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 41,
            "return": [],
            "arguments": {
                "popen_args": [],
                "sc2_cwd": []
            }
        },
        "kill": {
            "name": "kill",
            "location": 55,
            "return": [],
            "arguments": {
                "wsl_process": []
            }
        },
        "detect": {
            "name": "detect",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "detect.line_has_proc": {
            "name": "line_has_proc",
            "location": 94,
            "return": [],
            "arguments": {
                "ln": []
            }
        },
        "detect.line_version": {
            "name": "line_version",
            "location": 97,
            "return": [],
            "arguments": {
                "ln": []
            }
        }
    },
    "MavBot-master/sc2/__init__.py": {
        "is_submodule": {
            "name": "is_submodule",
            "location": 4,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "MavBot-master/sc2/dicts/generic_redirect_abilities.py": {},
    "MavBot-master/sc2/dicts/unit_abilities.py": {},
    "MavBot-master/sc2/dicts/unit_research_abilities.py": {},
    "MavBot-master/sc2/dicts/unit_tech_alias.py": {},
    "MavBot-master/sc2/dicts/unit_trained_from.py": {},
    "MavBot-master/sc2/dicts/unit_train_build_abilities.py": {},
    "MavBot-master/sc2/dicts/unit_unit_alias.py": {},
    "MavBot-master/sc2/dicts/upgrade_researched_from.py": {},
    "MavBot-master/sc2/dicts/__init__.py": {},
    "MavBot-master/sc2/helpers/control_group.py": {
        "ControlGroup.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.__hash__": {
            "name": "__hash__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGroup.select_units": {
            "name": "select_units",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.missing_unit_tags": {
            "name": "missing_unit_tags",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.amount": {
            "name": "amount",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGroup.empty": {
            "name": "empty",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGroup.add_unit": {
            "name": "add_unit",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "ControlGroup.add_units": {
            "name": "add_units",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.remove_unit": {
            "name": "remove_unit",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "ControlGroup.remove_units": {
            "name": "remove_units",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        }
    },
    "MavBot-master/sc2/helpers/devtools.py": {
        "time_this": {
            "name": "time_this",
            "location": 6,
            "return": [],
            "arguments": {
                "label": []
            }
        }
    },
    "MavBot-master/sc2/helpers/__init__.py": {
        "is_submodule": {
            "name": "is_submodule",
            "location": 4,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "MavBot-master/sc2/ids/ability_id.py": {
        "AbilityId.__repr__": {
            "name": "__repr__",
            "location": 1289,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/ids/buff_id.py": {
        "BuffId.__repr__": {
            "name": "__repr__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/ids/effect_id.py": {
        "EffectId.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/ids/id_version.py": {},
    "MavBot-master/sc2/ids/unit_typeid.py": {
        "UnitTypeId.__repr__": {
            "name": "__repr__",
            "location": 2014,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/ids/upgrade_id.py": {
        "UpgradeId.__repr__": {
            "name": "__repr__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MavBot-master/sc2/ids/__init__.py": {}
}
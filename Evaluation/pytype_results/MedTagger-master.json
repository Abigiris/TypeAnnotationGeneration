{
    "MedTagger-master/.travis/run_tests_if_subproject_changed.py": {
        "get_root_dir": {
            "name": "get_root_dir",
            "location": 16,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "do_not_run": {
            "name": "do_not_run",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/01dc85c25335_add_skip_count_column_to_scan_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/0707294d0a96_add_disabled_flags.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/14898bcabb8a_add_comment_column_to_label_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/39c660178412_change_columns_names.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/3f2c98c1710b_add_tools_to_tag.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/4e7789e84f5d_add_point_label_element.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/4e93b463a357_initial_revision.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/569a3b109b71_rename_scan_category_to_dataset.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/5e3f98d24b75_add_description_and_label_examples_for_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/61737c4342bc_add_label_tag.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/617bf951f6a2_add_chain_label_element.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/6d69756a1476_add_user_settings.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/729cd1e8cde1_add_width_and_height_to_slices.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/75a3481c4d0c_change_scans_and_slices_to_use_enums.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/7995a5e4f811_add_label_tools.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/89c593744804_remove_all_binary_mask_related_things_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/9a6cd75ba23f_add_brush_label_element_to_postgresql_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/9c615d167588_add_tasks.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/9f2eafdf821e_add_cascade_delete_to_scans.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/ab732474a829_add_owners_to_labels_and_scans.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/c075df75ca43_add_support_for_predefined_labels.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/ddd21c46f46d_add_slices_to_cassandra.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/e1d0a4fcf63c_add_tables_for_actions_like_surveys.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/e4721c7f3521_added_labeling_time_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/alembic/versions/f49f6dc9b600_add__created_and__modified_fields_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/config.py": {
        "AppConfiguration.get": {
            "name": "get",
            "location": 10,
            "return": [
                "Union[(str, _T2)]"
            ],
            "arguments": {
                "namespace": [],
                "key": [],
                "fallback": [
                    "_T2@@"
                ]
            }
        },
        "AppConfiguration.getint": {
            "name": "getint",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "namespace": [],
                "key": [],
                "fallback": []
            }
        },
        "AppConfiguration.getboolean": {
            "name": "getboolean",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": [],
                "key": [],
                "fallback": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/conversion.py": {
        "convert_slice_to_normalized_8bit_array": {
            "name": "convert_slice_to_normalized_8bit_array",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "dicom_file": []
            }
        },
        "convert_scan_to_normalized_8bit_array": {
            "name": "convert_scan_to_normalized_8bit_array",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "dicom_files": [],
                "output_x_size": []
            }
        },
        "_get_scan_slice_thickness": {
            "name": "_get_scan_slice_thickness",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "dicom_files": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/definitions.py": {},
    "MedTagger-master/backend/medtagger/dicoms.py": {
        "read_int": {
            "name": "read_int",
            "location": 9,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "dicom": [],
                "tag": []
            }
        },
        "read_float": {
            "name": "read_float",
            "location": 22,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "dicom": [],
                "tag": []
            }
        },
        "read_string": {
            "name": "read_string",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "dicom": [],
                "tag": []
            }
        },
        "read_list": {
            "name": "read_list",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "dicom": [],
                "tag": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/exceptions.py": {},
    "MedTagger-master/backend/medtagger/types.py": {},
    "MedTagger-master/backend/medtagger/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/exceptions.py": {},
    "MedTagger-master/backend/medtagger/api/pagination.py": {},
    "MedTagger-master/backend/medtagger/api/rest.py": {
        "shutdown_session": {
            "name": "shutdown_session",
            "location": 61,
            "return": [],
            "arguments": {
                "exception": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/security.py": {
        "auth_error_handler": {
            "name": "auth_error_handler",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "role_required": {
            "name": "role_required",
            "location": 30,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "require_one_of_roles": {
            "name": "require_one_of_roles",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "required_roles": []
            }
        },
        "hash_password": {
            "name": "hash_password",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "password": []
            }
        },
        "verify_user_password": {
            "name": "verify_user_password",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": [],
                "password": []
            }
        },
        "generate_auth_token": {
            "name": "generate_auth_token",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [],
                "expiration": []
            }
        },
        "get_user_by_token": {
            "name": "get_user_by_token",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "token": []
            }
        },
        "verify_token": {
            "name": "verify_token",
            "location": 90,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "role_required.wrapper": {
            "name": "wrapper",
            "location": 32,
            "return": [],
            "arguments": {
                "wrapped_method": []
            }
        },
        "role_required.wrapper.decorated": {
            "name": "decorated",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/utils.py": {
        "get_current_user": {
            "name": "get_current_user",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/websocket.py": {
        "shutdown_session": {
            "name": "shutdown_session",
            "location": 46,
            "return": [],
            "arguments": {
                "exception": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/__init__.py": {
        "setup_connection_to_sql_and_storage": {
            "name": "setup_connection_to_sql_and_storage",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "rest_default_error_handler": {
            "name": "rest_default_error_handler",
            "location": 54,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "rest_unauthorized_error_handler": {
            "name": "rest_unauthorized_error_handler",
            "location": 65,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "rest_not_found_error_handler": {
            "name": "rest_not_found_error_handler",
            "location": 77,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "rest_invalid_arguments_error_handler": {
            "name": "rest_invalid_arguments_error_handler",
            "location": 89,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "rest_access_forbidden_error_handel": {
            "name": "rest_access_forbidden_error_handel",
            "location": 101,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "web_socket_default_error_handler": {
            "name": "web_socket_default_error_handler",
            "location": 113,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "setup_connection_to_sql_and_storage.connect_to_db_and_storage": {
            "name": "connect_to_db_and_storage",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/auth/business.py": {
        "create_user": {
            "name": "create_user",
            "location": 9,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "email": [],
                "password": [],
                "first_name": [],
                "last_name": []
            }
        },
        "sign_in_user": {
            "name": "sign_in_user",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "email": [],
                "password": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/auth/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/auth/service.py": {
        "Register.post": {
            "name": "post",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "SignIn.post": {
            "name": "post",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/auth/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/core/business.py": {
        "success": {
            "name": "success",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/core/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/core/service.py": {
        "Status.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "CheckAuthentication.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "CheckAuthorization.get": {
            "name": "get",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/core/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/datasets/business.py": {
        "get_available_datasets": {
            "name": "get_available_datasets",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "create_dataset": {
            "name": "create_dataset",
            "location": 18,
            "return": [],
            "arguments": {
                "key": [],
                "name": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/datasets/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/datasets/service_rest.py": {
        "Datasets.get": {
            "name": "get",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "Datasets.post": {
            "name": "post",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/api/datasets/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/labels/business.py": {
        "get_label": {
            "name": "get_label",
            "location": 14,
            "return": [],
            "arguments": {
                "label_id": []
            }
        },
        "change_label_status": {
            "name": "change_label_status",
            "location": 25,
            "return": [],
            "arguments": {
                "label_id": [],
                "status": []
            }
        },
        "get_random_label": {
            "name": "get_random_label",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "get_action_details": {
            "name": "get_action_details",
            "location": 51,
            "return": [],
            "arguments": {
                "action_id": []
            }
        },
        "add_action_response": {
            "name": "add_action_response",
            "location": 63,
            "return": [],
            "arguments": {
                "action_id": [],
                "response": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/labels/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/labels/service.py": {
        "Label.get": {
            "name": "get",
            "location": 29,
            "return": [],
            "arguments": {
                "label_id": []
            }
        },
        "RandomLabel.get": {
            "name": "get",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "ChangeLabelStatus.put": {
            "name": "put",
            "location": 67,
            "return": [],
            "arguments": {
                "label_id": []
            }
        },
        "ActionDetails.get": {
            "name": "get",
            "location": 89,
            "return": [],
            "arguments": {
                "action_id": []
            }
        },
        "ActionDetails.post": {
            "name": "post",
            "location": 100,
            "return": [],
            "arguments": {
                "action_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/labels/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/scans/business.py": {
        "dataset_is_valid": {
            "name": "dataset_is_valid",
            "location": 33,
            "return": [],
            "arguments": {
                "dataset_key": []
            }
        },
        "create_empty_scan": {
            "name": "create_empty_scan",
            "location": 46,
            "return": [],
            "arguments": {
                "dataset_key": [],
                "declared_number_of_slices": []
            }
        },
        "get_random_scan": {
            "name": "get_random_scan",
            "location": 58,
            "return": [],
            "arguments": {
                "task_key": []
            }
        },
        "get_slices_for_scan": {
            "name": "get_slices_for_scan",
            "location": 80,
            "return": [],
            "arguments": {
                "scan_id": [],
                "begin": [],
                "count": [],
                "orientation": []
            }
        },
        "get_predefined_brush_label_elements": {
            "name": "get_predefined_brush_label_elements",
            "location": 96,
            "return": [],
            "arguments": {
                "scan_id": [],
                "task_id": [],
                "begin": [],
                "count": []
            }
        },
        "validate_label_payload": {
            "name": "validate_label_payload",
            "location": 112,
            "return": [],
            "arguments": {
                "label": [],
                "task_key": [],
                "files": []
            }
        },
        "_validate_tool": {
            "name": "_validate_tool",
            "location": 124,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "_validate_files": {
            "name": "_validate_files",
            "location": 134,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "_validate_label_elements": {
            "name": "_validate_label_elements",
            "location": 145,
            "return": [],
            "arguments": {
                "label": [],
                "task_key": [],
                "files": []
            }
        },
        "add_label": {
            "name": "add_label",
            "location": 161,
            "return": [],
            "arguments": {
                "scan_id": [],
                "task_key": [],
                "elements": [],
                "files": [],
                "labeling_time": [],
                "comment": [],
                "is_predefined": []
            }
        },
        "add_label_element": {
            "name": "add_label_element",
            "location": 185,
            "return": [],
            "arguments": {
                "element": [],
                "label_id": [],
                "files": []
            }
        },
        "_add_rectangle_element": {
            "name": "_add_rectangle_element",
            "location": 203,
            "return": [],
            "arguments": {
                "element": [],
                "label_id": []
            }
        },
        "_add_brush_element": {
            "name": "_add_brush_element",
            "location": 215,
            "return": [],
            "arguments": {
                "element": [],
                "label_id": [],
                "files": []
            }
        },
        "_add_point_element": {
            "name": "_add_point_element",
            "location": 230,
            "return": [],
            "arguments": {
                "element": [],
                "label_id": []
            }
        },
        "_add_chain_element": {
            "name": "_add_chain_element",
            "location": 241,
            "return": [],
            "arguments": {
                "element": [],
                "label_id": []
            }
        },
        "_get_label_tag": {
            "name": "_get_label_tag",
            "location": 254,
            "return": [],
            "arguments": {
                "tag_key": []
            }
        },
        "add_new_slice": {
            "name": "add_new_slice",
            "location": 262,
            "return": [],
            "arguments": {
                "scan_id": [],
                "image": []
            }
        },
        "get_paginated_scans": {
            "name": "get_paginated_scans",
            "location": 280,
            "return": [],
            "arguments": {
                "dataset_key": [],
                "page": [],
                "per_page": []
            }
        },
        "get_scan": {
            "name": "get_scan",
            "location": 291,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        },
        "skip_scan": {
            "name": "skip_scan",
            "location": 303,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/scans/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/scans/service_rest.py": {
        "Scans.get": {
            "name": "get",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "Scans.post": {
            "name": "post",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "Random.get": {
            "name": "get",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "Label.post": {
            "name": "post",
            "location": 104,
            "return": [],
            "arguments": {
                "scan_id": [],
                "task_key": []
            }
        },
        "Scan.get": {
            "name": "get",
            "location": 156,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        },
        "SkipScan.post": {
            "name": "post",
            "location": 171,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        },
        "ScanSlices.post": {
            "name": "post",
            "location": 189,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/scans/service_web_socket.py": {
        "Slices.on_request_slices": {
            "name": "on_request_slices",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Slices._send_slices": {
            "name": "_send_slices",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_id": [],
                "begin": [],
                "count": [],
                "orientation": [],
                "reversed_order": []
            }
        },
        "Slices._send_predefined_labels": {
            "name": "_send_predefined_labels",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_id": [],
                "begin": [],
                "count": [],
                "task_key": [],
                "reversed_order": []
            }
        },
        "Slices._raise_on_invalid_request_slices": {
            "name": "_raise_on_invalid_request_slices",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [],
                "orientation": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/scans/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/tasks/business.py": {
        "get_tasks": {
            "name": "get_tasks",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_task_for_key": {
            "name": "get_task_for_key",
            "location": 21,
            "return": [],
            "arguments": {
                "task_key": []
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 33,
            "return": [],
            "arguments": {
                "key": [],
                "name": [],
                "image_path": [],
                "datasets_keys": [],
                "description": [],
                "label_examples": [],
                "tags": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/tasks/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/tasks/service_rest.py": {
        "Tasks.get": {
            "name": "get",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "Tasks.post": {
            "name": "post",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "Task.get": {
            "name": "get",
            "location": 61,
            "return": [],
            "arguments": {
                "task_key": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/tasks/__init__.py": {},
    "MedTagger-master/backend/medtagger/api/users/business.py": {
        "get_all_users": {
            "name": "get_all_users",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "set_user_role": {
            "name": "set_user_role",
            "location": 17,
            "return": [],
            "arguments": {
                "user_id": [],
                "role_name": []
            }
        },
        "set_user_info": {
            "name": "set_user_info",
            "location": 22,
            "return": [],
            "arguments": {
                "user_id": [],
                "firstName": [],
                "lastName": []
            }
        },
        "set_user_settings": {
            "name": "set_user_settings",
            "location": 31,
            "return": [],
            "arguments": {
                "name": [],
                "value": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/users/serializers.py": {},
    "MedTagger-master/backend/medtagger/api/users/service.py": {
        "GetUsers.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "SetRole.put": {
            "name": "put",
            "location": 40,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "GetUserInfo.get": {
            "name": "get",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "SetUserSettings.post": {
            "name": "post",
            "location": 68,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "SetUserInfo.put": {
            "name": "put",
            "location": 85,
            "return": [],
            "arguments": {
                "user_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/api/users/__init__.py": {},
    "MedTagger-master/backend/medtagger/database/fixtures.py": {
        "insert_user_roles": {
            "name": "insert_user_roles",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apply_all_fixtures": {
            "name": "apply_all_fixtures",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/database/models.py": {
        "delete_brush_element_from_storage": {
            "name": "delete_brush_element_from_storage",
            "location": 828,
            "return": [],
            "arguments": {
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "delete_original_and_processed_slice_from_storage": {
            "name": "delete_original_and_processed_slice_from_storage",
            "location": 836,
            "return": [],
            "arguments": {
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "Role.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [],
                "password_hash": [],
                "first_name": [],
                "last_name": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.role": {
            "name": "role",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSettings.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "name": []
            }
        },
        "Dataset.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "name": [],
                "image_path": []
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.available_tags": {
            "name": "available_tags",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "new_tags": []
            }
        },
        "Task.number_of_available_scans": {
            "name": "number_of_available_scans",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scan.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "declared_number_of_slices": [],
                "user": []
            }
        },
        "Scan.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scan.width": {
            "name": "width",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scan.height": {
            "name": "height",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scan.add_slice": {
            "name": "add_slice",
            "location": 234,
            "return": [
                "Slice"
            ],
            "arguments": {
                "self": [],
                "orientation": []
            }
        },
        "Scan.update_status": {
            "name": "update_status",
            "location": 245,
            "return": [
                "_TScan@@Scan@@"
            ],
            "arguments": {
                "self": [
                    "_TScan@@Scan@@"
                ],
                "status": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orientation": [],
                "location": [],
                "position": []
            }
        },
        "Slice.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.update_location": {
            "name": "update_location",
            "location": 294,
            "return": [
                "_TSlice@@Slice@@"
            ],
            "arguments": {
                "self": [
                    "_TSlice@@Slice@@"
                ],
                "new_location": []
            }
        },
        "Slice.update_position": {
            "name": "update_position",
            "location": 300,
            "return": [
                "_TSlice@@Slice@@"
            ],
            "arguments": {
                "self": [
                    "_TSlice@@Slice@@"
                ],
                "new_position": []
            }
        },
        "Slice.update_size": {
            "name": "update_size",
            "location": 308,
            "return": [
                "_TSlice@@Slice@@"
            ],
            "arguments": {
                "self": [
                    "_TSlice@@Slice@@"
                ],
                "height": [],
                "width": []
            }
        },
        "Slice.update_status": {
            "name": "update_status",
            "location": 315,
            "return": [
                "_TSlice@@Slice@@"
            ],
            "arguments": {
                "self": [
                    "_TSlice@@Slice@@"
                ],
                "status": []
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "labeling_time": [],
                "comment": [],
                "is_predefined": []
            }
        },
        "Label.__repr__": {
            "name": "__repr__",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.update_status": {
            "name": "update_status",
            "location": 377,
            "return": [
                "_TLabel@@Label@@"
            ],
            "arguments": {
                "self": [
                    "_TLabel@@Label@@"
                ],
                "status": []
            }
        },
        "LabelTag.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "name": [],
                "tools": [],
                "actions": []
            }
        },
        "LabelTag.__repr__": {
            "name": "__repr__",
            "location": 416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelElement.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "LabelElement.__repr__": {
            "name": "__repr__",
            "location": 454,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelElement.update_status": {
            "name": "update_status",
            "location": 458,
            "return": [
                "_TLabelElement@@LabelElement@@"
            ],
            "arguments": {
                "self": [
                    "_TLabelElement@@LabelElement@@"
                ],
                "status": []
            }
        },
        "RectangularLabelElement.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "shape": [],
                "tag": []
            }
        },
        "RectangularLabelElement.__repr__": {
            "name": "__repr__",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrushLabelElement.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slice_index": [],
                "width": [],
                "height": [],
                "tag": []
            }
        },
        "BrushLabelElement.__repr__": {
            "name": "__repr__",
            "location": 529,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointLabelElement.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "tag": []
            }
        },
        "PointLabelElement.__repr__": {
            "name": "__repr__",
            "location": 558,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainLabelElement.__init__": {
            "name": "__init__",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slice_index": [],
                "tag": [],
                "loop": []
            }
        },
        "ChainLabelElement.__repr__": {
            "name": "__repr__",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainLabelElementPoint.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "label_element_id": [],
                "order": []
            }
        },
        "ChainLabelElementPoint.__repr__": {
            "name": "__repr__",
            "location": 622,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 658,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Survey.__init__": {
            "name": "__init__",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "initial_element_key": []
            }
        },
        "Survey.get_details": {
            "name": "get_details",
            "location": 686,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Survey.validate_response": {
            "name": "validate_response",
            "location": 694,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "SurveyElement.__init__": {
            "name": "__init__",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "instant_next_element": []
            }
        },
        "SurveyElement.get_details": {
            "name": "get_details",
            "location": 727,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurveySingleChoiceQuestion.__init__": {
            "name": "__init__",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "title": [],
                "possible_answers": [],
                "instant_next_element": []
            }
        },
        "SurveySingleChoiceQuestion.__repr__": {
            "name": "__repr__",
            "location": 761,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurveySingleChoiceQuestion.get_details": {
            "name": "get_details",
            "location": 765,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionResponse.get_details": {
            "name": "get_details",
            "location": 790,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurveyResponse.__init__": {
            "name": "__init__",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "survey_id": [],
                "data": []
            }
        },
        "SurveyResponse.get_details": {
            "name": "get_details",
            "location": 821,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/database/utils.py": {
        "ArrayOfEnum.bind_expression": {
            "name": "bind_expression",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "bindvalue": []
            }
        },
        "ArrayOfEnum.result_processor": {
            "name": "result_processor",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "ArrayOfEnum.result_processor.handle_raw_string": {
            "name": "handle_raw_string",
            "location": 22,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ArrayOfEnum.result_processor.process": {
            "name": "process",
            "location": 31,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/database/__init__.py": {
        "connect": {
            "name": "connect",
            "location": 54,
            "return": [],
            "arguments": {
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "checkout": {
            "name": "checkout",
            "location": 61,
            "return": [],
            "arguments": {
                "dbapi_connection": [],
                "connection_record": [],
                "connection_proxy": []
            }
        },
        "is_alive": {
            "name": "is_alive",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "db_connection_session": {
            "name": "db_connection_session",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "db_transaction_session": {
            "name": "db_transaction_session",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "MedTaggerBase.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MedTaggerBase.save": {
            "name": "save",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/generator.py": {
        "DataSetGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": []
            }
        },
        "DataSetGenerator.generate": {
            "name": "generate",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "label_elements": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/__init__.py": {},
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/base.py": {
        "GeneratorAlgorithm.get_ground_truth": {
            "name": "get_ground_truth",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/dbscan.py": {
        "DBSCANAlgorithm.get_ground_truth": {
            "name": "get_ground_truth",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/gaussian_mixture_models.py": {
        "GaussianMixtureModelsAlgorithm.get_ground_truth": {
            "name": "get_ground_truth",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GaussianMixtureModelsAlgorithm._choose_number_of_components": {
            "name": "_choose_number_of_components",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/k_means.py": {
        "KMeansAlgorithm.get_ground_truth": {
            "name": "get_ground_truth",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KMeansAlgorithm._choose_number_of_clusters": {
            "name": "_choose_number_of_clusters",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/majority_voting.py": {
        "MajorityVotingAlgorithm.get_ground_truth": {
            "name": "get_ground_truth",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/algorithms/__init__.py": {},
    "MedTagger-master/backend/medtagger/ground_truth/parsers/base.py": {
        "LabelElementParser.convert_to_numpy": {
            "name": "convert_to_numpy",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "label_elements": [],
                "resize_image": []
            }
        },
        "LabelElementParser.compute_intersection_over_union": {
            "name": "compute_intersection_over_union",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "first_label_element": [],
                "second_label_element": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/parsers/chain.py": {
        "ChainLabelElementParser.convert_to_numpy": {
            "name": "convert_to_numpy",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "label_elements": [],
                "resize_image": []
            }
        },
        "ChainLabelElementParser.compute_intersection_over_union": {
            "name": "compute_intersection_over_union",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "first_label_element": [],
                "second_label_element": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/parsers/rectangle.py": {
        "RectangleLabelElementParser.convert_to_numpy": {
            "name": "convert_to_numpy",
            "location": 13,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "label_elements": [],
                "resize_image": []
            }
        },
        "RectangleLabelElementParser.compute_intersection_over_union": {
            "name": "compute_intersection_over_union",
            "location": 23,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "first_label_element": [],
                "second_label_element": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/parsers/__init__.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 8,
            "return": [],
            "arguments": {
                "label_element_type": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/quality/figures.py": {
        "specificity_vs_sensitivity": {
            "name": "specificity_vs_sensitivity",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "users_specificity": [],
                "users_sensitivity": []
            }
        },
        "mean_labeling_time_vs_score": {
            "name": "mean_labeling_time_vs_score",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "label_elements": [],
                "users_scores": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/quality/user_specificity_sensitivity.py": {
        "compute_specificity_and_sensitivity_for_users": {
            "name": "compute_specificity_and_sensitivity_for_users",
            "location": 27,
            "return": [
                "Tuple[(collections.defaultdict, collections.defaultdict, collections.defaultdict)]"
            ],
            "arguments": {
                "algorithm": [],
                "users": [],
                "label_elements": [],
                "ground_truth": []
            }
        },
        "_analyse_user_label_elements": {
            "name": "_analyse_user_label_elements",
            "location": 77,
            "return": [
                "Statistics"
            ],
            "arguments": {
                "algorithm": [],
                "user_label_elements_for_this_slice": [],
                "all_label_elements_for_this_slice": [],
                "ground_truth_annotation": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/ground_truth/quality/__init__.py": {},
    "MedTagger-master/backend/medtagger/repositories/actions.py": {
        "get_action_by_id": {
            "name": "get_action_by_id",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "action_id": []
            }
        },
        "add_action_response": {
            "name": "add_action_response",
            "location": 15,
            "return": [
                "medtagger.database.models.SurveyResponse"
            ],
            "arguments": {
                "action_id": [],
                "response": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/datasets.py": {
        "get_all_datasets": {
            "name": "get_all_datasets",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "include_disabled": []
            }
        },
        "get_dataset_by_key": {
            "name": "get_dataset_by_key",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": []
            }
        },
        "add_new_dataset": {
            "name": "add_new_dataset",
            "location": 28,
            "return": [
                "medtagger.database.models.Dataset"
            ],
            "arguments": {
                "key": [],
                "name": []
            }
        },
        "update": {
            "name": "update",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [],
                "name": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        },
        "enable": {
            "name": "enable",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/labels.py": {
        "get_all_labels": {
            "name": "get_all_labels",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_label_by_id": {
            "name": "get_label_by_id",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "label_id": []
            }
        },
        "get_random_label": {
            "name": "get_random_label",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "status": []
            }
        },
        "get_predefined_label_for_scan_in_task": {
            "name": "get_predefined_label_for_scan_in_task",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "scan": [],
                "task": []
            }
        },
        "get_predefined_brush_label_elements": {
            "name": "get_predefined_brush_label_elements",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "scan_id": [],
                "task_id": [],
                "begin": [],
                "count": []
            }
        },
        "add_new_label": {
            "name": "add_new_label",
            "location": 73,
            "return": [
                "medtagger.database.models.Label"
            ],
            "arguments": {
                "scan_id": [],
                "task_key": [],
                "user": [],
                "labeling_time": [],
                "comment": [],
                "is_predefined": []
            }
        },
        "add_new_rectangular_label_element": {
            "name": "add_new_rectangular_label_element",
            "location": 94,
            "return": [
                "Union[(medtagger.types.LabelElementID, sqlalchemy.sql.schema.Column)]"
            ],
            "arguments": {
                "label_id": [],
                "position": [],
                "shape": [],
                "label_tag": []
            }
        },
        "add_new_brush_label_element": {
            "name": "add_new_brush_label_element",
            "location": 112,
            "return": [
                "Union[(medtagger.types.LabelElementID, sqlalchemy.sql.schema.Column)]"
            ],
            "arguments": {
                "label_id": [],
                "slice_index": [],
                "width": [],
                "height": [],
                "image": [],
                "label_tag": []
            }
        },
        "add_new_point_label_element": {
            "name": "add_new_point_label_element",
            "location": 133,
            "return": [
                "Union[(medtagger.types.LabelElementID, sqlalchemy.sql.schema.Column)]"
            ],
            "arguments": {
                "label_id": [],
                "position": [],
                "label_tag": []
            }
        },
        "add_new_chain_label_element": {
            "name": "add_new_chain_label_element",
            "location": 149,
            "return": [
                "Union[(medtagger.types.LabelElementID, sqlalchemy.sql.schema.Column)]"
            ],
            "arguments": {
                "label_id": [],
                "slice_index": [],
                "label_tag": [],
                "points": [],
                "loop": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/label_tags.py": {
        "get_all_tags": {
            "name": "get_all_tags",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "include_disabled": []
            }
        },
        "get_label_tag_by_key": {
            "name": "get_label_tag_by_key",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "label_tag_key": []
            }
        },
        "add_new_tag": {
            "name": "add_new_tag",
            "location": 24,
            "return": [
                "medtagger.database.models.LabelTag"
            ],
            "arguments": {
                "key": [],
                "name": [],
                "tools": [],
                "task_id": []
            }
        },
        "delete_tag_by_key": {
            "name": "delete_tag_by_key",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        },
        "update": {
            "name": "update",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [],
                "name": [],
                "tools": [],
                "task_id": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "label_tag_key": []
            }
        },
        "enable": {
            "name": "enable",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "label_tag_key": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/roles.py": {
        "get_all_roles": {
            "name": "get_all_roles",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_role_with_name": {
            "name": "get_role_with_name",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "role_name": []
            }
        },
        "set_user_role": {
            "name": "set_user_role",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [],
                "role_name": []
            }
        },
        "role_exists": {
            "name": "role_exists",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "role_name": []
            }
        },
        "add_role": {
            "name": "add_role",
            "location": 45,
            "return": [
                "medtagger.database.models.Role"
            ],
            "arguments": {
                "role_name": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/scans.py": {
        "get_paginated_scans": {
            "name": "get_paginated_scans",
            "location": 12,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "dataset_key": [],
                "page": [],
                "per_page": []
            }
        },
        "get_all_scans": {
            "name": "get_all_scans",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_scan_by_id": {
            "name": "get_scan_by_id",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "scan_id": []
            }
        },
        "get_random_scan": {
            "name": "get_random_scan",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "user": []
            }
        },
        "delete_scan_by_id": {
            "name": "delete_scan_by_id",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_id": []
            }
        },
        "add_new_scan": {
            "name": "add_new_scan",
            "location": 72,
            "return": [
                "medtagger.database.models.Scan"
            ],
            "arguments": {
                "dataset": [],
                "number_of_slices": [],
                "user": []
            }
        },
        "try_to_mark_scan_as_stored": {
            "name": "try_to_mark_scan_as_stored",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "scan_id": []
            }
        },
        "increase_skip_count_of_a_scan": {
            "name": "increase_skip_count_of_a_scan",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "scan_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/slices.py": {
        "get_slice_by_id": {
            "name": "get_slice_by_id",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "slice_id": []
            }
        },
        "get_slices_by_scan_id": {
            "name": "get_slices_by_scan_id",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "scan_id": [],
                "orientation": []
            }
        },
        "get_slices_ids_for_labeled_scans": {
            "name": "get_slices_ids_for_labeled_scans",
            "location": 29,
            "return": [
                "set"
            ],
            "arguments": {
                "label_elements": []
            }
        },
        "delete_slice": {
            "name": "delete_slice",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "_slice": []
            }
        },
        "get_slice_original_image": {
            "name": "get_slice_original_image",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "slice_id": []
            }
        },
        "get_slice_converted_image": {
            "name": "get_slice_converted_image",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "slice_id": []
            }
        },
        "store_original_image": {
            "name": "store_original_image",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "slice_id": [],
                "image": []
            }
        },
        "store_converted_image": {
            "name": "store_converted_image",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "slice_id": [],
                "image": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/tasks.py": {
        "get_all_tasks": {
            "name": "get_all_tasks",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "include_disabled": []
            }
        },
        "get_task_by_key": {
            "name": "get_task_by_key",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": []
            }
        },
        "add_task": {
            "name": "add_task",
            "location": 28,
            "return": [
                "medtagger.database.models.Task"
            ],
            "arguments": {
                "key": [],
                "name": [],
                "image_path": [],
                "datasets_keys": [],
                "description": [],
                "label_examples": [],
                "tags": []
            }
        },
        "assign_label_tag": {
            "name": "assign_label_tag",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "task_key": []
            }
        },
        "unassign_label_tag": {
            "name": "unassign_label_tag",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "task_key": []
            }
        },
        "update": {
            "name": "update",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "task_key": [],
                "name": [],
                "image_path": [],
                "datasets_keys": [],
                "description": [],
                "label_examples": []
            }
        },
        "update_parameter_if_needed": {
            "name": "update_parameter_if_needed",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [],
                "name": [],
                "value": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "task_key": []
            }
        },
        "enable": {
            "name": "enable",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "task_key": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/users.py": {
        "add_new_user": {
            "name": "add_new_user",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "new_user": []
            }
        },
        "get_all_users": {
            "name": "get_all_users",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_user_by_email": {
            "name": "get_user_by_email",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "user_email": []
            }
        },
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "user_id": []
            }
        },
        "set_user_info": {
            "name": "set_user_info",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "first_name": [],
                "last_name": []
            }
        },
        "set_user_settings": {
            "name": "set_user_settings",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "name": [],
                "value": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/repositories/__init__.py": {},
    "MedTagger-master/backend/medtagger/storage/models.py": {},
    "MedTagger-master/backend/medtagger/storage/__init__.py": {
        "create_session": {
            "name": "create_session",
            "location": 20,
            "return": [],
            "arguments": {
                "use_gevent": []
            }
        },
        "create_connection": {
            "name": "create_connection",
            "location": 30,
            "return": [],
            "arguments": {
                "use_gevent": []
            }
        },
        "is_alive": {
            "name": "is_alive",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/workers/celery_configuration.py": {
        "get_all_modules_with_tasks": {
            "name": "get_all_modules_with_tasks",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "setup_logging_handler": {
            "name": "setup_logging_handler",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "process_initialization": {
            "name": "process_initialization",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/medtagger/workers/conversion.py": {
        "convert_scan_to_png": {
            "name": "convert_scan_to_png",
            "location": 26,
            "return": [],
            "arguments": {
                "scan_id": []
            }
        },
        "_convert_scan_in_all_axes": {
            "name": "_convert_scan_in_all_axes",
            "location": 70,
            "return": [],
            "arguments": {
                "dicom_images": [],
                "slices": [],
                "scan": []
            }
        },
        "_prepare_slices_in_y_orientation": {
            "name": "_prepare_slices_in_y_orientation",
            "location": 96,
            "return": [],
            "arguments": {
                "normalized_scan": [],
                "scan": []
            }
        },
        "_prepare_slices_in_x_orientation": {
            "name": "_prepare_slices_in_x_orientation",
            "location": 111,
            "return": [],
            "arguments": {
                "normalized_scan": [],
                "scan": []
            }
        },
        "_convert_to_png_and_store": {
            "name": "_convert_to_png_and_store",
            "location": 126,
            "return": [],
            "arguments": {
                "_slice": [],
                "slice_pixels": []
            }
        },
        "_convert_slice_pixels_to_png": {
            "name": "_convert_slice_pixels_to_png",
            "location": 138,
            "return": [],
            "arguments": {
                "slice_pixels": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/workers/storage.py": {
        "parse_dicom_and_update_slice": {
            "name": "parse_dicom_and_update_slice",
            "location": 19,
            "return": [],
            "arguments": {
                "slice_id": []
            }
        },
        "trigger_scan_conversion_if_needed": {
            "name": "trigger_scan_conversion_if_needed",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_id": []
            }
        }
    },
    "MedTagger-master/backend/medtagger/workers/__init__.py": {},
    "MedTagger-master/backend/scripts/convert_dicoms_to_png.py": {},
    "MedTagger-master/backend/scripts/dev__add_default_accounts.py": {
        "insert_admin_account": {
            "name": "insert_admin_account",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/scripts/import_data.py": {},
    "MedTagger-master/backend/scripts/sync_configuration.py": {
        "sync_configuration": {
            "name": "sync_configuration",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration": []
            }
        },
        "_sync_datasets": {
            "name": "_sync_datasets",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration": []
            }
        },
        "_sync_tasks": {
            "name": "_sync_tasks",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration": []
            }
        },
        "_sync_label_tags_in_task": {
            "name": "_sync_label_tags_in_task",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration": [],
                "task_key": []
            }
        },
        "_add_label_tag": {
            "name": "_add_label_tag",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "db_task_id": []
            }
        },
        "run": {
            "name": "run",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/scripts/utils.py": {
        "user_agrees": {
            "name": "user_agrees",
            "location": 4,
            "return": [],
            "arguments": {
                "prompt_message": []
            }
        }
    },
    "MedTagger-master/backend/scripts/__init__.py": {},
    "MedTagger-master/backend/tests/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/conftest.py": {
        "prepare_environment": {
            "name": "prepare_environment",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "synchronous_celery": {
            "name": "synchronous_celery",
            "location": 35,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "pytest_keyboard_interrupt": {
            "name": "pytest_keyboard_interrupt",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "excinfo": []
            }
        },
        "get_token_for_logged_in_user": {
            "name": "get_token_for_logged_in_user",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "role": []
            }
        },
        "_clear_databases": {
            "name": "_clear_databases",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/tests/functional_tests/helpers.py": {
        "create_tag_and_assign_to_task": {
            "name": "create_tag_and_assign_to_task",
            "location": 16,
            "return": [
                "models.LabelTag"
            ],
            "arguments": {
                "key": [],
                "name": [],
                "task_key": [],
                "tools": []
            }
        },
        "prepare_scan_and_tag_for_labeling": {
            "name": "prepare_scan_and_tag_for_labeling",
            "location": 30,
            "return": [
                "Tuple[(models.Scan, models.LabelTag)]"
            ],
            "arguments": {}
        },
        "prepare_empty_label": {
            "name": "prepare_empty_label",
            "location": 41,
            "return": [
                "models.Label"
            ],
            "arguments": {
                "scan": [],
                "user": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_adding_new_label.py": {
        "test_add_brush_label": {
            "name": "test_add_brush_label",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_add_point_label": {
            "name": "test_add_point_label",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_add_chain_label": {
            "name": "test_add_chain_label",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_add_chain_label_not_enough_points": {
            "name": "test_add_chain_label_not_enough_points",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_add_label_with_tag_from_other_task": {
            "name": "test_add_label_with_tag_from_other_task",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_alembic_migrations.py": {
        "test_if_developer_commited_migrations": {
            "name": "test_if_developer_commited_migrations",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_basic_flow.py": {
        "test_basic_flow": {
            "name": "test_basic_flow",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_basic_flow_with_predefined_label": {
            "name": "test_basic_flow_with_predefined_label",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_deleting_scan.py": {
        "test_delete_scan_without_slices": {
            "name": "test_delete_scan_without_slices",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_delete_scan_with_slices": {
            "name": "test_delete_scan_with_slices",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_delete_scan_with_labels": {
            "name": "test_delete_scan_with_labels",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_labels_repository.py": {
        "test_get_predefined_label_for_scan_in_task__no_predefined_label": {
            "name": "test_get_predefined_label_for_scan_in_task__no_predefined_label",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_predefined_label_for_scan_in_task__label_that_is_not_predefined": {
            "name": "test_get_predefined_label_for_scan_in_task__label_that_is_not_predefined",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_predefined_label_for_scan_in_task__predefined_label": {
            "name": "test_get_predefined_label_for_scan_in_task__predefined_label",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_predefined_label_for_scan_in_task__predefined_label_for_given_task": {
            "name": "test_get_predefined_label_for_scan_in_task__predefined_label_for_given_task",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_predefined_brush_label_elements": {
            "name": "test_get_predefined_brush_label_elements",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_scan_upload.py": {
        "test_scan_upload_and_conversion": {
            "name": "test_scan_upload_and_conversion",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "fixture_problems_with_storage": {
            "name": "fixture_problems_with_storage",
            "location": 70,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_scan_upload_with_retrying": {
            "name": "test_scan_upload_with_retrying",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "fixture_problems_with_storage": [],
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_settings.py": {
        "test_do_not_show_tutorial_again": {
            "name": "test_do_not_show_tutorial_again",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_skipping_a_scan.py": {
        "test_skipping_a_scan": {
            "name": "test_skipping_a_scan",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        },
        "test_skipping_a_scan_that_doesnt_exist": {
            "name": "test_skipping_a_scan_that_doesnt_exist",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_status.py": {
        "test_status_endpoint": {
            "name": "test_status_endpoint",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_survey.py": {
        "test_adding_new_survey": {
            "name": "test_adding_new_survey",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_adding_new_response_for_survey": {
            "name": "test_adding_new_response_for_survey",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_tasks.py": {
        "test_add_task": {
            "name": "test_add_task",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_tools_and_tags.py": {
        "test_add_label_non_existing_tag": {
            "name": "test_add_label_non_existing_tag",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_add_label_non_supported_tool": {
            "name": "test_add_label_non_supported_tool",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_add_label_missing_tag": {
            "name": "test_add_label_missing_tag",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_add_label_missing_tool": {
            "name": "test_add_label_missing_tool",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_add_label_wrong_tool_for_tag": {
            "name": "test_add_label_wrong_tool_for_tag",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/test_users.py": {
        "test_basic_user_flow": {
            "name": "test_basic_user_flow",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_upgrade_to_doctor_role": {
            "name": "test_upgrade_to_doctor_role",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_ownership": {
            "name": "test_ownership",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": [],
                "synchronous_celery": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/__init__.py": {
        "get_api_client": {
            "name": "get_api_client",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "get_web_socket_client": {
            "name": "get_web_socket_client",
            "location": 14,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "get_headers": {
            "name": "get_headers",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/tests/functional_tests/api/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/api/scans/test_fetching_scans.py": {
        "test_get_paginated_scans": {
            "name": "test_get_paginated_scans",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_paginated_scans_by_volunteer": {
            "name": "test_get_paginated_scans_by_volunteer",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_get_paginated_scans_with_invalid_arguments": {
            "name": "test_get_paginated_scans_with_invalid_arguments",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/api/scans/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/ground_truth/test_generator.py": {
        "test_data_set_generator": {
            "name": "test_data_set_generator",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/ground_truth/algorithms/test_dbscan.py": {
        "test_dbscan_algorithm": {
            "name": "test_dbscan_algorithm",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/algorithms/test_gaussian_mixture_models.py": {
        "test_gaussian_mixture_models_algorithm": {
            "name": "test_gaussian_mixture_models_algorithm",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/algorithms/test_k_means.py": {
        "test_k_means_algorithm": {
            "name": "test_k_means_algorithm",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/algorithms/test_majority_voting.py": {
        "test_majority_voting_algorithm": {
            "name": "test_majority_voting_algorithm",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/algorithms/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/ground_truth/parsers/test_chain.py": {
        "test_parsing_chain_label_elements": {
            "name": "test_parsing_chain_label_elements",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_chain_intersection_over_union": {
            "name": "test_chain_intersection_over_union",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/parsers/test_rectangle.py": {
        "test_parsing_rectangle_label_elements": {
            "name": "test_parsing_rectangle_label_elements",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_rectangle_intersection_over_union": {
            "name": "test_rectangle_intersection_over_union",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/ground_truth/parsers/__init__.py": {},
    "MedTagger-master/backend/tests/functional_tests/scripts/test_sync_configuration.py": {
        "test_sync_with_empty_database": {
            "name": "test_sync_with_empty_database",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_updated_names": {
            "name": "test_sync_with_updated_names",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_tools_in_tag": {
            "name": "test_sync_with_changed_tools_in_tag",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_tags_in_task": {
            "name": "test_sync_with_changed_tags_in_task",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_task_in_dataset": {
            "name": "test_sync_with_changed_task_in_dataset",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_dataset_and_reused_task": {
            "name": "test_sync_with_changed_dataset_and_reused_task",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_description": {
            "name": "test_sync_with_changed_description",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_changed_label_examples": {
            "name": "test_sync_with_changed_label_examples",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_missing_label_examples": {
            "name": "test_sync_with_missing_label_examples",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        },
        "test_sync_with_missing_description": {
            "name": "test_sync_with_missing_description",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "prepare_environment": []
            }
        }
    },
    "MedTagger-master/backend/tests/functional_tests/scripts/__init__.py": {},
    "MedTagger-master/backend/tests/unit_tests/test_config.py": {
        "test_get_default_values_for_api": {
            "name": "test_get_default_values_for_api",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/tests/unit_tests/__init__.py": {},
    "MedTagger-master/backend/tests/unit_tests/api/__init__.py": {
        "get_test_application": {
            "name": "get_test_application",
            "location": 7,
            "return": [],
            "arguments": {
                "mocker": []
            }
        }
    },
    "MedTagger-master/backend/tests/unit_tests/api/auth/test_business.py": {
        "get_user_by_email_success_fixture": {
            "name": "get_user_by_email_success_fixture",
            "location": 14,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "get_user_by_email_failure_fixture": {
            "name": "get_user_by_email_failure_fixture",
            "location": 22,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "get_role_fixture": {
            "name": "get_role_fixture",
            "location": 30,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "wrong_password_fixture": {
            "name": "wrong_password_fixture",
            "location": 38,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_user_user_exists": {
            "name": "test_create_user_user_exists",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "get_user_by_email_success_fixture": []
            }
        },
        "test_create_user_missing_role": {
            "name": "test_create_user_missing_role",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "get_user_by_email_failure_fixture": [],
                "get_role_fixture": []
            }
        },
        "test_sign_in_user_user_does_not_exists": {
            "name": "test_sign_in_user_user_does_not_exists",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "get_user_by_email_failure_fixture": []
            }
        },
        "test_sign_in_user_wrong_password": {
            "name": "test_sign_in_user_wrong_password",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "get_user_by_email_success_fixture": [],
                "wrong_password_fixture": []
            }
        }
    },
    "MedTagger-master/backend/tests/unit_tests/api/auth/test_service.py": {
        "create_user_exception_fixture": {
            "name": "create_user_exception_fixture",
            "location": 12,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "sign_in_wrong_password_fixture": {
            "name": "sign_in_wrong_password_fixture",
            "location": 20,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_user_user_already_exist": {
            "name": "test_create_user_user_already_exist",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "create_user_exception_fixture": []
            }
        },
        "test_create_user_password_too_short": {
            "name": "test_create_user_password_too_short",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_user_email_missing": {
            "name": "test_create_user_email_missing",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_sign_in_wrong_password": {
            "name": "test_sign_in_wrong_password",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "sign_in_wrong_password_fixture": []
            }
        }
    },
    "MedTagger-master/backend/tests/unit_tests/api/auth/__init__.py": {},
    "MedTagger-master/backend/tests/unit_tests/api/core/test_business.py": {
        "test_success": {
            "name": "test_success",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "MedTagger-master/backend/tests/unit_tests/api/core/test_service.py": {
        "success_fixture": {
            "name": "success_fixture",
            "location": 11,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_status_endpoint": {
            "name": "test_status_endpoint",
            "location": 18,
            "return": [],
            "arguments": {
                "mocker": [],
                "success_fixture": []
            }
        }
    },
    "MedTagger-master/backend/tests/unit_tests/api/core/__init__.py": {}
}
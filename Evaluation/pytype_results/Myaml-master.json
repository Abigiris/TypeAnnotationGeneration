{
    "Myaml-master/examples/example.py": {},
    "Myaml-master/src/setup.py": {},
    "Myaml-master/src/benchmarks/load_benchmark.py": {},
    "Myaml-master/src/myaml/exceptions.py": {
        "TokenizationException.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "context": []
            }
        },
        "TokenizationException.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/myaml/__init__.py": {},
    "Myaml-master/src/myaml/core/nodes.py": {},
    "Myaml-master/src/myaml/core/__init__.py": {},
    "Myaml-master/src/myaml/dumping/node_from_object.py": {
        "node_from_object": {
            "name": "node_from_object",
            "location": 10,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_1": {
            "name": "_1",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_2": {
            "name": "_2",
            "location": 20,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_3": {
            "name": "_3",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "Myaml-master/src/myaml/dumping/string_from_node.py": {
        "string_from_node": {
            "name": "string_from_node",
            "location": 10,
            "return": [],
            "arguments": {
                "node": [],
                "indentLevel": [],
                "indentSize": []
            }
        },
        "_1": {
            "name": "_1",
            "location": 15,
            "return": [],
            "arguments": {
                "node": [],
                "indentLevel": [],
                "indentSize": []
            }
        },
        "_2": {
            "name": "_2",
            "location": 20,
            "return": [],
            "arguments": {
                "node": [],
                "indentLevel": [],
                "indentSize": []
            }
        },
        "_3": {
            "name": "_3",
            "location": 34,
            "return": [],
            "arguments": {
                "node": [],
                "indentLevel": [],
                "indentSize": []
            }
        }
    },
    "Myaml-master/src/myaml/dumping/__init__.py": {
        "dump": {
            "name": "dump",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "indentSize": []
            }
        }
    },
    "Myaml-master/src/myaml/loading/line.py": {
        "line_from_tokens": {
            "name": "line_from_tokens",
            "location": 33,
            "return": [
                "Line"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "lines_from_tokens": {
            "name": "lines_from_tokens",
            "location": 44,
            "return": [
                "List[Line]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "Line.is_scalar": {
            "name": "is_scalar",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_mapping": {
            "name": "is_mapping",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_sequence": {
            "name": "is_sequence",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/myaml/loading/node_from_lines.py": {
        "node_from_lines": {
            "name": "node_from_lines",
            "location": 10,
            "return": [
                "Union[(myaml.core.nodes.MappingNode, myaml.core.nodes.ScalarNode, myaml.core.nodes.SequenceNode)]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "scalar_node_from_lines": {
            "name": "scalar_node_from_lines",
            "location": 22,
            "return": [
                "myaml.core.nodes.ScalarNode"
            ],
            "arguments": {
                "lines": []
            }
        },
        "mapping_node_from_lines": {
            "name": "mapping_node_from_lines",
            "location": 26,
            "return": [
                "myaml.core.nodes.MappingNode"
            ],
            "arguments": {
                "lines": []
            }
        },
        "get_item_lines": {
            "name": "get_item_lines",
            "location": 35,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "get_key_value_node": {
            "name": "get_key_value_node",
            "location": 53,
            "return": [
                "Tuple[(myaml.core.nodes.ScalarNode, Any)]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "sequence_node_from_lines": {
            "name": "sequence_node_from_lines",
            "location": 70,
            "return": [
                "myaml.core.nodes.SequenceNode"
            ],
            "arguments": {
                "lines": []
            }
        },
        "get_value_lines": {
            "name": "get_value_lines",
            "location": 77,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "lines": []
            }
        }
    },
    "Myaml-master/src/myaml/loading/object_from_node.py": {
        "object_from_node": {
            "name": "object_from_node",
            "location": 8,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_1": {
            "name": "_1",
            "location": 13,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_2": {
            "name": "_2",
            "location": 18,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_3": {
            "name": "_3",
            "location": 28,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "Myaml-master/src/myaml/loading/tokenizer.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 11,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "string": []
            }
        },
        "get_indent_size": {
            "name": "get_indent_size",
            "location": 29,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "string": []
            }
        },
        "State.transition": {
            "name": "transition",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "StartState.transition": {
            "name": "transition",
            "location": 49,
            "return": [
                "Tuple[(Union[(CharacterState, CommentState, DashState, SpaceState, StartState)], List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "CharacterState.transition": {
            "name": "transition",
            "location": 66,
            "return": [
                "Tuple[(Union[(CharacterState, ColonState, SpaceInCharacterState, StartState)], List[Union[(Newline, Value)]])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "ColonState.transition": {
            "name": "transition",
            "location": 82,
            "return": [
                "Tuple[(Union[(CharacterState, StartState)], List[Union[(Newline, Separator, Value)]])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "SpaceInCharacterState.transition": {
            "name": "transition",
            "location": 95,
            "return": [
                "Tuple[(Union[(CharacterState, CommentState)], List[Value])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "SpaceState.transition": {
            "name": "transition",
            "location": 106,
            "return": [
                "Tuple[(Union[(CharacterState, CommentState, DashState, SpaceState)], List[Indent])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "DashState.transition": {
            "name": "transition",
            "location": 129,
            "return": [
                "Tuple[(Union[(CharacterState, SequenceIndentState)], List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "SequenceIndentState.transition": {
            "name": "transition",
            "location": 140,
            "return": [
                "Tuple[(Union[(CharacterState, DashState, SequenceIndentState)], List[SequenceIndent])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "CommentState.transition": {
            "name": "transition",
            "location": 158,
            "return": [
                "Tuple[(Union[(CommentState, StartState)], List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "inp": []
            }
        }
    },
    "Myaml-master/src/myaml/loading/__init__.py": {
        "load": {
            "name": "load",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": []
            }
        }
    },
    "Myaml-master/src/tests/__init__.py": {},
    "Myaml-master/src/tests/integration/myaml_test.py": {
        "TestLoad.test_loading": {
            "name": "test_loading",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "string": [],
                "expected": []
            }
        },
        "TestLoad.test_raise_exception": {
            "name": "test_raise_exception",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "string": [],
                "expectedException": [],
                "message": []
            }
        },
        "TestDump.test_dumping": {
            "name": "test_dumping",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expected": [],
                "obj": []
            }
        }
    },
    "Myaml-master/src/tests/integration/__init__.py": {},
    "Myaml-master/src/tests/unit/__init__.py": {},
    "Myaml-master/src/tests/unit/dumping/node_from_object_test.py": {
        "TestScalarFromObject.test_from_object": {
            "name": "test_from_object",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMappingFromObject.test_from_object": {
            "name": "test_from_object",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromObject.test_from_object": {
            "name": "test_from_object",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/tests/unit/dumping/string_from_node_test.py": {
        "TestStringFromNode.test_to_object": {
            "name": "test_to_object",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringFromNode.test_to_object_complex": {
            "name": "test_to_object_complex",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringFromNode.test_to_object_complex_specify_indent_size": {
            "name": "test_to_object_complex_specify_indent_size",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/tests/unit/dumping/__init__.py": {},
    "Myaml-master/src/tests/unit/loading/line_test.py": {
        "TestIsScalar.test_is_scalar": {
            "name": "test_is_scalar",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMapping.test_is_mapping": {
            "name": "test_is_mapping",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsSequence.test_is_sequence": {
            "name": "test_is_sequence",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinesFromTokens.test_lines_from_tokens": {
            "name": "test_lines_from_tokens",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/tests/unit/loading/node_from_lines_test.py": {
        "TestNodeFromLines.test_mapping_node": {
            "name": "test_mapping_node",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeFromLines.test_mapping_node_2": {
            "name": "test_mapping_node_2",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeFromLines.test_sequence_node": {
            "name": "test_sequence_node",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeFromLines.test_sequence_node_2": {
            "name": "test_sequence_node_2",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeFromLines.test_scalar_node": {
            "name": "test_scalar_node",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/tests/unit/loading/object_from_node_test.py": {
        "TestObjectFromScalarNode.test_to_object": {
            "name": "test_to_object",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectFromSequenceNode.test_to_object": {
            "name": "test_to_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectFromMappingNode.test_to_object": {
            "name": "test_to_object",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Myaml-master/src/tests/unit/loading/tokenizer_test.py": {
        "TestTokenizer.test_key_value": {
            "name": "test_key_value",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "expectedException": []
            }
        }
    },
    "Myaml-master/src/tests/unit/loading/__init__.py": {}
}
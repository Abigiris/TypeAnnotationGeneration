{
    "Project-KnowNet-master/runtest.py": {},
    "Project-KnowNet-master/UI.py": {
        "load": {
            "name": "load",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "do_construction": {
            "name": "do_construction",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "do_text": {
            "name": "do_text",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "do_author": {
            "name": "do_author",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "do_paper": {
            "name": "do_paper",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "do_other": {
            "name": "do_other",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "do_analysis": {
            "name": "do_analysis",
            "location": 205,
            "return": [],
            "arguments": {}
        }
    },
    "Project-KnowNet-master/data_fetcher/id_manager.py": {
        "IDManager.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ],
                "key": [
                    "data_platform.datasource.abc.doc.DocKeyPair"
                ],
                "auto_inc": [
                    "data_platform.datasource.abc.doc.DocKeyPair"
                ]
            }
        },
        "IDManager._set_id_increasement": {
            "name": "_set_id_increasement",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_value": [
                    "int"
                ]
            }
        },
        "IDManager.get_id": {
            "name": "get_id",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "IDManager.get_name": {
            "name": "get_name",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "int"
                ]
            }
        },
        "IDManager._get_db": {
            "name": "_get_db",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/main.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [],
                "paper_set": [],
                "num_result": []
            }
        },
        "clear_database": {
            "name": "clear_database",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Project-KnowNet-master/data_fetcher/__init__.py": {},
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/elsclient.py": {
        "ElsClient.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [],
                "inst_token": [],
                "num_res": [],
                "local_dir": [],
                "headers_accept": []
            }
        },
        "ElsClient.api_key": {
            "name": "api_key",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "api_key": []
            }
        },
        "ElsClient.inst_token": {
            "name": "inst_token",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "inst_token": []
            }
        },
        "ElsClient.num_res": {
            "name": "num_res",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "numRes": []
            }
        },
        "ElsClient.local_dir": {
            "name": "local_dir",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "path_str": []
            }
        },
        "ElsClient.req_status": {
            "name": "req_status",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsClient.getBaseURL": {
            "name": "getBaseURL",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElsClient.exec_request": {
            "name": "exec_request",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "URL": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/elsdoc.py": {
        "FullDoc.title": {
            "name": "title",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FullDoc.uri": {
            "name": "uri",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FullDoc.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "sd_pii": [],
                "doi": []
            }
        },
        "FullDoc.read": {
            "name": "read",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        },
        "AbsDoc.title": {
            "name": "title",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsDoc.uri": {
            "name": "uri",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsDoc.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "scp_id": []
            }
        },
        "AbsDoc.read": {
            "name": "read",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/elsentity.py": {
        "ElsEntity.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "ElsEntity.uri": {
            "name": "uri",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "ElsEntity.id": {
            "name": "id",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsEntity.int_id": {
            "name": "int_id",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsEntity.data": {
            "name": "data",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsEntity.client": {
            "name": "client",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "elsClient": []
            }
        },
        "ElsEntity.err_msg": {
            "name": "err_msg",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsEntity.read": {
            "name": "read",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "payloadType": [],
                "elsClient": []
            }
        },
        "ElsEntity.write": {
            "name": "write",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/elsprofile.py": {
        "ElsProfile.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "ElsProfile.doc_list": {
            "name": "doc_list",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsProfile.read_docs": {
            "name": "read_docs",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "payloadType": [],
                "els_client": []
            }
        },
        "ElsProfile.write_docs": {
            "name": "write_docs",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElsAuthor.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "author_id": []
            }
        },
        "ElsAuthor.first_name": {
            "name": "first_name",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsAuthor.last_name": {
            "name": "last_name",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsAuthor.full_name": {
            "name": "full_name",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsAuthor.read": {
            "name": "read",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        },
        "ElsAuthor.read_docs": {
            "name": "read_docs",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        },
        "ElsAuthor.read_metrics": {
            "name": "read_metrics",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        },
        "ElsAffil.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "affil_id": []
            }
        },
        "ElsAffil.name": {
            "name": "name",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsAffil.read": {
            "name": "read",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        },
        "ElsAffil.read_docs": {
            "name": "read_docs",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "els_client": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/elssearch.py": {
        "ElsSearch.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "index": []
            }
        },
        "ElsSearch.query": {
            "name": "query",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "ElsSearch.index": {
            "name": "index",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ElsSearch.results": {
            "name": "results",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsSearch.tot_num_res": {
            "name": "tot_num_res",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsSearch.num_res": {
            "name": "num_res",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsSearch.uri": {
            "name": "uri",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElsSearch.execute": {
            "name": "execute",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "els_client": [],
                "num_result": []
            }
        },
        "ElsSearch.hasAllResults": {
            "name": "hasAllResults",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/log_util.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 17,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/elsapy/__init__.py": {},
    "Project-KnowNet-master/data_fetcher/dependencies/xplore/xploreapi.py": {
        "XPLORE.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apiKey": []
            }
        },
        "XPLORE.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "XPLORE.__ne__": {
            "name": "__ne__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "XPLORE.dataType": {
            "name": "dataType",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputType": []
            }
        },
        "XPLORE.dataFormat": {
            "name": "dataFormat",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputDataFormat": []
            }
        },
        "XPLORE.startingResult": {
            "name": "startingResult",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "XPLORE.maximumResults": {
            "name": "maximumResults",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maximum": []
            }
        },
        "XPLORE.resultsFilter": {
            "name": "resultsFilter",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filterParam": [],
                "value": []
            }
        },
        "XPLORE.resultsSorting": {
            "name": "resultsSorting",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "order": []
            }
        },
        "XPLORE.searchField": {
            "name": "searchField",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "XPLORE.abstractText": {
            "name": "abstractText",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.affiliationText": {
            "name": "affiliationText",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.articleNumber": {
            "name": "articleNumber",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.articleTitle": {
            "name": "articleTitle",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.authorText": {
            "name": "authorText",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.authorFacetText": {
            "name": "authorFacetText",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.booleanText": {
            "name": "booleanText",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.contentTypeFacetText": {
            "name": "contentTypeFacetText",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.doi": {
            "name": "doi",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.facetText": {
            "name": "facetText",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.indexTerms": {
            "name": "indexTerms",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.isbn": {
            "name": "isbn",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.issn": {
            "name": "issn",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.issueNumber": {
            "name": "issueNumber",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.metaDataText": {
            "name": "metaDataText",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XPLORE.publicationFacetText": {
            "name": "publicationFacetText",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.publisherFacetText": {
            "name": "publisherFacetText",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.publicationTitle": {
            "name": "publicationTitle",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.publicationYear": {
            "name": "publicationYear",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.queryText": {
            "name": "queryText",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.thesaurusTerms": {
            "name": "thesaurusTerms",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.addParameter": {
            "name": "addParameter",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "XPLORE.callAPI": {
            "name": "callAPI",
            "location": 257,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "debugModeOff": []
            }
        },
        "XPLORE.buildQuery": {
            "name": "buildQuery",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XPLORE.queryAPI": {
            "name": "queryAPI",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "XPLORE.formatData": {
            "name": "formatData",
            "location": 307,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/dependencies/xplore/__init__.py": {},
    "Project-KnowNet-master/data_fetcher/ieee/ieee_fulltext_spider.py": {
        "IEEEFulltextSpider.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "article_number": [],
                "filename": [],
                "output_path": [],
                "log_file": [],
                "request_interval": []
            }
        },
        "IEEEFulltextSpider.execute": {
            "name": "execute",
            "location": 51,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/ieee/ieee_retrieval.py": {
        "IEEERetrieval.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "paper_id_manager": [
                    "data_fetcher.id_manager.IDManager"
                ],
                "offset": [
                    "int"
                ],
                "num_result": [
                    "int"
                ],
                "request_interval": [
                    "int"
                ],
                "paper_set": [
                    "str"
                ]
            }
        },
        "IEEERetrieval.retrieve": {
            "name": "retrieve",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEEERetrieval.parse": {
            "name": "parse",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEEERetrieval.save": {
            "name": "save",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbms": [
                    "data_platform.datasource.mongodb.MongoDBDS"
                ]
            }
        },
        "IEEERetrieval._save_one": {
            "name": "_save_one",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbms": [
                    "data_platform.datasource.mongodb.MongoDBDS"
                ],
                "parsed_result": [
                    "dict"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/parser/pdf_parser.py": {
        "PDFParser.parse": {
            "name": "parse",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "pdf_format": [
                    "dict"
                ]
            }
        },
        "PDFParser._extract_text": {
            "name": "_extract_text",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "chars": [],
                "x_tolerance": [],
                "y_tolerance": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/scopus/scopus_fulltext_spider.py": {
        "ScopusFulltextSpider.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doi": [
                    "str"
                ],
                "filename": [],
                "output_path": [],
                "config": [],
                "log_file": []
            }
        },
        "ScopusFulltextSpider.execute": {
            "name": "execute",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/scopus/scopus_metadata_spider.py": {
        "ScopusMetadataSpider.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doi": [
                    "str"
                ],
                "paper_id_manager": [
                    "data_fetcher.id_manager.IDManager"
                ],
                "config": [],
                "paper_set": [
                    "str"
                ]
            }
        },
        "ScopusMetadataSpider.execute": {
            "name": "execute",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopusMetadataSpider.read": {
            "name": "read",
            "location": 44,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopusMetadataSpider.save": {
            "name": "save",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbms": [
                    "data_platform.datasource.mongodb.MongoDBDS"
                ]
            }
        },
        "ScopusMetadataSpider.parse": {
            "name": "parse",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/scopus/scopus_retrieval.py": {
        "ScopusRetrieval.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "num_result": [],
                "config": []
            }
        },
        "ScopusRetrieval.retrieve": {
            "name": "retrieve",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopusRetrieval.get_doi_list": {
            "name": "get_doi_list",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_fetcher/scopus/__init__.py": {},
    "Project-KnowNet-master/data_platform/config.py": {
        "get_global_config": {
            "name": "get_global_config",
            "location": 166,
            "return": [
                "ConfigManager"
            ],
            "arguments": {
                "config_dicts": [
                    "ConfigDicts"
                ]
            }
        },
        "get_global_config_dicts": {
            "name": "get_global_config_dicts",
            "location": 179,
            "return": [
                "ConfigDicts"
            ],
            "arguments": {
                "config_files": [
                    "ConfigFiles"
                ]
            }
        },
        "get_global_config_files": {
            "name": "get_global_config_files",
            "location": 199,
            "return": [
                "ConfigFiles"
            ],
            "arguments": {}
        },
        "ConfigManager._check_str_key": {
            "name": "_check_str_key",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "layer": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager._check_wildcard_key": {
            "name": "_check_wildcard_key",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "layer": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager._check_conditions": {
            "name": "_check_conditions",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "layer": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "Dict[(str, Dict[(ConfigOpType, Any)])]"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager._handle_missing_key": {
            "name": "_handle_missing_key",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "layer": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager.check_subtree": {
            "name": "check_subtree",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "layer": [
                    "dict"
                ],
                "condition": [
                    "dict"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager.check_schema": {
            "name": "check_schema",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager._check_one_condition": {
            "name": "_check_one_condition",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [],
                "op": [
                    "ConfigOpType"
                ],
                "val": []
            }
        },
        "ConfigManager._check_one_node": {
            "name": "_check_one_node",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "condition": [
                    "Mapping[(ConfigOpType, Any)]"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager.check_node": {
            "name": "check_node",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Sequence"
                ],
                "condition": [
                    "Mapping"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "ConfigManager.check_get": {
            "name": "check_get",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Sequence"
                ],
                "condition": [
                    "Mapping"
                ],
                "strict": [
                    "bool"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/document.py": {
        "DocumentSet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Root"
                ],
                "metadata_dict": [
                    "Dict[(str, MetaData)]"
                ]
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [
                "Iterator[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "Section"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Document.id_": {
            "name": "id_",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Document.root": {
            "name": "root",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.metadatas": {
            "name": "metadatas",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.get_text": {
            "name": "get_text",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.get_sections": {
            "name": "get_sections",
            "location": 59,
            "return": [
                "List[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.get_paragraphs": {
            "name": "get_paragraphs",
            "location": 62,
            "return": [
                "Dict[(str, Paragraph)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.add_section": {
            "name": "add_section",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Section"
                ]
            }
        },
        "Document.clear_sections": {
            "name": "clear_sections",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.from_dict": {
            "name": "from_dict",
            "location": 89,
            "return": [
                "_TElement"
            ],
            "arguments": {
                "cls": [
                    "Type[_TElement]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Element.to_dict": {
            "name": "to_dict",
            "location": 93,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element._post_set_id": {
            "name": "_post_set_id",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element._set_document_id": {
            "name": "_set_document_id",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.get_text": {
            "name": "get_text",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.id_": {
            "name": "id_",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Element.document_id": {
            "name": "document_id",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Root.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section_list": [
                    "List[Section]"
                ]
            }
        },
        "Root.__iter__": {
            "name": "__iter__",
            "location": 144,
            "return": [
                "Iterator[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root.__getitem__": {
            "name": "__getitem__",
            "location": 147,
            "return": [
                "Section"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Root.from_dict": {
            "name": "from_dict",
            "location": 151,
            "return": [
                "_TRoot"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRoot]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Root.to_dict": {
            "name": "to_dict",
            "location": 159,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root._post_set_id": {
            "name": "_post_set_id",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root._set_document_id": {
            "name": "_set_document_id",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root.get_text": {
            "name": "get_text",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root.get_sections": {
            "name": "get_sections",
            "location": 176,
            "return": [
                "List[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Root.add_section": {
            "name": "add_section",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Section"
                ]
            }
        },
        "Root.clear_sections": {
            "name": "clear_sections",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MetaData.from_dict": {
            "name": "from_dict",
            "location": 198,
            "return": [
                "_TMetaData"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMetaData]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "MetaData.to_dict": {
            "name": "to_dict",
            "location": 205,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData._post_set_id": {
            "name": "_post_set_id",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData._set_document_id": {
            "name": "_set_document_id",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.get_text": {
            "name": "get_text",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.__getitem__": {
            "name": "__getitem__",
            "location": 220,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MetaData.__iter__": {
            "name": "__iter__",
            "location": 223,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.keys": {
            "name": "keys",
            "location": 226,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.values": {
            "name": "values",
            "location": 229,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaData.items": {
            "name": "items",
            "location": 232,
            "return": [
                "dict_items[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "Iterable[Element]"
                ]
            }
        },
        "Box.__getitem__": {
            "name": "__getitem__",
            "location": 243,
            "return": [
                "Element"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Box.__iter__": {
            "name": "__iter__",
            "location": 246,
            "return": [
                "Iterator[Element]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.get_text": {
            "name": "get_text",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.set_content": {
            "name": "set_content",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "Iterable[Element]"
                ]
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "Iterable[Box]"
                ]
            }
        },
        "Section.from_dict": {
            "name": "from_dict",
            "location": 266,
            "return": [
                "_TSection"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSection]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Section.to_dict": {
            "name": "to_dict",
            "location": 282,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section._post_set_id": {
            "name": "_post_set_id",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section._set_document_id": {
            "name": "_set_document_id",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.get_subsections": {
            "name": "get_subsections",
            "location": 302,
            "return": [
                "List[Section]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.get_paragraphs": {
            "name": "get_paragraphs",
            "location": 308,
            "return": [
                "List[Paragraph]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "Iterable[Inline]"
                ]
            }
        },
        "Paragraph.from_dict": {
            "name": "from_dict",
            "location": 322,
            "return": [
                "_TParagraph"
            ],
            "arguments": {
                "cls": [
                    "Type[_TParagraph]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Paragraph.to_dict": {
            "name": "to_dict",
            "location": 330,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph._post_set_id": {
            "name": "_post_set_id",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph._set_document_id": {
            "name": "_set_document_id",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.get_text": {
            "name": "get_text",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "Text.from_dict": {
            "name": "from_dict",
            "location": 360,
            "return": [
                "_TText"
            ],
            "arguments": {
                "cls": [
                    "Type[_TText]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Text.to_dict": {
            "name": "to_dict",
            "location": 372,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text._post_set_id": {
            "name": "_post_set_id",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text._set_document_id": {
            "name": "_set_document_id",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.get_text": {
            "name": "get_text",
            "location": 384,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": [
                    "str"
                ],
                "tag_text": [
                    "str"
                ],
                "tag_attr": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Tag.from_dict": {
            "name": "from_dict",
            "location": 398,
            "return": [
                "_TTag"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTag]"
                ],
                "init_dict": [
                    "dict"
                ]
            }
        },
        "Tag.to_dict": {
            "name": "to_dict",
            "location": 412,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag._post_set_id": {
            "name": "_post_set_id",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag._set_document_id": {
            "name": "_set_document_id",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_text": {
            "name": "get_text",
            "location": 427,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/data_platform/log.py": {},
    "Project-KnowNet-master/data_platform/__init__.py": {},
    "Project-KnowNet-master/data_platform/.reference/key_example.py": {},
    "Project-KnowNet-master/data_platform/.reference/schema_example.py": {},
    "Project-KnowNet-master/data_platform/datasource/arangodb.py": {
        "ArangoDBDS.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "ArangoDBDS.__del__": {
            "name": "__del__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArangoDBDS._filter_doc": {
            "name": "_filter_doc",
            "location": 45,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.clear": {
            "name": "clear",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArangoDBDS.flush": {
            "name": "flush",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArangoDBDS.reload": {
            "name": "reload",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArangoDBDS.create_doc": {
            "name": "create_doc",
            "location": 81,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.read_doc": {
            "name": "read_doc",
            "location": 100,
            "return": [
                "Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.update_doc": {
            "name": "update_doc",
            "location": 117,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.delete_doc": {
            "name": "delete_doc",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.create_graph": {
            "name": "create_graph",
            "location": 154,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "ArangoDBDS.create_node": {
            "name": "create_node",
            "location": 157,
            "return": [
                "List[data_platform.datasource.abc.graph.NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.create_edge": {
            "name": "create_edge",
            "location": 160,
            "return": [
                "List[data_platform.datasource.abc.graph.EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.read_graph": {
            "name": "read_graph",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "ArangoDBDS.read_node": {
            "name": "read_node",
            "location": 166,
            "return": [
                "Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.read_edge": {
            "name": "read_edge",
            "location": 169,
            "return": [
                "Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.update_graph": {
            "name": "update_graph",
            "location": 172,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "ArangoDBDS.update_node": {
            "name": "update_node",
            "location": 175,
            "return": [
                "List[data_platform.datasource.abc.graph.NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.update_edge": {
            "name": "update_edge",
            "location": 178,
            "return": [
                "List[data_platform.datasource.abc.graph.EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArangoDBDS.delete_graph": {
            "name": "delete_graph",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "ArangoDBDS.delete_node": {
            "name": "delete_node",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.delete_edge": {
            "name": "delete_edge",
            "location": 187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ]
            }
        },
        "ArangoDBDS.query": {
            "name": "query",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/exception.py": {},
    "Project-KnowNet-master/data_platform/datasource/json.py": {
        "JSONDS.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "JSONDS.__del__": {
            "name": "__del__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS._dump": {
            "name": "_dump",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS._load": {
            "name": "_load",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS._filter": {
            "name": "_filter",
            "location": 66,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "JSONDS.flush": {
            "name": "flush",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS.reload": {
            "name": "reload",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS.clear": {
            "name": "clear",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDS.query": {
            "name": "query",
            "location": 109,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "JSONDS.create_doc": {
            "name": "create_doc",
            "location": 112,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "JSONDS.read_doc": {
            "name": "read_doc",
            "location": 129,
            "return": [
                "Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "JSONDS.update_doc": {
            "name": "update_doc",
            "location": 138,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "JSONDS.delete_doc": {
            "name": "delete_doc",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/mongodb.py": {
        "MongoDBDS.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "MongoDBDS.__del__": {
            "name": "__del__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDBDS._filter": {
            "name": "_filter",
            "location": 42,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "MongoDBDS.get_db": {
            "name": "get_db",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDBDS.clear": {
            "name": "clear",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDBDS.flush": {
            "name": "flush",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDBDS.reload": {
            "name": "reload",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDBDS.create_doc": {
            "name": "create_doc",
            "location": 80,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MongoDBDS.read_doc": {
            "name": "read_doc",
            "location": 96,
            "return": [
                "Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "MongoDBDS.update_doc": {
            "name": "update_doc",
            "location": 110,
            "return": [
                "List[data_platform.datasource.abc.doc.DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MongoDBDS.delete_doc": {
            "name": "delete_doc",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "MongoDBDS.query": {
            "name": "query",
            "location": 136,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoDBDS.set_auto_increasement": {
            "name": "set_auto_increasement",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "data_platform.datasource.abc.doc.DocKeyVal"
                ]
            }
        },
        "MongoDBDS.get_next_value": {
            "name": "get_next_value",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "data_platform.datasource.abc.doc.DocKeyPair"
                ]
            }
        },
        "MongoDBDS.get_id": {
            "name": "get_id",
            "location": 173,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "data_platform.datasource.abc.doc.DocKeyVal"
                ]
            }
        },
        "MongoDBDS.get_doc_by_id": {
            "name": "get_doc_by_id",
            "location": 182,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "data_platform.datasource.abc.doc.DocIdPair"
                ]
            }
        },
        "MongoDBDS.insert_one": {
            "name": "insert_one",
            "location": 189,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "docset": [
                    "str"
                ],
                "id_": [],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MongoDBDS.query_and_update_doc": {
            "name": "query_and_update_doc",
            "location": 198,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "docset": [
                    "str"
                ],
                "query": [
                    "dict"
                ],
                "val": [
                    "dict"
                ]
            }
        },
        "MongoDBDS.delete_collections": {
            "name": "delete_collections",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docsets": [
                    "List[str]"
                ]
            }
        },
        "MongoDBDS.save_metadata": {
            "name": "save_metadata",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docset": [
                    "str"
                ],
                "metadata": [
                    "dict"
                ],
                "paper_set": [
                    "str"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/networkx.py": {
        "NetworkXDS.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "NetworkXDS.__del__": {
            "name": "__del__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS._dump": {
            "name": "_dump",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS._load": {
            "name": "_load",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS.flush": {
            "name": "flush",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS.reload": {
            "name": "reload",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS.clear": {
            "name": "clear",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkXDS.query": {
            "name": "query",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "NetworkXDS._filter_graph": {
            "name": "_filter_graph",
            "location": 96,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "NetworkXDS._filter_node": {
            "name": "_filter_node",
            "location": 121,
            "return": [
                "List[data_platform.datasource.abc.graph.NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ]
            }
        },
        "NetworkXDS._filter_edge": {
            "name": "_filter_edge",
            "location": 159,
            "return": [
                "List[data_platform.datasource.abc.graph.EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ]
            }
        },
        "NetworkXDS._create_one_graph": {
            "name": "_create_one_graph",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "NetworkXDS._update_one_graph": {
            "name": "_update_one_graph",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph_name": [
                    "str"
                ],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "NetworkXDS.create_graph": {
            "name": "create_graph",
            "location": 254,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "NetworkXDS.create_node": {
            "name": "create_node",
            "location": 265,
            "return": [
                "List[data_platform.datasource.abc.graph.NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "NetworkXDS.create_edge": {
            "name": "create_edge",
            "location": 279,
            "return": [
                "List[data_platform.datasource.abc.graph.EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "NetworkXDS.read_graph": {
            "name": "read_graph",
            "location": 293,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "NetworkXDS.read_node": {
            "name": "read_node",
            "location": 303,
            "return": [
                "Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ]
            }
        },
        "NetworkXDS.read_edge": {
            "name": "read_edge",
            "location": 315,
            "return": [
                "Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ]
            }
        },
        "NetworkXDS.update_graph": {
            "name": "update_graph",
            "location": 327,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "data_platform.datasource.abc.graph.GraphValType"
                ]
            }
        },
        "NetworkXDS.update_node": {
            "name": "update_node",
            "location": 337,
            "return": [
                "List[data_platform.datasource.abc.graph.NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "NetworkXDS.update_edge": {
            "name": "update_edge",
            "location": 350,
            "return": [
                "List[data_platform.datasource.abc.graph.EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ],
                "val": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "NetworkXDS.delete_graph": {
            "name": "delete_graph",
            "location": 363,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "NetworkXDS.delete_node": {
            "name": "delete_node",
            "location": 374,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(data_platform.datasource.abc.graph.NodeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.NodeKeyPair])]"
                ]
            }
        },
        "NetworkXDS.delete_edge": {
            "name": "delete_edge",
            "location": 387,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(data_platform.datasource.abc.graph.EdgeKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.graph.EdgeKeyPair])]"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/science_direct.py": {
        "ScienceDirectFactory.pack": {
            "name": "pack",
            "location": 21,
            "return": [
                "_doc.Document"
            ],
            "arguments": {
                "cls": [],
                "doc_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ScienceDirectFactory.unpack": {
            "name": "unpack",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "_doc.Document"
                ]
            }
        },
        "ScienceDirectDS.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "ScienceDirectDS._xml_files": {
            "name": "_xml_files",
            "location": 68,
            "return": [
                "List[pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "ScienceDirectDS._find_with_ns": {
            "name": "_find_with_ns",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "node": [],
                "query": [
                    "str"
                ]
            }
        },
        "ScienceDirectDS._find_one_with_ns": {
            "name": "_find_one_with_ns",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "node": [],
                "query": [
                    "str"
                ]
            }
        },
        "ScienceDirectDS._xpath": {
            "name": "_xpath",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "node": [],
                "query": [
                    "str"
                ]
            }
        },
        "ScienceDirectDS._xpath_one": {
            "name": "_xpath_one",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": [],
                "query": [
                    "str"
                ]
            }
        },
        "ScienceDirectDS._load": {
            "name": "_load",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScienceDirectDS._tag_without_ns": {
            "name": "_tag_without_ns",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "tag": [
                    "str"
                ]
            }
        },
        "ScienceDirectDS._parse_body": {
            "name": "_parse_body",
            "location": 129,
            "return": [
                "Tuple[(List[_doc.Section], Dict[(str, List[_doc.Element])])]"
            ],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "ScienceDirectDS._parse_tail": {
            "name": "_parse_tail",
            "location": 182,
            "return": [
                "_doc.MetaData"
            ],
            "arguments": {
                "self": [],
                "tail": []
            }
        },
        "ScienceDirectDS._parse_one": {
            "name": "_parse_one",
            "location": 265,
            "return": [
                "_doc.Document"
            ],
            "arguments": {
                "self": [],
                "xmlfile": [
                    "pathlib.Path"
                ]
            }
        },
        "ScienceDirectDS.create_doc": {
            "name": "create_doc",
            "location": 306,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ScienceDirectDS.read_doc": {
            "name": "read_doc",
            "location": 309,
            "return": [
                "Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "ScienceDirectDS.update_doc": {
            "name": "update_doc",
            "location": 329,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ScienceDirectDS.delete_doc": {
            "name": "delete_doc",
            "location": 332,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(data_platform.datasource.abc.doc.DocKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.doc.DocKeyPair])]"
                ]
            }
        },
        "ScienceDirectDS.query": {
            "name": "query",
            "location": 335,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/sqlite.py": {
        "SQLiteDS.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "SQLiteDS.connect": {
            "name": "connect",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDS.create_table": {
            "name": "create_table",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQLiteDS.delete_table": {
            "name": "delete_table",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQLiteDS._filter": {
            "name": "_filter",
            "location": 57,
            "return": [
                "List[data_platform.datasource.abc.row.RowKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.row.RowKeyPair, Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.row.RowKeyPair])]"
                ]
            }
        },
        "SQLiteDS.create_row": {
            "name": "create_row",
            "location": 87,
            "return": [
                "List[data_platform.datasource.abc.row.RowKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.row.RowKeyPair, Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.row.RowKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SQLiteDS.read_row": {
            "name": "read_row",
            "location": 97,
            "return": [
                "Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.row.RowKeyPair, Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.row.RowKeyPair])]"
                ]
            }
        },
        "SQLiteDS.update_row": {
            "name": "update_row",
            "location": 109,
            "return": [
                "List[data_platform.datasource.abc.row.RowKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.row.RowKeyPair, Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.row.RowKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SQLiteDS.delete_row": {
            "name": "delete_row",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(data_platform.datasource.abc.row.RowKeyPair, Dict[(data_platform.datasource.abc.row.RowKeyPair, Dict[(str, Any)])], List[data_platform.datasource.abc.row.RowKeyPair])]"
                ]
            }
        },
        "SQLiteDS.query": {
            "name": "query",
            "location": 136,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/__init__.py": {},
    "Project-KnowNet-master/data_platform/datasource/abc/base.py": {
        "BaseDataSource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "BaseDataSource.config": {
            "name": "config",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDataSource.query": {
            "name": "query",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": []
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/abc/doc.py": {
        "DocFactory.pack": {
            "name": "pack",
            "location": 38,
            "return": [
                "data_platform.document.Document"
            ],
            "arguments": {
                "cls": [],
                "doc_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DocFactory.unpack": {
            "name": "unpack",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "doc": [
                    "data_platform.document.Document"
                ]
            }
        },
        "DocDataSource.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_platform.config.ConfigManager"
                ]
            }
        },
        "DocDataSource._format_doc_key": {
            "name": "_format_doc_key",
            "location": 58,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ]
            }
        },
        "DocDataSource.create_doc": {
            "name": "create_doc",
            "location": 73,
            "return": [
                "List[DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DocDataSource.read_doc": {
            "name": "read_doc",
            "location": 77,
            "return": [
                "Dict[(DocKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ]
            }
        },
        "DocDataSource.bind_doc_factory": {
            "name": "bind_doc_factory",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "DocFactory"
                ]
            }
        },
        "DocDataSource.unbind_doc_factory": {
            "name": "unbind_doc_factory",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocDataSource.read_docset": {
            "name": "read_docset",
            "location": 86,
            "return": [
                "data_platform.document.DocumentSet"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ],
                "factory": [
                    "Optional[DocFactory]"
                ]
            }
        },
        "DocDataSource.update_doc": {
            "name": "update_doc",
            "location": 94,
            "return": [
                "List[DocKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DocDataSource.delete_doc": {
            "name": "delete_doc",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(DocKeyPair, Dict[(DocKeyPair, Dict[(str, Any)])], List[DocKeyPair])]"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/abc/graph.py": {
        "GraphDataSource.create_graph": {
            "name": "create_graph",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "GraphValType"
                ]
            }
        },
        "GraphDataSource.create_node": {
            "name": "create_node",
            "location": 63,
            "return": [
                "List[NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(NodeKeyPair, Dict[(NodeKeyPair, Dict[(str, Any)])], List[NodeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GraphDataSource.create_edge": {
            "name": "create_edge",
            "location": 67,
            "return": [
                "List[EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(EdgeKeyPair, Dict[(EdgeKeyPair, Dict[(str, Any)])], List[EdgeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GraphDataSource.read_graph": {
            "name": "read_graph",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "GraphDataSource.read_node": {
            "name": "read_node",
            "location": 75,
            "return": [
                "Dict[(NodeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(NodeKeyPair, Dict[(NodeKeyPair, Dict[(str, Any)])], List[NodeKeyPair])]"
                ]
            }
        },
        "GraphDataSource.read_edge": {
            "name": "read_edge",
            "location": 79,
            "return": [
                "Dict[(EdgeKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(EdgeKeyPair, Dict[(EdgeKeyPair, Dict[(str, Any)])], List[EdgeKeyPair])]"
                ]
            }
        },
        "GraphDataSource.update_graph": {
            "name": "update_graph",
            "location": 83,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ],
                "val": [
                    "GraphValType"
                ]
            }
        },
        "GraphDataSource.update_node": {
            "name": "update_node",
            "location": 87,
            "return": [
                "List[NodeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(NodeKeyPair, Dict[(NodeKeyPair, Dict[(str, Any)])], List[NodeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GraphDataSource.update_edge": {
            "name": "update_edge",
            "location": 91,
            "return": [
                "List[EdgeKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(EdgeKeyPair, Dict[(EdgeKeyPair, Dict[(str, Any)])], List[EdgeKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GraphDataSource.delete_graph": {
            "name": "delete_graph",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(str, Dict[(str, Dict[(str, Any)])], List[str])]"
                ]
            }
        },
        "GraphDataSource.delete_node": {
            "name": "delete_node",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(NodeKeyPair, Dict[(NodeKeyPair, Dict[(str, Any)])], List[NodeKeyPair])]"
                ]
            }
        },
        "GraphDataSource.delete_edge": {
            "name": "delete_edge",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(EdgeKeyPair, Dict[(EdgeKeyPair, Dict[(str, Any)])], List[EdgeKeyPair])]"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/abc/row.py": {
        "RowDataSource.create_row": {
            "name": "create_row",
            "location": 20,
            "return": [
                "List[RowKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(RowKeyPair, Dict[(RowKeyPair, Dict[(str, Any)])], List[RowKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RowDataSource.read_row": {
            "name": "read_row",
            "location": 24,
            "return": [
                "Dict[(RowKeyPair, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(RowKeyPair, Dict[(RowKeyPair, Dict[(str, Any)])], List[RowKeyPair])]"
                ]
            }
        },
        "RowDataSource.update_row": {
            "name": "update_row",
            "location": 28,
            "return": [
                "List[RowKeyPair]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(RowKeyPair, Dict[(RowKeyPair, Dict[(str, Any)])], List[RowKeyPair])]"
                ],
                "val": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RowDataSource.delete_row": {
            "name": "delete_row",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(RowKeyPair, Dict[(RowKeyPair, Dict[(str, Any)])], List[RowKeyPair])]"
                ]
            }
        }
    },
    "Project-KnowNet-master/data_platform/datasource/abc/__init__.py": {},
    "Project-KnowNet-master/network_analysis/algorithm.py": {
        "linear_regression": {
            "name": "linear_regression",
            "location": 1,
            "return": [
                "list"
            ],
            "arguments": {
                "data": []
            }
        },
        "linear_regression.optimizer": {
            "name": "optimizer",
            "location": 28,
            "return": [],
            "arguments": {
                "data": [],
                "starting_b": [],
                "starting_m": [],
                "learning_rate": [],
                "num_iter": []
            }
        },
        "linear_regression.compute_gradient": {
            "name": "compute_gradient",
            "location": 39,
            "return": [],
            "arguments": {
                "b_current": [],
                "m_current": [],
                "data": [],
                "learning_rate": []
            }
        }
    },
    "Project-KnowNet-master/network_analysis/network.py": {
        "Net.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "net_type": [],
                "weight_type": [],
                "from_external": []
            }
        },
        "Net._init_cent": {
            "name": "_init_cent",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.nodes": {
            "name": "nodes",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Net.edges": {
            "name": "edges",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Net.adjacent_matrix": {
            "name": "adjacent_matrix",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.connectivity": {
            "name": "connectivity",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "c_type": []
            }
        },
        "Net.centrality": {
            "name": "centrality",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "c_type": []
            }
        },
        "Net.node_centrality": {
            "name": "node_centrality",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "c_type": []
            }
        },
        "Net.find_nodes_by_centrality": {
            "name": "find_nodes_by_centrality",
            "location": 170,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "c_type": [],
                "n": [],
                "return_value": []
            }
        },
        "Net.draw_network": {
            "name": "draw_network",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "layout": [],
                "render": []
            }
        },
        "Net.draw_degree_distribution": {
            "name": "draw_degree_distribution",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percentage": []
            }
        },
        "Net.draw_indegree_distribution": {
            "name": "draw_indegree_distribution",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percentage": []
            }
        },
        "Net.draw_outdegree_distribution": {
            "name": "draw_outdegree_distribution",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percentage": []
            }
        },
        "Net.extract_nonisolated_network": {
            "name": "extract_nonisolated_network",
            "location": 316,
            "return": [
                "_TNet"
            ],
            "arguments": {
                "self": [
                    "_TNet"
                ]
            }
        },
        "Net.extract_ego_network": {
            "name": "extract_ego_network",
            "location": 326,
            "return": [
                "_TNet"
            ],
            "arguments": {
                "self": [
                    "_TNet"
                ],
                "node": [],
                "radius": []
            }
        },
        "Net.extract_subgraph": {
            "name": "extract_subgraph",
            "location": 333,
            "return": [
                "_TNet"
            ],
            "arguments": {
                "self": [
                    "_TNet"
                ],
                "nodes": []
            }
        },
        "Net.extract_max_component": {
            "name": "extract_max_component",
            "location": 338,
            "return": [
                "_TNet"
            ],
            "arguments": {
                "self": [
                    "_TNet"
                ]
            }
        },
        "Net.extract_k_cores": {
            "name": "extract_k_cores",
            "location": 360,
            "return": [
                "List[Net]"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Net.extract_louvain_communities": {
            "name": "extract_louvain_communities",
            "location": 368,
            "return": [
                "List[Net]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.extract_by_attribute": {
            "name": "extract_by_attribute",
            "location": 379,
            "return": [
                "Optional[Net]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "key_value": []
            }
        },
        "Net.__init__.set_nxds": {
            "name": "set_nxds",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "Project-KnowNet-master/network_analysis/test.py": {
        "test_author_network": {
            "name": "test_author_network",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_text_network": {
            "name": "test_text_network",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "Project-KnowNet-master/network_analysis/__init__.py": {},
    "Project-KnowNet-master/network_construction/algorithm.py": {
        "extract_keyword": {
            "name": "extract_keyword",
            "location": 89,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_keyword2": {
            "name": "extract_keyword2",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_word": {
            "name": "extract_word",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_noun": {
            "name": "extract_noun",
            "location": 111,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_noun2": {
            "name": "extract_noun2",
            "location": 123,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_word_freq": {
            "name": "extract_word_freq",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_adj": {
            "name": "extract_adj",
            "location": 139,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_adj2": {
            "name": "extract_adj2",
            "location": 151,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_verb": {
            "name": "extract_verb",
            "location": 161,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_verb2": {
            "name": "extract_verb2",
            "location": 173,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_noun_phrase": {
            "name": "extract_noun_phrase",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_noun_phrase2": {
            "name": "extract_noun_phrase2",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_ner": {
            "name": "extract_ner",
            "location": 197,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_ner2": {
            "name": "extract_ner2",
            "location": 213,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "splitSentence": {
            "name": "splitSentence",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "paragraph": []
            }
        },
        "wordtokenizer": {
            "name": "wordtokenizer",
            "location": 233,
            "return": [
                "Any"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "para2senc2words": {
            "name": "para2senc2words",
            "location": 238,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_noun_co": {
            "name": "extract_relation_noun_co",
            "location": 247,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_noun_phrase_co": {
            "name": "extract_relation_noun_phrase_co",
            "location": 263,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_keyword_co": {
            "name": "extract_relation_keyword_co",
            "location": 279,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_adj_co": {
            "name": "extract_relation_adj_co",
            "location": 295,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_verb_co": {
            "name": "extract_relation_verb_co",
            "location": 311,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_ner_co": {
            "name": "extract_relation_ner_co",
            "location": 327,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_noun_wordnet": {
            "name": "extract_relation_noun_wordnet",
            "location": 343,
            "return": [
                "List[Tuple[(Any, Any, str, Any)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_adj_wordnet": {
            "name": "extract_relation_adj_wordnet",
            "location": 359,
            "return": [
                "List[Tuple[(Any, Any, str, Any)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_verb_wordnet": {
            "name": "extract_relation_verb_wordnet",
            "location": 375,
            "return": [
                "List[Tuple[(Any, Any, str, Any)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_relation_keyword_wordnet": {
            "name": "extract_relation_keyword_wordnet",
            "location": 391,
            "return": [
                "List[Tuple[(Any, Any, str, Any)]]"
            ],
            "arguments": {
                "text": []
            }
        },
        "word2vec_initialize": {
            "name": "word2vec_initialize",
            "location": 407,
            "return": [
                "int"
            ],
            "arguments": {
                "text": []
            }
        },
        "word2vec_trainmore": {
            "name": "word2vec_trainmore",
            "location": 419,
            "return": [
                "int"
            ],
            "arguments": {
                "text": []
            }
        },
        "word2vec_result": {
            "name": "word2vec_result",
            "location": 426,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "word_stem": {
            "name": "word_stem",
            "location": 433,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "word_lemmatized": {
            "name": "word_lemmatized",
            "location": 441,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "wordnet_synsets": {
            "name": "wordnet_synsets",
            "location": 447,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "wordnet_lemma_names": {
            "name": "wordnet_lemma_names",
            "location": 454,
            "return": [
                "Any"
            ],
            "arguments": {
                "wordset": []
            }
        },
        "wordnet_similarity": {
            "name": "wordnet_similarity",
            "location": 458,
            "return": [
                "Any"
            ],
            "arguments": {
                "word1": [],
                "word2": []
            }
        },
        "UnigramChunker.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_sents": []
            }
        },
        "UnigramChunker.parse": {
            "name": "parse",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/coop.py": {
        "create_db": {
            "name": "create_db",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": []
            }
        },
        "text_network": {
            "name": "text_network",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "relation": [],
                "document": [],
                "database": []
            }
        },
        "author_network": {
            "name": "author_network",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "document": [],
                "database": []
            }
        },
        "paper_network": {
            "name": "paper_network",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "document": [],
                "database": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/database.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                "data_platform.datasource.networkx.NetworkXDS"
            ],
            "arguments": {}
        },
        "create_database": {
            "name": "create_database",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": []
            }
        },
        "insert_paper": {
            "name": "insert_paper",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "node_key": [],
                "node_struct": [],
                "database_name": []
            }
        },
        "insert_author": {
            "name": "insert_author",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "node_key": [],
                "node_struct": [],
                "database_name": []
            }
        },
        "insert_word": {
            "name": "insert_word",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "node_key": [],
                "node_struct": [],
                "database_name": []
            }
        },
        "insert_paper_relation": {
            "name": "insert_paper_relation",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "insert_author_relation": {
            "name": "insert_author_relation",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "search_author_relation": {
            "name": "search_author_relation",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "database_name": []
            }
        },
        "update_author_relation": {
            "name": "update_author_relation",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "insert_word_relation": {
            "name": "insert_word_relation",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "search_word_relation": {
            "name": "search_word_relation",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "database_name": []
            }
        },
        "update_word_relation": {
            "name": "update_word_relation",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "insert_paper_author_relation": {
            "name": "insert_paper_author_relation",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "insert_paper_word_relation": {
            "name": "insert_paper_word_relation",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "node1_key": [],
                "node2_key": [],
                "relation_struct": [],
                "database_name": []
            }
        },
        "flush": {
            "name": "flush",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Project-KnowNet-master/network_construction/network.py": {
        "create_network_text": {
            "name": "create_network_text",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "node": [],
                "relation": [],
                "database": []
            }
        },
        "create_network_author": {
            "name": "create_network_author",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        },
        "create_network_paper": {
            "name": "create_network_paper",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        },
        "create_other": {
            "name": "create_other",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/node.py": {
        "node_extraction_author": {
            "name": "node_extraction_author",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "database": []
            }
        },
        "node_extraction_paper": {
            "name": "node_extraction_paper",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "database": []
            }
        },
        "node_extraction_text": {
            "name": "node_extraction_text",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "node": [],
                "database": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/relation.py": {
        "relation_extraction_text": {
            "name": "relation_extraction_text",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "node": [],
                "relation": [],
                "database": []
            }
        },
        "relation_extraction_paper": {
            "name": "relation_extraction_paper",
            "location": 230,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        },
        "relation_extraction_author": {
            "name": "relation_extraction_author",
            "location": 255,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        },
        "relation_extraction_paper_author": {
            "name": "relation_extraction_paper_author",
            "location": 334,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        },
        "relation_extraction_paper_word": {
            "name": "relation_extraction_paper_word",
            "location": 353,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [],
                "document": [],
                "relation": [],
                "database": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/source.py": {
        "search_author": {
            "name": "search_author",
            "location": 21,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "source": [],
                "document": []
            }
        },
        "search_citation": {
            "name": "search_citation",
            "location": 61,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "source": [],
                "document": []
            }
        },
        "search_text": {
            "name": "search_text",
            "location": 99,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "source": [],
                "document": []
            }
        },
        "search_all": {
            "name": "search_all",
            "location": 134,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "source": [],
                "document": []
            }
        }
    },
    "Project-KnowNet-master/network_construction/__init__.py": {},
    "Project-KnowNet-master/test/test_data_fetcher.py": {
        "TestDataFetcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFetcher.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFetcher.test_fetch": {
            "name": "test_fetch",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFetcher.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/test/test_network_analysis.py": {
        "TestNetworkAnalysis.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetworkAnalysis.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetworkAnalysis.test_network_analysis": {
            "name": "test_network_analysis",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetworkAnalysis.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/test/test_network_construction.py": {},
    "Project-KnowNet-master/test/__init__.py": {},
    "Project-KnowNet-master/test/test_data_platform/base.py": {
        "BaseTestDataSource.get_test_class": {
            "name": "get_test_class",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTestDataSource.get_test_instance": {
            "name": "get_test_instance",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        },
        "BaseTestDataSource.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestDataSource.test_import": {
            "name": "test_import",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestDataSource.test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestDataSource.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/test/test_data_platform/config.py": {
        "TestConfig.test_global_config": {
            "name": "test_global_config",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/test/test_data_platform/doc.py": {
        "TestDocDataSource.test_default_create": {
            "name": "test_default_create",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocDataSource.test_default_read": {
            "name": "test_default_read",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocDataSource.test_named_create_and_read": {
            "name": "test_named_create_and_read",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocDataSource.test_multi_update": {
            "name": "test_multi_update",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocDataSource.test_delete": {
            "name": "test_delete",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocDataSource.test_other_method": {
            "name": "test_other_method",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONDS.get_test_class": {
            "name": "get_test_class",
            "location": 150,
            "return": [
                "Type[data_platform.datasource.json.JSONDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestJSONDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 154,
            "return": [
                "data_platform.datasource.json.JSONDS"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        },
        "TestScienceDirectDS.get_test_class": {
            "name": "get_test_class",
            "location": 165,
            "return": [
                "Type[data_platform.datasource.science_direct.ScienceDirectDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestScienceDirectDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 170,
            "return": [
                "data_platform.datasource.science_direct.ScienceDirectDS"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        },
        "TestMongoDBDS.setUp": {
            "name": "setUp",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMongoDBDS.get_test_class": {
            "name": "get_test_class",
            "location": 186,
            "return": [
                "Type[data_platform.datasource.mongodb.MongoDBDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestMongoDBDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 190,
            "return": [
                "data_platform.datasource.mongodb.MongoDBDS"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        },
        "TestMongoDBDS.tearDown": {
            "name": "tearDown",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArangoDBDS.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methodName": []
            }
        },
        "TestArangoDBDS.setUp": {
            "name": "setUp",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArangoDBDS.get_test_class": {
            "name": "get_test_class",
            "location": 218,
            "return": [
                "Type[data_platform.datasource.arangodb.ArangoDBDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestArangoDBDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        },
        "TestArangoDBDS.tearDown": {
            "name": "tearDown",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project-KnowNet-master/test/test_data_platform/graph.py": {
        "TestGraphDataSource.test_all": {
            "name": "test_all",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetworkXDS.get_test_class": {
            "name": "get_test_class",
            "location": 59,
            "return": [
                "Type[data_platform.datasource.networkx.NetworkXDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestNetworkXDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 64,
            "return": [
                "data_platform.datasource.networkx.NetworkXDS"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        }
    },
    "Project-KnowNet-master/test/test_data_platform/row.py": {
        "TestRowDataSource.test_all": {
            "name": "test_all",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLiteDS.get_test_class": {
            "name": "get_test_class",
            "location": 183,
            "return": [
                "Type[data_platform.datasource.sqlite.SQLiteDS]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSQLiteDS.get_test_instance": {
            "name": "get_test_instance",
            "location": 188,
            "return": [
                "data_platform.datasource.sqlite.SQLiteDS"
            ],
            "arguments": {
                "self": [],
                "temp_location": []
            }
        }
    },
    "Project-KnowNet-master/test/test_data_platform/_constant.py": {},
    "Project-KnowNet-master/test/test_data_platform/__init__.py": {}
}
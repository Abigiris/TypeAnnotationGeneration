{
    "Project1-master/docs/conf.py": {},
    "Project1-master/docs/_extensions/tezos_custom_roles.py": {
        "setup": {
            "name": "setup",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "find_dot_opam": {
            "name": "find_dot_opam",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "package_role": {
            "name": "package_role",
            "location": 20,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [],
                "rawtext": [],
                "text": [],
                "lineno": [],
                "inliner": [],
                "options": [],
                "content": []
            }
        },
        "opam_role": {
            "name": "opam_role",
            "location": 48,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [],
                "rawtext": [],
                "text": [],
                "lineno": [],
                "inliner": [],
                "options": [],
                "content": []
            }
        },
        "src_role": {
            "name": "src_role",
            "location": 64,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [],
                "rawtext": [],
                "text": [],
                "lineno": [],
                "inliner": [],
                "options": [],
                "content": []
            }
        }
    },
    "Project1-master/scripts/b58_prefix.py": {},
    "Project1-master/scripts/ocamldot.py": {},
    "Project1-master/scripts/create_genesis/create_genesis_info.py": {},
    "Project1-master/tests_python/client/client.py": {
        "format_command": {
            "name": "format_command",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_path": [],
                "admin_client_path": [],
                "host": [],
                "base_dir": [],
                "rpc_port": [],
                "use_tls": [],
                "disable_disclaimer": []
            }
        },
        "Client.run": {
            "name": "run",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "admin": [],
                "check": [],
                "trace": []
            }
        },
        "Client.rpc": {
            "name": "rpc",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "verb": [],
                "path": [],
                "data": [],
                "params": []
            }
        },
        "Client.typecheck": {
            "name": "typecheck",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "Client.run_script": {
            "name": "run_script",
            "location": 166,
            "return": [
                "client_output.RunScriptResult"
            ],
            "arguments": {
                "self": [],
                "contract": [],
                "storage": [],
                "inp": [],
                "amount": []
            }
        },
        "Client.gen_key": {
            "name": "gen_key",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alias": [],
                "args": []
            }
        },
        "Client.import_secret_key": {
            "name": "import_secret_key",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "secret": []
            }
        },
        "Client.activate_protocol": {
            "name": "activate_protocol",
            "location": 188,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "parameter_file": [],
                "fitness": [],
                "key": [],
                "timestamp": []
            }
        },
        "Client.activate_protocol_json": {
            "name": "activate_protocol_json",
            "location": 204,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "parameters": [],
                "fitness": [],
                "key": [],
                "timestamp": []
            }
        },
        "Client.show_voting_period": {
            "name": "show_voting_period",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.ban_peer": {
            "name": "ban_peer",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.unban_peer": {
            "name": "unban_peer",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.trust_peer": {
            "name": "trust_peer",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.untrust_peer": {
            "name": "untrust_peer",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.endorse": {
            "name": "endorse",
            "location": 233,
            "return": [
                "client_output.EndorseResult"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Client.bake": {
            "name": "bake",
            "location": 237,
            "return": [
                "client_output.BakeForResult"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "args": []
            }
        },
        "Client.originate": {
            "name": "originate",
            "location": 246,
            "return": [
                "client_output.OriginationResult"
            ],
            "arguments": {
                "self": [],
                "contract_name": [],
                "manager": [],
                "amount": [],
                "sender": [],
                "contract": [],
                "args": []
            }
        },
        "Client.transfer": {
            "name": "transfer",
            "location": 261,
            "return": [
                "client_output.TransferResult"
            ],
            "arguments": {
                "self": [],
                "amount": [],
                "account1": [],
                "account2": [],
                "args": []
            }
        },
        "Client.p2p_stat": {
            "name": "p2p_stat",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_balance": {
            "name": "get_balance",
            "location": 276,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Client.get_receipt": {
            "name": "get_receipt",
            "location": 280,
            "return": [
                "client_output.GetReceiptResult"
            ],
            "arguments": {
                "self": [],
                "operation": [],
                "args": []
            }
        },
        "Client.get_prevalidator": {
            "name": "get_prevalidator",
            "location": 289,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_mempool": {
            "name": "get_mempool",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.mempool_is_empty": {
            "name": "mempool_is_empty",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_head": {
            "name": "get_head",
            "location": 303,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_block": {
            "name": "get_block",
            "location": 306,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_hash": []
            }
        },
        "Client.get_ballot_list": {
            "name": "get_ballot_list",
            "location": 309,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_ballots": {
            "name": "get_ballots",
            "location": 312,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_period_kind": {
            "name": "get_current_period_kind",
            "location": 315,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_proposal": {
            "name": "get_current_proposal",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_quorum": {
            "name": "get_current_quorum",
            "location": 323,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_listings": {
            "name": "get_listings",
            "location": 326,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_proposals": {
            "name": "get_proposals",
            "location": 329,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_protocol": {
            "name": "get_protocol",
            "location": 332,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_period_position": {
            "name": "get_period_position",
            "location": 336,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_level": {
            "name": "get_level",
            "location": 341,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.wait_for_inclusion": {
            "name": "wait_for_inclusion",
            "location": 345,
            "return": [
                "client_output.WaitForResult"
            ],
            "arguments": {
                "self": [],
                "operation_hash": [],
                "branch": [],
                "args": []
            }
        },
        "Client.inject_protocol": {
            "name": "inject_protocol",
            "location": 357,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Client.list_protocols": {
            "name": "list_protocols",
            "location": 360,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.submit_proposals": {
            "name": "submit_proposals",
            "location": 364,
            "return": [
                "client_output.SubmitProposalsResult"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "protos": []
            }
        },
        "Client.submit_ballot": {
            "name": "submit_ballot",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "proto": [],
                "vote": []
            }
        },
        "Client.bootstrapped": {
            "name": "bootstrapped",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.cleanup": {
            "name": "cleanup",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project1-master/tests_python/client/client_output.py": {
        "extract_rpc_answer": {
            "name": "extract_rpc_answer",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "extract_balance": {
            "name": "extract_balance",
            "location": 143,
            "return": [
                "float"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "extract_protocols": {
            "name": "extract_protocols",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "InvalidClientOutput.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "EndorseResult.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "TransferResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "GetReceiptResult.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "RunScriptResult.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "OriginationResult.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "SubmitProposalsResult.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "BakeForResult.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "ActivationResult.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "WaitForResult.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        }
    },
    "Project1-master/tests_python/client/__init__.py": {},
    "Project1-master/tests_python/daemons/baker.py": {
        "Baker.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baker": [],
                "rpc_port": [],
                "base_dir": [],
                "node_dir": [],
                "account": [],
                "params": [],
                "log_file": []
            }
        }
    },
    "Project1-master/tests_python/daemons/endorser.py": {
        "Endorser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endorser": [],
                "rpc_port": [],
                "base_dir": [],
                "params": [],
                "log_file": []
            }
        }
    },
    "Project1-master/tests_python/daemons/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "sandbox_file": [],
                "expected_pow": [],
                "node_dir": [],
                "use_tls": [],
                "params": [],
                "log_file": [],
                "p2p_port": [],
                "rpc_port": [],
                "peers": [],
                "log_levels": [],
                "env": []
            }
        },
        "Node.cleanup": {
            "name": "cleanup",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Project1-master/tests_python/daemons/utils.py": {
        "format_command": {
            "name": "format_command",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [],
                "color": []
            }
        },
        "prepare_log": {
            "name": "prepare_log",
            "location": 15,
            "return": [
                "Tuple[(Union[(int, TextIO)], int)]"
            ],
            "arguments": {
                "cmd": [],
                "log_file": []
            }
        }
    },
    "Project1-master/tests_python/daemons/__init__.py": {},
    "Project1-master/tests_python/examples/example.py": {
        "scenario": {
            "name": "scenario",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Project1-master/tests_python/examples/test_example.py": {
        "sandbox": {
            "name": "sandbox",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "session": {
            "name": "session",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "TestExample.test_wait_sync_proto": {
            "name": "test_wait_sync_proto",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestExample.test_transfer": {
            "name": "test_transfer",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": [],
                "session": []
            }
        },
        "TestExample.test_inclusion": {
            "name": "test_inclusion",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": [],
                "session": []
            }
        }
    },
    "Project1-master/tests_python/examples/__init__.py": {},
    "Project1-master/tests_python/launchers/sandbox.py": {
        "Sandbox._wrap_path": {
            "name": "_wrap_path",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "binary": [],
                "branch": [],
                "proto": []
            }
        },
        "Sandbox.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binaries_path": [],
                "identities": [],
                "genesis_pk": [],
                "rpc": [],
                "p2p": [],
                "num_peers": [],
                "log_dir": []
            }
        },
        "Sandbox.__enter__": {
            "name": "__enter__",
            "location": 96,
            "return": [
                "_TSandbox@@Sandbox@@"
            ],
            "arguments": {
                "self": [
                    "_TSandbox@@Sandbox@@"
                ]
            }
        },
        "Sandbox.add_node": {
            "name": "add_node",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "peers": [],
                "params": [],
                "log_levels": [],
                "private": [],
                "config_client": [],
                "use_tls": [],
                "branch": []
            }
        },
        "Sandbox.add_baker": {
            "name": "add_baker",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "account": [],
                "proto": [],
                "params": [],
                "branch": []
            }
        },
        "Sandbox.add_endorser": {
            "name": "add_endorser",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "account": [],
                "proto": [],
                "endorsement_delay": [],
                "branch": []
            }
        },
        "Sandbox.rm_baker": {
            "name": "rm_baker",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "proto": []
            }
        },
        "Sandbox.rm_endorser": {
            "name": "rm_endorser",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "proto": []
            }
        },
        "Sandbox.rm_node": {
            "name": "rm_node",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": []
            }
        },
        "Sandbox.client": {
            "name": "client",
            "location": 287,
            "return": [
                "client.client.Client"
            ],
            "arguments": {
                "self": [],
                "node_id": []
            }
        },
        "Sandbox.node": {
            "name": "node",
            "location": 291,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node_id": []
            }
        },
        "Sandbox.baker": {
            "name": "baker",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "proto": []
            }
        },
        "Sandbox.all_clients": {
            "name": "all_clients",
            "location": 299,
            "return": [
                "List[client.client.Client]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.all_nodes": {
            "name": "all_nodes",
            "location": 304,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.__exit__": {
            "name": "__exit__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.cleanup": {
            "name": "cleanup",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.are_daemons_alive": {
            "name": "are_daemons_alive",
            "location": 326,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SandboxMultiBranch.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binaries_path": [],
                "identities": [],
                "genesis_pk": [],
                "branch_map": [],
                "rpc": [],
                "p2p": [],
                "num_peers": [],
                "log_dir": []
            }
        },
        "SandboxMultiBranch.add_baker": {
            "name": "add_baker",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "account": [],
                "proto": [],
                "params": [],
                "branch": []
            }
        },
        "SandboxMultiBranch.add_endorser": {
            "name": "add_endorser",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "account": [],
                "proto": [],
                "endorsement_delay": [],
                "branch": []
            }
        },
        "SandboxMultiBranch.add_node": {
            "name": "add_node",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [],
                "peers": [],
                "params": [],
                "log_levels": [],
                "private": [],
                "config_client": [],
                "use_tls": [],
                "branch": []
            }
        }
    },
    "Project1-master/tests_python/launchers/__init__.py": {},
    "Project1-master/tests_python/scripts/build_branches.py": {
        "print_log": {
            "name": "print_log",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [],
                "color": []
            }
        },
        "print_command": {
            "name": "print_command",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "color": []
            }
        },
        "parse_sexp": {
            "name": "parse_sexp",
            "location": 35,
            "return": [
                "Union[(float, int, str, List[Union[(float, int, list, str, List[Union[(float, int, str)]])]])]"
            ],
            "arguments": {
                "sexp": []
            }
        },
        "opam_env": {
            "name": "opam_env",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "tezos_build": []
            }
        },
        "run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "cwd": [],
                "env": []
            }
        },
        "build": {
            "name": "build",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "branch": [],
                "tezos_home": [],
                "tezos_build": [],
                "tezos_binaries": []
            }
        },
        "prepare_binaries": {
            "name": "prepare_binaries",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "tezos_home": [],
                "tezos_build": [],
                "tezos_binaries": [],
                "branch_list": []
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Project1-master/tests_python/scripts/__init__.py": {},
    "Project1-master/tests_python/tests/conftest.py": {
        "sanity_check": {
            "name": "sanity_check",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "log_dir": {
            "name": "log_dir",
            "location": 24,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "session": {
            "name": "session",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [],
                "call": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "sandbox": {
            "name": "sandbox",
            "location": 59,
            "return": [],
            "arguments": {
                "log_dir": []
            }
        },
        "client": {
            "name": "client",
            "location": 73,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "clients": {
            "name": "clients",
            "location": 82,
            "return": [],
            "arguments": {
                "sandbox": [],
                "request": []
            }
        },
        "sandbox_multibranch": {
            "name": "sandbox_multibranch",
            "location": 102,
            "return": [],
            "arguments": {
                "log_dir": [],
                "request": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_baker_endorser.py": {
        "random_op": {
            "name": "random_op",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": []
            }
        },
        "TestAllDeamonsWithOperations.test_setup_network": {
            "name": "test_setup_network",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_network_gen_operations_and_add_nodes": {
            "name": "test_network_gen_operations_and_add_nodes",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": [],
                "session": []
            }
        },
        "TestAllDeamonsWithOperations.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_synchronize": {
            "name": "test_synchronize",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_operations": {
            "name": "test_check_operations",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_logs": {
            "name": "test_check_logs",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_basic.py": {
        "TestRawContext.test_delegates": {
            "name": "test_delegates",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_no_service_1": {
            "name": "test_no_service_1",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_no_service_2": {
            "name": "test_no_service_2",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_no_service_3": {
            "name": "test_no_service_3",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_bake": {
            "name": "test_bake",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_gen_keys": {
            "name": "test_gen_keys",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_contract.py": {
        "all_contracts": {
            "name": "all_contracts",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "TestContracts.test_gen_keys": {
            "name": "test_gen_keys",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestContracts.test_typecheck": {
            "name": "test_typecheck",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "contract": []
            }
        },
        "TestContracts.test_run": {
            "name": "test_run",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "contract": [],
                "param": [],
                "storage": [],
                "expected": []
            }
        },
        "TestGasBound.test_write_contract": {
            "name": "test_write_contract",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "session": []
            }
        },
        "TestGasBound.test_originate_first_explosion": {
            "name": "test_originate_first_explosion",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestGasBound.test_originate_second_explosion": {
            "name": "test_originate_second_explosion",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_contract_baker.py": {
        "client": {
            "name": "client",
            "location": 8,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "TestOriginationCall.test_originate": {
            "name": "test_originate",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestOriginationCall.test_call": {
            "name": "test_call",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestOriginationCall.test_balance": {
            "name": "test_balance",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestOriginationCall.test_query_storage": {
            "name": "test_query_storage",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_cors.py": {
        "node": {
            "name": "node",
            "location": 6,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "TestCors.test_preflight": {
            "name": "test_preflight",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TestCors.test_request": {
            "name": "test_request",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_injection.py": {
        "clients": {
            "name": "clients",
            "location": 9,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "client": {
            "name": "client",
            "location": 61,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "TestInjectionAndActivation.test_check_resources": {
            "name": "test_check_resources",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInjectionAndActivation.test_compute_hash": {
            "name": "test_compute_hash",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestInjectionAndActivation.test_injection": {
            "name": "test_injection",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "clients": []
            }
        },
        "TestInjectionAndActivation.test_check_injected": {
            "name": "test_check_injected",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestInjectionAndActivation.test_activation": {
            "name": "test_activation",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestInjectionAndActivation.test_check_protocol": {
            "name": "test_check_protocol",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestActivation.test_proto_known": {
            "name": "test_proto_known",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_first_protocol": {
            "name": "test_first_protocol",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_activate_demo": {
            "name": "test_activate_demo",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_level1": {
            "name": "test_level1",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_protocol_genesis": {
            "name": "test_protocol_genesis",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_bake": {
            "name": "test_bake",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_level2": {
            "name": "test_level2",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_many_bakers.py": {
        "TestManyBakers.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyBakers.test_wait": {
            "name": "test_wait",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestManyBakers.test_check_logs": {
            "name": "test_check_logs",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_many_nodes.py": {
        "TestManyNodesBootstrap.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_add_nodes": {
            "name": "test_add_nodes",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_sleep_10s": {
            "name": "test_sleep_10s",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestManyNodesBootstrap.test_add_more_nodes": {
            "name": "test_add_more_nodes",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_synchronize": {
            "name": "test_synchronize",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_check_logs": {
            "name": "test_check_logs",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_mempool.py": {
        "TestMempool.test_init": {
            "name": "test_init",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_running_prevalidators": {
            "name": "test_running_prevalidators",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_mempool_empty": {
            "name": "test_mempool_empty",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_transfer": {
            "name": "test_transfer",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_sleep_3s": {
            "name": "test_sleep_3s",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMempool.test_mempool_include_transfer": {
            "name": "test_mempool_include_transfer",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_bake_for": {
            "name": "test_bake_for",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_sleep_2s": {
            "name": "test_sleep_2s",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMempool.test_mempools_are_empty": {
            "name": "test_mempools_are_empty",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_injection_fails_on_mempool_disabled_node": {
            "name": "test_injection_fails_on_mempool_disabled_node",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_multinode.py": {
        "TestManualBaking.test_level": {
            "name": "test_level",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "clients": []
            }
        },
        "TestManualBaking.test_bake_and_check_level": {
            "name": "test_bake_and_check_level",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "clients": []
            }
        },
        "TestManualBaking.test_endorse": {
            "name": "test_endorse",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestManualBaking.test_transfer": {
            "name": "test_transfer",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestManualBaking.test_bake": {
            "name": "test_bake",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "clients": []
            }
        },
        "TestManualBaking.test_contains_endorse_and_transfer": {
            "name": "test_contains_endorse_and_transfer",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestManualBaking.test_balance": {
            "name": "test_balance",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "clients": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_rpc.py": {
        "TestRPCs.test_init": {
            "name": "test_init",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_bake_for": {
            "name": "test_bake_for",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_self": {
            "name": "test_network_self",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_constants": {
            "name": "test_constants",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_blocks": {
            "name": "test_chain_blocks",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_chain_id": {
            "name": "test_chain_chain_id",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_invalid_blocks": {
            "name": "test_chain_invalid_blocks",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_invalid_blocks_block_hash": {
            "name": "test_chain_invalid_blocks_block_hash",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_describe": {
            "name": "test_describe",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_errors": {
            "name": "test_errors",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_fetch_protocol_protocol_hash": {
            "name": "test_fetch_protocol_protocol_hash",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_connections": {
            "name": "test_network_connections",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_connections_peer_id": {
            "name": "test_network_connections_peer_id",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_greylist_clear": {
            "name": "test_network_greylist_clear",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers": {
            "name": "test_network_peers",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id": {
            "name": "test_network_peers_peer_id",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_ban": {
            "name": "test_network_peers_peer_id_ban",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_banned": {
            "name": "test_network_peers_peer_id_banned",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_unban": {
            "name": "test_network_peers_peer_id_unban",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_untrust": {
            "name": "test_network_peers_peer_id_untrust",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_trust": {
            "name": "test_network_peers_peer_id_trust",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points": {
            "name": "test_network_points",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point": {
            "name": "test_network_points_point",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_ban": {
            "name": "test_network_points_point_ban",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_banned": {
            "name": "test_network_points_point_banned",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_trust": {
            "name": "test_network_points_point_trust",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_unban": {
            "name": "test_network_points_point_unban",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_untrust": {
            "name": "test_network_points_point_untrust",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_stat": {
            "name": "test_network_stat",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_version": {
            "name": "test_network_version",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_versions": {
            "name": "test_network_versions",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_protocols": {
            "name": "test_protocols",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_protocols_protocol_hash": {
            "name": "test_protocols_protocol_hash",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_block_validator": {
            "name": "test_workers_block_validator",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validators": {
            "name": "test_workers_chain_validators",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator": {
            "name": "test_workers_chain_validator",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_ddb": {
            "name": "test_workers_chain_validator_ddb",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_peers_validators": {
            "name": "test_workers_chain_validator_peers_validators",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_peer_validator": {
            "name": "test_workers_chain_validator_peer_validator",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_prevalidators": {
            "name": "test_workers_prevalidators",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_prevalidators_chain_id": {
            "name": "test_workers_prevalidators_chain_id",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block": {
            "name": "test_chain_block",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_constants": {
            "name": "test_chain_block_context_constants",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_constants_errors": {
            "name": "test_chain_block_context_constants_errors",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contracts": {
            "name": "test_chain_block_context_contracts",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract": {
            "name": "test_chain_block_context_contract",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_balance": {
            "name": "test_chain_block_context_contract_balance",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_counter": {
            "name": "test_chain_block_context_contract_counter",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_delegatable": {
            "name": "test_chain_block_context_contract_delegatable",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_delegate": {
            "name": "test_chain_block_context_contract_delegate",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_manager": {
            "name": "test_chain_block_context_contract_manager",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_manager_key": {
            "name": "test_chain_block_context_contract_manager_key",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_script": {
            "name": "test_chain_block_context_contract_script",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_spendable": {
            "name": "test_chain_block_context_contract_spendable",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_storage": {
            "name": "test_chain_block_context_contract_storage",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegates": {
            "name": "test_chain_block_context_delegates",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate": {
            "name": "test_chain_block_context_delegate",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_balance": {
            "name": "test_chain_block_context_delegate_balance",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_deactivated": {
            "name": "test_chain_block_context_delegate_deactivated",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_delegated_balance": {
            "name": "test_chain_block_context_delegate_delegated_balance",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_delegated_contracts": {
            "name": "test_chain_block_context_delegate_delegated_contracts",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_frozen_balance": {
            "name": "test_chain_block_context_delegate_frozen_balance",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_frozen_balance_by_cycle": {
            "name": "test_chain_block_context_delegate_frozen_balance_by_cycle",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_grace_period": {
            "name": "test_chain_block_context_delegate_grace_period",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_staking_balance": {
            "name": "test_chain_block_context_delegate_staking_balance",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_nonces_block_level": {
            "name": "test_chain_block_context_nonces_block_level",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_raw_bytes": {
            "name": "test_chain_block_context_raw_bytes",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_hash": {
            "name": "test_chain_block_hash",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header": {
            "name": "test_chain_block_header",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_protocol_data": {
            "name": "test_chain_block_header_protocol_data",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_protocol_data_raw": {
            "name": "test_chain_block_header_protocol_data_raw",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_raw": {
            "name": "test_chain_block_header_raw",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_shell": {
            "name": "test_chain_block_header_shell",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_baking_rights": {
            "name": "test_chain_block_helpers_baking_rights",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_complete_prefix1": {
            "name": "test_chain_block_helpers_complete_prefix1",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_complete_prefix2": {
            "name": "test_chain_block_helpers_complete_prefix2",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_current_level": {
            "name": "test_chain_block_helpers_current_level",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_endorsing_rights": {
            "name": "test_chain_block_helpers_endorsing_rights",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_levels_in_current_cycle": {
            "name": "test_chain_block_helpers_levels_in_current_cycle",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_live_blocks": {
            "name": "test_chain_block_live_blocks",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_metadata": {
            "name": "test_chain_block_metadata",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes": {
            "name": "test_chain_block_operation_hashes",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_add_transactions": {
            "name": "test_add_transactions",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes_list_offset": {
            "name": "test_chain_block_operation_hashes_list_offset",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes_list_operation": {
            "name": "test_chain_block_operation_hashes_list_operation",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations": {
            "name": "test_chain_block_operations",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations_list": {
            "name": "test_chain_block_operations_list",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations_list_operation": {
            "name": "test_chain_block_operations_list_operation",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_ballot_list": {
            "name": "test_chain_block_votes_ballot_list",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_ballots": {
            "name": "test_chain_block_votes_ballots",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_period_kind": {
            "name": "test_chain_block_votes_current_period_kind",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_proposal": {
            "name": "test_chain_block_votes_current_proposal",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_quorum": {
            "name": "test_chain_block_votes_current_quorum",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_listings": {
            "name": "test_chain_block_votes_listings",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_proposals": {
            "name": "test_chain_block_votes_proposals",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_stat_gc": {
            "name": "test_stat_gc",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_stat_memory": {
            "name": "test_stat_memory",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_tls.py": {
        "client": {
            "name": "client",
            "location": 6,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "TestTLS.test_bootstrapped": {
            "name": "test_bootstrapped",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Project1-master/tests_python/tests/test_voting.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [],
            "arguments": {
                "sandbox": []
            }
        },
        "TestManualBaking.test_period_position": {
            "name": "test_period_position",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_listings": {
            "name": "test_listings",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_one_block": {
            "name": "test_bake_one_block",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_period_position2": {
            "name": "test_period_position2",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_two_blocks": {
            "name": "test_bake_two_blocks",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_period_position3": {
            "name": "test_period_position3",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_listings2": {
            "name": "test_listings2",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_inject_proto1": {
            "name": "test_inject_proto1",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "tmpdir": []
            }
        },
        "TestManualBaking.test_number_proto": {
            "name": "test_number_proto",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_proposal": {
            "name": "test_proposal",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_show_voting_period2": {
            "name": "test_show_voting_period2",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_submit_proposals": {
            "name": "test_submit_proposals",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_bake_one_block2": {
            "name": "test_bake_one_block2",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_proposal2": {
            "name": "test_proposal2",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_one_block3": {
            "name": "test_bake_one_block3",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_breaking_tie": {
            "name": "test_breaking_tie",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_show_voting_period3": {
            "name": "test_show_voting_period3",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_two_blocks2": {
            "name": "test_bake_two_blocks2",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_period_position4": {
            "name": "test_period_position4",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_current_period_kind": {
            "name": "test_current_period_kind",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_listings3": {
            "name": "test_listings3",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_current_proposal": {
            "name": "test_current_proposal",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_submit_ballot": {
            "name": "test_submit_ballot",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_bake_four_blocks": {
            "name": "test_bake_four_blocks",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_new_period": {
            "name": "test_new_period",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Project1-master/tests_python/tests/__init__.py": {},
    "Project1-master/tests_python/tests/multibranch/test_baker_endorser_mb.py": {
        "random_op": {
            "name": "random_op",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": []
            }
        },
        "params": {
            "name": "params",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "i": []
            }
        },
        "TestAllDeamonsWithOperations.test_setup_network": {
            "name": "test_setup_network",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_network_gen_operations_and_add_nodes": {
            "name": "test_network_gen_operations_and_add_nodes",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestAllDeamonsWithOperations.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_synchronize": {
            "name": "test_synchronize",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_operations": {
            "name": "test_check_operations",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_logs": {
            "name": "test_check_logs",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        }
    },
    "Project1-master/tests_python/tests/multibranch/test_voting_full.py": {
        "TestMultiNode.test_start_nodes_and_baker": {
            "name": "test_start_nodes_and_baker",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_second_proposal_period": {
            "name": "test_wait_second_proposal_period",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_retrieve_protos": {
            "name": "test_retrieve_protos",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_submit_proposals": {
            "name": "test_submit_proposals",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_wait_for_protocol_inclusion": {
            "name": "test_wait_for_protocol_inclusion",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_check_proposals": {
            "name": "test_check_proposals",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_for_vote": {
            "name": "test_wait_for_vote",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_vote": {
            "name": "test_vote",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_for_testing": {
            "name": "test_wait_for_testing",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_all_testing": {
            "name": "test_all_testing",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_start_beta_baker_test": {
            "name": "test_start_beta_baker_test",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_add_new_node": {
            "name": "test_add_new_node",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_rpc_in_test_period": {
            "name": "test_rpc_in_test_period",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_transfer_in_test_period": {
            "name": "test_transfer_in_test_period",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_testchain_increases": {
            "name": "test_testchain_increases",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_for_promotion_vote": {
            "name": "test_wait_for_promotion_vote",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_vote_again": {
            "name": "test_vote_again",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_wait_for_proposal": {
            "name": "test_wait_for_proposal",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_start_beta_baker": {
            "name": "test_start_beta_baker",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_new_protocol": {
            "name": "test_new_protocol",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_stop_old_bakers": {
            "name": "test_stop_old_bakers",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_level_increases": {
            "name": "test_level_increases",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_all_proposal": {
            "name": "test_all_proposal",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_chain_id_new_proto": {
            "name": "test_chain_id_new_proto",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_transfer_new_proto": {
            "name": "test_transfer_new_proto",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_still_level_increases": {
            "name": "test_still_level_increases",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_contains_transfer": {
            "name": "test_contains_transfer",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_balance": {
            "name": "test_balance",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_check_logs": {
            "name": "test_check_logs",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        }
    },
    "Project1-master/tests_python/tools/constants.py": {},
    "Project1-master/tests_python/tools/paths.py": {
        "tezos_home": {
            "name": "tezos_home",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Project1-master/tests_python/tools/utils.py": {
        "retry": {
            "name": "retry",
            "location": 13,
            "return": [],
            "arguments": {
                "timeout": [],
                "attempts": []
            }
        },
        "check_contains_operations": {
            "name": "check_contains_operations",
            "location": 39,
            "return": [],
            "arguments": {
                "client": [],
                "operation_hashes": []
            }
        },
        "check_protocol": {
            "name": "check_protocol",
            "location": 48,
            "return": [],
            "arguments": {
                "client": [],
                "proto": [],
                "params": []
            }
        },
        "check_level": {
            "name": "check_level",
            "location": 55,
            "return": [],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "check_level_greater_than": {
            "name": "check_level_greater_than",
            "location": 60,
            "return": [],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "check_operation_in_receipt": {
            "name": "check_operation_in_receipt",
            "location": 65,
            "return": [],
            "arguments": {
                "client": [],
                "operation_hash": [],
                "check_previous": []
            }
        },
        "synchronize": {
            "name": "synchronize",
            "location": 76,
            "return": [],
            "arguments": {
                "clients": [],
                "max_diff": []
            }
        },
        "get_block_hash": {
            "name": "get_block_hash",
            "location": 82,
            "return": [],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "all_blocks": {
            "name": "all_blocks",
            "location": 96,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "operations_hash_from_block": {
            "name": "operations_hash_from_block",
            "location": 109,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "check_logs": {
            "name": "check_logs",
            "location": 118,
            "return": [],
            "arguments": {
                "logs": [],
                "pattern": []
            }
        },
        "check_logs_counts": {
            "name": "check_logs_counts",
            "location": 129,
            "return": [],
            "arguments": {
                "logs": [],
                "pattern": []
            }
        },
        "activate_alpha": {
            "name": "activate_alpha",
            "location": 141,
            "return": [],
            "arguments": {
                "client": [],
                "parameters": []
            }
        },
        "rpc": {
            "name": "rpc",
            "location": 148,
            "return": [],
            "arguments": {
                "server": [],
                "port": [],
                "verb": [],
                "path": [],
                "data": [],
                "headers": []
            }
        },
        "retry.decorator_retry": {
            "name": "decorator_retry",
            "location": 23,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "retry.decorator_retry.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "Project1-master/tests_python/tools/__init__.py": {}
}
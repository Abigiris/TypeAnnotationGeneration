{
    "Prycing-master/__init__.py": {},
    "Prycing-master/options/binom.py": {
        "binom_option": {
            "name": "binom_option",
            "location": 8,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "option": [],
                "discount_rate": [],
                "dividend_yield": [],
                "sigma": [],
                "N": [],
                "steps": []
            }
        }
    },
    "Prycing-master/options/bsm.py": {
        "find_implied_vol": {
            "name": "find_implied_vol",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "price": [],
                "side": [],
                "spot": [],
                "strike": [],
                "tau": [],
                "discount_rate": [],
                "dividend_yield": []
            }
        },
        "find_implied_vol.price_from_vol": {
            "name": "price_from_vol",
            "location": 31,
            "return": [],
            "arguments": {
                "sigma": []
            }
        },
        "BSMOption.__post_init__": {
            "name": "__post_init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption.fair_value": {
            "name": "fair_value",
            "location": 71,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption.delta": {
            "name": "delta",
            "location": 88,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption.vega": {
            "name": "vega",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._call_delta": {
            "name": "_call_delta",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._put_delta": {
            "name": "_put_delta",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._d1": {
            "name": "_d1",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._d2": {
            "name": "_d2",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._q_drift": {
            "name": "_q_drift",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._scaled_vol": {
            "name": "_scaled_vol",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._log_moneyness": {
            "name": "_log_moneyness",
            "location": 121,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._dividend_discount": {
            "name": "_dividend_discount",
            "location": 124,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BSMOption._discount": {
            "name": "_discount",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/options/gbm.py": {
        "simulate_gbm": {
            "name": "simulate_gbm",
            "location": 4,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "start_value": [],
                "mu": [],
                "sigma": [],
                "number_of_paths": [],
                "number_of_steps": [],
                "T": []
            }
        }
    },
    "Prycing-master/options/lsm.py": {
        "lsm": {
            "name": "lsm",
            "location": 27,
            "return": [
                "Tuple[(Tuple[(Any, Any)], list, list)]"
            ],
            "arguments": {
                "paths": [],
                "payoff_fun": [],
                "regress_fun": [],
                "discount_rate": [],
                "T": [],
                "strike": []
            }
        },
        "l_0": {
            "name": "l_0",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "l_1": {
            "name": "l_1",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "l_2": {
            "name": "l_2",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "american_put_payoff": {
            "name": "american_put_payoff",
            "location": 83,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "strike": []
            }
        },
        "regress_laguerre_2": {
            "name": "regress_laguerre_2",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "stock_prices": [],
                "cash_flows": []
            }
        },
        "regress_linear": {
            "name": "regress_linear",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "stock_prices": [],
                "cash_flows": []
            }
        },
        "add_cash_flows": {
            "name": "add_cash_flows",
            "location": 106,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "cash_flows": [],
                "early_cash_flows": []
            }
        },
        "npv": {
            "name": "npv",
            "location": 121,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cash_flow_matrix": [],
                "discount_rate": []
            }
        },
        "price_table": {
            "name": "price_table",
            "location": 135,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "number_of_paths": [],
                "number_of_steps": [],
                "strike": [],
                "discount_rate": []
            }
        },
        "american_put_payoff.payoff_fun": {
            "name": "payoff_fun",
            "location": 85,
            "return": [],
            "arguments": {
                "values": []
            }
        }
    },
    "Prycing-master/options/utils.py": {
        "gauss_first_formula": {
            "name": "gauss_first_formula",
            "location": 3,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [],
                "value": []
            }
        },
        "Tree.get_level": {
            "name": "get_level",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Tree.get_node": {
            "name": "get_node",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "element": []
            }
        },
        "Tree.set_node": {
            "name": "set_node",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "element": [],
                "value": []
            }
        },
        "Tree.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/options/__init__.py": {},
    "Prycing-master/tests/test_binom.py": {
        "TestFairValue.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFairValue.test_put_fair_value": {
            "name": "test_put_fair_value",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFairValue.test_call_fair_value": {
            "name": "test_call_fair_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/tests/test_bsm.py": {
        "TestImpliedVol.test_vol_finder": {
            "name": "test_vol_finder",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "spot": [],
                "strike": [],
                "time_to_maturity": [],
                "sigma": [],
                "discount_rate": [],
                "dividend_yield": []
            }
        },
        "TestImpliedVol.test_edge_cases": {
            "name": "test_edge_cases",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBSMOptionSanityChecks.test_init": {
            "name": "test_init",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBSMOptionSanityChecks.test_delta_checks": {
            "name": "test_delta_checks",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGreeks.test_delta": {
            "name": "test_delta",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGreeks.test_vega": {
            "name": "test_vega",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPutCallEquality.test_put_call_equality": {
            "name": "test_put_call_equality",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "spot": [],
                "strike": [],
                "time_to_maturity": [],
                "sigma": []
            }
        },
        "TestFairValue.setUp": {
            "name": "setUp",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFairValue.test_put_fair_value": {
            "name": "test_put_fair_value",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFairValue.test_call_fair_value": {
            "name": "test_call_fair_value",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindImpiedVol.test_find_implied_vol": {
            "name": "test_find_implied_vol",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/tests/test_gbm.py": {
        "TestGBMFailure.test_zero_time": {
            "name": "test_zero_time",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGBMFailure.test_odd_paths": {
            "name": "test_odd_paths",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/tests/test_lsm.py": {
        "Table1Prices.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table1Prices.test_table_1_laguerre_2": {
            "name": "test_table_1_laguerre_2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table1Prices.test_table_1_linear": {
            "name": "test_table_1_linear",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmericanMoreExpensive.test_american_more_expensive": {
            "name": "test_american_more_expensive",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "strike": [],
                "discount_rate": [],
                "starting_stock_price": [],
                "sigma": [],
                "T": []
            }
        }
    },
    "Prycing-master/tests/test_utils.py": {
        "TestTree.test_empty_tree": {
            "name": "test_empty_tree",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_negative_level": {
            "name": "test_negative_level",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_out_of_tree_level": {
            "name": "test_out_of_tree_level",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_node_out_of_tree": {
            "name": "test_node_out_of_tree",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_set_node_out_of_tree": {
            "name": "test_set_node_out_of_tree",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTree.test_tree_repr": {
            "name": "test_tree_repr",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Prycing-master/tests/__init__.py": {}
}
{
    "Purlovia-master/browseasset.py": {
        "create_ui": {
            "name": "create_ui",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "on_tree_open": {
            "name": "on_tree_open",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "evt": []
            }
        },
        "node_id": {
            "name": "node_id",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": [],
                "parentId": []
            }
        },
        "type_name": {
            "name": "type_name",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "has_children": {
            "name": "has_children",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "get_node_iterator": {
            "name": "get_node_iterator",
            "location": 111,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "node": []
            }
        },
        "add_placeholder_node": {
            "name": "add_placeholder_node",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "itemId": []
            }
        },
        "add_asset_to_root": {
            "name": "add_asset_to_root",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "asset": []
            }
        },
        "get_value_as_string": {
            "name": "get_value_as_string",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "insert_fields_for_node": {
            "name": "insert_fields_for_node",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "parentId": []
            }
        },
        "load_asset": {
            "name": "load_asset",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "assetname": []
            }
        },
        "relative_path": {
            "name": "relative_path",
            "location": 170,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "path": [],
                "root": []
            }
        },
        "find_asset": {
            "name": "find_asset",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "assetname": [],
                "loader": []
            }
        }
    },
    "Purlovia-master/browseprop.py": {
        "create_ui": {
            "name": "create_ui",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "type_name": {
            "name": "type_name",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "get_value_as_string": {
            "name": "get_value_as_string",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "load_asset": {
            "name": "load_asset",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "assetname": []
            }
        },
        "should_filter_out": {
            "name": "should_filter_out",
            "location": 76,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "prop": []
            }
        },
        "record_properties": {
            "name": "record_properties",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "properties": [],
                "assetname": []
            }
        },
        "fill_property_grid": {
            "name": "fill_property_grid",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/config.py": {
        "get_global_config": {
            "name": "get_global_config",
            "location": 25,
            "return": [
                "automate.config.sections.ConfigFile"
            ],
            "arguments": {}
        },
        "force_reload": {
            "name": "force_reload",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_ensure_loaded": {
            "name": "_ensure_loaded",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/interactive_utils.py": {
        "configure_ipython_width": {
            "name": "configure_ipython_width",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "configure_ipython_width._pprint": {
            "name": "_pprint",
            "location": 50,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "configure_ipython_width._pretty": {
            "name": "_pretty",
            "location": 53,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "Purlovia-master/setup.py": {},
    "Purlovia-master/ueexport.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 28,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "collect_asset": {
            "name": "collect_asset",
            "location": 46,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ]
            }
        },
        "create_filename": {
            "name": "create_filename",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "find_export": {
            "name": "find_export",
            "location": 79,
            "return": [
                "Optional[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "collect_data": {
            "name": "collect_data",
            "location": 128,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "manage_output_file": {
            "name": "manage_output_file",
            "location": 208,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/uegrep.py": {
        "modlist": {
            "name": "modlist",
            "location": 23,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 32,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "find_matches": {
            "name": "find_matches",
            "location": 73,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {}
        },
        "output_result": {
            "name": "output_result",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/ark/asset.py": {
        "find_components": {
            "name": "find_components",
            "location": 11,
            "return": [
                "Iterator[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "expect_klassname": []
            }
        },
        "find_dcsc": {
            "name": "find_dcsc",
            "location": 21,
            "return": [
                "Optional[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "findComponentExports": {
            "name": "findComponentExports",
            "location": 31,
            "return": [
                "Iterator[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "findSubComponentExports": {
            "name": "findSubComponentExports",
            "location": 38,
            "return": [
                "Iterator[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "expectedklassname": []
            }
        },
        "findParentPackages": {
            "name": "findParentPackages",
            "location": 49,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "findSubComponentParentPackages": {
            "name": "findSubComponentParentPackages",
            "location": 57,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "expectedklassname": []
            }
        },
        "findExportSourcePackage": {
            "name": "findExportSourcePackage",
            "location": 64,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        }
    },
    "Purlovia-master/ark/discovery.py": {
        "initialise_hierarchy": {
            "name": "initialise_hierarchy",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ]
            }
        },
        "_populate_tree_from_relations": {
            "name": "_populate_tree_from_relations",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "utils.tree.IndexedTree[str]"
                ],
                "relations": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "_process_leftover_relations": {
            "name": "_process_leftover_relations",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "entries": [
                    "Dict[(str, Set[str])]"
                ]
            }
        },
        "_gather_relations": {
            "name": "_gather_relations",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ],
                "basepath": [
                    "pathlib.Path"
                ]
            }
        },
        "_scan_core": {
            "name": "_scan_core",
            "location": 127,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_scan_mod": {
            "name": "_scan_mod",
            "location": 147,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "modid": [
                    "str"
                ],
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ],
                "verbose": []
            }
        },
        "_explore_path": {
            "name": "_explore_path",
            "location": 161,
            "return": [
                "Generator[(Tuple[(str, str)], None, None)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "is_mod": [
                    "bool"
                ],
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/ark/gathering.py": {
        "extract_properties_from_export": {
            "name": "extract_properties_from_export",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "export": [],
                "props": [
                    "Dict[(str, Dict[(int, ue.base.UEBase)])]"
                ],
                "skip_top": [],
                "recurse": [],
                "report": []
            }
        },
        "find_default_export_for_asset": {
            "name": "find_default_export_for_asset",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "species_cls": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "gather_dcsc_properties": {
            "name": "gather_dcsc_properties",
            "location": 39,
            "return": [
                "ark.types.DinoCharacterStatusComponent"
            ],
            "arguments": {
                "species_cls": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "_get_dcscs_for_species": {
            "name": "_get_dcscs_for_species",
            "location": 83,
            "return": [
                "Iterable[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        }
    },
    "Purlovia-master/ark/mod.py": {
        "_mod_sorter": {
            "name": "_mod_sorter",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "modid": [
                    "str"
                ]
            }
        },
        "get_official_mods": {
            "name": "get_official_mods",
            "location": 21,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_managed_mods": {
            "name": "get_managed_mods",
            "location": 28,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_core_mods": {
            "name": "get_core_mods",
            "location": 38,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_separate_mods": {
            "name": "get_separate_mods",
            "location": 48,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_aliases_for_mod": {
            "name": "get_aliases_for_mod",
            "location": 55,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/ark/overrides.py": {
        "get_overrides": {
            "name": "get_overrides",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "_get_overrides_global_dict": {
            "name": "_get_overrides_global_dict",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "get_overrides_global": {
            "name": "get_overrides_global",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "_get_overrides_for_mod_dict": {
            "name": "_get_overrides_for_mod_dict",
            "location": 206,
            "return": [],
            "arguments": {
                "modid": []
            }
        },
        "get_overrides_for_mod": {
            "name": "get_overrides_for_mod",
            "location": 216,
            "return": [],
            "arguments": {
                "modid": []
            }
        },
        "_get_overrides_for_item_dict": {
            "name": "_get_overrides_for_item_dict",
            "location": 224,
            "return": [],
            "arguments": {
                "item": [],
                "modid": []
            }
        },
        "get_overrides_for_item": {
            "name": "get_overrides_for_item",
            "location": 234,
            "return": [],
            "arguments": {
                "item": [],
                "modid": []
            }
        },
        "_get_overrides_for_species_dict": {
            "name": "_get_overrides_for_species_dict",
            "location": 240,
            "return": [],
            "arguments": {
                "species": [],
                "modid": []
            }
        },
        "get_overrides_for_species": {
            "name": "get_overrides_for_species",
            "location": 250,
            "return": [],
            "arguments": {
                "species": [],
                "modid": []
            }
        },
        "_get_overrides_for_map_dict": {
            "name": "_get_overrides_for_map_dict",
            "location": 256,
            "return": [],
            "arguments": {
                "map_asset": [],
                "modid": []
            }
        },
        "get_overrides_for_map": {
            "name": "get_overrides_for_map",
            "location": 266,
            "return": [],
            "arguments": {
                "map": [],
                "modid": []
            }
        },
        "any_regexes_match": {
            "name": "any_regexes_match",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "source": [
                    "Union[(Dict[(str, str)], List[str])]"
                ],
                "target": [
                    "str"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "nested_update": {
            "name": "nested_update",
            "location": 280,
            "return": [
                "_T0"
            ],
            "arguments": {
                "d": [
                    "_T0"
                ],
                "v": []
            }
        }
    },
    "Purlovia-master/ark/properties.py": {
        "extract_properties_from_export": {
            "name": "extract_properties_from_export",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "export": [],
                "props": [
                    "Dict[(str, Dict[(int, List[ue.base.UEBase])])]"
                ],
                "recurse": []
            }
        },
        "gather_properties": {
            "name": "gather_properties",
            "location": 28,
            "return": [
                "Union[(Dict[(str, Dict[(int, List[ue.base.UEBase])])], collections.defaultdict[(nothing, Any)])]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "props": [
                    "Optional[Dict[(str, Dict[(int, List[ue.base.UEBase])])]]"
                ],
                "report": []
            }
        },
        "gather_properties_internal": {
            "name": "gather_properties_internal",
            "location": 53,
            "return": [
                "Dict[(str, Dict[(int, List[ue.base.UEBase])])]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "props": [
                    "Dict[(str, Dict[(int, List[ue.base.UEBase])])]"
                ],
                "dcscs": [
                    "List[Tuple[(int, ue.asset.ExportTableItem)]]"
                ],
                "dcsc": [],
                "report": [],
                "depth": []
            }
        },
        "clean_value": {
            "name": "clean_value",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "fallback": []
            }
        },
        "clean_value_str": {
            "name": "clean_value_str",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "fallback": []
            }
        },
        "stat_value": {
            "name": "stat_value",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "props": [],
                "name": [],
                "index": [],
                "fallback": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 140,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "props": []
            }
        },
        "flatten_to_strings": {
            "name": "flatten_to_strings",
            "location": 145,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "props": []
            }
        }
    },
    "Purlovia-master/ark/tree.py": {
        "get_parent_of_export": {
            "name": "get_parent_of_export",
            "location": 22,
            "return": [],
            "arguments": {
                "export": []
            }
        },
        "export_inherits_from": {
            "name": "export_inherits_from",
            "location": 57,
            "return": [],
            "arguments": {
                "export": [],
                "target": []
            }
        },
        "inherits_from": {
            "name": "inherits_from",
            "location": 77,
            "return": [],
            "arguments": {
                "asset": [],
                "targetname": []
            }
        },
        "walk_parents": {
            "name": "walk_parents",
            "location": 85,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "fn": [
                    "Callable[([str], Optional[T])]"
                ]
            }
        }
    },
    "Purlovia-master/ark/types.py": {},
    "Purlovia-master/ark/variants.py": {
        "_gather_mission_variants": {
            "name": "_gather_mission_variants",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ],
                "variants": [
                    "Set[str]"
                ]
            }
        },
        "_gather_biome_variants": {
            "name": "_gather_biome_variants",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ],
                "variants": [
                    "Set[str]"
                ]
            }
        },
        "adjust_name_from_variants": {
            "name": "adjust_name_from_variants",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "variants": [
                    "set"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "get_variants_from_species": {
            "name": "get_variants_from_species",
            "location": 69,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "char": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "get_variants_from_assetname": {
            "name": "get_variants_from_assetname",
            "location": 88,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "should_skip_from_variants": {
            "name": "should_skip_from_variants",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "variants": [
                    "Set[str]"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        }
    },
    "Purlovia-master/ark/__init__.py": {},
    "Purlovia-master/automate/ark.py": {
        "findInstalledMods": {
            "name": "findInstalledMods",
            "location": 351,
            "return": [
                "Dict[(str, dict)]"
            ],
            "arguments": {
                "asset_path": [
                    "pathlib.Path"
                ]
            }
        },
        "_fetchGameVersionFromAPI": {
            "name": "_fetchGameVersionFromAPI",
            "location": 363,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_fetchGameVersionFromFile": {
            "name": "_fetchGameVersionFromFile",
            "location": 371,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "gamedata_path": [
                    "pathlib.Path"
                ]
            }
        },
        "fetchGameVersion": {
            "name": "fetchGameVersion",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "gamedata_path": [
                    "pathlib.Path"
                ]
            }
        },
        "getSteamModVersions": {
            "name": "getSteamModVersions",
            "location": 428,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "game_path": [
                    "pathlib.Path"
                ],
                "modids": []
            }
        },
        "getGameBuildId": {
            "name": "getGameBuildId",
            "location": 437,
            "return": [
                "str"
            ],
            "arguments": {
                "game_path": [
                    "pathlib.Path"
                ]
            }
        },
        "gatherModInfo": {
            "name": "gatherModInfo",
            "location": 448,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "asset_path": [
                    "pathlib.Path"
                ],
                "modid": []
            }
        },
        "readModData": {
            "name": "readModData",
            "location": 468,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "asset_path": [
                    "pathlib.Path"
                ],
                "modid": []
            }
        },
        "verifyModDownloaded": {
            "name": "verifyModDownloaded",
            "location": 482,
            "return": [
                "Any"
            ],
            "arguments": {
                "game_path": [],
                "modid": []
            }
        },
        "unpackMod": {
            "name": "unpackMod",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "game_path": [],
                "modid": []
            }
        },
        "getGameVersionFromServerExe": {
            "name": "getGameVersionFromServerExe",
            "location": 518,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "game_path": [
                    "pathlib.Path"
                ]
            }
        },
        "ArkSteamManager.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "automate.config.sections.ConfigFile"
                ]
            }
        },
        "ArkSteamManager.getLoader": {
            "name": "getLoader",
            "location": 58,
            "return": [
                "ue.loader.AssetLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.createLoader": {
            "name": "createLoader",
            "location": 64,
            "return": [
                "ue.loader.AssetLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.getInstalledMods": {
            "name": "getInstalledMods",
            "location": 77,
            "return": [
                "Optional[Dict[(str, dict)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.getModData": {
            "name": "getModData",
            "location": 84,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ArkSteamManager.getGameVersion": {
            "name": "getGameVersion",
            "location": 101,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.getGameBuildId": {
            "name": "getGameBuildId",
            "location": 108,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.getContentPath": {
            "name": "getContentPath",
            "location": 115,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.ensureSteamCmd": {
            "name": "ensureSteamCmd",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.ensureGameUpdated": {
            "name": "ensureGameUpdated",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager.ensureModsUpdated": {
            "name": "ensureModsUpdated",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modids": [
                    "Sequence[Union[(int, str)]]"
                ]
            }
        },
        "ArkSteamManager._installMods": {
            "name": "_installMods",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modids": []
            }
        },
        "ArkSteamManager._fetch_mod_title_from_pgd": {
            "name": "_fetch_mod_title_from_pgd",
            "location": 251,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "moddata": []
            }
        },
        "ArkSteamManager._fetch_mod_title": {
            "name": "_fetch_mod_title",
            "location": 264,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "moddata": []
            }
        },
        "ArkSteamManager._removeMods": {
            "name": "_removeMods",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modids": []
            }
        },
        "ArkSteamManager._cleanSteamModCache": {
            "name": "_cleanSteamModCache",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArkSteamManager._sanityCheck": {
            "name": "_sanityCheck",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedModResolver.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "ManagedModResolver.initialise": {
            "name": "initialise",
            "location": 312,
            "return": [
                "_TManagedModResolver"
            ],
            "arguments": {
                "self": [
                    "_TManagedModResolver"
                ]
            }
        },
        "ManagedModResolver.get_name_from_id": {
            "name": "get_name_from_id",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ManagedModResolver.get_id_from_name": {
            "name": "get_id_from_name",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FixedModResolver.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namesToIds": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "FixedModResolver.initialise": {
            "name": "initialise",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedModResolver.get_id_from_name": {
            "name": "get_id_from_name",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FixedModResolver.get_name_from_id": {
            "name": "get_name_from_id",
            "location": 347,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modid": []
            }
        },
        "ArkSteamManager.ensureModsUpdated.isOutdated": {
            "name": "isOutdated",
            "location": 174,
            "return": [],
            "arguments": {
                "existing_data": [],
                "workshop_details": []
            }
        }
    },
    "Purlovia-master/automate/cli.py": {
        "modlist": {
            "name": "modlist",
            "location": 21,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "maplist": {
            "name": "maplist",
            "location": 28,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 75,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "handle_args": {
            "name": "handle_args",
            "location": 110,
            "return": [
                "automate.config.sections.ConfigFile"
            ],
            "arguments": {
                "args": []
            }
        },
        "display_sections": {
            "name": "display_sections",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "automate.config.sections.ConfigFile"
                ]
            }
        },
        "calculate_mods": {
            "name": "calculate_mods",
            "location": 179,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "user": [
                    "Tuple[(str, ...)]"
                ],
                "existing": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VerifyModsAction.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "dest": [],
                "nargs": [],
                "mods": []
            }
        },
        "VerifyModsAction.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "VerifySectionsAction.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "dest": [],
                "nargs": [],
                "roots": []
            }
        },
        "VerifySectionsAction.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        }
    },
    "Purlovia-master/automate/exporter.py": {
        "ExportRoot.get_name": {
            "name": "get_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportRoot.get_relative_path": {
            "name": "get_relative_path",
            "location": 40,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportRoot.get_commit_header": {
            "name": "get_commit_header",
            "location": 45,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportRoot.get_name_for_path": {
            "name": "get_name_for_path",
            "location": 50,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "ExportRoot.get_should_commit": {
            "name": "get_should_commit",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportStage.initialise": {
            "name": "initialise",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "ExportManager"
                ],
                "root": [
                    "ExportRoot"
                ]
            }
        },
        "ExportStage.get_name": {
            "name": "get_name",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportStage.extract_core": {
            "name": "extract_core",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "ExportStage.extract_mod": {
            "name": "extract_mod",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        },
        "ExportManager.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arkman": [
                    "automate.ark.ArkSteamManager"
                ],
                "git": [
                    "automate.git.GitManager"
                ],
                "config": []
            }
        },
        "ExportManager.add_root": {
            "name": "add_root",
            "location": 96,
            "return": [
                "ExportRoot"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "ExportRoot"
                ]
            }
        },
        "ExportManager.perform": {
            "name": "perform",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportManager._get_name_for_stage": {
            "name": "_get_name_for_stage",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "ExportRoot"
                ],
                "stage": [
                    "Optional[ExportStage]"
                ]
            }
        },
        "ExportManager._get_mod_name": {
            "name": "_get_mod_name",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ExportManager._perform_export": {
            "name": "_perform_export",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportManager._commit_line_for_file": {
            "name": "_commit_line_for_file",
            "location": 188,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "ExportManager._find_matching_root": {
            "name": "_find_matching_root",
            "location": 233,
            "return": [
                "Optional[ExportRoot]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ExportManager._find_matching_manifest_entry": {
            "name": "_find_matching_manifest_entry",
            "location": 245,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "ExportRoot"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "ExportManager._clear_mod_from_cache": {
            "name": "_clear_mod_from_cache",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ExportManager._log_stats": {
            "name": "_log_stats",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportManager.iterate_core_exports_of_type": {
            "name": "iterate_core_exports_of_type",
            "location": 265,
            "return": [
                "Iterator[ue.proxy.UEProxyStructure]"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str"
                ],
                "sort": [],
                "filter": []
            }
        },
        "ExportManager.iterate_mod_exports_of_type": {
            "name": "iterate_mod_exports_of_type",
            "location": 290,
            "return": [
                "Iterator[ue.proxy.UEProxyStructure]"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str"
                ],
                "modid": [
                    "str"
                ],
                "sort": [],
                "filter": []
            }
        },
        "ExportManager._iterate_exports": {
            "name": "_iterate_exports",
            "location": 320,
            "return": [
                "Iterator[ue.proxy.UEProxyStructure]"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Set[str]"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "ExportManager.get_mod_version": {
            "name": "get_mod_version",
            "location": 348,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/automate/git.py": {
        "GitManager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "automate.config.sections.ConfigFile"
                ]
            }
        },
        "GitManager.before_exports": {
            "name": "before_exports",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager.after_exports": {
            "name": "after_exports",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_path": [
                    "pathlib.Path"
                ],
                "commit_header": [
                    "str"
                ],
                "msg_fn": [
                    "Callable[([pathlib.Path], str)]"
                ]
            }
        },
        "GitManager.finish": {
            "name": "finish",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_version": [
                    "str"
                ]
            }
        },
        "GitManager._any_local_changes": {
            "name": "_any_local_changes",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "relative_path": [
                    "pathlib.Path"
                ]
            }
        },
        "GitManager._any_changes_to_push": {
            "name": "_any_changes_to_push",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager._do_reset_or_pull": {
            "name": "_do_reset_or_pull",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager._do_add": {
            "name": "_do_add",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_path": [
                    "pathlib.Path"
                ],
                "all": []
            }
        },
        "GitManager._do_tag": {
            "name": "_do_tag",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_version": [
                    "str"
                ]
            }
        },
        "GitManager._do_push": {
            "name": "_do_push",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager._do_commit": {
            "name": "_do_commit",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "relative_path": [
                    "pathlib.Path"
                ]
            }
        },
        "GitManager._validate_setup": {
            "name": "_validate_setup",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager._set_branch": {
            "name": "_set_branch",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitManager._create_commit_msg": {
            "name": "_create_commit_msg",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relative_path": [
                    "pathlib.Path"
                ],
                "commit_header": [
                    "str"
                ],
                "msg_fn": [
                    "Callable[([pathlib.Path], str)]"
                ]
            }
        },
        "GitManager._generate_info_line_from_file": {
            "name": "_generate_info_line_from_file",
            "location": 207,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/automate/hierarchy_exporter.py": {
        "_get_model_field_type": {
            "name": "_get_model_field_type",
            "location": 249,
            "return": [
                "Optional[type]"
            ],
            "arguments": {
                "model_type": [
                    "type"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "_get_model_list_field_type": {
            "name": "_get_model_list_field_type",
            "location": 268,
            "return": [
                "Optional[type]"
            ],
            "arguments": {
                "model_type": [
                    "type"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "_calculate_relative_path": {
            "name": "_calculate_relative_path",
            "location": 292,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "origin": [
                    "pathlib.PurePosixPath"
                ],
                "target": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "_output_schema": {
            "name": "_output_schema",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "model_type": [
                    "type"
                ],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "JsonHierarchyExportStage.get_format_version": {
            "name": "get_format_version",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_field": {
            "name": "get_field",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_core_file_path": {
            "name": "get_core_file_path",
            "location": 97,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_mod_file_path": {
            "name": "get_mod_file_path",
            "location": 102,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "JsonHierarchyExportStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 109,
            "return": [
                "Optional[Type[ExportFileModel]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.get_schema_filename": {
            "name": "get_schema_filename",
            "location": 113,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHierarchyExportStage.pre_load_filter": {
            "name": "pre_load_filter",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls_name": [
                    "str"
                ]
            }
        },
        "JsonHierarchyExportStage.extract": {
            "name": "extract",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "JsonHierarchyExportStage.get_pre_data": {
            "name": "get_pre_data",
            "location": 129,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "JsonHierarchyExportStage.get_post_data": {
            "name": "get_post_data",
            "location": 149,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "JsonHierarchyExportStage.extract_core": {
            "name": "extract_core",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "JsonHierarchyExportStage.extract_mod": {
            "name": "extract_mod",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        },
        "JsonHierarchyExportStage._extract_and_save": {
            "name": "_extract_and_save",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ],
                "modid": [
                    "Optional[str]"
                ],
                "base_path": [
                    "pathlib.Path"
                ],
                "relative_path": [
                    "pathlib.PurePosixPath"
                ],
                "proxy_iter": [
                    "Iterator[ue.proxy.UEProxyStructure]"
                ]
            }
        }
    },
    "Purlovia-master/automate/jsonutils.py": {
        "save_json_if_changed": {
            "name": "save_json_if_changed",
            "location": 18,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "Dict[(str, Any)]"
                ],
                "fullpath": [
                    "pathlib.Path"
                ],
                "pretty": [
                    "bool"
                ]
            }
        },
        "should_save_json": {
            "name": "should_save_json",
            "location": 35,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "values": [
                    "Dict[(str, Any)]"
                ],
                "fullpath": [
                    "pathlib.Path"
                ]
            }
        },
        "_calculate_digest": {
            "name": "_calculate_digest",
            "location": 85,
            "return": [
                "Tuple[(Optional[str], str)]"
            ],
            "arguments": {
                "values": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_flattener": {
            "name": "_flattener",
            "location": 142,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "group": [],
                "prefix": [],
                "postfix": []
            }
        },
        "_flatten_re_result": {
            "name": "_flatten_re_result",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "match": []
            }
        },
        "_format_json": {
            "name": "_format_json",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [],
                "pretty": []
            }
        },
        "save_as_json": {
            "name": "save_as_json",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "filename": [],
                "pretty": []
            }
        },
        "_flattener._fn": {
            "name": "_fn",
            "location": 147,
            "return": [],
            "arguments": {
                "match": []
            }
        }
    },
    "Purlovia-master/automate/manifest.py": {
        "update_manifest": {
            "name": "update_manifest",
            "location": 21,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "_write_manifest": {
            "name": "_write_manifest",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_generate_manifest": {
            "name": "_generate_manifest",
            "location": 46,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path"
                ],
                "ignores": [
                    "Sequence[str]"
                ]
            }
        },
        "_collect_info": {
            "name": "_collect_info",
            "location": 90,
            "return": [
                "dict"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "Purlovia-master/automate/modutils.py": {
        "unpackModFile": {
            "name": "unpackModFile",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "readACFFile": {
            "name": "readACFFile",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [],
                "outputType": []
            }
        },
        "readModInfo": {
            "name": "readModInfo",
            "location": 103,
            "return": [
                "dict"
            ],
            "arguments": {
                "filename": []
            }
        },
        "readModMetaInfo": {
            "name": "readModMetaInfo",
            "location": 112,
            "return": [
                "dict"
            ],
            "arguments": {
                "filename": []
            }
        },
        "readUnrealString": {
            "name": "readUnrealString",
            "location": 119,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "ue.stream.MemoryStream"
                ]
            }
        },
        "loadFileAsStream": {
            "name": "loadFileAsStream",
            "location": 130,
            "return": [
                "ue.stream.MemoryStream"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "Purlovia-master/automate/notification.py": {
        "get_log_tail": {
            "name": "get_log_tail",
            "location": 17,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "lines": [
                    "int"
                ]
            }
        },
        "send_to_discord": {
            "name": "send_to_discord",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "List[str]"
                ],
                "exception": [
                    "List[str]"
                ],
                "header": [
                    "str"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "logfile": [
                    "str"
                ],
                "loglines": [],
                "config": [
                    "automate.config.sections.ConfigFile"
                ]
            }
        }
    },
    "Purlovia-master/automate/run.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "level": []
            }
        },
        "log_versions": {
            "name": "log_versions",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "automate.config.sections.ConfigFile"
                ]
            }
        }
    },
    "Purlovia-master/automate/run_sections.py": {
        "_section_parent": {
            "name": "_section_parent",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "_section_parents": {
            "name": "_section_parents",
            "location": 27,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "include_self": []
            }
        },
        "_parse_section": {
            "name": "_parse_section",
            "location": 44,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "parse_runlist": {
            "name": "parse_runlist",
            "location": 72,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "should_run_section": {
            "name": "should_run_section",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "states": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "verify_sections": {
            "name": "verify_sections",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "sections": [
                    "Dict[(str, bool)]"
                ],
                "roots": [
                    "tuple"
                ]
            }
        }
    },
    "Purlovia-master/automate/steamapi.py": {
        "SteamApi._createUrl": {
            "name": "_createUrl",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "interface": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "version": [
                    "int"
                ]
            }
        },
        "SteamApi.GetPublishedFileDetails": {
            "name": "GetPublishedFileDetails",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "mods": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "Purlovia-master/automate/steamcmd.py": {
        "SteamcmdException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SteamcmdException.__unicode__": {
            "name": "__unicode__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SteamcmdException.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Steamcmd.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "install_path": []
            }
        },
        "Steamcmd._download_steamcmd": {
            "name": "_download_steamcmd",
            "location": 62,
            "return": [
                "Tuple[(str, http.client.HTTPMessage)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Steamcmd._extract_steamcmd": {
            "name": "_extract_steamcmd",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Steamcmd.install": {
            "name": "install",
            "location": 85,
            "return": [
                "Optional[SteamcmdException]"
            ],
            "arguments": {
                "self": [],
                "force": []
            }
        },
        "Steamcmd._launch_steamcmd": {
            "name": "_launch_steamcmd",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Steamcmd.install_gamefiles": {
            "name": "install_gamefiles",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameid": [],
                "game_install_dir": [
                    "pathlib.Path"
                ],
                "user": [],
                "password": [],
                "validate": []
            }
        },
        "Steamcmd.install_workshopfiles": {
            "name": "install_workshopfiles",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameid": [],
                "workshop_id": [],
                "game_install_dir": [],
                "user": [],
                "password": []
            }
        }
    },
    "Purlovia-master/automate/test_jsonutils.py": {
        "prop": {
            "name": "prop",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_dict_lone_values": {
            "name": "test_dict_lone_values",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_unknown_two_values": {
            "name": "test_dict_unknown_two_values",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_known_two_values": {
            "name": "test_dict_known_two_values",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_ints": {
            "name": "test_array_ints",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_strings": {
            "name": "test_array_strings",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_bools": {
            "name": "test_array_bools",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_nulls": {
            "name": "test_array_nulls",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_item_weights": {
            "name": "test_item_weights",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_color_entry": {
            "name": "test_color_entry",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optional_fields": {
            "name": "test_optional_fields",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_original_tests": {
            "name": "test_original_tests",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/automate/version.py": {
        "createExportVersion": {
            "name": "createExportVersion",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "gameVersion": [
                    "str"
                ],
                "timestamp": [
                    "Union[(int, str)]"
                ]
            }
        }
    },
    "Purlovia-master/automate/__init__.py": {},
    "Purlovia-master/automate/__main__.py": {},
    "Purlovia-master/automate/config/reader.py": {
        "read_config": {
            "name": "read_config",
            "location": 26,
            "return": [
                "automate.config.sections.ConfigFile"
            ],
            "arguments": {
                "filename": [
                    "Optional[str]"
                ],
                "config_string": [
                    "Optional[str]"
                ]
            }
        }
    },
    "Purlovia-master/automate/config/sections.py": {},
    "Purlovia-master/automate/config/util_types.py": {
        "IniStringList.__get_validators__": {
            "name": "__get_validators__",
            "location": 13,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "IniStringList.convert": {
            "name": "convert",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ModIdAccess.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict[(str, str)]"
                ],
                "keyed_by_id": []
            }
        },
        "ModIdAccess.__get_validators__": {
            "name": "__get_validators__",
            "location": 40,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ModIdAccess.validate": {
            "name": "validate",
            "location": 44,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0"
                ]
            }
        },
        "ModIdAccess.ids": {
            "name": "ids",
            "location": 47,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModIdAccess.tags": {
            "name": "tags",
            "location": 50,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModIdAccess.id_from_tag": {
            "name": "id_from_tag",
            "location": 53,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "ModIdAccess.tag_from_id": {
            "name": "tag_from_id",
            "location": 56,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ModAliases.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "ModAliases.__get_validators__": {
            "name": "__get_validators__",
            "location": 73,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ModAliases.validate": {
            "name": "validate",
            "location": 77,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0"
                ]
            }
        }
    },
    "Purlovia-master/automate/config/__init__.py": {},
    "Purlovia-master/export/__init__.py": {},
    "Purlovia-master/export/asb/bones.py": {
        "gather_damage_mults": {
            "name": "gather_damage_mults",
            "location": 10,
            "return": [
                "Optional[Dict[(str, float)]]"
            ],
            "arguments": {
                "char_props": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/breeding.py": {
        "gather_breeding_data": {
            "name": "gather_breeding_data",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "char_props": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/colors.py": {
        "gather_pgd_colors": {
            "name": "gather_pgd_colors",
            "location": 24,
            "return": [
                "Tuple[(Optional[Sequence[Tuple[(str, Tuple[(float, float, float, float)])]]], Optional[Sequence[Tuple[(str, Tuple[(float, float, float, float)])]]])]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "props": [
                    "ark.types.PrimalGameData"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ],
                "require_override": []
            }
        },
        "gather_color_data": {
            "name": "gather_color_data",
            "location": 63,
            "return": [
                "Optional[List[Optional[Dict[(str, Any)]]]]"
            ],
            "arguments": {
                "char_props": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/export_asb_values.py": {
        "values_from_pgd": {
            "name": "values_from_pgd",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "require_override": [
                    "bool"
                ]
            }
        },
        "should_skip_from_variants": {
            "name": "should_skip_from_variants",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "variants": [
                    "Set[str]"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "values_for_species": {
            "name": "values_for_species",
            "location": 80,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "proxy": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        },
        "get_stat_name_overrides": {
            "name": "get_stat_name_overrides",
            "location": 226,
            "return": [
                "Dict[(int, str)]"
            ],
            "arguments": {
                "dcsc": [
                    "ark.types.PrimalDinoStatusComponent"
                ]
            }
        },
        "reduce_alt_stats": {
            "name": "reduce_alt_stats",
            "location": 237,
            "return": [
                "Optional[Dict[(int, Any)]]"
            ],
            "arguments": {
                "normal_stats": [],
                "alt_stats": []
            }
        }
    },
    "Purlovia-master/export/asb/immobilize.py": {
        "ensure_immobilization_itemdata": {
            "name": "ensure_immobilization_itemdata",
            "location": 34,
            "return": [
                "List[ImmobilizingItem]"
            ],
            "arguments": {
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "gather_immobilization_data": {
            "name": "gather_immobilization_data",
            "location": 44,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "char_props": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/root.py": {
        "ASBRoot.get_name": {
            "name": "get_name",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASBRoot.get_relative_path": {
            "name": "get_relative_path",
            "location": 18,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASBRoot.get_commit_header": {
            "name": "get_commit_header",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASBRoot.get_name_for_path": {
            "name": "get_name_for_path",
            "location": 24,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "ASBRoot.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/export/asb/stage_species.py": {
        "SpeciesStage.get_name": {
            "name": "get_name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_core_file_path": {
            "name": "get_core_file_path",
            "location": 28,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_mod_file_path": {
            "name": "get_mod_file_path",
            "location": 32,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "SpeciesStage.get_format_version": {
            "name": "get_format_version",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_post_data": {
            "name": "get_post_data",
            "location": 44,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "SpeciesStage.extract": {
            "name": "extract",
            "location": 69,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/stats.py": {
        "gather_stat_data": {
            "name": "gather_stat_data",
            "location": 14,
            "return": [
                "List[Optional[List[float]]]"
            ],
            "arguments": {
                "dcsc_props": [
                    "ark.types.PrimalDinoStatusComponent"
                ],
                "meta_props": [
                    "ark.types.PrimalDinoStatusComponent"
                ],
                "is_flyer": [
                    "bool"
                ],
                "statIndexes": [
                    "Tuple[(int, ...)]"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/taming.py": {
        "gather_taming_data": {
            "name": "gather_taming_data",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "char_props": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "dcsc_props": [
                    "ark.types.PrimalDinoStatusComponent"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        }
    },
    "Purlovia-master/export/asb/taming_foods.py": {},
    "Purlovia-master/export/asb/__init__.py": {},
    "Purlovia-master/export/maps/common.py": {
        "remove_unicode_control_chars": {
            "name": "remove_unicode_control_chars",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "Purlovia-master/export/maps/root.py": {
        "WikiMapsRoot.get_name": {
            "name": "get_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiMapsRoot.get_relative_path": {
            "name": "get_relative_path",
            "location": 20,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiMapsRoot.get_should_commit": {
            "name": "get_should_commit",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiMapsRoot.get_commit_header": {
            "name": "get_commit_header",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiMapsRoot.get_name_for_path": {
            "name": "get_name_for_path",
            "location": 29,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "WikiMapsRoot.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/export/maps/stage_base.py": {
        "ProcessingStage.initialise": {
            "name": "initialise",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "automate.exporter.ExportManager"
                ],
                "root": [
                    "automate.exporter.ExportRoot"
                ]
            }
        },
        "ProcessingStage.load_json_file": {
            "name": "load_json_file",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "ProcessingStage.save_raw_file": {
            "name": "save_raw_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "Purlovia-master/export/maps/stage_biome_maps.py": {
        "ProcessBiomeMapsStage.get_name": {
            "name": "get_name",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessBiomeMapsStage.extract_core": {
            "name": "extract_core",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ]
            }
        },
        "ProcessBiomeMapsStage.extract_mod": {
            "name": "extract_mod",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        },
        "ProcessBiomeMapsStage._process": {
            "name": "_process",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_path": [
                    "pathlib.Path"
                ],
                "out_path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "Optional[str]"
                ]
            }
        }
    },
    "Purlovia-master/export/maps/stage_spawn_maps.py": {
        "_get_svg_bounds_for_map": {
            "name": "_get_svg_bounds_for_map",
            "location": 230,
            "return": [
                "export.maps.common.SVGBoundaries"
            ],
            "arguments": {
                "persistent_level": [
                    "str"
                ]
            }
        },
        "ProcessSpawnMapsStage.get_name": {
            "name": "get_name",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessSpawnMapsStage.extract_core": {
            "name": "extract_core",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ]
            }
        },
        "ProcessSpawnMapsStage.extract_mod": {
            "name": "extract_mod",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        },
        "ProcessSpawnMapsStage._load_asb": {
            "name": "_load_asb",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ProcessSpawnMapsStage._load_spawning_groups": {
            "name": "_load_spawning_groups",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ProcessSpawnMapsStage._get_spawning_groups": {
            "name": "_get_spawning_groups",
            "location": 74,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ],
                "is_game_mod": [
                    "bool"
                ]
            }
        },
        "ProcessSpawnMapsStage._map_mod_generate_svgs": {
            "name": "_map_mod_generate_svgs",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ],
                "mod_name": [
                    "str"
                ]
            }
        },
        "ProcessSpawnMapsStage._game_mod_generate_svgs": {
            "name": "_game_mod_generate_svgs",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ],
                "_mod_name": [
                    "str"
                ]
            }
        },
        "ProcessSpawnMapsStage._process_all_maps": {
            "name": "_process_all_maps",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maps": [
                    "List[pathlib.Path]"
                ],
                "base_path": [
                    "pathlib.Path"
                ],
                "data_asb": [],
                "data_groups": [],
                "data_swaps": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ProcessSpawnMapsStage._get_svg_output_path": {
            "name": "_get_svg_output_path",
            "location": 151,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "pathlib.Path"
                ],
                "map_name": [
                    "str"
                ],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ProcessSpawnMapsStage._map_process_data": {
            "name": "_map_process_data",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "pathlib.Path"
                ],
                "base_path": [
                    "pathlib.Path"
                ],
                "spawndata": [
                    "_SpawningData"
                ],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ProcessSpawnMapsStage._make_filename_for_export": {
            "name": "_make_filename_for_export",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "blueprint_path": []
            }
        }
    },
    "Purlovia-master/export/maps/__init__.py": {},
    "Purlovia-master/export/maps/region_maps/func.py": {
        "make_biome_link": {
            "name": "make_biome_link",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "map_name": [
                    "str"
                ],
                "biome_name": [
                    "str"
                ],
                "is_mod": [
                    "bool"
                ]
            }
        },
        "translate_coord": {
            "name": "translate_coord",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "shift": [],
                "multiplier": []
            }
        },
        "map_translate_coord": {
            "name": "map_translate_coord",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "border_l_or_t": [],
                "wh": [],
                "map_size": []
            }
        }
    },
    "Purlovia-master/export/maps/region_maps/svg.py": {
        "filter_biomes": {
            "name": "filter_biomes",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "biomes": []
            }
        },
        "_generate_biome_rects": {
            "name": "_generate_biome_rects",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "bounds": [
                    "export.maps.common.SVGBoundaries"
                ],
                "world_settings": [],
                "biome": []
            }
        },
        "generate_svg_map": {
            "name": "generate_svg_map",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "bounds": [
                    "export.maps.common.SVGBoundaries"
                ],
                "map_name": [],
                "world_settings": [],
                "biomes": [],
                "follow_mod_convention": []
            }
        }
    },
    "Purlovia-master/export/maps/region_maps/__init__.py": {},
    "Purlovia-master/export/maps/spawn_maps/consts.py": {},
    "Purlovia-master/export/maps/spawn_maps/game_mod.py": {
        "merge_game_mod_groups": {
            "name": "merge_game_mod_groups",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "core_groups": [],
                "changeset": []
            }
        }
    },
    "Purlovia-master/export/maps/spawn_maps/intermediate_types.py": {},
    "Purlovia-master/export/maps/spawn_maps/species.py": {
        "_get_front_dino_merge_group": {
            "name": "_get_front_dino_merge_group",
            "location": 104,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "blueprint_path": [
                    "str"
                ]
            }
        },
        "generate_dino_mappings": {
            "name": "generate_dino_mappings",
            "location": 111,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "asb": []
            }
        },
        "determine_tamability": {
            "name": "determine_tamability",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "asb": [],
                "blueprint_path": []
            }
        },
        "calculate_blueprint_freqs": {
            "name": "calculate_blueprint_freqs",
            "location": 142,
            "return": [
                "List[export.maps.spawn_maps.intermediate_types.SpawnFrequency]"
            ],
            "arguments": {
                "spawngroups": [],
                "class_swap_rulesets": [],
                "dino_classes": []
            }
        },
        "get_rarity_for_spawn": {
            "name": "get_rarity_for_spawn",
            "location": 183,
            "return": [
                "int"
            ],
            "arguments": {
                "spawn_data": [],
                "frequency": [
                    "float"
                ]
            }
        }
    },
    "Purlovia-master/export/maps/spawn_maps/svg.py": {
        "is_group_in_cave": {
            "name": "is_group_in_cave",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "find_frequency_for_group": {
            "name": "find_frequency_for_group",
            "location": 23,
            "return": [
                "float"
            ],
            "arguments": {
                "frequency_set": [],
                "group_path": []
            }
        },
        "build_shapes": {
            "name": "build_shapes",
            "location": 31,
            "return": [
                "Tuple[(List[List[export.maps.spawn_maps.intermediate_types.SpawnRectangle]], List[List[export.maps.spawn_maps.intermediate_types.SpawnPoint]])]"
            ],
            "arguments": {
                "bounds": [
                    "export.maps.common.SVGBoundaries"
                ],
                "spawns": [],
                "spawn_entries_frequencies": [],
                "always_untameable": []
            }
        },
        "_generate_svg_spawn_regions": {
            "name": "_generate_svg_spawn_regions",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "rarity_sets": []
            }
        },
        "_generate_svg_spawn_points": {
            "name": "_generate_svg_spawn_points",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "rarity_sets": []
            }
        },
        "_generate_svg_untameables": {
            "name": "_generate_svg_untameables",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "rarity_sets": []
            }
        },
        "_generate_svg_caves": {
            "name": "_generate_svg_caves",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "rarity_sets": []
            }
        },
        "generate_svg_map": {
            "name": "generate_svg_map",
            "location": 144,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "bounds": [
                    "export.maps.common.SVGBoundaries"
                ],
                "spawn_freqs": [],
                "spawns": [],
                "force_untameable": []
            }
        }
    },
    "Purlovia-master/export/maps/spawn_maps/swaps.py": {
        "fix_up_groups": {
            "name": "fix_up_groups",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "spawngroups": []
            }
        },
        "make_random_class_weights_dict": {
            "name": "make_random_class_weights_dict",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "random_class_weights": []
            }
        },
        "fix_up_swap_rule_weights": {
            "name": "fix_up_swap_rule_weights",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "rule": []
            }
        },
        "inflate_swap_rules": {
            "name": "inflate_swap_rules",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "random_class_weights": []
            }
        },
        "apply_ideal_swaps_to_entry": {
            "name": "apply_ideal_swaps_to_entry",
            "location": 74,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "entry": [],
                "class_swaps": [],
                "only_events": []
            }
        },
        "apply_ideal_grouplevel_swaps": {
            "name": "apply_ideal_grouplevel_swaps",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "spawngroups": []
            }
        },
        "apply_ideal_global_swaps": {
            "name": "apply_ideal_global_swaps",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "spawngroups": [],
                "random_class_weights": [],
                "only_events": []
            }
        },
        "copy_spawn_groups": {
            "name": "copy_spawn_groups",
            "location": 135,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "spawngroups": []
            }
        }
    },
    "Purlovia-master/export/maps/spawn_maps/__init__.py": {},
    "Purlovia-master/export/sanity/root.py": {
        "SanityRoot.get_name": {
            "name": "get_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SanityRoot.get_commit_header": {
            "name": "get_commit_header",
            "location": 20,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SanityRoot.get_name_for_path": {
            "name": "get_name_for_path",
            "location": 23,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "SanityRoot.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/export/sanity/stage_items.py": {
        "ItemsStage.get_name": {
            "name": "get_name",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.extract_core": {
            "name": "extract_core",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ]
            }
        },
        "ItemsStage.extract_mod": {
            "name": "extract_mod",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/sanity/stage_maps.py": {
        "MapsStage.initialise": {
            "name": "initialise",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "automate.exporter.ExportManager"
                ],
                "root": [
                    "automate.exporter.ExportRoot"
                ]
            }
        },
        "MapsStage.get_name": {
            "name": "get_name",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapsStage.extract_core": {
            "name": "extract_core",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ]
            }
        },
        "MapsStage.extract_mod": {
            "name": "extract_mod",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/sanity/stage_species.py": {
        "SpeciesStage.get_name": {
            "name": "get_name",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.extract_core": {
            "name": "extract_core",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "pathlib.Path"
                ]
            }
        },
        "SpeciesStage.extract_mod": {
            "name": "extract_mod",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/sanity/__init__.py": {},
    "Purlovia-master/export/wiki/consts.py": {},
    "Purlovia-master/export/wiki/flags.py": {
        "gather_flags": {
            "name": "gather_flags",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ],
                "flags": [
                    "Iterable[str]"
                ]
            }
        },
        "_clean_flag_name": {
            "name": "_clean_flag_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/inherited_structs.py": {
        "_gather_props_from_export": {
            "name": "_gather_props_from_export",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ],
                "name": [
                    "str"
                ],
                "index": [
                    "int"
                ],
                "output": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "gather_inherited_struct_fields": {
            "name": "gather_inherited_struct_fields",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "leaf_export": [
                    "ue.asset.ExportTableItem"
                ],
                "field": [
                    "str"
                ],
                "defaults": [
                    "Dict[(str, Any)]"
                ],
                "index": [
                    "int"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/models.py": {},
    "Purlovia-master/export/wiki/root.py": {
        "WikiRoot.get_name": {
            "name": "get_name",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiRoot.get_relative_path": {
            "name": "get_relative_path",
            "location": 26,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiRoot.get_commit_header": {
            "name": "get_commit_header",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiRoot.get_name_for_path": {
            "name": "get_name_for_path",
            "location": 32,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "WikiRoot.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/export/wiki/stage_drops.py": {
        "DropsStage.get_format_version": {
            "name": "get_format_version",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropsStage.get_name": {
            "name": "get_name",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropsStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropsStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropsStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 75,
            "return": [
                "Type[DropExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropsStage.extract": {
            "name": "extract",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_engrams.py": {
        "convert_engram_group": {
            "name": "convert_engram_group",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "engram": [
                    "export.wiki.types.PrimalEngramEntry"
                ]
            }
        },
        "convert_requirement_sets": {
            "name": "convert_requirement_sets",
            "location": 160,
            "return": [
                "Iterable[Optional[str]]"
            ],
            "arguments": {
                "engram": [
                    "export.wiki.types.PrimalEngramEntry"
                ]
            }
        },
        "EngramsStage.get_format_version": {
            "name": "get_format_version",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngramsStage.get_name": {
            "name": "get_name",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngramsStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngramsStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngramsStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 72,
            "return": [
                "Type[EngramsExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngramsStage.get_pre_data": {
            "name": "get_pre_data",
            "location": 75,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "EngramsStage.extract": {
            "name": "extract",
            "location": 84,
            "return": [
                "Engram"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "EngramsStage.get_post_data": {
            "name": "get_post_data",
            "location": 105,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "EngramsStage._add_pgd_indices": {
            "name": "_add_pgd_indices",
            "location": 125,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "pgd_asset": [
                    "ue.asset.UAsset"
                ],
                "mod_data": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_event_colors.py": {
        "collect_name": {
            "name": "collect_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "proxy": []
            }
        },
        "collect_names": {
            "name": "collect_names",
            "location": 96,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "region": []
            }
        },
        "collect_regions": {
            "name": "collect_regions",
            "location": 103,
            "return": [
                "List[Optional[List[str]]]"
            ],
            "arguments": {
                "color_set": []
            }
        },
        "EventColorsStage.get_format_version": {
            "name": "get_format_version",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_name": {
            "name": "get_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_field": {
            "name": "get_field",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 48,
            "return": [
                "Type[EventColorsExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventColorsStage.get_pre_data": {
            "name": "get_pre_data",
            "location": 51,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "EventColorsStage.pre_load_filter": {
            "name": "pre_load_filter",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls_name": [
                    "str"
                ]
            }
        },
        "EventColorsStage.extract": {
            "name": "extract",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_items.py": {
        "is_item_base_class": {
            "name": "is_item_base_class",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        },
        "get_item_name": {
            "name": "get_item_name",
            "location": 195,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        },
        "_get_pretty_item_type": {
            "name": "_get_pretty_item_type",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        },
        "_safe_get_bp_from_object": {
            "name": "_safe_get_bp_from_object",
            "location": 223,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "Optional[ue.properties.ObjectProperty]"
                ]
            }
        },
        "ItemsStage.get_name": {
            "name": "get_name",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.get_format_version": {
            "name": "get_format_version",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 85,
            "return": [
                "Type[ItemsExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsStage.extract": {
            "name": "extract",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "ItemsStage.get_post_data": {
            "name": "get_post_data",
            "location": 164,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "ItemsStage._add_pgd_indices": {
            "name": "_add_pgd_indices",
            "location": 172,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "pgd_asset": [
                    "ue.asset.UAsset"
                ],
                "mod_data": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_loot_crates.py": {
        "LootCratesStage.get_format_version": {
            "name": "get_format_version",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.get_name": {
            "name": "get_name",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.get_field": {
            "name": "get_field",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 77,
            "return": [
                "Type[automate.hierarchy_exporter.ExportFileModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LootCratesStage.extract": {
            "name": "extract",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_maps.py": {
        "MapStage.initialise": {
            "name": "initialise",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "automate.exporter.ExportManager"
                ],
                "root": [
                    "automate.exporter.ExportRoot"
                ]
            }
        },
        "MapStage.get_name": {
            "name": "get_name",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapStage.extract_core": {
            "name": "extract_core",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "MapStage.extract_mod": {
            "name": "extract_mod",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "modid": [
                    "str"
                ]
            }
        },
        "MapStage._extract_and_save": {
            "name": "_extract_and_save",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ],
                "base_path": [
                    "pathlib.Path"
                ],
                "relative_path": [
                    "pathlib.Path"
                ],
                "levels": [
                    "List[str]"
                ],
                "modid": [
                    "Optional[str]"
                ],
                "known_persistent": [
                    "Optional[str]"
                ],
                "official": [
                    "bool"
                ],
                "expansion": [
                    "bool"
                ]
            }
        },
        "MapStage._get_schema_file_path": {
            "name": "_get_schema_file_path",
            "location": 165,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_missions.py": {
        "_get_subclass_data": {
            "name": "_get_subclass_data",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MissionsStage.get_format_version": {
            "name": "get_format_version",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionsStage.get_name": {
            "name": "get_name",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionsStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionsStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionsStage.extract": {
            "name": "extract",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_spawn_groups.py": {
        "SpawnGroupStage.get_name": {
            "name": "get_name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_field": {
            "name": "get_field",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_format_version": {
            "name": "get_format_version",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 52,
            "return": [
                "Type[SpawnGroupsExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnGroupStage.get_post_data": {
            "name": "get_post_data",
            "location": 55,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "Optional[str]"
                ]
            }
        },
        "SpawnGroupStage._get_pgd_data": {
            "name": "_get_pgd_data",
            "location": 70,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "pgd": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "SpawnGroupStage.extract": {
            "name": "extract",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/stage_species.py": {
        "should_skip_from_variants": {
            "name": "should_skip_from_variants",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "variants": [
                    "Set[str]"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "is_trappable_with_fish_basket": {
            "name": "is_trappable_with_fish_basket",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        },
        "is_creature_tameable": {
            "name": "is_creature_tameable",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "variants": [
                    "Set[str]"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "_should_skip_species": {
            "name": "_should_skip_species",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "overrides": [
                    "ark.overrides.OverrideSettings"
                ]
            }
        },
        "SpeciesStage.get_name": {
            "name": "get_name",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_use_pretty": {
            "name": "get_use_pretty",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_format_version": {
            "name": "get_format_version",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_ue_type": {
            "name": "get_ue_type",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.get_schema_model": {
            "name": "get_schema_model",
            "location": 180,
            "return": [
                "Type[SpeciesExportModel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesStage.extract": {
            "name": "extract",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/types.py": {},
    "Purlovia-master/export/wiki/__init__.py": {},
    "Purlovia-master/export/wiki/items/cooking.py": {
        "convert_cooking_values": {
            "name": "convert_cooking_values",
            "location": 14,
            "return": [
                "CookingIngredientData"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/crafting.py": {
        "convert_recipe_entry": {
            "name": "convert_recipe_entry",
            "location": 34,
            "return": [
                "Optional[RecipeIngredient]"
            ],
            "arguments": {
                "entry": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "convert_recipe_entries": {
            "name": "convert_recipe_entries",
            "location": 47,
            "return": [
                "Iterable[RecipeIngredient]"
            ],
            "arguments": {
                "entries": [
                    "List[ue.properties.StructProperty]"
                ]
            }
        },
        "convert_crafting_values": {
            "name": "convert_crafting_values",
            "location": 55,
            "return": [
                "Tuple[(Optional[CraftingData], Optional[RepairData])]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ],
                "has_durability": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/durability.py": {
        "convert_durability_values": {
            "name": "convert_durability_values",
            "location": 8,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/egg.py": {
        "convert_egg_values": {
            "name": "convert_egg_values",
            "location": 16,
            "return": [
                "Optional[EggData]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/status.py": {
        "convert_status_effect": {
            "name": "convert_status_effect",
            "location": 24,
            "return": [
                "StatEffectData"
            ],
            "arguments": {
                "entry": []
            }
        },
        "convert_status_effects": {
            "name": "convert_status_effects",
            "location": 66,
            "return": [
                "List[StatEffectData]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/stat_gathering.py": {
        "gather_item_stat": {
            "name": "gather_item_stat",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "item": [
                    "ark.types.PrimalItem"
                ],
                "index": [
                    "Stat"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/items/__init__.py": {},
    "Purlovia-master/export/wiki/loot/gathering.py": {
        "get_loot_sets": {
            "name": "get_loot_sets",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "lootinv": []
            }
        },
        "decode_item_name": {
            "name": "decode_item_name",
            "location": 38,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "item": []
            }
        },
        "decode_item_entry": {
            "name": "decode_item_entry",
            "location": 48,
            "return": [
                "export.wiki.loot.models.ItemSetEntry"
            ],
            "arguments": {
                "entry": []
            }
        },
        "_gather_lootitemset_data": {
            "name": "_gather_lootitemset_data",
            "location": 67,
            "return": [
                "dict"
            ],
            "arguments": {
                "asset_ref": []
            }
        },
        "_get_item_sets_override": {
            "name": "_get_item_sets_override",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "asset_ref": []
            }
        },
        "decode_item_set": {
            "name": "decode_item_set",
            "location": 109,
            "return": [
                "export.wiki.loot.models.ItemSet"
            ],
            "arguments": {
                "item_set": [],
                "bp": [
                    "Optional[str]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/loot/models.py": {},
    "Purlovia-master/export/wiki/loot/__init__.py": {},
    "Purlovia-master/export/wiki/maps/common.py": {
        "get_latlong_from_location": {
            "name": "get_latlong_from_location",
            "location": 22,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "x": [
                    "Union[(float, ue.properties.FloatProperty, ue.properties.IntProperty)]"
                ],
                "y": [
                    "Union[(float, ue.properties.FloatProperty, ue.properties.IntProperty)]"
                ]
            }
        },
        "get_actor_location_vector": {
            "name": "get_actor_location_vector",
            "location": 29,
            "return": [
                "export.wiki.maps.models.Location"
            ],
            "arguments": {
                "actor": []
            }
        },
        "get_volume_brush_setup": {
            "name": "get_volume_brush_setup",
            "location": 41,
            "return": [
                "Tuple[(ue.asset.ExportTableItem, ue.asset.ExportTableItem)]"
            ],
            "arguments": {
                "volume": []
            }
        },
        "get_volume_box_count": {
            "name": "get_volume_box_count",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "volume": []
            }
        },
        "get_volume_bounds": {
            "name": "get_volume_bounds",
            "location": 61,
            "return": [
                "export.wiki.maps.models.Box"
            ],
            "arguments": {
                "volume": [],
                "convex_index": []
            }
        },
        "convert_location_for_export": {
            "name": "convert_location_for_export",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "convert_box_bounds_for_export": {
            "name": "convert_box_bounds_for_export",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "box_data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "any_overriden": {
            "name": "any_overriden",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ],
                "props": [
                    "Tuple[(str, ...)]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/maps/discovery.py": {
        "group_levels_by_directory": {
            "name": "group_levels_by_directory",
            "location": 19,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "assetnames": [
                    "Iterable[str]"
                ]
            }
        },
        "LevelDiscoverer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "LevelDiscoverer.discover_vanilla_levels": {
            "name": "discover_vanilla_levels",
            "location": 44,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDiscoverer.discover_mod_levels": {
            "name": "discover_mod_levels",
            "location": 64,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/maps/file_models.py": {},
    "Purlovia-master/export/wiki/maps/gathering_base.py": {
        "MapGathererBase.get_ue_types": {
            "name": "get_ue_types",
            "location": 25,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MapGathererBase.get_model_type": {
            "name": "get_model_type",
            "location": 30,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MapGathererBase.do_early_checks": {
            "name": "do_early_checks",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "_export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "MapGathererBase.extract": {
            "name": "extract",
            "location": 43,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "MapGathererBase.before_saving": {
            "name": "before_saving",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "_world": [
                    "PersistentLevel"
                ],
                "_data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/maps/gathering_basic.py": {
        "BaseActorExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 25,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseActorExport.get_model_type": {
            "name": "get_model_type",
            "location": 29,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseActorExport.extract": {
            "name": "extract",
            "location": 33,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "BaseActorExport.before_saving": {
            "name": "before_saving",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaseActorListExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 52,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseActorListExport.get_model_type": {
            "name": "get_model_type",
            "location": 56,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseActorListExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "BaseActorListExport.extract": {
            "name": "extract",
            "location": 66,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "BaseActorListExport.extract_single": {
            "name": "extract_single",
            "location": 79,
            "return": [
                "automate.hierarchy_exporter.ExportModel"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "BaseActorListExport.before_saving": {
            "name": "before_saving",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GlitchExport.get_model_type": {
            "name": "get_model_type",
            "location": 101,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GlitchExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 105,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GlitchExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "_": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "GlitchExport.extract_single": {
            "name": "extract_single",
            "location": 113,
            "return": [
                "models.Glitch"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "PlayerSpawnPointExport.extract": {
            "name": "extract",
            "location": 140,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "ChargeNodeExport.extract": {
            "name": "extract",
            "location": 187,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/maps/gathering_complex.py": {
        "WorldSettingsExport.get_export_name": {
            "name": "get_export_name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "WorldSettingsExport.get_model_type": {
            "name": "get_model_type",
            "location": 36,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "WorldSettingsExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 40,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "WorldSettingsExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "WorldSettingsExport.extract": {
            "name": "extract",
            "location": 48,
            "return": [
                "models.WorldSettings"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "WorldSettingsExport._convert_class_swaps": {
            "name": "_convert_class_swaps",
            "location": 95,
            "return": [
                "Iterable[export.wiki.models.WeighedClassSwap]"
            ],
            "arguments": {
                "cls": [],
                "settings": [
                    "export.wiki.types.PrimalWorldSettings"
                ]
            }
        },
        "TradeListExport.get_model_type": {
            "name": "get_model_type",
            "location": 106,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TradeListExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 110,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TradeListExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "TradeListExport.extract": {
            "name": "extract",
            "location": 118,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "TradeListExport._extract_single": {
            "name": "_extract_single",
            "location": 127,
            "return": [
                "Optional[models.Trade]"
            ],
            "arguments": {
                "cls": [],
                "option": [
                    "ue.properties.ObjectProperty"
                ]
            }
        },
        "NPCZoneManagerExport.get_export_name": {
            "name": "get_export_name",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "NPCZoneManagerExport.get_model_type": {
            "name": "get_model_type",
            "location": 150,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "NPCZoneManagerExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 154,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "NPCZoneManagerExport.extract": {
            "name": "extract",
            "location": 158,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "NPCZoneManagerExport._extract_counting_volumes": {
            "name": "_extract_counting_volumes",
            "location": 196,
            "return": [
                "Iterable[models.Box]"
            ],
            "arguments": {
                "cls": [],
                "volumes": [
                    "ue.properties.ArrayProperty"
                ]
            }
        },
        "NPCZoneManagerExport._extract_spawn_points": {
            "name": "_extract_spawn_points",
            "location": 203,
            "return": [
                "Iterable[models.Location]"
            ],
            "arguments": {
                "cls": [],
                "markers": [
                    "ue.properties.ArrayProperty"
                ]
            }
        },
        "NPCZoneManagerExport._extract_spawn_volumes": {
            "name": "_extract_spawn_volumes",
            "location": 210,
            "return": [
                "Iterable[models.WeighedBox]"
            ],
            "arguments": {
                "cls": [],
                "entries": [
                    "ue.properties.ArrayProperty"
                ]
            }
        },
        "NPCZoneManagerExport.before_saving": {
            "name": "before_saving",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BiomeZoneExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 238,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BiomeZoneExport.get_model_type": {
            "name": "get_model_type",
            "location": 242,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BiomeZoneExport.extract": {
            "name": "extract",
            "location": 246,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "BiomeZoneExport._extract_temperature_data": {
            "name": "_extract_temperature_data",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "biome": [
                    "export.wiki.types.BiomeZoneVolume"
                ],
                "result": [
                    "models.BiomeTempWindSettings"
                ]
            }
        },
        "BiomeZoneExport._extract_wind_data": {
            "name": "_extract_wind_data",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "biome": [
                    "export.wiki.types.BiomeZoneVolume"
                ],
                "result": [
                    "models.BiomeTempWindSettings"
                ]
            }
        },
        "BiomeZoneExport.before_saving": {
            "name": "before_saving",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "LootCrateSpawnExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 328,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LootCrateSpawnExport.get_model_type": {
            "name": "get_model_type",
            "location": 332,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LootCrateSpawnExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "LootCrateSpawnExport.extract": {
            "name": "extract",
            "location": 340,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "LootCrateSpawnExport._convert_crate_classes": {
            "name": "_convert_crate_classes",
            "location": 374,
            "return": [
                "Iterable[Optional[str]]"
            ],
            "arguments": {
                "cls": [],
                "entries": []
            }
        },
        "LootCrateSpawnExport._extract_spawn_points": {
            "name": "_extract_spawn_points",
            "location": 381,
            "return": [
                "Iterable[models.Location]"
            ],
            "arguments": {
                "cls": [],
                "entries": []
            }
        },
        "LootCrateSpawnExport.before_saving": {
            "name": "before_saving",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RadiationZoneExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 396,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "RadiationZoneExport.get_model_type": {
            "name": "get_model_type",
            "location": 400,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "RadiationZoneExport.do_early_checks": {
            "name": "do_early_checks",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "RadiationZoneExport.extract": {
            "name": "extract",
            "location": 414,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "RadiationZoneExport.before_saving": {
            "name": "before_saving",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MissionDispatcherExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 443,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MissionDispatcherExport.get_model_type": {
            "name": "get_model_type",
            "location": 447,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MissionDispatcherExport.extract": {
            "name": "extract",
            "location": 451,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "MissionDispatcherExport.before_saving": {
            "name": "before_saving",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ExplorerNoteExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 478,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ExplorerNoteExport.get_model_type": {
            "name": "get_model_type",
            "location": 482,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ExplorerNoteExport.extract": {
            "name": "extract",
            "location": 486,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "ExplorerNoteExport.before_saving": {
            "name": "before_saving",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MutagenBulbExport.get_ue_types": {
            "name": "get_ue_types",
            "location": 504,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MutagenBulbExport.get_model_type": {
            "name": "get_model_type",
            "location": 508,
            "return": [
                "Optional[Type[automate.hierarchy_exporter.ExportModel]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MutagenBulbExport.extract": {
            "name": "extract",
            "location": 512,
            "return": [
                "Optional[Union[(automate.hierarchy_exporter.ExportModel, Iterable[automate.hierarchy_exporter.ExportModel])]]"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "ue.proxy.UEProxyStructure"
                ]
            }
        },
        "MutagenBulbExport.before_saving": {
            "name": "before_saving",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "world": [
                    "export.wiki.maps.gathering_base.PersistentLevel"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/maps/models.py": {},
    "Purlovia-master/export/wiki/maps/world.py": {
        "find_gatherer_for_export": {
            "name": "find_gatherer_for_export",
            "location": 129,
            "return": [
                "Optional[Type[export.wiki.maps.gathering_base.MapGathererBase]]"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ]
            }
        },
        "World.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_assetname": [
                    "Optional[str]"
                ]
            }
        },
        "World.ingest_level": {
            "name": "ingest_level",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "World.bind_settings": {
            "name": "bind_settings",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.convert_for_export": {
            "name": "convert_for_export",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.construct_export_files": {
            "name": "construct_export_files",
            "location": 99,
            "return": [
                "Generator[(Tuple[(str, Optional[dict])], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/export/wiki/maps/__init__.py": {},
    "Purlovia-master/export/wiki/missions/dinos.py": {
        "gather_dino_data": {
            "name": "gather_dino_data",
            "location": 4,
            "return": [
                "Dict[(str, ue.properties.FloatProperty)]"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/missions/rewards.py": {
        "collect_rewards": {
            "name": "collect_rewards",
            "location": 7,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ]
            }
        },
        "_convert_loot_table": {
            "name": "_convert_loot_table",
            "location": 23,
            "return": [
                "Optional[List[dict]]"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ]
            }
        },
        "_convert_custom_item_sets": {
            "name": "_convert_custom_item_sets",
            "location": 52,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ]
            }
        },
        "_convert_hexagon_values": {
            "name": "_convert_hexagon_values",
            "location": 65,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "mission": [
                    "export.wiki.types.MissionType"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/missions/typedata.py": {
        "BaseMissionType.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMissionType.export": {
            "name": "export",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Hunt.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Hunt.export": {
            "name": "export",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Fishing.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Fishing.export": {
            "name": "export",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Gather.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Gather.export": {
            "name": "export",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Gauntlet.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Gauntlet.export": {
            "name": "export",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Retrieve.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Retrieve.export": {
            "name": "export",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Escort.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Escort.export": {
            "name": "export",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Race.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Race.export": {
            "name": "export",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GlitchCounter.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GlitchCounter.export": {
            "name": "export",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Sport.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Sport.export": {
            "name": "export",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "proxy": [
                    "export.wiki.types.MissionType"
                ],
                "v": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/missions/__init__.py": {},
    "Purlovia-master/export/wiki/spawn_groups/additions.py": {
        "_merge_changes": {
            "name": "_merge_changes",
            "location": 22,
            "return": [
                "List[RuntimeGroupAddition]"
            ],
            "arguments": {
                "dc": [
                    "Dict[(str, List[RuntimeGroupAddition])]"
                ]
            }
        },
        "segregate_container_additions": {
            "name": "segregate_container_additions",
            "location": 40,
            "return": [
                "Optional[List[RuntimeGroupAddition]]"
            ],
            "arguments": {
                "pgd": [
                    "ue.asset.UAsset"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/spawn_groups/remaps.py": {
        "convert_npc_remaps": {
            "name": "convert_npc_remaps",
            "location": 10,
            "return": [
                "List[export.wiki.models.ClassRemap]"
            ],
            "arguments": {
                "pgd": [
                    "ue.asset.UAsset"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/spawn_groups/structs.py": {
        "_zip_swap_outputs": {
            "name": "_zip_swap_outputs",
            "location": 20,
            "return": [
                "Iterable[Tuple[(float, Optional[str])]]"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "convert_single_class_swap": {
            "name": "convert_single_class_swap",
            "location": 31,
            "return": [
                "Optional[export.wiki.models.WeighedClassSwap]"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "convert_class_swaps": {
            "name": "convert_class_swaps",
            "location": 46,
            "return": [
                "Optional[List[export.wiki.models.WeighedClassSwap]]"
            ],
            "arguments": {
                "pgd": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "convert_group_entry": {
            "name": "convert_group_entry",
            "location": 80,
            "return": [
                "NpcGroup"
            ],
            "arguments": {
                "struct": []
            }
        },
        "convert_limit_entries": {
            "name": "convert_limit_entries",
            "location": 118,
            "return": [
                "Iterable[NpcLimit]"
            ],
            "arguments": {
                "array": []
            }
        }
    },
    "Purlovia-master/export/wiki/spawn_groups/__init__.py": {},
    "Purlovia-master/export/wiki/species/attacks.py": {
        "gather_attack_data": {
            "name": "gather_attack_data",
            "location": 23,
            "return": [
                "AttackData"
            ],
            "arguments": {
                "char": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        },
        "_convert_attack": {
            "name": "_convert_attack",
            "location": 37,
            "return": [
                "AttackInfo"
            ],
            "arguments": {
                "attack": [
                    "ue.properties.StructProperty"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/species/cloning.py": {
        "can_be_cloned": {
            "name": "can_be_cloned",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        },
        "gather_cloning_data": {
            "name": "gather_cloning_data",
            "location": 68,
            "return": [
                "Optional[CloningData]"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/species/death.py": {
        "gather_death_data": {
            "name": "gather_death_data",
            "location": 32,
            "return": [
                "DeathData"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/species/movement.py": {
        "can_walk": {
            "name": "can_walk",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "_species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "nav_props": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "has_free_movement_in_water": {
            "name": "has_free_movement_in_water",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ]
            }
        },
        "can_swim": {
            "name": "can_swim",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "nav_props": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "gather_movement_data": {
            "name": "gather_movement_data",
            "location": 56,
            "return": [
                "MovementIntermediate"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "dcsc": [
                    "ark.types.DinoCharacterStatusComponent"
                ]
            }
        },
        "_calculate_base_speed": {
            "name": "_calculate_base_speed",
            "location": 76,
            "return": [
                "float"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "base": [
                    "ue.properties.FloatProperty"
                ],
                "tamed": [
                    "bool"
                ]
            }
        },
        "_calculate_sprint_speed": {
            "name": "_calculate_sprint_speed",
            "location": 83,
            "return": [
                "float"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "base": [
                    "Union[(float, ue.properties.FloatProperty)]"
                ],
                "mult": [
                    "Union[(float, ue.properties.FloatProperty)]"
                ],
                "tamed": [
                    "bool"
                ]
            }
        },
        "_clean_value": {
            "name": "_clean_value",
            "location": 99,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "v": [
                    "float"
                ]
            }
        },
        "_calculate_ridden_speeds": {
            "name": "_calculate_ridden_speeds",
            "location": 106,
            "return": [
                "Optional[SpeedData]"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "dom": [
                    "Optional[SpeedData]"
                ]
            }
        },
        "_gather_speeds": {
            "name": "_gather_speeds",
            "location": 120,
            "return": [
                "MovementModes"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "staticMult": [
                    "ue.properties.FloatProperty"
                ],
                "tamed": []
            }
        },
        "_gather_stamina": {
            "name": "_gather_stamina",
            "location": 178,
            "return": [
                "StaminaRates"
            ],
            "arguments": {
                "dcsc": [
                    "ark.types.DinoCharacterStatusComponent"
                ],
                "movementW": [
                    "MovementModes"
                ]
            }
        },
        "_calculate_ridden_speeds._get_component": {
            "name": "_get_component",
            "location": 110,
            "return": [],
            "arguments": {
                "base": []
            }
        },
        "_gather_speeds.mult": {
            "name": "mult",
            "location": 123,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "Purlovia-master/export/wiki/species/xp.py": {
        "convert_level_data": {
            "name": "convert_level_data",
            "location": 56,
            "return": [
                "LevelData"
            ],
            "arguments": {
                "species": [
                    "ark.types.PrimalDinoCharacter"
                ],
                "dcsc": [
                    "ark.types.DinoCharacterStatusComponent"
                ]
            }
        }
    },
    "Purlovia-master/export/wiki/species/__init__.py": {},
    "Purlovia-master/interactive/bad_colors.py": {
        "_per_species": {
            "name": "_per_species",
            "location": 21,
            "return": [
                "Generator[(Tuple[(Any, list)], Any, None)]"
            ],
            "arguments": {
                "data": [],
                "names": []
            }
        },
        "find_bad_colors": {
            "name": "find_bad_colors",
            "location": 28,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "species": [],
                "names": []
            }
        }
    },
    "Purlovia-master/interactive/export_all.py": {
        "create_filename": {
            "name": "create_filename",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "ext": [
                    "str"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "calculate_excludes": {
            "name": "calculate_excludes",
            "location": 74,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "do_extract": {
            "name": "do_extract",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "str"
                ],
                "excludes": [
                    "Set[str]"
                ]
            }
        },
        "plain_json_fmt": {
            "name": "plain_json_fmt",
            "location": 27,
            "return": [],
            "arguments": {
                "json": [],
                "_": []
            }
        },
        "pretty_json_fmt": {
            "name": "pretty_json_fmt",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "json": [],
                "_": []
            }
        },
        "table_ion_fmt": {
            "name": "table_ion_fmt",
            "location": 43,
            "return": [],
            "arguments": {
                "json": [],
                "names": []
            }
        },
        "plain_ion_fmt": {
            "name": "plain_ion_fmt",
            "location": 52,
            "return": [],
            "arguments": {
                "json": [],
                "_": []
            }
        }
    },
    "Purlovia-master/interactive/hierarchy_i.py": {},
    "Purlovia-master/interactive/mod_requests_i.py": {
        "data_from_mod": {
            "name": "data_from_mod",
            "location": 77,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "Purlovia-master/interactive/setup.py": {},
    "Purlovia-master/interactive/watch_depots.py": {
        "parseAcf": {
            "name": "parseAcf",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "outputType": []
            }
        },
        "parseSteamCmd": {
            "name": "parseSteamCmd",
            "location": 67,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "fetchDepotStates": {
            "name": "fetchDepotStates",
            "location": 101,
            "return": [
                "Optional[Dict[(str, dict)]]"
            ],
            "arguments": {}
        },
        "alert": {
            "name": "alert",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "depot_id": [],
                "name": [],
                "manifest_id": []
            }
        },
        "printout": {
            "name": "printout",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "main": {
            "name": "main",
            "location": 151,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/interactive/__init__.py": {},
    "Purlovia-master/interactive/__main__.py": {},
    "Purlovia-master/tests/common.py": {
        "fixture_tempdir": {
            "name": "fixture_tempdir",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "fixture_config": {
            "name": "fixture_config",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "fixture_arkman": {
            "name": "fixture_arkman",
            "location": 47,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "fixture_loader": {
            "name": "fixture_loader",
            "location": 53,
            "return": [],
            "arguments": {
                "arkman": []
            }
        },
        "fixture_hierarchy": {
            "name": "fixture_hierarchy",
            "location": 59,
            "return": [],
            "arguments": {
                "arkman": []
            }
        },
        "fixture_internal_hierarchy": {
            "name": "fixture_internal_hierarchy",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "fixture_dodos": {
            "name": "fixture_dodos",
            "location": 70,
            "return": [],
            "arguments": {
                "loader": [],
                "internal_hierarchy": []
            }
        },
        "fixture_troodon": {
            "name": "fixture_troodon",
            "location": 76,
            "return": [],
            "arguments": {
                "loader": [],
                "internal_hierarchy": []
            }
        },
        "fixture_test_hierarchy": {
            "name": "fixture_test_hierarchy",
            "location": 82,
            "return": [],
            "arguments": {
                "loader": [],
                "internal_hierarchy": []
            }
        },
        "fixture_ark_types": {
            "name": "fixture_ark_types",
            "location": 88,
            "return": [],
            "arguments": {
                "loader": [],
                "internal_hierarchy": []
            }
        },
        "fixture_scan_and_load": {
            "name": "fixture_scan_and_load",
            "location": 94,
            "return": [],
            "arguments": {
                "loader": [],
                "ark_types": []
            }
        },
        "fixture_scan_and_load._scan_and_load": {
            "name": "_scan_and_load",
            "location": 96,
            "return": [],
            "arguments": {
                "cls_name": []
            }
        },
        "MockModResolver.get_name_from_id": {
            "name": "get_name_from_id",
            "location": 109,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "MockModResolver.get_id_from_name": {
            "name": "get_id_from_name",
            "location": 112,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "modname": [
                    "str"
                ]
            }
        },
        "MockCacheManager.lookup": {
            "name": "lookup",
            "location": 118,
            "return": [
                "Optional[ue.asset.UAsset]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockCacheManager.add": {
            "name": "add",
            "location": 121,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "MockCacheManager.remove": {
            "name": "remove",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockCacheManager.wipe": {
            "name": "wipe",
            "location": 127,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "MockCacheManager.get_count": {
            "name": "get_count",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/tests/test_context.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 11,
            "return": [],
            "arguments": {
                "loader": []
            }
        },
        "test_linking": {
            "name": "test_linking",
            "location": 27,
            "return": [],
            "arguments": {
                "loader": []
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 45,
            "return": [],
            "arguments": {
                "loader": []
            }
        },
        "test_no_properties_without_link": {
            "name": "test_no_properties_without_link",
            "location": 63,
            "return": [],
            "arguments": {
                "loader": []
            }
        },
        "test_bulk_data": {
            "name": "test_bulk_data",
            "location": 71,
            "return": [],
            "arguments": {
                "loader": []
            }
        }
    },
    "Purlovia-master/tests/test_discovery.py": {
        "test_populate": {
            "name": "test_populate",
            "location": 11,
            "return": [],
            "arguments": {
                "arkman": []
            }
        }
    },
    "Purlovia-master/tests/test_export_models.py": {
        "test_field_prop_as_attr": {
            "name": "test_field_prop_as_attr",
            "location": 38,
            "return": [],
            "arguments": {
                "field_type": [],
                "field_name": [],
                "value": [],
                "target": []
            }
        },
        "test_field_prop_in_constructor": {
            "name": "test_field_prop_in_constructor",
            "location": 62,
            "return": [],
            "arguments": {
                "field_type": [],
                "field_name": [],
                "value": [],
                "target": []
            }
        },
        "test_scheme_output": {
            "name": "test_scheme_output",
            "location": 91,
            "return": [],
            "arguments": {
                "field_name": [],
                "schema_type": []
            }
        },
        "test_props_in_plain_fields": {
            "name": "test_props_in_plain_fields",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_plain_values_in_prop_fields": {
            "name": "test_plain_values_in_prop_fields",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/tests/test_gathering.py": {
        "test_gather_purloviatest_pgd": {
            "name": "test_gather_purloviatest_pgd",
            "location": 16,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_dodo": {
            "name": "test_gather_dodo",
            "location": 27,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_ab_dodo": {
            "name": "test_gather_ab_dodo",
            "location": 36,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_dodo_dcsc": {
            "name": "test_gather_dodo_dcsc",
            "location": 46,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_troodon_dcsc": {
            "name": "test_gather_troodon_dcsc",
            "location": 57,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_troodon_dcsc_alt": {
            "name": "test_gather_troodon_dcsc_alt",
            "location": 68,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_deino": {
            "name": "test_gather_deino",
            "location": 79,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_dragon_boss": {
            "name": "test_gather_dragon_boss",
            "location": 91,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_x_dragon": {
            "name": "test_gather_x_dragon",
            "location": 101,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        },
        "test_gather_dcsc_conflict": {
            "name": "test_gather_dcsc_conflict",
            "location": 111,
            "return": [],
            "arguments": {
                "scan_and_load": []
            }
        }
    },
    "Purlovia-master/tests/test_hierarchy.py": {
        "test_hierarchy_init": {
            "name": "test_hierarchy_init",
            "location": 12,
            "return": [],
            "arguments": {
                "internal_hierarchy": []
            }
        },
        "test_exploring_assets": {
            "name": "test_exploring_assets",
            "location": 24,
            "return": [],
            "arguments": {
                "dodos": []
            }
        },
        "test_find_parents": {
            "name": "test_find_parents",
            "location": 42,
            "return": [],
            "arguments": {
                "dodos": []
            }
        },
        "test_find_subclasses": {
            "name": "test_find_subclasses",
            "location": 49,
            "return": [],
            "arguments": {
                "dodos": []
            }
        },
        "test_inherits_from": {
            "name": "test_inherits_from",
            "location": 56,
            "return": [],
            "arguments": {
                "loader": [],
                "dodos": []
            }
        }
    },
    "Purlovia-master/tests/test_loader_find_assetnames.py": {
        "fixture_simple_loader": {
            "name": "fixture_simple_loader",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "filter_names": {
            "name": "filter_names",
            "location": 27,
            "return": [
                "Tuple[(Set[str], Set[str])]"
            ],
            "arguments": {
                "predicate": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "gather_results": {
            "name": "gather_results",
            "location": 33,
            "return": [
                "Tuple[(Set[str], Set[str])]"
            ],
            "arguments": {
                "loader": [
                    "ue.loader.AssetLoader"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "test_find_assetnames_all": {
            "name": "test_find_assetnames_all",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "test_find_assetnames_in_a": {
            "name": "test_find_assetnames_in_a",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "test_find_assetnames_excluding_b": {
            "name": "test_find_assetnames_excluding_b",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "test_find_assetnames_excluding_b_force_include_ba": {
            "name": "test_find_assetnames_excluding_b_force_include_ba",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "test_find_assetnames_excluding_all_force_include_ba": {
            "name": "test_find_assetnames_excluding_all_force_include_ba",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        }
    },
    "Purlovia-master/tests/test_pydantic_models.py": {
        "test_to_json": {
            "name": "test_to_json",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_json_embedded": {
            "name": "test_to_json_embedded",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_fetching_list_subtype": {
            "name": "test_fetching_list_subtype",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/tests/__init__.py": {},
    "Purlovia-master/ue/asset.py": {
        "UAsset.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "UAsset._deserialise": {
            "name": "_deserialise",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UAsset._link": {
            "name": "_link",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UAsset.is_context_satisfied": {
            "name": "is_context_satisfied",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "UAsset.getName": {
            "name": "getName",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "UAsset.getObject": {
            "name": "getObject",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "UAsset._parseTable": {
            "name": "_parseTable",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "chunk": [],
                "itemType": []
            }
        },
        "UAsset._findNoneName": {
            "name": "_findNoneName",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UAsset.format_for_json": {
            "name": "format_for_json",
            "location": 188,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportTableItem._deserialise": {
            "name": "_deserialise",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportTableItem.register_user": {
            "name": "register_user",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ImportTableItem.fullname": {
            "name": "fullname",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImportTableItem.format_for_json": {
            "name": "format_for_json",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportTableItem.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportTableItem._deserialise": {
            "name": "_deserialise",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportTableItem._link": {
            "name": "_link",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportTableItem.register_user": {
            "name": "register_user",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ExportTableItem.deserialise_properties": {
            "name": "deserialise_properties",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportTableItem.format_for_json": {
            "name": "format_for_json",
            "location": 318,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportTableItem.__str__": {
            "name": "__str__",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldTileInfo._deserialise": {
            "name": "_deserialise",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldTileInfo.__str__": {
            "name": "__str__",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportTableItem._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": []
            }
        }
    },
    "Purlovia-master/ue/base.py": {
        "UEBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "UEBase"
                ],
                "stream": []
            }
        },
        "UEBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UEBase.deserialise": {
            "name": "deserialise",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase.link": {
            "name": "link",
            "location": 55,
            "return": [
                "Optional[UEBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase._deserialise": {
            "name": "_deserialise",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase._link": {
            "name": "_link",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase._linkValues": {
            "name": "_linkValues",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "UEBase._newField": {
            "name": "_newField",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "UEBase.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UEBase.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase.__getattr__": {
            "name": "__getattr__",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UEBase.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEBase._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/ue/consts.py": {},
    "Purlovia-master/ue/context.py": {
        "disable_metadata": {
            "name": "disable_metadata",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_ctx": {
            "name": "get_ctx",
            "location": 55,
            "return": [
                "ParsingContext"
            ],
            "arguments": {}
        },
        "ue_parsing_context": {
            "name": "ue_parsing_context",
            "location": 59,
            "return": [
                "utils.xlocal.WithXLocals"
            ],
            "arguments": {}
        }
    },
    "Purlovia-master/ue/coretypes.py": {
        "Table._deserialise": {
            "name": "_deserialise",
            "location": 31,
            "return": [
                "_TTable"
            ],
            "arguments": {
                "self": [
                    "_TTable"
                ],
                "itemType": [
                    "Type[ue.base.UEBase]"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Table._link": {
            "name": "_link",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.format_for_json": {
            "name": "format_for_json",
            "location": 52,
            "return": [
                "List[ue.base.UEBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [
                "ue.base.UEBase"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Table.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkPtr._deserialise": {
            "name": "_deserialise",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerationInfo._deserialise": {
            "name": "_deserialise",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedChunk._deserialise": {
            "name": "_deserialise",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameIndex._deserialise": {
            "name": "_deserialise",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameIndex._link": {
            "name": "_link",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameIndex.format_for_json": {
            "name": "format_for_json",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectIndex._deserialise": {
            "name": "_deserialise",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectIndex._link": {
            "name": "_link",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectIndex.format_for_json": {
            "name": "format_for_json",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectIndex.__bool__": {
            "name": "__bool__",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "NameIndex._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/ue/gathering.py": {
        "gather_properties": {
            "name": "gather_properties",
            "location": 19,
            "return": [
                "Tproxy"
            ],
            "arguments": {
                "export": [
                    "Union[(ue.asset.ExportTableItem, ue.asset.UAsset, ue.properties.ObjectProperty)]"
                ]
            }
        },
        "find_default_for_class": {
            "name": "find_default_for_class",
            "location": 63,
            "return": [
                "ue.asset.ExportTableItem"
            ],
            "arguments": {
                "fullname": [
                    "str"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        }
    },
    "Purlovia-master/ue/hierarchy.py": {
        "_get_parent_cls": {
            "name": "_get_parent_cls",
            "location": 37,
            "return": [],
            "arguments": {
                "export": []
            }
        },
        "inherits_from": {
            "name": "inherits_from",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [
                    "Union[(str, ue.asset.ExportTableItem)]"
                ],
                "target": [
                    "str"
                ],
                "safe": [],
                "include_self": []
            }
        },
        "find_sub_classes": {
            "name": "find_sub_classes",
            "location": 79,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "klass": [
                    "Union[(str, ue.asset.ExportTableItem)]"
                ]
            }
        },
        "find_parent_classes": {
            "name": "find_parent_classes",
            "location": 99,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "klass": [
                    "Union[(str, ue.asset.ExportTableItem)]"
                ]
            }
        },
        "get_parent_class": {
            "name": "get_parent_class",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "klass": [
                    "Union[(str, ue.asset.ExportTableItem)]"
                ]
            }
        },
        "iterate_all": {
            "name": "iterate_all",
            "location": 150,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {}
        },
        "_node_from_argument": {
            "name": "_node_from_argument",
            "location": 157,
            "return": [
                "utils.tree.Node[str]"
            ],
            "arguments": {
                "klass": [
                    "Union[(str, ue.asset.ExportTableItem)]"
                ],
                "default": []
            }
        },
        "load_internal_hierarchy": {
            "name": "load_internal_hierarchy",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ]
            }
        },
        "explore_asset": {
            "name": "explore_asset",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "explore_path": {
            "name": "explore_path",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ],
                "excludes": [
                    "Iterable[str]"
                ],
                "verbose": [],
                "disable_debug": []
            }
        },
        "_find_exports_to_store": {
            "name": "_find_exports_to_store",
            "location": 238,
            "return": [
                "Iterator[ue.asset.ExportTableItem]"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "ext": [
                    "str"
                ]
            }
        },
        "_ingest_asset": {
            "name": "_ingest_asset",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "asset": [
                    "ue.asset.UAsset"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ],
                "ext": [
                    "str"
                ]
            }
        },
        "_ingest_export": {
            "name": "_ingest_export",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ]
            }
        },
        "load_internal_hierarchy.walk_hierarchy_yaml": {
            "name": "walk_hierarchy_yaml",
            "location": 182,
            "return": [],
            "arguments": {
                "name": [],
                "content": []
            }
        }
    },
    "Purlovia-master/ue/loader.py": {
        "find_caseinsensitive_path": {
            "name": "find_caseinsensitive_path",
            "location": 578,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "base": [
                    "pathlib.Path"
                ]
            }
        },
        "find_caseinsensitive_path_match": {
            "name": "find_caseinsensitive_path_match",
            "location": 595,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "load_file_into_memory": {
            "name": "load_file_into_memory",
            "location": 620,
            "return": [
                "memoryview"
            ],
            "arguments": {
                "filename": []
            }
        },
        "ModNotFound.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod_name": [
                    "str"
                ]
            }
        },
        "AssetNotFound.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_name": [
                    "str"
                ]
            }
        },
        "ExportNotFound.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_name": [
                    "str"
                ],
                "export_name": [
                    "str"
                ]
            }
        },
        "AssetParseError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_name": [
                    "str"
                ]
            }
        },
        "ModResolver.initialise": {
            "name": "initialise",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModResolver.get_name_from_id": {
            "name": "get_name_from_id",
            "location": 70,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "ModResolver.get_id_from_name": {
            "name": "get_id_from_name",
            "location": 74,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "IniModResolver.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "IniModResolver.initialise": {
            "name": "initialise",
            "location": 86,
            "return": [
                "_TIniModResolver"
            ],
            "arguments": {
                "self": [
                    "_TIniModResolver"
                ]
            }
        },
        "IniModResolver.get_name_from_id": {
            "name": "get_name_from_id",
            "location": 95,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "modid": [
                    "str"
                ]
            }
        },
        "IniModResolver.get_id_from_name": {
            "name": "get_id_from_name",
            "location": 99,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CacheManager.lookup": {
            "name": "lookup",
            "location": 107,
            "return": [
                "Optional[ue.asset.UAsset]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CacheManager.add": {
            "name": "add",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "CacheManager.remove": {
            "name": "remove",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CacheManager.wipe": {
            "name": "wipe",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "CacheManager.get_count": {
            "name": "get_count",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictCacheManager.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictCacheManager.lookup": {
            "name": "lookup",
            "location": 133,
            "return": [
                "Optional[ue.asset.UAsset]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DictCacheManager.add": {
            "name": "add",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "DictCacheManager.remove": {
            "name": "remove",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DictCacheManager.wipe": {
            "name": "wipe",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "DictCacheManager.get_count": {
            "name": "get_count",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageBasedCacheManager.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [],
                "max_memory": [],
                "keep_count": []
            }
        },
        "UsageBasedCacheManager.lookup": {
            "name": "lookup",
            "location": 168,
            "return": [
                "Optional[ue.asset.UAsset]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UsageBasedCacheManager.add": {
            "name": "add",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "UsageBasedCacheManager.remove": {
            "name": "remove",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UsageBasedCacheManager.wipe": {
            "name": "wipe",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "UsageBasedCacheManager.get_count": {
            "name": "get_count",
            "location": 222,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageBasedCacheManager._maybe_purge": {
            "name": "_maybe_purge",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageBasedCacheManager._purge": {
            "name": "_purge",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "ContextAwareCacheWrapper.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submanager": [
                    "CacheManager"
                ]
            }
        },
        "ContextAwareCacheWrapper.lookup": {
            "name": "lookup",
            "location": 250,
            "return": [
                "Optional[ue.asset.UAsset]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ContextAwareCacheWrapper.add": {
            "name": "add",
            "location": 263,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "asset": [
                    "ue.asset.UAsset"
                ]
            }
        },
        "ContextAwareCacheWrapper.remove": {
            "name": "remove",
            "location": 266,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ContextAwareCacheWrapper.wipe": {
            "name": "wipe",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "ContextAwareCacheWrapper.get_count": {
            "name": "get_count",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetLoader.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetLoader.clean_asset_name": {
            "name": "clean_asset_name",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AssetLoader.wipe_cache": {
            "name": "wipe_cache",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetLoader.wipe_cache_with_prefix": {
            "name": "wipe_cache_with_prefix",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "AssetLoader.convert_asset_name_to_path": {
            "name": "convert_asset_name_to_path",
            "location": 331,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "partial": [],
                "ext": [],
                "check_exists": []
            }
        },
        "AssetLoader.get_mod_name": {
            "name": "get_mod_name",
            "location": 372,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ]
            }
        },
        "AssetLoader.get_mod_id": {
            "name": "get_mod_id",
            "location": 388,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ]
            }
        },
        "AssetLoader.find_assetnames": {
            "name": "find_assetnames",
            "location": 401,
            "return": [
                "Generator[(Union[(str, Tuple[(str, Any)])], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "toppath": []
            }
        },
        "AssetLoader.load_related": {
            "name": "load_related",
            "location": 449,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "ue.base.UEBase"
                ]
            }
        },
        "AssetLoader.load_class": {
            "name": "load_class",
            "location": 462,
            "return": [
                "ue.asset.ExportTableItem"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "fallback": [],
                "quiet": []
            }
        },
        "AssetLoader._load_raw_asset_from_file": {
            "name": "_load_raw_asset_from_file",
            "location": 475,
            "return": [
                "memoryview"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "AssetLoader.load_raw_asset": {
            "name": "load_raw_asset",
            "location": 485,
            "return": [
                "Tuple[(memoryview, str)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AssetLoader.load_asset": {
            "name": "load_asset",
            "location": 500,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ],
                "quiet": [],
                "use_cache": [],
                "cache_result": []
            }
        },
        "AssetLoader.__getitem__": {
            "name": "__getitem__",
            "location": 516,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ]
            }
        },
        "AssetLoader.__delitem__": {
            "name": "__delitem__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ]
            }
        },
        "AssetLoader.partially_load_asset": {
            "name": "partially_load_asset",
            "location": 525,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ],
                "cache_result": []
            }
        },
        "AssetLoader._load_asset": {
            "name": "_load_asset",
            "location": 529,
            "return": [
                "ue.asset.UAsset"
            ],
            "arguments": {
                "self": [],
                "assetname": [
                    "str"
                ],
                "doNotLink": [],
                "quiet": [],
                "cache_result": []
            }
        }
    },
    "Purlovia-master/ue/number.py": {
        "make_binary_operators": {
            "name": "make_binary_operators",
            "location": 10,
            "return": [
                "Tuple[(Callable[([Any, Any], Any)], Callable[([Any, Any], Any)])]"
            ],
            "arguments": {
                "op": []
            }
        },
        "make_binary_operator": {
            "name": "make_binary_operator",
            "location": 33,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "op": []
            }
        },
        "make_operator": {
            "name": "make_operator",
            "location": 47,
            "return": [
                "Callable"
            ],
            "arguments": {
                "op": []
            }
        },
        "make_binary_operators.fwd": {
            "name": "fwd",
            "location": 12,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "make_binary_operators.rev": {
            "name": "rev",
            "location": 21,
            "return": [],
            "arguments": {
                "b": [],
                "a": []
            }
        },
        "make_binary_operator.fn": {
            "name": "fn",
            "location": 35,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "make_operator.fn": {
            "name": "fn",
            "location": 49,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "Purlovia-master/ue/properties.py": {
        "decode_type_or_name": {
            "name": "decode_type_or_name",
            "location": 815,
            "return": [
                "Tuple[(Optional[str], Optional[Type[Union[(Box, Color, IntPoint, LinearColor, Quat, Rotator, Vector2D)]]], Optional[Union[(float, int)]])]"
            ],
            "arguments": {
                "type_or_name": [
                    "ue.coretypes.NameIndex"
                ],
                "skip_deserialise": []
            }
        },
        "getPropertyType": {
            "name": "getPropertyType",
            "location": 1218,
            "return": [
                "Optional[Type[Union[(Box, Color, IntPoint, LinearColor, Quat, Rotator, Vector2D)]]]"
            ],
            "arguments": {
                "typeName": [
                    "str"
                ],
                "throw": []
            }
        },
        "PropertyTable.as_dict": {
            "name": "as_dict",
            "location": 49,
            "return": [
                "Dict[(str, Dict[(int, ue.base.UEBase)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable.get_property": {
            "name": "get_property",
            "location": 52,
            "return": [
                "ue.base.UEBase"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "index": [
                    "int"
                ],
                "fallback": []
            }
        },
        "PropertyTable._convert_to_dict": {
            "name": "_convert_to_dict",
            "location": 63,
            "return": [
                "Dict[(str, Dict[(int, ue.base.UEBase)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable._deserialise": {
            "name": "_deserialise",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable._link": {
            "name": "_link",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable._parseField": {
            "name": "_parseField",
            "location": 95,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable.__getitem__": {
            "name": "__getitem__",
            "location": 111,
            "return": [
                "Property"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "PropertyTable.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable.format_for_json": {
            "name": "format_for_json",
            "location": 121,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyHeader._deserialise": {
            "name": "_deserialise",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyHeader._link": {
            "name": "_link",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property._deserialise": {
            "name": "_deserialise",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyAsset.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyAsset._deserialise": {
            "name": "_deserialise",
            "location": 218,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyAsset._link": {
            "name": "_link",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyAsset.addFakeName": {
            "name": "addFakeName",
            "location": 224,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DummyAsset.getName": {
            "name": "getName",
            "location": 229,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ValueProperty._deserialise": {
            "name": "_deserialise",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ValueProperty.format_for_json": {
            "name": "format_for_json",
            "location": 245,
            "return": [
                "numbers.Real"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__get_validators__": {
            "name": "__get_validators__",
            "location": 249,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ValueProperty._validate": {
            "name": "_validate",
            "location": 254,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0"
                ]
            }
        },
        "ValueProperty.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ValueProperty.__bool__": {
            "name": "__bool__",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__float__": {
            "name": "__float__",
            "location": 274,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__int__": {
            "name": "__int__",
            "location": 278,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__pos__": {
            "name": "__pos__",
            "location": 282,
            "return": [
                "numbers.Real"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__neg__": {
            "name": "__neg__",
            "location": 286,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__format__": {
            "name": "__format__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "FloatProperty.create": {
            "name": "create",
            "location": 327,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "inp": [
                    "Union[(float, str, Tuple[(float, str)])]"
                ],
                "asset": [
                    "ue.base.UEBase"
                ]
            }
        },
        "FloatProperty._deserialise": {
            "name": "_deserialise",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "FloatProperty.__bytes__": {
            "name": "__bytes__",
            "location": 391,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatProperty.format_for_json": {
            "name": "format_for_json",
            "location": 395,
            "return": [
                "Optional[Union[(float, int, numbers.Real)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatProperty.__float__": {
            "name": "__float__",
            "location": 398,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleProperty._deserialise": {
            "name": "_deserialise",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "DoubleProperty.__float__": {
            "name": "__float__",
            "location": 433,
            "return": [
                "Optional[Union[(float, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntProperty.create": {
            "name": "create",
            "location": 444,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "int"
                ],
                "asset": [
                    "ue.base.UEBase"
                ]
            }
        },
        "IntProperty._deserialise": {
            "name": "_deserialise",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "IntProperty.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "UInt32Property._deserialise": {
            "name": "_deserialise",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "BoolProperty.create": {
            "name": "create",
            "location": 477,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "bool"
                ],
                "asset": [
                    "ue.base.UEBase"
                ]
            }
        },
        "BoolProperty._deserialise": {
            "name": "_deserialise",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "BoolProperty.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ByteProperty.create": {
            "name": "create",
            "location": 502,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "Union[(int, Tuple[(str, str)])]"
                ],
                "asset": [
                    "ue.base.UEBase"
                ]
            }
        },
        "ByteProperty.get_enum_value_name": {
            "name": "get_enum_value_name",
            "location": 523,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ByteProperty._deserialise": {
            "name": "_deserialise",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ByteProperty.format_for_json": {
            "name": "format_for_json",
            "location": 539,
            "return": [
                "Union[(int, ue.coretypes.NameIndex)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ByteProperty.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ObjectProperty._deserialise": {
            "name": "_deserialise",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ObjectProperty.format_for_json": {
            "name": "format_for_json",
            "location": 574,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectProperty.__bool__": {
            "name": "__bool__",
            "location": 577,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLikeProperty._deserialise": {
            "name": "_deserialise",
            "location": 584,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLikeProperty.__get_validators__": {
            "name": "__get_validators__",
            "location": 588,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StringLikeProperty._validate": {
            "name": "_validate",
            "location": 593,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0"
                ]
            }
        },
        "StringLikeProperty.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "NameProperty._deserialise": {
            "name": "_deserialise",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "NameProperty.format_for_json": {
            "name": "format_for_json",
            "location": 613,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringProperty.create": {
            "name": "create",
            "location": 626,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ],
                "asset": [
                    "ue.base.UEBase"
                ]
            }
        },
        "StringProperty._deserialise": {
            "name": "_deserialise",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringProperty.register_user": {
            "name": "register_user",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "StringProperty.__str__": {
            "name": "__str__",
            "location": 655,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringProperty.__eq__": {
            "name": "__eq__",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StringProperty.format_for_json": {
            "name": "format_for_json",
            "location": 667,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringProperty.__bool__": {
            "name": "__bool__",
            "location": 670,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextProperty._deserialise": {
            "name": "_deserialise",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextProperty.__str__": {
            "name": "__str__",
            "location": 693,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextProperty.format_for_json": {
            "name": "format_for_json",
            "location": 696,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guid._deserialise": {
            "name": "_deserialise",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guid.format_for_json": {
            "name": "format_for_json",
            "location": 713,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomVersion._deserialise": {
            "name": "_deserialise",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructEntry._deserialise": {
            "name": "_deserialise",
            "location": 737,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructProperty._deserialise": {
            "name": "_deserialise",
            "location": 861,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "StructProperty.as_dict": {
            "name": "as_dict",
            "location": 929,
            "return": [
                "Dict[(str, ue.base.UEBase)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructProperty.get_property": {
            "name": "get_property",
            "location": 932,
            "return": [
                "ue.base.UEBase"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fallback": []
            }
        },
        "StructProperty._convert_to_dict": {
            "name": "_convert_to_dict",
            "location": 943,
            "return": [
                "Dict[(str, Optional[ue.base.UEBase])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructProperty.__str__": {
            "name": "__str__",
            "location": 955,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructProperty.format_for_json": {
            "name": "format_for_json",
            "location": 961,
            "return": [
                "Union[(Dict[(str, ue.base.UEBase)], List[ue.base.UEBase])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayProperty._deserialise": {
            "name": "_deserialise",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "with_type": [
                    "type"
                ]
            }
        },
        "ArrayProperty.format_for_json": {
            "name": "format_for_json",
            "location": 1042,
            "return": [
                "List[ue.base.UEBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayProperty.__iter__": {
            "name": "__iter__",
            "location": 1045,
            "return": [
                "listiterator[ue.base.UEBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector._deserialise": {
            "name": "_deserialise",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Vector.format_for_json": {
            "name": "format_for_json",
            "location": 1078,
            "return": [
                "Dict[(str, Optional[Union[(float, int, numbers.Real)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box._deserialise": {
            "name": "_deserialise",
            "location": 1087,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Vector2D._deserialise": {
            "name": "_deserialise",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Rotator._deserialise": {
            "name": "_deserialise",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Quat._deserialise": {
            "name": "_deserialise",
            "location": 1119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Transform._deserialise": {
            "name": "_deserialise",
            "location": 1131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Color._deserialise": {
            "name": "_deserialise",
            "location": 1142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "LinearColor._deserialise": {
            "name": "_deserialise",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "LinearColor.as_tuple": {
            "name": "as_tuple",
            "location": 1158,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearColor.format_for_json": {
            "name": "format_for_json",
            "location": 1161,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntPoint._deserialise": {
            "name": "_deserialise",
            "location": 1169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "EngineVersion._deserialise": {
            "name": "_deserialise",
            "location": 1181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyTable._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "Property._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "ByteProperty._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "StructProperty._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "ArrayProperty._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 1050,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/ue/proxy.py": {
        "_register_proxy": {
            "name": "_register_proxy",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "uetype": [
                    "str"
                ],
                "cls": [
                    "Type[UEProxyStructure]"
                ]
            }
        },
        "get_proxy_for_type": {
            "name": "get_proxy_for_type",
            "location": 159,
            "return": [
                "Tproxy"
            ],
            "arguments": {
                "cls_name": [
                    "str"
                ],
                "loader": [
                    "ue.loader.AssetLoader"
                ],
                "default": []
            }
        },
        "get_proxy_for_exact_type": {
            "name": "get_proxy_for_exact_type",
            "location": 175,
            "return": [
                "Optional[UEProxyStructure]"
            ],
            "arguments": {
                "uetype": [
                    "str"
                ]
            }
        },
        "uemap": {
            "name": "uemap",
            "location": 336,
            "return": [
                "Mapping[(int, Tele)]"
            ],
            "arguments": {
                "uetype": [
                    "Type[Tele]"
                ],
                "args": [
                    "Iterable[Union[(Tele, Tval)]]"
                ]
            }
        },
        "uefloats": {
            "name": "uefloats",
            "location": 358,
            "return": [
                "Mapping[(int, ue.properties.FloatProperty)]"
            ],
            "arguments": {}
        },
        "uebytes": {
            "name": "uebytes",
            "location": 362,
            "return": [
                "Mapping[(int, ue.properties.ByteProperty)]"
            ],
            "arguments": {}
        },
        "uebools": {
            "name": "uebools",
            "location": 366,
            "return": [
                "Mapping[(int, ue.properties.BoolProperty)]"
            ],
            "arguments": {}
        },
        "ueints": {
            "name": "ueints",
            "location": 370,
            "return": [
                "Mapping[(int, ue.properties.IntProperty)]"
            ],
            "arguments": {}
        },
        "uestrings": {
            "name": "uestrings",
            "location": 374,
            "return": [
                "Mapping[(int, ue.properties.StringProperty)]"
            ],
            "arguments": {}
        },
        "UEProxyStructure.get_ue_type": {
            "name": "get_ue_type",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UEProxyStructure.get_defaults": {
            "name": "get_defaults",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UEProxyStructure.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "uetype": [
                    "str"
                ]
            }
        },
        "UEProxyStructure.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEProxyStructure.__getitem__": {
            "name": "__getitem__",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UEProxyStructure.__contains__": {
            "name": "__contains__",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UEProxyStructure.get": {
            "name": "get",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "field_index": [
                    "int"
                ],
                "fallback": []
            }
        },
        "UEProxyStructure.update": {
            "name": "update",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Mapping[(str, Mapping[(int, ue.base.UEBase)])]"
                ]
            }
        },
        "UEProxyStructure.set_source": {
            "name": "set_source",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "UEProxyStructure.get_source": {
            "name": "get_source",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UEProxyStructure.has_override": {
            "name": "has_override",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "ProxyComponentWrapper.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_proxy": [
                    "Tproxy"
                ]
            }
        },
        "ProxyComponentWrapper.__iter__": {
            "name": "__iter__",
            "location": 195,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyComponentWrapper.__len__": {
            "name": "__len__",
            "location": 198,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyComponentWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 201,
            "return": [
                "Tproxy"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ProxyComponentWrapper.__setitem__": {
            "name": "__setitem__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": [
                    "ue.properties.ObjectProperty"
                ]
            }
        },
        "ProxyComponent._init_proxy_field": {
            "name": "_init_proxy_field",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyComponent.__copy__": {
            "name": "__copy__",
            "location": 236,
            "return": [
                "ProxyComponentWrapper[Tproxy]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyComponent.__getitem__": {
            "name": "__getitem__",
            "location": 243,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ProxyComponent.__setitem__": {
            "name": "__setitem__",
            "location": 246,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "ProxyComponent.__iter__": {
            "name": "__iter__",
            "location": 249,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyComponent.__len__": {
            "name": "__len__",
            "location": 252,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReferenceWrapper.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_proxy": [
                    "Tproxy"
                ]
            }
        },
        "LazyReferenceWrapper.__iter__": {
            "name": "__iter__",
            "location": 265,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReferenceWrapper.__len__": {
            "name": "__len__",
            "location": 268,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReferenceWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 271,
            "return": [
                "Tproxy"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LazyReferenceWrapper.__setitem__": {
            "name": "__setitem__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": [
                    "ue.properties.ObjectProperty"
                ]
            }
        },
        "LazyReference._init_proxy_field": {
            "name": "_init_proxy_field",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReference.__copy__": {
            "name": "__copy__",
            "location": 316,
            "return": [
                "LazyReferenceWrapper[Tproxy]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReference.__getitem__": {
            "name": "__getitem__",
            "location": 323,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LazyReference.__setitem__": {
            "name": "__setitem__",
            "location": 326,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "LazyReference.__iter__": {
            "name": "__iter__",
            "location": 329,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyReference.__len__": {
            "name": "__len__",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/ue/stream.py": {
        "MemoryStream.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memOrStream": [],
                "offset": [],
                "size": []
            }
        },
        "MemoryStream.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readInt8": {
            "name": "readInt8",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readUInt8": {
            "name": "readUInt8",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readBool8": {
            "name": "readBool8",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readBool32": {
            "name": "readBool32",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readUInt16": {
            "name": "readUInt16",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readInt16": {
            "name": "readInt16",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readUInt32": {
            "name": "readUInt32",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readInt32": {
            "name": "readInt32",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readUInt64": {
            "name": "readUInt64",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readInt64": {
            "name": "readInt64",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readFloat": {
            "name": "readFloat",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readDouble": {
            "name": "readDouble",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStream.readBytes": {
            "name": "readBytes",
            "location": 65,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "MemoryStream.readTerminatedString": {
            "name": "readTerminatedString",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "encoding": []
            }
        },
        "MemoryStream.readTerminatedWideString": {
            "name": "readTerminatedWideString",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "MemoryStream._read": {
            "name": "_read",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fmt": [],
                "count": [
                    "int"
                ]
            }
        }
    },
    "Purlovia-master/ue/testutils.py": {
        "load_asset": {
            "name": "load_asset",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "assetfile": [
                    "str"
                ]
            }
        },
        "parse_colors": {
            "name": "parse_colors",
            "location": 27,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "props": []
            }
        }
    },
    "Purlovia-master/ue/test_context.py": {
        "fixture_ctx": {
            "name": "fixture_ctx",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "verify_defaults": {
            "name": "verify_defaults",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ],
                "exclude": [
                    "Iterable[str]"
                ]
            }
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ]
            }
        },
        "test_reset": {
            "name": "test_reset",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ]
            }
        },
        "test_simple_override": {
            "name": "test_simple_override",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ]
            }
        },
        "test_multi_level": {
            "name": "test_multi_level",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ]
            }
        },
        "test_multicontext_level_overrides": {
            "name": "test_multicontext_level_overrides",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "ue.context.ParsingContext"
                ]
            }
        }
    },
    "Purlovia-master/ue/test_loader.py": {
        "loader": {
            "name": "loader",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_clean_asset_name": {
            "name": "test_clean_asset_name",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_convert_asset_name_to_path": {
            "name": "test_convert_asset_name_to_path",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_convert_asset_name_to_path.convert": {
            "name": "convert",
            "location": 33,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "Purlovia-master/ue/test_proxy.py": {
        "simple_proxy": {
            "name": "simple_proxy",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_define_class_without_uetype": {
            "name": "test_define_class_without_uetype",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_define_empty_class": {
            "name": "test_define_empty_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_define_class_with_types": {
            "name": "test_define_class_with_types",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_define_class_with_data": {
            "name": "test_define_class_with_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_define_subclass_without_uetype": {
            "name": "test_define_subclass_without_uetype",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_define_subclass": {
            "name": "test_define_subclass",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_usage": {
            "name": "test_simple_usage",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_proxy": []
            }
        },
        "test_has_override": {
            "name": "test_has_override",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_proxy": []
            }
        },
        "test_unspecified_fields": {
            "name": "test_unspecified_fields",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_proxy": []
            }
        }
    },
    "Purlovia-master/ue/test_structs_fixed_known.py": {
        "test_Guid_DinoColorSet_Baryonyx": {
            "name": "test_Guid_DinoColorSet_Baryonyx",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "Purlovia-master/ue/test_structs_propbags.py": {
        "test_DinoColorSetGeneric": {
            "name": "test_DinoColorSetGeneric",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_DinoColorSet_Baryonyx": {
            "name": "test_DinoColorSet_Baryonyx",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_DinoColorSet_PolarBear": {
            "name": "test_DinoColorSet_PolarBear",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_DinoColorSet_Raptor_Corrupt": {
            "name": "test_DinoColorSet_Raptor_Corrupt",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_DinoColorSet_Apex__PrimalFear": {
            "name": "test_DinoColorSet_Apex__PrimalFear",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "Purlovia-master/ue/test_utils.py": {
        "fixture_simple_model": {
            "name": "fixture_simple_model",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_sanitise_floats": {
            "name": "test_sanitise_floats",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sanitise_float_properties": {
            "name": "test_sanitise_float_properties",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_sanitise_models": {
            "name": "test_sanitise_models",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_model": [
                    "Item"
                ]
            }
        },
        "test_sanitise_formattable": {
            "name": "test_sanitise_formattable",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sanitise_unformattable": {
            "name": "test_sanitise_unformattable",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Formattable.format_for_json": {
            "name": "format_for_json",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/ue/tree.py": {
        "inherits_from": {
            "name": "inherits_from",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ],
                "klass_name": [
                    "str"
                ]
            }
        },
        "discover_inheritance_chain": {
            "name": "discover_inheritance_chain",
            "location": 26,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "export": [
                    "ue.asset.ExportTableItem"
                ],
                "reverse": []
            }
        },
        "get_parent_fullname": {
            "name": "get_parent_fullname",
            "location": 60,
            "return": [],
            "arguments": {
                "export": []
            }
        },
        "is_fullname_an_asset": {
            "name": "is_fullname_an_asset",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/ue/utils.py": {
        "get_leaf_from_assetname": {
            "name": "get_leaf_from_assetname",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_assetpath_from_assetname": {
            "name": "get_assetpath_from_assetname",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "assetname": [
                    "str"
                ]
            }
        },
        "get_clean_namespaced_name": {
            "name": "get_clean_namespaced_name",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "ns": [
                    "ue.base.UEBase"
                ],
                "name": [
                    "ue.base.UEBase"
                ]
            }
        },
        "get_clean_name": {
            "name": "get_clean_name",
            "location": 44,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "ue.base.UEBase"
                ],
                "fallback": [
                    "str"
                ]
            }
        },
        "get_property": {
            "name": "get_property",
            "location": 58,
            "return": [
                "Optional[ue.base.UEBase]"
            ],
            "arguments": {
                "export": [],
                "name": []
            }
        },
        "sanitise_output": {
            "name": "sanitise_output",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": []
            }
        },
        "clean_float": {
            "name": "clean_float",
            "location": 105,
            "return": [
                "Optional[Union[(float, int, _T0)]]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ]
            }
        },
        "clean_double": {
            "name": "clean_double",
            "location": 125,
            "return": [
                "Optional[Union[(float, int, _T0)]]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ]
            }
        }
    },
    "Purlovia-master/ue/__init__.py": {},
    "Purlovia-master/utils/cachefile.py": {
        "cache_data": {
            "name": "cache_data",
            "location": 21,
            "return": [
                "TResult"
            ],
            "arguments": {
                "key": [
                    "TKey"
                ],
                "filename": [
                    "Union[(str, pathlib.Path)]"
                ],
                "generator_fn": [
                    "Callable[([TKey], TResult)]"
                ],
                "force_regenerate": [],
                "pickle_protocol": []
            }
        },
        "_hash_from_object": {
            "name": "_hash_from_object",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "object"
                ]
            }
        }
    },
    "Purlovia-master/utils/generics.py": {
        "get_generic_args": {
            "name": "get_generic_args",
            "location": 8,
            "return": [
                "Optional[List[type]]"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "Purlovia-master/utils/log.py": {
        "namer_gz": {
            "name": "namer_gz",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "rotator_gz": {
            "name": "rotator_gz",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 45,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": []
            }
        },
        "CompressedRotatingFileHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/utils/measuremem.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        }
    },
    "Purlovia-master/utils/name_convert.py": {
        "snake_to_camel": {
            "name": "snake_to_camel",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "kebab_to_snake": {
            "name": "kebab_to_snake",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "snake_to_kebab": {
            "name": "snake_to_kebab",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "uelike_prettify": {
            "name": "uelike_prettify",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/utils/resource_monitor.py": {
        "resource_monitor": {
            "name": "resource_monitor",
            "location": 76,
            "return": [],
            "arguments": {
                "process": [],
                "interval": []
            }
        },
        "Ticker.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_fn": [],
                "interval": []
            }
        },
        "Ticker.start": {
            "name": "start",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticker.run": {
            "name": "run",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticker.end": {
            "name": "end",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "resource_monitor.tick": {
            "name": "tick",
            "location": 82,
            "return": [],
            "arguments": {}
        }
    },
    "Purlovia-master/utils/strings.py": {
        "get_valid_filename": {
            "name": "get_valid_filename",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "Purlovia-master/utils/test_cachefile.py": {
        "get_cached_data": {
            "name": "get_cached_data",
            "location": 10,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "key": [],
                "_simple_data_fn": [],
                "path": [
                    "pathlib.Path"
                ],
                "name": [],
                "force": []
            }
        },
        "test_cached_data_generates_and_stores_data": {
            "name": "test_cached_data_generates_and_stores_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_cached_data_fetches_from_cache": {
            "name": "test_cached_data_fetches_from_cache",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_cached_data_cache_invalided_on_key_change": {
            "name": "test_cached_data_cache_invalided_on_key_change",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_cached_data_allow_force_regerenate": {
            "name": "test_cached_data_allow_force_regerenate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "pathlib.Path"
                ]
            }
        },
        "_simple_data_fn": {
            "name": "_simple_data_fn",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "Purlovia-master/utils/test_tree.py": {
        "fixture_basic_tree": {
            "name": "fixture_basic_tree",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_construct_simple_string_node_tree": {
            "name": "test_construct_simple_string_node_tree",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_walk_nodes": {
            "name": "test_walk_nodes",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_walk_iterator_dfs": {
            "name": "test_walk_iterator_dfs",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_walk_iterator_bfs": {
            "name": "test_walk_iterator_bfs",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_walk_iterator_without_self_dfs": {
            "name": "test_walk_iterator_without_self_dfs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_walk_iterator_without_self_bfs": {
            "name": "test_walk_iterator_without_self_bfs",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_walk_abort": {
            "name": "test_walk_abort",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_tree": [
                    "utils.tree.Node[str]"
                ]
            }
        },
        "test_indexed_simple_string_tree": {
            "name": "test_indexed_simple_string_tree",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typed_node_tree": {
            "name": "test_typed_node_tree",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_indexed_typed_tree": {
            "name": "test_indexed_typed_tree",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_segment": {
            "name": "test_insert_segment",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_walk_abort.walker": {
            "name": "walker",
            "location": 61,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "MyDataType.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MyDataType.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/utils/tree.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "T"
                ],
                "parent": [
                    "Optional[Node[T]]"
                ]
            }
        },
        "Node.data": {
            "name": "data",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.parent_data": {
            "name": "parent_data",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.nodes": {
            "name": "nodes",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.walk_iterator": {
            "name": "walk_iterator",
            "location": 48,
            "return": [
                "Iterable[Node[T]]"
            ],
            "arguments": {
                "self": [],
                "skip_self": [],
                "breadth_first": []
            }
        },
        "Node.walk": {
            "name": "walk",
            "location": 63,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[([Node[T]], bool)]"
                ]
            }
        },
        "Node.add": {
            "name": "add",
            "location": 78,
            "return": [
                "Node[T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[(Node[T], T)]"
                ]
            }
        },
        "Node.__contains__": {
            "name": "__contains__",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[(Node[T], T)]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedTree.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "T"
                ],
                "key_fn": [
                    "Optional[Callable[([T], str)]]"
                ]
            }
        },
        "IndexedTree.clear": {
            "name": "clear",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedTree.add": {
            "name": "add",
            "location": 121,
            "return": [
                "Node[T]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(str, Node[T])]"
                ],
                "data": [
                    "Union[(Node[T], T)]"
                ]
            }
        },
        "IndexedTree.insert_segment": {
            "name": "insert_segment",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(str, Node[T])]"
                ],
                "partial_tree": [
                    "Node[T]"
                ]
            }
        },
        "IndexedTree.keys": {
            "name": "keys",
            "location": 137,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexedTree.__getitem__": {
            "name": "__getitem__",
            "location": 140,
            "return": [
                "Node[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "IndexedTree.__contains__": {
            "name": "__contains__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "IndexedTree.get": {
            "name": "get",
            "location": 146,
            "return": [
                "Node[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "fallback": []
            }
        },
        "IndexedTree.ingest_list": {
            "name": "ingest_list",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "List[T]"
                ],
                "parent_fn": [
                    "Callable[([T], Optional[T])]"
                ]
            }
        },
        "IndexedTree._ingest": {
            "name": "_ingest",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ],
                "parent_fn": [
                    "Callable[([T], Optional[T])]"
                ]
            }
        },
        "IndexedTree._register": {
            "name": "_register",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node[T]"
                ]
            }
        },
        "IndexedTree._handle_parent_arg": {
            "name": "_handle_parent_arg",
            "location": 193,
            "return": [
                "Node[T]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Union[(str, Node[T])]"
                ]
            }
        },
        "Node._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        },
        "IndexedTree._repr_pretty_": {
            "name": "_repr_pretty_",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "cycle": [
                    "bool"
                ]
            }
        }
    },
    "Purlovia-master/utils/__init__.py": {
        "throw": {
            "name": "throw",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "ex": [
                    "Exception"
                ]
            }
        }
    },
    "Purlovia-master/utils/brigit/__init__.py": {
        "kebab_case": {
            "name": "kebab_case",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "NullHandler.emit": {
            "name": "emit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "GitException.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "RawGit.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_path": [],
                "encoding": []
            }
        },
        "RawGit.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "RawGit.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Git.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_path": [],
                "remote": [],
                "quiet": [],
                "bare": [],
                "logger": []
            }
        },
        "Git.pretty_log": {
            "name": "pretty_log",
            "location": 106,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Purlovia-master/utils/xlocal/test_xlocal.py": {
        "fixture_xlocal": {
            "name": "fixture_xlocal",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_scoping": {
            "name": "test_scoping",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "xlocal": []
            }
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stacking": {
            "name": "test_stacking",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "xlocal": []
            }
        },
        "test_is_immutable": {
            "name": "test_is_immutable",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "xlocal": []
            }
        },
        "test_undostack": {
            "name": "test_undostack",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "xlocal": []
            }
        },
        "test_scoping.f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "Purlovia-master/utils/xlocal/__init__.py": {
        "xlocal.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "xlocal._getlocals": {
            "name": "_getlocals",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "autocreate": []
            }
        },
        "xlocal._checkremove": {
            "name": "_checkremove",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "xlocal.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "WithXLocals"
            ],
            "arguments": {
                "self": []
            }
        },
        "xlocal.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "xlocal.__setattr__": {
            "name": "__setattr__",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "val": []
            }
        },
        "xlocal.__delattr__": {
            "name": "__delattr__",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "WithXLocals.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "the_xlocal": [],
                "kwargs": []
            }
        },
        "WithXLocals.__enter__": {
            "name": "__enter__",
            "location": 77,
            "return": [
                "_TWithXLocals"
            ],
            "arguments": {
                "self": [
                    "_TWithXLocals"
                ]
            }
        },
        "WithXLocals.__exit__": {
            "name": "__exit__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
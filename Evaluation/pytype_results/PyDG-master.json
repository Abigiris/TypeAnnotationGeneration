{
    "PyDG-master/codegra_plag/cdg.py": {
        "process_block": {
            "name": "process_block",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "stmts": [],
                "cdg_stack": [],
                "exit_node": [],
                "res_graph": []
            }
        },
        "create_cdg_try": {
            "name": "create_cdg_try",
            "location": 153,
            "return": [
                "CDGRegionNode"
            ],
            "arguments": {
                "stmt": [],
                "cdg_stack": [],
                "exit_node": [],
                "res_graph": []
            }
        },
        "create_cdg_class": {
            "name": "create_cdg_class",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "res_graph": []
            }
        },
        "create_cdg_loop": {
            "name": "create_cdg_loop",
            "location": 249,
            "return": [
                "CDGRegionNode"
            ],
            "arguments": {
                "loop": [],
                "stack": [],
                "exit_node": [],
                "res_graph": []
            }
        },
        "create_cdg_stmt": {
            "name": "create_cdg_stmt",
            "location": 284,
            "return": [
                "Optional[CDGNode]"
            ],
            "arguments": {
                "stmt": [],
                "stack": [],
                "exit_node": [],
                "res_graph": []
            }
        },
        "create_cdg": {
            "name": "create_cdg",
            "location": 413,
            "return": [
                "CDG"
            ],
            "arguments": {
                "tree": []
            }
        },
        "CDGNode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orig": [],
                "label": []
            }
        },
        "CDG.flatten": {
            "name": "flatten",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDG.get_all_tails_from_node": {
            "name": "get_all_tails_from_node",
            "location": 28,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "from_node": [],
                "dotted_only": []
            }
        },
        "CDG.get_not_special_nodes": {
            "name": "get_not_special_nodes",
            "location": 41,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDG.to_mcgregor": {
            "name": "to_mcgregor",
            "location": 50,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDGRegionNode.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orig": [],
                "type": [],
                "name": [],
                "extra": [],
                "stmt": []
            }
        },
        "CDGStack.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "CDGStack.add_node": {
            "name": "add_node",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "label": []
            }
        },
        "CDGStack.get_loop": {
            "name": "get_loop",
            "location": 104,
            "return": [
                "CDGRegionNode"
            ],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "CDGStack.pushed": {
            "name": "pushed",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "label": []
            }
        }
    },
    "PyDG-master/codegra_plag/cfg.py": {
        "process_block": {
            "name": "process_block",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmts": [],
                "start": [],
                "loop_start": [],
                "loop_end": [],
                "fun_end": [],
                "res_graph": []
            }
        },
        "create_cfg_try": {
            "name": "create_cfg_try",
            "location": 76,
            "return": [
                "Tuple[(CFGNode, Any)]"
            ],
            "arguments": {
                "stmt": [],
                "loop_start": [],
                "loop_end": [],
                "fun_end": [],
                "res_graph": []
            }
        },
        "create_cfg_class": {
            "name": "create_cfg_class",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "res_graph": []
            }
        },
        "create_cfg_loop": {
            "name": "create_cfg_loop",
            "location": 186,
            "return": [
                "Tuple[(CFGNode, list)]"
            ],
            "arguments": {
                "loop": [],
                "loop_start": [],
                "loop_end": [],
                "fun_end": [],
                "res_graph": []
            }
        },
        "create_cfg_stmt": {
            "name": "create_cfg_stmt",
            "location": 223,
            "return": [
                "Tuple[(Optional[CFGNode], Any)]"
            ],
            "arguments": {
                "stmt": [],
                "loop_start": [],
                "loop_end": [],
                "fun_end": [],
                "res_graph": []
            }
        },
        "create_cfg": {
            "name": "create_cfg",
            "location": 337,
            "return": [
                "CFG"
            ],
            "arguments": {
                "tree": []
            }
        },
        "CFG.simplify": {
            "name": "simplify",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFGPartialEdge.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "head": [],
                "label": [],
                "graph": []
            }
        },
        "CFGPartialEdge.add_tail": {
            "name": "add_tail",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tail": [],
                "label": []
            }
        }
    },
    "PyDG-master/codegra_plag/ddg.py": {
        "noop": {
            "name": "noop",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "no_warn": {
            "name": "no_warn",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "flatten": {
            "name": "flatten",
            "location": 325,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterator": []
            }
        },
        "process_block": {
            "name": "process_block",
            "location": 336,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmts": [],
                "loop": [],
                "def_map": [],
                "res_graph": [],
                "options": []
            }
        },
        "create_ddg_try": {
            "name": "create_ddg_try",
            "location": 356,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "loop": [],
                "def_map": [],
                "res_graph": [],
                "options": []
            }
        },
        "create_ddg_class": {
            "name": "create_ddg_class",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "res_graph": [],
                "options": []
            }
        },
        "create_ddg_loop": {
            "name": "create_ddg_loop",
            "location": 425,
            "return": [
                "Any"
            ],
            "arguments": {
                "loop": [],
                "outer_loop": [],
                "def_map": [],
                "res_graph": [],
                "options": []
            }
        },
        "create_ddg_stmt": {
            "name": "create_ddg_stmt",
            "location": 471,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "loop": [],
                "def_map": [],
                "res_graph": [],
                "options": []
            }
        },
        "create_slice_ddg": {
            "name": "create_slice_ddg",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "def_map": [],
                "res_graph": [],
                "cur_stmt": [],
                "options": []
            }
        },
        "create_expr_ddg": {
            "name": "create_expr_ddg",
            "location": 622,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": [],
                "def_map": [],
                "res_graph": [],
                "cur_stmt": [],
                "options": [],
                "recurse_name": []
            }
        },
        "create_ddg": {
            "name": "create_ddg",
            "location": 780,
            "return": [
                "DDG"
            ],
            "arguments": {
                "tree": []
            }
        },
        "DefMap.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefMap.items": {
            "name": "items",
            "location": 85,
            "return": [
                "dict_items"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefMap.copy": {
            "name": "copy",
            "location": 88,
            "return": [
                "_TDefMap@@DefMap@@"
            ],
            "arguments": {
                "self": [
                    "_TDefMap@@DefMap@@"
                ]
            }
        },
        "DefMap.clear": {
            "name": "clear",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "val": [],
                "options": []
            }
        },
        "DefMap.set": {
            "name": "set",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "val": [],
                "options": [],
                "aliases": []
            }
        },
        "DefMap.get_aliases": {
            "name": "get_aliases",
            "location": 148,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "var": []
            }
        },
        "DefMap.mutate": {
            "name": "mutate",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "val": [],
                "options": []
            }
        },
        "DefMap.get": {
            "name": "get",
            "location": 183,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "recurse": [],
                "done": []
            }
        },
        "DefMap.merge": {
            "name": "merge",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "one": [],
                "other": []
            }
        },
        "DDG.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDG.use_var": {
            "name": "use_var",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": [],
                "var": [],
                "def_map": [],
                "recurse": []
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "Var.copy": {
            "name": "copy",
            "location": 247,
            "return": [
                "_TVar@@Var@@"
            ],
            "arguments": {
                "self": [
                    "_TVar@@Var@@"
                ]
            }
        },
        "Var.index": {
            "name": "index",
            "location": 252,
            "return": [
                "_TVar@@Var@@"
            ],
            "arguments": {
                "self": [
                    "_TVar@@Var@@"
                ]
            }
        },
        "Var.get_from_map": {
            "name": "get_from_map",
            "location": 255,
            "return": [
                "Union[(Set[Tuple[(Any, Any)]], _T1)]"
            ],
            "arguments": {
                "self": [],
                "mapping": [],
                "default": [
                    "_T1@@"
                ],
                "recurse": [],
                "done": []
            }
        },
        "Var.is_prefix": {
            "name": "is_prefix",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Var.add_attr": {
            "name": "add_attr",
            "location": 299,
            "return": [
                "_TVar@@Var@@"
            ],
            "arguments": {
                "self": [
                    "_TVar@@Var@@"
                ],
                "attr": []
            }
        },
        "Var.drop_attr": {
            "name": "drop_attr",
            "location": 304,
            "return": [
                "_TVar@@Var@@"
            ],
            "arguments": {
                "self": [
                    "_TVar@@Var@@"
                ],
                "index": []
            }
        },
        "Var.__str__": {
            "name": "__str__",
            "location": 310,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__hash__": {
            "name": "__hash__",
            "location": 316,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__eq__": {
            "name": "__eq__",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Loop.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_ddg_stmt.do_expr": {
            "name": "do_expr",
            "location": 478,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "create_expr_ddg.recurse": {
            "name": "recurse",
            "location": 630,
            "return": [],
            "arguments": {
                "e": [],
                "rec": []
            }
        },
        "DefMap.Value.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mutations": [],
                "submap": []
            }
        },
        "DefMap.Value.get_all_mutations": {
            "name": "get_all_mutations",
            "location": 61,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "recurse": []
            }
        },
        "DefMap.Value.merge_into": {
            "name": "merge_into",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DefMap.Value.copy": {
            "name": "copy",
            "location": 76,
            "return": [
                "DefMap.Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.get_from_map.create_res": {
            "name": "create_res",
            "location": 262,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "PyDG-master/codegra_plag/explode.py": {
        "gensym": {
            "name": "gensym",
            "location": 8,
            "return": [
                "Tuple[(_ast.Name, _ast.Name)]"
            ],
            "arguments": {}
        },
        "maybe_store": {
            "name": "maybe_store",
            "location": 19,
            "return": [
                "_ast.Name"
            ],
            "arguments": {
                "expr": [],
                "new_stmts": [],
                "force": []
            }
        },
        "is_simple": {
            "name": "is_simple",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "expr": []
            }
        },
        "explode_arguments": {
            "name": "explode_arguments",
            "location": 55,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "args": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "explode_list_comp": {
            "name": "explode_list_comp",
            "location": 64,
            "return": [
                "_ast.Name"
            ],
            "arguments": {
                "comp": [],
                "new_stmts": [],
                "init": [],
                "appender_attr": []
            }
        },
        "explode_slice": {
            "name": "explode_slice",
            "location": 110,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "slice": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "explode_dict": {
            "name": "explode_dict",
            "location": 129,
            "return": [
                "Union[(_ast.Name, _T0)]"
            ],
            "arguments": {
                "expr": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "explode_expr": {
            "name": "explode_expr",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": [],
                "new_stmts": []
            }
        },
        "explode_with": {
            "name": "explode_with",
            "location": 271,
            "return": [
                "Optional[List[Union[(_ast.FunctionDef, _ast.With)]]]"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "explode_target": {
            "name": "explode_target",
            "location": 282,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "expr": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "explode_delete": {
            "name": "explode_delete",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "explode_stmts": {
            "name": "explode_stmts",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "stmts": []
            }
        }
    },
    "PyDG-master/codegra_plag/graph.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "head": [],
                "tail": [],
                "label": [],
                "dotted": []
            }
        },
        "Edge.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_subgraph": {
            "name": "add_subgraph",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subgraph": []
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": []
            }
        },
        "Graph.to_networkx": {
            "name": "to_networkx",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.to_dot": {
            "name": "to_dot",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.remove_useless_nodes": {
            "name": "remove_useless_nodes",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyDG-master/codegra_plag/pdg.py": {
        "create_pdg": {
            "name": "create_pdg",
            "location": 12,
            "return": [
                "PDG"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "PyDG-master/codegra_plag/pprint.py": {
        "boolop_to_str": {
            "name": "boolop_to_str",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "boolop": []
            }
        },
        "unaryop_to_str": {
            "name": "unaryop_to_str",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "unaryop": []
            }
        },
        "binop_to_str": {
            "name": "binop_to_str",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "binop": []
            }
        },
        "cmpop_to_str": {
            "name": "cmpop_to_str",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "cmpop": []
            }
        },
        "arguments_to_str": {
            "name": "arguments_to_str",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "arguments": []
            }
        },
        "comprehension_to_str": {
            "name": "comprehension_to_str",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "comp": []
            }
        },
        "slice_to_str": {
            "name": "slice_to_str",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "slice": []
            }
        },
        "keyword_to_str": {
            "name": "keyword_to_str",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "keyword": []
            }
        },
        "expr_to_str": {
            "name": "expr_to_str",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": []
            }
        }
    },
    "PyDG-master/codegra_plag/simplify.py": {
        "gensym": {
            "name": "gensym",
            "location": 10,
            "return": [
                "Tuple[(_ast.Name, _ast.Name)]"
            ],
            "arguments": {}
        },
        "simplify_slice": {
            "name": "simplify_slice",
            "location": 21,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "slice": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "simplify_list_comp": {
            "name": "simplify_list_comp",
            "location": 65,
            "return": [
                "_ast.Name"
            ],
            "arguments": {
                "comp": [],
                "new_stmts": [],
                "init": [],
                "appender_attr": []
            }
        },
        "simplify_with": {
            "name": "simplify_with",
            "location": 207,
            "return": [
                "list"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "simplify_target": {
            "name": "simplify_target",
            "location": 218,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "expr": [
                    "_T0@@"
                ],
                "new_stmts": []
            }
        },
        "simplify_stmts": {
            "name": "simplify_stmts",
            "location": 235,
            "return": [
                "list"
            ],
            "arguments": {
                "stmts": []
            }
        },
        "NameRewriter.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameRewriter.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NameRewriter.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NameRewriter.visit_Name": {
            "name": "visit_Name",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SimplifyExpr.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_stmts": []
            }
        },
        "SimplifyExpr.reset": {
            "name": "reset",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplifyExpr.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 146,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        },
        "SimplifyExpr.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 149,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SimplifyExpr.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SimplifyExpr.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SimplifyExpr.visit_SetComp": {
            "name": "visit_SetComp",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SimplifyExpr.visit_IfExp": {
            "name": "visit_IfExp",
            "location": 190,
            "return": [
                "_ast.Name"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "PyDG-master/codegra_plag/str.py": {
        "boolop_to_str": {
            "name": "boolop_to_str",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "boolop": []
            }
        },
        "unaryop_to_str": {
            "name": "unaryop_to_str",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "unaryop": []
            }
        },
        "binop_to_str": {
            "name": "binop_to_str",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "binop": []
            }
        },
        "cmpop_to_str": {
            "name": "cmpop_to_str",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "cmpop": []
            }
        },
        "arguments_to_str": {
            "name": "arguments_to_str",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "arguments": []
            }
        },
        "comprehension_to_str": {
            "name": "comprehension_to_str",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "comp": []
            }
        },
        "slice_to_str": {
            "name": "slice_to_str",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "slice": []
            }
        },
        "keyword_to_str": {
            "name": "keyword_to_str",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "keyword": []
            }
        },
        "expr_to_str": {
            "name": "expr_to_str",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": []
            }
        }
    },
    "PyDG-master/codegra_plag/__init__.py": {},
    "PyDG-master/experiments/create_job.py": {
        "to_mcgregor": {
            "name": "to_mcgregor",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "graph": []
            }
        },
        "find_enter": {
            "name": "find_enter",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "graph": []
            }
        },
        "find_files": {
            "name": "find_files",
            "location": 45,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "directory": [],
                "pattern": []
            }
        },
        "get_pdgs": {
            "name": "get_pdgs",
            "location": 56,
            "return": [
                "List[Tuple[(Any, SubGraphs)]]"
            ],
            "arguments": {
                "d": [],
                "split": []
            }
        },
        "create_csv": {
            "name": "create_csv",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "output_name": [],
                "dirs": [],
                "use_mincut": []
            }
        },
        "main": {
            "name": "main",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SubGraphs.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "PyFFF-master/setup.py": {},
    "PyFFF-master/docs/conf.py": {},
    "PyFFF-master/fff/abstract_file.py": {
        "AbstractFile.size": {
            "name": "size",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.allocated_size": {
            "name": "allocated_size",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.data": {
            "name": "data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.mime": {
            "name": "mime",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.name": {
            "name": "name",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.fullpath": {
            "name": "fullpath",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.parent": {
            "name": "parent",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFile.read": {
            "name": "read",
            "location": 60,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ],
                "skip": [
                    "int"
                ],
                "bsize": [
                    "int"
                ]
            }
        }
    },
    "PyFFF-master/fff/data_units.py": {
        "DataUnits.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv": [
                    "fff.disk_view.DiskView"
                ],
                "unit_size": [
                    "int"
                ],
                "unit_count": [
                    "int"
                ]
            }
        },
        "DataUnits._convert": {
            "name": "_convert",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DataUnits.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index_or_slice": []
            }
        },
        "DataUnits.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/disk_view.py": {
        "DiskView.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [],
                "begin": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "sector_size": [
                    "Optional[int]"
                ],
                "cluster_size": [
                    "Optional[int]"
                ]
            }
        },
        "DiskView.size": {
            "name": "size",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiskView._seek": {
            "name": "_seek",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "DiskView.read": {
            "name": "read",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "offset": []
            }
        },
        "DiskView.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskView.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.read": {
            "name": "read",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        }
    },
    "PyFFF-master/fff/fat.py": {
        "try_get": {
            "name": "try_get",
            "location": 99,
            "return": [
                "Optional[Union[(FAT12, FAT16, FAT32)]]"
            ],
            "arguments": {
                "disk": [],
                "sector0": [],
                "parent": []
            }
        },
        "BootSector.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [],
                "sector0": []
            }
        },
        "BootSector.media_type_s": {
            "name": "media_type_s",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BootSector.tabulate": {
            "name": "tabulate",
            "location": 30,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootSector.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootSector.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FAT.get_version": {
            "name": "get_version",
            "location": 53,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "sector0": [
                    "FAT"
                ],
                "size": []
            }
        },
        "FAT.tabulate": {
            "name": "tabulate",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FAT.get_file": {
            "name": "get_file",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "FAT.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FAT.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FAT12.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [],
                "data": []
            }
        },
        "FAT16.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [],
                "data": []
            }
        },
        "FAT32.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk": [],
                "data": []
            }
        }
    },
    "PyFFF-master/fff/filesystem.py": {
        "get_filesystem": {
            "name": "get_filesystem",
            "location": 8,
            "return": [
                "Union[(fat.FAT12, fat.FAT16, fat.FAT32, ntfs.ntfs.NTFS)]"
            ],
            "arguments": {
                "disk_view": [],
                "parent": []
            }
        }
    },
    "PyFFF-master/fff/partition.py": {
        "CHS.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CHS.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "number": [
                    "int"
                ],
                "parent": []
            }
        },
        "Partition.is_bootable": {
            "name": "is_bootable",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.is_extended": {
            "name": "is_extended",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.is_unallocated": {
            "name": "is_unallocated",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.description": {
            "name": "description",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.hexdump": {
            "name": "hexdump",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.get_file": {
            "name": "get_file",
            "location": 101,
            "return": [
                "Optional[fff.ntfs.file.File]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Partition.filesystem": {
            "name": "filesystem",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.read": {
            "name": "read",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        },
        "Partition.entities": {
            "name": "entities",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Partition.tabulate": {
            "name": "tabulate",
            "location": 120,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partition.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/previewer.py": {
        "preview_audio": {
            "name": "preview_audio",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "fff.abstract_file.AbstractFile"
                ]
            }
        },
        "preview_video": {
            "name": "preview_video",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "fff.abstract_file.AbstractFile"
                ]
            }
        },
        "preview_image": {
            "name": "preview_image",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "fff.abstract_file.AbstractFile"
                ]
            }
        },
        "preview": {
            "name": "preview",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "fff.abstract_file.AbstractFile"
                ]
            }
        },
        "Video.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "url": [],
                "filename": [],
                "embed": [],
                "mimetype": [],
                "width": [],
                "height": []
            }
        },
        "Video._repr_html_": {
            "name": "_repr_html_",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.reload": {
            "name": "reload",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/unallocated_space.py": {
        "UnallocatedSpace.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_sector": [],
                "last_sector": [],
                "parent": []
            }
        },
        "UnallocatedSpace.sector_size": {
            "name": "sector_size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnallocatedSpace.get_file": {
            "name": "get_file",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UnallocatedSpace.tabulate": {
            "name": "tabulate",
            "location": 28,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnallocatedSpace.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/util.py": {
        "hd": {
            "name": "hd",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "md5sum": {
            "name": "md5sum",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Union[(bytes, fff.abstract_file.AbstractFile, Iterable[bytes])]"
                ]
            }
        }
    },
    "PyFFF-master/fff/__init__.py": {
        "MBR.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disk_view": [],
                "number": [
                    "int"
                ],
                "parent": []
            }
        },
        "MBR.description": {
            "name": "description",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MBR._max_number": {
            "name": "_max_number",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MBR.entities": {
            "name": "entities",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MBR.sector_size": {
            "name": "sector_size",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MBR.__getitem__": {
            "name": "__getitem__",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "MBR._init_unallocated": {
            "name": "_init_unallocated",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MBR.get_file": {
            "name": "get_file",
            "location": 137,
            "return": [
                "Optional[fff.abstract_file.AbstractFile]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "MBR.hexdump": {
            "name": "hexdump",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MBR.tabulate": {
            "name": "tabulate",
            "location": 150,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MBR.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MBR.__repr__": {
            "name": "__repr__",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskImage.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "DiskImage.close": {
            "name": "close",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/boot_sector.py": {
        "BootSector.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sector0": [
                    "bytes"
                ]
            }
        },
        "BootSector.cluster_size": {
            "name": "cluster_size",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BootSector._decode_size": {
            "name": "_decode_size",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "BootSector.tabulate": {
            "name": "tabulate",
            "location": 46,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootSector.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootSector.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mft_entry": [
                    "fff.ntfs.mft_entry.MFTEntry"
                ],
                "filesystem": []
            }
        },
        "File.attr": {
            "name": "attr",
            "location": 24,
            "return": [
                "Optional[fff.ntfs.mft_attr.MFTAttr]"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.attrs": {
            "name": "attrs",
            "location": 28,
            "return": [
                "builtins.list[fff.ntfs.mft_attr.MFTAttr]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "type_id": [
                    "Optional[str]"
                ]
            }
        },
        "File.inode": {
            "name": "inode",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.name": {
            "name": "name",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.size": {
            "name": "size",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.allocated_size": {
            "name": "allocated_size",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.is_file": {
            "name": "is_file",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.is_dir": {
            "name": "is_dir",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.is_allocated": {
            "name": "is_allocated",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.parent": {
            "name": "parent",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.fullpath": {
            "name": "fullpath",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.slack_space": {
            "name": "slack_space",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.mime": {
            "name": "mime",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.data": {
            "name": "data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.list": {
            "name": "list",
            "location": 102,
            "return": [
                "Iterable[File]"
            ],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool"
                ],
                "pattern": [
                    "str"
                ],
                "regex": [
                    "str"
                ],
                "_reobj": [
                    "Pattern"
                ]
            }
        },
        "File.read": {
            "name": "read",
            "location": 135,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ],
                "skip": [
                    "int"
                ],
                "bsize": [
                    "int"
                ]
            }
        },
        "File.contains": {
            "name": "contains",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "int"
                ]
            }
        },
        "File.tabulate": {
            "name": "tabulate",
            "location": 161,
            "return": [
                "builtins.list[Sequence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.preview": {
            "name": "preview",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__str__": {
            "name": "__str__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__repr__": {
            "name": "__repr__",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/file_ref.py": {
        "FileRef.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "FileRef.tabulate": {
            "name": "tabulate",
            "location": 10,
            "return": [
                "List[List[Union[(int, str)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRef.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRef.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/mft.py": {
        "MFT.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filesystem": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "MFT.data": {
            "name": "data",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFT.find": {
            "name": "find",
            "location": 25,
            "return": [
                "Optional[fff.ntfs.mft_entry.MFTEntry]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "inode": [
                    "Optional[int]"
                ]
            }
        }
    },
    "PyFFF-master/fff/ntfs/mft_attr.py": {
        "ntfs_time": {
            "name": "ntfs_time",
            "location": 41,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "ns": [
                    "int"
                ]
            }
        },
        "MFTAttribute": {
            "name": "MFTAttribute",
            "location": 156,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "type_id": [],
                "name": []
            }
        },
        "MFTAttr.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "AttrHeader"
                ]
            }
        },
        "MFTAttr.name": {
            "name": "name",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTAttr.is_resident": {
            "name": "is_resident",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTAttr.non_resident": {
            "name": "non_resident",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTAttr.tabulate": {
            "name": "tabulate",
            "location": 62,
            "return": [
                "List[Sequence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTAttr.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTAttr.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrHeader.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "AttrHeader.create": {
            "name": "create",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "fff.ntfs.mft_entry.MFTEntry"
                ],
                "rdata": [
                    "Optional[bytes]"
                ],
                "nrdata": [
                    "Optional[bytes]"
                ]
            }
        },
        "AttrHeader.compressed": {
            "name": "compressed",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttrHeader.type_s": {
            "name": "type_s",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttrHeader.tabulate": {
            "name": "tabulate",
            "location": 121,
            "return": [
                "List[Sequence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrHeader.__str__": {
            "name": "__str__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrHeader.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTAttribute.decorator": {
            "name": "decorator",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "StandardInformation.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "StandardInformation.perm_s": {
            "name": "perm_s",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StandardInformation.tabulate": {
            "name": "tabulate",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileNameHeader.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "FileNameHeader.flags_s": {
            "name": "flags_s",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileNameHeader.namespace_s": {
            "name": "namespace_s",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileNameHeader.tabulate": {
            "name": "tabulate",
            "location": 285,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileName.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "FileName.flags_s": {
            "name": "flags_s",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileName.namespace_s": {
            "name": "namespace_s",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileName.tabulate": {
            "name": "tabulate",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "Data.vcn": {
            "name": "vcn",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.tabulate": {
            "name": "tabulate",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexNodeHeader.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "IndexNodeHeader.tabulate": {
            "name": "tabulate",
            "location": 380,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexNodeHeader.__str__": {
            "name": "__str__",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexNodeHeader.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "IndexEntry.size": {
            "name": "size",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.is_last": {
            "name": "is_last",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.child_exists": {
            "name": "child_exists",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.flags_s": {
            "name": "flags_s",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.tabulate": {
            "name": "tabulate",
            "location": 426,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexEntryFileName.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "IndexEntryFileName.tabulate": {
            "name": "tabulate",
            "location": 444,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexRoot.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "IndexRoot.tabulate": {
            "name": "tabulate",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexRecord.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "IndexRecord.tabulate": {
            "name": "tabulate",
            "location": 500,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexRecord.__str__": {
            "name": "__str__",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexRecord.__repr__": {
            "name": "__repr__",
            "location": 511,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexAllocation.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "IndexAllocation.tabulate": {
            "name": "tabulate",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitmap.__init__": {
            "name": "__init__",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "Bitmap.bitmap": {
            "name": "bitmap",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeEntry.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "AttributeEntry.tabulate": {
            "name": "tabulate",
            "location": 572,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeEntry.__str__": {
            "name": "__str__",
            "location": 580,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeEntry.__repr__": {
            "name": "__repr__",
            "location": 583,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeList.__init__": {
            "name": "__init__",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "header": [],
                "rdata": [],
                "nrdata": []
            }
        },
        "MFTAttribute.decorator.wrapper": {
            "name": "wrapper",
            "location": 161,
            "return": [],
            "arguments": {}
        }
    },
    "PyFFF-master/fff/ntfs/mft_entry.py": {
        "MFTEntry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "dv": [
                    "fff.disk_view.DiskView"
                ],
                "inode": [
                    "int"
                ],
                "mft": [
                    "Optional[fff.ntfs.mft.MFT]"
                ]
            }
        },
        "MFTEntry.attrs": {
            "name": "attrs",
            "location": 74,
            "return": [
                "List[fff.ntfs.mft_attr.MFTAttr]"
            ],
            "arguments": {
                "self": [],
                "type_id": [
                    "Optional[Union[(int, str)]]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "MFTEntry.attr": {
            "name": "attr",
            "location": 86,
            "return": [
                "Optional[fff.ntfs.mft_attr.MFTAttr]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.is_file": {
            "name": "is_file",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.is_dir": {
            "name": "is_dir",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.in_use": {
            "name": "in_use",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.flags_s": {
            "name": "flags_s",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.tabulate": {
            "name": "tabulate",
            "location": 112,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFTEntry.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/ntfs.py": {
        "NTFS.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv": [
                    "fff.disk_view.DiskView"
                ],
                "sector0": [
                    "bytes"
                ],
                "parent": []
            }
        },
        "NTFS.files": {
            "name": "files",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NTFS.get_file": {
            "name": "get_file",
            "location": 42,
            "return": [
                "Optional[fff.ntfs.file.File]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "NTFS.find": {
            "name": "find",
            "location": 49,
            "return": [
                "Optional[fff.ntfs.file.File]"
            ],
            "arguments": {
                "self": [],
                "inode": [
                    "Optional[int]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "NTFS.sector_size": {
            "name": "sector_size",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NTFS.cluster_size": {
            "name": "cluster_size",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NTFS.read": {
            "name": "read",
            "location": 61,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        }
    },
    "PyFFF-master/fff/ntfs/vcn.py": {
        "parse_data_runs": {
            "name": "parse_data_runs",
            "location": 45,
            "return": [
                "Tuple[(int, List[DataRun])]"
            ],
            "arguments": {
                "data": [],
                "offset": []
            }
        },
        "DataRun.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "offset": [
                    "Optional[int]"
                ]
            }
        },
        "DataRun.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataRun.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCN.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "VCN._expand": {
            "name": "_expand",
            "location": 29,
            "return": [
                "List[Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "dr": [
                    "DataRun"
                ]
            }
        },
        "VCN.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index_or_slice": []
            }
        },
        "VCN.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCN.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/ntfs/__init__.py": {
        "try_get": {
            "name": "try_get",
            "location": 12,
            "return": [
                "Optional[fff.ntfs.ntfs.NTFS]"
            ],
            "arguments": {
                "disk": [
                    "fff.disk_view.DiskView"
                ],
                "sector0": [
                    "bytes"
                ],
                "parent": []
            }
        }
    },
    "PyFFF-master/fff/tests/ntfs_tests.py": {
        "NTFSTests.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "NTFSTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "NTFSTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_mft_entry_attributes": {
            "name": "test_mft_entry_attributes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_tabulate_StandardInformation": {
            "name": "test_tabulate_StandardInformation",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_MFT_FileName": {
            "name": "test_MFT_FileName",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_tabulate_BootSector": {
            "name": "test_tabulate_BootSector",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_MFT_data_runs": {
            "name": "test_MFT_data_runs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_read_mft_first_5_bytes": {
            "name": "test_read_mft_first_5_bytes",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_slack_space_inode_132": {
            "name": "test_slack_space_inode_132",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_get_file_size_inode_200": {
            "name": "test_get_file_size_inode_200",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_file_attr_inode_200": {
            "name": "test_file_attr_inode_200",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_get_root_directory_tabulate": {
            "name": "test_get_root_directory_tabulate",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_root_dir_IndexRoot_child_vcn": {
            "name": "test_root_dir_IndexRoot_child_vcn",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NTFSTests.test_dir_inode_68_attribute_list": {
            "name": "test_dir_inode_68_attribute_list",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/tests/typecheck_tests.py": {
        "TypeCheckTest.test_run_mypy_module": {
            "name": "test_run_mypy_module",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCheckTest.test_run_mypy_tests": {
            "name": "test_run_mypy_tests",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCheckTest.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/tests/vcn_tests.py": {
        "VCNTests.test_parse_data_runs_empty": {
            "name": "test_parse_data_runs_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_vcn_empty": {
            "name": "test_vcn_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_parse_data_runs_non_fragmented": {
            "name": "test_parse_data_runs_non_fragmented",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_vcn_data_runs_non_fragmented": {
            "name": "test_vcn_data_runs_non_fragmented",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_parse_data_runs_fragmented": {
            "name": "test_parse_data_runs_fragmented",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_parse_data_runs_sparse_unfragmented": {
            "name": "test_parse_data_runs_sparse_unfragmented",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCNTests.test_parse_data_runs_scrambled": {
            "name": "test_parse_data_runs_scrambled",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyFFF-master/fff/tests/__init__.py": {
        "ZipImageTests.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ZipImageTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ZipImageTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_load_zip": {
            "name": "test_load_zip",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_volume_tabulate": {
            "name": "test_volume_tabulate",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_FAT16_filesystem": {
            "name": "test_FAT16_filesystem",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_volume_access_sector_0": {
            "name": "test_volume_access_sector_0",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_NTFS_filesystem": {
            "name": "test_NTFS_filesystem",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_NTFS_access_sector_0": {
            "name": "test_NTFS_access_sector_0",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipImageTests.test_NTFS_access_cluster_0": {
            "name": "test_NTFS_access_cluster_0",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
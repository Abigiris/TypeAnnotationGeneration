{
    "RecordFlux-main/setup.py": {},
    "RecordFlux-main/bin/__init__.py": {},
    "RecordFlux-main/examples/apps/__init__.py": {},
    "RecordFlux-main/examples/apps/ping/ping.py": {
        "icmp_checksum": {
            "name": "icmp_checksum",
            "location": 15,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "ping": {
            "name": "ping",
            "location": 42,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "create_request": {
            "name": "create_request",
            "location": 99,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "seq": []
            }
        },
        "parse_reply": {
            "name": "parse_reply",
            "location": 131,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "RecordFlux-main/examples/apps/ping/__init__.py": {},
    "RecordFlux-main/ide/gnatstudio/recordflux.py": {
        "__on_gps_started": {
            "name": "__on_gps_started",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "to_importance": {
            "name": "to_importance",
            "location": 235,
            "return": [
                "Any"
            ],
            "arguments": {
                "severity": []
            }
        },
        "parse_output": {
            "name": "parse_output",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "output": []
            }
        },
        "get_source_files": {
            "name": "get_source_files",
            "location": 284,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "files": [],
                "mode": [],
                "skip_verification": [],
                "options": []
            }
        },
        "check_all": {
            "name": "check_all",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "filenames": []
            }
        },
        "check": {
            "name": "check",
            "location": 317,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        },
        "output_dir": {
            "name": "output_dir",
            "location": 321,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "generate_all": {
            "name": "generate_all",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "filenames": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 340,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        },
        "graph": {
            "name": "graph",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [],
                "unverified": []
            }
        },
        "get_message_name": {
            "name": "get_message_name",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "locations": [],
                "name": [],
                "line": [],
                "column": []
            }
        },
        "display_message_graph": {
            "name": "display_message_graph",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "RecordFlux-main/ide/gnatstudio/__init__.py": {},
    "RecordFlux-main/rflx/ada.py": {
        "If": {
            "name": "If",
            "location": 676,
            "return": [
                "Any"
            ],
            "arguments": {
                "condition_expressions": [],
                "else_expression": []
            }
        },
        "Case": {
            "name": "Case",
            "location": 723,
            "return": [
                "Any"
            ],
            "arguments": {
                "control_expression": [],
                "case_expressions": []
            }
        },
        "generic_formal_part": {
            "name": "generic_formal_part",
            "location": 2195,
            "return": [
                "str"
            ],
            "arguments": {
                "parameters": []
            }
        },
        "declarative_items": {
            "name": "declarative_items",
            "location": 2203,
            "return": [
                "str"
            ],
            "arguments": {
                "declarations": [],
                "private": []
            }
        },
        "aspect_specification": {
            "name": "aspect_specification",
            "location": 2211,
            "return": [
                "str"
            ],
            "arguments": {
                "aspects": []
            }
        },
        "context_clause": {
            "name": "context_clause",
            "location": 2217,
            "return": [
                "str"
            ],
            "arguments": {
                "context": []
            }
        },
        "ID._separator": {
            "name": "_separator",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.__add__": {
            "name": "__add__",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__radd__": {
            "name": "__radd__",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__mul__": {
            "name": "__mul__",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__rmul__": {
            "name": "__rmul__",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__neg__": {
            "name": "__neg__",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr._update_str": {
            "name": "_update_str",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.precedence": {
            "name": "precedence",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expr.parenthesized": {
            "name": "parenthesized",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Not._update_str": {
            "name": "_update_str",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.precedence": {
            "name": "precedence",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "BinExpr._update_str": {
            "name": "_update_str",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.precedence": {
            "name": "precedence",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.symbol": {
            "name": "symbol",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr._update_str": {
            "name": "_update_str",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.precedence": {
            "name": "precedence",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.symbol": {
            "name": "symbol",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr._update_str": {
            "name": "_update_str",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr.symbol": {
            "name": "symbol",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "And.precedence": {
            "name": "precedence",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "And.symbol": {
            "name": "symbol",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AndThen.symbol": {
            "name": "symbol",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Or.precedence": {
            "name": "precedence",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Or.symbol": {
            "name": "symbol",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrElse.symbol": {
            "name": "symbol",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "base": []
            }
        },
        "Number.__neg__": {
            "name": "__neg__",
            "location": 203,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number._update_str": {
            "name": "_update_str",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.precedence": {
            "name": "precedence",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Add._update_str": {
            "name": "_update_str",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.precedence": {
            "name": "precedence",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Add.symbol": {
            "name": "symbol",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Concatenation.precedence": {
            "name": "precedence",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Concatenation.symbol": {
            "name": "symbol",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mul.precedence": {
            "name": "precedence",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mul.symbol": {
            "name": "symbol",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sub.precedence": {
            "name": "precedence",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sub.symbol": {
            "name": "symbol",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Div.precedence": {
            "name": "precedence",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Div.symbol": {
            "name": "symbol",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pow.precedence": {
            "name": "precedence",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pow.symbol": {
            "name": "symbol",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.precedence": {
            "name": "precedence",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.symbol": {
            "name": "symbol",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rem.precedence": {
            "name": "precedence",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rem.symbol": {
            "name": "symbol",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negative": []
            }
        },
        "Name._update_str": {
            "name": "_update_str",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name._representation": {
            "name": "_representation",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.precedence": {
            "name": "precedence",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "negative": []
            }
        },
        "Variable.__neg__": {
            "name": "__neg__",
            "location": 340,
            "return": [
                "_TVariable@@Variable@@"
            ],
            "arguments": {
                "self": [
                    "_TVariable@@Variable@@"
                ]
            }
        },
        "Variable._representation": {
            "name": "_representation",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.name": {
            "name": "name",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Attribute.__neg__": {
            "name": "__neg__",
            "location": 367,
            "return": [
                "_TAttribute@@Attribute@@"
            ],
            "arguments": {
                "self": [
                    "_TAttribute@@Attribute@@"
                ]
            }
        },
        "Attribute._representation": {
            "name": "_representation",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoopEntry._representation": {
            "name": "_representation",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnrestrictedAccess._representation": {
            "name": "_representation",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeExpr.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "expression": [],
                "negative": []
            }
        },
        "AttributeExpr._representation": {
            "name": "_representation",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinAttributeExpr.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "left": [],
                "right": [],
                "negative": []
            }
        },
        "BinAttributeExpr._representation": {
            "name": "_representation",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedAttributeExpr.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "NamedAttributeExpr._representation": {
            "name": "_representation",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed.__init__": {
            "name": "__init__",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Indexed.__neg__": {
            "name": "__neg__",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed._representation": {
            "name": "_representation",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Selected.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "selector_identifier": [],
                "negative": []
            }
        },
        "Selected.__neg__": {
            "name": "__neg__",
            "location": 526,
            "return": [
                "_TSelected@@Selected@@"
            ],
            "arguments": {
                "self": [
                    "_TSelected@@Selected@@"
                ]
            }
        },
        "Selected._representation": {
            "name": "_representation",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "arguments": [],
                "named_arguments": [],
                "negative": []
            }
        },
        "Call.__neg__": {
            "name": "__neg__",
            "location": 547,
            "return": [
                "_TCall@@Call@@"
            ],
            "arguments": {
                "self": [
                    "_TCall@@Call@@"
                ]
            }
        },
        "Call._representation": {
            "name": "_representation",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "first": [],
                "last": []
            }
        },
        "Slice._representation": {
            "name": "_representation",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate._update_str": {
            "name": "_update_str",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.precedence": {
            "name": "precedence",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "String._update_str": {
            "name": "_update_str",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.precedence": {
            "name": "precedence",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate._update_str": {
            "name": "_update_str",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.precedence": {
            "name": "precedence",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relation.precedence": {
            "name": "precedence",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Less.symbol": {
            "name": "symbol",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.symbol": {
            "name": "symbol",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Equal.symbol": {
            "name": "symbol",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.symbol": {
            "name": "symbol",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Greater.symbol": {
            "name": "symbol",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.symbol": {
            "name": "symbol",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "In.symbol": {
            "name": "symbol",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotIn.symbol": {
            "name": "symbol",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.__init__": {
            "name": "__init__",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition_expressions": [],
                "else_expression": []
            }
        },
        "IfExpr._update_str": {
            "name": "_update_str",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.precedence": {
            "name": "precedence",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseExpr.__init__": {
            "name": "__init__",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_expression": [],
                "case_expressions": []
            }
        },
        "CaseExpr._update_str": {
            "name": "_update_str",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseExpr.precedence": {
            "name": "precedence",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpr.__init__": {
            "name": "__init__",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter_identifier": [],
                "iterable": [],
                "predicate": []
            }
        },
        "QuantifiedExpr._update_str": {
            "name": "_update_str",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpr.precedence": {
            "name": "precedence",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpr.quantifier": {
            "name": "quantifier",
            "location": 775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpr.keyword": {
            "name": "keyword",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllOf.quantifier": {
            "name": "quantifier",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllOf.keyword": {
            "name": "keyword",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllIn.quantifier": {
            "name": "quantifier",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllIn.keyword": {
            "name": "keyword",
            "location": 800,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForSomeIn.quantifier": {
            "name": "quantifier",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForSomeIn.keyword": {
            "name": "keyword",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.__init__": {
            "name": "__init__",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "type_identifier": []
            }
        },
        "ValueRange._update_str": {
            "name": "_update_str",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.precedence": {
            "name": "precedence",
            "location": 828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conversion.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "argument": []
            }
        },
        "Conversion._update_str": {
            "name": "_update_str",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.precedence": {
            "name": "precedence",
            "location": 842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QualifiedExpr.__init__": {
            "name": "__init__",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_identifier": [],
                "expression": []
            }
        },
        "QualifiedExpr._update_str": {
            "name": "_update_str",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedExpr.precedence": {
            "name": "precedence",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Raise.__init__": {
            "name": "__init__",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "string": []
            }
        },
        "Raise._update_str": {
            "name": "_update_str",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Raise.precedence": {
            "name": "precedence",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceList.__init__": {
            "name": "__init__",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceList._update_str": {
            "name": "_update_str",
            "location": 885,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceList.precedence": {
            "name": "precedence",
            "location": 889,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.__str__": {
            "name": "__str__",
            "location": 895,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextItem.__init__": {
            "name": "__init__",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "ContextItem.__hash__": {
            "name": "__hash__",
            "location": 903,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextItem.__str__": {
            "name": "__str__",
            "location": 907,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithClause.__str__": {
            "name": "__str__",
            "location": 912,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsePackageClause.__str__": {
            "name": "__str__",
            "location": 917,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UseTypeClause.__str__": {
            "name": "__str__",
            "location": 922,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aspect.__str__": {
            "name": "__str__",
            "location": 927,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aspect.mark": {
            "name": "mark",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aspect.definition": {
            "name": "definition",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Precondition.__init__": {
            "name": "__init__",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Precondition.mark": {
            "name": "mark",
            "location": 948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Precondition.definition": {
            "name": "definition",
            "location": 952,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Postcondition.__init__": {
            "name": "__init__",
            "location": 957,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Postcondition.mark": {
            "name": "mark",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Postcondition.definition": {
            "name": "definition",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassPrecondition.__init__": {
            "name": "__init__",
            "location": 970,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "ClassPrecondition.mark": {
            "name": "mark",
            "location": 974,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassPrecondition.definition": {
            "name": "definition",
            "location": 978,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassPostcondition.__init__": {
            "name": "__init__",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "ClassPostcondition.mark": {
            "name": "mark",
            "location": 987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassPostcondition.definition": {
            "name": "definition",
            "location": 991,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractCases.__init__": {
            "name": "__init__",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractCases.mark": {
            "name": "mark",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractCases.definition": {
            "name": "definition",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Depends.__init__": {
            "name": "__init__",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependencies": []
            }
        },
        "Depends.mark": {
            "name": "mark",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Depends.definition": {
            "name": "definition",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicPredicate.__init__": {
            "name": "__init__",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "DynamicPredicate.mark": {
            "name": "mark",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicPredicate.definition": {
            "name": "definition",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SizeAspect.__init__": {
            "name": "__init__",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "SizeAspect.mark": {
            "name": "mark",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SizeAspect.definition": {
            "name": "definition",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InitialCondition.__init__": {
            "name": "__init__",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "InitialCondition.mark": {
            "name": "mark",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InitialCondition.definition": {
            "name": "definition",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultInitialCondition.__init__": {
            "name": "__init__",
            "location": 1072,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "DefaultInitialCondition.mark": {
            "name": "mark",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultInitialCondition.definition": {
            "name": "definition",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkMode.__init__": {
            "name": "__init__",
            "location": 1085,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "off": []
            }
        },
        "SparkMode.mark": {
            "name": "mark",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkMode.definition": {
            "name": "definition",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ghost.mark": {
            "name": "mark",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ghost.definition": {
            "name": "definition",
            "location": 1103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Import.mark": {
            "name": "mark",
            "location": 1109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Import.definition": {
            "name": "definition",
            "location": 1113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAlways.mark": {
            "name": "mark",
            "location": 1119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineAlways.definition": {
            "name": "definition",
            "location": 1123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotate.__init__": {
            "name": "__init__",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotate.mark": {
            "name": "mark",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotate.definition": {
            "name": "definition",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElaborateBody.mark": {
            "name": "mark",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElaborateBody.definition": {
            "name": "definition",
            "location": 1148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormalDeclaration.__str__": {
            "name": "__str__",
            "location": 1154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormalSubprogramDeclaration.__init__": {
            "name": "__init__",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": [],
                "default": []
            }
        },
        "FormalSubprogramDeclaration.__hash__": {
            "name": "__hash__",
            "location": 1163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormalSubprogramDeclaration.__str__": {
            "name": "__str__",
            "location": 1166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormalPackageDeclaration.__init__": {
            "name": "__init__",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "generic_identifier": [],
                "associations": []
            }
        },
        "FormalPackageDeclaration.__str__": {
            "name": "__str__",
            "location": 1179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageDeclaration.__init__": {
            "name": "__init__",
            "location": 1185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "declarations": [],
                "private_declarations": [],
                "formal_parameters": [],
                "aspects": []
            }
        },
        "PackageDeclaration.__str__": {
            "name": "__str__",
            "location": 1199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageBody.__init__": {
            "name": "__init__",
            "location": 1210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "declarations": [],
                "statements": [],
                "aspects": []
            }
        },
        "PackageBody.__str__": {
            "name": "__str__",
            "location": 1222,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericPackageInstantiation.__init__": {
            "name": "__init__",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "generic_package": [],
                "associations": []
            }
        },
        "GenericPackageInstantiation.__hash__": {
            "name": "__hash__",
            "location": 1246,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericPackageInstantiation.__str__": {
            "name": "__str__",
            "location": 1249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageRenamingDeclaration.__init__": {
            "name": "__init__",
            "location": 1257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "package_identifier": []
            }
        },
        "PackageRenamingDeclaration.__str__": {
            "name": "__str__",
            "location": 1261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDeclaration.__init__": {
            "name": "__init__",
            "location": 1266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifiers": [],
                "type_identifier": [],
                "expression": [],
                "constant": [],
                "aliased": [],
                "aspects": []
            }
        },
        "ObjectDeclaration.__hash__": {
            "name": "__hash__",
            "location": 1284,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDeclaration.__str__": {
            "name": "__str__",
            "location": 1287,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discriminant.__init__": {
            "name": "__init__",
            "location": 1299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifiers": [],
                "type_identifier": [],
                "default": []
            }
        },
        "Discriminant.__str__": {
            "name": "__str__",
            "location": 1306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.__init__": {
            "name": "__init__",
            "location": 1313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "discriminants": [],
                "aspects": []
            }
        },
        "TypeDeclaration.__hash__": {
            "name": "__hash__",
            "location": 1323,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.__str__": {
            "name": "__str__",
            "location": 1326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.discriminant_part": {
            "name": "discriminant_part",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.type_definition": {
            "name": "type_definition",
            "location": 1338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.extra_declaration": {
            "name": "extra_declaration",
            "location": 1342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularType.__init__": {
            "name": "__init__",
            "location": 1347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "modulus": [],
                "aspects": []
            }
        },
        "ModularType.type_definition": {
            "name": "type_definition",
            "location": 1352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeType.__init__": {
            "name": "__init__",
            "location": 1357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "first": [],
                "last": [],
                "aspects": []
            }
        },
        "RangeType.type_definition": {
            "name": "type_definition",
            "location": 1369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumerationType.__init__": {
            "name": "__init__",
            "location": 1374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "literals": [],
                "size": []
            }
        },
        "EnumerationType.type_definition": {
            "name": "type_definition",
            "location": 1393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumerationType.extra_declaration": {
            "name": "extra_declaration",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subtype.__init__": {
            "name": "__init__",
            "location": 1410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "base_identifier": [],
                "aspects": []
            }
        },
        "Subtype.__str__": {
            "name": "__str__",
            "location": 1416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtype.type_definition": {
            "name": "type_definition",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSubtype.__init__": {
            "name": "__init__",
            "location": 1425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "base_identifier": [],
                "first": [],
                "last": []
            }
        },
        "RangeSubtype.type_definition": {
            "name": "type_definition",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DerivedType.__init__": {
            "name": "__init__",
            "location": 1436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "record_extension": []
            }
        },
        "DerivedType.type_definition": {
            "name": "type_definition",
            "location": 1447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrivateType.type_definition": {
            "name": "type_definition",
            "location": 1466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscreteType.type_definition": {
            "name": "type_definition",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayType.__init__": {
            "name": "__init__",
            "location": 1477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "index_type": [],
                "component_identifier": []
            }
        },
        "ArrayType.type_definition": {
            "name": "type_definition",
            "location": 1483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnconstrainedArrayType.type_definition": {
            "name": "type_definition",
            "location": 1489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccessType.__init__": {
            "name": "__init__",
            "location": 1494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "object_identifier": []
            }
        },
        "AccessType.type_definition": {
            "name": "type_definition",
            "location": 1499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 1504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "default": [],
                "aliased": []
            }
        },
        "Component.__str__": {
            "name": "__str__",
            "location": 1518,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullComponent.__init__": {
            "name": "__init__",
            "location": 1525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullComponent.__str__": {
            "name": "__str__",
            "location": 1528,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__init__": {
            "name": "__init__",
            "location": 1533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "discrete_choices": [],
                "components": []
            }
        },
        "Variant.__str__": {
            "name": "__str__",
            "location": 1537,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariantPart.__init__": {
            "name": "__init__",
            "location": 1544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "discriminant_identifier": [],
                "variants": []
            }
        },
        "VariantPart.__str__": {
            "name": "__str__",
            "location": 1548,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordType.__init__": {
            "name": "__init__",
            "location": 1554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "components": [],
                "discriminants": [],
                "variant_part": [],
                "aspects": [],
                "abstract": [],
                "tagged": [],
                "limited": []
            }
        },
        "RecordType.type_definition": {
            "name": "type_definition",
            "location": 1575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statement.__str__": {
            "name": "__str__",
            "location": 1594,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullStatement.__init__": {
            "name": "__init__",
            "location": 1599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullStatement.__str__": {
            "name": "__str__",
            "location": 1602,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.__init__": {
            "name": "__init__",
            "location": 1607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "expression": []
            }
        },
        "Assignment.__str__": {
            "name": "__str__",
            "location": 1611,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallStatement.__init__": {
            "name": "__init__",
            "location": 1616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "arguments": [],
                "named_arguments": []
            }
        },
        "CallStatement.__str__": {
            "name": "__str__",
            "location": 1626,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PragmaStatement.__init__": {
            "name": "__init__",
            "location": 1638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "parameters": []
            }
        },
        "PragmaStatement.__str__": {
            "name": "__str__",
            "location": 1642,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.__init__": {
            "name": "__init__",
            "location": 1651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "ReturnStatement.__str__": {
            "name": "__str__",
            "location": 1654,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitStatement.__init__": {
            "name": "__init__",
            "location": 1663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "ExitStatement.__str__": {
            "name": "__str__",
            "location": 1666,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GotoStatement.__init__": {
            "name": "__init__",
            "location": 1675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "GotoStatement.__str__": {
            "name": "__str__",
            "location": 1678,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 1683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Label.__str__": {
            "name": "__str__",
            "location": 1686,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentStatement.__init__": {
            "name": "__init__",
            "location": 1691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "CommentStatement.__str__": {
            "name": "__str__",
            "location": 1695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfStatement.__init__": {
            "name": "__init__",
            "location": 1700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition_statements": [],
                "else_statements": []
            }
        },
        "IfStatement.__str__": {
            "name": "__str__",
            "location": 1709,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseStatement.__init__": {
            "name": "__init__",
            "location": 1739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_expression": [],
                "case_statements": [],
                "case_grouping": []
            }
        },
        "CaseStatement.__str__": {
            "name": "__str__",
            "location": 1749,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "While.__init__": {
            "name": "__init__",
            "location": 1772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [],
                "statements": []
            }
        },
        "While.__str__": {
            "name": "__str__",
            "location": 1777,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForLoop.__init__": {
            "name": "__init__",
            "location": 1786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "iterator": [],
                "statements": [],
                "reverse": []
            }
        },
        "ForLoop.__str__": {
            "name": "__str__",
            "location": 1799,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForLoop.iterator_spec": {
            "name": "iterator_spec",
            "location": 1809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForOf.iterator_spec": {
            "name": "iterator_spec",
            "location": 1815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForIn.iterator_spec": {
            "name": "iterator_spec",
            "location": 1821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseStatement.__init__": {
            "name": "__init__",
            "location": 1826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "string": []
            }
        },
        "RaiseStatement.__str__": {
            "name": "__str__",
            "location": 1831,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declare.__init__": {
            "name": "__init__",
            "location": 1837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "declarations": [],
                "statements": []
            }
        },
        "Declare.__str__": {
            "name": "__str__",
            "location": 1843,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 1850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifiers": [],
                "type_identifier": [],
                "default": []
            }
        },
        "Parameter.__str__": {
            "name": "__str__",
            "location": 1857,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.mode": {
            "name": "mode",
            "location": 1863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutParameter.mode": {
            "name": "mode",
            "location": 1869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InOutParameter.mode": {
            "name": "mode",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccessParameter.__init__": {
            "name": "__init__",
            "location": 1880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifiers": [],
                "type_identifier": [],
                "default": [],
                "constant": []
            }
        },
        "AccessParameter.mode": {
            "name": "mode",
            "location": 1891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubprogramSpecification.__init__": {
            "name": "__init__",
            "location": 1896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "parameters": []
            }
        },
        "SubprogramSpecification._parameters": {
            "name": "_parameters",
            "location": 1900,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramSpecification.__hash__": {
            "name": "__hash__",
            "location": 1903,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramSpecification.__str__": {
            "name": "__str__",
            "location": 1907,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcedureSpecification.__str__": {
            "name": "__str__",
            "location": 1912,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionSpecification.__init__": {
            "name": "__init__",
            "location": 1917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "return_type": [],
                "parameters": []
            }
        },
        "FunctionSpecification.__str__": {
            "name": "__str__",
            "location": 1923,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subprogram.__init__": {
            "name": "__init__",
            "location": 1928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": []
            }
        },
        "Subprogram.__hash__": {
            "name": "__hash__",
            "location": 1931,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subprogram.__str__": {
            "name": "__str__",
            "location": 1935,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramDeclaration.__init__": {
            "name": "__init__",
            "location": 1940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": [],
                "aspects": [],
                "formal_parameters": [],
                "abstract": []
            }
        },
        "SubprogramDeclaration.__str__": {
            "name": "__str__",
            "location": 1952,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramBody.__init__": {
            "name": "__init__",
            "location": 1961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": [],
                "declarations": [],
                "statements": [],
                "aspects": []
            }
        },
        "SubprogramBody._declarations": {
            "name": "_declarations",
            "location": 1973,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramBody._statements": {
            "name": "_statements",
            "location": 1976,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramBody.__str__": {
            "name": "__str__",
            "location": 1979,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionFunctionDeclaration.__init__": {
            "name": "__init__",
            "location": 1991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": [],
                "expression": [],
                "aspects": []
            }
        },
        "ExpressionFunctionDeclaration.__str__": {
            "name": "__str__",
            "location": 2001,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericProcedureInstantiation.__init__": {
            "name": "__init__",
            "location": 2007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "specification": [],
                "associations": []
            }
        },
        "GenericProcedureInstantiation.__str__": {
            "name": "__str__",
            "location": 2018,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericFunctionInstantiation.__init__": {
            "name": "__init__",
            "location": 2026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "specification": [],
                "associations": []
            }
        },
        "GenericFunctionInstantiation.__str__": {
            "name": "__str__",
            "location": 2037,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprogramRenamingDeclaration.__init__": {
            "name": "__init__",
            "location": 2045,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specification": [],
                "subprogram_identifier": []
            }
        },
        "SubprogramRenamingDeclaration.__str__": {
            "name": "__str__",
            "location": 2051,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pragma.__init__": {
            "name": "__init__",
            "location": 2056,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "parameters": []
            }
        },
        "Pragma.__eq__": {
            "name": "__eq__",
            "location": 2060,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pragma.__hash__": {
            "name": "__hash__",
            "location": 2065,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pragma.__str__": {
            "name": "__str__",
            "location": 2068,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.__iadd__": {
            "name": "__iadd__",
            "location": 2078,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Unit.ads": {
            "name": "ads",
            "location": 2083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.adb": {
            "name": "adb",
            "location": 2088,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.name": {
            "name": "name",
            "location": 2093,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PackageUnit.__init__": {
            "name": "__init__",
            "location": 2099,
            "return": [],
            "arguments": {
                "self": [],
                "declaration_context": [],
                "declaration": [],
                "body_context": [],
                "body": []
            }
        },
        "PackageUnit.__iadd__": {
            "name": "__iadd__",
            "location": 2111,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PackageUnit.ads": {
            "name": "ads",
            "location": 2125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PackageUnit.adb": {
            "name": "adb",
            "location": 2129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PackageUnit.name": {
            "name": "name",
            "location": 2133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstantiationUnit.__init__": {
            "name": "__init__",
            "location": 2138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "declaration": []
            }
        },
        "InstantiationUnit.__iadd__": {
            "name": "__iadd__",
            "location": 2144,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InstantiationUnit.ads": {
            "name": "ads",
            "location": 2148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstantiationUnit.adb": {
            "name": "adb",
            "location": 2152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstantiationUnit.name": {
            "name": "name",
            "location": 2156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitPart.__add__": {
            "name": "__add__",
            "location": 2167,
            "return": [
                "Union[(UnitPart, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnitPart.__iadd__": {
            "name": "__iadd__",
            "location": 2177,
            "return": [
                "Union[(UnitPart, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Depends.definition.input_values": {
            "name": "input_values",
            "location": 1019,
            "return": [],
            "arguments": {
                "values": []
            }
        }
    },
    "RecordFlux-main/rflx/cli.py": {
        "main": {
            "name": "main",
            "location": 30,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "version": {
            "name": "version",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 242,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 246,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 279,
            "return": [],
            "arguments": {
                "files": [],
                "skip_verification": [],
                "workers": [],
                "integration_files_dir": []
            }
        },
        "graph": {
            "name": "graph",
            "location": 312,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 342,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "RecordFlux-main/rflx/common.py": {
        "verbose_repr": {
            "name": "verbose_repr",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [],
                "attributes": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [],
                "indentation": []
            }
        },
        "indent_next": {
            "name": "indent_next",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [],
                "indentation": []
            }
        },
        "file_name": {
            "name": "file_name",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "unique": {
            "name": "unique",
            "location": 56,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "verbose_repr.prefixed_str": {
            "name": "prefixed_str",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "RecordFlux-main/rflx/const.py": {},
    "RecordFlux-main/rflx/contract.py": {
        "require": {
            "name": "require",
            "location": 31,
            "return": [],
            "arguments": {
                "condition": [],
                "description": [],
                "a_repr": [],
                "enabled": [],
                "error": []
            }
        },
        "snapshot": {
            "name": "snapshot",
            "location": 40,
            "return": [],
            "arguments": {
                "capture": [],
                "name": [],
                "enabled": []
            }
        },
        "ensure": {
            "name": "ensure",
            "location": 45,
            "return": [],
            "arguments": {
                "condition": [],
                "description": [],
                "a_repr": [],
                "enabled": [],
                "error": []
            }
        },
        "invariant": {
            "name": "invariant",
            "location": 54,
            "return": [],
            "arguments": {
                "condition": [],
                "description": [],
                "a_repr": [],
                "enabled": [],
                "error": []
            }
        }
    },
    "RecordFlux-main/rflx/error.py": {
        "fail": {
            "name": "fail",
            "location": 183,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [],
                "subsystem": [],
                "severity": [],
                "location": []
            }
        },
        "fatal_fail": {
            "name": "fatal_fail",
            "location": 192,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [],
                "subsystem": [],
                "severity": [],
                "location": []
            }
        },
        "_fail": {
            "name": "_fail",
            "location": 201,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "error": [],
                "message": [],
                "subsystem": [],
                "severity": [],
                "location": []
            }
        },
        "warn": {
            "name": "warn",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "subsystem": [],
                "severity": [],
                "location": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "source": [],
                "end": [],
                "verbose": []
            }
        },
        "Location.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Location.source": {
            "name": "source",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.start": {
            "name": "start",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.end": {
            "name": "end",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Location.__hash__": {
            "name": "__hash__",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subsystem.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Severity.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__add__": {
            "name": "__add__",
            "location": 126,
            "return": [
                "Union[(BaseError, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseError.__iadd__": {
            "name": "__iadd__",
            "location": 134,
            "return": [
                "Union[(BaseError, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseError.errors": {
            "name": "errors",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseError.extend": {
            "name": "extend",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": []
            }
        },
        "BaseError.check": {
            "name": "check",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.propagate": {
            "name": "propagate",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordFluxError.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FatalError.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__str__.linecol_str": {
            "name": "linecol_str",
            "location": 28,
            "return": [],
            "arguments": {
                "linecol": []
            }
        },
        "BaseError.Entry.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "subsystem": [],
                "severity": [],
                "location": []
            }
        },
        "BaseError.Entry.message": {
            "name": "message",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseError.Entry.subsystem": {
            "name": "subsystem",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseError.Entry.severity": {
            "name": "severity",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseError.Entry.location": {
            "name": "location",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__str__.locn": {
            "name": "locn",
            "location": 119,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "RecordFlux-main/rflx/expression.py": {
        "substitution": {
            "name": "substitution",
            "location": 2573,
            "return": [
                "Union[(Callable[([Any], Any)], _T1)]"
            ],
            "arguments": {
                "mapping": [],
                "func": [
                    "_T1@@"
                ]
            }
        },
        "max_value": {
            "name": "max_value",
            "location": 2585,
            "return": [
                "Number"
            ],
            "arguments": {
                "target": [],
                "facts": []
            }
        },
        "_entity_name": {
            "name": "_entity_name",
            "location": 2596,
            "return": [
                "str"
            ],
            "arguments": {
                "expr": []
            }
        },
        "_similar_field_names": {
            "name": "_similar_field_names",
            "location": 2616,
            "return": [
                "List[Tuple[(str, Any, Any, _T2)]]"
            ],
            "arguments": {
                "field": [],
                "fields": [],
                "location": [
                    "_T2@@"
                ]
            }
        },
        "Proof.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [],
                "facts": [],
                "logic": []
            }
        },
        "Proof.result": {
            "name": "result",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Proof.error": {
            "name": "error",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelProofs.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": []
            }
        },
        "ParallelProofs.add": {
            "name": "add",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "goal": [],
                "facts": [],
                "expected": [],
                "error": [],
                "negate": [],
                "add_unsat": []
            }
        },
        "ParallelProofs.push": {
            "name": "push",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelProofs.check_proof": {
            "name": "check_proof",
            "location": 126,
            "return": [
                "rflx.error.RecordFluxError"
            ],
            "arguments": {
                "jobs": []
            }
        },
        "ParallelProofs.check": {
            "name": "check",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "Expr.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "location": []
            }
        },
        "Expr.__eq__": {
            "name": "__eq__",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__hash__": {
            "name": "__hash__",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__lt__": {
            "name": "__lt__",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__le__": {
            "name": "__le__",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__gt__": {
            "name": "__gt__",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__ge__": {
            "name": "__ge__",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Expr.__contains__": {
            "name": "__contains__",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Expr.__neg__": {
            "name": "__neg__",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr._update_str": {
            "name": "_update_str",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 208,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.check_type": {
            "name": "check_type",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "Expr.check_type_instance": {
            "name": "check_type_instance",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "Expr.precedence": {
            "name": "precedence",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expr.variables": {
            "name": "variables",
            "location": 232,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.findall": {
            "name": "findall",
            "location": 235,
            "return": [
                "List[Expr]"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Expr.substituted": {
            "name": "substituted",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Expr.simplified": {
            "name": "simplified",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.parenthesized": {
            "name": "parenthesized",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Expr.ada_expr": {
            "name": "ada_expr",
            "location": 255,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.z3expr": {
            "name": "z3expr",
            "location": 259,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.check": {
            "name": "check",
            "location": 262,
            "return": [
                "Proof"
            ],
            "arguments": {
                "self": [],
                "facts": []
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [],
                "location": []
            }
        },
        "Not._update_str": {
            "name": "_update_str",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 274,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.__neg__": {
            "name": "__neg__",
            "location": 277,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.precedence": {
            "name": "precedence",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Not.variables": {
            "name": "variables",
            "location": 284,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.findall": {
            "name": "findall",
            "location": 287,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Not.substituted": {
            "name": "substituted",
            "location": 293,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Not.simplified": {
            "name": "simplified",
            "location": 305,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.ada_expr": {
            "name": "ada_expr",
            "location": 331,
            "return": [
                "ada.Not"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.z3expr": {
            "name": "z3expr",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "type_": [],
                "location": []
            }
        },
        "BinExpr.__repr__": {
            "name": "__repr__",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinExpr._update_str": {
            "name": "_update_str",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.__neg__": {
            "name": "__neg__",
            "location": 362,
            "return": [
                "_TBinExpr@@BinExpr@@"
            ],
            "arguments": {
                "self": [
                    "_TBinExpr@@BinExpr@@"
                ]
            }
        },
        "BinExpr.__contains__": {
            "name": "__contains__",
            "location": 365,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BinExpr.precedence": {
            "name": "precedence",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.variables": {
            "name": "variables",
            "location": 373,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.findall": {
            "name": "findall",
            "location": 376,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "BinExpr.substituted": {
            "name": "substituted",
            "location": 383,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "BinExpr.simplified": {
            "name": "simplified",
            "location": 396,
            "return": [
                "_TBinExpr@@BinExpr@@"
            ],
            "arguments": {
                "self": [
                    "_TBinExpr@@BinExpr@@"
                ]
            }
        },
        "BinExpr.symbol": {
            "name": "symbol",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.__repr__": {
            "name": "__repr__",
            "location": 410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr._update_str": {
            "name": "_update_str",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.__neg__": {
            "name": "__neg__",
            "location": 425,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.__contains__": {
            "name": "__contains__",
            "location": 428,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AssExpr.__lt__": {
            "name": "__lt__",
            "location": 431,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AssExpr.__le__": {
            "name": "__le__",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AssExpr.__gt__": {
            "name": "__gt__",
            "location": 447,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AssExpr.__ge__": {
            "name": "__ge__",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AssExpr.precedence": {
            "name": "precedence",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.variables": {
            "name": "variables",
            "location": 468,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.findall": {
            "name": "findall",
            "location": 471,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "AssExpr.substituted": {
            "name": "substituted",
            "location": 477,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "AssExpr.simplified": {
            "name": "simplified",
            "location": 488,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.operation": {
            "name": "operation",
            "location": 519,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "AssExpr.neutral_element": {
            "name": "neutral_element",
            "location": 523,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssExpr.symbol": {
            "name": "symbol",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr._update_str": {
            "name": "_update_str",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 554,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr.operation": {
            "name": "operation",
            "location": 561,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "BoolAssExpr.neutral_element": {
            "name": "neutral_element",
            "location": 565,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolAssExpr.symbol": {
            "name": "symbol",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "And.__neg__": {
            "name": "__neg__",
            "location": 575,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.precedence": {
            "name": "precedence",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "And.simplified": {
            "name": "simplified",
            "location": 582,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.operation": {
            "name": "operation",
            "location": 588,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "_T0@@"
                ],
                "right": [
                    "_T1@@"
                ]
            }
        },
        "And.neutral_element": {
            "name": "neutral_element",
            "location": 591,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.symbol": {
            "name": "symbol",
            "location": 595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "And.ada_expr": {
            "name": "ada_expr",
            "location": 598,
            "return": [
                "ada.And"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.z3expr": {
            "name": "z3expr",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AndThen.symbol": {
            "name": "symbol",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AndThen.ada_expr": {
            "name": "ada_expr",
            "location": 615,
            "return": [
                "ada.AndThen"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.__neg__": {
            "name": "__neg__",
            "location": 620,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.precedence": {
            "name": "precedence",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Or.simplified": {
            "name": "simplified",
            "location": 627,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.operation": {
            "name": "operation",
            "location": 633,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "_T0@@"
                ],
                "right": [
                    "_T1@@"
                ]
            }
        },
        "Or.neutral_element": {
            "name": "neutral_element",
            "location": 636,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.symbol": {
            "name": "symbol",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Or.ada_expr": {
            "name": "ada_expr",
            "location": 643,
            "return": [
                "ada.Or"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.z3expr": {
            "name": "z3expr",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrElse.symbol": {
            "name": "symbol",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrElse.ada_expr": {
            "name": "ada_expr",
            "location": 660,
            "return": [
                "ada.OrElse"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "base": [],
                "location": []
            }
        },
        "Number._update_str": {
            "name": "_update_str",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 686,
            "return": [
                "rflx.error.RecordFluxError"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__hash__": {
            "name": "__hash__",
            "location": 689,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__int__": {
            "name": "__int__",
            "location": 692,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__neg__": {
            "name": "__neg__",
            "location": 695,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.__add__": {
            "name": "__add__",
            "location": 698,
            "return": [
                "Union[(Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__sub__": {
            "name": "__sub__",
            "location": 703,
            "return": [
                "Union[(Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__mul__": {
            "name": "__mul__",
            "location": 708,
            "return": [
                "Union[(Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__floordiv__": {
            "name": "__floordiv__",
            "location": 713,
            "return": [
                "Union[(Div, Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__pow__": {
            "name": "__pow__",
            "location": 720,
            "return": [
                "Union[(Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__mod__": {
            "name": "__mod__",
            "location": 725,
            "return": [
                "Union[(Number, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__eq__": {
            "name": "__eq__",
            "location": 730,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__lt__": {
            "name": "__lt__",
            "location": 737,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__le__": {
            "name": "__le__",
            "location": 744,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__gt__": {
            "name": "__gt__",
            "location": 751,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__ge__": {
            "name": "__ge__",
            "location": 758,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.precedence": {
            "name": "precedence",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Number.simplified": {
            "name": "simplified",
            "location": 769,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.ada_expr": {
            "name": "ada_expr",
            "location": 772,
            "return": [
                "ada.Number"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.z3expr": {
            "name": "z3expr",
            "location": 776,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MathAssExpr.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MathAssExpr._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 786,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add._update_str": {
            "name": "_update_str",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.__neg__": {
            "name": "__neg__",
            "location": 806,
            "return": [
                "_TAdd@@Add@@"
            ],
            "arguments": {
                "self": [
                    "_TAdd@@Add@@"
                ]
            }
        },
        "Add.precedence": {
            "name": "precedence",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Add.operation": {
            "name": "operation",
            "location": 813,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "Add.simplified": {
            "name": "simplified",
            "location": 816,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.neutral_element": {
            "name": "neutral_element",
            "location": 834,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.symbol": {
            "name": "symbol",
            "location": 838,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Add.ada_expr": {
            "name": "ada_expr",
            "location": 841,
            "return": [
                "ada.Add"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.z3expr": {
            "name": "z3expr",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mul.__neg__": {
            "name": "__neg__",
            "location": 853,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mul.precedence": {
            "name": "precedence",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mul.operation": {
            "name": "operation",
            "location": 860,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "Mul.neutral_element": {
            "name": "neutral_element",
            "location": 863,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mul.symbol": {
            "name": "symbol",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mul.ada_expr": {
            "name": "ada_expr",
            "location": 870,
            "return": [
                "ada.Mul"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mul.z3expr": {
            "name": "z3expr",
            "location": 874,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MathBinExpr.__init__": {
            "name": "__init__",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "location": []
            }
        },
        "MathBinExpr._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 885,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sub.precedence": {
            "name": "precedence",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sub.simplified": {
            "name": "simplified",
            "location": 900,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sub.symbol": {
            "name": "symbol",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sub.ada_expr": {
            "name": "ada_expr",
            "location": 911,
            "return": [
                "ada.Sub"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sub.z3expr": {
            "name": "z3expr",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Div.precedence": {
            "name": "precedence",
            "location": 925,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Div.simplified": {
            "name": "simplified",
            "location": 928,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Div.symbol": {
            "name": "symbol",
            "location": 936,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Div.ada_expr": {
            "name": "ada_expr",
            "location": 939,
            "return": [
                "ada.Div"
            ],
            "arguments": {
                "self": []
            }
        },
        "Div.z3expr": {
            "name": "z3expr",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pow.precedence": {
            "name": "precedence",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pow.simplified": {
            "name": "simplified",
            "location": 956,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pow.symbol": {
            "name": "symbol",
            "location": 964,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pow.ada_expr": {
            "name": "ada_expr",
            "location": 967,
            "return": [
                "ada.Pow"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pow.z3expr": {
            "name": "z3expr",
            "location": 971,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.precedence": {
            "name": "precedence",
            "location": 981,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.simplified": {
            "name": "simplified",
            "location": 984,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.symbol": {
            "name": "symbol",
            "location": 992,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.ada_expr": {
            "name": "ada_expr",
            "location": 995,
            "return": [
                "ada.Mod"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mod.z3expr": {
            "name": "z3expr",
            "location": 999,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negative": [],
                "immutable": [],
                "type_": [],
                "location": []
            }
        },
        "Name._update_str": {
            "name": "_update_str",
            "location": 1022,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.precedence": {
            "name": "precedence",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.representation": {
            "name": "representation",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.substituted": {
            "name": "substituted",
            "location": 1034,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Name.simplified": {
            "name": "simplified",
            "location": 1042,
            "return": [
                "_TName@@Name@@"
            ],
            "arguments": {
                "self": [
                    "_TName@@Name@@"
                ]
            }
        },
        "Name.ada_expr": {
            "name": "ada_expr",
            "location": 1046,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.z3expr": {
            "name": "z3expr",
            "location": 1049,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "negative": [],
                "immutable": [],
                "type_": [],
                "location": []
            }
        },
        "Variable.__eq__": {
            "name": "__eq__",
            "location": 1066,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Variable.__hash__": {
            "name": "__hash__",
            "location": 1071,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__neg__": {
            "name": "__neg__",
            "location": 1074,
            "return": [
                "_TVariable@@Variable@@"
            ],
            "arguments": {
                "self": [
                    "_TVariable@@Variable@@"
                ]
            }
        },
        "Variable._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1079,
            "return": [
                "rflx.error.RecordFluxError"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.name": {
            "name": "name",
            "location": 1083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.representation": {
            "name": "representation",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.variables": {
            "name": "variables",
            "location": 1090,
            "return": [
                "List[Variable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.ada_expr": {
            "name": "ada_expr",
            "location": 1093,
            "return": [
                "ada.Variable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.z3expr": {
            "name": "z3expr",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.copy": {
            "name": "copy",
            "location": 1106,
            "return": [
                "_TVariable@@Variable@@"
            ],
            "arguments": {
                "self": [
                    "_TVariable@@Variable@@"
                ],
                "identifier": [],
                "negative": [],
                "immutable": [],
                "type_": [],
                "location": []
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Attribute.representation": {
            "name": "representation",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.symbol": {
            "name": "symbol",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__neg__": {
            "name": "__neg__",
            "location": 1145,
            "return": [
                "_TAttribute@@Attribute@@"
            ],
            "arguments": {
                "self": [
                    "_TAttribute@@Attribute@@"
                ]
            }
        },
        "Attribute.findall": {
            "name": "findall",
            "location": 1148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Attribute.substituted": {
            "name": "substituted",
            "location": 1151,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Attribute.simplified": {
            "name": "simplified",
            "location": 1162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.variables": {
            "name": "variables",
            "location": 1166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.ada_expr": {
            "name": "ada_expr",
            "location": 1169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.z3expr": {
            "name": "z3expr",
            "location": 1174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.__init__": {
            "name": "__init__",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Size._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Length.__init__": {
            "name": "__init__",
            "location": 1193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Length._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "First.__init__": {
            "name": "__init__",
            "location": 1202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "First._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Last.__init__": {
            "name": "__init__",
            "location": 1211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Last._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidChecksum.__init__": {
            "name": "__init__",
            "location": 1220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "ValidChecksum._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidChecksum.z3expr": {
            "name": "z3expr",
            "location": 1227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidChecksum.representation": {
            "name": "representation",
            "location": 1231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Valid.__init__": {
            "name": "__init__",
            "location": 1236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Valid._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1240,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Present.__init__": {
            "name": "__init__",
            "location": 1245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Present._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1249,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasData.__init__": {
            "name": "__init__",
            "location": 1268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "HasData.symbol": {
            "name": "symbol",
            "location": 1273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HasData._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1276,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Head.__init__": {
            "name": "__init__",
            "location": 1281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Head._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1289,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Opaque.__init__": {
            "name": "__init__",
            "location": 1306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "negative": []
            }
        },
        "Opaque._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1310,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Val.__init__": {
            "name": "__init__",
            "location": 1317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "expression": [],
                "negative": []
            }
        },
        "Val.__neg__": {
            "name": "__neg__",
            "location": 1323,
            "return": [
                "_TVal@@Val@@"
            ],
            "arguments": {
                "self": [
                    "_TVal@@Val@@"
                ]
            }
        },
        "Val._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1326,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Val.variables": {
            "name": "variables",
            "location": 1329,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Val.findall": {
            "name": "findall",
            "location": 1332,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Val.substituted": {
            "name": "substituted",
            "location": 1335,
            "return": [
                "_TVal@@Val@@"
            ],
            "arguments": {
                "self": [
                    "_TVal@@Val@@"
                ],
                "func": [],
                "mapping": []
            }
        },
        "Val.simplified": {
            "name": "simplified",
            "location": 1340,
            "return": [
                "_TVal@@Val@@"
            ],
            "arguments": {
                "self": [
                    "_TVal@@Val@@"
                ]
            }
        },
        "Val.representation": {
            "name": "representation",
            "location": 1344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Val.ada_expr": {
            "name": "ada_expr",
            "location": 1347,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Val.z3expr": {
            "name": "z3expr",
            "location": 1355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed.__init__": {
            "name": "__init__",
            "location": 1363,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Indexed.__neg__": {
            "name": "__neg__",
            "location": 1368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed.representation": {
            "name": "representation",
            "location": 1375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed.ada_expr": {
            "name": "ada_expr",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Indexed.z3expr": {
            "name": "z3expr",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Selected.__init__": {
            "name": "__init__",
            "location": 1389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "selector": [],
                "negative": [],
                "immutable": [],
                "type_": [],
                "location": []
            }
        },
        "Selected.__neg__": {
            "name": "__neg__",
            "location": 1402,
            "return": [
                "_TSelected@@Selected@@"
            ],
            "arguments": {
                "self": [
                    "_TSelected@@Selected@@"
                ]
            }
        },
        "Selected.findall": {
            "name": "findall",
            "location": 1405,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Selected._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1411,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selected.representation": {
            "name": "representation",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Selected.variables": {
            "name": "variables",
            "location": 1441,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selected.substituted": {
            "name": "substituted",
            "location": 1444,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Selected.ada_expr": {
            "name": "ada_expr",
            "location": 1458,
            "return": [
                "ada.Selected"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selected.z3expr": {
            "name": "z3expr",
            "location": 1462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 1469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "args": [],
                "negative": [],
                "immutable": [],
                "type_": [],
                "argument_types": [],
                "location": []
            }
        },
        "Call.__neg__": {
            "name": "__neg__",
            "location": 1484,
            "return": [
                "_TCall@@Call@@"
            ],
            "arguments": {
                "self": [
                    "_TCall@@Call@@"
                ]
            }
        },
        "Call._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1487,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Call.representation": {
            "name": "representation",
            "location": 1523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Call.ada_expr": {
            "name": "ada_expr",
            "location": 1530,
            "return": [
                "ada.Call"
            ],
            "arguments": {
                "self": []
            }
        },
        "Call.z3expr": {
            "name": "z3expr",
            "location": 1536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Call.variables": {
            "name": "variables",
            "location": 1539,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Call.findall": {
            "name": "findall",
            "location": 1545,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Call.substituted": {
            "name": "substituted",
            "location": 1551,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 1571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "first": [],
                "last": []
            }
        },
        "Slice.__neg__": {
            "name": "__neg__",
            "location": 1577,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1580,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.representation": {
            "name": "representation",
            "location": 1584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Slice.ada_expr": {
            "name": "ada_expr",
            "location": 1587,
            "return": [
                "ada.Slice"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.z3expr": {
            "name": "z3expr",
            "location": 1591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UndefinedExpr.representation": {
            "name": "representation",
            "location": 1597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UndefinedExpr.__neg__": {
            "name": "__neg__",
            "location": 1600,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedExpr._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1603,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedExpr.ada_expr": {
            "name": "ada_expr",
            "location": 1606,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedExpr.z3expr": {
            "name": "z3expr",
            "location": 1610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 1618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.__eq__": {
            "name": "__eq__",
            "location": 1622,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Aggregate.__hash__": {
            "name": "__hash__",
            "location": 1627,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate._update_str": {
            "name": "_update_str",
            "location": 1630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1633,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.__neg__": {
            "name": "__neg__",
            "location": 1639,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.precedence": {
            "name": "precedence",
            "location": 1643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.substituted": {
            "name": "substituted",
            "location": 1646,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Aggregate.simplified": {
            "name": "simplified",
            "location": 1657,
            "return": [
                "_TAggregate@@Aggregate@@"
            ],
            "arguments": {
                "self": [
                    "_TAggregate@@Aggregate@@"
                ]
            }
        },
        "Aggregate.length": {
            "name": "length",
            "location": 1661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.ada_expr": {
            "name": "ada_expr",
            "location": 1664,
            "return": [
                "ada.Aggregate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.z3expr": {
            "name": "z3expr",
            "location": 1668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 1673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "location": []
            }
        },
        "String._update_str": {
            "name": "_update_str",
            "location": 1677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__neg__": {
            "name": "__neg__",
            "location": 1680,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.precedence": {
            "name": "precedence",
            "location": 1684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "String.substituted": {
            "name": "substituted",
            "location": 1687,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "String.simplified": {
            "name": "simplified",
            "location": 1693,
            "return": [
                "_TString@@String@@"
            ],
            "arguments": {
                "self": [
                    "_TString@@String@@"
                ]
            }
        },
        "String.ada_expr": {
            "name": "ada_expr",
            "location": 1696,
            "return": [
                "ada.String"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.z3expr": {
            "name": "z3expr",
            "location": 1700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.__init__": {
            "name": "__init__",
            "location": 1707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate._update_str": {
            "name": "_update_str",
            "location": 1711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.__neg__": {
            "name": "__neg__",
            "location": 1717,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1720,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.precedence": {
            "name": "precedence",
            "location": 1724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.simplified": {
            "name": "simplified",
            "location": 1727,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.ada_expr": {
            "name": "ada_expr",
            "location": 1730,
            "return": [
                "ada.NamedAggregate"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedAggregate.z3expr": {
            "name": "z3expr",
            "location": 1743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relation.__init__": {
            "name": "__init__",
            "location": 1748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "location": []
            }
        },
        "Relation.__neg__": {
            "name": "__neg__",
            "location": 1752,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Relation._simplified": {
            "name": "_simplified",
            "location": 1755,
            "return": [
                "Union[(Relation, Variable)]"
            ],
            "arguments": {
                "self": [],
                "relation_operator": []
            }
        },
        "Relation.precedence": {
            "name": "precedence",
            "location": 1777,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Less.__neg__": {
            "name": "__neg__",
            "location": 1782,
            "return": [
                "GreaterEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "Less._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1785,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Less.symbol": {
            "name": "symbol",
            "location": 1792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Less.simplified": {
            "name": "simplified",
            "location": 1795,
            "return": [
                "Union[(Less, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Less.ada_expr": {
            "name": "ada_expr",
            "location": 1798,
            "return": [
                "ada.Less"
            ],
            "arguments": {
                "self": []
            }
        },
        "Less.z3expr": {
            "name": "z3expr",
            "location": 1802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.__neg__": {
            "name": "__neg__",
            "location": 1811,
            "return": [
                "Greater"
            ],
            "arguments": {
                "self": []
            }
        },
        "LessEqual._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1814,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.symbol": {
            "name": "symbol",
            "location": 1821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.simplified": {
            "name": "simplified",
            "location": 1824,
            "return": [
                "Union[(LessEqual, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.ada_expr": {
            "name": "ada_expr",
            "location": 1827,
            "return": [
                "ada.LessEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "LessEqual.z3expr": {
            "name": "z3expr",
            "location": 1831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Equal.__neg__": {
            "name": "__neg__",
            "location": 1840,
            "return": [
                "NotEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equal._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1843,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equal.symbol": {
            "name": "symbol",
            "location": 1847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Equal.simplified": {
            "name": "simplified",
            "location": 1850,
            "return": [
                "Union[(Equal, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equal.ada_expr": {
            "name": "ada_expr",
            "location": 1853,
            "return": [
                "ada.Equal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equal.z3expr": {
            "name": "z3expr",
            "location": 1857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.__neg__": {
            "name": "__neg__",
            "location": 1866,
            "return": [
                "Less"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1869,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.symbol": {
            "name": "symbol",
            "location": 1876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.simplified": {
            "name": "simplified",
            "location": 1879,
            "return": [
                "Union[(GreaterEqual, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.ada_expr": {
            "name": "ada_expr",
            "location": 1882,
            "return": [
                "ada.GreaterEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreaterEqual.z3expr": {
            "name": "z3expr",
            "location": 1886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Greater.__neg__": {
            "name": "__neg__",
            "location": 1895,
            "return": [
                "LessEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greater._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1898,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greater.symbol": {
            "name": "symbol",
            "location": 1905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Greater.simplified": {
            "name": "simplified",
            "location": 1908,
            "return": [
                "Union[(Greater, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greater.ada_expr": {
            "name": "ada_expr",
            "location": 1911,
            "return": [
                "ada.Greater"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greater.z3expr": {
            "name": "z3expr",
            "location": 1915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.__neg__": {
            "name": "__neg__",
            "location": 1924,
            "return": [
                "Equal"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotEqual._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1927,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.symbol": {
            "name": "symbol",
            "location": 1931,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.simplified": {
            "name": "simplified",
            "location": 1934,
            "return": [
                "Union[(NotEqual, Variable)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.ada_expr": {
            "name": "ada_expr",
            "location": 1937,
            "return": [
                "ada.NotEqual"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotEqual.z3expr": {
            "name": "z3expr",
            "location": 1941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "In.__neg__": {
            "name": "__neg__",
            "location": 1950,
            "return": [
                "NotIn"
            ],
            "arguments": {
                "self": []
            }
        },
        "In._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1953,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "In.symbol": {
            "name": "symbol",
            "location": 1959,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "In.ada_expr": {
            "name": "ada_expr",
            "location": 1962,
            "return": [
                "ada.In"
            ],
            "arguments": {
                "self": []
            }
        },
        "In.z3expr": {
            "name": "z3expr",
            "location": 1966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotIn.__neg__": {
            "name": "__neg__",
            "location": 1971,
            "return": [
                "In"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotIn._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 1974,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotIn.symbol": {
            "name": "symbol",
            "location": 1980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotIn.ada_expr": {
            "name": "ada_expr",
            "location": 1983,
            "return": [
                "ada.NotIn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotIn.z3expr": {
            "name": "z3expr",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.__init__": {
            "name": "__init__",
            "location": 1992,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter_identifier": [],
                "iterable": [],
                "predicate": [],
                "location": []
            }
        },
        "QuantifiedExpression._update_str": {
            "name": "_update_str",
            "location": 2004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2010,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.precedence": {
            "name": "precedence",
            "location": 2026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.quantifier": {
            "name": "quantifier",
            "location": 2031,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.keyword": {
            "name": "keyword",
            "location": 2036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.variables": {
            "name": "variables",
            "location": 2039,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.ada_expr": {
            "name": "ada_expr",
            "location": 2048,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.z3expr": {
            "name": "z3expr",
            "location": 2056,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression.substituted": {
            "name": "substituted",
            "location": 2059,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "QuantifiedExpression.simplified": {
            "name": "simplified",
            "location": 2072,
            "return": [
                "_TQuantifiedExpression@@QuantifiedExpression@@"
            ],
            "arguments": {
                "self": [
                    "_TQuantifiedExpression@@QuantifiedExpression@@"
                ]
            }
        },
        "ForAllOf.__neg__": {
            "name": "__neg__",
            "location": 2079,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAllOf.quantifier": {
            "name": "quantifier",
            "location": 2083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllOf.keyword": {
            "name": "keyword",
            "location": 2087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllIn.__neg__": {
            "name": "__neg__",
            "location": 2092,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAllIn.quantifier": {
            "name": "quantifier",
            "location": 2096,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForAllIn.keyword": {
            "name": "keyword",
            "location": 2100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForSomeIn.__neg__": {
            "name": "__neg__",
            "location": 2105,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForSomeIn.quantifier": {
            "name": "quantifier",
            "location": 2109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForSomeIn.keyword": {
            "name": "keyword",
            "location": 2113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.__init__": {
            "name": "__init__",
            "location": 2118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "location": []
            }
        },
        "ValueRange._update_str": {
            "name": "_update_str",
            "location": 2123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2126,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.__neg__": {
            "name": "__neg__",
            "location": 2132,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.precedence": {
            "name": "precedence",
            "location": 2136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.substituted": {
            "name": "substituted",
            "location": 2139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "ValueRange.simplified": {
            "name": "simplified",
            "location": 2151,
            "return": [
                "_TValueRange@@ValueRange@@"
            ],
            "arguments": {
                "self": [
                    "_TValueRange@@ValueRange@@"
                ]
            }
        },
        "ValueRange.ada_expr": {
            "name": "ada_expr",
            "location": 2154,
            "return": [
                "ada.ValueRange"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueRange.z3expr": {
            "name": "z3expr",
            "location": 2158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conversion.__init__": {
            "name": "__init__",
            "location": 2163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "argument": [],
                "type_": [],
                "argument_types": [],
                "location": []
            }
        },
        "Conversion._update_str": {
            "name": "_update_str",
            "location": 2176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.__neg__": {
            "name": "__neg__",
            "location": 2222,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.precedence": {
            "name": "precedence",
            "location": 2226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conversion.substituted": {
            "name": "substituted",
            "location": 2229,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Conversion.simplified": {
            "name": "simplified",
            "location": 2244,
            "return": [
                "_TConversion@@Conversion@@"
            ],
            "arguments": {
                "self": [
                    "_TConversion@@Conversion@@"
                ]
            }
        },
        "Conversion.ada_expr": {
            "name": "ada_expr",
            "location": 2253,
            "return": [
                "ada.Conversion"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.z3expr": {
            "name": "z3expr",
            "location": 2257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conversion.variables": {
            "name": "variables",
            "location": 2260,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.__init__": {
            "name": "__init__",
            "location": 2265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [],
                "sequence": [],
                "selector": [],
                "condition": [],
                "location": []
            }
        },
        "Comprehension._update_str": {
            "name": "_update_str",
            "location": 2279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2284,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.__neg__": {
            "name": "__neg__",
            "location": 2305,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.simplified": {
            "name": "simplified",
            "location": 2308,
            "return": [
                "_TComprehension@@Comprehension@@"
            ],
            "arguments": {
                "self": [
                    "_TComprehension@@Comprehension@@"
                ]
            }
        },
        "Comprehension.substituted": {
            "name": "substituted",
            "location": 2317,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Comprehension.precedence": {
            "name": "precedence",
            "location": 2333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.ada_expr": {
            "name": "ada_expr",
            "location": 2336,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.z3expr": {
            "name": "z3expr",
            "location": 2340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.variables": {
            "name": "variables",
            "location": 2343,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.__init__": {
            "name": "__init__",
            "location": 2354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "field_values": [],
                "type_": [],
                "location": []
            }
        },
        "MessageAggregate._update_str": {
            "name": "_update_str",
            "location": 2365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2373,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.__neg__": {
            "name": "__neg__",
            "location": 2451,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.findall": {
            "name": "findall",
            "location": 2454,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "MessageAggregate.simplified": {
            "name": "simplified",
            "location": 2460,
            "return": [
                "_TMessageAggregate@@MessageAggregate@@"
            ],
            "arguments": {
                "self": [
                    "_TMessageAggregate@@MessageAggregate@@"
                ]
            }
        },
        "MessageAggregate.substituted": {
            "name": "substituted",
            "location": 2468,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "MessageAggregate.precedence": {
            "name": "precedence",
            "location": 2483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.ada_expr": {
            "name": "ada_expr",
            "location": 2486,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.z3expr": {
            "name": "z3expr",
            "location": 2490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageAggregate.variables": {
            "name": "variables",
            "location": 2493,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.__init__": {
            "name": "__init__",
            "location": 2501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [],
                "data": [],
                "location": []
            }
        },
        "Binding._update_str": {
            "name": "_update_str",
            "location": 2506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding._check_type_subexpr": {
            "name": "_check_type_subexpr",
            "location": 2510,
            "return": [
                "Union[(_NotImplementedType, rflx.error.BaseError)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.__neg__": {
            "name": "__neg__",
            "location": 2531,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.findall": {
            "name": "findall",
            "location": 2534,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Binding.simplified": {
            "name": "simplified",
            "location": 2541,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.substituted": {
            "name": "substituted",
            "location": 2545,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "mapping": []
            }
        },
        "Binding.precedence": {
            "name": "precedence",
            "location": 2559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Binding.ada_expr": {
            "name": "ada_expr",
            "location": 2562,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.z3expr": {
            "name": "z3expr",
            "location": 2566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Binding.variables": {
            "name": "variables",
            "location": 2569,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifiedExpression._check_type_subexpr.typify_variable": {
            "name": "typify_variable",
            "location": 2011,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "Comprehension._check_type_subexpr.typify_variable": {
            "name": "typify_variable",
            "location": 2285,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "Binding._check_type_subexpr.typify_variable": {
            "name": "typify_variable",
            "location": 2515,
            "return": [],
            "arguments": {
                "expr": []
            }
        }
    },
    "RecordFlux-main/rflx/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Graph._target_size": {
            "name": "_target_size",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Graph._edge_label": {
            "name": "_edge_label",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Graph.get": {
            "name": "get",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph._graph_with_defaults": {
            "name": "_graph_with_defaults",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Graph._add_state": {
            "name": "_add_state",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "result": [],
                "variables": []
            }
        },
        "Graph._get_session": {
            "name": "_get_session",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph._get_message": {
            "name": "_get_message",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.write": {
            "name": "write",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "fmt": []
            }
        }
    },
    "RecordFlux-main/rflx/identifier.py": {
        "ID.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "location": []
            }
        },
        "ID.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__lt__": {
            "name": "__lt__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__hash__": {
            "name": "__hash__",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ID.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ID.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ID.__add__": {
            "name": "__add__",
            "location": 63,
            "return": [
                "Union[(ID, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__radd__": {
            "name": "__radd__",
            "location": 68,
            "return": [
                "Union[(ID, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__mul__": {
            "name": "__mul__",
            "location": 73,
            "return": [
                "Union[(ID, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__rmul__": {
            "name": "__rmul__",
            "location": 80,
            "return": [
                "Union[(ID, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID._location": {
            "name": "_location",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.parts": {
            "name": "parts",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.name": {
            "name": "name",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.parent": {
            "name": "parent",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.flat": {
            "name": "flat",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID._separator": {
            "name": "_separator",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/integration.py": {
        "Integration.defaultsize": {
            "name": "defaultsize",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integration.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "integration_files_dir": []
            }
        },
        "Integration.load_integration_file": {
            "name": "load_integration_file",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "spec_file": [],
                "error": []
            }
        },
        "Integration.validate": {
            "name": "validate",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "error": []
            }
        },
        "Integration.get_size": {
            "name": "get_size",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "variable": [],
                "state": []
            }
        },
        "Integration._add_integration_object": {
            "name": "_add_integration_object",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "file": [],
                "error": []
            }
        },
        "Integration._to_location": {
            "name": "_to_location",
            "location": 142,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "Integration._validate_globals": {
            "name": "_validate_globals",
            "location": 146,
            "return": [],
            "arguments": {
                "package": [],
                "integration": [],
                "session": [],
                "error": []
            }
        },
        "Integration._validate_states": {
            "name": "_validate_states",
            "location": 169,
            "return": [],
            "arguments": {
                "package": [],
                "integration": [],
                "session": [],
                "error": []
            }
        }
    },
    "RecordFlux-main/rflx/typing_.py": {
        "common_type": {
            "name": "common_type",
            "location": 328,
            "return": [],
            "arguments": {
                "types": []
            }
        },
        "check_type": {
            "name": "check_type",
            "location": 337,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "location": [],
                "description": []
            }
        },
        "check_type_instance": {
            "name": "check_type_instance",
            "location": 368,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "location": [],
                "description": []
            }
        },
        "_undefined_type": {
            "name": "_undefined_type",
            "location": 397,
            "return": [],
            "arguments": {
                "location": [],
                "description": []
            }
        },
        "Bounds.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bounds.__bool__": {
            "name": "__bool__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bounds.__contains__": {
            "name": "__contains__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Bounds.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bounds.union": {
            "name": "union",
            "location": 47,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "Type.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Type.is_compatible": {
            "name": "is_compatible",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Type.is_compatible_strong": {
            "name": "is_compatible_strong",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Type.common_type": {
            "name": "common_type",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.is_compatible": {
            "name": "is_compatible",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.common_type": {
            "name": "common_type",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Any.is_compatible": {
            "name": "is_compatible",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Any.common_type": {
            "name": "common_type",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndependentType.is_compatible": {
            "name": "is_compatible",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndependentType.common_type": {
            "name": "common_type",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Enumeration.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnyInteger.is_compatible": {
            "name": "is_compatible",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AnyInteger.common_type": {
            "name": "common_type",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UndefinedInteger.common_type": {
            "name": "common_type",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UniversalInteger.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UniversalInteger.is_compatible_strong": {
            "name": "is_compatible_strong",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UniversalInteger.common_type": {
            "name": "common_type",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__str__": {
            "name": "__str__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.is_compatible_strong": {
            "name": "is_compatible_strong",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.common_type": {
            "name": "common_type",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Aggregate.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.is_compatible": {
            "name": "is_compatible",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Aggregate.common_type": {
            "name": "common_type",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Sequence.__str__": {
            "name": "__str__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.is_compatible": {
            "name": "is_compatible",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Sequence.common_type": {
            "name": "common_type",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.parameters": {
            "name": "parameters",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.fields": {
            "name": "fields",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.types": {
            "name": "types",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Private.__str__": {
            "name": "__str__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.__str__": {
            "name": "__str__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.is_compatible": {
            "name": "is_compatible",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Channel.common_type": {
            "name": "common_type",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "RecordFlux-main/rflx/validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "files": [],
                "checksum_module": [],
                "skip_model_verification": [],
                "skip_message_verification": [],
                "split_disjunctions": []
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "message_identifier": [],
                "directory_invalid": [],
                "directory_valid": [],
                "json_output": [],
                "abort_on_error": [],
                "coverage": [],
                "target_coverage": []
            }
        },
        "Validator._create_model": {
            "name": "_create_model",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "files": [],
                "skip_model_verification": [],
                "split_disjunctions": []
            }
        },
        "Validator._expand_message_links": {
            "name": "_expand_message_links",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "messages": []
            }
        },
        "Validator._replace_messages": {
            "name": "_replace_messages",
            "location": 172,
            "return": [],
            "arguments": {
                "type_": [],
                "messages": []
            }
        },
        "Validator._expand_expression": {
            "name": "_expand_expression",
            "location": 194,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Validator._parse_checksum_module": {
            "name": "_parse_checksum_module",
            "location": 223,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Validator._validate_message": {
            "name": "_validate_message",
            "location": 260,
            "return": [],
            "arguments": {
                "message_path": [],
                "valid_original_message": [],
                "message_value": []
            }
        },
        "CoverageInformation.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "packages": [],
                "coverage": []
            }
        },
        "CoverageInformation.update": {
            "name": "update",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "message_value": []
            }
        },
        "CoverageInformation.file_total_links": {
            "name": "file_total_links",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "CoverageInformation.file_covered_links": {
            "name": "file_covered_links",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "CoverageInformation.file_uncovered_links": {
            "name": "file_uncovered_links",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "CoverageInformation.print_coverage": {
            "name": "print_coverage",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoverageInformation._print_coverage_overview": {
            "name": "_print_coverage_overview",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoverageInformation._print_link_coverage": {
            "name": "_print_link_coverage",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.as_json": {
            "name": "as_json",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.print_console_output": {
            "name": "print_console_output",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputWriter.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "OutputWriter.__enter__": {
            "name": "__enter__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputWriter.__exit__": {
            "name": "__exit__",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "OutputWriter.write_result": {
            "name": "write_result",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "validation_result": []
            }
        }
    },
    "RecordFlux-main/rflx/__init__.py": {},
    "RecordFlux-main/rflx/generator/allocator.py": {
        "AllocatorGenerator.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "integration": [],
                "prefix": []
            }
        },
        "AllocatorGenerator.unit_identifier": {
            "name": "unit_identifier",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.declaration_context": {
            "name": "declaration_context",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.body_context": {
            "name": "body_context",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.unit_part": {
            "name": "unit_part",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.required": {
            "name": "required",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.get_global_slot_ptrs": {
            "name": "get_global_slot_ptrs",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.get_local_slot_ptrs": {
            "name": "get_local_slot_ptrs",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator.get_slot_ptr": {
            "name": "get_slot_ptr",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "AllocatorGenerator.get_size": {
            "name": "get_size",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "state": []
            }
        },
        "AllocatorGenerator._slot_name": {
            "name": "_slot_name",
            "location": 128,
            "return": [],
            "arguments": {
                "slot_id": []
            }
        },
        "AllocatorGenerator._ptr_type": {
            "name": "_ptr_type",
            "location": 132,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "AllocatorGenerator._create": {
            "name": "_create",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_memory": {
            "name": "_create_memory",
            "location": 147,
            "return": [],
            "arguments": {
                "slots": []
            }
        },
        "AllocatorGenerator._create_ptr_subtypes": {
            "name": "_create_ptr_subtypes",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_slots": {
            "name": "_create_slots",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_init_pred": {
            "name": "_create_init_pred",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_uninitialized_pred": {
            "name": "_create_uninitialized_pred",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_global_allocated_pred": {
            "name": "_create_global_allocated_pred",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_init_proc": {
            "name": "_create_init_proc",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._create_finalize_proc": {
            "name": "_create_finalize_proc",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "slots": []
            }
        },
        "AllocatorGenerator._needs_allocation": {
            "name": "_needs_allocation",
            "location": 335,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "AllocatorGenerator._allocate_global_slots": {
            "name": "_allocate_global_slots",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllocatorGenerator._scope": {
            "name": "_scope",
            "location": 347,
            "return": [],
            "arguments": {
                "state": [],
                "var_id": []
            }
        },
        "AllocatorGenerator._allocate_local_slots": {
            "name": "_allocate_local_slots",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/common.py": {
        "substitution": {
            "name": "substitution",
            "location": 64,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": [],
                "embedded": [],
                "public": [],
                "target_type": []
            }
        },
        "substitution_facts": {
            "name": "substitution_facts",
            "location": 192,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": [],
                "embedded": [],
                "public": [],
                "target_type": []
            }
        },
        "message_structure_invariant": {
            "name": "message_structure_invariant",
            "location": 304,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": [],
                "link": [],
                "embedded": []
            }
        },
        "context_predicate": {
            "name": "context_predicate",
            "location": 413,
            "return": [],
            "arguments": {
                "message": [],
                "composite_fields": [],
                "prefix": []
            }
        },
        "public_context_predicate": {
            "name": "public_context_predicate",
            "location": 583,
            "return": [],
            "arguments": {}
        },
        "context_invariant": {
            "name": "context_invariant",
            "location": 595,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "valid_path_to_next_field_condition": {
            "name": "valid_path_to_next_field_condition",
            "location": 608,
            "return": [],
            "arguments": {
                "message": [],
                "field": [],
                "prefix": []
            }
        },
        "context_cursor_unchanged": {
            "name": "context_cursor_unchanged",
            "location": 641,
            "return": [],
            "arguments": {
                "message": [],
                "field": [],
                "predecessors": []
            }
        },
        "sufficient_space_for_field_condition": {
            "name": "sufficient_space_for_field_condition",
            "location": 692,
            "return": [],
            "arguments": {
                "field_name": [],
                "size": []
            }
        },
        "initialize_field_statements": {
            "name": "initialize_field_statements",
            "location": 698,
            "return": [],
            "arguments": {
                "field": [],
                "reset_written_last": []
            }
        },
        "field_bit_location_declarations": {
            "name": "field_bit_location_declarations",
            "location": 773,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "field_condition_call": {
            "name": "field_condition_call",
            "location": 790,
            "return": [],
            "arguments": {
                "message": [],
                "field": [],
                "value": [],
                "aggregate": [],
                "size": []
            }
        },
        "ada_type_identifier": {
            "name": "ada_type_identifier",
            "location": 815,
            "return": [],
            "arguments": {
                "type_identifier": []
            }
        },
        "prefixed_type_identifier": {
            "name": "prefixed_type_identifier",
            "location": 822,
            "return": [],
            "arguments": {
                "type_identifier": [],
                "prefix": []
            }
        },
        "enum_name": {
            "name": "enum_name",
            "location": 829,
            "return": [],
            "arguments": {
                "enum_type": []
            }
        },
        "full_enum_name": {
            "name": "full_enum_name",
            "location": 833,
            "return": [],
            "arguments": {
                "enum_type": []
            }
        },
        "sequence_name": {
            "name": "sequence_name",
            "location": 837,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "contains_function_name": {
            "name": "contains_function_name",
            "location": 841,
            "return": [],
            "arguments": {
                "refinement_package": [],
                "pdu": [],
                "sdu": [],
                "field": []
            }
        },
        "has_value_dependent_condition": {
            "name": "has_value_dependent_condition",
            "location": 849,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "has_aggregate_dependent_condition": {
            "name": "has_aggregate_dependent_condition",
            "location": 865,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "has_size_dependent_condition": {
            "name": "has_size_dependent_condition",
            "location": 881,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "create_sequence_instantiation": {
            "name": "create_sequence_instantiation",
            "location": 891,
            "return": [],
            "arguments": {
                "sequence_type": [],
                "prefix": [],
                "flat": []
            }
        },
        "unchanged_cursor_before_or_invalid": {
            "name": "unchanged_cursor_before_or_invalid",
            "location": 951,
            "return": [],
            "arguments": {
                "limit": [],
                "loop_entry": [],
                "or_invalid": []
            }
        },
        "conditional_field_size": {
            "name": "conditional_field_size",
            "location": 992,
            "return": [],
            "arguments": {
                "field": [],
                "message": [],
                "prefix": []
            }
        },
        "message_parameters": {
            "name": "message_parameters",
            "location": 1033,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "initialize_conditions": {
            "name": "initialize_conditions",
            "location": 1040,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "context_cursors_initialization": {
            "name": "context_cursors_initialization",
            "location": 1053,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "byte_aligned_field": {
            "name": "byte_aligned_field",
            "location": 1078,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "substitution.type_conversion": {
            "name": "type_conversion",
            "location": 73,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "substitution.func": {
            "name": "func",
            "location": 76,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "substitution_facts.prefixed": {
            "name": "prefixed",
            "location": 199,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "substitution_facts.field_first": {
            "name": "field_first",
            "location": 206,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "substitution_facts.field_last": {
            "name": "field_last",
            "location": 213,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "substitution_facts.field_size": {
            "name": "field_size",
            "location": 220,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "substitution_facts.parameter_value": {
            "name": "parameter_value",
            "location": 233,
            "return": [],
            "arguments": {
                "parameter": [],
                "parameter_type": []
            }
        },
        "substitution_facts.field_value": {
            "name": "field_value",
            "location": 245,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": []
            }
        },
        "substitution_facts.type_conversion": {
            "name": "type_conversion",
            "location": 267,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "message_structure_invariant.prefixed": {
            "name": "prefixed",
            "location": 307,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "context_predicate.cursors_invariant": {
            "name": "cursors_invariant",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "context_predicate.valid_predecessors_invariant": {
            "name": "valid_predecessors_invariant",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "context_predicate.invalid_successors_invariant": {
            "name": "invalid_successors_invariant",
            "location": 518,
            "return": [],
            "arguments": {}
        },
        "conditional_field_size.substituted": {
            "name": "substituted",
            "location": 993,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "substitution.func.byte_aggregate": {
            "name": "byte_aggregate",
            "location": 77,
            "return": [],
            "arguments": {
                "aggregate": []
            }
        },
        "substitution.func.field_value": {
            "name": "field_value",
            "location": 158,
            "return": [],
            "arguments": {
                "field": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/const.py": {},
    "RecordFlux-main/rflx/generator/generator.py": {
        "create_file": {
            "name": "create_file",
            "location": 1399,
            "return": [],
            "arguments": {
                "filename": [],
                "content": []
            }
        },
        "modular_types": {
            "name": "modular_types",
            "location": 1405,
            "return": [],
            "arguments": {
                "integer": []
            }
        },
        "range_types": {
            "name": "range_types",
            "location": 1415,
            "return": [],
            "arguments": {
                "integer": []
            }
        },
        "enumeration_types": {
            "name": "enumeration_types",
            "location": 1426,
            "return": [],
            "arguments": {
                "enum": []
            }
        },
        "contains_function_name": {
            "name": "contains_function_name",
            "location": 1455,
            "return": [],
            "arguments": {
                "refinement": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "workers": [],
                "reproducible": [],
                "debug": [],
                "ignore_unsupported_checksum": []
            }
        },
        "Generator.generate": {
            "name": "generate",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "integration": [],
                "directory": [],
                "library_files": [],
                "top_level_package": []
            }
        },
        "Generator._write_files": {
            "name": "_write_files",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "directory": [],
                "library_files": [],
                "top_level_package": []
            }
        },
        "Generator._write_library_files": {
            "name": "_write_library_files",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "Generator._write_top_level_package": {
            "name": "_write_top_level_package",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "Generator._write_units": {
            "name": "_write_units",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "directory": []
            }
        },
        "Generator._generate": {
            "name": "_generate",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "integration": []
            }
        },
        "Generator._create_session": {
            "name": "_create_session",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "integration": []
            }
        },
        "Generator._create_unit": {
            "name": "_create_unit",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "declaration_context": [],
                "body_context": [],
                "formal_parameters": [],
                "configuration_pragmas": [],
                "aspects": [],
                "terminating": []
            }
        },
        "Generator._create_instantiation_unit": {
            "name": "_create_instantiation_unit",
            "location": 330,
            "return": [],
            "arguments": {
                "context": [],
                "instantiation": []
            }
        },
        "Generator._create_message": {
            "name": "_create_message",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Generator._requires_composite_field_function": {
            "name": "_requires_composite_field_function",
            "location": 567,
            "return": [],
            "arguments": {
                "message": [],
                "scalar_fields": [],
                "composite_fields": [],
                "sequence_fields": []
            }
        },
        "Generator._create_refinement": {
            "name": "_create_refinement",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "units": []
            }
        },
        "Generator._create_type": {
            "name": "_create_type",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "field_type": [],
                "message_package": [],
                "units": []
            }
        },
        "Generator._create_sequence": {
            "name": "_create_sequence",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_type": []
            }
        },
        "Generator._integer_functions": {
            "name": "_integer_functions",
            "location": 710,
            "return": [],
            "arguments": {
                "self": [],
                "integer": []
            }
        },
        "Generator._enumeration_functions": {
            "name": "_enumeration_functions",
            "location": 762,
            "return": [],
            "arguments": {
                "self": [],
                "enum": []
            }
        },
        "Generator._create_contains_function": {
            "name": "_create_contains_function",
            "location": 909,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "condition_fields": [],
                "null_sdu": []
            }
        },
        "Generator._create_switch_procedure": {
            "name": "_create_switch_procedure",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "condition_fields": []
            }
        },
        "Generator._create_copy_refined_field_procedure": {
            "name": "_create_copy_refined_field_procedure",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "condition_fields": []
            }
        },
        "Generator._check_template_file": {
            "name": "_check_template_file",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Generator._license_header": {
            "name": "_license_header",
            "location": 1291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator._type_validation_function": {
            "name": "_type_validation_function",
            "location": 1308,
            "return": [],
            "arguments": {
                "self": [],
                "type_name": [],
                "enum_value": [],
                "validation_expression": []
            }
        },
        "Generator._integer_conversion_functions": {
            "name": "_integer_conversion_functions",
            "location": 1320,
            "return": [],
            "arguments": {
                "self": [],
                "integer": []
            }
        },
        "Generator._refinement_conditions": {
            "name": "_refinement_conditions",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "pdu_context": [],
                "condition_fields": [],
                "null_sdu": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/message.py": {
        "create_use_type_clause": {
            "name": "create_use_type_clause",
            "location": 109,
            "return": [],
            "arguments": {
                "composite_fields": [],
                "offset": []
            }
        },
        "create_allow_unevaluated_use_of_old": {
            "name": "create_allow_unevaluated_use_of_old",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "create_field_type": {
            "name": "create_field_type",
            "location": 183,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_state_type": {
            "name": "create_state_type",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "create_cursor_type": {
            "name": "create_cursor_type",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "create_cursor_validation_functions": {
            "name": "create_cursor_validation_functions",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "create_valid_context_function": {
            "name": "create_valid_context_function",
            "location": 294,
            "return": [],
            "arguments": {
                "message": [],
                "composite_fields": [],
                "prefix": []
            }
        },
        "create_context_type": {
            "name": "create_context_type",
            "location": 350,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_initialize_procedure": {
            "name": "create_initialize_procedure",
            "location": 463,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_restricted_initialize_procedure": {
            "name": "create_restricted_initialize_procedure",
            "location": 568,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_initialized_function": {
            "name": "create_initialized_function",
            "location": 687,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_reset_procedure": {
            "name": "create_reset_procedure",
            "location": 748,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_restricted_reset_procedure": {
            "name": "create_restricted_reset_procedure",
            "location": 830,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_take_buffer_procedure": {
            "name": "create_take_buffer_procedure",
            "location": 907,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_copy_procedure": {
            "name": "create_copy_procedure",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "create_read_function": {
            "name": "create_read_function",
            "location": 1012,
            "return": [],
            "arguments": {}
        },
        "create_generic_read_procedure": {
            "name": "create_generic_read_procedure",
            "location": 1049,
            "return": [],
            "arguments": {}
        },
        "create_generic_write_procedure": {
            "name": "create_generic_write_procedure",
            "location": 1128,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_valid_value_function": {
            "name": "create_valid_value_function",
            "location": 1303,
            "return": [],
            "arguments": {
                "message": [],
                "scalar_fields": [],
                "prefix": []
            }
        },
        "create_path_condition_function": {
            "name": "create_path_condition_function",
            "location": 1358,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "create_field_size_function": {
            "name": "create_field_size_function",
            "location": 1444,
            "return": [],
            "arguments": {
                "message": [],
                "scalar_fields": [],
                "composite_fields": [],
                "prefix": []
            }
        },
        "create_field_first_function": {
            "name": "create_field_first_function",
            "location": 1514,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "create_field_last_function": {
            "name": "create_field_last_function",
            "location": 1612,
            "return": [],
            "arguments": {
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "create_field_condition_function": {
            "name": "create_field_condition_function",
            "location": 1678,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "create_predecessor_function": {
            "name": "create_predecessor_function",
            "location": 1785,
            "return": [],
            "arguments": {}
        },
        "create_successor_function": {
            "name": "create_successor_function",
            "location": 1828,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "create_invalid_successor_function": {
            "name": "create_invalid_successor_function",
            "location": 1880,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_has_buffer_function": {
            "name": "create_has_buffer_function",
            "location": 1924,
            "return": [],
            "arguments": {}
        },
        "create_buffer_length_function": {
            "name": "create_buffer_length_function",
            "location": 1935,
            "return": [],
            "arguments": {}
        },
        "create_valid_predecessor_function": {
            "name": "create_valid_predecessor_function",
            "location": 1951,
            "return": [],
            "arguments": {
                "message": [],
                "composite_fields": []
            }
        },
        "create_size_function": {
            "name": "create_size_function",
            "location": 2023,
            "return": [],
            "arguments": {}
        },
        "create_byte_size_function": {
            "name": "create_byte_size_function",
            "location": 2052,
            "return": [],
            "arguments": {}
        },
        "create_message_last_function": {
            "name": "create_message_last_function",
            "location": 2072,
            "return": [],
            "arguments": {}
        },
        "create_written_last_function": {
            "name": "create_written_last_function",
            "location": 2095,
            "return": [],
            "arguments": {}
        },
        "create_data_procedure": {
            "name": "create_data_procedure",
            "location": 2112,
            "return": [],
            "arguments": {}
        },
        "create_valid_next_function": {
            "name": "create_valid_next_function",
            "location": 2160,
            "return": [],
            "arguments": {}
        },
        "create_available_space_function": {
            "name": "create_available_space_function",
            "location": 2181,
            "return": [],
            "arguments": {}
        },
        "create_equal_function": {
            "name": "create_equal_function",
            "location": 2208,
            "return": [],
            "arguments": {
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "create_sufficient_buffer_length_function": {
            "name": "create_sufficient_buffer_length_function",
            "location": 2308,
            "return": [],
            "arguments": {}
        },
        "create_reset_dependent_fields_procedure": {
            "name": "create_reset_dependent_fields_procedure",
            "location": 2353,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "create_composite_field_function": {
            "name": "create_composite_field_function",
            "location": 2504,
            "return": [],
            "arguments": {
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "create_switch_procedures": {
            "name": "create_switch_procedures",
            "location": 2527,
            "return": [],
            "arguments": {
                "message": [],
                "sequence_fields": [],
                "prefix": []
            }
        },
        "create_complete_functions": {
            "name": "create_complete_functions",
            "location": 2686,
            "return": [],
            "arguments": {
                "message": [],
                "sequence_fields": []
            }
        },
        "create_update_procedures": {
            "name": "create_update_procedures",
            "location": 2736,
            "return": [],
            "arguments": {
                "message": [],
                "sequence_fields": []
            }
        },
        "create_cursor_function": {
            "name": "create_cursor_function",
            "location": 2888,
            "return": [],
            "arguments": {}
        },
        "create_cursors_function": {
            "name": "create_cursors_function",
            "location": 2910,
            "return": [],
            "arguments": {}
        },
        "create_cursors_index_function": {
            "name": "create_cursors_index_function",
            "location": 2926,
            "return": [],
            "arguments": {}
        },
        "create_structure": {
            "name": "create_structure",
            "location": 2948,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "_create_structure_type": {
            "name": "_create_structure_type",
            "location": 2961,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "_create_valid_structure_function": {
            "name": "_create_valid_structure_function",
            "location": 3008,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "_create_sufficient_buffer_length_function": {
            "name": "_create_sufficient_buffer_length_function",
            "location": 3065,
            "return": [],
            "arguments": {
                "message": [],
                "prefix": []
            }
        },
        "_create_to_structure_procedure": {
            "name": "_create_to_structure_procedure",
            "location": 3115,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "_struct_substitution": {
            "name": "_struct_substitution",
            "location": 3215,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "_create_to_context_procedure": {
            "name": "_create_to_context_procedure",
            "location": 3248,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "_switch_update_conditions": {
            "name": "_switch_update_conditions",
            "location": 3356,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "create_path_condition_function.condition": {
            "name": "condition",
            "location": 1361,
            "return": [],
            "arguments": {
                "field": [],
                "message": []
            }
        },
        "create_field_first_function.first": {
            "name": "first",
            "location": 1529,
            "return": [],
            "arguments": {
                "link": [],
                "message": []
            }
        },
        "create_field_condition_function.condition": {
            "name": "condition",
            "location": 1689,
            "return": [],
            "arguments": {
                "field": [],
                "message": []
            }
        },
        "create_switch_procedures.specification": {
            "name": "specification",
            "location": 2530,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "create_complete_functions.specification": {
            "name": "specification",
            "location": 2689,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "create_update_procedures.specification": {
            "name": "specification",
            "location": 2739,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "create_update_procedures.take_buffer_arguments": {
            "name": "take_buffer_arguments",
            "location": 2748,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "_struct_substitution.func": {
            "name": "func",
            "location": 3218,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "create_field_first_function.first.substituted": {
            "name": "substituted",
            "location": 1530,
            "return": [],
            "arguments": {
                "expression": [],
                "target_type": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/parser.py": {
        "set_context_cursor_scalar": {
            "name": "set_context_cursor_scalar",
            "location": 1115,
            "return": [],
            "arguments": {}
        },
        "set_context_cursor_composite_field": {
            "name": "set_context_cursor_composite_field",
            "location": 1131,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "ParserGenerator.create_get_function": {
            "name": "create_get_function",
            "location": 73,
            "return": [],
            "arguments": {
                "message": [],
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "ParserGenerator.create_verify_procedure": {
            "name": "create_verify_procedure",
            "location": 217,
            "return": [],
            "arguments": {
                "message": [],
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "ParserGenerator.create_verify_message_procedure": {
            "name": "create_verify_message_procedure",
            "location": 487,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "ParserGenerator.create_present_function": {
            "name": "create_present_function",
            "location": 523,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_structural_valid_function": {
            "name": "create_structural_valid_function",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_valid_function": {
            "name": "create_valid_function",
            "location": 578,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_incomplete_function": {
            "name": "create_incomplete_function",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_invalid_function": {
            "name": "create_invalid_function",
            "location": 647,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_structural_valid_message_function": {
            "name": "create_structural_valid_message_function",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ParserGenerator.create_valid_message_function": {
            "name": "create_valid_message_function",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ParserGenerator.create_incomplete_message_function": {
            "name": "create_incomplete_message_function",
            "location": 712,
            "return": [],
            "arguments": {}
        },
        "ParserGenerator.create_scalar_getter_functions": {
            "name": "create_scalar_getter_functions",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "scalar_fields": []
            }
        },
        "ParserGenerator.create_opaque_getter_functions": {
            "name": "create_opaque_getter_functions",
            "location": 786,
            "return": [],
            "arguments": {
                "opaque_fields": []
            }
        },
        "ParserGenerator.create_opaque_getter_procedures": {
            "name": "create_opaque_getter_procedures",
            "location": 887,
            "return": [],
            "arguments": {
                "opaque_fields": []
            }
        },
        "ParserGenerator.create_generic_opaque_getter_procedures": {
            "name": "create_generic_opaque_getter_procedures",
            "location": 1004,
            "return": [],
            "arguments": {
                "opaque_fields": []
            }
        },
        "ParserGenerator.valid_message_condition": {
            "name": "valid_message_condition",
            "location": 1089,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "structural": []
            }
        },
        "ParserGenerator.create_scalar_getter_functions.specification": {
            "name": "specification",
            "location": 746,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": []
            }
        },
        "ParserGenerator.create_scalar_getter_functions.result": {
            "name": "result",
            "location": 756,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "ParserGenerator.create_opaque_getter_functions.name": {
            "name": "name",
            "location": 787,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "ParserGenerator.create_opaque_getter_functions.specification": {
            "name": "specification",
            "location": 790,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "ParserGenerator.create_opaque_getter_procedures.specification": {
            "name": "specification",
            "location": 888,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "ParserGenerator.create_generic_opaque_getter_procedures.specification": {
            "name": "specification",
            "location": 1005,
            "return": [],
            "arguments": {
                "field": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/serializer.py": {
        "SerializerGenerator.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SerializerGenerator.create_valid_size_function": {
            "name": "create_valid_size_function",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SerializerGenerator.create_valid_length_function": {
            "name": "create_valid_length_function",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "SerializerGenerator.requires_set_procedure": {
            "name": "requires_set_procedure",
            "location": 215,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "SerializerGenerator.create_set_procedure": {
            "name": "create_set_procedure",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "scalar_fields": [],
                "composite_fields": []
            }
        },
        "SerializerGenerator.create_scalar_setter_procedures": {
            "name": "create_scalar_setter_procedures",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "scalar_fields": []
            }
        },
        "SerializerGenerator.create_composite_setter_empty_procedures": {
            "name": "create_composite_setter_empty_procedures",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SerializerGenerator.create_sequence_setter_procedures": {
            "name": "create_sequence_setter_procedures",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sequence_fields": []
            }
        },
        "SerializerGenerator.create_opaque_setter_procedures": {
            "name": "create_opaque_setter_procedures",
            "location": 1020,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SerializerGenerator.create_generic_opaque_setter_procedures": {
            "name": "create_generic_opaque_setter_procedures",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SerializerGenerator.create_composite_initialize_procedures": {
            "name": "create_composite_initialize_procedures",
            "location": 1291,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "fields_with_explicit_size": [],
                "fields_with_implicit_size": []
            }
        },
        "SerializerGenerator.setter_preconditions": {
            "name": "setter_preconditions",
            "location": 1530,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "SerializerGenerator.private_setter_postconditions": {
            "name": "private_setter_postconditions",
            "location": 1537,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "field": []
            }
        },
        "SerializerGenerator.public_setter_postconditions": {
            "name": "public_setter_postconditions",
            "location": 1549,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "field": []
            }
        },
        "SerializerGenerator.last_predecessor_relation": {
            "name": "last_predecessor_relation",
            "location": 1575,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "SerializerGenerator.setter_postconditions": {
            "name": "setter_postconditions",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "field": []
            }
        },
        "SerializerGenerator.composite_setter_postconditions": {
            "name": "composite_setter_postconditions",
            "location": 1635,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.composite_setter_field_condition_precondition": {
            "name": "composite_setter_field_condition_precondition",
            "location": 1642,
            "return": [],
            "arguments": {
                "message": [],
                "field": [],
                "empty": []
            }
        },
        "SerializerGenerator.composite_setter_preconditions": {
            "name": "composite_setter_preconditions",
            "location": 1655,
            "return": [],
            "arguments": {
                "field": [],
                "size": []
            }
        },
        "SerializerGenerator.scalar_setter_and_getter_relation": {
            "name": "scalar_setter_and_getter_relation",
            "location": 1660,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "scalar_fields": []
            }
        },
        "SerializerGenerator._update_last": {
            "name": "_update_last",
            "location": 1722,
            "return": [],
            "arguments": {
                "message": [],
                "field": []
            }
        },
        "SerializerGenerator.create_set_procedure.specification": {
            "name": "specification",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "SerializerGenerator.create_set_procedure.set_context_cursor": {
            "name": "set_context_cursor",
            "location": 249,
            "return": [],
            "arguments": {
                "field_type": []
            }
        },
        "SerializerGenerator.create_scalar_setter_procedures.specification": {
            "name": "specification",
            "location": 536,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": [],
                "use_enum_records_directly": []
            }
        },
        "SerializerGenerator.create_scalar_setter_procedures.precondition": {
            "name": "precondition",
            "location": 559,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": [],
                "use_enum_records_directly": []
            }
        },
        "SerializerGenerator.create_scalar_setter_procedures.postcondition": {
            "name": "postcondition",
            "location": 582,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": [],
                "use_enum_records_directly": []
            }
        },
        "SerializerGenerator.create_scalar_setter_procedures.body": {
            "name": "body",
            "location": 611,
            "return": [],
            "arguments": {
                "field": [],
                "field_type": [],
                "use_enum_records_directly": []
            }
        },
        "SerializerGenerator.create_composite_setter_empty_procedures.specification": {
            "name": "specification",
            "location": 824,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_sequence_setter_procedures.specification": {
            "name": "specification",
            "location": 899,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_opaque_setter_procedures.specification": {
            "name": "specification",
            "location": 1021,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_generic_opaque_setter_procedures.specification": {
            "name": "specification",
            "location": 1157,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_generic_opaque_setter_procedures.formal_parameters": {
            "name": "formal_parameters",
            "location": 1163,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_composite_initialize_procedures.specification_private": {
            "name": "specification_private",
            "location": 1297,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_composite_initialize_procedures.specification_public": {
            "name": "specification_public",
            "location": 1303,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "SerializerGenerator.create_composite_initialize_procedures.specification_public_with_length": {
            "name": "specification_public_with_length",
            "location": 1308,
            "return": [],
            "arguments": {
                "field": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/session.py": {
        "copy_id": {
            "name": "copy_id",
            "location": 4790,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "variable_id": {
            "name": "variable_id",
            "location": 4794,
            "return": [],
            "arguments": {
                "identifier": [],
                "is_global": []
            }
        },
        "context_id": {
            "name": "context_id",
            "location": 4803,
            "return": [],
            "arguments": {
                "identifier": [],
                "is_global": []
            }
        },
        "buffer_id": {
            "name": "buffer_id",
            "location": 4812,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "_unexpected_expression": {
            "name": "_unexpected_expression",
            "location": 4816,
            "return": [],
            "arguments": {
                "expression": [],
                "context": []
            }
        },
        "_unsupported_expression": {
            "name": "_unsupported_expression",
            "location": 4824,
            "return": [],
            "arguments": {
                "expression": [],
                "context": []
            }
        },
        "EvaluatedDeclaration.__iadd__": {
            "name": "__iadd__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExceptionHandler.execute": {
            "name": "execute",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionHandler.execute_deferred": {
            "name": "execute_deferred",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionHandler.local": {
            "name": "local",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "allocator": [],
                "prefix": [],
                "debug": []
            }
        },
        "SessionGenerator.unit_identifier": {
            "name": "unit_identifier",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator.declaration_context": {
            "name": "declaration_context",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator.body_context": {
            "name": "body_context",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator.unit_part": {
            "name": "unit_part",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator._ada_type": {
            "name": "_ada_type",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "SessionGenerator._model_type": {
            "name": "_model_type",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "SessionGenerator._create": {
            "name": "_create",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator._create_context": {
            "name": "_create_context",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator._create_use_clauses_body": {
            "name": "_create_use_clauses_body",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator._create_state_machine": {
            "name": "_create_state_machine",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionGenerator._channel_io": {
            "name": "_channel_io",
            "location": 413,
            "return": [],
            "arguments": {
                "session": [],
                "read": [],
                "write": []
            }
        },
        "SessionGenerator._create_use_clauses": {
            "name": "_create_use_clauses",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "used_types": []
            }
        },
        "SessionGenerator._create_channel_and_state_types": {
            "name": "_create_channel_and_state_types",
            "location": 451,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "SessionGenerator._create_context_type": {
            "name": "_create_context_type",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "initial_state": [],
                "global_variables": []
            }
        },
        "SessionGenerator._create_abstract_functions": {
            "name": "_create_abstract_functions",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "SessionGenerator._create_abstract_function": {
            "name": "_create_abstract_function",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "SessionGenerator._create_uninitialized_function": {
            "name": "_create_uninitialized_function",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "composite_globals": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_global_initialized_function": {
            "name": "_create_global_initialized_function",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "composite_globals": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_initialized_function": {
            "name": "_create_initialized_function",
            "location": 722,
            "return": [],
            "arguments": {
                "self": [],
                "composite_globals": []
            }
        },
        "SessionGenerator._create_states": {
            "name": "_create_states",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "composite_globals": [],
                "is_global": []
            }
        },
        "SessionGenerator._determine_next_state": {
            "name": "_determine_next_state",
            "location": 934,
            "return": [],
            "arguments": {
                "self": [],
                "transitions": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_active_function": {
            "name": "_create_active_function",
            "location": 965,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "SessionGenerator._create_initialize_procedure": {
            "name": "_create_initialize_procedure",
            "location": 986,
            "return": [],
            "arguments": {
                "session": [],
                "declarations": [],
                "initialization": []
            }
        },
        "SessionGenerator._create_finalize_procedure": {
            "name": "_create_finalize_procedure",
            "location": 1022,
            "return": [],
            "arguments": {
                "session": [],
                "declarations": [],
                "finalization": []
            }
        },
        "SessionGenerator._create_reset_messages_before_write_procedure": {
            "name": "_create_reset_messages_before_write_procedure",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_tick_procedure": {
            "name": "_create_tick_procedure",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "has_writes": []
            }
        },
        "SessionGenerator._create_run_procedure": {
            "name": "_create_run_procedure",
            "location": 1177,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "SessionGenerator._create_state_function": {
            "name": "_create_state_function",
            "location": 1241,
            "return": [],
            "arguments": {}
        },
        "SessionGenerator._create_has_data_function": {
            "name": "_create_has_data_function",
            "location": 1258,
            "return": [],
            "arguments": {
                "channel_writes": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_needs_data_function": {
            "name": "_create_needs_data_function",
            "location": 1327,
            "return": [],
            "arguments": {
                "channel_reads": []
            }
        },
        "SessionGenerator._create_read_buffer_size_function": {
            "name": "_create_read_buffer_size_function",
            "location": 1364,
            "return": [],
            "arguments": {
                "channel_writes": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_write_buffer_size_function": {
            "name": "_create_write_buffer_size_function",
            "location": 1425,
            "return": [],
            "arguments": {
                "channel_reads": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_read_procedure": {
            "name": "_create_read_procedure",
            "location": 1486,
            "return": [],
            "arguments": {
                "self": [],
                "channel_writes": [],
                "is_global": []
            }
        },
        "SessionGenerator._create_write_procedure": {
            "name": "_create_write_procedure",
            "location": 1675,
            "return": [],
            "arguments": {
                "self": [],
                "channel_reads": [],
                "is_global": []
            }
        },
        "SessionGenerator._evaluate_declarations": {
            "name": "_evaluate_declarations",
            "location": 1882,
            "return": [],
            "arguments": {
                "self": [],
                "declarations": [],
                "is_global": [],
                "session_global": []
            }
        },
        "SessionGenerator._state_action": {
            "name": "_state_action",
            "location": 1942,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "action": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._declare": {
            "name": "_declare",
            "location": 2002,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_": [],
                "is_global": [],
                "alloc_id": [],
                "expression": [],
                "constant": [],
                "session_global": []
            }
        },
        "SessionGenerator._declare_and_assign": {
            "name": "_declare_and_assign",
            "location": 2126,
            "return": [],
            "arguments": {
                "self": [],
                "variables": [],
                "statements": [],
                "exception_handler": [],
                "is_global": [],
                "state": [],
                "alloc_id": [],
                "constant": []
            }
        },
        "SessionGenerator._assign": {
            "name": "_assign",
            "location": 2183,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_type": [],
                "expression": [],
                "exception_handler": [],
                "is_global": [],
                "state": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._assign_to_binding": {
            "name": "_assign_to_binding",
            "location": 2271,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "binding": [],
                "exception_handler": [],
                "is_global": [],
                "state": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._assign_to_selected": {
            "name": "_assign_to_selected",
            "location": 2345,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "selected": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._assign_to_message_aggregate": {
            "name": "_assign_to_message_aggregate",
            "location": 2420,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "message_aggregate": [],
                "exception_handler": [],
                "is_global": [],
                "state": []
            }
        },
        "SessionGenerator._assign_to_head": {
            "name": "_assign_to_head",
            "location": 2498,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "head": [],
                "exception_handler": [],
                "is_global": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._assign_to_comprehension": {
            "name": "_assign_to_comprehension",
            "location": 2661,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_type": [],
                "comprehension": [],
                "exception_handler": [],
                "is_global": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._assign_to_call": {
            "name": "_assign_to_call",
            "location": 2786,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "call_expr": [],
                "exception_handler": [],
                "is_global": [],
                "state": []
            }
        },
        "SessionGenerator._assign_to_conversion": {
            "name": "_assign_to_conversion",
            "location": 3065,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "conversion": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._assign_message_field": {
            "name": "_assign_message_field",
            "location": 3126,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_field": [],
                "message_type": [],
                "value": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._append": {
            "name": "_append",
            "location": 3145,
            "return": [],
            "arguments": {
                "self": [],
                "append": [],
                "exception_handler": [],
                "is_global": [],
                "state": []
            }
        },
        "SessionGenerator._read": {
            "name": "_read",
            "location": 3271,
            "return": [],
            "arguments": {
                "read": [],
                "is_global": []
            }
        },
        "SessionGenerator._write": {
            "name": "_write",
            "location": 3284,
            "return": [],
            "arguments": {
                "write": []
            }
        },
        "SessionGenerator._reset": {
            "name": "_reset",
            "location": 3294,
            "return": [],
            "arguments": {
                "self": [],
                "reset": [],
                "is_global": []
            }
        },
        "SessionGenerator._message_size": {
            "name": "_message_size",
            "location": 3314,
            "return": [],
            "arguments": {
                "self": [],
                "message_aggregate": []
            }
        },
        "SessionGenerator._required_space": {
            "name": "_required_space",
            "location": 3319,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "is_global": [],
                "state": []
            }
        },
        "SessionGenerator._substitution": {
            "name": "_substitution",
            "location": 3349,
            "return": [],
            "arguments": {
                "self": [],
                "is_global": []
            }
        },
        "SessionGenerator._if": {
            "name": "_if",
            "location": 3595,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "statements": [],
                "error_message": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._if_valid_sequence": {
            "name": "_if_valid_sequence",
            "location": 3612,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_type": [],
                "sequence_context": [],
                "statements": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._if_structural_valid_message": {
            "name": "_if_structural_valid_message",
            "location": 3626,
            "return": [],
            "arguments": {
                "self": [],
                "message_type": [],
                "message_context": [],
                "statements": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._if_structural_valid_message_field": {
            "name": "_if_structural_valid_message_field",
            "location": 3643,
            "return": [],
            "arguments": {
                "self": [],
                "message_type": [],
                "message_context": [],
                "message_field": [],
                "statements": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._if_valid_fields": {
            "name": "_if_valid_fields",
            "location": 3664,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "statements": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._if_sufficient_space": {
            "name": "_if_sufficient_space",
            "location": 3690,
            "return": [],
            "arguments": {
                "self": [],
                "required_space": [],
                "target_context": [],
                "statements": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._if_sufficient_space_in_sequence": {
            "name": "_if_sufficient_space_in_sequence",
            "location": 3721,
            "return": [],
            "arguments": {
                "self": [],
                "required_space": [],
                "sequence_type": [],
                "sequence_context": [],
                "statements": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._ensure": {
            "name": "_ensure",
            "location": 3748,
            "return": [],
            "arguments": {
                "self": [],
                "statements": [],
                "property_expression": [],
                "error_message": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._raise_exception_if": {
            "name": "_raise_exception_if",
            "location": 3772,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "error_message": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._exit_on_deferred_exception": {
            "name": "_exit_on_deferred_exception",
            "location": 3791,
            "return": [],
            "arguments": {}
        },
        "SessionGenerator._set_message_fields": {
            "name": "_set_message_fields",
            "location": 3794,
            "return": [],
            "arguments": {
                "self": [],
                "target_context": [],
                "message_aggregate": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._set_message_field": {
            "name": "_set_message_field",
            "location": 3818,
            "return": [],
            "arguments": {
                "self": [],
                "message_context": [],
                "field": [],
                "message_type": [],
                "value": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._set_opaque_field": {
            "name": "_set_opaque_field",
            "location": 4052,
            "return": [],
            "arguments": {
                "target_type": [],
                "target_context": [],
                "field": [],
                "get_preconditions": [],
                "get_statements": [],
                "length": [],
                "pre_declarations": [],
                "post_statements": []
            }
        },
        "SessionGenerator._set_opaque_field_to_message_field": {
            "name": "_set_opaque_field_to_message_field",
            "location": 4102,
            "return": [],
            "arguments": {
                "self": [],
                "target_type": [],
                "target_context": [],
                "field": [],
                "message_type": [],
                "message_context": [],
                "message_field": []
            }
        },
        "SessionGenerator._set_opaque_field_to_message": {
            "name": "_set_opaque_field_to_message",
            "location": 4190,
            "return": [],
            "arguments": {
                "self": [],
                "target_type": [],
                "target_context": [],
                "field": [],
                "message_type": [],
                "message_context": []
            }
        },
        "SessionGenerator._declare_context_buffer": {
            "name": "_declare_context_buffer",
            "location": 4240,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_": [],
                "is_global": []
            }
        },
        "SessionGenerator._declare_context": {
            "name": "_declare_context",
            "location": 4251,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_": [],
                "is_global": []
            }
        },
        "SessionGenerator._declare_buffer": {
            "name": "_declare_buffer",
            "location": 4261,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "SessionGenerator._declare_sequence_copy": {
            "name": "_declare_sequence_copy",
            "location": 4264,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_identifier": [],
                "sequence_type": [],
                "statements": [],
                "exception_handler": [],
                "is_global": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._declare_message_field_sequence_copy": {
            "name": "_declare_message_field_sequence_copy",
            "location": 4311,
            "return": [],
            "arguments": {
                "self": [],
                "message_identifier": [],
                "message_type": [],
                "message_field": [],
                "sequence_identifier": [],
                "sequence_type": [],
                "statements": [],
                "exception_handler": [],
                "is_global": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._comprehension": {
            "name": "_comprehension",
            "location": 4372,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_identifier": [],
                "sequence_type": [],
                "target_identifier": [],
                "target_type": [],
                "iterator_identifier": [],
                "iterator_type": [],
                "selector": [],
                "condition": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._comprehension_append_element": {
            "name": "_comprehension_append_element",
            "location": 4501,
            "return": [],
            "arguments": {
                "self": [],
                "target_identifier": [],
                "target_type": [],
                "selector": [],
                "exception_handler": [],
                "is_global": []
            }
        },
        "SessionGenerator._free_context_buffer": {
            "name": "_free_context_buffer",
            "location": 4590,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_": [],
                "is_global": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._free_buffer": {
            "name": "_free_buffer",
            "location": 4602,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._take_buffer": {
            "name": "_take_buffer",
            "location": 4612,
            "return": [],
            "arguments": {
                "identifier": [],
                "type_": [],
                "is_global": [],
                "buf": []
            }
        },
        "SessionGenerator._update_context": {
            "name": "_update_context",
            "location": 4643,
            "return": [],
            "arguments": {
                "sequence_context": [],
                "element_context": [],
                "sequence_type": []
            }
        },
        "SessionGenerator._allocate_buffer": {
            "name": "_allocate_buffer",
            "location": 4671,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "alloc_id": []
            }
        },
        "SessionGenerator._initialize_context": {
            "name": "_initialize_context",
            "location": 4684,
            "return": [],
            "arguments": {
                "identifier": [],
                "type_": [],
                "is_global": [],
                "first": [],
                "last": [],
                "parameters": [],
                "written_last": []
            }
        },
        "SessionGenerator._copy_to_buffer": {
            "name": "_copy_to_buffer",
            "location": 4712,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "source_context": [],
                "target_buffer": [],
                "exception_handler": []
            }
        },
        "SessionGenerator._convert_type": {
            "name": "_convert_type",
            "location": 4761,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "target_type": [],
                "expression_type": []
            }
        },
        "SessionGenerator._debug_output": {
            "name": "_debug_output",
            "location": 4775,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "SessionGenerator._create_state_machine.is_global": {
            "name": "is_global",
            "location": 355,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "SessionGenerator._append.check": {
            "name": "check",
            "location": 3156,
            "return": [],
            "arguments": {
                "sequence_type": [],
                "required_space": [],
                "precondition": []
            }
        },
        "SessionGenerator._substitution.func": {
            "name": "func",
            "location": 3352,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "SessionGenerator._evaluate_declarations.always_true": {
            "name": "always_true",
            "location": 1890,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "RecordFlux-main/rflx/generator/__init__.py": {},
    "RecordFlux-main/rflx/model/basic_declaration.py": {
        "BasicDeclaration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "location": [],
                "error": []
            }
        },
        "BasicDeclaration.__hash__": {
            "name": "__hash__",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicDeclaration.full_name": {
            "name": "full_name",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicDeclaration.name": {
            "name": "name",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicDeclaration.package": {
            "name": "package",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/declaration.py": {
        "ada_type_name": {
            "name": "ada_type_name",
            "location": 287,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "Declaration.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "location": []
            }
        },
        "Declaration.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.reference": {
            "name": "reference",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.type_": {
            "name": "type_",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.is_referenced": {
            "name": "is_referenced",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.variables": {
            "name": "variables",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCheckableDeclaration.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "type_": [],
                "location": []
            }
        },
        "TypeCheckableDeclaration.type_identifier": {
            "name": "type_identifier",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCheckableDeclaration.type_": {
            "name": "type_",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TypeCheckableDeclaration.check_type": {
            "name": "check_type",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "declaration_type": [],
                "typify_variable": []
            }
        },
        "VariableDeclaration.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "expression": [],
                "type_": [],
                "location": []
            }
        },
        "VariableDeclaration.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.check_type": {
            "name": "check_type",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "declaration_type": [],
                "typify_variable": []
            }
        },
        "VariableDeclaration.variables": {
            "name": "variables",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenamingDeclaration.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "expression": [],
                "type_": [],
                "location": []
            }
        },
        "RenamingDeclaration.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RenamingDeclaration.check_type": {
            "name": "check_type",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "declaration_type": [],
                "typify_variable": []
            }
        },
        "RenamingDeclaration.variables": {
            "name": "variables",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormalDeclaration.variables": {
            "name": "variables",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_identifier": [],
                "type_": []
            }
        },
        "Argument.__str__": {
            "name": "__str__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.identifier": {
            "name": "identifier",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.type_identifier": {
            "name": "type_identifier",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionDeclaration.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "arguments": [],
                "return_type": [],
                "type_": [],
                "location": []
            }
        },
        "FunctionDeclaration.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionDeclaration.check_type": {
            "name": "check_type",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "declaration_type": [],
                "typify_variable": []
            }
        },
        "FunctionDeclaration.arguments": {
            "name": "arguments",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionDeclaration.return_type": {
            "name": "return_type",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelDeclaration.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "readable": [],
                "writable": [],
                "location": []
            }
        },
        "ChannelDeclaration.__str__": {
            "name": "__str__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelDeclaration.type_": {
            "name": "type_",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelDeclaration.readable": {
            "name": "readable",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelDeclaration.writable": {
            "name": "writable",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "TypeDeclaration.__str__": {
            "name": "__str__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDeclaration.type_": {
            "name": "type_",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/message.py": {
        "valid_message_field_types": {
            "name": "valid_message_field_types",
            "location": 95,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "expression_list": {
            "name": "expression_list",
            "location": 2415,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "to_mapping": {
            "name": "to_mapping",
            "location": 2421,
            "return": [],
            "arguments": {
                "facts": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Field.__hash__": {
            "name": "__hash__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__lt__": {
            "name": "__lt__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Field.name": {
            "name": "name",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.affixed_name": {
            "name": "affixed_name",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__eq__": {
            "name": "__eq__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Link.__hash__": {
            "name": "__hash__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.has_implicit_size": {
            "name": "has_implicit_size",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": [],
                "state": []
            }
        },
        "AbstractMessage.__hash__": {
            "name": "__hash__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.__eq__": {
            "name": "__eq__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractMessage.__repr__": {
            "name": "__repr__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.direct_dependencies": {
            "name": "direct_dependencies",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.dependencies": {
            "name": "dependencies",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.byte_order": {
            "name": "byte_order",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.copy": {
            "name": "copy",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "AbstractMessage.proven": {
            "name": "proven",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "AbstractMessage.parameters": {
            "name": "parameters",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.fields": {
            "name": "fields",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.all_fields": {
            "name": "all_fields",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.parameter_types": {
            "name": "parameter_types",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.field_types": {
            "name": "field_types",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.types": {
            "name": "types",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.checksums": {
            "name": "checksums",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.incoming": {
            "name": "incoming",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.outgoing": {
            "name": "outgoing",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.predecessors": {
            "name": "predecessors",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.successors": {
            "name": "successors",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.direct_predecessors": {
            "name": "direct_predecessors",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.direct_successors": {
            "name": "direct_successors",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.definite_predecessors": {
            "name": "definite_predecessors",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.path_condition": {
            "name": "path_condition",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.field_size": {
            "name": "field_size",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.paths": {
            "name": "paths",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "AbstractMessage.prefixed": {
            "name": "prefixed",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "AbstractMessage.type_constraints": {
            "name": "type_constraints",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "AbstractMessage.message_constraints": {
            "name": "message_constraints",
            "location": 467,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AbstractMessage._validate": {
            "name": "_validate",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage._validate_types": {
            "name": "_validate_types",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "type_fields": [],
                "structure_fields": []
            }
        },
        "AbstractMessage._validate_initial_link": {
            "name": "_validate_initial_link",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage._validate_names": {
            "name": "_validate_names",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "type_fields": []
            }
        },
        "AbstractMessage._validate_structure": {
            "name": "_validate_structure",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "structure_fields": []
            }
        },
        "AbstractMessage._validate_link_aspects": {
            "name": "_validate_link_aspects",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage._normalize": {
            "name": "_normalize",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage._compute_topological_sorting": {
            "name": "_compute_topological_sorting",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "has_unreachable": []
            }
        },
        "AbstractMessage._compute_definite_predecessors": {
            "name": "_compute_definite_predecessors",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "final": []
            }
        },
        "AbstractMessage._compute_path_condition": {
            "name": "_compute_path_condition",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": [],
                "state": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "Message.verify": {
            "name": "verify",
            "location": 821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.copy": {
            "name": "copy",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "Message.proven": {
            "name": "proven",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "Message.is_possibly_empty": {
            "name": "is_possibly_empty",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Message.set_refinements": {
            "name": "set_refinements",
            "location": 877,
            "return": [],
            "arguments": {
                "self": [],
                "refinements": []
            }
        },
        "Message.type_": {
            "name": "type_",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.has_fixed_size": {
            "name": "has_fixed_size",
            "location": 902,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.has_implicit_size": {
            "name": "has_implicit_size",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.is_definite": {
            "name": "is_definite",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.size": {
            "name": "size",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "field_values": []
            }
        },
        "Message.max_size": {
            "name": "max_size",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.max_field_sizes": {
            "name": "max_field_sizes",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._max_value": {
            "name": "_max_value",
            "location": 1108,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "path": []
            }
        },
        "Message._verify_expression_types": {
            "name": "_verify_expression_types",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._verify_expressions": {
            "name": "_verify_expressions",
            "location": 1183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._check_attributes": {
            "name": "_check_attributes",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "location": []
            }
        },
        "Message._check_first_expression": {
            "name": "_check_first_expression",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": [],
                "link": [],
                "location": []
            }
        },
        "Message._check_size_expression": {
            "name": "_check_size_expression",
            "location": 1224,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Message._verify_checksums": {
            "name": "_verify_checksums",
            "location": 1262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_conflicting_conditions": {
            "name": "_prove_conflicting_conditions",
            "location": 1383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_reachability": {
            "name": "_prove_reachability",
            "location": 1432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_contradictions": {
            "name": "_prove_contradictions",
            "location": 1499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_coverage": {
            "name": "_prove_coverage",
            "location": 1545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_overlays": {
            "name": "_prove_overlays",
            "location": 1614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_field_positions": {
            "name": "_prove_field_positions",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_message_size": {
            "name": "_prove_message_size",
            "location": 1767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message._prove_path_property": {
            "name": "_prove_path_property",
            "location": 1816,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "path": []
            }
        },
        "Message._target_first": {
            "name": "_target_first",
            "location": 1824,
            "return": [],
            "arguments": {
                "link": []
            }
        },
        "Message._target_size": {
            "name": "_target_size",
            "location": 1831,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Message._target_last": {
            "name": "_target_last",
            "location": 1836,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Message._link_expression": {
            "name": "_link_expression",
            "location": 1843,
            "return": [],
            "arguments": {
                "self": [],
                "link": [],
                "ignore_implicit_sizes": []
            }
        },
        "DerivedMessage.__init__": {
            "name": "__init__",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "base": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "DerivedMessage.copy": {
            "name": "copy",
            "location": 1897,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "DerivedMessage.proven": {
            "name": "proven",
            "location": 1918,
            "return": [],
            "arguments": {
                "self": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "UnprovenMessage.copy": {
            "name": "copy",
            "location": 1924,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "UnprovenMessage.proven": {
            "name": "proven",
            "location": 1944,
            "return": [],
            "arguments": {
                "self": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "UnprovenMessage.merged": {
            "name": "merged",
            "location": 1959,
            "return": [],
            "arguments": {
                "self": [],
                "message_arguments": []
            }
        },
        "UnprovenMessage._merge_inner_message": {
            "name": "_merge_inner_message",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "field": [],
                "inner_message": [],
                "message_arguments": []
            }
        },
        "UnprovenMessage._replace_message_attributes": {
            "name": "_replace_message_attributes",
            "location": 2088,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "UnprovenMessage._check_message_attributes": {
            "name": "_check_message_attributes",
            "location": 2131,
            "return": [],
            "arguments": {
                "message": [],
                "inner_message": [],
                "field": []
            }
        },
        "UnprovenMessage._check_name_conflicts": {
            "name": "_check_name_conflicts",
            "location": 2169,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "inner_message": [],
                "field": []
            }
        },
        "UnprovenMessage._prune_dangling_fields": {
            "name": "_prune_dangling_fields",
            "location": 2203,
            "return": [],
            "arguments": {
                "structure": [],
                "types": [],
                "byte_order": []
            }
        },
        "UnprovenDerivedMessage.__init__": {
            "name": "__init__",
            "location": 2226,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "base": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "UnprovenDerivedMessage.copy": {
            "name": "copy",
            "location": 2268,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "structure": [],
                "types": [],
                "checksums": [],
                "byte_order": [],
                "location": [],
                "error": []
            }
        },
        "UnprovenDerivedMessage.proven": {
            "name": "proven",
            "location": 2289,
            "return": [],
            "arguments": {
                "self": [],
                "skip_proof": [],
                "workers": []
            }
        },
        "Refinement.__init__": {
            "name": "__init__",
            "location": 2304,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "pdu": [],
                "field": [],
                "sdu": [],
                "condition": [],
                "location": [],
                "error": []
            }
        },
        "Refinement.__str__": {
            "name": "__str__",
            "location": 2389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Refinement.__eq__": {
            "name": "__eq__",
            "location": 2393,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Refinement.__hash__": {
            "name": "__hash__",
            "location": 2403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Refinement.direct_dependencies": {
            "name": "direct_dependencies",
            "location": 2407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Refinement.dependencies": {
            "name": "dependencies",
            "location": 2411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMessage.prefixed.prefixed_expression": {
            "name": "prefixed_expression",
            "location": 375,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "AbstractMessage.type_constraints.get_constraints": {
            "name": "get_constraints",
            "location": 417,
            "return": [],
            "arguments": {
                "aggregate": [],
                "field": []
            }
        },
        "AbstractMessage._normalize.qualify_enum_literals": {
            "name": "qualify_enum_literals",
            "location": 717,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Message.size.remove_variable_prefix": {
            "name": "remove_variable_prefix",
            "location": 950,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Message._verify_expression_types.typed_variable": {
            "name": "typed_variable",
            "location": 1129,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Message._verify_checksums.valid_lower": {
            "name": "valid_lower",
            "location": 1263,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Message._verify_checksums.valid_upper": {
            "name": "valid_upper",
            "location": 1271,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Message._prove_reachability.has_final": {
            "name": "has_final",
            "location": 1433,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "UnprovenMessage._replace_message_attributes.replace": {
            "name": "replace",
            "location": 2091,
            "return": [],
            "arguments": {
                "expression": []
            }
        }
    },
    "RecordFlux-main/rflx/model/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "types": [],
                "sessions": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.types": {
            "name": "types",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.messages": {
            "name": "messages",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.refinements": {
            "name": "refinements",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.sessions": {
            "name": "sessions",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.create_specifications": {
            "name": "create_specifications",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.write_specification_files": {
            "name": "write_specification_files",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "output_dir": []
            }
        },
        "Model._add_missing_types_and_validate": {
            "name": "_add_missing_types_and_validate",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._check_duplicates": {
            "name": "_check_duplicates",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._check_conflicts": {
            "name": "_check_conflicts",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/package.py": {
        "Package.imports_str": {
            "name": "imports_str",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.begin_str": {
            "name": "begin_str",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.end_str": {
            "name": "end_str",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.types_str": {
            "name": "types_str",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.sessions_str": {
            "name": "sessions_str",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/session.py": {
        "Transition.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "condition": [],
                "description": [],
                "location": []
            }
        },
        "Transition.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transition.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "transitions": [],
                "exception_transition": [],
                "actions": [],
                "declarations": [],
                "description": [],
                "location": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.identifier": {
            "name": "identifier",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.transitions": {
            "name": "transitions",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.exception_transition": {
            "name": "exception_transition",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.actions": {
            "name": "actions",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.is_null": {
            "name": "is_null",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.has_exceptions": {
            "name": "has_exceptions",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSession.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "initial": [],
                "final": [],
                "states": [],
                "declarations": [],
                "parameters": [],
                "types": [],
                "location": []
            }
        },
        "AbstractSession.__eq__": {
            "name": "__eq__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractSession.__repr__": {
            "name": "__repr__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSession.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSession.literals": {
            "name": "literals",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSession._resolve_function_calls": {
            "name": "_resolve_function_calls",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "initial": [],
                "final": [],
                "states": [],
                "declarations": [],
                "parameters": [],
                "types": [],
                "location": []
            }
        },
        "Session._validate_states": {
            "name": "_validate_states",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session._validate_state_existence": {
            "name": "_validate_state_existence",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session._validate_duplicate_states": {
            "name": "_validate_duplicate_states",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session._validate_state_reachability": {
            "name": "_validate_state_reachability",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session._validate_declarations": {
            "name": "_validate_declarations",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "declarations": [],
                "visible_declarations": []
            }
        },
        "Session._validate_actions": {
            "name": "_validate_actions",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "actions": [],
                "declarations": [],
                "local_declarations": []
            }
        },
        "Session._validate_transitions": {
            "name": "_validate_transitions",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "declarations": []
            }
        },
        "Session._validate_usage": {
            "name": "_validate_usage",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session._typify_variable": {
            "name": "_typify_variable",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "declarations": []
            }
        },
        "Session._reference_variable_declaration": {
            "name": "_reference_variable_declaration",
            "location": 654,
            "return": [],
            "arguments": {
                "variables": [],
                "declarations": []
            }
        },
        "Session._validate": {
            "name": "_validate",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnprovenSession.__init__": {
            "name": "__init__",
            "location": 681,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "initial": [],
                "final": [],
                "states": [],
                "declarations": [],
                "parameters": [],
                "types": [],
                "location": []
            }
        },
        "UnprovenSession.proven": {
            "name": "proven",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSession._resolve_function_calls.substitution": {
            "name": "substitution",
            "location": 223,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "Session._validate_declarations.undefined_type": {
            "name": "undefined_type",
            "location": 386,
            "return": [],
            "arguments": {
                "type_identifier": [],
                "location": []
            }
        }
    },
    "RecordFlux-main/rflx/model/statement.py": {
        "Statement.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "type_": [],
                "location": []
            }
        },
        "Statement.check_type": {
            "name": "check_type",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "Statement.variables": {
            "name": "variables",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "expression": [],
                "type_": [],
                "location": []
            }
        },
        "Assignment.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Assignment.check_type": {
            "name": "check_type",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "Assignment.variables": {
            "name": "variables",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageFieldAssignment.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "field": [],
                "value": [],
                "type_": [],
                "location": []
            }
        },
        "MessageFieldAssignment.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageFieldAssignment.check_type": {
            "name": "check_type",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "MessageFieldAssignment.variables": {
            "name": "variables",
            "location": 90,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeStatement.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "attribute": [],
                "parameters": [],
                "type_": [],
                "location": []
            }
        },
        "AttributeStatement.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeStatement.check_type": {
            "name": "check_type",
            "location": 111,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "AttributeStatement.variables": {
            "name": "variables",
            "location": 116,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListAttributeStatement.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "parameter": [],
                "type_": [],
                "location": []
            }
        },
        "Append.check_type": {
            "name": "check_type",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "Append.parameter": {
            "name": "parameter",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Extend.check_type": {
            "name": "check_type",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "Reset.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "associations": [],
                "type_": [],
                "location": []
            }
        },
        "Reset.check_type": {
            "name": "check_type",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "Reset.variables": {
            "name": "variables",
            "location": 209,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelAttributeStatement.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "parameter": [],
                "type_": [],
                "location": []
            }
        },
        "ChannelAttributeStatement.check_type": {
            "name": "check_type",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "ChannelAttributeStatement.parameter": {
            "name": "parameter",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelAttributeStatement._expected_channel_type": {
            "name": "_expected_channel_type",
            "location": 243,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Read._expected_channel_type": {
            "name": "_expected_channel_type",
            "location": 248,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Write._expected_channel_type": {
            "name": "_expected_channel_type",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/type_.py": {
        "is_internal_type": {
            "name": "is_internal_type",
            "location": 708,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "is_builtin_type": {
            "name": "is_builtin_type",
            "location": 714,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "internal_type_identifier": {
            "name": "internal_type_identifier",
            "location": 720,
            "return": [],
            "arguments": {
                "identifier": [],
                "package": []
            }
        },
        "enum_literals": {
            "name": "enum_literals",
            "location": 740,
            "return": [],
            "arguments": {
                "types": [],
                "package": []
            }
        },
        "qualified_enum_literals": {
            "name": "qualified_enum_literals",
            "location": 754,
            "return": [],
            "arguments": {
                "types": []
            }
        },
        "qualified_type_literals": {
            "name": "qualified_type_literals",
            "location": 763,
            "return": [],
            "arguments": {
                "types": []
            }
        },
        "Type.type_": {
            "name": "type_",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Type.direct_dependencies": {
            "name": "direct_dependencies",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Type.dependencies": {
            "name": "dependencies",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Type.qualified_identifier": {
            "name": "qualified_identifier",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "size": [],
                "location": []
            }
        },
        "Scalar.size": {
            "name": "size",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scalar.size_expr": {
            "name": "size_expr",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scalar.value_count": {
            "name": "value_count",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scalar.constraints": {
            "name": "constraints",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "proof": [],
                "same_package": []
            }
        },
        "Integer.type_": {
            "name": "type_",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.value_count": {
            "name": "value_count",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.first": {
            "name": "first",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.last": {
            "name": "last",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "modulus": [],
                "location": []
            }
        },
        "ModularInteger.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.modulus": {
            "name": "modulus",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.first": {
            "name": "first",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.last": {
            "name": "last",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModularInteger.constraints": {
            "name": "constraints",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "proof": [],
                "same_package": []
            }
        },
        "RangeInteger.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "first": [],
                "last": [],
                "size": [],
                "location": []
            }
        },
        "RangeInteger.__repr__": {
            "name": "__repr__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.__str__": {
            "name": "__str__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.first": {
            "name": "first",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.first_expr": {
            "name": "first_expr",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.last": {
            "name": "last",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.last_expr": {
            "name": "last_expr",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeInteger.constraints": {
            "name": "constraints",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "proof": [],
                "same_package": []
            }
        },
        "Enumeration.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "literals": [],
                "size": [],
                "always_valid": [],
                "location": []
            }
        },
        "Enumeration.__repr__": {
            "name": "__repr__",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enumeration.__str__": {
            "name": "__str__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enumeration.type_": {
            "name": "type_",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enumeration.value_count": {
            "name": "value_count",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enumeration.constraints": {
            "name": "constraints",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "proof": [],
                "same_package": []
            }
        },
        "Composite.element_size": {
            "name": "element_size",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "element_type": [],
                "location": []
            }
        },
        "Sequence.__repr__": {
            "name": "__repr__",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__str__": {
            "name": "__str__",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.type_": {
            "name": "type_",
            "location": 634,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.element_size": {
            "name": "element_size",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.direct_dependencies": {
            "name": "direct_dependencies",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.dependencies": {
            "name": "dependencies",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Opaque.__init__": {
            "name": "__init__",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "Opaque.__repr__": {
            "name": "__repr__",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Opaque.__str__": {
            "name": "__str__",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Opaque.type_": {
            "name": "type_",
            "location": 661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Opaque.element_size": {
            "name": "element_size",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Private.__init__": {
            "name": "__init__",
            "location": 670,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "location": []
            }
        },
        "Private.__repr__": {
            "name": "__repr__",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Private.__str__": {
            "name": "__str__",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Private.type_": {
            "name": "type_",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/model/__init__.py": {},
    "RecordFlux-main/rflx/pyrflx/bitstring.py": {
        "Bitstring.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bits": []
            }
        },
        "Bitstring.__add__": {
            "name": "__add__",
            "location": 12,
            "return": [
                "_TBitstring@@Bitstring@@"
            ],
            "arguments": {
                "self": [
                    "_TBitstring@@Bitstring@@"
                ],
                "other": []
            }
        },
        "Bitstring.__iadd__": {
            "name": "__iadd__",
            "location": 15,
            "return": [
                "_TBitstring@@Bitstring@@"
            ],
            "arguments": {
                "self": [
                    "_TBitstring@@Bitstring@@"
                ],
                "other": []
            }
        },
        "Bitstring.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "_TBitstring@@Bitstring@@"
            ],
            "arguments": {
                "self": [
                    "_TBitstring@@Bitstring@@"
                ],
                "key": []
            }
        },
        "Bitstring.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstring.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstring.__int__": {
            "name": "__int__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstring.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitstring.__bytes__": {
            "name": "__bytes__",
            "location": 38,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstring.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstring.swap_bitstring": {
            "name": "swap_bitstring",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "bitstring": []
            }
        },
        "Bitstring.swap": {
            "name": "swap",
            "location": 56,
            "return": [
                "_TBitstring@@Bitstring@@"
            ],
            "arguments": {
                "self": [
                    "_TBitstring@@Bitstring@@"
                ]
            }
        },
        "Bitstring.from_bytes": {
            "name": "from_bytes",
            "location": 60,
            "return": [
                "_TBitstring@@Bitstring@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBitstring]"
                ],
                "msg": []
            }
        },
        "Bitstring.valid_bitstring": {
            "name": "valid_bitstring",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "bitstring": []
            }
        },
        "Bitstring.join": {
            "name": "join",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/error.py": {
        "PyRFLXError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/package.py": {
        "Package.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Package.name": {
            "name": "name",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.new_message": {
            "name": "new_message",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "parameters": []
            }
        },
        "Package.set_message": {
            "name": "set_message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Package.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.set_checksum_functions": {
            "name": "set_checksum_functions",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "functions": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/pyrflx.py": {
        "PyRFLX.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "checksum_functions": [],
                "skip_message_verification": []
            }
        },
        "PyRFLX.from_specs": {
            "name": "from_specs",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [],
                "files": [],
                "skip_model_verification": [],
                "skip_message_verification": []
            }
        },
        "PyRFLX.set_checksum_functions": {
            "name": "set_checksum_functions",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "functions": []
            }
        },
        "PyRFLX.package": {
            "name": "package",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PyRFLX.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/typevalue.py": {
        "ChecksumFunction.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TypeValue.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "TypeValue.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeValue.equal_type": {
            "name": "equal_type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeValue.name": {
            "name": "name",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.identifier": {
            "name": "identifier",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.package": {
            "name": "package",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.initialized": {
            "name": "initialized",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue._raise_initialized": {
            "name": "_raise_initialized",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.clear": {
            "name": "clear",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.assign": {
            "name": "assign",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "TypeValue.parse": {
            "name": "parse",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "TypeValue.bitstring": {
            "name": "bitstring",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.size": {
            "name": "size",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.value": {
            "name": "value",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.accepted_type": {
            "name": "accepted_type",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.as_json": {
            "name": "as_json",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.clone": {
            "name": "clone",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeValue.construct": {
            "name": "construct",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [],
                "vtype": [],
                "imported": [],
                "refinements": []
            }
        },
        "ScalarValue.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "ScalarValue.expr": {
            "name": "expr",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarValue.size": {
            "name": "size",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "IntegerValue._first": {
            "name": "_first",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue._last": {
            "name": "_last",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.assign": {
            "name": "assign",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "IntegerValue.parse": {
            "name": "parse",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "IntegerValue.expr": {
            "name": "expr",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.value": {
            "name": "value",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.bitstring": {
            "name": "bitstring",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.accepted_type": {
            "name": "accepted_type",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegerValue.as_json": {
            "name": "as_json",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": [],
                "imported": []
            }
        },
        "EnumValue.assign": {
            "name": "assign",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "EnumValue.parse": {
            "name": "parse",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "EnumValue.clone": {
            "name": "clone",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.numeric_value": {
            "name": "numeric_value",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.value": {
            "name": "value",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.expr": {
            "name": "expr",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.bitstring": {
            "name": "bitstring",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.accepted_type": {
            "name": "accepted_type",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.literals": {
            "name": "literals",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.as_json": {
            "name": "as_json",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeValue.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "CompositeValue.set_expected_size": {
            "name": "set_expected_size",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "expected_size": []
            }
        },
        "CompositeValue._check_size_of_assigned_value": {
            "name": "_check_size_of_assigned_value",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CompositeValue.value": {
            "name": "value",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "OpaqueValue.assign": {
            "name": "assign",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "OpaqueValue.parse": {
            "name": "parse",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "OpaqueValue.set_refinement": {
            "name": "set_refinement",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "model_of_refinement_msg": []
            }
        },
        "OpaqueValue.size": {
            "name": "size",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.nested_message": {
            "name": "nested_message",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.value": {
            "name": "value",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.bitstring": {
            "name": "bitstring",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.accepted_type": {
            "name": "accepted_type",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpaqueValue.as_json": {
            "name": "as_json",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "vtype": []
            }
        },
        "SequenceValue.assign": {
            "name": "assign",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "SequenceValue.parse": {
            "name": "parse",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "SequenceValue.size": {
            "name": "size",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.value": {
            "name": "value",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.bitstring": {
            "name": "bitstring",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.accepted_type": {
            "name": "accepted_type",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.element_type": {
            "name": "element_type",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceValue.as_json": {
            "name": "as_json",
            "location": 545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.__init__": {
            "name": "__init__",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "refinements": [],
                "skip_verification": [],
                "parameters": [],
                "state": []
            }
        },
        "MessageValue.add_refinement": {
            "name": "add_refinement",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": []
            }
        },
        "MessageValue.add_parameters": {
            "name": "add_parameters",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "MessageValue.clone": {
            "name": "clone",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.__eq__": {
            "name": "__eq__",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MessageValue.equal_type": {
            "name": "equal_type",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MessageValue.model": {
            "name": "model",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.path": {
            "name": "path",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.inner_messages": {
            "name": "inner_messages",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.as_json": {
            "name": "as_json",
            "location": 705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue._valid_refinement_condition": {
            "name": "_valid_refinement_condition",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": []
            }
        },
        "MessageValue._next_link": {
            "name": "_next_link",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "source_field_name": []
            }
        },
        "MessageValue._next_field": {
            "name": "_next_field",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "append_to_path": []
            }
        },
        "MessageValue._prev_field": {
            "name": "_prev_field",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "fld": []
            }
        },
        "MessageValue._get_size": {
            "name": "_get_size",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "fld": []
            }
        },
        "MessageValue._get_first": {
            "name": "_get_first",
            "location": 790,
            "return": [],
            "arguments": {
                "self": [],
                "fld": []
            }
        },
        "MessageValue.accepted_type": {
            "name": "accepted_type",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.size": {
            "name": "size",
            "location": 814,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.assign": {
            "name": "assign",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "MessageValue.parse": {
            "name": "parse",
            "location": 820,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "check": []
            }
        },
        "MessageValue._set_unchecked": {
            "name": "_set_unchecked",
            "location": 895,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "value": []
            }
        },
        "MessageValue._set_checked": {
            "name": "_set_checked",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "value": [],
                "message_size": []
            }
        },
        "MessageValue.set": {
            "name": "set",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "value": []
            }
        },
        "MessageValue._set_parsed_value": {
            "name": "_set_parsed_value",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "value": [],
                "message_size": []
            }
        },
        "MessageValue._preset_fields": {
            "name": "_preset_fields",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": [],
                "fld": []
            }
        },
        "MessageValue.set_checksum_function": {
            "name": "set_checksum_function",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "checksums": []
            }
        },
        "MessageValue._is_checksum_settable": {
            "name": "_is_checksum_settable",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": [],
                "checksum": []
            }
        },
        "MessageValue.update_checksums": {
            "name": "update_checksums",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue._calculate_checksum": {
            "name": "_calculate_checksum",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": [],
                "checksum": []
            }
        },
        "MessageValue.get": {
            "name": "get",
            "location": 1177,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "MessageValue.bitstring": {
            "name": "bitstring",
            "location": 1188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.value": {
            "name": "value",
            "location": 1219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue._unchecked_bytestring": {
            "name": "_unchecked_bytestring",
            "location": 1222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.bytestring": {
            "name": "bytestring",
            "location": 1230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.fields": {
            "name": "fields",
            "location": 1236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue._is_valid_composite_field": {
            "name": "_is_valid_composite_field",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "MessageValue.valid_fields": {
            "name": "valid_fields",
            "location": 1262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.required_fields": {
            "name": "required_fields",
            "location": 1276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.valid_message": {
            "name": "valid_message",
            "location": 1282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue._update_simplified_mapping": {
            "name": "_update_simplified_mapping",
            "location": 1293,
            "return": [],
            "arguments": {
                "self": [],
                "message_size": [],
                "field": []
            }
        },
        "MessageValue._simplified": {
            "name": "_simplified",
            "location": 1348,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "max_iterations": []
            }
        },
        "RefinementValue.__init__": {
            "name": "__init__",
            "location": 1484,
            "return": [],
            "arguments": {
                "self": [],
                "refinement": [],
                "sdu_message": []
            }
        },
        "MessageValue.parse.get_current_pos_in_bitstr": {
            "name": "get_current_pos_in_bitstr",
            "location": 829,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "MessageValue.parse.set_field_without_size": {
            "name": "set_field_without_size",
            "location": 844,
            "return": [],
            "arguments": {
                "field_name": [],
                "field": []
            }
        },
        "MessageValue.parse.set_field_with_size": {
            "name": "set_field_with_size",
            "location": 855,
            "return": [],
            "arguments": {
                "field_name": [],
                "field_size": []
            }
        },
        "MessageValue._set_checked.set_refinement": {
            "name": "set_refinement",
            "location": 918,
            "return": [],
            "arguments": {
                "fld": [],
                "fld_name": []
            }
        },
        "MessageValue._set_checked.check_outgoing_condition_satisfied": {
            "name": "check_outgoing_condition_satisfied",
            "location": 928,
            "return": [],
            "arguments": {}
        },
        "MessageValue._is_checksum_settable.valid_path": {
            "name": "valid_path",
            "location": 1082,
            "return": [],
            "arguments": {
                "value_range": []
            }
        },
        "MessageValue._simplified.subst": {
            "name": "subst",
            "location": 1352,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "MessageValue.Checksum.__init__": {
            "name": "__init__",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "parameters": []
            }
        },
        "MessageValue.Field.__init__": {
            "name": "__init__",
            "location": 1416,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "name": [],
                "name_variable": [],
                "name_first": [],
                "name_last": [],
                "name_size": []
            }
        },
        "MessageValue.Field._calculate_last": {
            "name": "_calculate_last",
            "location": 1439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.Field.first": {
            "name": "first",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": [],
                "first": []
            }
        },
        "MessageValue.Field.__eq__": {
            "name": "__eq__",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MessageValue.Field.set": {
            "name": "set",
            "location": 1464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageValue.Field.last": {
            "name": "last",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/utils.py": {
        "internet_checksum": {
            "name": "internet_checksum",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "checksum_bytes": []
            }
        },
        "internet_checksum.add_ones_complement": {
            "name": "add_ones_complement",
            "location": 2,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        }
    },
    "RecordFlux-main/rflx/pyrflx/__init__.py": {},
    "RecordFlux-main/rflx/specification/cache.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "enabled": []
            }
        },
        "Cache.is_verified": {
            "name": "is_verified",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Cache.add_verified": {
            "name": "add_verified",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Cache._load_cache": {
            "name": "_load_cache",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cache._write_cache": {
            "name": "_write_cache",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cache._message_hash": {
            "name": "_message_hash",
            "location": 70,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "RecordFlux-main/rflx/specification/const.py": {},
    "RecordFlux-main/rflx/specification/parser.py": {
        "node_location": {
            "name": "node_location",
            "location": 26,
            "return": [],
            "arguments": {
                "node": [],
                "filename": [],
                "end_location": []
            }
        },
        "type_location": {
            "name": "type_location",
            "location": 38,
            "return": [],
            "arguments": {
                "identifier": [],
                "node": []
            }
        },
        "diagnostics_to_error": {
            "name": "diagnostics_to_error",
            "location": 53,
            "return": [],
            "arguments": {
                "diagnostics": [],
                "error": [],
                "filename": []
            }
        },
        "create_description": {
            "name": "create_description",
            "location": 80,
            "return": [],
            "arguments": {
                "description": []
            }
        },
        "create_transition": {
            "name": "create_transition",
            "location": 87,
            "return": [],
            "arguments": {
                "transition": [],
                "filename": []
            }
        },
        "create_reset": {
            "name": "create_reset",
            "location": 98,
            "return": [],
            "arguments": {
                "reset": [],
                "filename": []
            }
        },
        "create_assignment": {
            "name": "create_assignment",
            "location": 110,
            "return": [],
            "arguments": {
                "assignment": [],
                "filename": []
            }
        },
        "create_message_field_assignment": {
            "name": "create_message_field_assignment",
            "location": 119,
            "return": [],
            "arguments": {
                "assignment": [],
                "filename": []
            }
        },
        "create_attribute_statement": {
            "name": "create_attribute_statement",
            "location": 129,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_statement": {
            "name": "create_statement",
            "location": 146,
            "return": [],
            "arguments": {
                "statement": [],
                "filename": []
            }
        },
        "create_state": {
            "name": "create_state",
            "location": 156,
            "return": [],
            "arguments": {
                "state": [],
                "package": [],
                "filename": []
            }
        },
        "_check_session_identifier": {
            "name": "_check_session_identifier",
            "location": 197,
            "return": [],
            "arguments": {
                "session": [],
                "filename": []
            }
        },
        "create_unproven_session": {
            "name": "create_unproven_session",
            "location": 208,
            "return": [],
            "arguments": {
                "session": [],
                "package": [],
                "filename": [],
                "types": []
            }
        },
        "create_session": {
            "name": "create_session",
            "location": 228,
            "return": [],
            "arguments": {
                "session": [],
                "package": [],
                "filename": [],
                "types": []
            }
        },
        "create_id": {
            "name": "create_id",
            "location": 237,
            "return": [],
            "arguments": {
                "identifier": [],
                "filename": []
            }
        },
        "create_sequence": {
            "name": "create_sequence",
            "location": 262,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "sequence": [],
                "types": [],
                "_skip_verification": [],
                "_workers": [],
                "_cache": [],
                "filename": []
            }
        },
        "create_numeric_literal": {
            "name": "create_numeric_literal",
            "location": 290,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_binop": {
            "name": "create_binop",
            "location": 309,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_math_binop": {
            "name": "create_math_binop",
            "location": 345,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_bool_binop": {
            "name": "create_bool_binop",
            "location": 371,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_paren_bool_expression": {
            "name": "create_paren_bool_expression",
            "location": 396,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_paren_math_expression": {
            "name": "create_paren_math_expression",
            "location": 401,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_paren_expression": {
            "name": "create_paren_expression",
            "location": 406,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_variable": {
            "name": "create_variable",
            "location": 411,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_math_attribute": {
            "name": "create_math_attribute",
            "location": 419,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_attribute": {
            "name": "create_attribute",
            "location": 433,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_sequence_aggregate": {
            "name": "create_sequence_aggregate",
            "location": 459,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_string_literal": {
            "name": "create_string_literal",
            "location": 467,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_call": {
            "name": "create_call",
            "location": 474,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_quantified_expression": {
            "name": "create_quantified_expression",
            "location": 483,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_binding": {
            "name": "create_binding",
            "location": 497,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_variable_decl": {
            "name": "create_variable_decl",
            "location": 510,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_private_type_decl": {
            "name": "create_private_type_decl",
            "location": 527,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_channel_decl": {
            "name": "create_channel_decl",
            "location": 539,
            "return": [],
            "arguments": {
                "declaration": [],
                "_package": [],
                "filename": []
            }
        },
        "create_renaming_decl": {
            "name": "create_renaming_decl",
            "location": 562,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_function_decl": {
            "name": "create_function_decl",
            "location": 576,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_negation": {
            "name": "create_negation",
            "location": 603,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_concatenation": {
            "name": "create_concatenation",
            "location": 610,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_comprehension": {
            "name": "create_comprehension",
            "location": 621,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_selected": {
            "name": "create_selected",
            "location": 637,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_conversion": {
            "name": "create_conversion",
            "location": 646,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_message_aggregate": {
            "name": "create_message_aggregate",
            "location": 655,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_expression": {
            "name": "create_expression",
            "location": 695,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_declaration": {
            "name": "create_declaration",
            "location": 699,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_formal_declaration": {
            "name": "create_formal_declaration",
            "location": 709,
            "return": [],
            "arguments": {
                "declaration": [],
                "package": [],
                "filename": []
            }
        },
        "create_math_expression": {
            "name": "create_math_expression",
            "location": 720,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_bool_expression": {
            "name": "create_bool_expression",
            "location": 736,
            "return": [],
            "arguments": {
                "expression": [],
                "filename": []
            }
        },
        "create_modular": {
            "name": "create_modular",
            "location": 750,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "modular": [],
                "_types": [],
                "_skip_verification": [],
                "_workers": [],
                "_cache": [],
                "filename": []
            }
        },
        "create_range": {
            "name": "create_range",
            "location": 768,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "rangetype": [],
                "_types": [],
                "_skip_verification": [],
                "_workers": [],
                "_cache": [],
                "filename": []
            }
        },
        "create_null_message": {
            "name": "create_null_message",
            "location": 796,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "message": [],
                "_types": [],
                "_skip_verification": [],
                "_workers": [],
                "_cache": [],
                "_filename": []
            }
        },
        "create_message": {
            "name": "create_message",
            "location": 810,
            "return": [],
            "arguments": {
                "identifier": [],
                "parameters": [],
                "message": [],
                "types": [],
                "skip_verification": [],
                "workers": [],
                "cache": [],
                "filename": []
            }
        },
        "create_message_types": {
            "name": "create_message_types",
            "location": 851,
            "return": [],
            "arguments": {
                "error": [],
                "identifier": [],
                "parameters": [],
                "fields": [],
                "types": [],
                "filename": []
            }
        },
        "create_message_arguments": {
            "name": "create_message_arguments",
            "location": 927,
            "return": [],
            "arguments": {
                "error": [],
                "message": [],
                "type_arguments": [],
                "field_type_location": [],
                "filename": []
            }
        },
        "create_message_structure": {
            "name": "create_message_structure",
            "location": 987,
            "return": [],
            "arguments": {
                "error": [],
                "fields": [],
                "filename": []
            }
        },
        "merge_field_aspects": {
            "name": "merge_field_aspects",
            "location": 1105,
            "return": [],
            "arguments": {
                "error": [],
                "field_identifier": [],
                "structure": [],
                "size": [],
                "first": []
            }
        },
        "merge_field_condition": {
            "name": "merge_field_condition",
            "location": 1160,
            "return": [],
            "arguments": {
                "field_identifier": [],
                "structure": [],
                "condition": []
            }
        },
        "parse_aspects": {
            "name": "parse_aspects",
            "location": 1174,
            "return": [],
            "arguments": {
                "aspects": [],
                "filename": []
            }
        },
        "create_derived_message": {
            "name": "create_derived_message",
            "location": 1204,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "derivation": [],
                "types": [],
                "skip_verification": [],
                "workers": [],
                "cache": [],
                "filename": []
            }
        },
        "create_enumeration": {
            "name": "create_enumeration",
            "location": 1261,
            "return": [],
            "arguments": {
                "identifier": [],
                "_parameters": [],
                "enumeration": [],
                "_types": [],
                "_skip_verification": [],
                "_workers": [],
                "_cache": [],
                "filename": []
            }
        },
        "create_proven_message": {
            "name": "create_proven_message",
            "location": 1339,
            "return": [],
            "arguments": {
                "unproven_message": [],
                "skip_verification": [],
                "workers": [],
                "cache": []
            }
        },
        "create_refinement": {
            "name": "create_refinement",
            "location": 1351,
            "return": [],
            "arguments": {
                "refinement": [],
                "package": [],
                "types": [],
                "filename": []
            }
        },
        "check_naming": {
            "name": "check_naming",
            "location": 1389,
            "return": [],
            "arguments": {
                "error": [],
                "package": [],
                "name": []
            }
        },
        "create_message_types.get_parameters": {
            "name": "get_parameters",
            "location": 859,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "create_message_structure.extract_aspect": {
            "name": "extract_aspect",
            "location": 990,
            "return": [],
            "arguments": {
                "aspects": []
            }
        },
        "create_message_structure.extract_then": {
            "name": "extract_then",
            "location": 1011,
            "return": [],
            "arguments": {
                "then": []
            }
        },
        "create_enumeration.create_aspects": {
            "name": "create_aspects",
            "location": 1275,
            "return": [],
            "arguments": {
                "aspects": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 1457,
            "return": [],
            "arguments": {
                "self": [],
                "skip_verification": [],
                "cached": [],
                "workers": [],
                "integration_files_dir": []
            }
        },
        "Parser._convert_unit": {
            "name": "_convert_unit",
            "location": 1477,
            "return": [],
            "arguments": {
                "self": [],
                "error": [],
                "spec": [],
                "filename": [],
                "transitions": []
            }
        },
        "Parser._parse_specfile": {
            "name": "_parse_specfile",
            "location": 1544,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "transitions": []
            }
        },
        "Parser._sort_specs_topologically": {
            "name": "_sort_specs_topologically",
            "location": 1558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 1581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_string": {
            "name": "parse_string",
            "location": 1590,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "rule": []
            }
        },
        "Parser.create_model": {
            "name": "create_model",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_integration": {
            "name": "get_integration",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.specifications": {
            "name": "specifications",
            "location": 1620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._evaluate_specification": {
            "name": "_evaluate_specification",
            "location": 1626,
            "return": [],
            "arguments": {
                "self": [],
                "error": [],
                "spec": [],
                "filename": []
            }
        }
    },
    "RecordFlux-main/rflx/specification/style.py": {
        "check": {
            "name": "check",
            "location": 40,
            "return": [
                "rflx.error.RecordFluxError"
            ],
            "arguments": {
                "spec_file": []
            }
        },
        "_append": {
            "name": "_append",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "message": [],
                "row": [],
                "col": [],
                "spec_file": [],
                "check_type": []
            }
        },
        "_determine_enabled_checks": {
            "name": "_determine_enabled_checks",
            "location": 94,
            "return": [
                "Set[enum.Enum]"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "spec_file": []
            }
        },
        "_check_blank_lines": {
            "name": "_check_blank_lines",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": [],
                "blank_lines": [],
                "row_count": []
            }
        },
        "_check_characters": {
            "name": "_check_characters",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": []
            }
        },
        "_check_indentation": {
            "name": "_check_indentation",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": []
            }
        },
        "_check_token_spacing": {
            "name": "_check_token_spacing",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": []
            }
        },
        "_check_trailing_spaces": {
            "name": "_check_trailing_spaces",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": []
            }
        },
        "_check_line_length": {
            "name": "_check_line_length",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "line": [],
                "row": [],
                "spec_file": []
            }
        }
    },
    "RecordFlux-main/rflx/specification/__init__.py": {},
    "RecordFlux-main/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "pytest_assertrepr_compare": {
            "name": "pytest_assertrepr_compare",
            "location": 31,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "op": [],
                "left": [],
                "right": []
            }
        }
    },
    "RecordFlux-main/tests/const.py": {},
    "RecordFlux-main/tests/utils.py": {
        "assert_equal": {
            "name": "assert_equal",
            "location": 29,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "assert_message_model_error": {
            "name": "assert_message_model_error",
            "location": 33,
            "return": [],
            "arguments": {
                "structure": [],
                "types": [],
                "regex": [],
                "checksums": [],
                "location": []
            }
        },
        "assert_session_model_error": {
            "name": "assert_session_model_error",
            "location": 44,
            "return": [],
            "arguments": {
                "states": [],
                "declarations": [],
                "parameters": [],
                "types": [],
                "regex": [],
                "location": []
            }
        },
        "assert_type_error": {
            "name": "assert_type_error",
            "location": 65,
            "return": [],
            "arguments": {
                "instance": [],
                "regex": []
            }
        },
        "assert_equal_code_specs": {
            "name": "assert_equal_code_specs",
            "location": 70,
            "return": [],
            "arguments": {
                "spec_files": [],
                "expected_dir": [],
                "tmp_path": [],
                "accept_extra_files": []
            }
        },
        "assert_equal_code": {
            "name": "assert_equal_code",
            "location": 86,
            "return": [],
            "arguments": {
                "model": [],
                "integration": [],
                "expected_dir": [],
                "tmp_path": [],
                "accept_extra_files": []
            }
        },
        "assert_compilable_code_specs": {
            "name": "assert_compilable_code_specs",
            "location": 119,
            "return": [],
            "arguments": {
                "spec_files": [],
                "tmp_path": [],
                "prefix": []
            }
        },
        "assert_compilable_code_string": {
            "name": "assert_compilable_code_string",
            "location": 130,
            "return": [],
            "arguments": {
                "specification": [],
                "tmp_path": [],
                "prefix": []
            }
        },
        "assert_compilable_code": {
            "name": "assert_compilable_code",
            "location": 139,
            "return": [],
            "arguments": {
                "model": [],
                "integration": [],
                "tmp_path": [],
                "main": [],
                "prefix": [],
                "debug": [],
                "mode": []
            }
        },
        "assert_executable_code": {
            "name": "assert_executable_code",
            "location": 162,
            "return": [],
            "arguments": {
                "model": [],
                "integration": [],
                "tmp_path": [],
                "main": [],
                "prefix": [],
                "debug": []
            }
        },
        "assert_provable_code_string": {
            "name": "assert_provable_code_string",
            "location": 189,
            "return": [],
            "arguments": {
                "specification": [],
                "tmp_path": [],
                "prefix": [],
                "units": []
            }
        },
        "assert_provable_code": {
            "name": "assert_provable_code",
            "location": 198,
            "return": [],
            "arguments": {
                "model": [],
                "integration": [],
                "tmp_path": [],
                "main": [],
                "prefix": [],
                "units": []
            }
        },
        "_create_files": {
            "name": "_create_files",
            "location": 224,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "model": [],
                "integration": [],
                "main": [],
                "prefix": [],
                "debug": []
            }
        },
        "session_main": {
            "name": "session_main",
            "location": 277,
            "return": [],
            "arguments": {
                "input_channels": [],
                "output_channels": [],
                "context": [],
                "subprograms": [],
                "session_package": []
            }
        },
        "multilinestr": {
            "name": "multilinestr",
            "location": 812,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 820,
            "return": [],
            "arguments": {
                "data": [],
                "rule": []
            }
        },
        "parse_math_expression": {
            "name": "parse_math_expression",
            "location": 832,
            "return": [],
            "arguments": {
                "data": [],
                "extended": []
            }
        },
        "parse_bool_expression": {
            "name": "parse_bool_expression",
            "location": 843,
            "return": [],
            "arguments": {
                "data": [],
                "extended": []
            }
        },
        "parse_expression": {
            "name": "parse_expression",
            "location": 854,
            "return": [],
            "arguments": {
                "data": [],
                "rule": []
            }
        },
        "assert_provable_code.run": {
            "name": "run",
            "location": 208,
            "return": [],
            "arguments": {
                "command": []
            }
        }
    },
    "RecordFlux-main/tests/__init__.py": {},
    "RecordFlux-main/tests/data/data_test.py": {
        "test_models": {
            "name": "test_models",
            "location": 21,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "RecordFlux-main/tests/data/models.py": {},
    "RecordFlux-main/tests/data/__init__.py": {},
    "RecordFlux-main/tests/data/fixtures/pyrflx.py": {
        "fixture_pyrflx": {
            "name": "fixture_pyrflx",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "fixture_ethernet_package": {
            "name": "fixture_ethernet_package",
            "location": 39,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_ethernet_frame_value": {
            "name": "fixture_ethernet_frame_value",
            "location": 44,
            "return": [],
            "arguments": {
                "ethernet_package": []
            }
        },
        "fixture_icmp_package": {
            "name": "fixture_icmp_package",
            "location": 49,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_icmp_message_value": {
            "name": "fixture_icmp_message_value",
            "location": 54,
            "return": [],
            "arguments": {
                "icmp_package": []
            }
        },
        "fixture_icmp_message": {
            "name": "fixture_icmp_message",
            "location": 59,
            "return": [],
            "arguments": {
                "icmp_package": []
            }
        },
        "fixture_icmp_checksum_message_value": {
            "name": "fixture_icmp_checksum_message_value",
            "location": 65,
            "return": [],
            "arguments": {
                "icmp_message": []
            }
        },
        "fixture_icmp_checksum_message_first": {
            "name": "fixture_icmp_checksum_message_first",
            "location": 94,
            "return": [],
            "arguments": {
                "icmp_message": []
            }
        },
        "fixture_ipv4_package": {
            "name": "fixture_ipv4_package",
            "location": 123,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_ipv4_packet_value": {
            "name": "fixture_ipv4_packet_value",
            "location": 128,
            "return": [],
            "arguments": {
                "ipv4_package": []
            }
        },
        "fixture_ipv4_option_value": {
            "name": "fixture_ipv4_option_value",
            "location": 133,
            "return": [],
            "arguments": {
                "ipv4_package": []
            }
        },
        "fixture_tls_record_package": {
            "name": "fixture_tls_record_package",
            "location": 138,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_tls_record_value": {
            "name": "fixture_tls_record_value",
            "location": 143,
            "return": [],
            "arguments": {
                "tls_record_package": []
            }
        },
        "fixture_tls_alert_package": {
            "name": "fixture_tls_alert_package",
            "location": 148,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_tls_alert_value": {
            "name": "fixture_tls_alert_value",
            "location": 153,
            "return": [],
            "arguments": {
                "tls_alert_package": []
            }
        },
        "fixture_udp_package": {
            "name": "fixture_udp_package",
            "location": 158,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_udp_datagram_value": {
            "name": "fixture_udp_datagram_value",
            "location": 163,
            "return": [],
            "arguments": {
                "udp_package": []
            }
        },
        "fixture_tlv_package": {
            "name": "fixture_tlv_package",
            "location": 168,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_tlv_message_value": {
            "name": "fixture_tlv_message_value",
            "location": 173,
            "return": [],
            "arguments": {
                "tlv_package": []
            }
        },
        "fixture_sequence_message_package": {
            "name": "fixture_sequence_message_package",
            "location": 178,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_sequence_message_value": {
            "name": "fixture_sequence_message_value",
            "location": 183,
            "return": [],
            "arguments": {
                "sequence_message_package": []
            }
        },
        "fixture_sequence_message_refinement_value": {
            "name": "fixture_sequence_message_refinement_value",
            "location": 188,
            "return": [],
            "arguments": {
                "sequence_message_package": []
            }
        },
        "fixture_message_size_package": {
            "name": "fixture_message_size_package",
            "location": 195,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_message_size_value": {
            "name": "fixture_message_size_value",
            "location": 200,
            "return": [],
            "arguments": {
                "message_size_package": []
            }
        },
        "fixture_message_type_size": {
            "name": "fixture_message_type_size",
            "location": 205,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_message_type_size_value": {
            "name": "fixture_message_type_size_value",
            "location": 210,
            "return": [],
            "arguments": {
                "message_type_size_package": []
            }
        },
        "fixture_always_valid_aspect_package": {
            "name": "fixture_always_valid_aspect_package",
            "location": 217,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_always_valid_aspect_value": {
            "name": "fixture_always_valid_aspect_value",
            "location": 222,
            "return": [],
            "arguments": {
                "always_valid_aspect_package": []
            }
        },
        "fixture_parameterized_package": {
            "name": "fixture_parameterized_package",
            "location": 229,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_endianness_package": {
            "name": "fixture_endianness_package",
            "location": 234,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_low_order_package": {
            "name": "fixture_low_order_package",
            "location": 239,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_aggregate_in_relation_package": {
            "name": "fixture_aggregate_in_relation_package",
            "location": 244,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        }
    },
    "RecordFlux-main/tests/data/fixtures/__init__.py": {},
    "RecordFlux-main/tests/data/validator/checksum.py": {
        "icmp_checksum": {
            "name": "icmp_checksum",
            "location": 1,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": []
            }
        },
        "ip_header_checksum": {
            "name": "ip_header_checksum",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": []
            }
        },
        "internet_checksum": {
            "name": "internet_checksum",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "checksum_bytes": []
            }
        },
        "checksum_message_checksum": {
            "name": "checksum_message_checksum",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": []
            }
        },
        "internet_checksum.add_ones_complement": {
            "name": "add_ones_complement",
            "location": 34,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_invalid_attribute_type.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_invalid_field.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_invalid_field_dict_type.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_invalid_function_type.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_invalid_message.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_missing_attribute.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/checksum_missing_field.py": {
        "checksum_test": {
            "name": "checksum_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/data/validator/__init__.py": {},
    "RecordFlux-main/tests/ide/ide_test.py": {
        "assert_error": {
            "name": "assert_error",
            "location": 13,
            "return": [],
            "arguments": {
                "filename": [],
                "expected": []
            }
        },
        "test_multiple_errors": {
            "name": "test_multiple_errors",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_aggregate_non_number": {
            "name": "test_parse_error_aggregate_non_number",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_invalid_location": {
            "name": "test_parse_error_invalid_location",
            "location": 183,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/ide/__init__.py": {},
    "RecordFlux-main/tests/integration/benchmark.py": {
        "Benchmark.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "specdir": []
            }
        },
        "Benchmark.generate": {
            "name": "generate",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "Benchmark.run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run": {
            "name": "run",
            "location": 82,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/integration/feature_test.py": {
        "get_config": {
            "name": "get_config",
            "location": 37,
            "return": [],
            "arguments": {
                "feature": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 58,
            "return": [],
            "arguments": {
                "feature": []
            }
        },
        "create_complement": {
            "name": "create_complement",
            "location": 64,
            "return": [],
            "arguments": {
                "config": [],
                "feature": [],
                "tmp_path": []
            }
        },
        "test_parsability_and_model_creation": {
            "name": "test_parsability_and_model_creation",
            "location": 82,
            "return": [],
            "arguments": {
                "feature": []
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 87,
            "return": [],
            "arguments": {
                "feature": [],
                "tmp_path": []
            }
        },
        "test_compilability": {
            "name": "test_compilability",
            "location": 99,
            "return": [],
            "arguments": {
                "feature": [],
                "tmp_path": []
            }
        },
        "test_executability": {
            "name": "test_executability",
            "location": 106,
            "return": [],
            "arguments": {
                "feature": [],
                "tmp_path": []
            }
        },
        "test_provability": {
            "name": "test_provability",
            "location": 117,
            "return": [],
            "arguments": {
                "feature": [],
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/integration/pyrflx_test.py": {
        "test_ethernet_set_tltpid": {
            "name": "test_ethernet_set_tltpid",
            "location": 36,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_set_nonlinear": {
            "name": "test_ethernet_set_nonlinear",
            "location": 59,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_final": {
            "name": "test_ethernet_final",
            "location": 66,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_802_3": {
            "name": "test_ethernet_802_3",
            "location": 80,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_payload": {
            "name": "test_ethernet_payload",
            "location": 107,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_tls_fields": {
            "name": "test_tls_fields",
            "location": 123,
            "return": [],
            "arguments": {
                "tls_record_value": []
            }
        },
        "test_tls_invalid_outgoing": {
            "name": "test_tls_invalid_outgoing",
            "location": 135,
            "return": [],
            "arguments": {
                "tls_record_value": []
            }
        },
        "test_tls_invalid_path": {
            "name": "test_tls_invalid_path",
            "location": 145,
            "return": [],
            "arguments": {
                "tls_alert_value": []
            }
        },
        "test_icmp_echo_request": {
            "name": "test_icmp_echo_request",
            "location": 155,
            "return": [],
            "arguments": {
                "icmp_message_value": []
            }
        },
        "test_icmp_parse_binary": {
            "name": "test_icmp_parse_binary",
            "location": 175,
            "return": [],
            "arguments": {
                "icmp_message_value": []
            }
        },
        "test_imported_literals": {
            "name": "test_imported_literals",
            "location": 189,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_no_verification_ethernet": {
            "name": "test_no_verification_ethernet",
            "location": 255,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_no_verification_sequence_nested_messages": {
            "name": "test_no_verification_sequence_nested_messages",
            "location": 283,
            "return": [],
            "arguments": {
                "sequence_message_package": [],
                "message_sequence_value": []
            }
        },
        "icmp_checksum_function": {
            "name": "icmp_checksum_function",
            "location": 313,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_no_verification_icmp_checksum": {
            "name": "test_no_verification_icmp_checksum",
            "location": 332,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": [],
                "icmp_message": []
            }
        },
        "test_sequence_message_serialization": {
            "name": "test_sequence_message_serialization",
            "location": 378,
            "return": [],
            "arguments": {
                "sequence_message_package": [],
                "message_sequence_value": []
            }
        },
        "test_tlv_message_serialization": {
            "name": "test_tlv_message_serialization",
            "location": 402,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_message_with_not_operator": {
            "name": "test_tlv_message_with_not_operator",
            "location": 414,
            "return": [],
            "arguments": {}
        },
        "test_tlv_message_with_not_operator_exhausting": {
            "name": "test_tlv_message_with_not_operator_exhausting",
            "location": 453,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/integration/specification_model_generator_test.py": {
        "test_prefix": {
            "name": "test_prefix",
            "location": 22,
            "return": [],
            "arguments": {
                "prefix": [],
                "tmp_path": []
            }
        },
        "test_type_name_equals_package_name": {
            "name": "test_type_name_equals_package_name",
            "location": 35,
            "return": [],
            "arguments": {
                "definition": [],
                "tmp_path": []
            }
        },
        "test_comparison_big_integers": {
            "name": "test_comparison_big_integers",
            "location": 52,
            "return": [],
            "arguments": {
                "condition": [],
                "tmp_path": []
            }
        },
        "test_comparison_opaque": {
            "name": "test_comparison_opaque",
            "location": 86,
            "return": [],
            "arguments": {
                "condition": [],
                "tmp_path": []
            }
        },
        "test_potential_name_conflicts_with_enum_literals": {
            "name": "test_potential_name_conflicts_with_enum_literals",
            "location": 107,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_sequence_with_imported_element_type_scalar": {
            "name": "test_sequence_with_imported_element_type_scalar",
            "location": 168,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_sequence_with_imported_element_type_message": {
            "name": "test_sequence_with_imported_element_type_message",
            "location": 188,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_63_bit_types": {
            "name": "test_63_bit_types",
            "location": 223,
            "return": [],
            "arguments": {
                "type_definition": [],
                "tmp_path": []
            }
        },
        "test_message_fixed_size_sequence": {
            "name": "test_message_fixed_size_sequence",
            "location": 236,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_with_implicit_size": {
            "name": "test_message_with_implicit_size",
            "location": 259,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_with_optional_field_based_on_message_size": {
            "name": "test_message_with_optional_field_based_on_message_size",
            "location": 278,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_size_attribute": {
            "name": "test_size_attribute",
            "location": 308,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "aspects": []
            }
        },
        "test_message_size_calculation": {
            "name": "test_message_size_calculation",
            "location": 328,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_transitive_type_use": {
            "name": "test_transitive_type_use",
            "location": 350,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_refinement_with_imported_enum_literal": {
            "name": "test_refinement_with_imported_enum_literal",
            "location": 383,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_refinement_with_self": {
            "name": "test_refinement_with_self",
            "location": 420,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_definite_message_with_builtin_type": {
            "name": "test_definite_message_with_builtin_type",
            "location": 447,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_expression_value_outside_type_range": {
            "name": "test_message_expression_value_outside_type_range",
            "location": 468,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_field_conditions_on_corresponding_fields": {
            "name": "test_message_field_conditions_on_corresponding_fields",
            "location": 489,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_field_conditions_on_subsequent_fields": {
            "name": "test_message_field_conditions_on_subsequent_fields",
            "location": 510,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_message_size": {
            "name": "test_message_size",
            "location": 530,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_feature_integration": {
            "name": "test_feature_integration",
            "location": 534,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_parameterized_message": {
            "name": "test_parameterized_message",
            "location": 539,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_definite_parameterized_message": {
            "name": "test_definite_parameterized_message",
            "location": 564,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_session_type_conversion_in_assignment": {
            "name": "test_session_type_conversion_in_assignment",
            "location": 582,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_session_type_conversion_in_message_size_calculation": {
            "name": "test_session_type_conversion_in_message_size_calculation",
            "location": 642,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_session_move_content_of_opaque_field": {
            "name": "test_session_move_content_of_opaque_field",
            "location": 692,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_session_single_channel": {
            "name": "test_session_single_channel",
            "location": 761,
            "return": [],
            "arguments": {
                "mode": [],
                "action": [],
                "tmp_path": []
            }
        },
        "test_session_external_debug_output": {
            "name": "test_session_external_debug_output",
            "location": 801,
            "return": [],
            "arguments": {
                "debug": [],
                "expected": [],
                "tmp_path": []
            }
        },
        "test_session_boolean_relations": {
            "name": "test_session_boolean_relations",
            "location": 867,
            "return": [],
            "arguments": {
                "global_rel": [],
                "local_rel": [],
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/integration/specification_model_test.py": {
        "assert_error_files": {
            "name": "assert_error_files",
            "location": 31,
            "return": [],
            "arguments": {
                "filenames": [],
                "regex": []
            }
        },
        "assert_error_string": {
            "name": "assert_error_string",
            "location": 40,
            "return": [],
            "arguments": {
                "string": [],
                "regex": []
            }
        },
        "test_message_undefined_type": {
            "name": "test_message_undefined_type",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_message_field_first_conflict": {
            "name": "test_message_field_first_conflict",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_message_field_size_conflict": {
            "name": "test_message_field_size_conflict",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_message_derivation_of_derived_type": {
            "name": "test_message_derivation_of_derived_type",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_illegal_redefinition": {
            "name": "test_illegal_redefinition",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_invalid_modular_type": {
            "name": "test_invalid_modular_type",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_invalid_enumeration_type_size": {
            "name": "test_invalid_enumeration_type_size",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_invalid_enumeration_type_duplicate_values": {
            "name": "test_invalid_enumeration_type_duplicate_values",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_invalid_enumeration_type_multiple_duplicate_values": {
            "name": "test_invalid_enumeration_type_multiple_duplicate_values",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_invalid_enumeration_type_identical_literals": {
            "name": "test_invalid_enumeration_type_identical_literals",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_field": {
            "name": "test_refinement_invalid_field",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_condition": {
            "name": "test_refinement_invalid_condition",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_model_name_conflict_messages": {
            "name": "test_model_name_conflict_messages",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "test_model_conflicting_refinements": {
            "name": "test_model_conflicting_refinements",
            "location": 263,
            "return": [],
            "arguments": {}
        },
        "test_model_name_conflict_derivations": {
            "name": "test_model_name_conflict_derivations",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "test_model_name_conflict_sessions": {
            "name": "test_model_name_conflict_sessions",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "test_model_illegal_first_aspect_at_initial_link": {
            "name": "test_model_illegal_first_aspect_at_initial_link",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "test_model_errors_in_type_and_session": {
            "name": "test_model_errors_in_type_and_session",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_message_with_two_size_fields": {
            "name": "test_message_with_two_size_fields",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "test_message_same_field_and_type_name_with_different_size": {
            "name": "test_message_same_field_and_type_name_with_different_size",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implicit_size": {
            "name": "test_invalid_implicit_size",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_invalid_use_of_message_type_with_implicit_size": {
            "name": "test_invalid_use_of_message_type_with_implicit_size",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "test_invalid_message_with_multiple_fields_with_implicit_size": {
            "name": "test_invalid_message_with_multiple_fields_with_implicit_size",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "test_invalid_message_with_field_after_field_with_implicit_size": {
            "name": "test_invalid_message_with_field_after_field_with_implicit_size",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "test_invalid_message_with_unreachable_field_after_merging": {
            "name": "test_invalid_message_with_unreachable_field_after_merging",
            "location": 506,
            "return": [],
            "arguments": {}
        },
        "test_dependency_order": {
            "name": "test_dependency_order",
            "location": 534,
            "return": [],
            "arguments": {}
        },
        "test_consistency_specification_parsing_generation": {
            "name": "test_consistency_specification_parsing_generation",
            "location": 540,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_rfi_files": {
            "name": "test_rfi_files",
            "location": 717,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "rfi_content": [],
                "match_error": []
            }
        }
    },
    "RecordFlux-main/tests/integration/specs_test.py": {
        "test_ethernet": {
            "name": "test_ethernet",
            "location": 13,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_ethernet_parsing_ethernet_2": {
            "name": "test_ethernet_parsing_ethernet_2",
            "location": 22,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_ieee_802_3": {
            "name": "test_ethernet_parsing_ieee_802_3",
            "location": 36,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_ethernet_2_vlan": {
            "name": "test_ethernet_parsing_ethernet_2_vlan",
            "location": 44,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_invalid_ethernet_2_too_short": {
            "name": "test_ethernet_parsing_invalid_ethernet_2_too_short",
            "location": 61,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_invalid_ethernet_2_too_long": {
            "name": "test_ethernet_parsing_invalid_ethernet_2_too_long",
            "location": 75,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_invalid_ethernet_2_undefined_type": {
            "name": "test_ethernet_parsing_invalid_ethernet_2_undefined_type",
            "location": 89,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_ieee_802_3_invalid_length": {
            "name": "test_ethernet_parsing_ieee_802_3_invalid_length",
            "location": 104,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_parsing_incomplete": {
            "name": "test_ethernet_parsing_incomplete",
            "location": 119,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_generating_ethernet_2": {
            "name": "test_ethernet_generating_ethernet_2",
            "location": 134,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_generating_ieee_802_3": {
            "name": "test_ethernet_generating_ieee_802_3",
            "location": 151,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_generating_ethernet_2_vlan": {
            "name": "test_ethernet_generating_ethernet_2_vlan",
            "location": 169,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_ethernet_generating_ethernet_2_vlan_dynamic": {
            "name": "test_ethernet_generating_ethernet_2_vlan_dynamic",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_ipv4": {
            "name": "test_ipv4",
            "location": 193,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_ipv4_parsing_ipv4": {
            "name": "test_ipv4_parsing_ipv4",
            "location": 202,
            "return": [],
            "arguments": {
                "ipv4_packet_value": []
            }
        },
        "test_ipv4_parsing_ipv4_option_value": {
            "name": "test_ipv4_parsing_ipv4_option_value",
            "location": 224,
            "return": [],
            "arguments": {
                "ipv4_option_value": []
            }
        },
        "test_ipv4_parsing_ipv4_with_options": {
            "name": "test_ipv4_parsing_ipv4_with_options",
            "location": 237,
            "return": [],
            "arguments": {
                "ipv4_packet_value": []
            }
        },
        "test_ipv4_generating_ipv4": {
            "name": "test_ipv4_generating_ipv4",
            "location": 244,
            "return": [],
            "arguments": {
                "ipv4_packet_value": []
            }
        },
        "test_ipv4_generating_ipv4_option_value": {
            "name": "test_ipv4_generating_ipv4_option_value",
            "location": 269,
            "return": [],
            "arguments": {
                "ipv4_option_value": []
            }
        },
        "test_in_ethernet": {
            "name": "test_in_ethernet",
            "location": 278,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_udp": {
            "name": "test_udp",
            "location": 291,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_in_ipv4": {
            "name": "test_in_ipv4",
            "location": 297,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_in_ipv4_parsing_udp_in_ipv4": {
            "name": "test_in_ipv4_parsing_udp_in_ipv4",
            "location": 313,
            "return": [],
            "arguments": {
                "ipv4_packet_value": []
            }
        },
        "test_in_ipv4_parsing_udp_in_ipv4_in_ethernet": {
            "name": "test_in_ipv4_parsing_udp_in_ipv4_in_ethernet",
            "location": 322,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_in_ipv4_generating_udp_in_ipv4_in_ethernet": {
            "name": "test_in_ipv4_generating_udp_in_ipv4_in_ethernet",
            "location": 336,
            "return": [],
            "arguments": {
                "ethernet_frame_value": [],
                "ipv4_packet_value": [],
                "udp_datagram_value": []
            }
        },
        "test_tlv": {
            "name": "test_tlv",
            "location": 386,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_tlv_parsing_tlv_data": {
            "name": "test_tlv_parsing_tlv_data",
            "location": 395,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_parsing_tlv_data_zero": {
            "name": "test_tlv_parsing_tlv_data_zero",
            "location": 402,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_parsing_tlv_error": {
            "name": "test_tlv_parsing_tlv_error",
            "location": 410,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_parsing_invalid_tlv_invalid_tag": {
            "name": "test_tlv_parsing_invalid_tlv_invalid_tag",
            "location": 417,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_generating_tlv_data": {
            "name": "test_tlv_generating_tlv_data",
            "location": 432,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_generating_tlv_data_zero": {
            "name": "test_tlv_generating_tlv_data_zero",
            "location": 441,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_tlv_generating_tlv_error": {
            "name": "test_tlv_generating_tlv_error",
            "location": 447,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        }
    },
    "RecordFlux-main/tests/integration/__init__.py": {},
    "RecordFlux-main/tests/property/generator_test.py": {
        "test_code_compilation": {
            "name": "test_code_compilation",
            "location": 20,
            "return": [],
            "arguments": {
                "tmp_path_factory": [],
                "model": []
            }
        },
        "test_code_verification": {
            "name": "test_code_verification",
            "location": 31,
            "return": [],
            "arguments": {
                "tmp_path_factory": [],
                "model": []
            }
        }
    },
    "RecordFlux-main/tests/property/specification_test.py": {
        "test_parsing_mathematical_expressions": {
            "name": "test_parsing_mathematical_expressions",
            "location": 23,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_parsing_boolean_expressions": {
            "name": "test_parsing_boolean_expressions",
            "location": 42,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_parsing_expressions": {
            "name": "test_parsing_expressions",
            "location": 89,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_parsing_model": {
            "name": "test_parsing_model",
            "location": 100,
            "return": [],
            "arguments": {
                "tmp_path_factory": [],
                "model": []
            }
        }
    },
    "RecordFlux-main/tests/property/strategies.py": {
        "unique_qualified_identifiers": {
            "name": "unique_qualified_identifiers",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "identifiers": {
            "name": "identifiers",
            "location": 51,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "sizes": {
            "name": "sizes",
            "location": 58,
            "return": [],
            "arguments": {
                "draw": [],
                "multiple_of_8": [],
                "align_to_8": []
            }
        },
        "modular_integers": {
            "name": "modular_integers",
            "location": 75,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": [],
                "multiple_of_8": [],
                "align_to_8": []
            }
        },
        "range_integers": {
            "name": "range_integers",
            "location": 88,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": [],
                "multiple_of_8": [],
                "align_to_8": []
            }
        },
        "enumerations": {
            "name": "enumerations",
            "location": 104,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": [],
                "multiple_of_8": [],
                "align_to_8": []
            }
        },
        "scalars": {
            "name": "scalars",
            "location": 139,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": [],
                "multiple_of_8": [],
                "align_to_8": []
            }
        },
        "sequences": {
            "name": "sequences",
            "location": 155,
            "return": [],
            "arguments": {
                "draw": [],
                "element_types": [],
                "unique_identifiers": []
            }
        },
        "opaque": {
            "name": "opaque",
            "location": 164,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "composites": {
            "name": "composites",
            "location": 169,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": []
            }
        },
        "messages": {
            "name": "messages",
            "location": 185,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": [],
                "not_null": []
            }
        },
        "non_null_messages": {
            "name": "non_null_messages",
            "location": 323,
            "return": [],
            "arguments": {
                "unique_identifiers": []
            }
        },
        "refinements": {
            "name": "refinements",
            "location": 330,
            "return": [],
            "arguments": {
                "draw": [],
                "unique_identifiers": []
            }
        },
        "models": {
            "name": "models",
            "location": 340,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "numbers": {
            "name": "numbers",
            "location": 367,
            "return": [],
            "arguments": {
                "draw": [],
                "min_value": [],
                "max_value": []
            }
        },
        "variables": {
            "name": "variables",
            "location": 372,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "attributes": {
            "name": "attributes",
            "location": 377,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "calls": {
            "name": "calls",
            "location": 383,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "aggregates": {
            "name": "aggregates",
            "location": 388,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "strings": {
            "name": "strings",
            "location": 393,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "quantified_expressions": {
            "name": "quantified_expressions",
            "location": 398,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "mathematical_expressions": {
            "name": "mathematical_expressions",
            "location": 404,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "relations": {
            "name": "relations",
            "location": 412,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "boolean_relations": {
            "name": "boolean_relations",
            "location": 431,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "boolean_expressions": {
            "name": "boolean_expressions",
            "location": 444,
            "return": [],
            "arguments": {
                "draw": [],
                "elements": []
            }
        },
        "enumerations.literal_identifiers": {
            "name": "literal_identifiers",
            "location": 111,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "messages.size": {
            "name": "size",
            "location": 199,
            "return": [],
            "arguments": {
                "pair": []
            }
        },
        "messages.condition": {
            "name": "condition",
            "location": 210,
            "return": [],
            "arguments": {
                "pair": []
            }
        },
        "messages.fields": {
            "name": "fields",
            "location": 231,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "messages.outgoing": {
            "name": "outgoing",
            "location": 236,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "models.append_types": {
            "name": "append_types",
            "location": 343,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "RecordFlux-main/tests/property/__init__.py": {},
    "RecordFlux-main/tests/unit/ada_test.py": {
        "test_id_str": {
            "name": "test_id_str",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_id_add": {
            "name": "test_id_add",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_id_add_str": {
            "name": "test_id_add_str",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_id_mul_id": {
            "name": "test_id_mul_id",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_id_mul_str": {
            "name": "test_id_mul_str",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_bool_expr_str": {
            "name": "test_bool_expr_str",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_and_str": {
            "name": "test_and_str",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_and_then_str": {
            "name": "test_and_then_str",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_or_str": {
            "name": "test_or_str",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_or_else_str": {
            "name": "test_or_else_str",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_add_str": {
            "name": "test_add_str",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_attribute": {
            "name": "test_attribute",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_attribute_str": {
            "name": "test_attribute_str",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_attribute_expression_str": {
            "name": "test_attribute_expression_str",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_selected_str": {
            "name": "test_selected_str",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_indexed_str": {
            "name": "test_indexed_str",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_str": {
            "name": "test_aggregate_str",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_invalid": {
            "name": "test_aggregate_invalid",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_in_str": {
            "name": "test_in_str",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_not_in_str": {
            "name": "test_not_in_str",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_if_str": {
            "name": "test_if_str",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_case_str": {
            "name": "test_case_str",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_str": {
            "name": "test_quantified_expression_str",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_number_str": {
            "name": "test_number_str",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "test_number_str_long": {
            "name": "test_number_str_long",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_long": {
            "name": "test_number_str_neg_long",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_number_str_hex": {
            "name": "test_number_str_hex",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_hex": {
            "name": "test_number_str_neg_hex",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_number_str_dec": {
            "name": "test_number_str_dec",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_number_str_oct": {
            "name": "test_number_str_oct",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_oct": {
            "name": "test_number_str_neg_oct",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "test_number_str_bin": {
            "name": "test_number_str_bin",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_string_str": {
            "name": "test_string_str",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_named_aggregate_str": {
            "name": "test_named_aggregate_str",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_named_aggregate_invalid": {
            "name": "test_named_aggregate_invalid",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_raise_str": {
            "name": "test_raise_str",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "test_expr_str": {
            "name": "test_expr_str",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "test_call_str": {
            "name": "test_call_str",
            "location": 417,
            "return": [],
            "arguments": {}
        },
        "test_conversion_str": {
            "name": "test_conversion_str",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "test_aspects": {
            "name": "test_aspects",
            "location": 466,
            "return": [],
            "arguments": {
                "aspect": [],
                "expected": []
            }
        },
        "test_formal_package_declaration": {
            "name": "test_formal_package_declaration",
            "location": 470,
            "return": [],
            "arguments": {}
        },
        "test_generic_package_instantiation": {
            "name": "test_generic_package_instantiation",
            "location": 476,
            "return": [],
            "arguments": {}
        },
        "test_generic_package_instantiation_hash": {
            "name": "test_generic_package_instantiation_hash",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "test_package_renaming_declaration": {
            "name": "test_package_renaming_declaration",
            "location": 486,
            "return": [],
            "arguments": {}
        },
        "test_subtype": {
            "name": "test_subtype",
            "location": 490,
            "return": [],
            "arguments": {}
        },
        "test_range_subtype": {
            "name": "test_range_subtype",
            "location": 494,
            "return": [],
            "arguments": {}
        },
        "test_derived_type": {
            "name": "test_derived_type",
            "location": 501,
            "return": [],
            "arguments": {}
        },
        "test_private_type": {
            "name": "test_private_type",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "test_discrete_type": {
            "name": "test_discrete_type",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "test_array_type": {
            "name": "test_array_type",
            "location": 517,
            "return": [],
            "arguments": {}
        },
        "test_unconstrained_array_type": {
            "name": "test_unconstrained_array_type",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "test_record_type": {
            "name": "test_record_type",
            "location": 525,
            "return": [],
            "arguments": {}
        },
        "test_access_type": {
            "name": "test_access_type",
            "location": 533,
            "return": [],
            "arguments": {}
        },
        "test_access_parameter": {
            "name": "test_access_parameter",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "test_generic_procedure_instantiation": {
            "name": "test_generic_procedure_instantiation",
            "location": 543,
            "return": [],
            "arguments": {}
        },
        "test_generic_function_instantiation": {
            "name": "test_generic_function_instantiation",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "test_subprogram_renaming_declaration": {
            "name": "test_subprogram_renaming_declaration",
            "location": 557,
            "return": [],
            "arguments": {}
        },
        "test_call_statement_str": {
            "name": "test_call_statement_str",
            "location": 564,
            "return": [],
            "arguments": {}
        },
        "test_while_str": {
            "name": "test_while_str",
            "location": 583,
            "return": [],
            "arguments": {}
        },
        "test_qualified_expr": {
            "name": "test_qualified_expr",
            "location": 618,
            "return": [],
            "arguments": {}
        },
        "test_parameter": {
            "name": "test_parameter",
            "location": 622,
            "return": [],
            "arguments": {}
        },
        "test_raise_statement": {
            "name": "test_raise_statement",
            "location": 627,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/cli_test.py": {
        "raise_parser_error": {
            "name": "raise_parser_error",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "raise_model_error": {
            "name": "raise_model_error",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "raise_pyrflx_error": {
            "name": "raise_pyrflx_error",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "raise_validation_error": {
            "name": "raise_validation_error",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "raise_unexpected_exception": {
            "name": "raise_unexpected_exception",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "raise_fatal_error": {
            "name": "raise_fatal_error",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_main_noarg": {
            "name": "test_main_noarg",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_main_help": {
            "name": "test_main_help",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_main_version": {
            "name": "test_main_version",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_main_check": {
            "name": "test_main_check",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_main_check_quiet": {
            "name": "test_main_check_quiet",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_main_check_parser_error": {
            "name": "test_main_check_parser_error",
            "location": 65,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_main_check_model_error_parse": {
            "name": "test_main_check_model_error_parse",
            "location": 70,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_main_check_model_error_create_model": {
            "name": "test_main_check_model_error_create_model",
            "location": 75,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_main_check_non_existent_file": {
            "name": "test_main_check_non_existent_file",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_main_generate": {
            "name": "test_main_generate",
            "location": 86,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_generate_no_library_files": {
            "name": "test_main_generate_no_library_files",
            "location": 92,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_generate_prefix": {
            "name": "test_main_generate_prefix",
            "location": 111,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_generate_invalid_prefix": {
            "name": "test_main_generate_invalid_prefix",
            "location": 118,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_generate_no_output_files": {
            "name": "test_main_generate_no_output_files",
            "location": 125,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_generate_non_existent_directory": {
            "name": "test_main_generate_non_existent_directory",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_main_generate_debug": {
            "name": "test_main_generate_debug",
            "location": 146,
            "return": [],
            "arguments": {
                "args": [],
                "expected": [],
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_main_graph": {
            "name": "test_main_graph",
            "location": 171,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_graph_non_existent_file": {
            "name": "test_main_graph_non_existent_file",
            "location": 175,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_graph_non_existent_files": {
            "name": "test_main_graph_non_existent_files",
            "location": 181,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_graph_non_existent_directory": {
            "name": "test_main_graph_non_existent_directory",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_main_graph_no_output_files": {
            "name": "test_main_graph_no_output_files",
            "location": 199,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_required_arg_not_provided": {
            "name": "test_main_validate_required_arg_not_provided",
            "location": 205,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_no_test_data_provided": {
            "name": "test_main_validate_no_test_data_provided",
            "location": 233,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_output_file_exists": {
            "name": "test_main_validate_output_file_exists",
            "location": 247,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_path_does_not_exist": {
            "name": "test_main_validate_path_does_not_exist",
            "location": 271,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_path_is_not_directory": {
            "name": "test_main_validate_path_is_not_directory",
            "location": 288,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_invalid_identifier": {
            "name": "test_main_validate_invalid_identifier",
            "location": 307,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_validate_non_fatal_error": {
            "name": "test_main_validate_non_fatal_error",
            "location": 325,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_main_validate_validation_error": {
            "name": "test_main_validate_validation_error",
            "location": 347,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_main_validate_fatal_error": {
            "name": "test_main_validate_fatal_error",
            "location": 367,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": [],
                "raise_error": []
            }
        },
        "test_main_unexpected_exception": {
            "name": "test_main_unexpected_exception",
            "location": 388,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_fail_fast": {
            "name": "test_fail_fast",
            "location": 397,
            "return": [],
            "arguments": {}
        },
        "test_main_generate_debug.generator_mock": {
            "name": "generator_mock",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "workers": [],
                "reproducible": [],
                "debug": [],
                "ignore_unsupported_checksum": []
            }
        }
    },
    "RecordFlux-main/tests/unit/common_test.py": {
        "test_base_compare_equal": {
            "name": "test_base_compare_equal",
            "location": 18,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "test_base_compare_inequal": {
            "name": "test_base_compare_inequal",
            "location": 23,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "C1.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "C2.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data1": [],
                "data2": []
            }
        }
    },
    "RecordFlux-main/tests/unit/expression_test.py": {
        "assert_type": {
            "name": "assert_type",
            "location": 72,
            "return": [],
            "arguments": {
                "expr": [],
                "type_": []
            }
        },
        "assert_type_error": {
            "name": "assert_type_error",
            "location": 77,
            "return": [],
            "arguments": {
                "expr": [],
                "regex": []
            }
        },
        "test_true_type": {
            "name": "test_true_type",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_true_neg": {
            "name": "test_true_neg",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_true_simplified": {
            "name": "test_true_simplified",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_true_variables": {
            "name": "test_true_variables",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_true_z3expr": {
            "name": "test_true_z3expr",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_false_type": {
            "name": "test_false_type",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_false_neg": {
            "name": "test_false_neg",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_false_simplified": {
            "name": "test_false_simplified",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_false_variables": {
            "name": "test_false_variables",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_false_z3expr": {
            "name": "test_false_z3expr",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test_not_type": {
            "name": "test_not_type",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_not_type_error": {
            "name": "test_not_type_error",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_not_neg": {
            "name": "test_not_neg",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_not_findall": {
            "name": "test_not_findall",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_not_substituted": {
            "name": "test_not_substituted",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_not_simplified": {
            "name": "test_not_simplified",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_not_z3expr": {
            "name": "test_not_z3expr",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_bin_expr_findall": {
            "name": "test_bin_expr_findall",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_bin_expr_substituted": {
            "name": "test_bin_expr_substituted",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_bin_expr_substituted_location": {
            "name": "test_bin_expr_substituted_location",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_ass_expr_findall": {
            "name": "test_ass_expr_findall",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_ass_expr_substituted": {
            "name": "test_ass_expr_substituted",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_ass_expr_substituted_location": {
            "name": "test_ass_expr_substituted_location",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_bool_expr_str": {
            "name": "test_bool_expr_str",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "test_bool_expr_type": {
            "name": "test_bool_expr_type",
            "location": 310,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "test_bool_expr_type_error": {
            "name": "test_bool_expr_type_error",
            "location": 318,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "test_bool_expr_ada_expr": {
            "name": "test_bool_expr_ada_expr",
            "location": 332,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_bool_expr_z3expr_error": {
            "name": "test_bool_expr_z3expr_error",
            "location": 339,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_and_neg": {
            "name": "test_and_neg",
            "location": 344,
            "return": [],
            "arguments": {}
        },
        "test_and_variables": {
            "name": "test_and_variables",
            "location": 349,
            "return": [],
            "arguments": {}
        },
        "test_and_contains": {
            "name": "test_and_contains",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "test_and_simplified": {
            "name": "test_and_simplified",
            "location": 358,
            "return": [],
            "arguments": {}
        },
        "test_and_z3expr": {
            "name": "test_and_z3expr",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_and_str": {
            "name": "test_and_str",
            "location": 379,
            "return": [],
            "arguments": {}
        },
        "test_or_neg": {
            "name": "test_or_neg",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "test_or_variables": {
            "name": "test_or_variables",
            "location": 389,
            "return": [],
            "arguments": {}
        },
        "test_or_contains": {
            "name": "test_or_contains",
            "location": 393,
            "return": [],
            "arguments": {}
        },
        "test_or_simplified": {
            "name": "test_or_simplified",
            "location": 398,
            "return": [],
            "arguments": {}
        },
        "test_or_z3expr": {
            "name": "test_or_z3expr",
            "location": 404,
            "return": [],
            "arguments": {}
        },
        "test_or_str": {
            "name": "test_or_str",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "test_undefined_simplified": {
            "name": "test_undefined_simplified",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "test_undefined_str": {
            "name": "test_undefined_str",
            "location": 425,
            "return": [],
            "arguments": {}
        },
        "test_number_type": {
            "name": "test_number_type",
            "location": 429,
            "return": [],
            "arguments": {}
        },
        "test_number_neg": {
            "name": "test_number_neg",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_number_simplified": {
            "name": "test_number_simplified",
            "location": 440,
            "return": [],
            "arguments": {}
        },
        "test_number_add": {
            "name": "test_number_add",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "test_number_sub": {
            "name": "test_number_sub",
            "location": 448,
            "return": [],
            "arguments": {}
        },
        "test_number_mul": {
            "name": "test_number_mul",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "test_number_div": {
            "name": "test_number_div",
            "location": 456,
            "return": [],
            "arguments": {}
        },
        "test_number_pow": {
            "name": "test_number_pow",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "test_number_eq": {
            "name": "test_number_eq",
            "location": 464,
            "return": [],
            "arguments": {}
        },
        "test_number_ne": {
            "name": "test_number_ne",
            "location": 473,
            "return": [],
            "arguments": {}
        },
        "test_number_lt": {
            "name": "test_number_lt",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "test_number_le": {
            "name": "test_number_le",
            "location": 491,
            "return": [],
            "arguments": {}
        },
        "test_number_gt": {
            "name": "test_number_gt",
            "location": 500,
            "return": [],
            "arguments": {}
        },
        "test_number_ge": {
            "name": "test_number_ge",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "test_number_hashable": {
            "name": "test_number_hashable",
            "location": 518,
            "return": [],
            "arguments": {}
        },
        "test_math_expr_type": {
            "name": "test_math_expr_type",
            "location": 523,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "test_math_expr_type_error": {
            "name": "test_math_expr_type_error",
            "location": 535,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "test_math_expr_ada_expr": {
            "name": "test_math_expr_ada_expr",
            "location": 549,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_math_expr_z3expr_error": {
            "name": "test_math_expr_z3expr_error",
            "location": 556,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_add_neg": {
            "name": "test_add_neg",
            "location": 561,
            "return": [],
            "arguments": {}
        },
        "test_add_variables": {
            "name": "test_add_variables",
            "location": 565,
            "return": [],
            "arguments": {}
        },
        "test_add_simplified": {
            "name": "test_add_simplified",
            "location": 569,
            "return": [],
            "arguments": {}
        },
        "test_add_lt": {
            "name": "test_add_lt",
            "location": 581,
            "return": [],
            "arguments": {}
        },
        "test_add_le": {
            "name": "test_add_le",
            "location": 591,
            "return": [],
            "arguments": {}
        },
        "test_add_gt": {
            "name": "test_add_gt",
            "location": 601,
            "return": [],
            "arguments": {}
        },
        "test_add_ge": {
            "name": "test_add_ge",
            "location": 611,
            "return": [],
            "arguments": {}
        },
        "test_add_z3expr": {
            "name": "test_add_z3expr",
            "location": 621,
            "return": [],
            "arguments": {}
        },
        "test_add_str": {
            "name": "test_add_str",
            "location": 629,
            "return": [],
            "arguments": {}
        },
        "test_mul_neg": {
            "name": "test_mul_neg",
            "location": 635,
            "return": [],
            "arguments": {}
        },
        "test_mul_variables": {
            "name": "test_mul_variables",
            "location": 639,
            "return": [],
            "arguments": {}
        },
        "test_mul_simplified": {
            "name": "test_mul_simplified",
            "location": 643,
            "return": [],
            "arguments": {}
        },
        "test_mul_z3expr": {
            "name": "test_mul_z3expr",
            "location": 649,
            "return": [],
            "arguments": {}
        },
        "test_sub_neg": {
            "name": "test_sub_neg",
            "location": 657,
            "return": [],
            "arguments": {}
        },
        "test_sub_variables": {
            "name": "test_sub_variables",
            "location": 661,
            "return": [],
            "arguments": {}
        },
        "test_sub_simplified": {
            "name": "test_sub_simplified",
            "location": 665,
            "return": [],
            "arguments": {}
        },
        "test_sub_z3expr": {
            "name": "test_sub_z3expr",
            "location": 678,
            "return": [],
            "arguments": {}
        },
        "test_div_neg": {
            "name": "test_div_neg",
            "location": 683,
            "return": [],
            "arguments": {}
        },
        "test_div_variables": {
            "name": "test_div_variables",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "test_div_simplified": {
            "name": "test_div_simplified",
            "location": 691,
            "return": [],
            "arguments": {}
        },
        "test_div_z3expr": {
            "name": "test_div_z3expr",
            "location": 697,
            "return": [],
            "arguments": {}
        },
        "test_pow_simplified": {
            "name": "test_pow_simplified",
            "location": 701,
            "return": [],
            "arguments": {}
        },
        "test_pow_variables": {
            "name": "test_pow_variables",
            "location": 709,
            "return": [],
            "arguments": {}
        },
        "test_pow_z3expr": {
            "name": "test_pow_z3expr",
            "location": 713,
            "return": [],
            "arguments": {}
        },
        "test_mod_simplified": {
            "name": "test_mod_simplified",
            "location": 717,
            "return": [],
            "arguments": {}
        },
        "test_mod_variables": {
            "name": "test_mod_variables",
            "location": 725,
            "return": [],
            "arguments": {}
        },
        "test_mod_z3expr": {
            "name": "test_mod_z3expr",
            "location": 729,
            "return": [],
            "arguments": {}
        },
        "test_mod_z3expr_error": {
            "name": "test_mod_z3expr_error",
            "location": 734,
            "return": [],
            "arguments": {}
        },
        "test_term_simplified": {
            "name": "test_term_simplified",
            "location": 739,
            "return": [],
            "arguments": {}
        },
        "test_variable_invalid_name": {
            "name": "test_variable_invalid_name",
            "location": 748,
            "return": [],
            "arguments": {}
        },
        "test_variable_type": {
            "name": "test_variable_type",
            "location": 753,
            "return": [],
            "arguments": {}
        },
        "test_variable_type_error": {
            "name": "test_variable_type_error",
            "location": 764,
            "return": [],
            "arguments": {}
        },
        "test_variable_neg": {
            "name": "test_variable_neg",
            "location": 771,
            "return": [],
            "arguments": {}
        },
        "test_variable_variables": {
            "name": "test_variable_variables",
            "location": 775,
            "return": [],
            "arguments": {}
        },
        "test_variable_substituted": {
            "name": "test_variable_substituted",
            "location": 780,
            "return": [],
            "arguments": {}
        },
        "test_mutable_variable_substituted": {
            "name": "test_mutable_variable_substituted",
            "location": 786,
            "return": [],
            "arguments": {}
        },
        "test_immutable_variable_substituted": {
            "name": "test_immutable_variable_substituted",
            "location": 791,
            "return": [],
            "arguments": {}
        },
        "test_variable_simplified": {
            "name": "test_variable_simplified",
            "location": 796,
            "return": [],
            "arguments": {}
        },
        "test_variable_z3expr": {
            "name": "test_variable_z3expr",
            "location": 800,
            "return": [],
            "arguments": {}
        },
        "test_attribute": {
            "name": "test_attribute",
            "location": 806,
            "return": [],
            "arguments": {}
        },
        "test_attribute_type": {
            "name": "test_attribute_type",
            "location": 836,
            "return": [],
            "arguments": {
                "attribute": [],
                "expr": [],
                "expected": []
            }
        },
        "test_attribute_type_error": {
            "name": "test_attribute_type_error",
            "location": 873,
            "return": [],
            "arguments": {
                "expr": [],
                "match": []
            }
        },
        "test_attribute_neg": {
            "name": "test_attribute_neg",
            "location": 880,
            "return": [],
            "arguments": {}
        },
        "test_attributes_findall": {
            "name": "test_attributes_findall",
            "location": 884,
            "return": [],
            "arguments": {}
        },
        "test_attribute_substituted": {
            "name": "test_attribute_substituted",
            "location": 888,
            "return": [],
            "arguments": {}
        },
        "test_attribute_substituted_location": {
            "name": "test_attribute_substituted_location",
            "location": 911,
            "return": [],
            "arguments": {}
        },
        "test_attribute_simplified": {
            "name": "test_attribute_simplified",
            "location": 916,
            "return": [],
            "arguments": {}
        },
        "test_attribute_str": {
            "name": "test_attribute_str",
            "location": 920,
            "return": [],
            "arguments": {}
        },
        "test_attribute_variables": {
            "name": "test_attribute_variables",
            "location": 925,
            "return": [],
            "arguments": {}
        },
        "test_attribute_z3expr": {
            "name": "test_attribute_z3expr",
            "location": 939,
            "return": [],
            "arguments": {
                "attribute": [],
                "z3name": []
            }
        },
        "test_attribute_z3expr_error": {
            "name": "test_attribute_z3expr_error",
            "location": 944,
            "return": [],
            "arguments": {}
        },
        "test_val_substituted": {
            "name": "test_val_substituted",
            "location": 949,
            "return": [],
            "arguments": {}
        },
        "test_val_simplified": {
            "name": "test_val_simplified",
            "location": 964,
            "return": [],
            "arguments": {}
        },
        "test_val_str": {
            "name": "test_val_str",
            "location": 968,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_type": {
            "name": "test_aggregate_type",
            "location": 972,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_substituted": {
            "name": "test_aggregate_substituted",
            "location": 979,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_substituted_location": {
            "name": "test_aggregate_substituted_location",
            "location": 1000,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_simplified": {
            "name": "test_aggregate_simplified",
            "location": 1005,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_str": {
            "name": "test_aggregate_str",
            "location": 1009,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_precedence": {
            "name": "test_aggregate_precedence",
            "location": 1014,
            "return": [],
            "arguments": {}
        },
        "test_relation_integer_type": {
            "name": "test_relation_integer_type",
            "location": 1019,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_relation_integer_type_error": {
            "name": "test_relation_integer_type_error",
            "location": 1027,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_relation_composite_type": {
            "name": "test_relation_composite_type",
            "location": 1039,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_relation_composite_type_error": {
            "name": "test_relation_composite_type_error",
            "location": 1050,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_relation_substituted": {
            "name": "test_relation_substituted",
            "location": 1072,
            "return": [],
            "arguments": {}
        },
        "test_relation_substituted_location": {
            "name": "test_relation_substituted_location",
            "location": 1093,
            "return": [],
            "arguments": {}
        },
        "test_relation_simplified": {
            "name": "test_relation_simplified",
            "location": 1098,
            "return": [],
            "arguments": {}
        },
        "test_relation_contains": {
            "name": "test_relation_contains",
            "location": 1134,
            "return": [],
            "arguments": {}
        },
        "test_relation_variables": {
            "name": "test_relation_variables",
            "location": 1138,
            "return": [],
            "arguments": {}
        },
        "test_relation_z3expr_error": {
            "name": "test_relation_z3expr_error",
            "location": 1143,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_math_relation_ada_expr": {
            "name": "test_math_relation_ada_expr",
            "location": 1149,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_composite_relation_ada_expr": {
            "name": "test_composite_relation_ada_expr",
            "location": 1156,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "test_less_neg": {
            "name": "test_less_neg",
            "location": 1162,
            "return": [],
            "arguments": {}
        },
        "test_less_simplified": {
            "name": "test_less_simplified",
            "location": 1166,
            "return": [],
            "arguments": {}
        },
        "test_less_z3expr": {
            "name": "test_less_z3expr",
            "location": 1172,
            "return": [],
            "arguments": {}
        },
        "test_less_equal_neg": {
            "name": "test_less_equal_neg",
            "location": 1176,
            "return": [],
            "arguments": {}
        },
        "test_less_equal_simplified": {
            "name": "test_less_equal_simplified",
            "location": 1180,
            "return": [],
            "arguments": {}
        },
        "test_less_equal_z3expr": {
            "name": "test_less_equal_z3expr",
            "location": 1186,
            "return": [],
            "arguments": {}
        },
        "test_equal_neg": {
            "name": "test_equal_neg",
            "location": 1190,
            "return": [],
            "arguments": {}
        },
        "test_equal_simplified": {
            "name": "test_equal_simplified",
            "location": 1194,
            "return": [],
            "arguments": {}
        },
        "test_equal_z3expr": {
            "name": "test_equal_z3expr",
            "location": 1200,
            "return": [],
            "arguments": {}
        },
        "test_greater_equal_neg": {
            "name": "test_greater_equal_neg",
            "location": 1204,
            "return": [],
            "arguments": {}
        },
        "test_greater_equal_simplified": {
            "name": "test_greater_equal_simplified",
            "location": 1208,
            "return": [],
            "arguments": {}
        },
        "test_greater_equal_z3expr": {
            "name": "test_greater_equal_z3expr",
            "location": 1214,
            "return": [],
            "arguments": {}
        },
        "test_greater_neg": {
            "name": "test_greater_neg",
            "location": 1218,
            "return": [],
            "arguments": {}
        },
        "test_greater_simplified": {
            "name": "test_greater_simplified",
            "location": 1222,
            "return": [],
            "arguments": {}
        },
        "test_greater_z3expr": {
            "name": "test_greater_z3expr",
            "location": 1228,
            "return": [],
            "arguments": {}
        },
        "test_not_equal_neg": {
            "name": "test_not_equal_neg",
            "location": 1232,
            "return": [],
            "arguments": {}
        },
        "test_not_equal_simplified": {
            "name": "test_not_equal_simplified",
            "location": 1236,
            "return": [],
            "arguments": {}
        },
        "test_not_equal_z3expr": {
            "name": "test_not_equal_z3expr",
            "location": 1242,
            "return": [],
            "arguments": {}
        },
        "test_in_neg": {
            "name": "test_in_neg",
            "location": 1246,
            "return": [],
            "arguments": {}
        },
        "test_in_simplified": {
            "name": "test_in_simplified",
            "location": 1250,
            "return": [],
            "arguments": {}
        },
        "test_in_str": {
            "name": "test_in_str",
            "location": 1257,
            "return": [],
            "arguments": {}
        },
        "test_not_in_neg": {
            "name": "test_not_in_neg",
            "location": 1261,
            "return": [],
            "arguments": {}
        },
        "test_not_in_simplified": {
            "name": "test_not_in_simplified",
            "location": 1265,
            "return": [],
            "arguments": {}
        },
        "test_not_in_str": {
            "name": "test_not_in_str",
            "location": 1272,
            "return": [],
            "arguments": {}
        },
        "test_value_range_type": {
            "name": "test_value_range_type",
            "location": 1276,
            "return": [],
            "arguments": {}
        },
        "test_value_range_type_error": {
            "name": "test_value_range_type_error",
            "location": 1283,
            "return": [],
            "arguments": {}
        },
        "test_value_range_simplified": {
            "name": "test_value_range_simplified",
            "location": 1297,
            "return": [],
            "arguments": {}
        },
        "test_value_range_substituted": {
            "name": "test_value_range_substituted",
            "location": 1304,
            "return": [],
            "arguments": {}
        },
        "test_value_range_ada_expr": {
            "name": "test_value_range_ada_expr",
            "location": 1324,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_type": {
            "name": "test_quantified_expression_type",
            "location": 1331,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "test_quantified_expression_type_error": {
            "name": "test_quantified_expression_type_error",
            "location": 1368,
            "return": [],
            "arguments": {
                "expr": [],
                "iterable": [],
                "predicate": [],
                "match": []
            }
        },
        "test_quantified_expression_substituted": {
            "name": "test_quantified_expression_substituted",
            "location": 1382,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_substituted_location": {
            "name": "test_quantified_expression_substituted_location",
            "location": 1391,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_simplified": {
            "name": "test_quantified_expression_simplified",
            "location": 1396,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_variables": {
            "name": "test_quantified_expression_variables",
            "location": 1403,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_str": {
            "name": "test_quantified_expression_str",
            "location": 1412,
            "return": [],
            "arguments": {}
        },
        "test_quantified_expression_ada_expr": {
            "name": "test_quantified_expression_ada_expr",
            "location": 1419,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "test_for_all_in_variables": {
            "name": "test_for_all_in_variables",
            "location": 1425,
            "return": [],
            "arguments": {}
        },
        "test_for_some_in_variables": {
            "name": "test_for_some_in_variables",
            "location": 1433,
            "return": [],
            "arguments": {}
        },
        "test_expr_contains": {
            "name": "test_expr_contains",
            "location": 1441,
            "return": [],
            "arguments": {}
        },
        "test_expr_variables": {
            "name": "test_expr_variables",
            "location": 1456,
            "return": [],
            "arguments": {}
        },
        "test_expr_variables_duplicates": {
            "name": "test_expr_variables_duplicates",
            "location": 1483,
            "return": [],
            "arguments": {}
        },
        "test_expr_substituted_pre": {
            "name": "test_expr_substituted_pre",
            "location": 1511,
            "return": [],
            "arguments": {}
        },
        "test_length_z3variables": {
            "name": "test_length_z3variables",
            "location": 1536,
            "return": [],
            "arguments": {}
        },
        "test_last_z3variables": {
            "name": "test_last_z3variables",
            "location": 1540,
            "return": [],
            "arguments": {}
        },
        "test_first_z3variables": {
            "name": "test_first_z3variables",
            "location": 1544,
            "return": [],
            "arguments": {}
        },
        "test_size_z3variables": {
            "name": "test_size_z3variables",
            "location": 1548,
            "return": [],
            "arguments": {}
        },
        "test_valid_variables": {
            "name": "test_valid_variables",
            "location": 1552,
            "return": [],
            "arguments": {}
        },
        "test_present_variables": {
            "name": "test_present_variables",
            "location": 1556,
            "return": [],
            "arguments": {}
        },
        "test_head_variables": {
            "name": "test_head_variables",
            "location": 1560,
            "return": [],
            "arguments": {}
        },
        "test_opaque_variables": {
            "name": "test_opaque_variables",
            "location": 1564,
            "return": [],
            "arguments": {}
        },
        "test_not_variables": {
            "name": "test_not_variables",
            "location": 1568,
            "return": [],
            "arguments": {}
        },
        "test_number_z3expr": {
            "name": "test_number_z3expr",
            "location": 1572,
            "return": [],
            "arguments": {}
        },
        "test_number_str": {
            "name": "test_number_str",
            "location": 1576,
            "return": [],
            "arguments": {}
        },
        "test_number_str_long": {
            "name": "test_number_str_long",
            "location": 1580,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_long": {
            "name": "test_number_str_neg_long",
            "location": 1584,
            "return": [],
            "arguments": {}
        },
        "test_number_str_hex": {
            "name": "test_number_str_hex",
            "location": 1588,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_hex": {
            "name": "test_number_str_neg_hex",
            "location": 1592,
            "return": [],
            "arguments": {}
        },
        "test_number_str_dec": {
            "name": "test_number_str_dec",
            "location": 1596,
            "return": [],
            "arguments": {}
        },
        "test_number_str_oct": {
            "name": "test_number_str_oct",
            "location": 1600,
            "return": [],
            "arguments": {}
        },
        "test_number_str_neg_oct": {
            "name": "test_number_str_neg_oct",
            "location": 1604,
            "return": [],
            "arguments": {}
        },
        "test_number_str_bin": {
            "name": "test_number_str_bin",
            "location": 1608,
            "return": [],
            "arguments": {}
        },
        "test_string_variables": {
            "name": "test_string_variables",
            "location": 1612,
            "return": [],
            "arguments": {}
        },
        "test_string_simplified": {
            "name": "test_string_simplified",
            "location": 1616,
            "return": [],
            "arguments": {}
        },
        "test_string_substituted": {
            "name": "test_string_substituted",
            "location": 1620,
            "return": [],
            "arguments": {}
        },
        "test_string_elements": {
            "name": "test_string_elements",
            "location": 1626,
            "return": [],
            "arguments": {}
        },
        "test_string_str": {
            "name": "test_string_str",
            "location": 1630,
            "return": [],
            "arguments": {}
        },
        "test_string_ada_expr": {
            "name": "test_string_ada_expr",
            "location": 1635,
            "return": [],
            "arguments": {}
        },
        "test_selected_type": {
            "name": "test_selected_type",
            "location": 1639,
            "return": [],
            "arguments": {}
        },
        "test_selected_type_error": {
            "name": "test_selected_type_error",
            "location": 1683,
            "return": [],
            "arguments": {
                "expr": [],
                "match": []
            }
        },
        "test_selected_substituted": {
            "name": "test_selected_substituted",
            "location": 1690,
            "return": [],
            "arguments": {}
        },
        "test_selected_substituted_location": {
            "name": "test_selected_substituted_location",
            "location": 1705,
            "return": [],
            "arguments": {}
        },
        "test_selected_variables": {
            "name": "test_selected_variables",
            "location": 1710,
            "return": [],
            "arguments": {}
        },
        "test_selected_z3expr": {
            "name": "test_selected_z3expr",
            "location": 1716,
            "return": [],
            "arguments": {}
        },
        "test_in_variables": {
            "name": "test_in_variables",
            "location": 1721,
            "return": [],
            "arguments": {}
        },
        "test_call_type": {
            "name": "test_call_type",
            "location": 1727,
            "return": [],
            "arguments": {}
        },
        "test_call_type_error": {
            "name": "test_call_type_error",
            "location": 1739,
            "return": [],
            "arguments": {}
        },
        "test_call_variables": {
            "name": "test_call_variables",
            "location": 1765,
            "return": [],
            "arguments": {}
        },
        "test_call_findall": {
            "name": "test_call_findall",
            "location": 1771,
            "return": [],
            "arguments": {}
        },
        "test_call_str": {
            "name": "test_call_str",
            "location": 1778,
            "return": [],
            "arguments": {}
        },
        "test_conversion_type": {
            "name": "test_conversion_type",
            "location": 1783,
            "return": [],
            "arguments": {}
        },
        "test_conversion_type_error": {
            "name": "test_conversion_type_error",
            "location": 1795,
            "return": [],
            "arguments": {}
        },
        "test_conversion_substituted": {
            "name": "test_conversion_substituted",
            "location": 1808,
            "return": [],
            "arguments": {}
        },
        "test_conversion_substituted_location": {
            "name": "test_conversion_substituted_location",
            "location": 1823,
            "return": [],
            "arguments": {}
        },
        "test_conversion_variables": {
            "name": "test_conversion_variables",
            "location": 1828,
            "return": [],
            "arguments": {}
        },
        "test_conversion_ada_expr": {
            "name": "test_conversion_ada_expr",
            "location": 1834,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_type": {
            "name": "test_comprehension_type",
            "location": 1838,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_type_error": {
            "name": "test_comprehension_type_error",
            "location": 1867,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_substituted": {
            "name": "test_comprehension_substituted",
            "location": 1879,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_substituted_location": {
            "name": "test_comprehension_substituted_location",
            "location": 1894,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_variables": {
            "name": "test_comprehension_variables",
            "location": 1901,
            "return": [],
            "arguments": {}
        },
        "test_comprehension_str": {
            "name": "test_comprehension_str",
            "location": 1912,
            "return": [],
            "arguments": {}
        },
        "test_message_aggregate_type": {
            "name": "test_message_aggregate_type",
            "location": 1959,
            "return": [],
            "arguments": {
                "field_values": [],
                "type_": []
            }
        },
        "test_message_aggregate_type_error": {
            "name": "test_message_aggregate_type_error",
            "location": 2078,
            "return": [],
            "arguments": {
                "field_values": [],
                "type_": [],
                "match": []
            }
        },
        "test_message_aggregate_substituted": {
            "name": "test_message_aggregate_substituted",
            "location": 2087,
            "return": [],
            "arguments": {}
        },
        "test_message_aggregate_substituted_location": {
            "name": "test_message_aggregate_substituted_location",
            "location": 2102,
            "return": [],
            "arguments": {}
        },
        "test_message_aggregate_variables": {
            "name": "test_message_aggregate_variables",
            "location": 2109,
            "return": [],
            "arguments": {}
        },
        "test_binding_type": {
            "name": "test_binding_type",
            "location": 2117,
            "return": [],
            "arguments": {}
        },
        "test_binding_type_error": {
            "name": "test_binding_type_error",
            "location": 2131,
            "return": [],
            "arguments": {}
        },
        "test_binding_findall": {
            "name": "test_binding_findall",
            "location": 2145,
            "return": [],
            "arguments": {}
        },
        "test_binding_substituted": {
            "name": "test_binding_substituted",
            "location": 2156,
            "return": [],
            "arguments": {}
        },
        "test_binding_substituted_location": {
            "name": "test_binding_substituted_location",
            "location": 2174,
            "return": [],
            "arguments": {}
        },
        "test_binding_variables": {
            "name": "test_binding_variables",
            "location": 2183,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_aggregate": {
            "name": "test_binding_simplified_aggregate",
            "location": 2191,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_forall_predicate": {
            "name": "test_binding_simplified_forall_predicate",
            "location": 2201,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_length": {
            "name": "test_binding_simplified_length",
            "location": 2211,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_forall_iterable": {
            "name": "test_binding_simplified_forall_iterable",
            "location": 2218,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_forsome_predicate": {
            "name": "test_binding_simplified_forsome_predicate",
            "location": 2228,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_forsome_iterable": {
            "name": "test_binding_simplified_forsome_iterable",
            "location": 2238,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_contains_left": {
            "name": "test_binding_simplified_contains_left",
            "location": 2248,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_contains_right": {
            "name": "test_binding_simplified_contains_right",
            "location": 2258,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_not_contains_left": {
            "name": "test_binding_simplified_not_contains_left",
            "location": 2268,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_not_contains_right": {
            "name": "test_binding_simplified_not_contains_right",
            "location": 2278,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_subprogram": {
            "name": "test_binding_simplified_subprogram",
            "location": 2288,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_field": {
            "name": "test_binding_simplified_field",
            "location": 2298,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_list_comprehension": {
            "name": "test_binding_simplified_list_comprehension",
            "location": 2305,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_conversion": {
            "name": "test_binding_simplified_conversion",
            "location": 2325,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_conversion_name_unchanged": {
            "name": "test_binding_simplified_conversion_name_unchanged",
            "location": 2332,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_opaque": {
            "name": "test_binding_simplified_opaque",
            "location": 2339,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_multiple_bindings": {
            "name": "test_binding_simplified_multiple_bindings",
            "location": 2346,
            "return": [],
            "arguments": {}
        },
        "test_binding_simplified_multiple_variables": {
            "name": "test_binding_simplified_multiple_variables",
            "location": 2355,
            "return": [],
            "arguments": {}
        },
        "test_indexed_neg": {
            "name": "test_indexed_neg",
            "location": 2362,
            "return": [],
            "arguments": {}
        },
        "test_proof_invalid_logic": {
            "name": "test_proof_invalid_logic",
            "location": 2371,
            "return": [],
            "arguments": {}
        },
        "test_value_range_substituted.func": {
            "name": "func",
            "location": 1307,
            "return": [],
            "arguments": {
                "expr": []
            }
        }
    },
    "RecordFlux-main/tests/unit/generator_test.py": {
        "test_invalid_prefix": {
            "name": "test_invalid_prefix",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_unsupported_checksum": {
            "name": "test_unsupported_checksum",
            "location": 54,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_ignore_unsupported_checksum": {
            "name": "test_ignore_unsupported_checksum",
            "location": 65,
            "return": [],
            "arguments": {
                "capsys": [],
                "tmp_path": []
            }
        },
        "test_unexpected_type": {
            "name": "test_unexpected_type",
            "location": 74,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_generate": {
            "name": "test_generate",
            "location": 95,
            "return": [],
            "arguments": {
                "prefix": [],
                "library_files": [],
                "top_level_package": [],
                "expected": [],
                "tmp_path": []
            }
        },
        "test_generate_missing_template_directory": {
            "name": "test_generate_missing_template_directory",
            "location": 111,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_generate_missing_template_files": {
            "name": "test_generate_missing_template_files",
            "location": 118,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 125,
            "return": [],
            "arguments": {
                "model": [],
                "tmp_path": []
            }
        },
        "test_substitution_relation_aggregate": {
            "name": "test_substitution_relation_aggregate",
            "location": 138,
            "return": [],
            "arguments": {
                "relation": [],
                "left": [],
                "right": [],
                "embedded": []
            }
        },
        "test_substitution_relation_boolean_literal": {
            "name": "test_substitution_relation_boolean_literal",
            "location": 217,
            "return": [],
            "arguments": {
                "relation": [],
                "left": [],
                "right": [],
                "expected_left": [],
                "expected_right": []
            }
        },
        "test_substitution_relation_scalar": {
            "name": "test_substitution_relation_scalar",
            "location": 247,
            "return": [],
            "arguments": {
                "relation": [],
                "expressions": [],
                "expected": []
            }
        },
        "test_prefixed_type_identifier": {
            "name": "test_prefixed_type_identifier",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "test_session_create_abstract_function": {
            "name": "test_session_create_abstract_function",
            "location": 328,
            "return": [],
            "arguments": {
                "parameter": [],
                "expected": []
            }
        },
        "test_session_create_abstract_functions_error": {
            "name": "test_session_create_abstract_functions_error",
            "location": 412,
            "return": [],
            "arguments": {
                "parameter": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_evaluate_declarations": {
            "name": "test_session_evaluate_declarations",
            "location": 599,
            "return": [],
            "arguments": {
                "declaration": [],
                "session_global": [],
                "expected": []
            }
        },
        "test_session_evaluate_declarations_error": {
            "name": "test_session_evaluate_declarations_error",
            "location": 634,
            "return": [],
            "arguments": {
                "declaration": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_declare": {
            "name": "test_session_declare",
            "location": 882,
            "return": [],
            "arguments": {
                "type_": [],
                "expression": [],
                "constant": [],
                "session_global": [],
                "expected": []
            }
        },
        "test_session_declare_error": {
            "name": "test_session_declare_error",
            "location": 930,
            "return": [],
            "arguments": {
                "type_": [],
                "expression": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_state_action": {
            "name": "test_session_state_action",
            "location": 1696,
            "return": [],
            "arguments": {
                "action": [],
                "expected": []
            }
        },
        "test_session_state_action_error": {
            "name": "test_session_state_action_error",
            "location": 1761,
            "return": [],
            "arguments": {
                "action": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_assign_error": {
            "name": "test_session_assign_error",
            "location": 2110,
            "return": [],
            "arguments": {
                "type_": [],
                "expression": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_append_error": {
            "name": "test_session_append_error",
            "location": 2165,
            "return": [],
            "arguments": {
                "append": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_read_error": {
            "name": "test_session_read_error",
            "location": 2196,
            "return": [],
            "arguments": {
                "read": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_write_error": {
            "name": "test_session_write_error",
            "location": 2223,
            "return": [],
            "arguments": {
                "write": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_substitution": {
            "name": "test_session_substitution",
            "location": 2346,
            "return": [],
            "arguments": {
                "expression": [],
                "expected": []
            }
        },
        "test_session_substitution_error": {
            "name": "test_session_substitution_error",
            "location": 2379,
            "return": [],
            "arguments": {
                "expression": [],
                "error_type": [],
                "error_msg": []
            }
        },
        "test_session_substitution_equality": {
            "name": "test_session_substitution_equality",
            "location": 2431,
            "return": [],
            "arguments": {
                "relation": [],
                "left": [],
                "right": [],
                "expected": []
            }
        },
        "test_session_with_only_null_state": {
            "name": "test_session_with_only_null_state",
            "location": 2453,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "UnknownDeclaration.__str__": {
            "name": "__str__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownDeclaration.type_": {
            "name": "type_",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownStatement.check_type": {
            "name": "check_type",
            "location": 949,
            "return": [],
            "arguments": {
                "self": [],
                "statement_type": [],
                "typify_variable": []
            }
        },
        "UnknownStatement.variables": {
            "name": "variables",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RecordFlux-main/tests/unit/graph_test.py": {
        "assert_graph": {
            "name": "assert_graph",
            "location": 23,
            "return": [],
            "arguments": {
                "graph": [],
                "expected": [],
                "tmp_path": []
            }
        },
        "test_graph_object": {
            "name": "test_graph_object",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_empty_message_graph": {
            "name": "test_empty_message_graph",
            "location": 55,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_dot_graph": {
            "name": "test_dot_graph",
            "location": 76,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_dot_graph_with_condition": {
            "name": "test_dot_graph_with_condition",
            "location": 107,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_dot_graph_with_double_edge": {
            "name": "test_dot_graph_with_double_edge",
            "location": 140,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_session_graph": {
            "name": "test_session_graph",
            "location": 179,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/unit/identifier_test.py": {
        "test_id_constructor": {
            "name": "test_id_constructor",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_type": {
            "name": "test_id_invalid_type",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_id_invalid_empty": {
            "name": "test_id_invalid_empty",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_empty_string": {
            "name": "test_id_invalid_empty_string",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_empty_part": {
            "name": "test_id_invalid_empty_part",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_empty_first_part": {
            "name": "test_id_invalid_empty_first_part",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_empty_last_part": {
            "name": "test_id_invalid_empty_last_part",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_whitespace": {
            "name": "test_id_invalid_whitespace",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_invalid_colon": {
            "name": "test_id_invalid_colon",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_eq": {
            "name": "test_id_eq",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_hash": {
            "name": "test_id_hash",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_str": {
            "name": "test_id_str",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_add": {
            "name": "test_id_add",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_add_str": {
            "name": "test_id_add_str",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_mul_id": {
            "name": "test_id_mul_id",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_mul_str": {
            "name": "test_id_mul_str",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_name": {
            "name": "test_id_name",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_parent": {
            "name": "test_id_parent",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_parent_error": {
            "name": "test_id_parent_error",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_flat": {
            "name": "test_id_flat",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_sorted": {
            "name": "test_id_sorted",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/integration_test.py": {
        "test_rfi_add_integration": {
            "name": "test_rfi_add_integration",
            "location": 100,
            "return": [],
            "arguments": {
                "rfi_content": [],
                "match_error": []
            }
        },
        "test_rfi_get_size": {
            "name": "test_rfi_get_size",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_load_integration_file": {
            "name": "test_load_integration_file",
            "location": 167,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "content": [],
                "error_msg": [],
                "line": [],
                "column": []
            }
        },
        "test_load_integration_path": {
            "name": "test_load_integration_path",
            "location": 185,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/unit/pyrflx_test.py": {
        "assert_bytestring_error": {
            "name": "assert_bytestring_error",
            "location": 38,
            "return": [],
            "arguments": {
                "msg": [],
                "msg_name": []
            }
        },
        "test_file_not_found": {
            "name": "test_file_not_found",
            "location": 47,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_package_name": {
            "name": "test_package_name",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_package_iterator": {
            "name": "test_package_iterator",
            "location": 57,
            "return": [],
            "arguments": {
                "tlv_package": []
            }
        },
        "test_pyrflx_iterator": {
            "name": "test_pyrflx_iterator",
            "location": 61,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "test_attributes": {
            "name": "test_attributes",
            "location": 85,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "test_no_verification": {
            "name": "test_no_verification",
            "location": 92,
            "return": [],
            "arguments": {
                "icmp_message_value": []
            }
        },
        "test_message_value_identifier": {
            "name": "test_message_value_identifier",
            "location": 113,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_message_value_eq": {
            "name": "test_message_value_eq",
            "location": 119,
            "return": [],
            "arguments": {
                "tlv_package": []
            }
        },
        "test_message_value_bitstring": {
            "name": "test_message_value_bitstring",
            "location": 128,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_all_fields": {
            "name": "test_message_value_all_fields",
            "location": 138,
            "return": [],
            "arguments": {
                "tlv_message_value": [],
                "ethernet_frame_value": []
            }
        },
        "test_message_value_accessible_fields_initial_fields": {
            "name": "test_message_value_accessible_fields_initial_fields",
            "location": 153,
            "return": [],
            "arguments": {
                "tlv_message_value": [],
                "ethernet_frame_value": []
            }
        },
        "test_message_value_accessible_fields_tag_fields": {
            "name": "test_message_value_accessible_fields_tag_fields",
            "location": 160,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_accessible_fields_length_fields": {
            "name": "test_message_value_accessible_fields_length_fields",
            "location": 165,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_accessible_fields_error_fields": {
            "name": "test_message_value_accessible_fields_error_fields",
            "location": 173,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_accessible_fields_error_reset_fields": {
            "name": "test_message_value_accessible_fields_error_reset_fields",
            "location": 178,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_accessible_fields_fields_complex": {
            "name": "test_message_value_accessible_fields_fields_complex",
            "location": 188,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_valid_message": {
            "name": "test_message_value_valid_message",
            "location": 202,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_valid_fields": {
            "name": "test_message_value_valid_fields",
            "location": 219,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_set_value": {
            "name": "test_message_value_set_value",
            "location": 229,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_generate": {
            "name": "test_message_value_generate",
            "location": 247,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_change_field": {
            "name": "test_message_value_change_field",
            "location": 256,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_binary_length": {
            "name": "test_message_value_binary_length",
            "location": 268,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_set_get_value": {
            "name": "test_message_value_set_get_value",
            "location": 275,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_get_invalid_field": {
            "name": "test_message_value_get_invalid_field",
            "location": 285,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_set_invalid_field": {
            "name": "test_message_value_set_invalid_field",
            "location": 295,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_invalid_value": {
            "name": "test_message_value_invalid_value",
            "location": 306,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_next": {
            "name": "test_message_value_next",
            "location": 330,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_prev": {
            "name": "test_message_value_prev",
            "location": 338,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_required_fields": {
            "name": "test_message_value_required_fields",
            "location": 347,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_empty_opaque_field": {
            "name": "test_message_value_empty_opaque_field",
            "location": 357,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_field_eq": {
            "name": "test_message_value_field_eq",
            "location": 365,
            "return": [],
            "arguments": {}
        },
        "test_message_value_field_set": {
            "name": "test_message_value_field_set",
            "location": 373,
            "return": [],
            "arguments": {}
        },
        "test_message_value_is_valid_opaque_field": {
            "name": "test_message_value_is_valid_opaque_field",
            "location": 382,
            "return": [],
            "arguments": {
                "tlv_message_value": [],
                "ethernet_frame_value": []
            }
        },
        "test_message_value_parse": {
            "name": "test_message_value_parse",
            "location": 399,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_message_value_parse_incorrect_nested_message": {
            "name": "test_message_value_parse_incorrect_nested_message",
            "location": 413,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_message_value_parse_from_bitstring": {
            "name": "test_message_value_parse_from_bitstring",
            "location": 436,
            "return": [],
            "arguments": {
                "tlv_message_value": [],
                "enum_value": []
            }
        },
        "test_message_value_parse_from_bitstring_invalid": {
            "name": "test_message_value_parse_from_bitstring_invalid",
            "location": 452,
            "return": [],
            "arguments": {
                "tlv_message_value": []
            }
        },
        "test_message_value_set_invalid": {
            "name": "test_message_value_set_invalid",
            "location": 473,
            "return": [],
            "arguments": {
                "ethernet_frame_value": []
            }
        },
        "test_integer_value_mod": {
            "name": "test_integer_value_mod",
            "location": 489,
            "return": [],
            "arguments": {}
        },
        "test_integer_value_range": {
            "name": "test_integer_value_range",
            "location": 512,
            "return": [],
            "arguments": {}
        },
        "fixture_enum_value": {
            "name": "fixture_enum_value",
            "location": 532,
            "return": [],
            "arguments": {}
        },
        "test_enum_value_literals": {
            "name": "test_enum_value_literals",
            "location": 543,
            "return": [],
            "arguments": {
                "enum_value": []
            }
        },
        "test_enum_value_assign": {
            "name": "test_enum_value_assign",
            "location": 553,
            "return": [],
            "arguments": {
                "enum_value": []
            }
        },
        "test_enum_value_parse": {
            "name": "test_enum_value_parse",
            "location": 568,
            "return": [],
            "arguments": {
                "enum_value": []
            }
        },
        "fixture_enum_value_imported": {
            "name": "fixture_enum_value_imported",
            "location": 577,
            "return": [],
            "arguments": {}
        },
        "test_enum_value_imported": {
            "name": "test_enum_value_imported",
            "location": 589,
            "return": [],
            "arguments": {
                "enum_value_imported": []
            }
        },
        "test_enum_value_imported_assign": {
            "name": "test_enum_value_imported_assign",
            "location": 597,
            "return": [],
            "arguments": {
                "enum_value_imported": []
            }
        },
        "test_enum_value_imported_parse": {
            "name": "test_enum_value_imported_parse",
            "location": 604,
            "return": [],
            "arguments": {
                "enum_value_imported": []
            }
        },
        "fixture_enum_value_builtin": {
            "name": "fixture_enum_value_builtin",
            "location": 610,
            "return": [],
            "arguments": {}
        },
        "test_enum_value_builtin": {
            "name": "test_enum_value_builtin",
            "location": 614,
            "return": [],
            "arguments": {
                "enum_value_builtin": []
            }
        },
        "test_enum_value_builtin_assign": {
            "name": "test_enum_value_builtin_assign",
            "location": 622,
            "return": [],
            "arguments": {
                "enum_value_builtin": []
            }
        },
        "test_enum_value_builtin_parse": {
            "name": "test_enum_value_builtin_parse",
            "location": 629,
            "return": [],
            "arguments": {
                "enum_value_builtin": []
            }
        },
        "test_opaque_value": {
            "name": "test_opaque_value",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "test_opaque_value_eq": {
            "name": "test_opaque_value_eq",
            "location": 656,
            "return": [],
            "arguments": {
                "enum_value": []
            }
        },
        "test_opaque_value_clear": {
            "name": "test_opaque_value_clear",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "test_invalid_value": {
            "name": "test_invalid_value",
            "location": 690,
            "return": [],
            "arguments": {}
        },
        "test_sequence_messages": {
            "name": "test_sequence_messages",
            "location": 701,
            "return": [],
            "arguments": {
                "message_sequence_value": [],
                "sequence_message_package": []
            }
        },
        "fixture_sequence_type_package": {
            "name": "fixture_sequence_type_package",
            "location": 716,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_sequence_type_foo_value": {
            "name": "fixture_sequence_type_foo_value",
            "location": 721,
            "return": [],
            "arguments": {
                "sequence_type_package": []
            }
        },
        "test_sequence_scalars": {
            "name": "test_sequence_scalars",
            "location": 725,
            "return": [],
            "arguments": {
                "sequence_type_foo_value": []
            }
        },
        "test_sequence_preserve_value": {
            "name": "test_sequence_preserve_value",
            "location": 739,
            "return": [],
            "arguments": {
                "enum_value": []
            }
        },
        "test_sequence_parse_from_bytes": {
            "name": "test_sequence_parse_from_bytes",
            "location": 756,
            "return": [],
            "arguments": {
                "message_sequence_value": [],
                "sequence_type_foo_value": []
            }
        },
        "test_sequence_parse_unsupported_member_type": {
            "name": "test_sequence_parse_unsupported_member_type",
            "location": 768,
            "return": [],
            "arguments": {}
        },
        "test_sequence_assign_invalid": {
            "name": "test_sequence_assign_invalid",
            "location": 777,
            "return": [],
            "arguments": {
                "tlv_message_value": [],
                "ethernet_frame_value": [],
                "sequence_type_foo_value": [],
                "enum_value": []
            }
        },
        "icmp_checksum_function": {
            "name": "icmp_checksum_function",
            "location": 869,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_checksum_field_not_defined": {
            "name": "test_checksum_field_not_defined",
            "location": 890,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_function_not_set": {
            "name": "test_checksum_function_not_set",
            "location": 913,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_manual": {
            "name": "test_checksum_manual",
            "location": 930,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_auto": {
            "name": "test_checksum_auto",
            "location": 956,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_auto_change_field": {
            "name": "test_checksum_auto_change_field",
            "location": 974,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_parse": {
            "name": "test_checksum_parse",
            "location": 997,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_parse_invalid": {
            "name": "test_checksum_parse_invalid",
            "location": 1009,
            "return": [],
            "arguments": {
                "icmp_checksum_message_value": []
            }
        },
        "test_checksum_parse_invalid_tlv": {
            "name": "test_checksum_parse_invalid_tlv",
            "location": 1021,
            "return": [],
            "arguments": {
                "tlv_checksum_package": []
            }
        },
        "test_checksum_message_first": {
            "name": "test_checksum_message_first",
            "location": 1028,
            "return": [],
            "arguments": {
                "icmp_checksum_message_first": []
            }
        },
        "test_checksum_no_verification": {
            "name": "test_checksum_no_verification",
            "location": 1046,
            "return": [],
            "arguments": {}
        },
        "fixture_tlv_checksum_package": {
            "name": "fixture_tlv_checksum_package",
            "location": 1096,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_tlv_checksum_message": {
            "name": "fixture_tlv_checksum_message",
            "location": 1101,
            "return": [],
            "arguments": {
                "tlv_checksum_package": []
            }
        },
        "test_checksum_is_checksum_settable": {
            "name": "test_checksum_is_checksum_settable",
            "location": 1105,
            "return": [],
            "arguments": {
                "tlv_checksum_message": []
            }
        },
        "fixture_no_conditionals_package": {
            "name": "fixture_no_conditionals_package",
            "location": 1121,
            "return": [],
            "arguments": {
                "pyrflx_": []
            }
        },
        "fixture_no_conditionals_message": {
            "name": "fixture_no_conditionals_message",
            "location": 1126,
            "return": [],
            "arguments": {
                "no_conditionals_package": []
            }
        },
        "test_checksum_value_range": {
            "name": "test_checksum_value_range",
            "location": 1131,
            "return": [],
            "arguments": {
                "no_conditionals_message": []
            }
        },
        "checksum_function_zero": {
            "name": "checksum_function_zero",
            "location": 1148,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "checksum_function_255": {
            "name": "checksum_function_255",
            "location": 1153,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "fixture_prflx_checksum": {
            "name": "fixture_prflx_checksum",
            "location": 1159,
            "return": [],
            "arguments": {}
        },
        "test_refinement_with_checksum": {
            "name": "test_refinement_with_checksum",
            "location": 1165,
            "return": [],
            "arguments": {
                "pyrflx_checksum": []
            }
        },
        "test_set_checksum_to_pyrflx": {
            "name": "test_set_checksum_to_pyrflx",
            "location": 1182,
            "return": [],
            "arguments": {
                "pyrflx_checksum": []
            }
        },
        "test_set_checksum_to_pyrflx_invalid_id": {
            "name": "test_set_checksum_to_pyrflx_invalid_id",
            "location": 1211,
            "return": [],
            "arguments": {
                "pyrflx_checksum": []
            }
        },
        "test_set_checksum_to_pyrflx_package_not_found": {
            "name": "test_set_checksum_to_pyrflx_package_not_found",
            "location": 1238,
            "return": [],
            "arguments": {
                "pyrflx_checksum": []
            }
        },
        "test_set_checksum_to_pyrflx_message_not_found": {
            "name": "test_set_checksum_to_pyrflx_message_not_found",
            "location": 1248,
            "return": [],
            "arguments": {
                "pyrflx_checksum": []
            }
        },
        "test_unaligned_field_serialization": {
            "name": "test_unaligned_field_serialization",
            "location": 1271,
            "return": [],
            "arguments": {
                "data": [],
                "f1": [],
                "f2": [],
                "f3": []
            }
        },
        "test_message_size": {
            "name": "test_message_size",
            "location": 1284,
            "return": [],
            "arguments": {
                "message_size_value": []
            }
        },
        "test_message_size_unverified": {
            "name": "test_message_size_unverified",
            "location": 1307,
            "return": [],
            "arguments": {}
        },
        "test_message_type_size_condition": {
            "name": "test_message_type_size_condition",
            "location": 1319,
            "return": [],
            "arguments": {
                "message_type_size_value": []
            }
        },
        "test_always_valid_aspect": {
            "name": "test_always_valid_aspect",
            "location": 1326,
            "return": [],
            "arguments": {
                "message_always_valid_aspect_value": []
            }
        },
        "test_get_inner_messages": {
            "name": "test_get_inner_messages",
            "location": 1336,
            "return": [],
            "arguments": {
                "sequence_message_package": [],
                "message_sequence_refinement_value": []
            }
        },
        "test_get_path": {
            "name": "test_get_path",
            "location": 1358,
            "return": [],
            "arguments": {
                "icmp_message_value": []
            }
        },
        "test_get_model": {
            "name": "test_get_model",
            "location": 1379,
            "return": [],
            "arguments": {
                "icmp_message_value": []
            }
        },
        "test_parameterized_message": {
            "name": "test_parameterized_message",
            "location": 1383,
            "return": [],
            "arguments": {
                "parameterized_package": []
            }
        },
        "test_parameterized_message_no_verification": {
            "name": "test_parameterized_message_no_verification",
            "location": 1395,
            "return": [],
            "arguments": {}
        },
        "test_parameterized_message_invalid_type": {
            "name": "test_parameterized_message_invalid_type",
            "location": 1410,
            "return": [],
            "arguments": {
                "parameterized_package": []
            }
        },
        "test_json_serialization": {
            "name": "test_json_serialization",
            "location": 1420,
            "return": [],
            "arguments": {}
        },
        "test_message_endianness_parse_be": {
            "name": "test_message_endianness_parse_be",
            "location": 1447,
            "return": [],
            "arguments": {
                "endianness_package": []
            }
        },
        "test_message_endianness_parse_le": {
            "name": "test_message_endianness_parse_le",
            "location": 1463,
            "return": [],
            "arguments": {
                "endianness_package": []
            }
        },
        "test_message_endianness_set_be": {
            "name": "test_message_endianness_set_be",
            "location": 1479,
            "return": [],
            "arguments": {
                "endianness_package": []
            }
        },
        "test_message_endianness_set_le": {
            "name": "test_message_endianness_set_le",
            "location": 1495,
            "return": [],
            "arguments": {
                "endianness_package": []
            }
        },
        "test_low_order": {
            "name": "test_low_order",
            "location": 1511,
            "return": [],
            "arguments": {
                "low_order_package": []
            }
        },
        "test_aggregate_in_relation_valid": {
            "name": "test_aggregate_in_relation_valid",
            "location": 1521,
            "return": [],
            "arguments": {
                "aggregate_in_relation_package": []
            }
        }
    },
    "RecordFlux-main/tests/unit/typing_test.py": {
        "test_bounds_contains": {
            "name": "test_bounds_contains",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bounds_error": {
            "name": "test_bounds_error",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_bounds_str": {
            "name": "test_bounds_str",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enumeration_common_type": {
            "name": "test_enumeration_common_type",
            "location": 64,
            "return": [],
            "arguments": {
                "enumeration": [],
                "other": [],
                "expected": []
            }
        },
        "test_enumeration_is_compatible": {
            "name": "test_enumeration_is_compatible",
            "location": 79,
            "return": [],
            "arguments": {
                "enumeration": [],
                "other": [],
                "expected": []
            }
        },
        "test_any_integer_common_type": {
            "name": "test_any_integer_common_type",
            "location": 108,
            "return": [],
            "arguments": {
                "any_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_any_integer_is_compatible": {
            "name": "test_any_integer_is_compatible",
            "location": 137,
            "return": [],
            "arguments": {
                "any_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_undefined_integer_common_type": {
            "name": "test_undefined_integer_common_type",
            "location": 162,
            "return": [],
            "arguments": {
                "undefined_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_undefined_integer_is_compatible": {
            "name": "test_undefined_integer_is_compatible",
            "location": 189,
            "return": [],
            "arguments": {
                "undefined_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_universal_integer_common_type": {
            "name": "test_universal_integer_common_type",
            "location": 221,
            "return": [],
            "arguments": {
                "universal_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_universal_integer_is_compatible": {
            "name": "test_universal_integer_is_compatible",
            "location": 248,
            "return": [],
            "arguments": {
                "universal_integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_integer_common_type": {
            "name": "test_integer_common_type",
            "location": 296,
            "return": [],
            "arguments": {
                "integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_integer_is_compatible": {
            "name": "test_integer_is_compatible",
            "location": 342,
            "return": [],
            "arguments": {
                "integer": [],
                "other": [],
                "expected": []
            }
        },
        "test_aggregate_common_type": {
            "name": "test_aggregate_common_type",
            "location": 382,
            "return": [],
            "arguments": {
                "aggregate": [],
                "other": [],
                "expected": []
            }
        },
        "test_aggregate_is_compatible": {
            "name": "test_aggregate_is_compatible",
            "location": 422,
            "return": [],
            "arguments": {
                "aggregate": [],
                "other": [],
                "expected": []
            }
        },
        "test_composite_common_type": {
            "name": "test_composite_common_type",
            "location": 477,
            "return": [],
            "arguments": {
                "composite": [],
                "other": [],
                "expected": []
            }
        },
        "test_composite_is_compatible": {
            "name": "test_composite_is_compatible",
            "location": 532,
            "return": [],
            "arguments": {
                "composite": [],
                "other": [],
                "expected": []
            }
        },
        "test_message_common_type": {
            "name": "test_message_common_type",
            "location": 547,
            "return": [],
            "arguments": {
                "message": [],
                "other": [],
                "expected": []
            }
        },
        "test_message_is_compatible": {
            "name": "test_message_is_compatible",
            "location": 562,
            "return": [],
            "arguments": {
                "message": [],
                "other": [],
                "expected": []
            }
        },
        "test_channel_common_type": {
            "name": "test_channel_common_type",
            "location": 589,
            "return": [],
            "arguments": {
                "channel": [],
                "other": [],
                "expected": []
            }
        },
        "test_channel_is_compatible": {
            "name": "test_channel_is_compatible",
            "location": 610,
            "return": [],
            "arguments": {
                "channel": [],
                "other": [],
                "expected": []
            }
        },
        "test_common_type": {
            "name": "test_common_type",
            "location": 663,
            "return": [],
            "arguments": {
                "types": [],
                "expected": []
            }
        },
        "test_check_type": {
            "name": "test_check_type",
            "location": 677,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "test_check_type_error": {
            "name": "test_check_type_error",
            "location": 703,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "match": []
            }
        },
        "test_check_type_instance": {
            "name": "test_check_type_instance",
            "location": 717,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "test_check_type_instance_error": {
            "name": "test_check_type_instance_error",
            "location": 745,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "match": []
            }
        }
    },
    "RecordFlux-main/tests/unit/validator_test.py": {
        "test_initialize_pyrflx_spec_file_not_found": {
            "name": "test_initialize_pyrflx_spec_file_not_found",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_import_error": {
            "name": "test_initialize_pyrflx_checksum_import_error",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_no_checksum_provided": {
            "name": "test_initialize_pyrflx_checksum_no_checksum_provided",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_missing_attribute": {
            "name": "test_initialize_pyrflx_checksum_missing_attribute",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_missing_field": {
            "name": "test_initialize_pyrflx_checksum_missing_field",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_invalid_function_type": {
            "name": "test_initialize_pyrflx_checksum_invalid_function_type",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_invalid_field_dict_type": {
            "name": "test_initialize_pyrflx_checksum_invalid_field_dict_type",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_invalid_message": {
            "name": "test_initialize_pyrflx_checksum_invalid_message",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_invalid_field": {
            "name": "test_initialize_pyrflx_checksum_invalid_field",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_initialize_pyrflx_checksum_invalid_attribute_type": {
            "name": "test_initialize_pyrflx_checksum_invalid_attribute_type",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_validate_error_msg_not_in_package": {
            "name": "test_validate_error_msg_not_in_package",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "fixture_tmp_path_restricted": {
            "name": "fixture_tmp_path_restricted",
            "location": 165,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_validate_cannot_open_output_file": {
            "name": "test_validate_cannot_open_output_file",
            "location": 171,
            "return": [],
            "arguments": {
                "tmp_path_restricted": []
            }
        },
        "test_validate_abort_on_error": {
            "name": "test_validate_abort_on_error",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_validate_not_regular_file": {
            "name": "test_validate_not_regular_file",
            "location": 213,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_validate_positive": {
            "name": "test_validate_positive",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_validate_positive_output": {
            "name": "test_validate_positive_output",
            "location": 237,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_validate_negative": {
            "name": "test_validate_negative",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_validate_negative_output": {
            "name": "test_validate_negative_output",
            "location": 271,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_validate_coverage": {
            "name": "test_validate_coverage",
            "location": 294,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_coverage_threshold_missed": {
            "name": "test_coverage_threshold_missed",
            "location": 334,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_validate_coverage_threshold_invalid": {
            "name": "test_validate_coverage_threshold_invalid",
            "location": 398,
            "return": [],
            "arguments": {}
        },
        "test_validate_checksum_positive": {
            "name": "test_validate_checksum_positive",
            "location": 414,
            "return": [],
            "arguments": {}
        },
        "test_validate_pyrflx_checksum_negative": {
            "name": "test_validate_pyrflx_checksum_negative",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "test_validate_message_original_and_parsed_not_equal": {
            "name": "test_validate_message_original_and_parsed_not_equal",
            "location": 441,
            "return": [],
            "arguments": {}
        },
        "test_validate_message_parameterized_message": {
            "name": "test_validate_message_parameterized_message",
            "location": 459,
            "return": [],
            "arguments": {}
        },
        "test_expand_expression": {
            "name": "test_expand_expression",
            "location": 610,
            "return": [],
            "arguments": {
                "expression": [],
                "expected": []
            }
        },
        "test_parameterized_message_missing_parameter": {
            "name": "test_parameterized_message_missing_parameter",
            "location": 615,
            "return": [],
            "arguments": {}
        },
        "test_parameterized_message_excess_parameter": {
            "name": "test_parameterized_message_excess_parameter",
            "location": 641,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/__init__.py": {},
    "RecordFlux-main/tests/unit/model/message_test.py": {
        "assert_message": {
            "name": "assert_message",
            "location": 240,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "msg": []
            }
        },
        "test_invalid_identifier": {
            "name": "test_invalid_identifier",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_invalid_parameter_type_composite": {
            "name": "test_invalid_parameter_type_composite",
            "location": 260,
            "return": [],
            "arguments": {
                "parameter_type": []
            }
        },
        "test_invalid_parameter_type_always_valid_enum": {
            "name": "test_invalid_parameter_type_always_valid_enum",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "test_missing_type": {
            "name": "test_missing_type",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "test_ambiguous_first_field": {
            "name": "test_ambiguous_first_field",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "test_illegal_first_aspect_at_initial_link": {
            "name": "test_illegal_first_aspect_at_initial_link",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_name_conflict_field_enum": {
            "name": "test_name_conflict_field_enum",
            "location": 336,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_link": {
            "name": "test_duplicate_link",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "test_multiple_duplicate_links": {
            "name": "test_multiple_duplicate_links",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_unsupported_expression": {
            "name": "test_unsupported_expression",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "test_unreachable_field": {
            "name": "test_unreachable_field",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "test_cycle": {
            "name": "test_cycle",
            "location": 454,
            "return": [],
            "arguments": {}
        },
        "test_parameters": {
            "name": "test_parameters",
            "location": 480,
            "return": [],
            "arguments": {}
        },
        "test_fields": {
            "name": "test_fields",
            "location": 488,
            "return": [],
            "arguments": {}
        },
        "test_parameter_types": {
            "name": "test_parameter_types",
            "location": 504,
            "return": [],
            "arguments": {}
        },
        "test_field_types": {
            "name": "test_field_types",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "test_path_condition": {
            "name": "test_path_condition",
            "location": 518,
            "return": [],
            "arguments": {}
        },
        "test_incoming": {
            "name": "test_incoming",
            "location": 552,
            "return": [],
            "arguments": {}
        },
        "test_outgoing": {
            "name": "test_outgoing",
            "location": 581,
            "return": [],
            "arguments": {}
        },
        "test_direct_predecessors": {
            "name": "test_direct_predecessors",
            "location": 603,
            "return": [],
            "arguments": {}
        },
        "test_direct_successors": {
            "name": "test_direct_successors",
            "location": 612,
            "return": [],
            "arguments": {}
        },
        "test_definite_predecessors": {
            "name": "test_definite_predecessors",
            "location": 618,
            "return": [],
            "arguments": {}
        },
        "test_predecessors": {
            "name": "test_predecessors",
            "location": 635,
            "return": [],
            "arguments": {}
        },
        "test_successors": {
            "name": "test_successors",
            "location": 656,
            "return": [],
            "arguments": {}
        },
        "test_field_locations": {
            "name": "test_field_locations",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "test_invalid_message_field_type": {
            "name": "test_invalid_message_field_type",
            "location": 705,
            "return": [],
            "arguments": {}
        },
        "test_undefined_variable": {
            "name": "test_undefined_variable",
            "location": 728,
            "return": [],
            "arguments": {
                "operation": [],
                "condition": []
            }
        },
        "test_undefined_variables": {
            "name": "test_undefined_variables",
            "location": 755,
            "return": [],
            "arguments": {}
        },
        "test_subsequent_variable": {
            "name": "test_subsequent_variable",
            "location": 780,
            "return": [],
            "arguments": {}
        },
        "test_reference_to_optional_field_1": {
            "name": "test_reference_to_optional_field_1",
            "location": 799,
            "return": [],
            "arguments": {}
        },
        "test_reference_to_optional_field_2": {
            "name": "test_reference_to_optional_field_2",
            "location": 824,
            "return": [],
            "arguments": {}
        },
        "test_invalid_use_of_size_attribute": {
            "name": "test_invalid_use_of_size_attribute",
            "location": 855,
            "return": [],
            "arguments": {}
        },
        "test_invalid_relation_to_opaque": {
            "name": "test_invalid_relation_to_opaque",
            "location": 868,
            "return": [],
            "arguments": {}
        },
        "test_invalid_relation_to_aggregate": {
            "name": "test_invalid_relation_to_aggregate",
            "location": 889,
            "return": [],
            "arguments": {}
        },
        "test_invalid_element_in_relation_to_aggregate": {
            "name": "test_invalid_element_in_relation_to_aggregate",
            "location": 915,
            "return": [],
            "arguments": {}
        },
        "test_opaque_aggregate_out_of_range": {
            "name": "test_opaque_aggregate_out_of_range",
            "location": 937,
            "return": [],
            "arguments": {}
        },
        "test_sequence_aggregate_out_of_range": {
            "name": "test_sequence_aggregate_out_of_range",
            "location": 965,
            "return": [],
            "arguments": {}
        },
        "test_sequence_aggregate_invalid_element_type": {
            "name": "test_sequence_aggregate_invalid_element_type",
            "location": 993,
            "return": [],
            "arguments": {}
        },
        "test_opaque_not_byte_aligned": {
            "name": "test_opaque_not_byte_aligned",
            "location": 1027,
            "return": [],
            "arguments": {}
        },
        "test_opaque_not_byte_aligned_dynamic": {
            "name": "test_opaque_not_byte_aligned_dynamic",
            "location": 1041,
            "return": [],
            "arguments": {}
        },
        "test_opaque_valid_byte_aligned_dynamic_mul": {
            "name": "test_opaque_valid_byte_aligned_dynamic_mul",
            "location": 1071,
            "return": [],
            "arguments": {}
        },
        "test_opaque_valid_byte_aligned_dynamic_cond": {
            "name": "test_opaque_valid_byte_aligned_dynamic_cond",
            "location": 1083,
            "return": [],
            "arguments": {}
        },
        "test_opaque_size_not_multiple_of_8": {
            "name": "test_opaque_size_not_multiple_of_8",
            "location": 1101,
            "return": [],
            "arguments": {}
        },
        "test_opaque_size_not_multiple_of_8_dynamic": {
            "name": "test_opaque_size_not_multiple_of_8_dynamic",
            "location": 1115,
            "return": [],
            "arguments": {}
        },
        "test_opaque_size_valid_multiple_of_8_dynamic_cond": {
            "name": "test_opaque_size_valid_multiple_of_8_dynamic_cond",
            "location": 1129,
            "return": [],
            "arguments": {}
        },
        "test_prefixed_message_attribute": {
            "name": "test_prefixed_message_attribute",
            "location": 1146,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_valid": {
            "name": "test_exclusive_valid",
            "location": 1206,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_enum_valid": {
            "name": "test_exclusive_enum_valid",
            "location": 1220,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_prefixed_enum_valid": {
            "name": "test_exclusive_prefixed_enum_valid",
            "location": 1234,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_conflict": {
            "name": "test_exclusive_conflict",
            "location": 1253,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_with_size_valid": {
            "name": "test_exclusive_with_size_valid",
            "location": 1276,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_with_size_valid_and_not": {
            "name": "test_exclusive_with_size_valid_and_not",
            "location": 1300,
            "return": [],
            "arguments": {}
        },
        "test_exclusive_with_size_invalid": {
            "name": "test_exclusive_with_size_invalid",
            "location": 1324,
            "return": [],
            "arguments": {}
        },
        "test_no_valid_path": {
            "name": "test_no_valid_path",
            "location": 1347,
            "return": [],
            "arguments": {}
        },
        "test_invalid_path_1": {
            "name": "test_invalid_path_1",
            "location": 1388,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_invalid_path_2": {
            "name": "test_invalid_path_2",
            "location": 1408,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_contradiction": {
            "name": "test_contradiction",
            "location": 1429,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_condition_range_low": {
            "name": "test_invalid_type_condition_range_low",
            "location": 1450,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_condition_range_high": {
            "name": "test_invalid_type_condition_range_high",
            "location": 1471,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_condition_modular_upper": {
            "name": "test_invalid_type_condition_modular_upper",
            "location": 1492,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_condition_modular_lower": {
            "name": "test_invalid_type_condition_modular_lower",
            "location": 1513,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type_condition_enum": {
            "name": "test_invalid_type_condition_enum",
            "location": 1534,
            "return": [],
            "arguments": {}
        },
        "test_tlv_valid_enum": {
            "name": "test_tlv_valid_enum",
            "location": 1575,
            "return": [],
            "arguments": {}
        },
        "test_invalid_fixed_size_field_with_size": {
            "name": "test_invalid_fixed_size_field_with_size",
            "location": 1597,
            "return": [],
            "arguments": {}
        },
        "test_valid_first": {
            "name": "test_valid_first",
            "location": 1614,
            "return": [],
            "arguments": {}
        },
        "test_invalid_first": {
            "name": "test_invalid_first",
            "location": 1627,
            "return": [],
            "arguments": {}
        },
        "test_invalid_first_is_last": {
            "name": "test_invalid_first_is_last",
            "location": 1646,
            "return": [],
            "arguments": {}
        },
        "test_invalid_first_forward_reference": {
            "name": "test_invalid_first_forward_reference",
            "location": 1663,
            "return": [],
            "arguments": {}
        },
        "test_valid_size_reference": {
            "name": "test_valid_size_reference",
            "location": 1683,
            "return": [],
            "arguments": {}
        },
        "test_invalid_size_forward_reference": {
            "name": "test_invalid_size_forward_reference",
            "location": 1696,
            "return": [],
            "arguments": {}
        },
        "test_invalid_negative_field_size_modular": {
            "name": "test_invalid_negative_field_size_modular",
            "location": 1714,
            "return": [],
            "arguments": {}
        },
        "test_invalid_negative_field_size_range_integer": {
            "name": "test_invalid_negative_field_size_range_integer",
            "location": 1734,
            "return": [],
            "arguments": {}
        },
        "test_payload_no_size": {
            "name": "test_payload_no_size",
            "location": 1753,
            "return": [],
            "arguments": {}
        },
        "test_sequence_no_size": {
            "name": "test_sequence_no_size",
            "location": 1768,
            "return": [],
            "arguments": {}
        },
        "test_incongruent_overlay": {
            "name": "test_incongruent_overlay",
            "location": 1783,
            "return": [],
            "arguments": {}
        },
        "test_field_coverage_1": {
            "name": "test_field_coverage_1",
            "location": 1811,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_field_coverage_2": {
            "name": "test_field_coverage_2",
            "location": 1831,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_field_after_message_start": {
            "name": "test_field_after_message_start",
            "location": 1866,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_message_with_implicit_size_single_field": {
            "name": "test_message_with_implicit_size_single_field",
            "location": 1897,
            "return": [],
            "arguments": {
                "size": [],
                "condition": [],
                "type_": []
            }
        },
        "test_message_with_implicit_size_multiple_fields": {
            "name": "test_message_with_implicit_size_multiple_fields",
            "location": 1921,
            "return": [],
            "arguments": {
                "size": [],
                "condition": [],
                "type_": []
            }
        },
        "test_invalid_use_of_message_attributes": {
            "name": "test_invalid_use_of_message_attributes",
            "location": 1940,
            "return": [],
            "arguments": {}
        },
        "test_no_path_to_final": {
            "name": "test_no_path_to_final",
            "location": 1972,
            "return": [],
            "arguments": {}
        },
        "test_no_path_to_final_transitive": {
            "name": "test_no_path_to_final_transitive",
            "location": 1992,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_mod_first": {
            "name": "test_conditionally_unreachable_field_mod_first",
            "location": 2022,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_mod_last": {
            "name": "test_conditionally_unreachable_field_mod_last",
            "location": 2051,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_range_first": {
            "name": "test_conditionally_unreachable_field_range_first",
            "location": 2078,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_range_last": {
            "name": "test_conditionally_unreachable_field_range_last",
            "location": 2107,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_enum_first": {
            "name": "test_conditionally_unreachable_field_enum_first",
            "location": 2134,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_enum_last": {
            "name": "test_conditionally_unreachable_field_enum_last",
            "location": 2163,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_outgoing": {
            "name": "test_conditionally_unreachable_field_outgoing",
            "location": 2190,
            "return": [],
            "arguments": {}
        },
        "test_conditionally_unreachable_field_outgoing_multi": {
            "name": "test_conditionally_unreachable_field_outgoing_multi",
            "location": 2212,
            "return": [],
            "arguments": {}
        },
        "test_size_aspect_final": {
            "name": "test_size_aspect_final",
            "location": 2246,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_valid_size": {
            "name": "test_aggregate_equal_valid_size",
            "location": 2261,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_invalid_size1": {
            "name": "test_aggregate_equal_invalid_size1",
            "location": 2279,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_invalid_size2": {
            "name": "test_aggregate_equal_invalid_size2",
            "location": 2302,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_inequal_valid_size": {
            "name": "test_aggregate_inequal_valid_size",
            "location": 2325,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_inequal_invalid_size": {
            "name": "test_aggregate_inequal_invalid_size",
            "location": 2343,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_sequence_valid_size": {
            "name": "test_aggregate_equal_sequence_valid_size",
            "location": 2366,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_sequence_invalid_size": {
            "name": "test_aggregate_equal_sequence_invalid_size",
            "location": 2381,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_equal_invalid_size_field": {
            "name": "test_aggregate_equal_invalid_size_field",
            "location": 2410,
            "return": [],
            "arguments": {}
        },
        "test_no_contradiction_multi": {
            "name": "test_no_contradiction_multi",
            "location": 2446,
            "return": [],
            "arguments": {}
        },
        "test_discontiguous_optional_fields": {
            "name": "test_discontiguous_optional_fields",
            "location": 2469,
            "return": [],
            "arguments": {}
        },
        "test_checksum": {
            "name": "test_checksum",
            "location": 2537,
            "return": [],
            "arguments": {
                "checksums": [],
                "condition": []
            }
        },
        "test_checksum_error": {
            "name": "test_checksum_error",
            "location": 2591,
            "return": [],
            "arguments": {
                "checksums": [],
                "condition": [],
                "error": []
            }
        },
        "test_field_size": {
            "name": "test_field_size",
            "location": 2608,
            "return": [],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 2638,
            "return": [],
            "arguments": {}
        },
        "test_proven": {
            "name": "test_proven",
            "location": 2679,
            "return": [],
            "arguments": {}
        },
        "test_is_possibly_empty": {
            "name": "test_is_possibly_empty",
            "location": 2688,
            "return": [],
            "arguments": {}
        },
        "test_has_fixed_size": {
            "name": "test_has_fixed_size",
            "location": 2712,
            "return": [],
            "arguments": {}
        },
        "test_has_implicit_size": {
            "name": "test_has_implicit_size",
            "location": 2720,
            "return": [],
            "arguments": {}
        },
        "test_is_definite": {
            "name": "test_is_definite",
            "location": 2728,
            "return": [],
            "arguments": {}
        },
        "test_size": {
            "name": "test_size",
            "location": 2738,
            "return": [],
            "arguments": {}
        },
        "test_size_error": {
            "name": "test_size_error",
            "location": 2813,
            "return": [],
            "arguments": {}
        },
        "test_max_size": {
            "name": "test_max_size",
            "location": 2848,
            "return": [],
            "arguments": {}
        },
        "test_max_size_error": {
            "name": "test_max_size_error",
            "location": 2855,
            "return": [],
            "arguments": {}
        },
        "test_max_field_sizes": {
            "name": "test_max_field_sizes",
            "location": 2863,
            "return": [],
            "arguments": {}
        },
        "test_max_field_sizes_error": {
            "name": "test_max_field_sizes_error",
            "location": 2878,
            "return": [],
            "arguments": {}
        },
        "test_derived_message_incorrect_base_name": {
            "name": "test_derived_message_incorrect_base_name",
            "location": 2888,
            "return": [],
            "arguments": {}
        },
        "test_derived_message_proven": {
            "name": "test_derived_message_proven",
            "location": 2896,
            "return": [],
            "arguments": {}
        },
        "test_prefixed_message": {
            "name": "test_prefixed_message",
            "location": 2908,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_simple": {
            "name": "test_merge_message_simple",
            "location": 2967,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_complex": {
            "name": "test_merge_message_complex",
            "location": 3000,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_recursive": {
            "name": "test_merge_message_recursive",
            "location": 3070,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_simple_derived": {
            "name": "test_merge_message_simple_derived",
            "location": 3127,
            "return": [],
            "arguments": {}
        },
        "test_merge_byte_order": {
            "name": "test_merge_byte_order",
            "location": 3162,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_constrained": {
            "name": "test_merge_message_constrained",
            "location": 3195,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_constrained_empty": {
            "name": "test_merge_message_constrained_empty",
            "location": 3245,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_error_name_conflict": {
            "name": "test_merge_message_error_name_conflict",
            "location": 3278,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_parameterized": {
            "name": "test_merge_message_parameterized",
            "location": 3307,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_with_message_last_attribute": {
            "name": "test_merge_message_with_message_last_attribute",
            "location": 3329,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_with_message_size_attribute": {
            "name": "test_merge_message_with_message_size_attribute",
            "location": 3420,
            "return": [],
            "arguments": {}
        },
        "test_merge_message_type_message_size_attribute_in_outer_message": {
            "name": "test_merge_message_type_message_size_attribute_in_outer_message",
            "location": 3507,
            "return": [],
            "arguments": {}
        },
        "test_paths": {
            "name": "test_paths",
            "location": 3563,
            "return": [],
            "arguments": {}
        },
        "test_normalization": {
            "name": "test_normalization",
            "location": 3586,
            "return": [],
            "arguments": {}
        },
        "test_set_refinements": {
            "name": "test_set_refinements",
            "location": 3598,
            "return": [],
            "arguments": {}
        },
        "test_set_refinements_error": {
            "name": "test_set_refinements_error",
            "location": 3616,
            "return": [],
            "arguments": {}
        },
        "test_message_dependencies": {
            "name": "test_message_dependencies",
            "location": 3626,
            "return": [],
            "arguments": {}
        },
        "test_message_str": {
            "name": "test_message_str",
            "location": 3642,
            "return": [],
            "arguments": {}
        },
        "test_refinement_dependencies": {
            "name": "test_refinement_dependencies",
            "location": 3677,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_package": {
            "name": "test_refinement_invalid_package",
            "location": 3698,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_field_type": {
            "name": "test_refinement_invalid_field_type",
            "location": 3707,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_field": {
            "name": "test_refinement_invalid_field",
            "location": 3719,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_condition": {
            "name": "test_refinement_invalid_condition",
            "location": 3728,
            "return": [],
            "arguments": {}
        },
        "test_refinement_invalid_condition_unqualified_literal": {
            "name": "test_refinement_invalid_condition_unqualified_literal",
            "location": 3748,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/model/model_test.py": {
        "assert_model_error": {
            "name": "assert_model_error",
            "location": 25,
            "return": [],
            "arguments": {
                "types": [],
                "regex": []
            }
        },
        "test_name_conflict_types": {
            "name": "test_name_conflict_types",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_conflicting_refinements": {
            "name": "test_conflicting_refinements",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_name_conflict_sessions": {
            "name": "test_name_conflict_sessions",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_conflicting_literal_builtin_type": {
            "name": "test_conflicting_literal_builtin_type",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_name_conflict_between_literal_and_type": {
            "name": "test_name_conflict_between_literal_and_type",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_invalid_enumeration_type_builtin_literals": {
            "name": "test_invalid_enumeration_type_builtin_literals",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_init_introduce_type_dependencies": {
            "name": "test_init_introduce_type_dependencies",
            "location": 153,
            "return": [],
            "arguments": {
                "types": [],
                "model": []
            }
        },
        "test_invalid_enumeration_type_identical_literals": {
            "name": "test_invalid_enumeration_type_identical_literals",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "test_write_specification_files": {
            "name": "test_write_specification_files",
            "location": 179,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_write_specification_files_missing_deps": {
            "name": "test_write_specification_files_missing_deps",
            "location": 203,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_write_specification_file_multiple_packages": {
            "name": "test_write_specification_file_multiple_packages",
            "location": 230,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_write_specification_file_multiple_packages_missing_deps": {
            "name": "test_write_specification_file_multiple_packages_missing_deps",
            "location": 285,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_write_specification_files_line_too_long": {
            "name": "test_write_specification_files_line_too_long",
            "location": 340,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/unit/model/session_test.py": {
        "test_str": {
            "name": "test_str",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_invalid_name": {
            "name": "test_invalid_name",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_empty_states": {
            "name": "test_empty_states",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_invalid_initial": {
            "name": "test_invalid_initial",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_invalid_final": {
            "name": "test_invalid_final",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "test_invalid_target_state": {
            "name": "test_invalid_target_state",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_state": {
            "name": "test_duplicate_state",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_multiple_duplicate_states": {
            "name": "test_multiple_duplicate_states",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "test_unreachable_state": {
            "name": "test_unreachable_state",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "test_multiple_unreachable_states": {
            "name": "test_multiple_unreachable_states",
            "location": 336,
            "return": [],
            "arguments": {}
        },
        "test_detached_state": {
            "name": "test_detached_state",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "test_multiple_detached_states": {
            "name": "test_multiple_detached_states",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "test_undeclared_variable": {
            "name": "test_undeclared_variable",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "test_undefined_type": {
            "name": "test_undefined_type",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "test_declared_variable": {
            "name": "test_declared_variable",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "test_declared_local_variable": {
            "name": "test_declared_local_variable",
            "location": 488,
            "return": [],
            "arguments": {}
        },
        "test_undeclared_local_variable": {
            "name": "test_undeclared_local_variable",
            "location": 515,
            "return": [],
            "arguments": {}
        },
        "test_declared_local_variable_valid": {
            "name": "test_declared_local_variable_valid",
            "location": 553,
            "return": [],
            "arguments": {}
        },
        "test_declared_local_variable_message_field": {
            "name": "test_declared_local_variable_message_field",
            "location": 580,
            "return": [],
            "arguments": {}
        },
        "test_assignment_to_undeclared_variable": {
            "name": "test_assignment_to_undeclared_variable",
            "location": 609,
            "return": [],
            "arguments": {}
        },
        "test_assignment_from_undeclared_variable": {
            "name": "test_assignment_from_undeclared_variable",
            "location": 627,
            "return": [],
            "arguments": {}
        },
        "test_reset_of_undeclared_list": {
            "name": "test_reset_of_undeclared_list",
            "location": 649,
            "return": [],
            "arguments": {}
        },
        "test_reset_incompatible": {
            "name": "test_reset_incompatible",
            "location": 667,
            "return": [],
            "arguments": {}
        },
        "test_call_to_undeclared_function": {
            "name": "test_call_to_undeclared_function",
            "location": 688,
            "return": [],
            "arguments": {}
        },
        "test_call_undeclared_variable": {
            "name": "test_call_undeclared_variable",
            "location": 713,
            "return": [],
            "arguments": {}
        },
        "test_call_invalid_argument_type": {
            "name": "test_call_invalid_argument_type",
            "location": 749,
            "return": [],
            "arguments": {}
        },
        "test_call_missing_arguments": {
            "name": "test_call_missing_arguments",
            "location": 785,
            "return": [],
            "arguments": {}
        },
        "test_call_too_many_arguments": {
            "name": "test_call_too_many_arguments",
            "location": 815,
            "return": [],
            "arguments": {}
        },
        "test_channel_read": {
            "name": "test_channel_read",
            "location": 846,
            "return": [],
            "arguments": {}
        },
        "test_channel_write": {
            "name": "test_channel_write",
            "location": 870,
            "return": [],
            "arguments": {}
        },
        "test_channel_read_undeclared": {
            "name": "test_channel_read_undeclared",
            "location": 894,
            "return": [],
            "arguments": {}
        },
        "test_channel_read_invalid_type": {
            "name": "test_channel_read_invalid_type",
            "location": 914,
            "return": [],
            "arguments": {}
        },
        "test_channel_read_invalid_mode": {
            "name": "test_channel_read_invalid_mode",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "test_channel_write_invalid_mode": {
            "name": "test_channel_write_invalid_mode",
            "location": 975,
            "return": [],
            "arguments": {}
        },
        "test_channel_attribute_has_data": {
            "name": "test_channel_attribute_has_data",
            "location": 1004,
            "return": [],
            "arguments": {}
        },
        "test_undeclared_variable_in_function_call": {
            "name": "test_undeclared_variable_in_function_call",
            "location": 1027,
            "return": [],
            "arguments": {}
        },
        "test_local_variable_shadows_global": {
            "name": "test_local_variable_shadows_global",
            "location": 1063,
            "return": [],
            "arguments": {}
        },
        "test_unused_global_variable": {
            "name": "test_unused_global_variable",
            "location": 1095,
            "return": [],
            "arguments": {}
        },
        "test_unused_local_variable": {
            "name": "test_unused_local_variable",
            "location": 1112,
            "return": [],
            "arguments": {}
        },
        "test_unused_channel": {
            "name": "test_unused_channel",
            "location": 1131,
            "return": [],
            "arguments": {}
        },
        "test_unused_private_type": {
            "name": "test_unused_private_type",
            "location": 1146,
            "return": [],
            "arguments": {}
        },
        "test_unused_function": {
            "name": "test_unused_function",
            "location": 1161,
            "return": [],
            "arguments": {}
        },
        "test_renaming": {
            "name": "test_renaming",
            "location": 1176,
            "return": [],
            "arguments": {}
        },
        "test_renaming_invalid": {
            "name": "test_renaming_invalid",
            "location": 1212,
            "return": [],
            "arguments": {}
        },
        "test_renaming_undefined": {
            "name": "test_renaming_undefined",
            "location": 1253,
            "return": [],
            "arguments": {}
        },
        "test_binding_as_function_parameter": {
            "name": "test_binding_as_function_parameter",
            "location": 1284,
            "return": [],
            "arguments": {}
        },
        "test_for_all": {
            "name": "test_for_all",
            "location": 1317,
            "return": [],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 1349,
            "return": [],
            "arguments": {}
        },
        "test_append_incompatible": {
            "name": "test_append_incompatible",
            "location": 1378,
            "return": [],
            "arguments": {}
        },
        "test_append_message_unsupported": {
            "name": "test_append_message_unsupported",
            "location": 1402,
            "return": [],
            "arguments": {}
        },
        "test_extend": {
            "name": "test_extend",
            "location": 1429,
            "return": [],
            "arguments": {}
        },
        "test_extend_incompatible": {
            "name": "test_extend_incompatible",
            "location": 1453,
            "return": [],
            "arguments": {}
        },
        "test_message_aggregate_with_undefined_parameter": {
            "name": "test_message_aggregate_with_undefined_parameter",
            "location": 1477,
            "return": [],
            "arguments": {}
        },
        "test_message_aggregate_with_undefined_type": {
            "name": "test_message_aggregate_with_undefined_type",
            "location": 1504,
            "return": [],
            "arguments": {}
        },
        "test_comprehension": {
            "name": "test_comprehension",
            "location": 1537,
            "return": [],
            "arguments": {}
        },
        "test_assignment_opaque_function_undef_parameter": {
            "name": "test_assignment_opaque_function_undef_parameter",
            "location": 1572,
            "return": [],
            "arguments": {}
        },
        "test_assignment_opaque_function_result": {
            "name": "test_assignment_opaque_function_result",
            "location": 1603,
            "return": [],
            "arguments": {}
        },
        "test_assignment_opaque_function_binding": {
            "name": "test_assignment_opaque_function_binding",
            "location": 1634,
            "return": [],
            "arguments": {}
        },
        "test_conversion": {
            "name": "test_conversion",
            "location": 1666,
            "return": [],
            "arguments": {}
        },
        "test_conversion_undefined": {
            "name": "test_conversion_undefined",
            "location": 1697,
            "return": [],
            "arguments": {}
        },
        "test_conversion_invalid_argument": {
            "name": "test_conversion_invalid_argument",
            "location": 1733,
            "return": [],
            "arguments": {}
        },
        "test_conversion_invalid": {
            "name": "test_conversion_invalid",
            "location": 1765,
            "return": [],
            "arguments": {}
        },
        "test_private_type": {
            "name": "test_private_type",
            "location": 1801,
            "return": [],
            "arguments": {}
        },
        "test_private_type_shadows_type": {
            "name": "test_private_type_shadows_type",
            "location": 1830,
            "return": [],
            "arguments": {}
        },
        "test_undefined_type_in_parameters": {
            "name": "test_undefined_type_in_parameters",
            "location": 1874,
            "return": [],
            "arguments": {
                "parameters": []
            }
        },
        "test_undefined_type_in_declarations": {
            "name": "test_undefined_type_in_declarations",
            "location": 1913,
            "return": [],
            "arguments": {
                "declarations": []
            }
        },
        "test_undefined_type_in_local_declarations": {
            "name": "test_undefined_type_in_local_declarations",
            "location": 1951,
            "return": [],
            "arguments": {
                "declarations": []
            }
        },
        "test_type_error_in_variable_declaration": {
            "name": "test_type_error_in_variable_declaration",
            "location": 1977,
            "return": [],
            "arguments": {}
        },
        "test_type_error_in_renaming_declaration": {
            "name": "test_type_error_in_renaming_declaration",
            "location": 2008,
            "return": [],
            "arguments": {}
        },
        "test_conflicting_actions": {
            "name": "test_conflicting_actions",
            "location": 2121,
            "return": [],
            "arguments": {
                "declarations": [],
                "actions": [],
                "errors": []
            }
        },
        "test_missing_exception_transition": {
            "name": "test_missing_exception_transition",
            "location": 2164,
            "return": [],
            "arguments": {}
        },
        "test_unnecessary_exception_transition": {
            "name": "test_unnecessary_exception_transition",
            "location": 2191,
            "return": [],
            "arguments": {}
        },
        "test_resolving_of_function_calls": {
            "name": "test_resolving_of_function_calls",
            "location": 2210,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/model/type_test.py": {
        "test_type_name": {
            "name": "test_type_name",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_type_type": {
            "name": "test_type_type",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_type_dependencies": {
            "name": "test_type_dependencies",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_modular_size": {
            "name": "test_modular_size",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_modular_value_count": {
            "name": "test_modular_value_count",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_modular_first": {
            "name": "test_modular_first",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_modular_last": {
            "name": "test_modular_last",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_modular_invalid_modulus_power_of_two": {
            "name": "test_modular_invalid_modulus_power_of_two",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_modular_invalid_modulus_variable": {
            "name": "test_modular_invalid_modulus_variable",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_modular_invalid_modulus_limit": {
            "name": "test_modular_invalid_modulus_limit",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_range_size": {
            "name": "test_range_size",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_range_value_count": {
            "name": "test_range_value_count",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_range_first": {
            "name": "test_range_first",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_range_last": {
            "name": "test_range_last",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_first_variable": {
            "name": "test_range_invalid_first_variable",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_last_variable": {
            "name": "test_range_invalid_last_variable",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_last_exceeds_limit": {
            "name": "test_range_invalid_last_exceeds_limit",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_first_negative": {
            "name": "test_range_invalid_first_negative",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_range": {
            "name": "test_range_invalid_range",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_size_variable": {
            "name": "test_range_invalid_size_variable",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_size_too_small": {
            "name": "test_range_invalid_size_too_small",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_range_invalid_size_exceeds_limit": {
            "name": "test_range_invalid_size_exceeds_limit",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_size": {
            "name": "test_enumeration_size",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_value_count": {
            "name": "test_enumeration_value_count",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_size_variable": {
            "name": "test_enumeration_invalid_size_variable",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_literal_value": {
            "name": "test_enumeration_invalid_literal_value",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_size_too_small": {
            "name": "test_enumeration_invalid_size_too_small",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_size_exceeds_limit": {
            "name": "test_enumeration_invalid_size_exceeds_limit",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_always_valid_aspect": {
            "name": "test_enumeration_invalid_always_valid_aspect",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_literal": {
            "name": "test_enumeration_invalid_literal",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_duplicate_elements": {
            "name": "test_enumeration_invalid_duplicate_elements",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_invalid_multiple_duplicate_elements": {
            "name": "test_enumeration_invalid_multiple_duplicate_elements",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_enumeration_str": {
            "name": "test_enumeration_str",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "test_sequence_dependencies": {
            "name": "test_sequence_dependencies",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "test_sequence_invalid_element_type": {
            "name": "test_sequence_invalid_element_type",
            "location": 439,
            "return": [],
            "arguments": {
                "element_type": [],
                "error": []
            }
        },
        "test_sequence_unsupported_element_type": {
            "name": "test_sequence_unsupported_element_type",
            "location": 443,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/model/__init__.py": {},
    "RecordFlux-main/tests/unit/specification/cache_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_init_valid": {
            "name": "test_init_valid",
            "location": 17,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_init_invalid": {
            "name": "test_init_invalid",
            "location": 24,
            "return": [],
            "arguments": {
                "content": [],
                "tmp_path": [],
                "capsys": []
            }
        },
        "test_verified": {
            "name": "test_verified",
            "location": 32,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_verified_disabled": {
            "name": "test_verified_disabled",
            "location": 80,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/unit/specification/grammar_test.py": {
        "parse_statement": {
            "name": "parse_statement",
            "location": 25,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_declaration": {
            "name": "parse_declaration",
            "location": 33,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_formal_declaration": {
            "name": "parse_formal_declaration",
            "location": 41,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_state": {
            "name": "parse_state",
            "location": 49,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_session": {
            "name": "parse_session",
            "location": 57,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "parse_unproven_session": {
            "name": "parse_unproven_session",
            "location": 68,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "parse_id": {
            "name": "parse_id",
            "location": 79,
            "return": [],
            "arguments": {
                "data": [],
                "rule": []
            }
        },
        "test_unqualified_identifier": {
            "name": "test_unqualified_identifier",
            "location": 90,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_qualified_identifier": {
            "name": "test_qualified_identifier",
            "location": 109,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_numeric_literal": {
            "name": "test_expression_numeric_literal",
            "location": 128,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_variable": {
            "name": "test_variable",
            "location": 137,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_suffix": {
            "name": "test_expression_suffix",
            "location": 159,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_mathematical": {
            "name": "test_expression_mathematical",
            "location": 231,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_relation": {
            "name": "test_expression_relation",
            "location": 249,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_boolean": {
            "name": "test_expression_boolean",
            "location": 263,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_mathematical_expression": {
            "name": "test_mathematical_expression",
            "location": 276,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_mathematical_expression_error": {
            "name": "test_mathematical_expression_error",
            "location": 289,
            "return": [],
            "arguments": {
                "string": [],
                "error": []
            }
        },
        "test_boolean_expression": {
            "name": "test_boolean_expression",
            "location": 301,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_boolean_expression_error": {
            "name": "test_boolean_expression_error",
            "location": 314,
            "return": [],
            "arguments": {
                "string": [],
                "error": []
            }
        },
        "test_expression_base": {
            "name": "test_expression_base",
            "location": 386,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_expression_complex": {
            "name": "test_expression_complex",
            "location": 557,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_private_type_declaration": {
            "name": "test_private_type_declaration",
            "location": 563,
            "return": [],
            "arguments": {}
        },
        "test_channel_declaration": {
            "name": "test_channel_declaration",
            "location": 584,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_formal_function_declaration": {
            "name": "test_formal_function_declaration",
            "location": 613,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_variable_declaration": {
            "name": "test_variable_declaration",
            "location": 627,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_renaming_declaration": {
            "name": "test_renaming_declaration",
            "location": 642,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_assignment_statement": {
            "name": "test_assignment_statement",
            "location": 652,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_message_field_assignment_statement": {
            "name": "test_message_field_assignment_statement",
            "location": 662,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_attribute_statement": {
            "name": "test_attribute_statement",
            "location": 682,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_state": {
            "name": "test_state",
            "location": 801,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_state_error": {
            "name": "test_state_error",
            "location": 823,
            "return": [],
            "arguments": {
                "string": [],
                "error": []
            }
        },
        "test_session_declaration": {
            "name": "test_session_declaration",
            "location": 892,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_session_declaration_error": {
            "name": "test_session_declaration_error",
            "location": 916,
            "return": [],
            "arguments": {
                "string": [],
                "error": []
            }
        },
        "test_session": {
            "name": "test_session",
            "location": 921,
            "return": [],
            "arguments": {}
        },
        "test_expression_aggregate_no_number": {
            "name": "test_expression_aggregate_no_number",
            "location": 954,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/specification/parser_test.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 22,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "assert_ast_files": {
            "name": "assert_ast_files",
            "location": 34,
            "return": [],
            "arguments": {
                "filenames": [],
                "expected": []
            }
        },
        "assert_ast_string": {
            "name": "assert_ast_string",
            "location": 45,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "assert_error_files": {
            "name": "assert_error_files",
            "location": 51,
            "return": [],
            "arguments": {
                "filenames": [],
                "regex": []
            }
        },
        "assert_error_string": {
            "name": "assert_error_string",
            "location": 60,
            "return": [],
            "arguments": {
                "string": [],
                "regex": []
            }
        },
        "assert_messages_files": {
            "name": "assert_messages_files",
            "location": 68,
            "return": [],
            "arguments": {
                "filenames": [],
                "messages": []
            }
        },
        "assert_messages_string": {
            "name": "assert_messages_string",
            "location": 76,
            "return": [],
            "arguments": {
                "string": [],
                "messages": []
            }
        },
        "assert_messages": {
            "name": "assert_messages",
            "location": 83,
            "return": [],
            "arguments": {
                "actual_messages": [],
                "expected_messages": []
            }
        },
        "assert_refinements_string": {
            "name": "assert_refinements_string",
            "location": 94,
            "return": [],
            "arguments": {
                "string": [],
                "refinements": []
            }
        },
        "raise_parser_error": {
            "name": "raise_parser_error",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_create_model": {
            "name": "test_create_model",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_create_model_cached": {
            "name": "test_create_model_cached",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_create_proven_message": {
            "name": "test_create_proven_message",
            "location": 117,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_create_proven_message_error": {
            "name": "test_create_proven_message_error",
            "location": 126,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_parse_empty_specfication": {
            "name": "test_parse_empty_specfication",
            "location": 137,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_parse_duplicate_specifications": {
            "name": "test_parse_duplicate_specifications",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_parse_empty_package_spec": {
            "name": "test_parse_empty_package_spec",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_parse_context_spec": {
            "name": "test_parse_context_spec",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_parse_integer_type_spec": {
            "name": "test_parse_integer_type_spec",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_parse_enumeration_type_spec": {
            "name": "test_parse_enumeration_type_spec",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_parse_sequence_type_spec": {
            "name": "test_parse_sequence_type_spec",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "test_parse_message_type_spec": {
            "name": "test_parse_message_type_spec",
            "location": 653,
            "return": [],
            "arguments": {}
        },
        "test_parse_type_refinement_spec": {
            "name": "test_parse_type_refinement_spec",
            "location": 853,
            "return": [],
            "arguments": {}
        },
        "test_parse_type_derivation_spec": {
            "name": "test_parse_type_derivation_spec",
            "location": 1108,
            "return": [],
            "arguments": {}
        },
        "test_parse_ethernet_spec": {
            "name": "test_parse_ethernet_spec",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_illegal_package_identifiers": {
            "name": "test_parse_error_illegal_package_identifiers",
            "location": 1690,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_inconsistent_package_identifiers": {
            "name": "test_parse_error_inconsistent_package_identifiers",
            "location": 1700,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_incorrect_name": {
            "name": "test_parse_error_incorrect_name",
            "location": 1711,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_incorrect_specification": {
            "name": "test_parse_error_incorrect_specification",
            "location": 1719,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_unexpected_exception_in_parser": {
            "name": "test_parse_error_unexpected_exception_in_parser",
            "location": 1726,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_parse_error_context_dependency_cycle": {
            "name": "test_parse_error_context_dependency_cycle",
            "location": 1739,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_message_undefined_message_field": {
            "name": "test_parse_error_message_undefined_message_field",
            "location": 1752,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_invalid_location_expression": {
            "name": "test_parse_error_invalid_location_expression",
            "location": 1769,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_sequence_undefined_type": {
            "name": "test_parse_error_sequence_undefined_type",
            "location": 1787,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_refinement_undefined_message": {
            "name": "test_parse_error_refinement_undefined_message",
            "location": 1798,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_refinement_undefined_sdu": {
            "name": "test_parse_error_refinement_undefined_sdu",
            "location": 1809,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_derivation_undefined_type": {
            "name": "test_parse_error_derivation_undefined_type",
            "location": 1825,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_derivation_unsupported_type": {
            "name": "test_parse_error_derivation_unsupported_type",
            "location": 1836,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_multiple_initial_node_edges": {
            "name": "test_parse_error_multiple_initial_node_edges",
            "location": 1849,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_multiple_initial_nodes": {
            "name": "test_parse_error_multiple_initial_nodes",
            "location": 1868,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_reserved_word_in_type_name": {
            "name": "test_parse_error_reserved_word_in_type_name",
            "location": 1888,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_reserved_word_in_message_field": {
            "name": "test_parse_error_reserved_word_in_message_field",
            "location": 1899,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_invalid_context_clause": {
            "name": "test_parse_error_invalid_context_clause",
            "location": 1914,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_create_model_no_messages": {
            "name": "test_create_model_no_messages",
            "location": 1929,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_create_model_message_type_message": {
            "name": "test_create_model_message_type_message",
            "location": 1933,
            "return": [],
            "arguments": {}
        },
        "test_create_model_message_in_message": {
            "name": "test_create_model_message_in_message",
            "location": 1977,
            "return": [],
            "arguments": {}
        },
        "test_create_model_ethernet_frame": {
            "name": "test_create_model_ethernet_frame",
            "location": 2033,
            "return": [],
            "arguments": {}
        },
        "test_create_model_type_derivation_message": {
            "name": "test_create_model_type_derivation_message",
            "location": 2037,
            "return": [],
            "arguments": {}
        },
        "test_create_model_type_derivation_refinements": {
            "name": "test_create_model_type_derivation_refinements",
            "location": 2065,
            "return": [],
            "arguments": {}
        },
        "test_create_model_message_locations": {
            "name": "test_create_model_message_locations",
            "location": 2098,
            "return": [],
            "arguments": {}
        },
        "test_create_model_session_locations": {
            "name": "test_create_model_session_locations",
            "location": 2119,
            "return": [],
            "arguments": {}
        },
        "test_create_model_sequence_with_imported_element_type": {
            "name": "test_create_model_sequence_with_imported_element_type",
            "location": 2153,
            "return": [],
            "arguments": {}
        },
        "test_create_model_checksum": {
            "name": "test_create_model_checksum",
            "location": 2177,
            "return": [],
            "arguments": {}
        },
        "test_create_model_byteorder": {
            "name": "test_create_model_byteorder",
            "location": 2283,
            "return": [],
            "arguments": {
                "spec": [],
                "byte_order": []
            }
        },
        "test_message_field_condition": {
            "name": "test_message_field_condition",
            "location": 2323,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_message_field_first": {
            "name": "test_message_field_first",
            "location": 2377,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_message_field_size": {
            "name": "test_message_field_size",
            "location": 2424,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_message_field_condition_and_aspects": {
            "name": "test_message_field_condition_and_aspects",
            "location": 2466,
            "return": [],
            "arguments": {
                "field_a": [],
                "link": [],
                "field_b": []
            }
        },
        "test_parameterized_messages": {
            "name": "test_parameterized_messages",
            "location": 2508,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_invalid_arguments_for_parameterized_messages": {
            "name": "test_parse_error_invalid_arguments_for_parameterized_messages",
            "location": 2615,
            "return": [],
            "arguments": {
                "parameters": [],
                "error": []
            }
        },
        "test_parse_error_invalid_range_aspect": {
            "name": "test_parse_error_invalid_range_aspect",
            "location": 2642,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_invalid_enum": {
            "name": "test_parse_error_invalid_enum",
            "location": 2677,
            "return": [],
            "arguments": {
                "spec": [],
                "error": []
            }
        },
        "test_parse_error_invalid_parameterized_type": {
            "name": "test_parse_error_invalid_parameterized_type",
            "location": 2692,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_parse_error_undefined_parameter": {
            "name": "test_parse_error_undefined_parameter",
            "location": 2708,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_name_conflict_between_parameters": {
            "name": "test_parse_error_name_conflict_between_parameters",
            "location": 2723,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_name_conflict_between_field_and_parameter": {
            "name": "test_parse_error_name_conflict_between_field_and_parameter",
            "location": 2741,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_duplicate_spec_file_file": {
            "name": "test_parse_error_duplicate_spec_file_file",
            "location": 2759,
            "return": [],
            "arguments": {}
        },
        "test_parse_error_duplicate_spec_stdin_file": {
            "name": "test_parse_error_duplicate_spec_stdin_file",
            "location": 2773,
            "return": [],
            "arguments": {}
        },
        "test_parse_reserved_words_as_enum_literals": {
            "name": "test_parse_reserved_words_as_enum_literals",
            "location": 2797,
            "return": [],
            "arguments": {}
        },
        "test_parse_reserved_word_as_channel_name": {
            "name": "test_parse_reserved_word_as_channel_name",
            "location": 2808,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tests/unit/specification/style_test.py": {
        "test_no_error": {
            "name": "test_no_error",
            "location": 82,
            "return": [],
            "arguments": {
                "spec": [],
                "tmp_path": []
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 152,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "spec": [],
                "error": []
            }
        },
        "test_deactivation_of_checks_on_file_level": {
            "name": "test_deactivation_of_checks_on_file_level",
            "location": 228,
            "return": [],
            "arguments": {
                "spec": [],
                "disabled_checks": [],
                "tmp_path": []
            }
        }
    },
    "RecordFlux-main/tests/unit/specification/__init__.py": {},
    "RecordFlux-main/tools/check_dependencies.py": {
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "RecordFlux-main/tools/check_doc.py": {
        "check_code_blocks": {
            "name": "check_code_blocks",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "check_code": {
            "name": "check_code",
            "location": 88,
            "return": [],
            "arguments": {
                "block": [],
                "block_type": [],
                "subtype": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 99,
            "return": [],
            "arguments": {
                "data": [],
                "rule": []
            }
        },
        "check_rflx_code": {
            "name": "check_rflx_code",
            "location": 106,
            "return": [],
            "arguments": {
                "block": [],
                "subtype": []
            }
        },
        "check_ada_code": {
            "name": "check_ada_code",
            "location": 123,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "check_python_code": {
            "name": "check_python_code",
            "location": 144,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "print_error": {
            "name": "print_error",
            "location": 161,
            "return": [],
            "arguments": {
                "message": [],
                "code_block": []
            }
        }
    },
    "RecordFlux-main/tools/check_packages.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "argv": []
            }
        },
        "missing_init": {
            "name": "missing_init",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "dirs": []
            }
        }
    },
    "RecordFlux-main/tools/check_requirements.py": {
        "main": {
            "name": "main",
            "location": 78,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {
                "argv": []
            }
        },
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 101,
            "return": [
                "Tuple[(List[Requirement], bool)]"
            ],
            "arguments": {
                "requirements_file": []
            }
        },
        "search_references": {
            "name": "search_references",
            "location": 133,
            "return": [
                "list"
            ],
            "arguments": {
                "directories": []
            }
        },
        "check_references": {
            "name": "check_references",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "requirements": [],
                "references": []
            }
        },
        "print_checkbox_list": {
            "name": "print_checkbox_list",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "requirements": []
            }
        },
        "print_statistics": {
            "name": "print_statistics",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "requirements": []
            }
        },
        "ID.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "ID.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ID.__lt__": {
            "name": "__lt__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.parts": {
            "name": "parts",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [],
                "description": [],
                "referenced": [],
                "requirements": []
            }
        },
        "Requirement.__contains__": {
            "name": "__contains__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Requirement.__lt__": {
            "name": "__lt__",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Requirement.identifier": {
            "name": "identifier",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.description": {
            "name": "description",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.referenced": {
            "name": "referenced",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "RecordFlux-main/tools/generate_spark_test_code.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "RecordFlux-main/tools/generate_spark_test_runner.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        },
        "create_test_runner": {
            "name": "create_test_runner",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": [],
                "directory": []
            }
        }
    },
    "RecordFlux-main/tools/upgrade_dependencies.py": {},
    "RecordFlux-main/tools/__init__.py": {}
}
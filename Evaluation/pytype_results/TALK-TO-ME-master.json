{
    "TALK-TO-ME-master/main.py": {},
    "TALK-TO-ME-master/stubs/tqdm.py": {
        "tqdm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": [],
                "desc": [],
                "total": [],
                "leave": [],
                "file": [],
                "ncols": [],
                "mininterval": [],
                "maxinterval": [],
                "miniters": [],
                "ascii": [],
                "disable": [],
                "unit": [],
                "unit_scale": [],
                "dynamic_ncols": [],
                "smoothing": [],
                "bar_format": [],
                "initial": [],
                "position": [],
                "postfix": [],
                "unit_divisor": [],
                "write_bytes": [],
                "gui": []
            }
        },
        "tqdm.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tqdm.tqdm": {
            "name": "tqdm",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": [],
                "desc": [],
                "total": [],
                "leave": [],
                "file": [],
                "ncols": [],
                "mininterval": [],
                "maxinterval": [],
                "miniters": [],
                "ascii": [],
                "disable": [],
                "unit": [],
                "unit_scale": [],
                "dynamic_ncols": [],
                "smoothing": [],
                "bar_format": [],
                "initial": [],
                "position": [],
                "postfix": [],
                "unit_divisor": [],
                "write_bytes": [],
                "gui": []
            }
        },
        "tqdm.update": {
            "name": "update",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "tqdm.close": {
            "name": "close",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tqdm.clear": {
            "name": "clear",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "nolock": []
            }
        },
        "tqdm.refresh": {
            "name": "refresh",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "nolock": []
            }
        },
        "tqdm.unpause": {
            "name": "unpause",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tqdm.reset": {
            "name": "reset",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "total": []
            }
        },
        "tqdm.set_description": {
            "name": "set_description",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "desc": [],
                "refresh": []
            }
        },
        "tqdm.set_description_str": {
            "name": "set_description_str",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "desc": [],
                "refresh": []
            }
        },
        "tqdm.set_postfix": {
            "name": "set_postfix",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "ordered_dict": [],
                "refresh": []
            }
        },
        "tqdm.set_postfix_str": {
            "name": "set_postfix_str",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "ordered_dict": [],
                "refresh": []
            }
        },
        "tqdm.write": {
            "name": "write",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [],
                "file": [],
                "end": [],
                "nolock": []
            }
        },
        "tqdm.get_lock": {
            "name": "get_lock",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tqdm.set_lock": {
            "name": "set_lock",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "tqdm.display": {
            "name": "display",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "pos": []
            }
        },
        "tqdm.status_printer": {
            "name": "status_printer",
            "location": 113,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "tqdm.external_write_mode": {
            "name": "external_write_mode",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": [],
                "file": [],
                "nolock": []
            }
        },
        "tqdm.format_interval": {
            "name": "format_interval",
            "location": 119,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "tqdm.format_meter": {
            "name": "format_meter",
            "location": 121,
            "return": [],
            "arguments": {
                "n": [],
                "total": [],
                "elapsed": [],
                "ncols": [],
                "prefix": [],
                "ascii": [],
                "unit": [],
                "unit_scale": [],
                "rate": [],
                "bar_format": [],
                "postfix": [],
                "unit_divisor": []
            }
        },
        "tqdm.format_num": {
            "name": "format_num",
            "location": 137,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "tqdm.format_sizeof": {
            "name": "format_sizeof",
            "location": 139,
            "return": [],
            "arguments": {
                "num": [],
                "suffix": [],
                "divisor": []
            }
        },
        "Lock.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.acquire": {
            "name": "acquire",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.release": {
            "name": "release",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.__enter__": {
            "name": "__enter__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.__exit__": {
            "name": "__exit__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        }
    },
    "TALK-TO-ME-master/talk_to_me/bot.py": {
        "Word2Int.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "Iterable[str]"
                ]
            }
        },
        "Word2Int.transform": {
            "name": "transform",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Word2Int.inverse_transform": {
            "name": "inverse_transform",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int"
                ]
            }
        },
        "Word2Int.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int2Vec.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Int2Vec.transform": {
            "name": "transform",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Int2Vec.inverse_transform": {
            "name": "inverse_transform",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vec": []
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchanges": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "Bot.transform": {
            "name": "transform",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prompt_string": [
                    "str"
                ]
            }
        },
        "Bot.interact": {
            "name": "interact",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TALK-TO-ME-master/talk_to_me/bot2.py": {},
    "TALK-TO-ME-master/talk_to_me/exchanges_stats.py": {
        "exchange2words": {
            "name": "exchange2words",
            "location": 18,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "prompt_response": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "exchanges_stats": {
            "name": "exchanges_stats",
            "location": 22,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "exchanges_": [
                    "Iterable[Tuple[(str, str)]]"
                ],
                "interactive": [
                    "bool"
                ]
            }
        },
        "get_n_grams": {
            "name": "get_n_grams",
            "location": 89,
            "return": [
                "Dict[(int, Counter[Tuple[(str, ...)]])]"
            ],
            "arguments": {
                "sentences": [
                    "List[List[str]]"
                ],
                "max_n": [
                    "int"
                ]
            }
        },
        "exchanges_stats.gen_sentences": {
            "name": "gen_sentences",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "TALK-TO-ME-master/talk_to_me/fb_data2exchanges.py": {
        "fb_data2exchanges": {
            "name": "fb_data2exchanges",
            "location": 10,
            "return": [
                "Iterable[Tuple[(str, str)]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "input_p": [
                    "pathlib.Path"
                ]
            }
        },
        "sort_paths": {
            "name": "sort_paths",
            "location": 33,
            "return": [
                "Tuple[(Set[Tuple[(str, ...)]], ...)]"
            ],
            "arguments": {
                "paths": [
                    "Set[Tuple[(str, ...)]]"
                ]
            }
        },
        "normalize_str": {
            "name": "normalize_str",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "message2exchanges": {
            "name": "message2exchanges",
            "location": 92,
            "return": [
                "Iterable[Tuple[(str, str)]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "obj": []
            }
        },
        "fb_data2exchanges.path2exchanges": {
            "name": "path2exchanges",
            "location": 26,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "TALK-TO-ME-master/talk_to_me/string2words.py": {
        "string2words_helper2": {
            "name": "string2words_helper2",
            "location": 26,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "string2words_helper": {
            "name": "string2words_helper",
            "location": 101,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "string2words": {
            "name": "string2words",
            "location": 114,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "remove_ents": {
            "name": "remove_ents",
            "location": 118,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "words": [
                    "List[str]"
                ]
            }
        },
        "words2string": {
            "name": "words2string",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "words": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "TALK-TO-ME-master/talk_to_me/util.py": {
        "imap": {
            "name": "imap",
            "location": 39,
            "return": [
                "Iterable[_U]"
            ],
            "arguments": {
                "func": [
                    "Callable[([_T], _U)]"
                ],
                "iterable": [
                    "Collection[_T]"
                ]
            }
        },
        "list_f": {
            "name": "list_f",
            "location": 51,
            "return": [
                "Callable[(..., list)]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., Iterable)]"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 65,
            "return": [
                "Iterable[Iterable[_W]]"
            ],
            "arguments": {
                "lists": [
                    "Iterable[Iterable[_W]]"
                ]
            }
        },
        "split_include": {
            "name": "split_include",
            "location": 72,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "delim_re": [
                    "Union[(str, Pattern[str])]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 89,
            "return": [
                "Dict[(_Key, _Val)]"
            ],
            "arguments": {
                "dcts": [
                    "Iterable[Dict[(_Key, _Val)]]"
                ]
            }
        },
        "invert": {
            "name": "invert",
            "location": 102,
            "return": [
                "Dict[(_Val2, _Key2)]"
            ],
            "arguments": {
                "dct": [
                    "Dict[(_Key2, _Val2)]"
                ]
            }
        },
        "interactive_loop": {
            "name": "interactive_loop",
            "location": 106,
            "return": [
                "Generator[(str, None, List[str])]"
            ],
            "arguments": {}
        },
        "_intercalate_helper": {
            "name": "_intercalate_helper",
            "location": 118,
            "return": [
                "Iterator[_T]"
            ],
            "arguments": {
                "lst": [
                    "Iterator[_T]"
                ],
                "sep": [
                    "_T"
                ]
            }
        },
        "intercalate": {
            "name": "intercalate",
            "location": 124,
            "return": [
                "Iterator[_T]"
            ],
            "arguments": {
                "lst": [
                    "Iterator[_T]"
                ],
                "sep": [
                    "_T"
                ]
            }
        },
        "iter_replace": {
            "name": "iter_replace",
            "location": 128,
            "return": [
                "Iterable[_T]"
            ],
            "arguments": {
                "lst": [
                    "Iterable[_T]"
                ],
                "find": [
                    "_T"
                ],
                "sub": [
                    "_T"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 136,
            "return": [
                "List[_T]"
            ],
            "arguments": {
                "it": [
                    "List[_T]"
                ]
            }
        },
        "list_f.func2": {
            "name": "func2",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "split_include.get_breakpoints": {
            "name": "get_breakpoints",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "TALK-TO-ME-master/talk_to_me/words2vectors.py": {},
    "TALK-TO-ME-master/talk_to_me/__init__.py": {},
    "TALK-TO-ME-master/tests/test_string2words.py": {
        "test_string2words_contraction": {
            "name": "test_string2words_contraction",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string2words_punct_single": {
            "name": "test_string2words_punct_single",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string2words_embedded_punct": {
            "name": "test_string2words_embedded_punct",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string2words_numbers": {
            "name": "test_string2words_numbers",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string2words_brackets": {
            "name": "test_string2words_brackets",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string2words_escape": {
            "name": "test_string2words_escape",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
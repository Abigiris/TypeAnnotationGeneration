{
    "TextDistanceExtraction-master/distance_extraction_utils.py": {
        "create_spacey_extractor": {
            "name": "create_spacey_extractor",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "add_space_text": {
            "name": "add_space_text",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "extraction": {
            "name": "extraction",
            "location": 102,
            "return": [
                "List[List[Tuple[(Any, Any)]]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "detailed_mesaurements": {
            "name": "detailed_mesaurements",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "data_processed": []
            }
        },
        "mi_km": {
            "name": "mi_km",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "ft_m": {
            "name": "ft_m",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "in_cm": {
            "name": "in_cm",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "yard_m": {
            "name": "yard_m",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "nautile_km": {
            "name": "nautile_km",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "mm_cm": {
            "name": "mm_cm",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "m_cm": {
            "name": "m_cm",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "km_cm": {
            "name": "km_cm",
            "location": 228,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "mi_cm": {
            "name": "mi_cm",
            "location": 235,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "ft_cm": {
            "name": "ft_cm",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "yard_cm": {
            "name": "yard_cm",
            "location": 249,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "nautile_cm": {
            "name": "nautile_cm",
            "location": 256,
            "return": [
                "Any"
            ],
            "arguments": {
                "unit": []
            }
        },
        "comma_to_dot": {
            "name": "comma_to_dot",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "sent": []
            }
        },
        "convert_to_cm": {
            "name": "convert_to_cm",
            "location": 275,
            "return": [
                "Any"
            ],
            "arguments": {
                "val_string": []
            }
        },
        "normalise_measurements": {
            "name": "normalise_measurements",
            "location": 338,
            "return": [
                "list"
            ],
            "arguments": {
                "measurements_extracted": []
            }
        },
        "clean_failed_extractions": {
            "name": "clean_failed_extractions",
            "location": 367,
            "return": [
                "list"
            ],
            "arguments": {
                "normalised_measurements": []
            }
        },
        "extract_normalised_measurements": {
            "name": "extract_normalised_measurements",
            "location": 384,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        }
    }
}
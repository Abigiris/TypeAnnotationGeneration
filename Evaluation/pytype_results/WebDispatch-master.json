{
    "WebDispatch-master/setup.py": {
        "_read": {
            "name": "_read",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "WebDispatch-master/docs/conf.py": {},
    "WebDispatch-master/docs/first.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "goodbye": {
            "name": "goodbye",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "WebDispatch-master/examples/hello.py": {
        "index": {
            "name": "index",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "hello": {
            "name": "hello",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "WebDispatch-master/examples/slug.py": {
        "slug": {
            "name": "slug",
            "location": 6,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "WebDispatch-master/examples/subrouting.py": {
        "handler": {
            "name": "handler",
            "location": 6,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "gen_handler": {
            "name": "gen_handler",
            "location": 11,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "WebDispatch-master/examples/test_examples.py": {
        "HelloTests._getAUT": {
            "name": "_getAUT",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelloTests.test_it": {
            "name": "test_it",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebObHelloTests._getAUT": {
            "name": "_getAUT",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebObHelloTests.test_it": {
            "name": "test_it",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubroutingTests._getAUT": {
            "name": "_getAUT",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubroutingTests.test_it": {
            "name": "test_it",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubroutingTests.test_generate": {
            "name": "test_generate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopTests._getAUT": {
            "name": "_getAUT",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopTests.test_it": {
            "name": "test_it",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlugTests._getAUT": {
            "name": "_getAUT",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlugTests.test_it": {
            "name": "test_it",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlugTests.test_slug": {
            "name": "test_slug",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/examples/top.py": {
        "top": {
            "name": "top",
            "location": 6,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "WebDispatch-master/examples/webobdispatcher.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "MyRequest"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "MyRequest"
                ]
            }
        },
        "WebObDispatcher.add_url": {
            "name": "add_url",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "pattern": [],
                "view": []
            }
        }
    },
    "WebDispatch-master/webdispatch/base.py": {
        "DispatchBase.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "applications": [
                    "Dict[(str, Callable)]"
                ],
                "extra_environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DispatchBase.register_app": {
            "name": "register_app",
            "location": 23,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "app": [
                    "Callable"
                ]
            }
        },
        "DispatchBase.get_extra_environ": {
            "name": "get_extra_environ",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchBase.detect_view_name": {
            "name": "detect_view_name",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DispatchBase.on_view_not_found": {
            "name": "on_view_not_found",
            "location": 44,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable"
                ]
            }
        },
        "DispatchBase.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable"
                ]
            }
        },
        "DispatchBase.register_app.dec": {
            "name": "dec",
            "location": 26,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "WebDispatch-master/webdispatch/dummyapps.py": {
        "greeting": {
            "name": "greeting",
            "location": 4,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "_": [],
                "start_response": []
            }
        },
        "bye": {
            "name": "bye",
            "location": 12,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "_": [],
                "start_response": []
            }
        }
    },
    "WebDispatch-master/webdispatch/methoddispatcher.py": {
        "action_handler_adapter": {
            "name": "action_handler_adapter",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "handler_cls": [
                    "type"
                ],
                "action_name": [
                    "str"
                ]
            }
        },
        "MethodDispatcher.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodDispatcher.detect_view_name": {
            "name": "detect_view_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MethodDispatcher.on_view_not_found": {
            "name": "on_view_not_found",
            "location": 21,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "start_response": [
                    "Callable[([str, List[Tuple[(str, str)]]], None)]"
                ]
            }
        },
        "action_handler_adapter.wsgiapp": {
            "name": "wsgiapp",
            "location": 40,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "ActionDispatcher.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_var_name": [
                    "str"
                ]
            }
        },
        "ActionDispatcher.register_actionhandler": {
            "name": "register_actionhandler",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_handler": [
                    "type"
                ]
            }
        },
        "ActionDispatcher.detect_view_name": {
            "name": "detect_view_name",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ActionDispatcher.on_view_not_found": {
            "name": "on_view_not_found",
            "location": 67,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[([str, List[Tuple[(str, str)]]], None)]"
                ]
            }
        }
    },
    "WebDispatch-master/webdispatch/mixins.py": {
        "URLMapperMixin.generate_url": {
            "name": "generate_url",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "URLMapperMixin.urlmapper": {
            "name": "urlmapper",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/paster.py": {
        "make_urldispatch_application": {
            "name": "make_urldispatch_application",
            "location": 7,
            "return": [
                "webdispatch.urldispatcher.URLDispatcher"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "WebDispatch-master/webdispatch/testing.py": {
        "setup_environ": {
            "name": "setup_environ",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "make_env": {
            "name": "make_env",
            "location": 14,
            "return": [
                "Dict[(str, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "path_info": [
                    "_T0"
                ],
                "script_name": [
                    "_T1"
                ]
            }
        }
    },
    "WebDispatch-master/webdispatch/uritemplate.py": {
        "regex_replacer": {
            "name": "regex_replacer",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "matched": []
            }
        },
        "template_replacer": {
            "name": "template_replacer",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "matched": []
            }
        },
        "pattern_to_regex": {
            "name": "pattern_to_regex",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ]
            }
        },
        "pattern_to_template": {
            "name": "pattern_to_template",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ]
            }
        },
        "detect_converters": {
            "name": "detect_converters",
            "location": 69,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "converter_dict": [
                    "Dict[(str, Callable)]"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "MatchResult.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matchdict": [
                    "Dict[(str, Any)]"
                ],
                "matchlength": [
                    "int"
                ]
            }
        },
        "MatchResult.new_named_args": {
            "name": "new_named_args",
            "location": 93,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "cur_named_args": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "MatchResult.split_path_info": {
            "name": "split_path_info",
            "location": 99,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "path_info": [
                    "str"
                ]
            }
        },
        "URITemplate.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpl_pattern": [
                    "str"
                ],
                "converters": []
            }
        },
        "URITemplate.match": {
            "name": "match",
            "location": 120,
            "return": [
                "MatchResult"
            ],
            "arguments": {
                "self": [],
                "path_info": [
                    "str"
                ]
            }
        },
        "URITemplate.convert_values": {
            "name": "convert_values",
            "location": 136,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "matchdict": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "URITemplate.substitute": {
            "name": "substitute",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "WebDispatch-master/webdispatch/urldispatcher.py": {
        "URLMapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converters": [
                    "Dict[(str, Callable)]"
                ]
            }
        },
        "URLMapper.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "URLMapper.lookup": {
            "name": "lookup",
            "location": 32,
            "return": [
                "webdispatch.uritemplate.MatchResult"
            ],
            "arguments": {
                "self": [],
                "path_info": [
                    "str"
                ]
            }
        },
        "URLMapper.generate": {
            "name": "generate",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "URLGenerator.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "urlmapper": [
                    "URLMapper"
                ]
            }
        },
        "URLGenerator.generate": {
            "name": "generate",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "URLGenerator.make_full_qualified_url": {
            "name": "make_full_qualified_url",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "URLDispatcher.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLDispatcher.add_url": {
            "name": "add_url",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "pattern": [
                    "str"
                ],
                "application": [
                    "Callable"
                ]
            }
        },
        "URLDispatcher.add_subroute": {
            "name": "add_subroute",
            "location": 95,
            "return": [
                "_TURLDispatcher"
            ],
            "arguments": {
                "self": [
                    "_TURLDispatcher"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "URLDispatcher.detect_view_name": {
            "name": "detect_view_name",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "URLDispatcher.on_view_not_found": {
            "name": "on_view_not_found",
            "location": 128,
            "return": [
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[([str, List[Tuple[(str, str)]]], None)]"
                ]
            }
        }
    },
    "WebDispatch-master/webdispatch/__init__.py": {},
    "WebDispatch-master/webdispatch/tests/test_base.py": {
        "TestDispatchBase._get_target": {
            "name": "_get_target",
            "location": 10,
            "return": [
                "Type[webdispatch.base.DispatchBase]"
            ],
            "arguments": {}
        },
        "TestDispatchBase._make_one": {
            "name": "_make_one",
            "location": 15,
            "return": [
                "webdispatch.base.DispatchBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDispatchBase.test_init": {
            "name": "test_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDispatchBase.test_init_apps": {
            "name": "test_init_apps",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDispatchBase.test_init_env": {
            "name": "test_init_env",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDispatchBase.test_not_found": {
            "name": "test_not_found",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/test_methoddispatcher.py": {
        "dummy_get_app": {
            "name": "dummy_get_app",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "TestMethodDispatcher._get_target": {
            "name": "_get_target",
            "location": 15,
            "return": [
                "Type[webdispatch.methoddispatcher.MethodDispatcher]"
            ],
            "arguments": {}
        },
        "TestMethodDispatcher._make_one": {
            "name": "_make_one",
            "location": 20,
            "return": [
                "webdispatch.methoddispatcher.MethodDispatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethodDispatcher.test_it": {
            "name": "test_it",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethodDispatcher.test_not_allowed": {
            "name": "test_not_allowed",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethodDispatcher.test_register_app": {
            "name": "test_register_app",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethodDispatcher.test_register_app_decorator": {
            "name": "test_register_app_decorator",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionHandlerAdapter._call_fut": {
            "name": "_call_fut",
            "location": 67,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "TestActionHandlerAdapter.test_call": {
            "name": "test_call",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionHandlerAdapter.test_invalid_name": {
            "name": "test_invalid_name",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionDispatcher._get_target": {
            "name": "_get_target",
            "location": 108,
            "return": [
                "Type[webdispatch.methoddispatcher.ActionDispatcher]"
            ],
            "arguments": {}
        },
        "TestActionDispatcher._make_one": {
            "name": "_make_one",
            "location": 113,
            "return": [
                "webdispatch.methoddispatcher.ActionDispatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionDispatcher.test_it": {
            "name": "test_it",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionDispatcher.test_register_action_handler": {
            "name": "test_register_action_handler",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionDispatcher.test_not_found": {
            "name": "test_not_found",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionDispatcher.test_it.test_app": {
            "name": "test_app",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "TestActionHandlerAdapter.test_call.DummyAction.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActionHandlerAdapter.test_call.DummyAction.get_message": {
            "name": "get_message",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActionHandlerAdapter.test_call.DummyAction.action": {
            "name": "action",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "start_response": []
            }
        },
        "TestActionDispatcher.test_register_action_handler.DummyHandler.get_body": {
            "name": "get_body",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "TestActionDispatcher.test_register_action_handler.DummyHandler.test_action": {
            "name": "test_action",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/test_mixins.py": {
        "TestURLMapperMixin._get_target": {
            "name": "_get_target",
            "location": 10,
            "return": [
                "Type[webdispatch.mixins.URLMapperMixin]"
            ],
            "arguments": {}
        },
        "TestURLMapperMixin._make_one": {
            "name": "_make_one",
            "location": 15,
            "return": [
                "webdispatch.mixins.URLMapperMixin"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapperMixin.test_generate_url": {
            "name": "test_generate_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapperMixin.test_urlmapper": {
            "name": "test_urlmapper",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/test_paster.py": {
        "TestPaste._make_env": {
            "name": "_make_env",
            "location": 10,
            "return": [
                "Dict[(str, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "path_info": [
                    "_T0"
                ],
                "script_name": [
                    "_T1"
                ]
            }
        },
        "TestPaste._call_fut": {
            "name": "_call_fut",
            "location": 15,
            "return": [
                "webdispatch.urldispatcher.URLDispatcher"
            ],
            "arguments": {}
        },
        "TestPaste.assert_response_body": {
            "name": "assert_response_body",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "path": [],
                "expected": []
            }
        },
        "TestPaste.test_it": {
            "name": "test_it",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/test_uritemplate.py": {
        "TestPatternToRegex._call_fut": {
            "name": "_call_fut",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestPatternToRegex.test_empty": {
            "name": "test_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_regex_meta_chars": {
            "name": "test_regex_meta_chars",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_open_path": {
            "name": "test_open_path",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_close_path": {
            "name": "test_close_path",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_one_var": {
            "name": "test_one_var",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_one_typed_var": {
            "name": "test_one_typed_var",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_two_vars": {
            "name": "test_two_vars",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatternToRegex.test_vars": {
            "name": "test_vars",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectConverters._call_fut": {
            "name": "_call_fut",
            "location": 76,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {}
        },
        "TestDetectConverters.test_empty": {
            "name": "test_empty",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectConverters.test_no_type": {
            "name": "test_no_type",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectConverters.test_type": {
            "name": "test_type",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate._get_target": {
            "name": "_get_target",
            "location": 107,
            "return": [
                "Type[webdispatch.uritemplate.URITemplate]"
            ],
            "arguments": {}
        },
        "TestURITemplate._make_one": {
            "name": "_make_one",
            "location": 112,
            "return": [
                "webdispatch.uritemplate.URITemplate"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_bad_format": {
            "name": "test_bad_format",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_empty": {
            "name": "test_match_empty",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_wildcard": {
            "name": "test_wildcard",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_no_match": {
            "name": "test_match_no_match",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_match_one": {
            "name": "test_match_match_one",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_match_complex_word": {
            "name": "test_match_match_complex_word",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_match_many": {
            "name": "test_match_match_many",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_conveter": {
            "name": "test_match_conveter",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_conveter_error": {
            "name": "test_match_conveter_error",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_match_custom_conveter": {
            "name": "test_match_custom_conveter",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURITemplate.test_substitue": {
            "name": "test_substitue",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/test_urldispatcher.py": {
        "TestURLMapper._get_target": {
            "name": "_get_target",
            "location": 13,
            "return": [
                "Type[webdispatch.urldispatcher.URLMapper]"
            ],
            "arguments": {}
        },
        "TestURLMapper._make_one": {
            "name": "_make_one",
            "location": 18,
            "return": [
                "webdispatch.urldispatcher.URLMapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapper.test_init": {
            "name": "test_init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapper.test_add": {
            "name": "test_add",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapper.test_lookup_none": {
            "name": "test_lookup_none",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapper.test_lookup": {
            "name": "test_lookup",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLMapper.test_generate": {
            "name": "test_generate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLGenerator._get_target": {
            "name": "_get_target",
            "location": 84,
            "return": [
                "Type[webdispatch.urldispatcher.URLGenerator]"
            ],
            "arguments": {}
        },
        "TestURLGenerator._make_one": {
            "name": "_make_one",
            "location": 89,
            "return": [
                "webdispatch.urldispatcher.URLGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLGenerator.test_init": {
            "name": "test_init",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLGenerator.test_generate": {
            "name": "test_generate",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher._get_target": {
            "name": "_get_target",
            "location": 118,
            "return": [
                "Type[webdispatch.urldispatcher.URLDispatcher]"
            ],
            "arguments": {}
        },
        "TestURLDispatcher._make_one": {
            "name": "_make_one",
            "location": 123,
            "return": [
                "webdispatch.urldispatcher.URLDispatcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_init": {
            "name": "test_init",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_init_mapper": {
            "name": "test_init_mapper",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_add_url": {
            "name": "test_add_url",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_subroute": {
            "name": "test_subroute",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_detect_view_name": {
            "name": "test_detect_view_name",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDispatcher.test_on_view_not_found": {
            "name": "test_on_view_not_found",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "WebDispatch-master/webdispatch/tests/__init__.py": {}
}
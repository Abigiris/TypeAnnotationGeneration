{
    "YouChoose-master/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "YouChoose-master/docs/conf.py": {},
    "YouChoose-master/docs/example_google_docstring.py": {
        "function_with_types_in_docstring": {
            "name": "function_with_types_in_docstring",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "param1": [],
                "param2": []
            }
        },
        "function_with_pep484_type_annotations": {
            "name": "function_with_pep484_type_annotations",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "param1": [
                    "int"
                ],
                "param2": [
                    "str"
                ]
            }
        },
        "module_level_function": {
            "name": "module_level_function",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "param1": [],
                "param2": []
            }
        },
        "example_generator": {
            "name": "example_generator",
            "location": 133,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "n": []
            }
        },
        "ExampleError.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "code": []
            }
        },
        "ExampleClass.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param1": [],
                "param2": [],
                "param3": []
            }
        },
        "ExampleClass.readonly_property": {
            "name": "readonly_property",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleClass.readwrite_property": {
            "name": "readwrite_property",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ExampleClass.example_method": {
            "name": "example_method",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param1": [],
                "param2": []
            }
        },
        "ExampleClass.__special__": {
            "name": "__special__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleClass.__special_without_docstring__": {
            "name": "__special_without_docstring__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleClass._private": {
            "name": "_private",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleClass._private_without_docstring": {
            "name": "_private_without_docstring",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/docs/__init__.py": {},
    "YouChoose-master/tests/test_database.py": {
        "sqlite_db": {
            "name": "sqlite_db",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_sqlite_table": {
            "name": "test_sqlite_table",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_db": []
            }
        },
        "test_incorrect_db_type": {
            "name": "test_incorrect_db_type",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "YouChoose-master/tests/test_environment.py": {
        "test_python_version": {
            "name": "test_python_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "YouChoose-master/tests/test_model.py": {},
    "YouChoose-master/tests/__init__.py": {},
    "YouChoose-master/youchoose/__init__.py": {},
    "YouChoose-master/youchoose/data/data_loading.py": {
        "InteractionsDataset.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "num_items": [
                    "int"
                ],
                "user_col": [
                    "str"
                ],
                "item_col": [
                    "str"
                ],
                "weight_col": [
                    "str"
                ],
                "dev": [],
                "num_negs": [
                    "int"
                ]
            }
        },
        "InteractionsDataset.__len__": {
            "name": "__len__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractionsDataset.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "InteractionsDataset.transform": {
            "name": "transform",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "df_rows": []
            }
        },
        "InteractionsDataset.negative_sampling": {
            "name": "negative_sampling",
            "location": 90,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "user_ids": []
            }
        },
        "InteractionsDataset.ratings_dataloader": {
            "name": "ratings_dataloader",
            "location": 117,
            "return": [
                "Tuple[(list, int, int)]"
            ],
            "arguments": {
                "cls": [],
                "dataframe": [],
                "user_col": [
                    "str"
                ],
                "item_col": [
                    "str"
                ],
                "weight_col": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "dev": [],
                "num_negs": [
                    "int"
                ],
                "shuffle_train": [
                    "bool"
                ],
                "reweight": [
                    "bool"
                ],
                "train_frac": [
                    "float"
                ],
                "test_frac": [
                    "float"
                ]
            }
        }
    },
    "YouChoose-master/youchoose/data/data_processing.py": {
        "dataframe_split": {
            "name": "dataframe_split",
            "location": 11,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "df": [],
                "train_frac": [
                    "float"
                ],
                "test_frac": [
                    "float"
                ]
            }
        },
        "item_sets": {
            "name": "item_sets",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "df": [],
                "users": [
                    "str"
                ],
                "items": [
                    "str"
                ]
            }
        },
        "list_to_indexed_dict": {
            "name": "list_to_indexed_dict",
            "location": 64,
            "return": [
                "dict"
            ],
            "arguments": {
                "list_": [
                    "list"
                ]
            }
        },
        "transform_data_ids": {
            "name": "transform_data_ids",
            "location": 80,
            "return": [
                "Tuple[(Any, dict, dict)]"
            ],
            "arguments": {
                "df": [],
                "user_col": [
                    "str"
                ],
                "item_col": [
                    "str"
                ],
                "weight_col": [
                    "str"
                ],
                "reweight": [
                    "bool"
                ]
            }
        }
    },
    "YouChoose-master/youchoose/data/__init__.py": {},
    "YouChoose-master/youchoose/data/example_datasets/instacart_dataset.py": {
        "create_adjancency_matrix": {
            "name": "create_adjancency_matrix",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "save_folder": [],
                "num_orders": []
            }
        },
        "define_instacart_db": {
            "name": "define_instacart_db",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "YouChoose-master/youchoose/data/example_datasets/test_example_datasets.py": {},
    "YouChoose-master/youchoose/data/example_datasets/__init__.py": {},
    "YouChoose-master/youchoose/data/ingestion/csv.py": {},
    "YouChoose-master/youchoose/data/ingestion/graph.py": {},
    "YouChoose-master/youchoose/data/ingestion/helper_functions.py": {
        "get_env_parameters": {
            "name": "get_env_parameters",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "ssh_tunnel": {
            "name": "ssh_tunnel",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "private_key": []
            }
        }
    },
    "YouChoose-master/youchoose/data/ingestion/image.py": {},
    "YouChoose-master/youchoose/data/ingestion/nosql.py": {},
    "YouChoose-master/youchoose/data/ingestion/sql.py": {
        "psql_engine": {
            "name": "psql_engine",
            "location": 106,
            "return": [
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {
                "tunnel": []
            }
        },
        "SQLDatabase.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_type": [],
                "db_name": [],
                "engine": [],
                "tunnel": []
            }
        },
        "SQLDatabase.get_dataframe": {
            "name": "get_dataframe",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "SQLDatabase.save_layout": {
            "name": "save_layout",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SQLDatabase.close": {
            "name": "close",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/youchoose/data/ingestion/text.py": {},
    "YouChoose-master/youchoose/data/ingestion/video.py": {},
    "YouChoose-master/youchoose/data/ingestion/__init__.py": {},
    "YouChoose-master/youchoose/evaluate/auc.py": {},
    "YouChoose-master/youchoose/evaluate/__init__.py": {},
    "YouChoose-master/youchoose/extraction/nn_latent_matrix_factorization.py": {
        "NNMatrixFactorization.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_users": [],
                "n_products": [],
                "n_factors": [],
                "optimizer": [],
                "lr": [],
                "l2": [],
                "momentum": [],
                "loss_fn": [],
                "activation": []
            }
        },
        "NNMatrixFactorization.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "item": []
            }
        },
        "NNMatrixFactorization._prob_to_class": {
            "name": "_prob_to_class",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "forward": []
            }
        },
        "NNMatrixFactorization.prediction": {
            "name": "prediction",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "item": []
            }
        },
        "NNMatrixFactorization.loss": {
            "name": "loss",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "forward": [],
                "rating": []
            }
        },
        "NNMatrixFactorization.compute_accuracy": {
            "name": "compute_accuracy",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data_loader": []
            }
        },
        "NNMatrixFactorization.train_model": {
            "name": "train_model",
            "location": 106,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "data_loader": []
            }
        },
        "NNMatrixFactorization.evaluate": {
            "name": "evaluate",
            "location": 134,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "dataloader": []
            }
        },
        "NNMatrixFactorization.load": {
            "name": "load",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "saved_filename": [],
                "optimizer": [],
                "lr": [],
                "l2": [],
                "momentum": [],
                "loss_fn": [],
                "activation": []
            }
        },
        "NNMatrixFactorization.create_user_item_array": {
            "name": "create_user_item_array",
            "location": 197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/youchoose/extraction/__init__.py": {},
    "YouChoose-master/youchoose/interaction/pairwise.py": {},
    "YouChoose-master/youchoose/interaction/pointwise.py": {},
    "YouChoose-master/youchoose/interaction/__init__.py": {},
    "YouChoose-master/youchoose/recommender/deploy.py": {
        "aws_s3": {
            "name": "aws_s3",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "youchoose.recommender.recommender.Recommender"
                ]
            }
        },
        "aws_sagemaker": {
            "name": "aws_sagemaker",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "youchoose.recommender.recommender.Recommender"
                ]
            }
        },
        "gcp_cloudstorage": {
            "name": "gcp_cloudstorage",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "youchoose.recommender.recommender.Recommender"
                ]
            }
        }
    },
    "YouChoose-master/youchoose/recommender/matrix_factorization.py": {
        "MatrixFactorization.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "data": [],
                "use_cuda": [],
                "embedding_dimension": [],
                "train_frac": [],
                "test_frac": [],
                "epochs": [],
                "reg": [],
                "optimizer": []
            }
        },
        "MatrixFactorization.create": {
            "name": "create",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.train": {
            "name": "train",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.evaluate": {
            "name": "evaluate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.save": {
            "name": "save",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.load": {
            "name": "load",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.deploy": {
            "name": "deploy",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixFactorization.recommend_top": {
            "name": "recommend_top",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/youchoose/recommender/nn_layers.py": {
        "ScaledEmbedding.reset_parameters": {
            "name": "reset_parameters",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroEmbedding.reset_parameters": {
            "name": "reset_parameters",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/youchoose/recommender/recommender.py": {
        "Recommender.create": {
            "name": "create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.train": {
            "name": "train",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.evaluate": {
            "name": "evaluate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.load": {
            "name": "load",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.deploy": {
            "name": "deploy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.recommend_top": {
            "name": "recommend_top",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "YouChoose-master/youchoose/recommender/__init__.py": {},
    "YouChoose-master/youchoose/utils/logging.py": {},
    "YouChoose-master/youchoose/utils/__init__.py": {},
    "YouChoose-master/youchoose/visualization/visualize.py": {
        "scatter": {
            "name": "scatter",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tsne": [],
                "ax": [],
                "title": []
            }
        },
        "embedding_tsne": {
            "name": "embedding_tsne",
            "location": 16,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "tsne1": [],
                "tsne2": [],
                "titles": [],
                "figsize": []
            }
        }
    },
    "YouChoose-master/youchoose/visualization/__init__.py": {}
}
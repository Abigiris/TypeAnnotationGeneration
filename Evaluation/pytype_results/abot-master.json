{
    "abot-master/setup.py": {
        "git_remote_tags": {
            "name": "git_remote_tags",
            "location": 11,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "git_remote_commits": {
            "name": "git_remote_commits",
            "location": 25,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "git_get_closest_commit": {
            "name": "git_get_closest_commit",
            "location": 31,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "valid_tags": [],
                "remote_commits": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "abot-master/abot/bot.py": {
        "extract_possible_argument_types": {
            "name": "extract_possible_argument_types",
            "location": 371,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": []
            }
        },
        "Backend.configure": {
            "name": "configure",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.whoami": {
            "name": "whoami",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_mentioned": {
            "name": "is_mentioned",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message_event": []
            }
        },
        "BotObject.bot": {
            "name": "bot",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        },
        "BotObject.backend": {
            "name": "backend",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.id": {
            "name": "id",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity.username": {
            "name": "username",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.sender": {
            "name": "sender",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.channel": {
            "name": "channel",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageEvent.text": {
            "name": "text",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NoBackend.configure": {
            "name": "configure",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NoBackend.whoami": {
            "name": "whoami",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NoBackend.__bool__": {
            "name": "__bool__",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NoBotObject.bot": {
            "name": "bot",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        },
        "_NoBotObject.__bool__": {
            "name": "__bool__",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.attach_backend": {
            "name": "attach_backend",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "Bot.attach_command_group": {
            "name": "attach_command_group",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Bot.add_event_handler": {
            "name": "add_event_handler",
            "location": 274,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": [],
                "event_class_or_func": []
            }
        },
        "Bot.start": {
            "name": "start",
            "location": 367,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "Bot.add_event_handler.wrapper": {
            "name": "wrapper",
            "location": 284,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "abot-master/abot/cli.py": {
        "command": {
            "name": "command",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "group": {
            "name": "group",
            "location": 225,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "ExitCode.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "ExitCode.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.exit": {
            "name": "exit",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "AsyncCommandMixin.invoke": {
            "name": "invoke",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AsyncCommandMixin.make_context": {
            "name": "make_context",
            "location": 60,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": [],
                "info_name": [],
                "args": [],
                "parent": []
            }
        },
        "AsyncCommandMixin.get_help_option": {
            "name": "get_help_option",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AsyncMultiCommandMixin.invoke": {
            "name": "invoke",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AsyncMultiCommandMixin.parse_args": {
            "name": "parse_args",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "args": []
            }
        },
        "AsyncGroupMixin.command": {
            "name": "command",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGroupMixin.group": {
            "name": "group",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGroupMixin.invoke": {
            "name": "invoke",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AsyncCommandMixin.get_help_option.show_help": {
            "name": "show_help",
            "location": 75,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        }
    },
    "abot-master/abot/dubtrack.py": {
        "gen_request_id": {
            "name": "gen_request_id",
            "location": 576,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "DubtrackObject.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "dubtrack_backend": []
            }
        },
        "DubtrackObject.backend": {
            "name": "backend",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackChannel.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackChannel.entities": {
            "name": "entities",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackChannel.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.username": {
            "name": "username",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.id": {
            "name": "id",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.dubs": {
            "name": "dubs",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.played_count": {
            "name": "played_count",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.skips": {
            "name": "skips",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.songs_in_queue": {
            "name": "songs_in_queue",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEntity.__eq__": {
            "name": "__eq__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DubtrackEvent.from_data": {
            "name": "from_data",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "dubtrack_backend": []
            }
        },
        "DubtrackEvent.sender": {
            "name": "sender",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackEvent.channel": {
            "name": "channel",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "DubtrackEvent.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackMessage.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackMessage.sender": {
            "name": "sender",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackMessage.text": {
            "name": "text",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackMessage.message_id": {
            "name": "message_id",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackMessage.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSkip.sender": {
            "name": "sender",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSkip.__repr__": {
            "name": "__repr__",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDelete.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDelete.sender": {
            "name": "sender",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDelete.message_id": {
            "name": "message_id",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDelete.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.sender": {
            "name": "sender",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.dubtype": {
            "name": "dubtype",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.total_updubs": {
            "name": "total_updubs",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.total_downdubs": {
            "name": "total_downdubs",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.length": {
            "name": "length",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.played": {
            "name": "played",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackDub.__repr__": {
            "name": "__repr__",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackRoomQueueReorder.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackRoomQueueReorder.sender": {
            "name": "sender",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackRoomQueueReorder.__repr__": {
            "name": "__repr__",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserQueueUpdate.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserQueueUpdate.sender": {
            "name": "sender",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserQueueUpdate.__repr__": {
            "name": "__repr__",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.sender": {
            "name": "sender",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.__repr__": {
            "name": "__repr__",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.song_type": {
            "name": "song_type",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.song_external_id": {
            "name": "song_external_id",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.song_name": {
            "name": "song_name",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.song_id": {
            "name": "song_id",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.length": {
            "name": "length",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackPlaying.played": {
            "name": "played",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackJoin.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackJoin.sender": {
            "name": "sender",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackJoin.__repr__": {
            "name": "__repr__",
            "location": 357,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserPauseQueue.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserPauseQueue.sender": {
            "name": "sender",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserPauseQueue.__repr__": {
            "name": "__repr__",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSetRole.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSetRole.sender": {
            "name": "sender",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSetRole.receiver": {
            "name": "receiver",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackSetRole.__repr__": {
            "name": "__repr__",
            "location": 396,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUnSetRole.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUnSetRole.sender": {
            "name": "sender",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUnSetRole.receiver": {
            "name": "receiver",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUnSetRole.__repr__": {
            "name": "__repr__",
            "location": 422,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserUpdate.__init__": {
            "name": "__init__",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserUpdate.sender": {
            "name": "sender",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DubtrackUserUpdate.__repr__": {
            "name": "__repr__",
            "location": 443,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackBotBackend.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "room": []
            }
        },
        "DubtrackBotBackend.configure": {
            "name": "configure",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackBotBackend._register_user": {
            "name": "_register_user",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_data": []
            }
        },
        "DubtrackBotBackend._get_user_data": {
            "name": "_get_user_data",
            "location": 544,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "id_or_name": []
            }
        },
        "DubtrackBotBackend._get_entity": {
            "name": "_get_entity",
            "location": 555,
            "return": [
                "Optional[DubtrackEntity]"
            ],
            "arguments": {
                "self": [],
                "id_or_name": []
            }
        },
        "DubtrackBotBackend.whoami": {
            "name": "whoami",
            "location": 568,
            "return": [
                "Optional[DubtrackEntity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DubtrackWS.__init__": {
            "name": "__init__",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "room": []
            }
        },
        "DubtrackWS.set_login": {
            "name": "set_login",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": []
            }
        }
    },
    "abot-master/abot/slack.py": {
        "SlackCallException.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "method": []
            }
        },
        "SlackCallException.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlackAPI.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_token": [],
                "event_loop": []
            }
        },
        "SlackAPI.ws_send": {
            "name": "ws_send",
            "location": 145,
            "return": [
                "asyncio.futures.Future[nothing]"
            ],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "SlackAPI.look_for_id": {
            "name": "look_for_id",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "iterable": [],
                "object_id": []
            }
        },
        "SlackAPI.ignore_message": {
            "name": "ignore_message",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SlackAPI.get_user_by_id": {
            "name": "get_user_by_id",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "SlackAPI.handle_bot_added": {
            "name": "handle_bot_added",
            "location": 197,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_bot_changed": {
            "name": "handle_bot_changed",
            "location": 210,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_archive": {
            "name": "handle_channel_archive",
            "location": 224,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_created": {
            "name": "handle_channel_created",
            "location": 235,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_deleted": {
            "name": "handle_channel_deleted",
            "location": 246,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_joined": {
            "name": "handle_channel_joined",
            "location": 259,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_left": {
            "name": "handle_channel_left",
            "location": 270,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_marked": {
            "name": "handle_channel_marked",
            "location": 281,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_rename": {
            "name": "handle_channel_rename",
            "location": 291,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_channel_unarchive": {
            "name": "handle_channel_unarchive",
            "location": 302,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_archive": {
            "name": "handle_group_archive",
            "location": 331,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_close": {
            "name": "handle_group_close",
            "location": 342,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_joined": {
            "name": "handle_group_joined",
            "location": 355,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_left": {
            "name": "handle_group_left",
            "location": 366,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_marked": {
            "name": "handle_group_marked",
            "location": 377,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_open": {
            "name": "handle_group_open",
            "location": 387,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_rename": {
            "name": "handle_group_rename",
            "location": 398,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_group_unarchive": {
            "name": "handle_group_unarchive",
            "location": 409,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_hello": {
            "name": "handle_hello",
            "location": 420,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_im_close": {
            "name": "handle_im_close",
            "location": 424,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_im_created": {
            "name": "handle_im_created",
            "location": 435,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_im_open": {
            "name": "handle_im_open",
            "location": 449,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_manual_presence_change": {
            "name": "handle_manual_presence_change",
            "location": 460,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_member_joined_channel": {
            "name": "handle_member_joined_channel",
            "location": 472,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_member_left_channel": {
            "name": "handle_member_left_channel",
            "location": 501,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_presence_change": {
            "name": "handle_presence_change",
            "location": 534,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_team_join": {
            "name": "handle_team_join",
            "location": 558,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.handle_user_change": {
            "name": "handle_user_change",
            "location": 578,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "_T0@@"
                ]
            }
        },
        "SlackAPI.rtm_handler": {
            "name": "rtm_handler",
            "location": 592,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ws_message": []
            }
        },
        "SlackAPI.__del__": {
            "name": "__del__",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "abot-master/abot/util.py": {},
    "abot-master/abot/__init__.py": {},
    "abot-master/tests/conftest.py": {},
    "abot-master/tests/dummy_backend.py": {
        "DummyBackend.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyBackend.configure": {
            "name": "configure",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyBackend.whoami": {
            "name": "whoami",
            "location": 27,
            "return": [
                "mock.MagicMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyMessageEvent.text": {
            "name": "text",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "abot-master/tests/test_bot.py": {
        "func_union_dict_list": {
            "name": "func_union_dict_list",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "b": []
            }
        },
        "func_dict": {
            "name": "func_dict",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "b": []
            }
        },
        "func_invalid": {
            "name": "func_invalid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [],
                "c": []
            }
        },
        "bot": {
            "name": "bot",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "dummy_backend": {
            "name": "dummy_backend",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "dummy_bot": {
            "name": "dummy_bot",
            "location": 43,
            "return": [],
            "arguments": {
                "bot": [],
                "dummy_backend": []
            }
        },
        "asyncio_mock": {
            "name": "asyncio_mock",
            "location": 49,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "command_collection_mock": {
            "name": "command_collection_mock",
            "location": 54,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_extract_possible_argument_types": {
            "name": "test_extract_possible_argument_types",
            "location": 65,
            "return": [],
            "arguments": {
                "func": [],
                "outcome": []
            }
        },
        "test_backend_is_mentioned": {
            "name": "test_backend_is_mentioned",
            "location": 103,
            "return": [],
            "arguments": {
                "text": [],
                "succeeds": [],
                "dummy_backend": []
            }
        },
        "test_bot_object": {
            "name": "test_bot_object",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_event": {
            "name": "test_message_event",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bot_creation": {
            "name": "test_bot_creation",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bot_attach_backend": {
            "name": "test_bot_attach_backend",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "dummy_backend": []
            }
        },
        "test_bot_attach_command_group": {
            "name": "test_bot_attach_command_group",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_bot": []
            }
        },
        "test_bot_add_event_handler": {
            "name": "test_bot_add_event_handler",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_bot": []
            }
        },
        "test_bot_start": {
            "name": "test_bot_start",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_bot": [],
                "asyncio_mock": []
            }
        },
        "test_internal_exception_handler.a": {
            "name": "a",
            "location": 313,
            "return": [],
            "arguments": {}
        }
    },
    "abot-master/tests/test_cli.py": {
        "test_simple_cli_async_command": {
            "name": "test_simple_cli_async_command",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_cli_sync_command": {
            "name": "test_simple_cli_sync_command",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_simple_bot_sync_command": {
            "name": "test_simple_bot_sync_command",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_simple_bot_async_command.acmds": {
            "name": "acmds",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_simple_cli_async_command.acmds": {
            "name": "acmds",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_simple_cli_sync_command.acmds": {
            "name": "acmds",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_simple_cli_sync_command.ping": {
            "name": "ping",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_simple_bot_sync_command.acmds": {
            "name": "acmds",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "abot-master/tests/test_dubtrack.py": {
        "datetime_mock": {
            "name": "datetime_mock",
            "location": 12,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_dubtrack_object": {
            "name": "test_dubtrack_object",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dubtrack_event_from_data": {
            "name": "test_dubtrack_event_from_data",
            "location": 84,
            "return": [],
            "arguments": {
                "data": [],
                "return_type": []
            }
        }
    },
    "abot-master/tests/test_util.py": {},
    "abot-master/tests/__init__.py": {}
}
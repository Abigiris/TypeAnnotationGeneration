{
    "aft-master/setup.py": {},
    "aft-master/aft/fuzzer.py": {
        "get_all_functions_in_module": {
            "name": "get_all_functions_in_module",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "module_name": [],
                "module_str": [
                    "str"
                ]
            }
        },
        "generate_mypy_stub_strings": {
            "name": "generate_mypy_stub_strings",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "function_example_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "flat_func_app": {
            "name": "flat_func_app",
            "location": 125,
            "return": [
                "B"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., B)]"
                ],
                "args": [
                    "List[A]"
                ]
            }
        },
        "class_func_app": {
            "name": "class_func_app",
            "location": 139,
            "return": [
                "B"
            ],
            "arguments": {
                "class_instance": [],
                "func": [],
                "func_args": []
            }
        },
        "get_function": {
            "name": "get_function",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "function_name": [
                    "str"
                ]
            }
        },
        "fuzz_example": {
            "name": "fuzz_example",
            "location": 182,
            "return": [
                "dict"
            ],
            "arguments": {
                "file_name": [],
                "function_name": [],
                "class_instance": []
            }
        },
        "run_fuzzer": {
            "name": "run_fuzzer",
            "location": 259,
            "return": [
                "dict"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "function_name": [
                    "str"
                ]
            }
        }
    },
    "aft-master/aft/instances.py": {
        "get_dummy": {
            "name": "get_dummy",
            "location": 14,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_ints": {
            "name": "get_ints",
            "location": 19,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_floats": {
            "name": "get_floats",
            "location": 27,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_bools": {
            "name": "get_bools",
            "location": 34,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_strings": {
            "name": "get_strings",
            "location": 41,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "make_identical_lists": {
            "name": "make_identical_lists",
            "location": 54,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "x": [],
                "type_annotation": [
                    "str"
                ]
            }
        },
        "get_int_list": {
            "name": "get_int_list",
            "location": 61,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_float_list": {
            "name": "get_float_list",
            "location": 66,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_string_list": {
            "name": "get_string_list",
            "location": 71,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_numpy_arrays": {
            "name": "get_numpy_arrays",
            "location": 76,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        },
        "get_instances": {
            "name": "get_instances",
            "location": 90,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {}
        }
    },
    "aft-master/aft/__init__.py": {},
    "aft-master/aft/__main__.py": {
        "print_thick_bar": {
            "name": "print_thick_bar",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "width": [
                    "int"
                ]
            }
        },
        "default_print": {
            "name": "default_print",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "json_obj": [
                    "Union[(dict, list)]"
                ],
                "print_failures": [
                    "bool"
                ]
            }
        },
        "console_entry": {
            "name": "console_entry",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aft-master/scratch/current_test.py": {},
    "aft-master/scratch/totest.py": {
        "add_one": {
            "name": "add_one",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "XNormalizeSTDMeanCentered": {
            "name": "XNormalizeSTDMeanCentered",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "X": []
            }
        },
        "add_stuff": {
            "name": "add_stuff",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "_normalize_prob": {
            "name": "_normalize_prob",
            "location": 69,
            "return": [
                "Dict[(Any, float)]"
            ],
            "arguments": {
                "prob": [],
                "item_set": []
            }
        },
        "_normalize_prob_two_dim": {
            "name": "_normalize_prob_two_dim",
            "location": 90,
            "return": [
                "Dict[(Any, Dict[(Any, float)])]"
            ],
            "arguments": {
                "prob": [],
                "item_set1": [],
                "item_set2": []
            }
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ],
                "b": [
                    "float"
                ],
                "c": [
                    "str"
                ]
            }
        },
        "Example.add_some_stuff": {
            "name": "add_some_stuff",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [],
                "symbols": [],
                "start_prob": [],
                "trans_prob": [],
                "emit_prob": []
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.states": {
            "name": "states",
            "location": 122,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.states_number": {
            "name": "states_number",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.symbols": {
            "name": "symbols",
            "location": 130,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.symbols_number": {
            "name": "symbols_number",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.start_prob": {
            "name": "start_prob",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Model.trans_prob": {
            "name": "trans_prob",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state_from": [],
                "state_to": []
            }
        },
        "Model.emit_prob": {
            "name": "emit_prob",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "symbol": []
            }
        },
        "Model._forward": {
            "name": "_forward",
            "location": 168,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "Model._backward": {
            "name": "_backward",
            "location": 188,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "Model.decode": {
            "name": "decode",
            "location": 226,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "Model.learn": {
            "name": "learn",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [],
                "smoothing": []
            }
        }
    },
    "aft-master/test/test_functions.py": {
        "add_one": {
            "name": "add_one",
            "location": 1,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "add_one_only_int": {
            "name": "add_one_only_int",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "add_two_only_int": {
            "name": "add_two_only_int",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "add_one_multi_type": {
            "name": "add_one_multi_type",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "add_two_multi_type": {
            "name": "add_two_multi_type",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "add_one_only_int_default": {
            "name": "add_one_only_int_default",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "Example.add_some_stuff": {
            "name": "add_some_stuff",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Example.add_one_only_int_no_deps": {
            "name": "add_one_only_int_no_deps",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "Example.add_two_multi_type": {
            "name": "add_two_multi_type",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    },
    "aft-master/test/test_fuzzer.py": {
        "TestFuzzer.test_get_function": {
            "name": "test_get_function",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "function_name": [],
                "args": [],
                "expected": [],
                "test_description": []
            }
        },
        "TestFuzzer.test_class_func_app": {
            "name": "test_class_func_app",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "function_name": [],
                "class_instance": [],
                "args": [],
                "expected": [],
                "test_description": []
            }
        },
        "TestFuzzer.test_fuzz_example_success": {
            "name": "test_fuzz_example_success",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "function_name": [],
                "class_instance": [],
                "expected": [],
                "test_description": []
            }
        },
        "TestFuzzer.test_generate_mypy_stub_string": {
            "name": "test_generate_mypy_stub_string",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "function_name": [],
                "arg_names": [],
                "arg_types": [],
                "expected": [],
                "test_description": []
            }
        }
    },
    "aft-master/test/__init__.py": {}
}
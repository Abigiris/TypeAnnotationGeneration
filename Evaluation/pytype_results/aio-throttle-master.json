{
    "aio-throttle-master/setup.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_version": {
            "name": "read_version",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "aio-throttle-master/aio_throttle/aiohttp.py": {
        "aiohttp_ignore": {
            "name": "aiohttp_ignore",
            "location": 19,
            "return": [
                "Union[(Callable[([Any], Any)], _T0)]"
            ],
            "arguments": {
                "func": [
                    "_T0@@"
                ]
            }
        },
        "aiohttp_middleware_factory": {
            "name": "aiohttp_middleware_factory",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "_is_ignored_by_decorator": {
            "name": "_is_ignored_by_decorator",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "_is_ignored_by_path": {
            "name": "_is_ignored_by_path",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "ignored_paths": []
            }
        },
        "_is_subclass": {
            "name": "_is_subclass",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "cls_info": []
            }
        },
        "aiohttp_ignore.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/base.py": {
        "ThrottlePriority.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrottlePriority.parse": {
            "name": "parse",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "ThrottleResult.__bool__": {
            "name": "__bool__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrottleResult.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/internals.py": {
        "LifoSemaphore.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": []
            }
        },
        "LifoSemaphore._wake_up_next": {
            "name": "_wake_up_next",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifoSemaphore.available": {
            "name": "available",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LifoSemaphore.waiting": {
            "name": "waiting",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LifoSemaphore.acquire_no_wait": {
            "name": "acquire_no_wait",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifoSemaphore.release": {
            "name": "release",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/metrics.py": {
        "MetricsProvider.increment_counter": {
            "name": "increment_counter",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tags": [],
                "value": []
            }
        },
        "NoopMetricsProvider.increment_counter": {
            "name": "increment_counter",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tags": [],
                "value": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/prometheus.py": {
        "PrometheusMetricsProvider.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "PrometheusMetricsProvider.increment_counter": {
            "name": "increment_counter",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tags": [],
                "value": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/quotas.py": {
        "ThrottleCapacityQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [],
                "capacity_used": [],
                "capacity_limit": []
            }
        },
        "CompositeThrottleCapacityQuota.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quotas": []
            }
        },
        "CompositeThrottleCapacityQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [],
                "capacity_used": [],
                "capacity_limit": []
            }
        },
        "MaxFractionCapacityQuota.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_fraction": [],
                "resource": []
            }
        },
        "MaxFractionCapacityQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "resource": [],
                "used_capacity": [],
                "capacity_limit": []
            }
        },
        "ThrottleQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeThrottleQuota.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quotas": []
            }
        },
        "CompositeThrottleQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomRejectThrottleQuota.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reject_probability": [],
                "seed": []
            }
        },
        "RandomRejectThrottleQuota.can_be_accepted": {
            "name": "can_be_accepted",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/throttle.py": {
        "Throttler.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity_limit": [],
                "queue_limit": [],
                "consumer_quotas": [],
                "priority_quotas": [],
                "quotas": [],
                "metrics_provider": []
            }
        },
        "Throttler.stats": {
            "name": "stats",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Throttler._capture_throttled_request_metric": {
            "name": "_capture_throttled_request_metric",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [],
                "priority": [],
                "result": []
            }
        },
        "Throttler._check_quotas": {
            "name": "_check_quotas",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "consumer": [],
                "priority": []
            }
        },
        "Throttler._check_queue": {
            "name": "_check_queue",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "priority": []
            }
        },
        "Throttler._increment_counters": {
            "name": "_increment_counters",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [],
                "priority": []
            }
        },
        "Throttler._decrement_counters": {
            "name": "_decrement_counters",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [],
                "priority": []
            }
        },
        "Throttler._acquire_capacity_slot_no_wait": {
            "name": "_acquire_capacity_slot_no_wait",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Throttler._release_capacity_slot": {
            "name": "_release_capacity_slot",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/utils.py": {
        "increment_counter": {
            "name": "increment_counter",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [],
                "key": []
            }
        },
        "decrement_counter": {
            "name": "decrement_counter",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [],
                "key": []
            }
        }
    },
    "aio-throttle-master/aio_throttle/__init__.py": {
        "_parse_version": {
            "name": "_parse_version",
            "location": 33,
            "return": [
                "VersionInfo"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "aio-throttle-master/tests/conftest.py": {},
    "aio-throttle-master/tests/test_aiohttp.py": {},
    "aio-throttle-master/tests/test_quotas.py": {
        "test_max_fraction_any_consumer_quota": {
            "name": "test_max_fraction_any_consumer_quota",
            "location": 23,
            "return": [],
            "arguments": {
                "max_fraction": [],
                "used": [],
                "limit": [],
                "accept": []
            }
        },
        "test_max_fraction_consumer_quota_match": {
            "name": "test_max_fraction_consumer_quota_match",
            "location": 44,
            "return": [],
            "arguments": {
                "max_fraction": [],
                "used": [],
                "limit": [],
                "accept": []
            }
        },
        "test_max_fraction_consumer_quota_not_match": {
            "name": "test_max_fraction_consumer_quota_not_match",
            "location": 61,
            "return": [],
            "arguments": {
                "max_fraction": [],
                "used": [],
                "limit": [],
                "accept": []
            }
        }
    },
    "aio-throttle-master/tests/test_throttle_capacity_and_queue_limit.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "throttler": []
            }
        }
    },
    "aio-throttle-master/tests/test_throttle_consumer_quota.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "throttler": []
            }
        }
    },
    "aio-throttle-master/tests/test_throttle_priority_quota.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "throttler": []
            }
        }
    },
    "aio-throttle-master/tests/test_throttle_quota.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "throttler": []
            }
        }
    },
    "aio-throttle-master/tests/test_version.py": {
        "test_alpha": {
            "name": "test_alpha",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_beta": {
            "name": "test_beta",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rc": {
            "name": "test_rc",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final": {
            "name": "test_final",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
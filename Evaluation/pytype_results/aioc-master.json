{
    "aioc-master/setup.py": {
        "read": {
            "name": "read",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "f": []
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "aioc-master/aioc/awareness.py": {
        "Awareness.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max": [
                    "int"
                ]
            }
        },
        "Awareness.apply_delta": {
            "name": "apply_delta",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int"
                ]
            }
        },
        "Awareness.health_score": {
            "name": "health_score",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Awareness.scale_timeout": {
            "name": "scale_timeout",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        }
    },
    "aioc-master/aioc/cluster.py": {
        "Cluster.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "loop": []
            }
        },
        "Cluster.local_node": {
            "name": "local_node",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.local_node_meta": {
            "name": "local_node_meta",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.listener": {
            "name": "listener",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.members": {
            "name": "members",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.num_meber": {
            "name": "num_meber",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.get_health_score": {
            "name": "get_health_score",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.handle": {
            "name": "handle",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_message": [],
                "addr": [],
                "protocol": []
            }
        },
        "Cluster.handle_udp_message": {
            "name": "handle_udp_message",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_ping": {
            "name": "handle_ping",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Cluster.handle_indirect_ping": {
            "name": "handle_indirect_ping",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_ack": {
            "name": "handle_ack",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_nack": {
            "name": "handle_nack",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_alive": {
            "name": "handle_alive",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_suspect": {
            "name": "handle_suspect",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.handle_dead": {
            "name": "handle_dead",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "udp_cm": []
            }
        },
        "Cluster.__str__": {
            "name": "__str__",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.__repr__": {
            "name": "__repr__",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventListener.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "EventListener.notify": {
            "name": "notify",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [],
                "node": []
            }
        },
        "EventListener.add_handler": {
            "name": "add_handler",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        }
    },
    "aioc-master/aioc/config.py": {
        "Config.with_replace": {
            "name": "with_replace",
            "location": 21,
            "return": [
                "_TConfig"
            ],
            "arguments": {
                "self": [
                    "_TConfig"
                ]
            }
        }
    },
    "aioc-master/aioc/dissemination_queue.py": {
        "retransmit_limit": {
            "name": "retransmit_limit",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "retransmit_mult": [
                    "int"
                ],
                "num_nodes": [
                    "int"
                ]
            }
        },
        "DisseminationQueue.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlist": [],
                "retransmit_mult": []
            }
        },
        "DisseminationQueue.put": {
            "name": "put",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "waiter": []
            }
        },
        "DisseminationQueue._invalidates": {
            "name": "_invalidates",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "DisseminationQueue.get_update_up_to": {
            "name": "get_update_up_to",
            "location": 26,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "bytes_available": []
            }
        }
    },
    "aioc-master/aioc/failure_detector.py": {
        "FailureDetector.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlist": [],
                "udp_server": [],
                "gossiper": [],
                "lclock": [],
                "loop": []
            }
        },
        "FailureDetector.on_ping": {
            "name": "on_ping",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "aioc.state.Ping"
                ]
            }
        },
        "FailureDetector.on_ping_request": {
            "name": "on_ping_request",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "addr": []
            }
        },
        "FailureDetector.on_ack": {
            "name": "on_ack",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "FailureDetector.on_nack": {
            "name": "on_nack",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "addr": []
            }
        },
        "FailureDetector.probe.filter_func": {
            "name": "filter_func",
            "location": 20,
            "return": [],
            "arguments": {
                "node_meta": []
            }
        }
    },
    "aioc-master/aioc/gossiper.py": {
        "set_waiter": {
            "name": "set_waiter",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": []
            }
        },
        "Gossiper.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlist": [],
                "listener": [],
                "lclock": []
            }
        },
        "Gossiper.queue": {
            "name": "queue",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gossiper.alive": {
            "name": "alive",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "waiter": []
            }
        },
        "Gossiper.dead": {
            "name": "dead",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "waiter": []
            }
        },
        "Gossiper.suspect": {
            "name": "suspect",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "aioc.state.Suspect"
                ],
                "waiter": []
            }
        },
        "Gossiper.merge": {
            "name": "merge",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Gossiper.refute": {
            "name": "refute",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "aioc-master/aioc/mlist.py": {
        "MList.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "seed": []
            }
        },
        "MList.config": {
            "name": "config",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MList.num_nodes": {
            "name": "num_nodes",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MList.local_node": {
            "name": "local_node",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MList.local_node_meta": {
            "name": "local_node_meta",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MList.nodes": {
            "name": "nodes",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MList.kselect": {
            "name": "kselect",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "filter_func": []
            }
        },
        "MList.node_meta": {
            "name": "node_meta",
            "location": 61,
            "return": [
                "Optional[aioc.state.NodeMeta]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MList.update_node": {
            "name": "update_node",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_meta": []
            }
        },
        "MList.select_gossip_nodes": {
            "name": "select_gossip_nodes",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MList.select_gossip_nodes.filter_func": {
            "name": "filter_func",
            "location": 70,
            "return": [],
            "arguments": {
                "node_meta": []
            }
        }
    },
    "aioc-master/aioc/net.py": {
        "UDPConnectionManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": []
            }
        },
        "UDPConnectionManager.send_message": {
            "name": "send_message",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "UDPConnectionManager.send_raw_message": {
            "name": "send_raw_message",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "raw": []
            }
        },
        "UDPConnectionManager.set_handler": {
            "name": "set_handler",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "UDPServerProtocol.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "UDPServerProtocol.connection_made": {
            "name": "connection_made",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "UDPServerProtocol.set_handler": {
            "name": "set_handler",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "UDPServerProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "UDPServerProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "UDPServerProtocol.sendto": {
            "name": "sendto",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "UDPServerProtocol.close": {
            "name": "close",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioc-master/aioc/pusher.py": {
        "Pusher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlist": [],
                "gossiper": [],
                "tcp": [],
                "loop": []
            }
        },
        "Pusher.push_pull.f": {
            "name": "f",
            "location": 35,
            "return": [],
            "arguments": {
                "meta": []
            }
        }
    },
    "aioc-master/aioc/state.py": {
        "decode_message": {
            "name": "decode_message",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "raw_payload": [
                    "bytes"
                ]
            }
        },
        "decode_messages": {
            "name": "decode_messages",
            "location": 122,
            "return": [
                "list"
            ],
            "arguments": {
                "raw_payload": [
                    "bytes"
                ]
            }
        },
        "encode_message": {
            "name": "encode_message",
            "location": 131,
            "return": [
                "bytes"
            ],
            "arguments": {
                "message": []
            }
        },
        "add_msg_size": {
            "name": "add_msg_size",
            "location": 168,
            "return": [
                "bytes"
            ],
            "arguments": {
                "raw_payload": [
                    "bytes"
                ]
            }
        },
        "decode_msg_size": {
            "name": "decode_msg_size",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "raw_payload": [
                    "bytes"
                ]
            }
        },
        "encode_messages": {
            "name": "encode_messages",
            "location": 181,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "make_compaund": {
            "name": "make_compaund",
            "location": 185,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "decode_compaund": {
            "name": "decode_compaund",
            "location": 193,
            "return": [
                "list"
            ],
            "arguments": {
                "raw": []
            }
        }
    },
    "aioc-master/aioc/suspicion.py": {
        "create_timer": {
            "name": "create_timer",
            "location": 102,
            "return": [
                "Timer"
            ],
            "arguments": {
                "timeout": [
                    "float"
                ],
                "callback": [
                    "Callable"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "suspicion_timeout": {
            "name": "suspicion_timeout",
            "location": 106,
            "return": [
                "float"
            ],
            "arguments": {
                "suspicion_mult": [
                    "float"
                ],
                "n": [
                    "int"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "Suspicion.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "aioc.state.Node"
                ],
                "k": [
                    "int"
                ],
                "min_time": [
                    "float"
                ],
                "max_time": [
                    "float"
                ],
                "fn": [
                    "Callable"
                ]
            }
        },
        "Suspicion.remaining_suspicion_time": {
            "name": "remaining_suspicion_time",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "elapsed": []
            }
        },
        "Suspicion.confirm": {
            "name": "confirm",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "aioc.state.Node"
                ]
            }
        },
        "Suspicion.check_timeout": {
            "name": "check_timeout",
            "location": 78,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suspicion.stop": {
            "name": "stop",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ],
                "callback": [
                    "Callable"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "Timer.reschedule": {
            "name": "reschedule",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Timer.cancel": {
            "name": "cancel",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioc-master/aioc/tcp.py": {
        "TCPConnectionManager.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPConnectionManager.set_handler": {
            "name": "set_handler",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hander": []
            }
        }
    },
    "aioc-master/aioc/utils.py": {
        "create_ticker": {
            "name": "create_ticker",
            "location": 53,
            "return": [
                "Ticker"
            ],
            "arguments": {
                "corofunc": [],
                "interval": [
                    "float"
                ],
                "loop": []
            }
        },
        "simple_timeout": {
            "name": "simple_timeout",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "interval": [
                    "float"
                ],
                "tick_start": [
                    "float"
                ],
                "tick_stop": [
                    "float"
                ]
            }
        },
        "create_timer": {
            "name": "create_timer",
            "location": 107,
            "return": [
                "Timer"
            ],
            "arguments": {
                "timeout": [],
                "callback": [],
                "loop": []
            }
        },
        "Ticker.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corofunc": [],
                "interval": [],
                "timeout_func": [],
                "loop": [
                    "Optional[asyncio.events.AbstractEventLoop]"
                ]
            }
        },
        "Ticker.closed": {
            "name": "closed",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ticker.start": {
            "name": "start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LClock.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incarantion": [
                    "int"
                ],
                "sequence_num": [
                    "int"
                ]
            }
        },
        "LClock.incarnation": {
            "name": "incarnation",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LClock.sequence_num": {
            "name": "sequence_num",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LClock.next_incarnation": {
            "name": "next_incarnation",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LClock.skip_incarnation": {
            "name": "skip_incarnation",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "LClock.next_sequence_num": {
            "name": "next_sequence_num",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "callback": [],
                "loop": []
            }
        },
        "Timer.reschedule": {
            "name": "reschedule",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Timer.cancel": {
            "name": "cancel",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioc-master/aioc/__init__.py": {},
    "aioc-master/tests/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 6,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "config": {
            "name": "config",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "aioc-master/tests/test_cluster.py": {
        "udp_client": {
            "name": "udp_client",
            "location": 32,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "ClientUdpProtocol.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "ClientUdpProtocol.connection_made": {
            "name": "connection_made",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "ClientUdpProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "ClientUdpProtocol.error_received": {
            "name": "error_received",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "ClientUdpProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "ClientUdpProtocol.sentdto": {
            "name": "sentdto",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "udp_client.protocol_factory": {
            "name": "protocol_factory",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "aioc-master/tests/test_mlist.py": {
        "test_basic_mlist_ctor": {
            "name": "test_basic_mlist_ctor",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "test_mutiple_nodes": {
            "name": "test_mutiple_nodes",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "test_mutiple_nodes_kselect": {
            "name": "test_mutiple_nodes_kselect",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "test_mutiple_nodes_kselect.filter_func": {
            "name": "filter_func",
            "location": 49,
            "return": [],
            "arguments": {
                "node_meta": []
            }
        }
    },
    "aioc-master/tests/test_queue.py": {
        "mlist": {
            "name": "mlist",
            "location": 9,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mlist": [],
                "config": []
            }
        },
        "test_retransmit_limit": {
            "name": "test_retransmit_limit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aioc-master/tests/test_serialization.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compaund": {
            "name": "test_compaund",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aioc-master/tests/test_suspicion.py": {
        "make_callable": {
            "name": "make_callable",
            "location": 38,
            "return": [
                "Tuple[(Any, Callable[([], Any)])]"
            ],
            "arguments": {
                "loop": []
            }
        },
        "test_suspicion_timeout_calculation.f": {
            "name": "f",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "make_callable.f": {
            "name": "f",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    }
}
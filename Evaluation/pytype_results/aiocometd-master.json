{
    "aiocometd-master/setup.py": {
        "read": {
            "name": "read",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": []
            }
        }
    },
    "aiocometd-master/aiocometd/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "connection_types": [
                    "Optional[Union[(aiocometd.constants.ConnectionType, List[aiocometd.constants.ConnectionType])]]"
                ]
            }
        },
        "Client.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.closed": {
            "name": "closed",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.subscriptions": {
            "name": "subscriptions",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.connection_type": {
            "name": "connection_type",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.pending_count": {
            "name": "pending_count",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.has_pending_messages": {
            "name": "has_pending_messages",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._pick_connection_type": {
            "name": "_pick_connection_type",
            "location": 166,
            "return": [
                "Optional[aiocometd.constants.ConnectionType]"
            ],
            "arguments": {
                "self": [],
                "connection_types": [
                    "List[str]"
                ]
            }
        },
        "Client._verify_response": {
            "name": "_verify_response",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Client._raise_server_error": {
            "name": "_raise_server_error",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "aiocometd-master/aiocometd/constants.py": {},
    "aiocometd-master/aiocometd/exceptions.py": {
        "ServerError.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "response": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "ServerError.message": {
            "name": "message",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.response": {
            "name": "response",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.error": {
            "name": "error",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.error_code": {
            "name": "error_code",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.error_message": {
            "name": "error_message",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.error_args": {
            "name": "error_args",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/aiocometd/extensions.py": {},
    "aiocometd-master/aiocometd/typing.py": {},
    "aiocometd-master/aiocometd/utils.py": {
        "defer": {
            "name": "defer",
            "location": 12,
            "return": [
                "Callable[(..., Awaitable)]"
            ],
            "arguments": {
                "coro_func": [
                    "Callable[(..., Awaitable)]"
                ],
                "delay": [
                    "Optional[float]"
                ]
            }
        },
        "get_error_code": {
            "name": "get_error_code",
            "location": 32,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "error_field": [
                    "Optional[str]"
                ]
            }
        },
        "get_error_message": {
            "name": "get_error_message",
            "location": 52,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "error_field": [
                    "Optional[str]"
                ]
            }
        },
        "get_error_args": {
            "name": "get_error_args",
            "location": 71,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "error_field": [
                    "Optional[str]"
                ]
            }
        },
        "is_matching_response": {
            "name": "is_matching_response",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_message": [
                    "Dict[(str, Any)]"
                ],
                "message": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "is_server_error_message": {
            "name": "is_server_error_message",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_message": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "is_event_message": {
            "name": "is_event_message",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_message": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "is_auth_error_message": {
            "name": "is_auth_error_message",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_message": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "aiocometd-master/aiocometd/_metadata.py": {},
    "aiocometd-master/aiocometd/__init__.py": {},
    "aiocometd-master/aiocometd/transports/abc.py": {
        "Transport.connection_type": {
            "name": "connection_type",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.endpoint": {
            "name": "endpoint",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.client_id": {
            "name": "client_id",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.state": {
            "name": "state",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.subscriptions": {
            "name": "subscriptions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.last_connect_result": {
            "name": "last_connect_result",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.reconnect_advice": {
            "name": "reconnect_advice",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transport.http_session": {
            "name": "http_session",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "http_session": []
            }
        }
    },
    "aiocometd-master/aiocometd/transports/base.py": {
        "TransportBase.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.connection_type": {
            "name": "connection_type",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.endpoint": {
            "name": "endpoint",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.client_id": {
            "name": "client_id",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.subscriptions": {
            "name": "subscriptions",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.last_connect_result": {
            "name": "last_connect_result",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.reconnect_advice": {
            "name": "reconnect_advice",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase.http_session": {
            "name": "http_session",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "http_session": []
            }
        },
        "TransportBase.state": {
            "name": "state",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase._state": {
            "name": "_state",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TransportBase.request_timeout": {
            "name": "request_timeout",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransportBase._set_state_event": {
            "name": "_set_state_event",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_state": [
                    "aiocometd.constants.TransportState"
                ],
                "new_state": [
                    "aiocometd.constants.TransportState"
                ]
            }
        },
        "TransportBase._finalize_message": {
            "name": "_finalize_message",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "TransportBase._finalize_payload": {
            "name": "_finalize_payload",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        },
        "TransportBase._update_subscriptions": {
            "name": "_update_subscriptions",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_message": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "TransportBase._start_connect_task": {
            "name": "_start_connect_task",
            "location": 463,
            "return": [
                "Awaitable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Awaitable[Dict[(str, Any)]]"
                ]
            }
        },
        "TransportBase._connect_done": {
            "name": "_connect_done",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "asyncio.futures.Future[Dict[(str, Any)]]"
                ]
            }
        },
        "TransportBase._follow_advice": {
            "name": "_follow_advice",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reconnect_advice": [
                    "str"
                ],
                "reconnect_timeout": [
                    "Optional[float]"
                ]
            }
        }
    },
    "aiocometd-master/aiocometd/transports/long_polling.py": {
        "LongPollingTransport.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/aiocometd/transports/registry.py": {
        "register_transport": {
            "name": "register_transport",
            "location": 12,
            "return": [
                "Callable[([Type[aiocometd.transports.abc.Transport]], Type[aiocometd.transports.abc.Transport])]"
            ],
            "arguments": {
                "conn_type": [
                    "aiocometd.constants.ConnectionType"
                ]
            }
        },
        "create_transport": {
            "name": "create_transport",
            "location": 34,
            "return": [
                "aiocometd.transports.abc.Transport"
            ],
            "arguments": {
                "connection_type": [
                    "aiocometd.constants.ConnectionType"
                ]
            }
        },
        "register_transport.decorator": {
            "name": "decorator",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "register_transport.decorator.connection_type": {
            "name": "connection_type",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/aiocometd/transports/websocket.py": {
        "WebSocketFactory.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_factory": [
                    "Callable[([], Awaitable)]"
                ]
            }
        },
        "WebSocketTransport.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketTransport._create_exhange_future": {
            "name": "_create_exhange_future",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "WebSocketTransport._set_exchange_results": {
            "name": "_set_exchange_results",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "response_payload": []
            }
        },
        "WebSocketTransport._set_exchange_errors": {
            "name": "_set_exchange_errors",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "WebSocketTransport._start_receive_task": {
            "name": "_start_receive_task",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "socket": []
            }
        },
        "WebSocketTransport._receive_done": {
            "name": "_receive_done",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "future": []
            }
        }
    },
    "aiocometd-master/aiocometd/transports/__init__.py": {},
    "aiocometd-master/docs/source/conf.py": {
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": []
            }
        }
    },
    "aiocometd-master/examples/chat.py": {
        "get_arguments": {
            "name": "get_arguments",
            "location": 115,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiocometd-master/examples/__init__.py": {},
    "aiocometd-master/tests/__init__.py": {},
    "aiocometd-master/tests/integration/helpers.py": {
        "DockerContainer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_name": [],
                "name": [],
                "container_port": [],
                "host_port": []
            }
        },
        "DockerContainer._ensure_exists": {
            "name": "_ensure_exists",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer._wait_for_state": {
            "name": "_wait_for_state",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DockerContainer._ensure_running": {
            "name": "_ensure_running",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer._get_url": {
            "name": "_get_url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.ensure_reachable": {
            "name": "ensure_reachable",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.stop": {
            "name": "stop",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainer.pause": {
            "name": "pause",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/integration/test_client.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 304,
            "return": [
                "Any"
            ],
            "arguments": {
                "loader": [],
                "tests": [],
                "pattern": []
            }
        },
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "aiocometd-master/tests/integration/__init__.py": {},
    "aiocometd-master/tests/unit/test_client.py": {
        "TestClient.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_with_loop": {
            "name": "test_init_with_loop",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_without_loop": {
            "name": "test_init_without_loop",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mock": []
            }
        },
        "TestClient.test_init_with_no_connection_types": {
            "name": "test_init_with_no_connection_types",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_with_connection_types_list": {
            "name": "test_init_with_connection_types_list",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_init_with_connection_type_value": {
            "name": "test_init_with_connection_type_value",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_subscriptions": {
            "name": "test_subscriptions",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_subscriptions_emtpy_on_none_transport": {
            "name": "test_subscriptions_emtpy_on_none_transport",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_connection_type": {
            "name": "test_connection_type",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_connection_type_none_on_no_transport": {
            "name": "test_connection_type_none_on_no_transport",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_closed": {
            "name": "test_closed",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_closed_read_only": {
            "name": "test_closed_read_only",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_pick_connection_type": {
            "name": "test_pick_connection_type",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_pick_connection_type_without_overlap": {
            "name": "test_pick_connection_type_without_overlap",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_repr": {
            "name": "test_repr",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_verify_response_on_success": {
            "name": "test_verify_response_on_success",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_verify_response_on_error": {
            "name": "test_verify_response_on_error",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_verify_response_no_successful_status": {
            "name": "test_verify_response_no_successful_status",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_raise_server_error_meta": {
            "name": "test_raise_server_error_meta",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_raise_server_error_service": {
            "name": "test_raise_server_error_service",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_raise_server_error_publish": {
            "name": "test_raise_server_error_publish",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_exceptions.py": {
        "TestServerError.test_properties": {
            "name": "test_properties",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerError.test_properties_on_no_error": {
            "name": "test_properties_on_no_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerError.test_properties_on_no_response": {
            "name": "test_properties_on_no_response",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerError.test_error_code": {
            "name": "test_error_code",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "utils": []
            }
        },
        "TestServerError.test_error_message": {
            "name": "test_error_message",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "utils": []
            }
        },
        "TestServerError.test_error_args": {
            "name": "test_error_args",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "utils": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_utils.py": {
        "TestGetErrorCode.test_get_error_code": {
            "name": "test_get_error_code",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorCode.test_get_error_code_none_field": {
            "name": "test_get_error_code_none_field",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorCode.test_get_error_code_empty_field": {
            "name": "test_get_error_code_empty_field",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorCode.test_get_error_code_invalid_field": {
            "name": "test_get_error_code_invalid_field",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorCode.test_get_error_code_short_invalid_field": {
            "name": "test_get_error_code_short_invalid_field",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorCode.test_get_error_code_empty_code_field": {
            "name": "test_get_error_code_empty_code_field",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorMessage.test_get_error_message": {
            "name": "test_get_error_message",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorMessage.test_get_error_message_none_field": {
            "name": "test_get_error_message_none_field",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorMessage.test_get_error_message_empty_field": {
            "name": "test_get_error_message_empty_field",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorMessage.test_get_error_message_invalid_field": {
            "name": "test_get_error_message_invalid_field",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorMessage.test_get_error_message_empty_code_field": {
            "name": "test_get_error_message_empty_code_field",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorArgs.test_get_error_args": {
            "name": "test_get_error_args",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorArgs.test_get_error_args_none_field": {
            "name": "test_get_error_args_none_field",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorArgs.test_get_error_args_empty_field": {
            "name": "test_get_error_args_empty_field",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorArgs.test_get_error_args_invalid_field": {
            "name": "test_get_error_args_invalid_field",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetErrorArgs.test_get_error_args_empty_code_field": {
            "name": "test_get_error_args_empty_code_field",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefer.setUp": {
            "name": "setUp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAuthErrorMessage.test_is_auth_error_message": {
            "name": "test_is_auth_error_message",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "get_error_code": []
            }
        },
        "TestIsAuthErrorMessage.test_is_auth_error_message_forbidden": {
            "name": "test_is_auth_error_message_forbidden",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "get_error_code": []
            }
        },
        "TestIsAuthErrorMessage.test_is_auth_error_message_not_an_auth_error": {
            "name": "test_is_auth_error_message_not_an_auth_error",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "get_error_code": []
            }
        },
        "TestIsAuthErrorMessage.test_is_auth_error_message_not_an_error": {
            "name": "test_is_auth_error_message_not_an_error",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "get_error_code": []
            }
        },
        "TestIsEventMessage.assert_event_message_for_channel": {
            "name": "assert_event_message_for_channel",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "has_data": [],
                "has_id": [],
                "expected_result": []
            }
        },
        "TestIsEventMessage.test_is_event_message_subscribe": {
            "name": "test_is_event_message_subscribe",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_unsubscribe": {
            "name": "test_is_event_message_unsubscribe",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_non_meta_channel": {
            "name": "test_is_event_message_non_meta_channel",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_service_channel": {
            "name": "test_is_event_message_service_channel",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_handshake": {
            "name": "test_is_event_message_handshake",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_connect": {
            "name": "test_is_event_message_connect",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsEventMessage.test_is_event_message_disconnect": {
            "name": "test_is_event_message_disconnect",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsServerErrorMessage.test_successful": {
            "name": "test_successful",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsServerErrorMessage.test_not_successful": {
            "name": "test_not_successful",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsServerErrorMessage.test_no_success_status": {
            "name": "test_no_success_status",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response": {
            "name": "test_is_matching_response",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_response_none": {
            "name": "test_is_matching_response_response_none",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_message_none": {
            "name": "test_is_matching_response_message_none",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_without_id": {
            "name": "test_is_matching_response_without_id",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_different_id": {
            "name": "test_is_matching_response_different_id",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_different_channel": {
            "name": "test_is_matching_response_different_channel",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMatchingResponse.test_is_matching_response_without_successful_field": {
            "name": "test_is_matching_response_without_successful_field",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/__init__.py": {},
    "aiocometd-master/tests/unit/test_transports/test_base.py": {
        "TransportBaseImpl.connection_type": {
            "name": "connection_type",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_init_with_loop": {
            "name": "test_init_with_loop",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_init_without_loop": {
            "name": "test_init_without_loop",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mock": []
            }
        },
        "TestTransportBase.test_init_with_reconnect_advice": {
            "name": "test_init_with_reconnect_advice",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_init_without_reconnect_advice": {
            "name": "test_init_without_reconnect_advice",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_finalize_message_updates_fields": {
            "name": "test_finalize_message_updates_fields",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_finalize_message_ignores_non_existing_fields": {
            "name": "test_finalize_message_ignores_non_existing_fields",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_finalize_payload_single_message": {
            "name": "test_finalize_payload_single_message",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_finalize_payload_multiple_messages": {
            "name": "test_finalize_payload_multiple_messages",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_new_subscription_success": {
            "name": "test_update_subscriptions_new_subscription_success",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_existing_subscription_success": {
            "name": "test_update_subscriptions_existing_subscription_success",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_new_subscription_fail": {
            "name": "test_update_subscriptions_new_subscription_fail",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_new_subscription_fail_with_error": {
            "name": "test_update_subscriptions_new_subscription_fail_with_error",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_existing_subscription_fail": {
            "name": "test_update_subscriptions_existing_subscription_fail",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_new_unsubscription_success": {
            "name": "test_update_subscriptions_new_unsubscription_success",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_existing_unsubscription_success": {
            "name": "test_update_subscriptions_existing_unsubscription_success",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_new_unsubscription_fail": {
            "name": "test_update_subscriptions_new_unsubscription_fail",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_update_subscriptions_existing_unsubscription_fail": {
            "name": "test_update_subscriptions_existing_unsubscription_fail",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_subscriptions": {
            "name": "test_subscriptions",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_subscriptions_read_only": {
            "name": "test_subscriptions_read_only",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test__state_initially_disconnected": {
            "name": "test__state_initially_disconnected",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_state": {
            "name": "test_state",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_state_read_only": {
            "name": "test_state_read_only",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_follow_advice_handshake": {
            "name": "test_follow_advice_handshake",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "defer": []
            }
        },
        "TestTransportBase.test_follow_advice_retry": {
            "name": "test_follow_advice_retry",
            "location": 892,
            "return": [],
            "arguments": {
                "self": [],
                "defer": []
            }
        },
        "TestTransportBase.test_follow_advice_none": {
            "name": "test_follow_advice_none",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "defer": []
            }
        },
        "TestTransportBase.test_client_id": {
            "name": "test_client_id",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_client_id_read_only": {
            "name": "test_client_id_read_only",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_endpoint": {
            "name": "test_endpoint",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_endpoint_read_only": {
            "name": "test_endpoint_read_only",
            "location": 952,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_http_session": {
            "name": "test_http_session",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_http_session_setter": {
            "name": "test_http_session_setter",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_state_sunder": {
            "name": "test_state_sunder",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_state_sunder_setter": {
            "name": "test_state_sunder_setter",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_set_state_event": {
            "name": "test_set_state_event",
            "location": 1232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_set_state_event_unchanged_state": {
            "name": "test_set_state_event_unchanged_state",
            "location": 1243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_last_connect_result": {
            "name": "test_last_connect_result",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_last_connect_result_on_no_connect_task": {
            "name": "test_last_connect_result_on_no_connect_task",
            "location": 1262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_request_timeout_int": {
            "name": "test_request_timeout_int",
            "location": 1269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_request_timeout_float": {
            "name": "test_request_timeout_float",
            "location": 1278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_request_timeout_none": {
            "name": "test_request_timeout_none",
            "location": 1287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportBase.test_request_timeout_none_on_unsupported_timeout_type": {
            "name": "test_request_timeout_none_on_unsupported_timeout_type",
            "location": 1292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_transports/test_long_polling.py": {
        "TestLongPollingTransport.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongPollingTransport.test_connection_type": {
            "name": "test_connection_type",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_transports/test_registry.py": {
        "TestTransportFactoryFunctions.tearDown": {
            "name": "tearDown",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportFactoryFunctions.test_register_transport": {
            "name": "test_register_transport",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportFactoryFunctions.test_create_transport": {
            "name": "test_create_transport",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransportFactoryFunctions.test_create_transport_error": {
            "name": "test_create_transport_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_transports/test_websocket.py": {
        "TestWebSocketFactory.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_connection_type": {
            "name": "test_connection_type",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_start_receive_task_if_doesnt_exists": {
            "name": "test_start_receive_task_if_doesnt_exists",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_start_receive_task_if_exists": {
            "name": "test_start_receive_task_if_exists",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_set_exchange_errors": {
            "name": "test_set_exchange_errors",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_set_exchange_errors_skips_completed_futures": {
            "name": "test_set_exchange_errors_skips_completed_futures",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketTransport.test_set_exchange_results": {
            "name": "test_set_exchange_results",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiocometd-master/tests/unit/test_transports/__init__.py": {}
}
{
    "aioevents-master/setup.py": {},
    "aioevents-master/aioevents/__init__.py": {
        "start": {
            "name": "start",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        },
        "stop": {
            "name": "stop",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_Task.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "retry": []
            }
        },
        "_Task.can_retry": {
            "name": "can_retry",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Task.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "_Manager.register": {
            "name": "register",
            "location": 66,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "events": [],
                "retry": []
            }
        },
        "_Manager.clear": {
            "name": "clear",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "_Manager.get": {
            "name": "get",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "_Worker.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [],
                "queue": [],
                "loop": []
            }
        },
        "_Worker.queue": {
            "name": "queue",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Worker.loop": {
            "name": "loop",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Worker.run": {
            "name": "run",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Worker.stop": {
            "name": "stop",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Worker.set_main_event_loop": {
            "name": "set_main_event_loop",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "_Events.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "_Manager.register.deco": {
            "name": "deco",
            "location": 79,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_Worker._do.future_done": {
            "name": "future_done",
            "location": 190,
            "return": [],
            "arguments": {
                "future": []
            }
        },
        "_Manager.register.deco.wrapper": {
            "name": "wrapper",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "aioevents-master/examples/main.py": {},
    "aioevents-master/tests/test_aioevents.py": {
        "manager": {
            "name": "manager",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "new_loop": {
            "name": "new_loop",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "queue": {
            "name": "queue",
            "location": 33,
            "return": [],
            "arguments": {
                "new_loop": []
            }
        },
        "worker": {
            "name": "worker",
            "location": 38,
            "return": [],
            "arguments": {
                "manager": [],
                "event_loop": [],
                "new_loop": [],
                "queue": []
            }
        },
        "events": {
            "name": "events",
            "location": 45,
            "return": [],
            "arguments": {
                "worker": []
            }
        },
        "TestManager.test_register_should_bind_event_to_handler": {
            "name": "test_register_should_bind_event_to_handler",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestManager.test_register_should_bind_events_to_handler": {
            "name": "test_register_should_bind_events_to_handler",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestManager.test_register_with_different_events": {
            "name": "test_register_with_different_events",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestManager.test_get_should_return_list_of_handlers": {
            "name": "test_get_should_return_list_of_handlers",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestManager.test_register_should_bind_event_to_handler.handler": {
            "name": "handler",
            "location": 55,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestManager.test_register_should_bind_events_to_handler.handler1": {
            "name": "handler1",
            "location": 71,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestManager.test_register_should_bind_events_to_handler.handler2": {
            "name": "handler2",
            "location": 74,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestManager.test_register_with_different_events.handler1": {
            "name": "handler1",
            "location": 94,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestManager.test_register_with_different_events.handler2": {
            "name": "handler2",
            "location": 97,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestManager.test_get_should_return_list_of_handlers.handler": {
            "name": "handler",
            "location": 122,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "TestWorker.test_should_call_handler_with_consumed_event_in_another_loop.handler": {
            "name": "handler",
            "location": 150,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    }
}
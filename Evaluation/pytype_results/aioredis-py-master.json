{
    "aioredis-py-master/setup.py": {
        "read": {
            "name": "read",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_version": {
            "name": "read_version",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "aioredis-py-master/test.py": {},
    "aioredis-py-master/aioredis/client.py": {
        "list_or_args": {
            "name": "list_or_args",
            "location": 88,
            "return": [
                "List[Union[(_ArgT, _KeyT)]]"
            ],
            "arguments": {
                "keys": [
                    "Union[(Iterable[_KeyT], _KeyT)]"
                ],
                "args": [
                    "Optional[Iterable[_ArgT]]"
                ]
            }
        },
        "timestamp_to_datetime": {
            "name": "timestamp_to_datetime",
            "location": 109,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "response": []
            }
        },
        "string_keys_to_dict": {
            "name": "string_keys_to_dict",
            "location": 120,
            "return": [
                "Dict[(Any, _T1)]"
            ],
            "arguments": {
                "key_string": [],
                "callback": [
                    "_T1"
                ]
            }
        },
        "parse_debug_object": {
            "name": "parse_debug_object",
            "location": 151,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_object": {
            "name": "parse_object",
            "location": 169,
            "return": [
                "Optional[Union[(int, _T0)]]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ],
                "infotype": []
            }
        },
        "parse_info": {
            "name": "parse_info",
            "location": 176,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_memory_stats": {
            "name": "parse_memory_stats",
            "location": 220,
            "return": [
                "Dict[(nothing, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_sentinel_state": {
            "name": "parse_sentinel_state",
            "location": 258,
            "return": [
                "dict"
            ],
            "arguments": {
                "item": []
            }
        },
        "parse_sentinel_master": {
            "name": "parse_sentinel_master",
            "location": 274,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_sentinel_masters": {
            "name": "parse_sentinel_masters",
            "location": 278,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_sentinel_slaves_and_sentinels": {
            "name": "parse_sentinel_slaves_and_sentinels",
            "location": 286,
            "return": [
                "list"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_sentinel_get_master": {
            "name": "parse_sentinel_get_master",
            "location": 290,
            "return": [
                "Optional[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "response": []
            }
        },
        "pairs_to_dict": {
            "name": "pairs_to_dict",
            "location": 294,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": [],
                "decode_keys": [],
                "decode_string_values": []
            }
        },
        "pairs_to_dict_typed": {
            "name": "pairs_to_dict_typed",
            "location": 313,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": [],
                "type_info": []
            }
        },
        "zset_score_pairs": {
            "name": "zset_score_pairs",
            "location": 328,
            "return": [
                "Union[(List[Tuple[(Any, Any)]], _T0)]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ]
            }
        },
        "sort_return_tuples": {
            "name": "sort_return_tuples",
            "location": 340,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ]
            }
        },
        "int_or_none": {
            "name": "int_or_none",
            "location": 351,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_stream_list": {
            "name": "parse_stream_list",
            "location": 357,
            "return": [
                "Optional[List[Tuple[(Any, Optional[dict])]]]"
            ],
            "arguments": {
                "response": []
            }
        },
        "pairs_to_dict_with_str_keys": {
            "name": "pairs_to_dict_with_str_keys",
            "location": 369,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_list_of_dicts": {
            "name": "parse_list_of_dicts",
            "location": 373,
            "return": [
                "list"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_xclaim": {
            "name": "parse_xclaim",
            "location": 377,
            "return": [
                "Optional[Union[(List[Tuple[(Any, Optional[dict])]], _T0)]]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ]
            }
        },
        "parse_xinfo_stream": {
            "name": "parse_xinfo_stream",
            "location": 383,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_xread": {
            "name": "parse_xread",
            "location": 394,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_xpending": {
            "name": "parse_xpending",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_xpending_range": {
            "name": "parse_xpending_range",
            "location": 412,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "float_or_none": {
            "name": "float_or_none",
            "location": 417,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "response": []
            }
        },
        "bool_ok": {
            "name": "bool_ok",
            "location": 423,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_zadd": {
            "name": "parse_zadd",
            "location": 427,
            "return": [
                "Optional[Union[(float, int)]]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_client_list": {
            "name": "parse_client_list",
            "location": 435,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_config_get": {
            "name": "parse_config_get",
            "location": 443,
            "return": [
                "Dict[(None, None)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_scan": {
            "name": "parse_scan",
            "location": 448,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_hscan": {
            "name": "parse_hscan",
            "location": 453,
            "return": [
                "Tuple[(int, dict)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_zscan": {
            "name": "parse_zscan",
            "location": 458,
            "return": [
                "Tuple[(int, List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_slowlog_get": {
            "name": "parse_slowlog_get",
            "location": 465,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_cluster_info": {
            "name": "parse_cluster_info",
            "location": 485,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "_parse_node_line": {
            "name": "_parse_node_line",
            "location": 490,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "line": []
            }
        },
        "parse_cluster_nodes": {
            "name": "parse_cluster_nodes",
            "location": 507,
            "return": [
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_georadius_generic": {
            "name": "parse_georadius_generic",
            "location": 512,
            "return": [
                "Union[(List[Union[(list, _T0)]], _T0)]"
            ],
            "arguments": {
                "response": [
                    "_T0"
                ]
            }
        },
        "parse_pubsub_numsub": {
            "name": "parse_pubsub_numsub",
            "location": 540,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_client_kill": {
            "name": "parse_client_kill",
            "location": 544,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_acl_getuser": {
            "name": "parse_acl_getuser",
            "location": 550,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_acl_log": {
            "name": "parse_acl_log",
            "location": 574,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "parse_client_info": {
            "name": "parse_client_info",
            "location": 592,
            "return": [
                "dict"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_module_result": {
            "name": "parse_module_result",
            "location": 622,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CaseInsensitiveDict.__contains__": {
            "name": "__contains__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "CaseInsensitiveDict.get": {
            "name": "get",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "CaseInsensitiveDict.update": {
            "name": "update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "parse_info.get_value": {
            "name": "get_value",
            "location": 181,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ResponseCallbackProtocol.__call__": {
            "name": "__call__",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Redis.from_url": {
            "name": "from_url",
            "location": 790,
            "return": [
                "_TRedis"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TRedis]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "Redis.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.__repr__": {
            "name": "__repr__",
            "location": 923,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.__await__": {
            "name": "__await__",
            "location": 926,
            "return": [
                "Generator[(Any, None, Redis)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.set_response_callback": {
            "name": "set_response_callback",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "callback": [
                    "Union[(AsyncResponseCallbackProtocol, ResponseCallbackProtocol)]"
                ]
            }
        },
        "Redis.pipeline": {
            "name": "pipeline",
            "location": 938,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "bool"
                ],
                "shard_hint": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.lock": {
            "name": "lock",
            "location": 981,
            "return": [
                "aioredis.lock.Lock"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "timeout": [
                    "Optional[float]"
                ],
                "sleep": [
                    "float"
                ],
                "blocking_timeout": [
                    "Optional[float]"
                ],
                "lock_class": [
                    "Optional[builtins.type[aioredis.lock.Lock]]"
                ],
                "thread_local": []
            }
        },
        "Redis.pubsub": {
            "name": "pubsub",
            "location": 1044,
            "return": [
                "PubSub"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.monitor": {
            "name": "monitor",
            "location": 1052,
            "return": [
                "Monitor"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.client": {
            "name": "client",
            "location": 1055,
            "return": [
                "_TRedis"
            ],
            "arguments": {
                "self": [
                    "_TRedis"
                ]
            }
        },
        "Redis.__del__": {
            "name": "__del__",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_warnings": []
            }
        },
        "Redis.acl_cat": {
            "name": "acl_cat",
            "location": 1135,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.acl_deluser": {
            "name": "acl_deluser",
            "location": 1146,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Redis.acl_genpass": {
            "name": "acl_genpass",
            "location": 1150,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_getuser": {
            "name": "acl_getuser",
            "location": 1154,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Redis.acl_list": {
            "name": "acl_list",
            "location": 1162,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_log": {
            "name": "acl_log",
            "location": 1166,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.acl_log_reset": {
            "name": "acl_log_reset",
            "location": 1180,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_load": {
            "name": "acl_load",
            "location": 1188,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_save": {
            "name": "acl_save",
            "location": 1197,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_setuser": {
            "name": "acl_setuser",
            "location": 1206,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "enabled": [
                    "bool"
                ],
                "nopass": [
                    "bool"
                ],
                "passwords": [
                    "Optional[Union[(str, Iterable[str])]]"
                ],
                "hashed_passwords": [
                    "Optional[Union[(str, Iterable[str])]]"
                ],
                "categories": [
                    "Optional[Iterable[str]]"
                ],
                "commands": [
                    "Optional[Iterable[str]]"
                ],
                "keys": [
                    "Optional[Iterable[Union[(bytes, str)]]]"
                ],
                "reset": [
                    "bool"
                ],
                "reset_keys": [
                    "bool"
                ],
                "reset_passwords": [
                    "bool"
                ]
            }
        },
        "Redis.acl_users": {
            "name": "acl_users",
            "location": 1370,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.acl_whoami": {
            "name": "acl_whoami",
            "location": 1374,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.bgrewriteaof": {
            "name": "bgrewriteaof",
            "location": 1378,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.bgsave": {
            "name": "bgsave",
            "location": 1382,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.client_kill": {
            "name": "client_kill",
            "location": 1389,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "Redis.client_kill_filter": {
            "name": "client_kill_filter",
            "location": 1393,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "Optional[str]"
                ],
                "_type": [
                    "Optional[str]"
                ],
                "addr": [
                    "Optional[str]"
                ],
                "skipme": [
                    "bool"
                ]
            }
        },
        "Redis.client_list": {
            "name": "client_list",
            "location": 1434,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.client_getname": {
            "name": "client_getname",
            "location": 1449,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.client_id": {
            "name": "client_id",
            "location": 1453,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.client_setname": {
            "name": "client_setname",
            "location": 1457,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Redis.client_unblock": {
            "name": "client_unblock",
            "location": 1461,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "Redis.client_pause": {
            "name": "client_pause",
            "location": 1473,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "Redis.readwrite": {
            "name": "readwrite",
            "location": 1482,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.readonly": {
            "name": "readonly",
            "location": 1486,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.config_get": {
            "name": "config_get",
            "location": 1490,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "Redis.config_set": {
            "name": "config_set",
            "location": 1494,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.config_resetstat": {
            "name": "config_resetstat",
            "location": 1498,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.config_rewrite": {
            "name": "config_rewrite",
            "location": 1502,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.dbsize": {
            "name": "dbsize",
            "location": 1506,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.debug_object": {
            "name": "debug_object",
            "location": 1510,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.echo": {
            "name": "echo",
            "location": 1514,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.flushall": {
            "name": "flushall",
            "location": 1518,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "asynchronous": [
                    "bool"
                ]
            }
        },
        "Redis.flushdb": {
            "name": "flushdb",
            "location": 1530,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "asynchronous": [
                    "bool"
                ]
            }
        },
        "Redis.swapdb": {
            "name": "swapdb",
            "location": 1542,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "int"
                ],
                "second": [
                    "int"
                ]
            }
        },
        "Redis.info": {
            "name": "info",
            "location": 1546,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.lastsave": {
            "name": "lastsave",
            "location": 1561,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.migrate": {
            "name": "migrate",
            "location": 1568,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ],
                "destination_db": [
                    "int"
                ],
                "timeout": [
                    "int"
                ],
                "copy": [
                    "bool"
                ],
                "replace": [
                    "bool"
                ],
                "auth": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.object": {
            "name": "object",
            "location": 1613,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "infotype": [
                    "str"
                ],
                "key": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.memory_stats": {
            "name": "memory_stats",
            "location": 1617,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.memory_usage": {
            "name": "memory_usage",
            "location": 1621,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "samples": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.memory_purge": {
            "name": "memory_purge",
            "location": 1635,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.ping": {
            "name": "ping",
            "location": 1639,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.save": {
            "name": "save",
            "location": 1643,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.sentinel_get_master_addr_by_name": {
            "name": "sentinel_get_master_addr_by_name",
            "location": 1650,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "Redis.sentinel_master": {
            "name": "sentinel_master",
            "location": 1654,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "Redis.sentinel_masters": {
            "name": "sentinel_masters",
            "location": 1658,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.sentinel_monitor": {
            "name": "sentinel_monitor",
            "location": 1662,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "quorum": [
                    "int"
                ]
            }
        },
        "Redis.sentinel_remove": {
            "name": "sentinel_remove",
            "location": 1666,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Redis.sentinel_sentinels": {
            "name": "sentinel_sentinels",
            "location": 1670,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "Redis.sentinel_set": {
            "name": "sentinel_set",
            "location": 1674,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "option": [
                    "str"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.sentinel_slaves": {
            "name": "sentinel_slaves",
            "location": 1678,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "Redis.shutdown": {
            "name": "shutdown",
            "location": 1682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "bool"
                ],
                "nosave": [
                    "bool"
                ]
            }
        },
        "Redis.slaveof": {
            "name": "slaveof",
            "location": 1703,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Optional[str]"
                ],
                "port": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.slowlog_get": {
            "name": "slowlog_get",
            "location": 1715,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.slowlog_len": {
            "name": "slowlog_len",
            "location": 1728,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.slowlog_reset": {
            "name": "slowlog_reset",
            "location": 1732,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.time": {
            "name": "time",
            "location": 1736,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.wait": {
            "name": "wait",
            "location": 1743,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "num_replicas": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Redis.append": {
            "name": "append",
            "location": 1753,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.bitcount": {
            "name": "bitcount",
            "location": 1761,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "end": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.bitfield": {
            "name": "bitfield",
            "location": 1776,
            "return": [
                "BitFieldOperation"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "default_overflow": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.bitop": {
            "name": "bitop",
            "location": 1785,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ],
                "dest": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.bitpos": {
            "name": "bitpos",
            "location": 1792,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "bit": [
                    "int"
                ],
                "start": [
                    "Optional[int]"
                ],
                "end": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.decr": {
            "name": "decr",
            "location": 1817,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Redis.decrby": {
            "name": "decrby",
            "location": 1826,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Redis.delete": {
            "name": "delete",
            "location": 1833,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.dump": {
            "name": "dump",
            "location": 1837,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.exists": {
            "name": "exists",
            "location": 1844,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.expire": {
            "name": "expire",
            "location": 1848,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "time": [
                    "Union[(int, datetime.timedelta)]"
                ]
            }
        },
        "Redis.expireat": {
            "name": "expireat",
            "location": 1857,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "when": [
                    "Union[(int, datetime.datetime)]"
                ]
            }
        },
        "Redis.get": {
            "name": "get",
            "location": 1866,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.getbit": {
            "name": "getbit",
            "location": 1872,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Redis.getrange": {
            "name": "getrange",
            "location": 1876,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Redis.getset": {
            "name": "getset",
            "location": 1883,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.incr": {
            "name": "incr",
            "location": 1890,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Redis.incrby": {
            "name": "incrby",
            "location": 1897,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Redis.incrbyfloat": {
            "name": "incrbyfloat",
            "location": 1906,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "float"
                ]
            }
        },
        "Redis.keys": {
            "name": "keys",
            "location": 1913,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.mget": {
            "name": "mget",
            "location": 1917,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.mset": {
            "name": "mset",
            "location": 1927,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Mapping[(AnyKeyT, Union[(bytes, float, str)])]"
                ]
            }
        },
        "Redis.msetnx": {
            "name": "msetnx",
            "location": 1938,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Mapping[(AnyKeyT, Union[(bytes, float, str)])]"
                ]
            }
        },
        "Redis.move": {
            "name": "move",
            "location": 1950,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "db": [
                    "int"
                ]
            }
        },
        "Redis.persist": {
            "name": "persist",
            "location": 1954,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.pexpire": {
            "name": "pexpire",
            "location": 1958,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "time": [
                    "Union[(int, datetime.timedelta)]"
                ]
            }
        },
        "Redis.pexpireat": {
            "name": "pexpireat",
            "location": 1968,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "when": [
                    "Union[(int, datetime.datetime)]"
                ]
            }
        },
        "Redis.psetex": {
            "name": "psetex",
            "location": 1979,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "time_ms": [
                    "Union[(int, datetime.timedelta)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.pttl": {
            "name": "pttl",
            "location": 1989,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.randomkey": {
            "name": "randomkey",
            "location": 1993,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.rename": {
            "name": "rename",
            "location": 1997,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(bytes, str)]"
                ],
                "dst": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.renamenx": {
            "name": "renamenx",
            "location": 2003,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(bytes, str)]"
                ],
                "dst": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.restore": {
            "name": "restore",
            "location": 2007,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "ttl": [
                    "float"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ],
                "replace": [
                    "bool"
                ],
                "absttl": [
                    "bool"
                ]
            }
        },
        "Redis.set": {
            "name": "set",
            "location": 2033,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ],
                "ex": [
                    "Optional[Union[(int, datetime.timedelta)]]"
                ],
                "px": [
                    "Optional[Union[(int, datetime.timedelta)]]"
                ],
                "nx": [
                    "bool"
                ],
                "xx": [
                    "bool"
                ],
                "keepttl": [
                    "bool"
                ]
            }
        },
        "Redis.setbit": {
            "name": "setbit",
            "location": 2081,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "offset": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Redis.setex": {
            "name": "setex",
            "location": 2089,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "time": [
                    "Union[(int, datetime.timedelta)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.setnx": {
            "name": "setnx",
            "location": 2101,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.setrange": {
            "name": "setrange",
            "location": 2105,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "offset": [
                    "int"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.strlen": {
            "name": "strlen",
            "location": 2118,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.substr": {
            "name": "substr",
            "location": 2122,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Redis.touch": {
            "name": "touch",
            "location": 2129,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.ttl": {
            "name": "ttl",
            "location": 2136,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.type": {
            "name": "type",
            "location": 2140,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.unlink": {
            "name": "unlink",
            "location": 2144,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.blpop": {
            "name": "blpop",
            "location": 2149,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ],
                "timeout": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.brpop": {
            "name": "brpop",
            "location": 2162,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ],
                "timeout": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.brpoplpush": {
            "name": "brpoplpush",
            "location": 2175,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(bytes, str)]"
                ],
                "dst": [
                    "Union[(bytes, str)]"
                ],
                "timeout": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.lindex": {
            "name": "lindex",
            "location": 2186,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "Redis.linsert": {
            "name": "linsert",
            "location": 2195,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "where": [
                    "str"
                ],
                "refvalue": [
                    "Union[(bytes, float, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.llen": {
            "name": "llen",
            "location": 2207,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.lpop": {
            "name": "lpop",
            "location": 2211,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.lpush": {
            "name": "lpush",
            "location": 2215,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.lpushx": {
            "name": "lpushx",
            "location": 2219,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.lrange": {
            "name": "lrange",
            "location": 2223,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Redis.lrem": {
            "name": "lrem",
            "location": 2233,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "count": [
                    "int"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.lset": {
            "name": "lset",
            "location": 2245,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "index": [
                    "int"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.ltrim": {
            "name": "ltrim",
            "location": 2249,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Redis.rpop": {
            "name": "rpop",
            "location": 2259,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.rpoplpush": {
            "name": "rpoplpush",
            "location": 2263,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(bytes, str)]"
                ],
                "dst": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.rpush": {
            "name": "rpush",
            "location": 2270,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.rpushx": {
            "name": "rpushx",
            "location": 2274,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.lpos": {
            "name": "lpos",
            "location": 2278,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ],
                "rank": [
                    "Optional[int]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "maxlen": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.sort": {
            "name": "sort",
            "location": 2321,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "num": [
                    "Optional[int]"
                ],
                "by": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "get": [
                    "Optional[Union[(bytes, str, Sequence[Union[(bytes, str)]])]]"
                ],
                "desc": [
                    "bool"
                ],
                "alpha": [
                    "bool"
                ],
                "store": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "groups": [
                    "bool"
                ]
            }
        },
        "Redis.scan": {
            "name": "scan",
            "location": 2402,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int"
                ],
                "match": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "_type": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.sscan": {
            "name": "sscan",
            "location": 2460,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "cursor": [
                    "int"
                ],
                "match": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.hscan": {
            "name": "hscan",
            "location": 2501,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "cursor": [
                    "int"
                ],
                "match": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.zscan": {
            "name": "zscan",
            "location": 2542,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "cursor": [
                    "int"
                ],
                "match": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "score_cast_func": [
                    "Callable"
                ]
            }
        },
        "Redis.sadd": {
            "name": "sadd",
            "location": 2598,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.scard": {
            "name": "scard",
            "location": 2602,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.sdiff": {
            "name": "sdiff",
            "location": 2606,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.sdiffstore": {
            "name": "sdiffstore",
            "location": 2611,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.sinter": {
            "name": "sinter",
            "location": 2619,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.sinterstore": {
            "name": "sinterstore",
            "location": 2624,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.sismember": {
            "name": "sismember",
            "location": 2632,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.smembers": {
            "name": "smembers",
            "location": 2636,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.smove": {
            "name": "smove",
            "location": 2640,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Union[(bytes, str)]"
                ],
                "dst": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.spop": {
            "name": "spop",
            "location": 2644,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.srandmember": {
            "name": "srandmember",
            "location": 2649,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "number": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.srem": {
            "name": "srem",
            "location": 2660,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.sunion": {
            "name": "sunion",
            "location": 2664,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.sunionstore": {
            "name": "sunionstore",
            "location": 2669,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ]
            }
        },
        "Redis.xack": {
            "name": "xack",
            "location": 2678,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xadd": {
            "name": "xadd",
            "location": 2687,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "fields": [
                    "Dict[(Union[(bytes, float, str)], Union[(bytes, float, str)])]"
                ],
                "id": [
                    "Union[(bytes, int, str)]"
                ],
                "maxlen": [
                    "Optional[int]"
                ],
                "approximate": [
                    "bool"
                ]
            }
        },
        "Redis.xclaim": {
            "name": "xclaim",
            "location": 2719,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ],
                "consumername": [
                    "Union[(bytes, str)]"
                ],
                "min_idle_time": [
                    "int"
                ],
                "message_ids": [
                    "Union[(List[Union[(bytes, int, str)]], Tuple[Union[(bytes, int, str)]])]"
                ],
                "idle": [
                    "Optional[int]"
                ],
                "time": [
                    "Optional[int]"
                ],
                "retrycount": [
                    "Optional[int]"
                ],
                "force": [
                    "bool"
                ],
                "justid": [
                    "bool"
                ]
            }
        },
        "Redis.xdel": {
            "name": "xdel",
            "location": 2790,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xgroup_create": {
            "name": "xgroup_create",
            "location": 2798,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ],
                "id": [
                    "Union[(bytes, int, str)]"
                ],
                "mkstream": [
                    "bool"
                ]
            }
        },
        "Redis.xgroup_delconsumer": {
            "name": "xgroup_delconsumer",
            "location": 2812,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ],
                "consumername": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xgroup_destroy": {
            "name": "xgroup_destroy",
            "location": 2825,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xgroup_setid": {
            "name": "xgroup_setid",
            "location": 2833,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ],
                "id": [
                    "Union[(bytes, int, str)]"
                ]
            }
        },
        "Redis.xinfo_consumers": {
            "name": "xinfo_consumers",
            "location": 2842,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xinfo_groups": {
            "name": "xinfo_groups",
            "location": 2850,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xinfo_stream": {
            "name": "xinfo_stream",
            "location": 2857,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xlen": {
            "name": "xlen",
            "location": 2864,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xpending": {
            "name": "xpending",
            "location": 2870,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.xpending_range": {
            "name": "xpending_range",
            "location": 2878,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "groupname": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Optional[Union[(bytes, int, str)]]"
                ],
                "max": [
                    "Optional[Union[(bytes, int, str)]]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "consumername": [
                    "Optional[Union[(bytes, str)]]"
                ]
            }
        },
        "Redis.xrange": {
            "name": "xrange",
            "location": 2916,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(bytes, int, str)]"
                ],
                "max": [
                    "Union[(bytes, int, str)]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.xread": {
            "name": "xread",
            "location": 2942,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "streams": [
                    "Dict[(Union[(bytes, str)], Union[(bytes, int, str)])]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "block": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.xreadgroup": {
            "name": "xreadgroup",
            "location": 2975,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "consumername": [
                    "str"
                ],
                "streams": [
                    "Dict[(Union[(bytes, str)], Union[(bytes, int, str)])]"
                ],
                "count": [
                    "Optional[int]"
                ],
                "block": [
                    "Optional[int]"
                ],
                "noack": [
                    "bool"
                ]
            }
        },
        "Redis.xrevrange": {
            "name": "xrevrange",
            "location": 3015,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "max": [
                    "Union[(bytes, int, str)]"
                ],
                "min": [
                    "Union[(bytes, int, str)]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.xtrim": {
            "name": "xtrim",
            "location": 3041,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "maxlen": [
                    "int"
                ],
                "approximate": [
                    "bool"
                ]
            }
        },
        "Redis.zadd": {
            "name": "zadd",
            "location": 3055,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "mapping": [
                    "Mapping[(AnyKeyT, Union[(bytes, float, str)])]"
                ],
                "nx": [
                    "bool"
                ],
                "xx": [
                    "bool"
                ],
                "ch": [
                    "bool"
                ],
                "incr": [
                    "bool"
                ]
            }
        },
        "Redis.zcard": {
            "name": "zcard",
            "location": 3112,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.zcount": {
            "name": "zcount",
            "location": 3116,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(float, str)]"
                ],
                "max": [
                    "Union[(float, str)]"
                ]
            }
        },
        "Redis.zincrby": {
            "name": "zincrby",
            "location": 3123,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "amount": [
                    "float"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zinterstore": {
            "name": "zinterstore",
            "location": 3127,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(Mapping[(AnyKeyT, float)], Sequence[Union[(bytes, str)]])]"
                ],
                "aggregate": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.zlexcount": {
            "name": "zlexcount",
            "location": 3140,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(bytes, float, str)]"
                ],
                "max": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zpopmax": {
            "name": "zpopmax",
            "location": 3147,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.zpopmin": {
            "name": "zpopmin",
            "location": 3156,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "count": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.bzpopmax": {
            "name": "bzpopmax",
            "location": 3165,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ],
                "timeout": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.bzpopmin": {
            "name": "bzpopmin",
            "location": 3179,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Union[(bytes, str, Sequence[Union[(bytes, str)]])]"
                ],
                "timeout": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zrange": {
            "name": "zrange",
            "location": 3194,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "desc": [
                    "bool"
                ],
                "withscores": [
                    "bool"
                ],
                "score_cast_func": [
                    "Callable"
                ]
            }
        },
        "Redis.zrangebylex": {
            "name": "zrangebylex",
            "location": 3224,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(bytes, float, str)]"
                ],
                "max": [
                    "Union[(bytes, float, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "num": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.zrevrangebylex": {
            "name": "zrevrangebylex",
            "location": 3246,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "max": [
                    "Union[(bytes, float, str)]"
                ],
                "min": [
                    "Union[(bytes, float, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "num": [
                    "Optional[int]"
                ]
            }
        },
        "Redis.zrangebyscore": {
            "name": "zrangebyscore",
            "location": 3268,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(float, str)]"
                ],
                "max": [
                    "Union[(float, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "num": [
                    "Optional[int]"
                ],
                "withscores": [
                    "bool"
                ],
                "score_cast_func": [
                    "Callable"
                ]
            }
        },
        "Redis.zrank": {
            "name": "zrank",
            "location": 3300,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zrem": {
            "name": "zrem",
            "location": 3307,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.zremrangebylex": {
            "name": "zremrangebylex",
            "location": 3311,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(bytes, float, str)]"
                ],
                "max": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zremrangebyrank": {
            "name": "zremrangebyrank",
            "location": 3320,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "Redis.zremrangebyscore": {
            "name": "zremrangebyscore",
            "location": 3329,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(float, str)]"
                ],
                "max": [
                    "Union[(float, str)]"
                ]
            }
        },
        "Redis.zrevrange": {
            "name": "zrevrange",
            "location": 3338,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "withscores": [
                    "bool"
                ],
                "score_cast_func": [
                    "Callable"
                ]
            }
        },
        "Redis.zrevrangebyscore": {
            "name": "zrevrangebyscore",
            "location": 3363,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "min": [
                    "Union[(float, str)]"
                ],
                "max": [
                    "Union[(float, str)]"
                ],
                "start": [
                    "Optional[int]"
                ],
                "num": [
                    "Optional[int]"
                ],
                "withscores": [
                    "bool"
                ],
                "score_cast_func": [
                    "Callable"
                ]
            }
        },
        "Redis.zrevrank": {
            "name": "zrevrank",
            "location": 3395,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zscore": {
            "name": "zscore",
            "location": 3402,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.zunionstore": {
            "name": "zunionstore",
            "location": 3406,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(Mapping[(AnyKeyT, float)], Sequence[Union[(bytes, str)]])]"
                ],
                "aggregate": [
                    "Optional[str]"
                ]
            }
        },
        "Redis._zaggregate": {
            "name": "_zaggregate",
            "location": 3419,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "dest": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Union[(Mapping[(AnyKeyT, float)], Sequence[Union[(bytes, str)]])]"
                ],
                "aggregate": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.pfadd": {
            "name": "pfadd",
            "location": 3444,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.pfcount": {
            "name": "pfcount",
            "location": 3448,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.pfmerge": {
            "name": "pfmerge",
            "location": 3455,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hdel": {
            "name": "hdel",
            "location": 3460,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hexists": {
            "name": "hexists",
            "location": 3464,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.hget": {
            "name": "hget",
            "location": 3468,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.hgetall": {
            "name": "hgetall",
            "location": 3472,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hincrby": {
            "name": "hincrby",
            "location": 3476,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Redis.hincrbyfloat": {
            "name": "hincrbyfloat",
            "location": 3480,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ],
                "amount": [
                    "float"
                ]
            }
        },
        "Redis.hkeys": {
            "name": "hkeys",
            "location": 3486,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hlen": {
            "name": "hlen",
            "location": 3490,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hset": {
            "name": "hset",
            "location": 3494,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Optional[Union[(bytes, float, str)]]"
                ],
                "value": [
                    "Optional[Union[(bytes, float, str)]]"
                ],
                "mapping": [
                    "Optional[Mapping[(AnyFieldT, Union[(bytes, float, str)])]]"
                ]
            }
        },
        "Redis.hsetnx": {
            "name": "hsetnx",
            "location": 3518,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.hmset": {
            "name": "hmset",
            "location": 3525,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "mapping": [
                    "Mapping[(AnyFieldT, Union[(bytes, float, str)])]"
                ]
            }
        },
        "Redis.hmget": {
            "name": "hmget",
            "location": 3543,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "keys": [
                    "Sequence[Union[(bytes, str)]]"
                ]
            }
        },
        "Redis.hvals": {
            "name": "hvals",
            "location": 3548,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.hstrlen": {
            "name": "hstrlen",
            "location": 3552,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "key": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.publish": {
            "name": "publish",
            "location": 3559,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Union[(bytes, str)]"
                ],
                "message": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Redis.pubsub_channels": {
            "name": "pubsub_channels",
            "location": 3566,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.pubsub_numpat": {
            "name": "pubsub_numpat",
            "location": 3572,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.pubsub_numsub": {
            "name": "pubsub_numsub",
            "location": 3578,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.cluster": {
            "name": "cluster",
            "location": 3585,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "cluster_arg": [
                    "str"
                ]
            }
        },
        "Redis.eval": {
            "name": "eval",
            "location": 3588,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Union[(bytes, str)]"
                ],
                "numkeys": [
                    "int"
                ]
            }
        },
        "Redis.evalsha": {
            "name": "evalsha",
            "location": 3601,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "sha": [
                    "str"
                ],
                "numkeys": [
                    "int"
                ]
            }
        },
        "Redis.script_exists": {
            "name": "script_exists",
            "location": 3613,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.script_flush": {
            "name": "script_flush",
            "location": 3621,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.script_kill": {
            "name": "script_kill",
            "location": 3625,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Redis.script_load": {
            "name": "script_load",
            "location": 3629,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.register_script": {
            "name": "register_script",
            "location": 3633,
            "return": [
                "Script"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.geoadd": {
            "name": "geoadd",
            "location": 3643,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.geodist": {
            "name": "geodist",
            "location": 3654,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "place1": [
                    "Union[(bytes, float, str)]"
                ],
                "place2": [
                    "Union[(bytes, float, str)]"
                ],
                "unit": [
                    "Optional[str]"
                ]
            }
        },
        "Redis.geohash": {
            "name": "geohash",
            "location": 3670,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.geopos": {
            "name": "geopos",
            "location": 3677,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Redis.georadius": {
            "name": "georadius",
            "location": 3685,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "longitude": [
                    "float"
                ],
                "latitude": [
                    "float"
                ],
                "radius": [
                    "float"
                ],
                "unit": [
                    "Optional[str]"
                ],
                "withdist": [
                    "bool"
                ],
                "withcoord": [
                    "bool"
                ],
                "withhash": [
                    "bool"
                ],
                "count": [
                    "Optional[int]"
                ],
                "sort": [
                    "Optional[str]"
                ],
                "store": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "store_dist": [
                    "Optional[Union[(bytes, str)]]"
                ]
            }
        },
        "Redis.georadiusbymember": {
            "name": "georadiusbymember",
            "location": 3744,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "member": [
                    "Union[(bytes, float, str)]"
                ],
                "radius": [
                    "float"
                ],
                "unit": [
                    "Optional[str]"
                ],
                "withdist": [
                    "bool"
                ],
                "withcoord": [
                    "bool"
                ],
                "withhash": [
                    "bool"
                ],
                "count": [
                    "Optional[int]"
                ],
                "sort": [
                    "Optional[str]"
                ],
                "store": [
                    "Optional[Union[(bytes, str)]]"
                ],
                "store_dist": [
                    "Optional[Union[(bytes, str)]]"
                ]
            }
        },
        "Redis._georadiusgeneric": {
            "name": "_georadiusgeneric",
            "location": 3779,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "Redis.module_load": {
            "name": "module_load",
            "location": 3823,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Redis.module_unload": {
            "name": "module_unload",
            "location": 3830,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Redis.module_list": {
            "name": "module_list",
            "location": 3837,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 3867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_pool": [
                    "aioredis.connection.ConnectionPool"
                ]
            }
        },
        "PubSub.__init__": {
            "name": "__init__",
            "location": 3949,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_pool": [
                    "aioredis.connection.ConnectionPool"
                ],
                "shard_hint": [
                    "Optional[str]"
                ],
                "ignore_subscribe_messages": [
                    "bool"
                ]
            }
        },
        "PubSub.__del__": {
            "name": "__del__",
            "location": 3984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.close": {
            "name": "close",
            "location": 4000,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.subscribed": {
            "name": "subscribed",
            "location": 4022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub._normalize_keys": {
            "name": "_normalize_keys",
            "location": 4095,
            "return": [
                "_NormalizeKeysT"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_NormalizeKeysT"
                ]
            }
        },
        "PubSub.punsubscribe": {
            "name": "punsubscribe",
            "location": 4126,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.unsubscribe": {
            "name": "unsubscribe",
            "location": 4162,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.ping": {
            "name": "ping",
            "location": 4198,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PubsubWorkerExceptionHandler.__call__": {
            "name": "__call__",
            "location": 4312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "BaseException"
                ],
                "pubsub": [
                    "PubSub"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 4351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_pool": [
                    "aioredis.connection.ConnectionPool"
                ],
                "response_callbacks": [
                    "MutableMapping[(Union[(bytes, str)], Union[(AsyncResponseCallbackProtocol, ResponseCallbackProtocol)])]"
                ],
                "transaction": [
                    "bool"
                ],
                "shard_hint": [
                    "Optional[str]"
                ]
            }
        },
        "Pipeline.__await__": {
            "name": "__await__",
            "location": 4374,
            "return": [
                "Generator[(Any, None, Pipeline)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__len__": {
            "name": "__len__",
            "location": 4379,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__bool__": {
            "name": "__bool__",
            "location": 4382,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.multi": {
            "name": "multi",
            "location": 4413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.execute_command": {
            "name": "execute_command",
            "location": 4426,
            "return": [
                "Union[(Pipeline, Awaitable[Pipeline])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.pipeline_execute_command": {
            "name": "pipeline_execute_command",
            "location": 4481,
            "return": [
                "_TPipeline"
            ],
            "arguments": {
                "self": [
                    "_TPipeline"
                ]
            }
        },
        "Pipeline.raise_first_error": {
            "name": "raise_first_error",
            "location": 4590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "List[Tuple[(Tuple[(Union[(bytes, str)], ...)], Mapping[(str, Any)])]]"
                ],
                "response": [
                    "Iterable"
                ]
            }
        },
        "Pipeline.annotate_exception": {
            "name": "annotate_exception",
            "location": 4596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "Exception"
                ],
                "number": [
                    "int"
                ],
                "command": [
                    "Iterable[object]"
                ]
            }
        },
        "Pipeline.parse_response": {
            "name": "parse_response",
            "location": 4603,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "aioredis.connection.Connection"
                ],
                "command_name": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "Script.__init__": {
            "name": "__init__",
            "location": 4680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registered_client": [
                    "Redis"
                ],
                "script": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "BitFieldOperation.__init__": {
            "name": "__init__",
            "location": 4726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Redis"
                ],
                "key": [
                    "Union[(bytes, str)]"
                ],
                "default_overflow": [
                    "Optional[str]"
                ]
            }
        },
        "BitFieldOperation.reset": {
            "name": "reset",
            "location": 4736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitFieldOperation.overflow": {
            "name": "overflow",
            "location": 4744,
            "return": [
                "_TBitFieldOperation"
            ],
            "arguments": {
                "self": [
                    "_TBitFieldOperation"
                ],
                "overflow": [
                    "str"
                ]
            }
        },
        "BitFieldOperation.incrby": {
            "name": "incrby",
            "location": 4757,
            "return": [
                "_TBitFieldOperation"
            ],
            "arguments": {
                "self": [
                    "_TBitFieldOperation"
                ],
                "fmt": [
                    "str"
                ],
                "offset": [
                    "Union[(int, str)]"
                ],
                "increment": [
                    "int"
                ],
                "overflow": [
                    "Optional[str]"
                ]
            }
        },
        "BitFieldOperation.get": {
            "name": "get",
            "location": 4783,
            "return": [
                "_TBitFieldOperation"
            ],
            "arguments": {
                "self": [
                    "_TBitFieldOperation"
                ],
                "fmt": [
                    "str"
                ],
                "offset": [
                    "Union[(int, str)]"
                ]
            }
        },
        "BitFieldOperation.set": {
            "name": "set",
            "location": 4796,
            "return": [
                "_TBitFieldOperation"
            ],
            "arguments": {
                "self": [
                    "_TBitFieldOperation"
                ],
                "fmt": [
                    "str"
                ],
                "offset": [
                    "Union[(int, str)]"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "BitFieldOperation.command": {
            "name": "command",
            "location": 4811,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitFieldOperation.execute": {
            "name": "execute",
            "location": 4817,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/aioredis/compat.py": {},
    "aioredis-py-master/aioredis/connection.py": {
        "to_bool": {
            "name": "to_bool",
            "location": 1158,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 1190,
            "return": [
                "ConnectKwargs"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ],
                "encoding_errors": [
                    "str"
                ],
                "decode_responses": [
                    "bool"
                ]
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 122,
            "return": [
                "Union[(bytes, memoryview)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(bytes, float, str)]"
                ]
            }
        },
        "Encoder.decode": {
            "name": "decode",
            "location": 143,
            "return": [
                "Union[(bytes, float, int, memoryview, str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(bytes, float, str)]"
                ],
                "force": []
            }
        },
        "BaseParser.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_read_size": [
                    "int"
                ]
            }
        },
        "BaseParser.__del__": {
            "name": "__del__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParser.parse_error": {
            "name": "parse_error",
            "location": 196,
            "return": [
                "aioredis.exceptions.ResponseError"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str"
                ]
            }
        },
        "BaseParser.on_disconnect": {
            "name": "on_disconnect",
            "location": 209,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParser.on_connect": {
            "name": "on_connect",
            "location": 212,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ]
            }
        },
        "SocketBuffer.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_reader": [
                    "asyncio.streams.StreamReader"
                ],
                "socket_read_size": [
                    "int"
                ],
                "socket_timeout": [
                    "Optional[float]"
                ]
            }
        },
        "SocketBuffer.length": {
            "name": "length",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketBuffer.purge": {
            "name": "purge",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketBuffer.close": {
            "name": "close",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonParser.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_read_size": [
                    "int"
                ]
            }
        },
        "PythonParser.on_connect": {
            "name": "on_connect",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ]
            }
        },
        "PythonParser.on_disconnect": {
            "name": "on_disconnect",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiredisParser.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_read_size": [
                    "int"
                ]
            }
        },
        "HiredisParser.on_connect": {
            "name": "on_connect",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ]
            }
        },
        "HiredisParser.on_disconnect": {
            "name": "on_disconnect",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectCallbackProtocol.__call__": {
            "name": "__call__",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 606,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 655,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.repr_pieces": {
            "name": "repr_pieces",
            "location": 659,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__del__": {
            "name": "__del__",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.is_connected": {
            "name": "is_connected",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.register_connect_callback": {
            "name": "register_connect_callback",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Connection.clear_connect_callbacks": {
            "name": "clear_connect_callbacks",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._error_message": {
            "name": "_error_message",
            "location": 742,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "Connection.pack_command": {
            "name": "pack_command",
            "location": 922,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.pack_commands": {
            "name": "pack_commands",
            "location": 968,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "Iterable[Iterable[Union[(bytes, float, str)]]]"
                ]
            }
        },
        "SSLConnection.__init__": {
            "name": "__init__",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_keyfile": [
                    "Optional[str]"
                ],
                "ssl_certfile": [
                    "Optional[str]"
                ],
                "ssl_cert_reqs": [
                    "str"
                ],
                "ssl_ca_certs": [
                    "Optional[str]"
                ],
                "ssl_check_hostname": [
                    "bool"
                ]
            }
        },
        "SSLConnection.keyfile": {
            "name": "keyfile",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSLConnection.certfile": {
            "name": "certfile",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSLConnection.cert_reqs": {
            "name": "cert_reqs",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSLConnection.ca_certs": {
            "name": "ca_certs",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSLConnection.check_hostname": {
            "name": "check_hostname",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSSLContext.__init__": {
            "name": "__init__",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyfile": [
                    "Optional[str]"
                ],
                "certfile": [
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "Optional[str]"
                ],
                "ca_certs": [
                    "Optional[str]"
                ],
                "check_hostname": [
                    "bool"
                ]
            }
        },
        "RedisSSLContext.get": {
            "name": "get",
            "location": 1075,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixDomainSocketConnection.__init__": {
            "name": "__init__",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixDomainSocketConnection.repr_pieces": {
            "name": "repr_pieces",
            "location": 1127,
            "return": [
                "Iterable[Tuple[(str, Union[(int, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnixDomainSocketConnection._error_message": {
            "name": "_error_message",
            "location": 1143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "ConnectionPool.from_url": {
            "name": "from_url",
            "location": 1261,
            "return": [
                "_CP"
            ],
            "arguments": {
                "cls": [
                    "Type[_CP]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "ConnectionPool.__init__": {
            "name": "__init__",
            "location": 1304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_class": [
                    "Type[Connection]"
                ],
                "max_connections": [
                    "Optional[int]"
                ]
            }
        },
        "ConnectionPool.__repr__": {
            "name": "__repr__",
            "location": 1334,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.reset": {
            "name": "reset",
            "location": 1340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool._checkpid": {
            "name": "_checkpid",
            "location": 1357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.get_encoder": {
            "name": "get_encoder",
            "location": 1437,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.make_connection": {
            "name": "make_connection",
            "location": 1446,
            "return": [
                "Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.owns_connection": {
            "name": "owns_connection",
            "location": 1474,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Connection"
                ]
            }
        },
        "BlockingConnectionPool.__init__": {
            "name": "__init__",
            "location": 1536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_connections": [
                    "int"
                ],
                "timeout": [
                    "Optional[int]"
                ],
                "connection_class": [
                    "Type[Connection]"
                ],
                "queue_class": [
                    "Type[asyncio.queues.Queue]"
                ]
            }
        },
        "BlockingConnectionPool.reset": {
            "name": "reset",
            "location": 1554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockingConnectionPool.make_connection": {
            "name": "make_connection",
            "location": 1578,
            "return": [
                "Connection"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/aioredis/exceptions.py": {},
    "aioredis-py-master/aioredis/lock.py": {
        "Lock.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "aioredis.client.Redis"
                ],
                "name": [
                    "Union[(bytes, str)]"
                ],
                "timeout": [
                    "Optional[float]"
                ],
                "sleep": [
                    "float"
                ],
                "blocking": [
                    "bool"
                ],
                "blocking_timeout": [
                    "Optional[float]"
                ],
                "thread_local": [
                    "bool"
                ]
            }
        },
        "Lock.register_scripts": {
            "name": "register_scripts",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.release": {
            "name": "release",
            "location": 241,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.extend": {
            "name": "extend",
            "location": 257,
            "return": [
                "Awaitable[bool]"
            ],
            "arguments": {
                "self": [],
                "additional_time": [
                    "float"
                ],
                "replace_ttl": [
                    "bool"
                ]
            }
        },
        "Lock.reacquire": {
            "name": "reacquire",
            "location": 288,
            "return": [
                "Awaitable[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/aioredis/log.py": {},
    "aioredis-py-master/aioredis/sentinel.py": {
        "SentinelManagedConnection.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentinelManagedConnection.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentinelConnectionPool.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [],
                "sentinel_manager": []
            }
        },
        "SentinelConnectionPool.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentinelConnectionPool.reset": {
            "name": "reset",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentinelConnectionPool.owns_connection": {
            "name": "owns_connection",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "aioredis.connection.Connection"
                ]
            }
        },
        "Sentinel.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentinels": [],
                "min_other_sentinels": [],
                "sentinel_kwargs": []
            }
        },
        "Sentinel.__repr__": {
            "name": "__repr__",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentinel.check_master_state": {
            "name": "check_master_state",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict"
                ],
                "service_name": [
                    "str"
                ]
            }
        },
        "Sentinel.filter_slaves": {
            "name": "filter_slaves",
            "location": 235,
            "return": [
                "Sequence[Tuple[(Union[(bytes, float, int, memoryview, str)], Union[(bytes, float, int, memoryview, str)])]]"
            ],
            "arguments": {
                "self": [],
                "slaves": [
                    "Iterable[Mapping]"
                ]
            }
        },
        "Sentinel.master_for": {
            "name": "master_for",
            "location": 260,
            "return": [
                "aioredis.client.Redis"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ],
                "redis_class": [
                    "Type[aioredis.client.Redis]"
                ],
                "connection_pool_class": [
                    "Type[SentinelConnectionPool]"
                ]
            }
        },
        "Sentinel.slave_for": {
            "name": "slave_for",
            "location": 298,
            "return": [
                "aioredis.client.Redis"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ],
                "redis_class": [
                    "Type[aioredis.client.Redis]"
                ],
                "connection_pool_class": [
                    "Type[SentinelConnectionPool]"
                ]
            }
        }
    },
    "aioredis-py-master/aioredis/utils.py": {
        "from_url": {
            "name": "from_url",
            "location": 19,
            "return": [
                "aioredis.client.Redis"
            ],
            "arguments": {
                "url": []
            }
        },
        "str_if_bytes": {
            "name": "str_if_bytes",
            "location": 54,
            "return": [
                "_T"
            ],
            "arguments": {
                "value": [
                    "_T"
                ]
            }
        },
        "safe_str": {
            "name": "safe_str",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "object"
                ]
            }
        },
        "pipeline.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_obj": [
                    "aioredis.client.Redis"
                ]
            }
        }
    },
    "aioredis-py-master/aioredis/__init__.py": {
        "int_or_str": {
            "name": "int_or_str",
            "location": 27,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ]
            }
        }
    },
    "aioredis-py-master/docs/examples/blocking.py": {},
    "aioredis-py-master/docs/examples/commands.py": {},
    "aioredis-py-master/docs/examples/connection.py": {},
    "aioredis-py-master/docs/examples/pipeline.py": {
        "main.callback": {
            "name": "callback",
            "location": 42,
            "return": [],
            "arguments": {
                "pipe": []
            }
        }
    },
    "aioredis-py-master/docs/examples/pool.py": {},
    "aioredis-py-master/docs/examples/pool_pubsub.py": {},
    "aioredis-py-master/docs/examples/scan.py": {},
    "aioredis-py-master/docs/examples/sentinel.py": {},
    "aioredis-py-master/docs/examples/transaction.py": {},
    "aioredis-py-master/docs/examples/getting_started/00_connect.py": {},
    "aioredis-py-master/docs/examples/getting_started/01_decoding.py": {},
    "aioredis-py-master/docs/examples/getting_started/02_decoding.py": {},
    "aioredis-py-master/docs/examples/getting_started/03_multiexec.py": {},
    "aioredis-py-master/docs/examples/getting_started/04_pubsub.py": {},
    "aioredis-py-master/docs/examples/getting_started/05_pubsub.py": {},
    "aioredis-py-master/docs/examples/getting_started/06_sentinel.py": {},
    "aioredis-py-master/tests/compat.py": {},
    "aioredis-py-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "skip_if_server_version_lt": {
            "name": "skip_if_server_version_lt",
            "location": 118,
            "return": [
                "Callable[([_DecoratedTest], _DecoratedTest)]"
            ],
            "arguments": {
                "min_version": [
                    "str"
                ]
            }
        },
        "skip_if_server_version_gte": {
            "name": "skip_if_server_version_gte",
            "location": 124,
            "return": [
                "Callable[([_DecoratedTest], _DecoratedTest)]"
            ],
            "arguments": {
                "min_version": [
                    "str"
                ]
            }
        },
        "skip_unless_arch_bits": {
            "name": "skip_unless_arch_bits",
            "location": 130,
            "return": [
                "Callable[([_DecoratedTest], _DecoratedTest)]"
            ],
            "arguments": {
                "arch_bits": [
                    "int"
                ]
            }
        },
        "create_redis": {
            "name": "create_redis",
            "location": 173,
            "return": [],
            "arguments": {
                "request": [],
                "event_loop": []
            }
        },
        "_gen_cluster_mock_resp": {
            "name": "_gen_cluster_mock_resp",
            "location": 224,
            "return": [
                "_T0"
            ],
            "arguments": {
                "r": [
                    "_T0"
                ],
                "response": []
            }
        },
        "master_host": {
            "name": "master_host",
            "location": 293,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "BooleanOptionalAction.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "dest": [],
                "default": [],
                "type": [],
                "choices": [],
                "required": [],
                "help": [],
                "metavar": []
            }
        },
        "BooleanOptionalAction.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "BooleanOptionalAction.format_usage": {
            "name": "format_usage",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_redis.f.teardown": {
            "name": "teardown",
            "location": 188,
            "return": [],
            "arguments": {}
        }
    },
    "aioredis-py-master/tests/test_commands.py": {
        "TestRedisCommands.test_acl_deluser.teardown": {
            "name": "teardown",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_getuser_setuser.teardown": {
            "name": "teardown",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_list.teardown": {
            "name": "teardown",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_log.teardown": {
            "name": "teardown",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_setuser_categories_without_prefix_fails.teardown": {
            "name": "teardown",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_setuser_commands_without_prefix_fails.teardown": {
            "name": "teardown",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_acl_setuser_add_passwords_and_nopass_fails.teardown": {
            "name": "teardown",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "TestRedisCommands.test_xrange.get_ids": {
            "name": "get_ids",
            "location": 2683,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "TestRedisCommands.test_xrevrange.get_ids": {
            "name": "get_ids",
            "location": 2831,
            "return": [],
            "arguments": {
                "results": []
            }
        }
    },
    "aioredis-py-master/tests/test_connection.py": {},
    "aioredis-py-master/tests/test_connection_pool.py": {
        "TestRedisAutoReleaseConnectionPool.get_total_connected_connections": {
            "name": "get_total_connected_connections",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "pool": []
            }
        },
        "TestRedisAutoReleaseConnectionPool.has_no_connected_connections": {
            "name": "has_no_connected_connections",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "pool": [
                    "aioredis.connection.ConnectionPool"
                ]
            }
        },
        "DummyConnection.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPool.get_pool": {
            "name": "get_pool",
            "location": 112,
            "return": [
                "aioredis.connection.ConnectionPool"
            ],
            "arguments": {
                "self": [],
                "connection_kwargs": [],
                "max_connections": [],
                "connection_class": []
            }
        },
        "TestConnectionPool.test_repr_contains_db_info_tcp": {
            "name": "test_repr_contains_db_info_tcp",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPool.test_repr_contains_db_info_unix": {
            "name": "test_repr_contains_db_info_unix",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlockingConnectionPool.get_pool": {
            "name": "get_pool",
            "location": 188,
            "return": [
                "aioredis.connection.BlockingConnectionPool"
            ],
            "arguments": {
                "self": [],
                "connection_kwargs": [],
                "max_connections": [],
                "timeout": []
            }
        },
        "TestBlockingConnectionPool.test_repr_contains_db_info_tcp": {
            "name": "test_repr_contains_db_info_tcp",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlockingConnectionPool.test_repr_contains_db_info_unix": {
            "name": "test_repr_contains_db_info_unix",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_hostname": {
            "name": "test_hostname",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_quoted_hostname": {
            "name": "test_quoted_hostname",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_port": {
            "name": "test_port",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_username": {
            "name": "test_username",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_quoted_username": {
            "name": "test_quoted_username",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_password": {
            "name": "test_password",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_quoted_password": {
            "name": "test_quoted_password",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_username_and_password": {
            "name": "test_username_and_password",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_db_as_argument": {
            "name": "test_db_as_argument",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_db_in_path": {
            "name": "test_db_in_path",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_db_in_querystring": {
            "name": "test_db_in_querystring",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_extra_typed_querystring_options": {
            "name": "test_extra_typed_querystring_options",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_boolean_parsing": {
            "name": "test_boolean_parsing",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_client_name_in_querystring": {
            "name": "test_client_name_in_querystring",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_invalid_extra_typed_querystring_options": {
            "name": "test_invalid_extra_typed_querystring_options",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_extra_querystring_options": {
            "name": "test_extra_querystring_options",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_calling_from_subclass_returns_correct_instance": {
            "name": "test_calling_from_subclass_returns_correct_instance",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_client_creates_connection_pool": {
            "name": "test_client_creates_connection_pool",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolURLParsing.test_invalid_scheme_raises_error": {
            "name": "test_invalid_scheme_raises_error",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_defaults": {
            "name": "test_defaults",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_username": {
            "name": "test_username",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_quoted_username": {
            "name": "test_quoted_username",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_password": {
            "name": "test_password",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_quoted_password": {
            "name": "test_quoted_password",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_quoted_path": {
            "name": "test_quoted_path",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_db_as_argument": {
            "name": "test_db_as_argument",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_db_in_querystring": {
            "name": "test_db_in_querystring",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_client_name_in_querystring": {
            "name": "test_client_name_in_querystring",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionPoolUnixSocketURLParsing.test_extra_querystring_options": {
            "name": "test_extra_querystring_options",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSLConnectionURLParsing.test_host": {
            "name": "test_host",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSLConnectionURLParsing.test_cert_reqs_options": {
            "name": "test_cert_reqs_options",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnection.test_connect_from_url_tcp": {
            "name": "test_connect_from_url_tcp",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnection.test_connect_from_url_unix": {
            "name": "test_connect_from_url_unix",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthCheck.assert_interval_advanced": {
            "name": "assert_interval_advanced",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "TestSSLConnectionURLParsing.test_cert_reqs_options.DummyConnectionPool.get_connection": {
            "name": "get_connection",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/tests/test_encoding.py": {
        "TestInvalidUserInput.test_user_type_fails.Foo.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/tests/test_lock.py": {
        "TestLock.get_lock": {
            "name": "get_lock",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "redis": []
            }
        },
        "TestLockClassSelection.test_lock_class_argument": {
            "name": "test_lock_class_argument",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "TestLockClassSelection.test_lock_class_argument.MyLock.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioredis-py-master/tests/test_monitor.py": {},
    "aioredis-py-master/tests/test_multiprocessing.py": {
        "TestMultiprocessing.test_close_connection_in_child.target": {
            "name": "target",
            "location": 45,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "TestMultiprocessing.test_close_connection_in_parent.target": {
            "name": "target",
            "location": 74,
            "return": [],
            "arguments": {
                "conn": [],
                "ev": []
            }
        },
        "TestMultiprocessing.test_pool.target": {
            "name": "target",
            "location": 108,
            "return": [],
            "arguments": {
                "pool": []
            }
        },
        "TestMultiprocessing.test_close_pool_in_main.target": {
            "name": "target",
            "location": 145,
            "return": [],
            "arguments": {
                "pool": [],
                "disconnect_event": []
            }
        },
        "TestMultiprocessing.test_aioredis_client.target": {
            "name": "target",
            "location": 171,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "aioredis-py-master/tests/test_pipeline.py": {},
    "aioredis-py-master/tests/test_pubsub.py": {
        "make_message": {
            "name": "make_message",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "type": [],
                "channel": [],
                "data": [],
                "pattern": []
            }
        },
        "make_subscribe_test_data": {
            "name": "make_subscribe_test_data",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pubsub": [],
                "type": []
            }
        },
        "TestPubSubMessages.setup_method": {
            "name": "setup_method",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestPubSubMessages.message_handler": {
            "name": "message_handler",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TestPubSubAutoDecoding.make_message": {
            "name": "make_message",
            "location": 385,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2, _T3)])]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "_T0"
                ],
                "channel": [
                    "_T1"
                ],
                "data": [
                    "_T2"
                ],
                "pattern": [
                    "_T3"
                ]
            }
        },
        "TestPubSubAutoDecoding.setup_method": {
            "name": "setup_method",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestPubSubAutoDecoding.message_handler": {
            "name": "message_handler",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TestPubSubRun.test_callbacks.callback": {
            "name": "callback",
            "location": 594,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "TestPubSubRun.test_exception_handler.exception_handler_callback": {
            "name": "exception_handler_callback",
            "location": 616,
            "return": [],
            "arguments": {
                "e": [],
                "pubsub": []
            }
        }
    },
    "aioredis-py-master/tests/test_scripting.py": {},
    "aioredis-py-master/tests/test_sentinel.py": {
        "master_ip": {
            "name": "master_ip",
            "location": 18,
            "return": [],
            "arguments": {
                "master_host": []
            }
        },
        "sentinel": {
            "name": "sentinel",
            "location": 79,
            "return": [],
            "arguments": {
                "request": [],
                "cluster": []
            }
        },
        "SentinelTestClient.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "id": []
            }
        },
        "SentinelTestCluster.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [],
                "ip": [],
                "port": []
            }
        },
        "SentinelTestCluster.connection_error_if_down": {
            "name": "connection_error_if_down",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SentinelTestCluster.timeout_if_down": {
            "name": "timeout_if_down",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SentinelTestCluster.client": {
            "name": "client",
            "location": 64,
            "return": [
                "SentinelTestClient"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": []
            }
        }
    },
    "aioredis-py-master/tests/__init__.py": {},
    "aioredis-py-master/tools/check_changes.py": {
        "get_root": {
            "name": "get_root",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "script_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    }
}
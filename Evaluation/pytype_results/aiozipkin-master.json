{
    "aiozipkin-master/setup.py": {
        "read": {
            "name": "read",
            "location": 12,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/aiozipkin/aiohttp_helpers.py": {
        "_set_remote_endpoint": {
            "name": "_set_remote_endpoint",
            "location": 63,
            "return": [],
            "arguments": {
                "span": [],
                "request": []
            }
        },
        "_get_span": {
            "name": "_get_span",
            "location": 80,
            "return": [],
            "arguments": {
                "request": [],
                "tracer": []
            }
        },
        "_set_span_properties": {
            "name": "_set_span_properties",
            "location": 94,
            "return": [],
            "arguments": {
                "span": [],
                "request": []
            }
        },
        "middleware_maker": {
            "name": "middleware_maker",
            "location": 128,
            "return": [],
            "arguments": {
                "skip_routes": [],
                "tracer_key": [],
                "request_key": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 177,
            "return": [],
            "arguments": {
                "app": [],
                "tracer": []
            }
        },
        "get_tracer": {
            "name": "get_tracer",
            "location": 206,
            "return": [],
            "arguments": {
                "app": [],
                "tracer_key": []
            }
        },
        "request_span": {
            "name": "request_span",
            "location": 215,
            "return": [],
            "arguments": {
                "request": [],
                "request_key": []
            }
        },
        "make_trace_config": {
            "name": "make_trace_config",
            "location": 329,
            "return": [],
            "arguments": {
                "tracer": []
            }
        },
        "set_context_value": {
            "name": "set_context_value",
            "location": 118,
            "return": [],
            "arguments": {
                "context_var": [],
                "value": []
            }
        },
        "ZipkinClientSignals.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "tracer": []
            }
        },
        "ZipkinClientSignals._get_span_context": {
            "name": "_get_span_context",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "trace_config_ctx": []
            }
        },
        "ZipkinClientSignals._get_span_context_from_dict": {
            "name": "_get_span_context_from_dict",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "trace_config_ctx": []
            }
        },
        "ZipkinClientSignals._get_span_context_from_namespace": {
            "name": "_get_span_context_from_namespace",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "trace_config_ctx": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/constants.py": {},
    "aiozipkin-master/aiozipkin/context_managers.py": {
        "_ContextManager.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "_ContextManager.__await__": {
            "name": "__await__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/helpers.py": {
        "create_endpoint": {
            "name": "create_endpoint",
            "location": 59,
            "return": [],
            "arguments": {
                "service_name": []
            }
        },
        "make_timestamp": {
            "name": "make_timestamp",
            "location": 66,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "make_headers": {
            "name": "make_headers",
            "location": 74,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "make_single_header": {
            "name": "make_single_header",
            "location": 87,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "parse_sampled_header": {
            "name": "parse_sampled_header",
            "location": 109,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "parse_debug_header": {
            "name": "parse_debug_header",
            "location": 116,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "_parse_parent_id": {
            "name": "_parse_parent_id",
            "location": 120,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "_parse_debug": {
            "name": "_parse_debug",
            "location": 128,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "_parse_sampled": {
            "name": "_parse_sampled",
            "location": 136,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "_parse_single_header": {
            "name": "_parse_single_header",
            "location": 145,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "make_context": {
            "name": "make_context",
            "location": 171,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "filter_none": {
            "name": "filter_none",
            "location": 206,
            "return": [],
            "arguments": {
                "data": [],
                "keys": []
            }
        },
        "TraceContext.make_headers": {
            "name": "make_headers",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TraceContext.make_single_header": {
            "name": "make_single_header",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "filter_none.limited_filter": {
            "name": "limited_filter",
            "location": 213,
            "return": [],
            "arguments": {
                "k": [],
                "v": []
            }
        },
        "filter_none.full_filter": {
            "name": "full_filter",
            "location": 216,
            "return": [],
            "arguments": {
                "k": [],
                "v": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/log.py": {},
    "aiozipkin-master/aiozipkin/mypy_types.py": {},
    "aiozipkin-master/aiozipkin/record.py": {
        "_endpoint_asdict": {
            "name": "_endpoint_asdict",
            "location": 12,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "local_endpoint": []
            }
        },
        "Record.context": {
            "name": "context",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.start": {
            "name": "start",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "Record.finish": {
            "name": "finish",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "Record.name": {
            "name": "name",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Record.set_tag": {
            "name": "set_tag",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Record.annotate": {
            "name": "annotate",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "ts": []
            }
        },
        "Record.kind": {
            "name": "kind",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "Record.remote_endpoint": {
            "name": "remote_endpoint",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": []
            }
        },
        "Record.asdict": {
            "name": "asdict",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/sampler.py": {
        "SamplerABC.is_sampled": {
            "name": "is_sampled",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "trace_id": []
            }
        },
        "Sampler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sampler.is_sampled": {
            "name": "is_sampled",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "trace_id": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/span.py": {
        "SpanAbc.is_noop": {
            "name": "is_noop",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanAbc.context": {
            "name": "context",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanAbc.tracer": {
            "name": "tracer",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanAbc.start": {
            "name": "start",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "SpanAbc.finish": {
            "name": "finish",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ts": [],
                "exception": []
            }
        },
        "SpanAbc.remote_endpoint": {
            "name": "remote_endpoint",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "servce_name": []
            }
        },
        "SpanAbc.tag": {
            "name": "tag",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "SpanAbc.annotate": {
            "name": "annotate",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "ts": []
            }
        },
        "SpanAbc.kind": {
            "name": "kind",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "span_kind": []
            }
        },
        "SpanAbc.name": {
            "name": "name",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "span_name": []
            }
        },
        "SpanAbc.new_child": {
            "name": "new_child",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": []
            }
        },
        "SpanAbc.__enter__": {
            "name": "__enter__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanAbc.__exit__": {
            "name": "__exit__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "NoopSpan.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "tracer": [],
                "context": [],
                "ignored_exceptions": []
            }
        },
        "NoopSpan.is_noop": {
            "name": "is_noop",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoopSpan.context": {
            "name": "context",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoopSpan.tracer": {
            "name": "tracer",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoopSpan.start": {
            "name": "start",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "NoopSpan.finish": {
            "name": "finish",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "ts": [],
                "exception": []
            }
        },
        "NoopSpan.remote_endpoint": {
            "name": "remote_endpoint",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "servce_name": []
            }
        },
        "NoopSpan.tag": {
            "name": "tag",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "NoopSpan.annotate": {
            "name": "annotate",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "ts": []
            }
        },
        "NoopSpan.kind": {
            "name": "kind",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "span_kind": []
            }
        },
        "NoopSpan.name": {
            "name": "name",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "span_name": []
            }
        },
        "NoopSpan.new_child": {
            "name": "new_child",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": []
            }
        },
        "Span.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "tracer": [],
                "context": [],
                "record": [],
                "ignored_exceptions": []
            }
        },
        "Span.is_noop": {
            "name": "is_noop",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.context": {
            "name": "context",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.tracer": {
            "name": "tracer",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.start": {
            "name": "start",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "Span.finish": {
            "name": "finish",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "ts": [],
                "exception": []
            }
        },
        "Span.remote_endpoint": {
            "name": "remote_endpoint",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "servce_name": []
            }
        },
        "Span.tag": {
            "name": "tag",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Span.annotate": {
            "name": "annotate",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "ts": []
            }
        },
        "Span.kind": {
            "name": "kind",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "span_kind": []
            }
        },
        "Span.name": {
            "name": "name",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "span_name": []
            }
        },
        "Span.new_child": {
            "name": "new_child",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/tracer.py": {
        "create": {
            "name": "create",
            "location": 117,
            "return": [],
            "arguments": {
                "zipkin_address": [],
                "local_endpoint": []
            }
        },
        "create_custom": {
            "name": "create_custom",
            "location": 140,
            "return": [],
            "arguments": {
                "local_endpoint": [],
                "transport": [],
                "sampler": [],
                "ignored_exceptions": []
            }
        },
        "Tracer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "transport": [],
                "sampler": [],
                "local_endpoint": [],
                "ignored_exceptions": []
            }
        },
        "Tracer.new_trace": {
            "name": "new_trace",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "sampled": [],
                "debug": []
            }
        },
        "Tracer.join_span": {
            "name": "join_span",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Tracer.new_child": {
            "name": "new_child",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Tracer.to_span": {
            "name": "to_span",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Tracer._send": {
            "name": "_send",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Tracer._next_context": {
            "name": "_next_context",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "sampled": [],
                "debug": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/transport.py": {
        "TransportABC.send": {
            "name": "send",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "StubTransport.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "queue_length": []
            }
        },
        "StubTransport.send": {
            "name": "send",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "BatchManager.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "max_size": [],
                "send_interval": [],
                "attempt_count": [],
                "send_data": []
            }
        },
        "BatchManager.add": {
            "name": "add",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Transport.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "send_interval": [],
                "loop": []
            }
        },
        "Transport.send": {
            "name": "send",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/utils.py": {
        "generate_random_64bit_string": {
            "name": "generate_random_64bit_string",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "generate_random_128bit_string": {
            "name": "generate_random_128bit_string",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "unsigned_hex_to_signed_int": {
            "name": "unsigned_hex_to_signed_int",
            "location": 35,
            "return": [],
            "arguments": {
                "hex_string": []
            }
        },
        "signed_int_to_unsigned_hex": {
            "name": "signed_int_to_unsigned_hex",
            "location": 51,
            "return": [],
            "arguments": {
                "signed_int": []
            }
        }
    },
    "aiozipkin-master/aiozipkin/__init__.py": {},
    "aiozipkin-master/docs/conf.py": {},
    "aiozipkin-master/examples/aiohttp_example.py": {
        "run": {
            "name": "run",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/examples/minimal.py": {},
    "aiozipkin-master/examples/simple.py": {},
    "aiozipkin-master/examples/microservices/runner.py": {
        "run": {
            "name": "run",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/examples/microservices/service_a.py": {},
    "aiozipkin-master/examples/microservices/service_b.py": {},
    "aiozipkin-master/examples/microservices/service_c.py": {},
    "aiozipkin-master/examples/microservices/service_d.py": {},
    "aiozipkin-master/examples/microservices/service_e.py": {},
    "aiozipkin-master/examples/queue/backend.py": {},
    "aiozipkin-master/examples/queue/frontend.py": {},
    "aiozipkin-master/examples/queue/runner.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 26,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "fake_transport": {
            "name": "fake_transport",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "tracer_fixture": {
            "name": "tracer_fixture",
            "location": 37,
            "return": [],
            "arguments": {
                "fake_transport": []
            }
        },
        "context": {
            "name": "context",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "FakeZipkin.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeZipkin.url": {
            "name": "url",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeZipkin.get_received_data": {
            "name": "get_received_data",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeZipkin.wait_data": {
            "name": "wait_data",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        }
    },
    "aiozipkin-master/tests/docker_fixtures.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 9,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "docker_pull": {
            "name": "docker_pull",
            "location": 16,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "zipkin_url": {
            "name": "zipkin_url",
            "location": 78,
            "return": [],
            "arguments": {
                "zipkin_server": []
            }
        },
        "jaeger_url": {
            "name": "jaeger_url",
            "location": 133,
            "return": [],
            "arguments": {
                "jaeger_server": []
            }
        },
        "jaeger_api_url": {
            "name": "jaeger_api_url",
            "location": 139,
            "return": [],
            "arguments": {
                "jaeger_server": []
            }
        }
    },
    "aiozipkin-master/tests/test_aiohttp_helpers.py": {
        "test_basic_setup": {
            "name": "test_basic_setup",
            "location": 14,
            "return": [],
            "arguments": {
                "tracer": []
            }
        }
    },
    "aiozipkin-master/tests/test_aiohttp_integration.py": {},
    "aiozipkin-master/tests/test_helpers.py": {
        "trace_context": {
            "name": "trace_context",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "other_trace_context": {
            "name": "other_trace_context",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_make_headers": {
            "name": "test_make_headers",
            "location": 41,
            "return": [],
            "arguments": {
                "trace_context": []
            }
        },
        "test_make_single_header": {
            "name": "test_make_single_header",
            "location": 53,
            "return": [],
            "arguments": {
                "trace_context": [],
                "other_trace_context": []
            }
        },
        "test_make_context": {
            "name": "test_make_context",
            "location": 78,
            "return": [],
            "arguments": {
                "trace_context": []
            }
        },
        "test_make_context_single_header": {
            "name": "test_make_context_single_header",
            "location": 87,
            "return": [],
            "arguments": {
                "trace_context": [],
                "other_trace_context": []
            }
        },
        "test_make_timestamp": {
            "name": "test_make_timestamp",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_filter_none": {
            "name": "test_filter_none",
            "location": 115,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/tests/test_jaeger.py": {},
    "aiozipkin-master/tests/test_record.py": {
        "test_basic_ctr": {
            "name": "test_basic_ctr",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/tests/test_sampler.py": {
        "test_sample_always": {
            "name": "test_sample_always",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_sample_never": {
            "name": "test_sample_never",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_sample_with_rate": {
            "name": "test_sample_with_rate",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/tests/test_tracer.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 13,
            "return": [],
            "arguments": {
                "tracer": [],
                "fake_transport": []
            }
        },
        "test_noop_span_methods": {
            "name": "test_noop_span_methods",
            "location": 60,
            "return": [],
            "arguments": {
                "tracer": []
            }
        },
        "test_trace_join_span": {
            "name": "test_trace_join_span",
            "location": 93,
            "return": [],
            "arguments": {
                "tracer": [],
                "context": []
            }
        },
        "test_trace_new_child": {
            "name": "test_trace_new_child",
            "location": 109,
            "return": [],
            "arguments": {
                "tracer": [],
                "context": []
            }
        },
        "test_span_new_child": {
            "name": "test_span_new_child",
            "location": 119,
            "return": [],
            "arguments": {
                "tracer": [],
                "context": [],
                "fake_transport": []
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 144,
            "return": [],
            "arguments": {
                "tracer": [],
                "fake_transport": []
            }
        },
        "test_ignored_error": {
            "name": "test_ignored_error",
            "location": 160,
            "return": [],
            "arguments": {
                "tracer": [],
                "fake_transport": []
            }
        },
        "test_null_annotation": {
            "name": "test_null_annotation",
            "location": 178,
            "return": [],
            "arguments": {
                "tracer": [],
                "fake_transport": []
            }
        },
        "test_error.func": {
            "name": "func",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_ignored_error.func": {
            "name": "func",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "test_create_custom.FakeSampler.is_sampled": {
            "name": "is_sampled",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "trace_id": []
            }
        }
    },
    "aiozipkin-master/tests/test_transport.py": {},
    "aiozipkin-master/tests/test_utils.py": {
        "test_generate_random_64bit_string": {
            "name": "test_generate_random_64bit_string",
            "location": 7,
            "return": [],
            "arguments": {
                "rand": []
            }
        },
        "test_generate_random_128bit_string": {
            "name": "test_generate_random_128bit_string",
            "location": 18,
            "return": [],
            "arguments": {
                "rand": [],
                "mock_time": []
            }
        },
        "test_unsigned_hex_to_signed_int": {
            "name": "test_unsigned_hex_to_signed_int",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_signed_int_to_unsigned_hex": {
            "name": "test_signed_int_to_unsigned_hex",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "aiozipkin-master/tests/test_zipkin.py": {
        "test_exception_in_span.func": {
            "name": "func",
            "location": 93,
            "return": [],
            "arguments": {
                "span": []
            }
        }
    }
}
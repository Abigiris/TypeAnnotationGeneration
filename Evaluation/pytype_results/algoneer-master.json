{
    "algoneer-master/req.py": {},
    "algoneer-master/setup.py": {},
    "algoneer-master/algoneer/algorithm_test.py": {},
    "algoneer-master/algoneer/dataset_model_test.py": {
        "DatasetModelTest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelTest.run": {
            "name": "run",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": []
            }
        },
        "DatasetModelTest.log": {
            "name": "log",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "message": []
            }
        }
    },
    "algoneer-master/algoneer/dataset_test.py": {},
    "algoneer-master/algoneer/object.py": {
        "Object.dump": {
            "name": "dump",
            "location": 7,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.load": {
            "name": "load",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/project.py": {
        "Project.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Project.path": {
            "name": "path",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.dump": {
            "name": "dump",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.load": {
            "name": "load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "algoneer-master/algoneer/__init__.py": {},
    "algoneer-master/algoneer/algorithm/algorithm.py": {
        "Algorithm.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "project": [],
                "schema": []
            }
        },
        "Algorithm.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Algorithm.load": {
            "name": "load",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Algorithm.dump": {
            "name": "dump",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.project": {
            "name": "project",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.name": {
            "name": "name",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.data": {
            "name": "data",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.schema": {
            "name": "schema",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Algorithm.algorithm_schema": {
            "name": "algorithm_schema",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.fit": {
            "name": "fit",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AlgorithmAlgorithmSchema.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "algorithm": [],
                "schema": []
            }
        },
        "AlgorithmAlgorithmSchema.dump": {
            "name": "dump",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmAlgorithmSchema.load": {
            "name": "load",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/algorithm/sklearn.py": {
        "SklearnAlgorithm.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "project": [],
                "estimator_class": []
            }
        },
        "SklearnAlgorithm.name": {
            "name": "name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SklearnAlgorithm.data": {
            "name": "data",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SklearnAlgorithm.fit": {
            "name": "fit",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        }
    },
    "algoneer-master/algoneer/algorithm/__init__.py": {},
    "algoneer-master/algoneer/algorithmschema/algorithmschema.py": {
        "AlgorithmSchema.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "config": []
            }
        },
        "AlgorithmSchema.config": {
            "name": "config",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.type": {
            "name": "type",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.dump": {
            "name": "dump",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.load": {
            "name": "load",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/algorithmschema/__init__.py": {},
    "algoneer-master/algoneer/api/algorithm.py": {
        "Algorithm.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.dependants": {
            "name": "dependants",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Algorithms.url": {
            "name": "url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/algorithmschema.py": {
        "AlgorithmSchema.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchema.data": {
            "name": "data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmSchemas.url": {
            "name": "url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/algorithm_result.py": {
        "AlgorithmResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmResults.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/base_client.py": {
        "BaseClient.get": {
            "name": "get",
            "location": 8,
            "return": [
                "algoneer.api.response.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "BaseClient.post": {
            "name": "post",
            "location": 12,
            "return": [
                "algoneer.api.response.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "BaseClient.patch": {
            "name": "patch",
            "location": 16,
            "return": [
                "algoneer.api.response.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "BaseClient.delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "algoneer.api.response.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/api/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "access_token": [],
                "base_url": [],
                "version": []
            }
        },
        "Client._parse_response": {
            "name": "_parse_response",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Client._request": {
            "name": "_request",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "url": []
            }
        },
        "Client.get": {
            "name": "get",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Client.post": {
            "name": "post",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Client.patch": {
            "name": "patch",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "algoneer-master/algoneer/api/datapoint.py": {
        "Datapoint.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoints.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/datapoint_model_result.py": {
        "DatapointModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatapointModelResults.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/dataschema.py": {
        "DataSchema.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.data": {
            "name": "data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSchemas.url": {
            "name": "url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/dataset.py": {
        "Dataset.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.dependants": {
            "name": "dependants",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datasets.url": {
            "name": "url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/dataset_model_result.py": {
        "DatasetModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.data": {
            "name": "data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResults.url": {
            "name": "url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/dataset_result.py": {
        "DatasetResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetResults.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/manager.py": {
        "get_manager_for": {
            "name": "get_manager_for",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Encoder.default": {
            "name": "default",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ManagerMeta.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "Manager.url": {
            "name": "url",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "Manager.save": {
            "name": "save",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Manager._create": {
            "name": "_create",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Manager._update": {
            "name": "_update",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/model.py": {
        "Model.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Models.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/model_result.py": {
        "ModelResult.dependencies": {
            "name": "dependencies",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelResults.url": {
            "name": "url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/object.py": {
        "get_class_for": {
            "name": "get_class_for",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ObjectMeta.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "mapped_obj": [],
                "session": []
            }
        },
        "Object.mapped_obj": {
            "name": "mapped_obj",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.session": {
            "name": "session",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.dependencies": {
            "name": "dependencies",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.dependants": {
            "name": "dependants",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.data": {
            "name": "data",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.api_data": {
            "name": "api_data",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "api_data": []
            }
        },
        "Object.id": {
            "name": "id",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "algoneer-master/algoneer/api/project.py": {
        "Projects.url": {
            "name": "url",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [],
                "data": [],
                "error": []
            }
        }
    },
    "algoneer-master/algoneer/api/session.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "exclude_classes": []
            }
        },
        "Session.client": {
            "name": "client",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.get_saved": {
            "name": "get_saved",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Session.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "check_saved": []
            }
        },
        "Session.add": {
            "name": "add",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Session.__getitem__": {
            "name": "__getitem__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Session.sync": {
            "name": "sync",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.__contains__": {
            "name": "__contains__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Session.sync.add_obj": {
            "name": "add_obj",
            "location": 65,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "algoneer-master/algoneer/api/__init__.py": {},
    "algoneer-master/algoneer/cli/main.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algoneer-master/algoneer/cli/__init__.py": {},
    "algoneer-master/algoneer/dataschema/attributeschema.py": {
        "AttributeSchema.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "roles": [],
                "type": [],
                "ds": [],
                "column": [],
                "config": []
            }
        },
        "AttributeSchema.dataschema": {
            "name": "dataschema",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "ds": []
            }
        },
        "AttributeSchema.config": {
            "name": "config",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.type": {
            "name": "type",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.roles": {
            "name": "roles",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.column": {
            "name": "column",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.copy": {
            "name": "copy",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.dump": {
            "name": "dump",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeSchema.load": {
            "name": "load",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AttributeSchema.enforce": {
            "name": "enforce",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "ds": []
            }
        }
    },
    "algoneer-master/algoneer/dataschema/dataschema.py": {
        "parse_attributes": {
            "name": "parse_attributes",
            "location": 67,
            "return": [],
            "arguments": {
                "ds": [],
                "schema": []
            }
        },
        "DataSchemaMeta.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "DataSchema.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "attributes": []
            }
        },
        "DataSchema.enforce": {
            "name": "enforce",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "ds": []
            }
        },
        "DataSchema.attributes": {
            "name": "attributes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DataSchema.copy": {
            "name": "copy",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": []
            }
        },
        "DataSchema.dump": {
            "name": "dump",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.load": {
            "name": "load",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/dataschema/__init__.py": {},
    "algoneer-master/algoneer/dataset/attribute.py": {
        "Attribute.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "column": [],
                "schema": []
            }
        },
        "Attribute.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Attribute.column": {
            "name": "column",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Attribute.roles": {
            "name": "roles",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.schema": {
            "name": "schema",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Attribute.dataset": {
            "name": "dataset",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.sum": {
            "name": "sum",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.mean": {
            "name": "mean",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.min": {
            "name": "min",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.max": {
            "name": "max",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/datapoint.py": {
        "Datapoint.dump": {
            "name": "dump",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.load": {
            "name": "load",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Datapoint.dataset": {
            "name": "dataset",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.copy": {
            "name": "copy",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.hash": {
            "name": "hash",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.index": {
            "name": "index",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.data": {
            "name": "data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "project": [],
                "schema": [],
                "name": []
            }
        },
        "Dataset.dump": {
            "name": "dump",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Dataset.project": {
            "name": "project",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.roles": {
            "name": "roles",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.name": {
            "name": "name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.hash": {
            "name": "hash",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.datapoint": {
            "name": "datapoint",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Dataset.columns": {
            "name": "columns",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.attributes": {
            "name": "attributes",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.dataschema": {
            "name": "dataschema",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.schema": {
            "name": "schema",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Dataset.__setitem__": {
            "name": "__setitem__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "value": []
            }
        },
        "Dataset.__delitem__": {
            "name": "__delitem__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Dataset.__iter__": {
            "name": "__iter__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__sub__": {
            "name": "__sub__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dataset.__add__": {
            "name": "__add__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dataset.copy": {
            "name": "copy",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.shape": {
            "name": "shape",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.select": {
            "name": "select",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "indexes": []
            }
        },
        "Dataset.sum": {
            "name": "sum",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.mean": {
            "name": "mean",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.order_by": {
            "name": "order_by",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "DatasetDataSchema.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "schema": []
            }
        },
        "DatasetDataSchema.dump": {
            "name": "dump",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetDataSchema.load": {
            "name": "load",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/pandas.py": {
        "proxy": {
            "name": "proxy",
            "location": 29,
            "return": [],
            "arguments": {
                "f": [],
                "bound": [],
                "ds": []
            }
        },
        "proxy.convert": {
            "name": "convert",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "PandasDatapoint.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "index": []
            }
        },
        "PandasDatapoint.dataset": {
            "name": "dataset",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.index": {
            "name": "index",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.data": {
            "name": "data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.hash": {
            "name": "hash",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDatapoint.copy": {
            "name": "copy",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "column": [],
                "schema": [],
                "series": []
            }
        },
        "PandasAttribute.series": {
            "name": "series",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.sum": {
            "name": "sum",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.mean": {
            "name": "mean",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.min": {
            "name": "min",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.max": {
            "name": "max",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__getitem__": {
            "name": "__getitem__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PandasAttribute.__setitem__": {
            "name": "__setitem__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "value": []
            }
        },
        "PandasAttribute.__delitem__": {
            "name": "__delitem__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PandasAttribute.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasAttribute.__getattr__": {
            "name": "__getattr__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "PandasAttribute.astype": {
            "name": "astype",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "config": []
            }
        },
        "PandasDataset.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "project": [],
                "schema": [],
                "df": []
            }
        },
        "PandasDataset._generate_attributes": {
            "name": "_generate_attributes",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.datapoint": {
            "name": "datapoint",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "PandasDataset.hash": {
            "name": "hash",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.df": {
            "name": "df",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__getitem__": {
            "name": "__getitem__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PandasDataset.__setitem__": {
            "name": "__setitem__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "value": []
            }
        },
        "PandasDataset.__delitem__": {
            "name": "__delitem__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PandasDataset.__iter__": {
            "name": "__iter__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__len__": {
            "name": "__len__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.__getattr__": {
            "name": "__getattr__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "PandasDataset.columns": {
            "name": "columns",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.attributes": {
            "name": "attributes",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.shape": {
            "name": "shape",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.sum": {
            "name": "sum",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.mean": {
            "name": "mean",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.select": {
            "name": "select",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "indexes": [],
                "copy": []
            }
        },
        "PandasDataset.copy": {
            "name": "copy",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasDataset.astype": {
            "name": "astype",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "PandasDataset.from_dataset": {
            "name": "from_dataset",
            "location": 290,
            "return": [],
            "arguments": {
                "dataset": []
            }
        },
        "PandasDataset.from_path": {
            "name": "from_path",
            "location": 297,
            "return": [],
            "arguments": {
                "project": [],
                "path": []
            }
        },
        "PandasDataset.__sub__": {
            "name": "__sub__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PandasDataset.__add__": {
            "name": "__add__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PandasDataset.order_by": {
            "name": "order_by",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "proxy.convert.wrap": {
            "name": "wrap",
            "location": 47,
            "return": [],
            "arguments": {
                "v": [],
                "ds": []
            }
        },
        "proxy.convert.conv": {
            "name": "conv",
            "location": 59,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/roles.py": {
        "Roles.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Roles.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        }
    },
    "algoneer-master/algoneer/dataset/__init__.py": {},
    "algoneer-master/algoneer/methods/__init__.py": {},
    "algoneer-master/algoneer/methods/blackbox/adversarial.py": {},
    "algoneer-master/algoneer/methods/blackbox/ale.py": {
        "ALEResult.name": {
            "name": "name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ALEResult.version": {
            "name": "version",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ALE.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ALE.run": {
            "name": "run",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": []
            }
        },
        "ALE.run.ALE": {
            "name": "ALE",
            "location": 53,
            "return": [],
            "arguments": {
                "ds": [],
                "model": [],
                "column": []
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/counterfactual.py": {},
    "algoneer-master/algoneer/methods/blackbox/pdp.py": {
        "PDPResult.name": {
            "name": "name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PDPResult.version": {
            "name": "version",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PDP.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PDP.run": {
            "name": "run",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": []
            }
        },
        "PDP.run.pdp": {
            "name": "pdp",
            "location": 81,
            "return": [],
            "arguments": {
                "ds": [],
                "model": [],
                "column": []
            }
        },
        "PDP.run.pdp_correlated": {
            "name": "pdp_correlated",
            "location": 106,
            "return": [],
            "arguments": {
                "ds": [],
                "model": [],
                "column_a": [],
                "column_b": []
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/predictions.py": {
        "PredictionsDatapointResult.name": {
            "name": "name",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionsDatapointResult.version": {
            "name": "version",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionsResult.name": {
            "name": "name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionsResult.version": {
            "name": "version",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Predictions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Predictions.run": {
            "name": "run",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": []
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/__init__.py": {},
    "algoneer-master/algoneer/methods/blackbox/shap/force.py": {
        "force_plot": {
            "name": "force_plot",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "base_value": [],
                "shap_values": [],
                "features": [],
                "feature_names": [],
                "out_names": [],
                "link": [],
                "plot_cmap": [],
                "show": [],
                "figsize": [],
                "ordering_keys": [],
                "ordering_keys_time_format": [],
                "text_rotation": []
            }
        },
        "ensure_not_numpy": {
            "name": "ensure_not_numpy",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "verify_valid_cmap": {
            "name": "verify_valid_cmap",
            "location": 233,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cmap": [
                    "_T0"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 248,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "e": [],
                "plot_cmap": [],
                "figsize": [],
                "show": [],
                "ordering_keys": [],
                "ordering_keys_time_format": [],
                "text_rotation": []
            }
        },
        "Explanation.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdditiveExplanation.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_value": [],
                "out_value": [],
                "effects": [],
                "effects_var": [],
                "instance": [],
                "link": [],
                "model": [],
                "data": []
            }
        },
        "try_list_display": {
            "name": "try_list_display",
            "location": 284,
            "return": [
                "Any"
            ],
            "arguments": {
                "e": []
            }
        },
        "SimpleListVisualizer.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "AdditiveForceVisualizer.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [],
                "plot_cmap": []
            }
        },
        "AdditiveForceArrayVisualizer.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [],
                "plot_cmap": [],
                "ordering_keys": [],
                "ordering_keys_time_format": []
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/shap/labels.py": {},
    "algoneer-master/algoneer/methods/blackbox/shap/shap.py": {
        "SHAPDatapointResult.name": {
            "name": "name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SHAPDatapointResult.version": {
            "name": "version",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SHAPModelResult.name": {
            "name": "name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SHAPModelResult.version": {
            "name": "version",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SHAP.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SHAP.run": {
            "name": "run",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": []
            }
        }
    },
    "algoneer-master/algoneer/methods/blackbox/shap/__init__.py": {},
    "algoneer-master/algoneer/methods/dataset/anomalies.py": {},
    "algoneer-master/algoneer/methods/dataset/correlations.py": {},
    "algoneer-master/algoneer/methods/dataset/coverage.py": {},
    "algoneer-master/algoneer/methods/dataset/distribution.py": {},
    "algoneer-master/algoneer/methods/dataset/survey.py": {},
    "algoneer-master/algoneer/methods/dataset/__init__.py": {},
    "algoneer-master/algoneer/model/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "algorithm": [],
                "dataset": []
            }
        },
        "Model.dump": {
            "name": "dump",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.load": {
            "name": "load",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Model.data": {
            "name": "data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.hash": {
            "name": "hash",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "Model.dataset": {
            "name": "dataset",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.algorithm": {
            "name": "algorithm",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer/model/sklearn.py": {
        "SklearnModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "algorithm": [],
                "dataset": [],
                "estimator": []
            }
        },
        "SklearnModel._predict_raw": {
            "name": "_predict_raw",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "SklearnModel.data": {
            "name": "data",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SklearnModel.predict": {
            "name": "predict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        }
    },
    "algoneer-master/algoneer/model/__init__.py": {},
    "algoneer-master/algoneer/result/algorithm_result.py": {
        "AlgorithmResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "algorithm": [],
                "result": []
            }
        },
        "AlgorithmResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmResult.load": {
            "name": "load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/result/datapoint_model_result.py": {
        "DatapointModelResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "datapoint": [],
                "model": [],
                "result": []
            }
        },
        "DatapointModelResult.dump": {
            "name": "dump",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatapointModelResult.load": {
            "name": "load",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/result/dataset_model_result.py": {
        "DatasetModelResult.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": [],
                "result": [],
                "datapoint_results": []
            }
        },
        "DatasetModelResult.dataset": {
            "name": "dataset",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.model": {
            "name": "model",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.dump": {
            "name": "dump",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.load": {
            "name": "load",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/result/dataset_result.py": {
        "DatasetResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "result": []
            }
        },
        "DatasetResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetResult.load": {
            "name": "load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/result/model_result.py": {
        "ModelResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "result": []
            }
        },
        "ModelResult.dump": {
            "name": "dump",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelResult.load": {
            "name": "load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "algoneer-master/algoneer/result/result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Result.dump": {
            "name": "dump",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.load": {
            "name": "load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Result.name": {
            "name": "name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.version": {
            "name": "version",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.data": {
            "name": "data",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.format": {
            "name": "format",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        },
        "ResultProxy.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Result"
                ]
            }
        },
        "ResultProxy.result": {
            "name": "result",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.name": {
            "name": "name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.version": {
            "name": "version",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.data": {
            "name": "data",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.format": {
            "name": "format",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/result_collection.py": {
        "ResultCollection.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": []
            }
        },
        "ResultCollection.collection": {
            "name": "collection",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultCollection.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "algoneer.result.result.ResultProxy"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ResultCollection.__setitem__": {
            "name": "__setitem__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "algoneer.result.result.ResultProxy"
                ]
            }
        }
    },
    "algoneer-master/algoneer/result/__init__.py": {},
    "algoneer-master/algoneer/utils/conditional_import.py": {
        "CI.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "CI.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CI.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        }
    },
    "algoneer-master/algoneer/utils/hashing.py": {
        "get_hash": {
            "name": "get_hash",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "node": [],
                "fields": [],
                "exclude": []
            }
        },
        "Hasher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hasher.add": {
            "name": "add",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Hasher.digest": {
            "name": "digest",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_hash.add_to_hash": {
            "name": "add_to_hash",
            "location": 46,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "algoneer-master/algoneer/utils/__init__.py": {},
    "algoneer-master/algoneer_tests/__init__.py": {},
    "algoneer-master/algoneer_tests/api/test_api.py": {
        "TestClient.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestClient.post": {
            "name": "post",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestClient.patch": {
            "name": "patch",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestClient.delete": {
            "name": "delete",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "ApiTest.test_objects": {
            "name": "test_objects",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/api/__init__.py": {},
    "algoneer-master/algoneer_tests/dataschema/test_dataschema.py": {
        "test_dataschema": {
            "name": "test_dataschema",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "algoneer-master/algoneer_tests/dataschema/__init__.py": {},
    "algoneer-master/algoneer_tests/datasets/test_pandas_datasets.py": {
        "PandasDatasetTest.test_sklean": {
            "name": "test_sklean",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/__init__.py": {},
    "algoneer-master/algoneer_tests/methods/blackbox/test_ale.py": {
        "TestALE.test_ale": {
            "name": "test_ale",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_pdp.py": {
        "TestPDP.test_pdp": {
            "name": "test_pdp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_predictions.py": {
        "TestPredictions.test_predictions": {
            "name": "test_predictions",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/test_shap.py": {
        "SHAPTest.test_shap": {
            "name": "test_shap",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/methods/blackbox/__init__.py": {},
    "algoneer-master/algoneer_tests/models/test_sklearn_models.py": {
        "SklearnModelTest.test_sklean": {
            "name": "test_sklean",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "algoneer-master/algoneer_tests/models/__init__.py": {},
    "algoneer-master/docs/source/conf.py": {}
}
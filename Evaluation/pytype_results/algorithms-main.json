{
    "algorithms-main/algorithms/__init__.py": {},
    "algorithms-main/algorithms/dynamic/fibonacci.py": {
        "_fibonacci": {
            "name": "_fibonacci",
            "location": 9,
            "return": [],
            "arguments": {
                "input_number": []
            }
        },
        "fibonacci": {
            "name": "fibonacci",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "input_number": [
                    "int"
                ]
            }
        }
    },
    "algorithms-main/algorithms/dynamic/__init__.py": {},
    "algorithms-main/algorithms/mathematics/binomial.py": {
        "factorial": {
            "name": "factorial",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "int"
                ]
            }
        },
        "n_choose_r": {
            "name": "n_choose_r",
            "location": 21,
            "return": [
                "float"
            ],
            "arguments": {
                "total_amount": [
                    "int"
                ],
                "chosen_amount": [
                    "int"
                ]
            }
        },
        "fast_binomial": {
            "name": "fast_binomial",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "total_amount": [
                    "int"
                ],
                "chosen_amount": [
                    "int"
                ]
            }
        }
    },
    "algorithms-main/algorithms/mathematics/euler_totient.py": {
        "euler_totient": {
            "name": "euler_totient",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "positive_int": []
            }
        }
    },
    "algorithms-main/algorithms/mathematics/exponents.py": {
        "_is_even": {
            "name": "_is_even",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "questionable_int": []
            }
        },
        "_is_negative": {
            "name": "_is_negative",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "questionable_int": []
            }
        },
        "_is_zero": {
            "name": "_is_zero",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "questionable_int": []
            }
        },
        "_is_one": {
            "name": "_is_one",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "questionable_int": []
            }
        },
        "recursive_fast_exponentiation": {
            "name": "recursive_fast_exponentiation",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "base": [],
                "exponent": []
            }
        },
        "iterative_fast_exponentiation": {
            "name": "iterative_fast_exponentiation",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "base": [],
                "exponent": []
            }
        }
    },
    "algorithms-main/algorithms/mathematics/prime_factors.py": {
        "prime_factorization": {
            "name": "prime_factorization",
            "location": 9,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "natural_number": []
            }
        }
    },
    "algorithms-main/algorithms/mathematics/__init__.py": {},
    "algorithms-main/algorithms/misc/nth_smallest.py": {
        "nth_smallest": {
            "name": "nth_smallest",
            "location": 10,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "unsorted_array": [
                    "List[int]"
                ],
                "nth_to_find": [
                    "int"
                ]
            }
        }
    },
    "algorithms-main/algorithms/misc/order.py": {
        "order": {
            "name": "order",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "algorithms-main/algorithms/misc/reverse.py": {
        "reverse": {
            "name": "reverse",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "algorithms-main/algorithms/misc/simple_compression.py": {
        "simple_compression": {
            "name": "simple_compression",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "sequence": [
                    "str"
                ]
            }
        }
    },
    "algorithms-main/algorithms/misc/to_camel_case.py": {
        "to_camel_case": {
            "name": "to_camel_case",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "predicate": [
                    "Tuple[(str, str)]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/misc/__init__.py": {},
    "algorithms-main/algorithms/sorts/bubble_sort.py": {
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 8,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "arr": [
                    "List[int]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/heap_sort.py": {
        "heap_sort": {
            "name": "heap_sort",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "array": [
                    "List[int]"
                ]
            }
        },
        "_sift_down": {
            "name": "_sift_down",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [
                    "List[int]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "_heapify": {
            "name": "_heapify",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [
                    "List[int]"
                ],
                "length": [
                    "int"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/insertion_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "arr": [
                    "List[int]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/merge_sort.py": {
        "merge_sort": {
            "name": "merge_sort",
            "location": 7,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "arr": [
                    "List[int]"
                ]
            }
        },
        "_merge": {
            "name": "_merge",
            "location": 30,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "left": [
                    "List[int]"
                ],
                "right": [
                    "List[int]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/pigeonhole_sort.py": {
        "pigeonhole_sort": {
            "name": "pigeonhole_sort",
            "location": 9,
            "return": [
                "List[Tuple[(int, str)]]"
            ],
            "arguments": {
                "arr": [
                    "List[Tuple[(int, str)]]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/selection_sort.py": {
        "selection_sort": {
            "name": "selection_sort",
            "location": 8,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "arr": [
                    "List[int]"
                ]
            }
        }
    },
    "algorithms-main/algorithms/sorts/__init__.py": {},
    "algorithms-main/algorithms/strings/knuth_morris_pratt.py": {
        "_prefix_kmp": {
            "name": "_prefix_kmp",
            "location": 11,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ]
            }
        },
        "kmp": {
            "name": "kmp",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "pattern": [
                    "str"
                ]
            }
        }
    },
    "algorithms-main/algorithms/strings/valid_delimiters.py": {
        "valid_delimiters": {
            "name": "valid_delimiters",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "algorithms-main/algorithms/strings/__init__.py": {},
    "algorithms-main/tests/binomial_test.py": {
        "test_factorial": {
            "name": "test_factorial",
            "location": 23,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_n_choose_r": {
            "name": "test_n_choose_r",
            "location": 45,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_fast_binomial": {
            "name": "test_fast_binomial",
            "location": 72,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/euler_totient_test.py": {
        "test_euler_totient": {
            "name": "test_euler_totient",
            "location": 24,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/exponents_test.py": {
        "test_iter_exponent": {
            "name": "test_iter_exponent",
            "location": 22,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_recur_exponent": {
            "name": "test_recur_exponent",
            "location": 44,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/fibonacci_test.py": {
        "test_fibonacci": {
            "name": "test_fibonacci",
            "location": 25,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/kmp_test.py": {
        "test_kmp": {
            "name": "test_kmp",
            "location": 21,
            "return": [],
            "arguments": {
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/nth_smallest_test.py": {
        "test_nth_smallest": {
            "name": "test_nth_smallest",
            "location": 25,
            "return": [],
            "arguments": {
                "test_name": [],
                "input_array": [],
                "test_parameter": [],
                "expected_value": []
            }
        }
    },
    "algorithms-main/tests/order_test.py": {
        "test_order": {
            "name": "test_order",
            "location": 22,
            "return": [],
            "arguments": {
                "name": [],
                "param": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/pigeonhole_sort_test.py": {
        "test_pigeonhole_sort": {
            "name": "test_pigeonhole_sort",
            "location": 60,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_original_array_is_not_mutated": {
            "name": "test_original_array_is_not_mutated",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "algorithms-main/tests/prime_factors_test.py": {
        "test_prime_factors": {
            "name": "test_prime_factors",
            "location": 26,
            "return": [],
            "arguments": {
                "name": [],
                "input_parameter": [],
                "expected_value": []
            }
        }
    },
    "algorithms-main/tests/reverse_test.py": {
        "test_reverse_function": {
            "name": "test_reverse_function",
            "location": 24,
            "return": [],
            "arguments": {
                "test_name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/simple_compression_test.py": {
        "test_simple_compression": {
            "name": "test_simple_compression",
            "location": 24,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/sorts_test.py": {
        "test_bubble_sort": {
            "name": "test_bubble_sort",
            "location": 21,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_insertion_sort": {
            "name": "test_insertion_sort",
            "location": 34,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_heap_sort": {
            "name": "test_heap_sort",
            "location": 51,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_merge_sort": {
            "name": "test_merge_sort",
            "location": 64,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        },
        "test_selection_sort": {
            "name": "test_selection_sort",
            "location": 77,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/to_camel_case_test.py": {
        "test_to_camel_case": {
            "name": "test_to_camel_case",
            "location": 19,
            "return": [],
            "arguments": {
                "name": [],
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/valid_delimiters_test.py": {
        "test_valid_demimiters": {
            "name": "test_valid_demimiters",
            "location": 13,
            "return": [],
            "arguments": {
                "inputs": [],
                "expected": []
            }
        }
    },
    "algorithms-main/tests/__init__.py": {}
}
{
    "allennlp-dureader-master/setup.py": {},
    "allennlp-dureader-master/allennlp/run.py": {},
    "allennlp-dureader-master/allennlp/version.py": {},
    "allennlp-dureader-master/allennlp/__init__.py": {},
    "allennlp-dureader-master/allennlp/commands/dry_run.py": {
        "dry_run_from_args": {
            "name": "dry_run_from_args",
            "location": 74,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "dry_run_from_params": {
            "name": "dry_run_from_params",
            "location": 86,
            "return": [],
            "arguments": {
                "params": [],
                "serialization_dir": []
            }
        },
        "verbosely_create_vocabulary": {
            "name": "verbosely_create_vocabulary",
            "location": 125,
            "return": [],
            "arguments": {
                "vocab_params": [],
                "instances": []
            }
        },
        "DryRun.add_subparser": {
            "name": "add_subparser",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/elmo.py": {
        "empty_embedding": {
            "name": "empty_embedding",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "elmo_command": {
            "name": "elmo_command",
            "location": 303,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Elmo.add_subparser": {
            "name": "add_subparser",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        },
        "ElmoEmbedder.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "options_file": [],
                "weight_file": [],
                "cuda_device": []
            }
        },
        "ElmoEmbedder.batch_to_ids": {
            "name": "batch_to_ids",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "ElmoEmbedder.batch_to_embeddings": {
            "name": "batch_to_embeddings",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "ElmoEmbedder.embed_sentence": {
            "name": "embed_sentence",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "ElmoEmbedder.embed_batch": {
            "name": "embed_batch",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "ElmoEmbedder.embed_sentences": {
            "name": "embed_sentences",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_size": []
            }
        },
        "ElmoEmbedder.embed_file": {
            "name": "embed_file",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "input_file": [],
                "output_file_path": [],
                "output_format": [],
                "batch_size": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/evaluate.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 82,
            "return": [],
            "arguments": {
                "model": [],
                "instances": [],
                "data_iterator": [],
                "cuda_device": []
            }
        },
        "evaluate_from_args": {
            "name": "evaluate_from_args",
            "location": 100,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Evaluate.add_subparser": {
            "name": "add_subparser",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/fine_tune.py": {
        "fine_tune_model_from_args": {
            "name": "fine_tune_model_from_args",
            "location": 67,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "fine_tune_model_from_file_paths": {
            "name": "fine_tune_model_from_file_paths",
            "location": 78,
            "return": [],
            "arguments": {
                "model_archive_path": [],
                "config_file": [],
                "serialization_dir": [],
                "overrides": [],
                "file_friendly_logging": []
            }
        },
        "fine_tune_model": {
            "name": "fine_tune_model",
            "location": 113,
            "return": [],
            "arguments": {
                "model": [],
                "params": [],
                "serialization_dir": [],
                "file_friendly_logging": []
            }
        },
        "FineTune.add_subparser": {
            "name": "add_subparser",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/make_vocab.py": {
        "make_vocab_from_args": {
            "name": "make_vocab_from_args",
            "location": 58,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "make_vocab_from_params": {
            "name": "make_vocab_from_params",
            "location": 69,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "MakeVocab.add_subparser": {
            "name": "add_subparser",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/predict.py": {
        "_get_predictor": {
            "name": "_get_predictor",
            "location": 101,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_run": {
            "name": "_run",
            "location": 118,
            "return": [],
            "arguments": {
                "predictor": [],
                "input_file": [],
                "output_file": [],
                "batch_size": [],
                "print_to_console": [],
                "cuda_device": []
            }
        },
        "_predict": {
            "name": "_predict",
            "location": 158,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Predict.add_subparser": {
            "name": "add_subparser",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        },
        "_run._run_predictor": {
            "name": "_run_predictor",
            "location": 125,
            "return": [],
            "arguments": {
                "batch_data": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/serve.py": {
        "_serve": {
            "name": "_serve",
            "location": 72,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Serve.add_subparser": {
            "name": "add_subparser",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/subcommand.py": {
        "Subcommand.add_subparser": {
            "name": "add_subparser",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/train.py": {
        "train_model_from_args": {
            "name": "train_model_from_args",
            "location": 91,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "train_model_from_file": {
            "name": "train_model_from_file",
            "location": 102,
            "return": [],
            "arguments": {
                "parameter_filename": [],
                "serialization_dir": [],
                "overrides": [],
                "file_friendly_logging": [],
                "recover": []
            }
        },
        "datasets_from_params": {
            "name": "datasets_from_params",
            "location": 132,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "create_serialization_dir": {
            "name": "create_serialization_dir",
            "location": 164,
            "return": [],
            "arguments": {
                "params": [],
                "serialization_dir": [],
                "recover": []
            }
        },
        "train_model": {
            "name": "train_model",
            "location": 226,
            "return": [],
            "arguments": {
                "params": [],
                "serialization_dir": [],
                "file_friendly_logging": [],
                "recover": []
            }
        },
        "Train.add_subparser": {
            "name": "add_subparser",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/commands/__init__.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {
                "prog": [],
                "subcommand_overrides": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/checks.py": {
        "log_pytorch_version_info": {
            "name": "log_pytorch_version_info",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_dimensions_match": {
            "name": "check_dimensions_match",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension_1": [],
                "dimension_2": [],
                "dim_1_name": [],
                "dim_2_name": []
            }
        },
        "ConfigurationError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ConfigurationError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/file_utils.py": {
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "etag": []
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 40,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "cached_path": {
            "name": "cached_path",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "url_or_filename": [],
                "cache_dir": []
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "cache_dir": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/params.py": {
        "pop_choice": {
            "name": "pop_choice",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "params": [],
                "key": [],
                "choices": [],
                "default_to_first_choice": [],
                "history": []
            }
        },
        "_replace_none": {
            "name": "_replace_none",
            "location": 314,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "dictionary": [
                    "_T0@@"
                ]
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "history": [],
                "loading_from_archive": [],
                "files_to_archive": []
            }
        },
        "Params.add_file_to_archive": {
            "name": "add_file_to_archive",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Params.pop": {
            "name": "pop",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Params.pop_int": {
            "name": "pop_int",
            "location": 104,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Params.pop_float": {
            "name": "pop_float",
            "location": 114,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Params.pop_bool": {
            "name": "pop_bool",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Params.get": {
            "name": "get",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Params.pop_choice": {
            "name": "pop_choice",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "choices": [],
                "default_to_first_choice": []
            }
        },
        "Params.as_dict": {
            "name": "as_dict",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "quiet": []
            }
        },
        "Params.as_flat_dict": {
            "name": "as_flat_dict",
            "location": 215,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.duplicate": {
            "name": "duplicate",
            "location": 232,
            "return": [
                "_TParams@@Params@@"
            ],
            "arguments": {
                "self": [
                    "_TParams@@Params@@"
                ]
            }
        },
        "Params.assert_empty": {
            "name": "assert_empty",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": []
            }
        },
        "Params.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Params.__setitem__": {
            "name": "__setitem__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Params.__delitem__": {
            "name": "__delitem__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Params.__iter__": {
            "name": "__iter__",
            "location": 261,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.__len__": {
            "name": "__len__",
            "location": 264,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params._check_is_dict": {
            "name": "_check_is_dict",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "new_history": [],
                "value": []
            }
        },
        "Params.from_file": {
            "name": "from_file",
            "location": 279,
            "return": [
                "Params"
            ],
            "arguments": {
                "params_file": [],
                "params_overrides": []
            }
        },
        "Params.as_dict.log_recursively": {
            "name": "log_recursively",
            "location": 200,
            "return": [],
            "arguments": {
                "parameters": [],
                "history": []
            }
        },
        "Params.as_flat_dict.recurse": {
            "name": "recurse",
            "location": 221,
            "return": [],
            "arguments": {
                "parameters": [],
                "path": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/registrable.py": {
        "Registrable.register": {
            "name": "register",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Registrable.by_name": {
            "name": "by_name",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Registrable.list_available": {
            "name": "list_available",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Registrable.register.add_subclass_to_registry": {
            "name": "add_subclass_to_registry",
            "location": 43,
            "return": [],
            "arguments": {
                "subclass": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/squad_eval.py": {
        "normalize_answer": {
            "name": "normalize_answer",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "f1_score": {
            "name": "f1_score",
            "location": 30,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "prediction": [],
                "ground_truth": []
            }
        },
        "exact_match_score": {
            "name": "exact_match_score",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "prediction": [],
                "ground_truth": []
            }
        },
        "metric_max_over_ground_truths": {
            "name": "metric_max_over_ground_truths",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "metric_fn": [],
                "prediction": [],
                "ground_truths": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "dataset": [],
                "predictions": []
            }
        },
        "normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 14,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 17,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 20,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.lower": {
            "name": "lower",
            "location": 24,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/tee_logger.py": {
        "replace_cr_with_newline": {
            "name": "replace_cr_with_newline",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "message": []
            }
        },
        "TeeLogger.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "terminal": [],
                "file_friendly_terminal_output": []
            }
        },
        "TeeLogger.write": {
            "name": "write",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TeeLogger.flush": {
            "name": "flush",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/tqdm.py": {
        "Tqdm.set_default_mininterval": {
            "name": "set_default_mininterval",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        },
        "Tqdm.set_slower_interval": {
            "name": "set_slower_interval",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "use_slower_interval": []
            }
        },
        "Tqdm.tqdm": {
            "name": "tqdm",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "allennlp-dureader-master/allennlp/common/util.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "group_by_count": {
            "name": "group_by_count",
            "location": 61,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "iterable": [],
                "count": [],
                "default_value": []
            }
        },
        "lazy_groups_of": {
            "name": "lazy_groups_of",
            "location": 77,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "iterator": [],
                "group_size": []
            }
        },
        "pad_sequence_to_length": {
            "name": "pad_sequence_to_length",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "sequence": [],
                "desired_length": [],
                "default_value": [],
                "padding_on_right": []
            }
        },
        "add_noise_to_dict_values": {
            "name": "add_noise_to_dict_values",
            "location": 128,
            "return": [
                "dict"
            ],
            "arguments": {
                "dictionary": [],
                "noise_param": []
            }
        },
        "namespace_match": {
            "name": "namespace_match",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [],
                "namespace": []
            }
        },
        "prepare_environment": {
            "name": "prepare_environment",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "prepare_global_logging": {
            "name": "prepare_global_logging",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "serialization_dir": [],
                "file_friendly_logging": []
            }
        },
        "get_spacy_model": {
            "name": "get_spacy_model",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "spacy_model_name": [],
                "pos_tags": [],
                "parse": [],
                "ner": []
            }
        },
        "import_submodules": {
            "name": "import_submodules",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "package_name": []
            }
        },
        "peak_memory_mb": {
            "name": "peak_memory_mb",
            "location": 260,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "gpu_memory_mb": {
            "name": "gpu_memory_mb",
            "location": 285,
            "return": [
                "Dict[(int, int)]"
            ],
            "arguments": {}
        },
        "ensure_list": {
            "name": "ensure_list",
            "location": 314,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "iterable": [
                    "_T0@@"
                ]
            }
        },
        "is_lazy": {
            "name": "is_lazy",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/__init__.py": {},
    "allennlp-dureader-master/allennlp/common/testing/model_test_case.py": {
        "ModelTestCase.set_up_model": {
            "name": "set_up_model",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "param_file": [],
                "dataset_file": []
            }
        },
        "ModelTestCase.ensure_model_can_train_save_and_load": {
            "name": "ensure_model_can_train_save_and_load",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "param_file": [],
                "tolerance": [],
                "cuda_device": []
            }
        },
        "ModelTestCase.assert_fields_equal": {
            "name": "assert_fields_equal",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "field1": [],
                "field2": [],
                "name": [],
                "tolerance": []
            }
        },
        "ModelTestCase.check_model_computes_gradients_correctly": {
            "name": "check_model_computes_gradients_correctly",
            "location": 132,
            "return": [],
            "arguments": {
                "model": [],
                "model_batch": []
            }
        },
        "ModelTestCase.ensure_batch_predictions_are_consistent": {
            "name": "ensure_batch_predictions_are_consistent",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/testing/test_case.py": {
        "AllenNlpTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllenNlpTestCase.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/common/testing/__init__.py": {},
    "allennlp-dureader-master/allennlp/custom_extensions/build.py": {},
    "allennlp-dureader-master/allennlp/custom_extensions/__init__.py": {},
    "allennlp-dureader-master/allennlp/custom_extensions/_ext/__init__.py": {},
    "allennlp-dureader-master/allennlp/custom_extensions/_ext/highway_lstm_layer/__init__.py": {
        "_import_symbols": {
            "name": "_import_symbols",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "locals": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset.py": {
        "Batch.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "Batch._check_types": {
            "name": "_check_types",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.as_tensor_dict": {
            "name": "as_tensor_dict",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": [],
                "verbose": []
            }
        },
        "Batch.__iter__": {
            "name": "__iter__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batch.index_instances": {
            "name": "index_instances",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/instance.py": {
        "Instance.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "Instance.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Instance.index_fields": {
            "name": "index_fields",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "Instance.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.as_tensor_dict": {
            "name": "as_tensor_dict",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "Instance.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/vocabulary.py": {
        "_read_pretrained_words": {
            "name": "_read_pretrained_words",
            "location": 94,
            "return": [],
            "arguments": {
                "embeddings_filename": []
            }
        },
        "_NamespaceDependentDefaultDict.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "non_padded_namespaces": [],
                "padded_function": [],
                "non_padded_function": []
            }
        },
        "_NamespaceDependentDefaultDict.__missing__": {
            "name": "__missing__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_TokenToIndexDefaultDict.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "non_padded_namespaces": [],
                "padding_token": [],
                "oov_token": []
            }
        },
        "_IndexToTokenDefaultDict.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "non_padded_namespaces": [],
                "padding_token": [],
                "oov_token": []
            }
        },
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "counter": [],
                "min_count": [],
                "max_vocab_size": [],
                "non_padded_namespaces": [],
                "pretrained_files": [],
                "only_include_pretrained_words": []
            }
        },
        "Vocabulary.save_to_files": {
            "name": "save_to_files",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "Vocabulary.from_files": {
            "name": "from_files",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "directory": []
            }
        },
        "Vocabulary.set_from_file": {
            "name": "set_from_file",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "is_padded": [],
                "oov_token": [],
                "namespace": []
            }
        },
        "Vocabulary.from_instances": {
            "name": "from_instances",
            "location": 316,
            "return": [],
            "arguments": {
                "cls": [],
                "instances": [],
                "min_count": [],
                "max_vocab_size": [],
                "non_padded_namespaces": [],
                "pretrained_files": [],
                "only_include_pretrained_words": []
            }
        },
        "Vocabulary.from_params": {
            "name": "from_params",
            "location": 342,
            "return": [],
            "arguments": {
                "cls": [],
                "params": [],
                "instances": []
            }
        },
        "Vocabulary.add_token_to_namespace": {
            "name": "add_token_to_namespace",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "namespace": []
            }
        },
        "Vocabulary.get_index_to_token_vocabulary": {
            "name": "get_index_to_token_vocabulary",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "Vocabulary.get_token_index": {
            "name": "get_token_index",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "namespace": []
            }
        },
        "Vocabulary.get_token_from_index": {
            "name": "get_token_from_index",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "namespace": []
            }
        },
        "Vocabulary.get_vocab_size": {
            "name": "get_vocab_size",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "Vocabulary.__eq__": {
            "name": "__eq__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vocabulary.__str__": {
            "name": "__str__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/dataset_readers/conll2003.py": {
        "_is_divider": {
            "name": "_is_divider",
            "location": 19,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "Conll2003DatasetReader.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "token_indexers": [],
                "tag_label": [],
                "feature_labels": [],
                "lazy": [],
                "coding_scheme": []
            }
        },
        "Conll2003DatasetReader._read": {
            "name": "_read",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Conll2003DatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Conll2003DatasetReader.from_params": {
            "name": "from_params",
            "location": 152,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/dataset_reader.py": {
        "_LazyInstances.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "instance_generator": []
            }
        },
        "_LazyInstances.__iter__": {
            "name": "__iter__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReader.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "DatasetReader.read": {
            "name": "read",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "DatasetReader._read": {
            "name": "_read",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "DatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetReader.from_params": {
            "name": "from_params",
            "location": 108,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/language_modeling.py": {
        "LanguageModelingReader.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "tokens_per_instance": [],
                "tokenizer": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "LanguageModelingReader._read": {
            "name": "_read",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "LanguageModelingReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "LanguageModelingReader.from_params": {
            "name": "from_params",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/penn_tree_bank.py": {
        "PennTreeBankConstituencySpanDatasetReader.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "token_indexers": [],
                "use_pos_tags": [],
                "lazy": []
            }
        },
        "PennTreeBankConstituencySpanDatasetReader._read": {
            "name": "_read",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "PennTreeBankConstituencySpanDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "pos_tags": [],
                "gold_tree": []
            }
        },
        "PennTreeBankConstituencySpanDatasetReader._strip_functional_tags": {
            "name": "_strip_functional_tags",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "PennTreeBankConstituencySpanDatasetReader._get_gold_spans": {
            "name": "_get_gold_spans",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "index": [],
                "typed_spans": []
            }
        },
        "PennTreeBankConstituencySpanDatasetReader.from_params": {
            "name": "from_params",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/semantic_role_labeling.py": {
        "SrlReader.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "token_indexers": [],
                "domain_identifier": [],
                "lazy": []
            }
        },
        "SrlReader._read": {
            "name": "_read",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SrlReader._ontonotes_subset": {
            "name": "_ontonotes_subset",
            "location": 77,
            "return": [],
            "arguments": {
                "ontonotes_reader": [],
                "file_path": [],
                "domain_identifier": []
            }
        },
        "SrlReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "verb_label": [],
                "tags": []
            }
        },
        "SrlReader.from_params": {
            "name": "from_params",
            "location": 108,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/seq2seq.py": {
        "Seq2SeqDatasetReader.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "source_tokenizer": [],
                "target_tokenizer": [],
                "source_token_indexers": [],
                "target_token_indexers": [],
                "source_add_start_token": [],
                "lazy": []
            }
        },
        "Seq2SeqDatasetReader._read": {
            "name": "_read",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Seq2SeqDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "source_string": [],
                "target_string": []
            }
        },
        "Seq2SeqDatasetReader.from_params": {
            "name": "from_params",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/sequence_tagging.py": {
        "SequenceTaggingDatasetReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "word_tag_delimiter": [],
                "token_delimiter": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "SequenceTaggingDatasetReader._read": {
            "name": "_read",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SequenceTaggingDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SequenceTaggingDatasetReader.from_params": {
            "name": "from_params",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/snli.py": {
        "SnliReader.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "tokenizer": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "SnliReader._read": {
            "name": "_read",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SnliReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "premise": [],
                "hypothesis": [],
                "label": []
            }
        },
        "SnliReader.from_params": {
            "name": "from_params",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/stanford_sentiment_tree_bank.py": {
        "StanfordSentimentTreeBankDatasetReader.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "token_indexers": [],
                "use_subtrees": [],
                "granularity": [],
                "lazy": []
            }
        },
        "StanfordSentimentTreeBankDatasetReader._read": {
            "name": "_read",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "StanfordSentimentTreeBankDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "sentiment": []
            }
        },
        "StanfordSentimentTreeBankDatasetReader.from_params": {
            "name": "from_params",
            "location": 134,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/dataset_readers/coreference_resolution/conll.py": {
        "canonicalize_clusters": {
            "name": "canonicalize_clusters",
            "location": 19,
            "return": [],
            "arguments": {
                "clusters": []
            }
        },
        "ConllCorefReader.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "max_span_width": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "ConllCorefReader._read": {
            "name": "_read",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "ConllCorefReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": [],
                "gold_clusters": []
            }
        },
        "ConllCorefReader.from_params": {
            "name": "from_params",
            "location": 180,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "ConllCorefReader._normalize_word": {
            "name": "_normalize_word",
            "location": 188,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/coreference_resolution/winobias.py": {
        "WinobiasReader.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "max_span_width": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "WinobiasReader._read": {
            "name": "_read",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "WinobiasReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "gold_clusters": []
            }
        },
        "WinobiasReader.from_params": {
            "name": "from_params",
            "location": 162,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/coreference_resolution/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/dataset_readers/dataset_utils/ontonotes.py": {
        "OntonotesSentence.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_id": [],
                "sentence_id": [],
                "words": [],
                "pos_tags": [],
                "parse_tree": [],
                "predicate_lemmas": [],
                "predicate_framenet_ids": [],
                "word_senses": [],
                "speakers": [],
                "named_entities": [],
                "srl_frames": [],
                "coref_spans": []
            }
        },
        "Ontonotes.dataset_iterator": {
            "name": "dataset_iterator",
            "location": 176,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Ontonotes.dataset_path_iterator": {
            "name": "dataset_path_iterator",
            "location": 184,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "Ontonotes.dataset_document_iterator": {
            "name": "dataset_document_iterator",
            "location": 200,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Ontonotes.sentence_iterator": {
            "name": "sentence_iterator",
            "location": 227,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Ontonotes._conll_rows_to_sentence": {
            "name": "_conll_rows_to_sentence",
            "location": 235,
            "return": [
                "OntonotesSentence"
            ],
            "arguments": {
                "self": [],
                "conll_rows": []
            }
        },
        "Ontonotes._process_coref_span_annotations_for_word": {
            "name": "_process_coref_span_annotations_for_word",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [],
                "word_index": [],
                "clusters": [],
                "coref_stacks": []
            }
        },
        "Ontonotes._process_span_annotations_for_word": {
            "name": "_process_span_annotations_for_word",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations": [],
                "span_labels": [],
                "current_span_labels": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/dataset_utils/span_utils.py": {
        "enumerate_spans": {
            "name": "enumerate_spans",
            "location": 11,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "sentence": [],
                "offset": [],
                "max_span_width": [],
                "min_span_width": [],
                "filter_function": []
            }
        },
        "bio_tags_to_spans": {
            "name": "bio_tags_to_spans",
            "location": 60,
            "return": [
                "List[Tuple[(Any, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "tag_sequence": [],
                "classes_to_ignore": []
            }
        },
        "bioul_tags_to_spans": {
            "name": "bioul_tags_to_spans",
            "location": 132,
            "return": [
                "List[Tuple[(Any, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "tag_sequence": [],
                "classes_to_ignore": []
            }
        },
        "iob1_to_bioul": {
            "name": "iob1_to_bioul",
            "location": 176,
            "return": [
                "list"
            ],
            "arguments": {
                "tag_sequence": []
            }
        },
        "iob1_to_bioul.replace_label": {
            "name": "replace_label",
            "location": 196,
            "return": [],
            "arguments": {
                "full_label": [],
                "new_label": []
            }
        },
        "iob1_to_bioul.pop_replace_append": {
            "name": "pop_replace_append",
            "location": 202,
            "return": [],
            "arguments": {
                "in_stack": [],
                "out_stack": [],
                "new_label": []
            }
        },
        "iob1_to_bioul.process_stack": {
            "name": "process_stack",
            "location": 209,
            "return": [],
            "arguments": {
                "stack": [],
                "out_stack": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/dataset_utils/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/dataset_readers/reading_comprehension/squad.py": {
        "SquadReader.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "tokenizer": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "SquadReader._read": {
            "name": "_read",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SquadReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "question_text": [],
                "passage_text": [],
                "char_spans": [],
                "answer_texts": [],
                "passage_tokens": []
            }
        },
        "SquadReader.from_params": {
            "name": "from_params",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/reading_comprehension/triviaqa.py": {
        "TriviaQaReader.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "base_tarball_path": [],
                "unfiltered_tarball_path": [],
                "tokenizer": [],
                "token_indexers": [],
                "lazy": []
            }
        },
        "TriviaQaReader._read": {
            "name": "_read",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "TriviaQaReader.pick_paragraphs": {
            "name": "pick_paragraphs",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "evidence_files": [],
                "question": [],
                "answer_texts": []
            }
        },
        "TriviaQaReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "question_text": [],
                "passage_text": [],
                "token_spans": [],
                "answer_texts": [],
                "question_tokens": [],
                "passage_tokens": []
            }
        },
        "TriviaQaReader.from_params": {
            "name": "from_params",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/reading_comprehension/util.py": {
        "normalize_text": {
            "name": "normalize_text",
            "location": 22,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "char_span_to_token_span": {
            "name": "char_span_to_token_span",
            "location": 34,
            "return": [],
            "arguments": {
                "token_offsets": [],
                "character_span": []
            }
        },
        "find_valid_answer_spans": {
            "name": "find_valid_answer_spans",
            "location": 95,
            "return": [],
            "arguments": {
                "passage_tokens": [],
                "answer_texts": []
            }
        },
        "make_reading_comprehension_instance": {
            "name": "make_reading_comprehension_instance",
            "location": 136,
            "return": [],
            "arguments": {
                "question_tokens": [],
                "passage_tokens": [],
                "token_indexers": [],
                "passage_text": [],
                "token_spans": [],
                "answer_texts": [],
                "additional_metadata": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/dataset_readers/reading_comprehension/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/fields/array_field.py": {
        "ArrayField.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "padding_value": []
            }
        },
        "ArrayField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayField.as_tensor": {
            "name": "as_tensor",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "ArrayField.empty_field": {
            "name": "empty_field",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayField.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/field.py": {
        "Field.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Field.index": {
            "name": "index",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "Field.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.as_tensor": {
            "name": "as_tensor",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "Field.empty_field": {
            "name": "empty_field",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.batch_tensors": {
            "name": "batch_tensors",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_list": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/index_field.py": {
        "IndexField.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "sequence_field": []
            }
        },
        "IndexField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexField.as_tensor": {
            "name": "as_tensor",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "IndexField.empty_field": {
            "name": "empty_field",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexField.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/label_field.py": {
        "LabelField.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "label_namespace": [],
                "skip_indexing": []
            }
        },
        "LabelField._maybe_warn_for_namespace": {
            "name": "_maybe_warn_for_namespace",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "label_namespace": []
            }
        },
        "LabelField.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "LabelField.index": {
            "name": "index",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "LabelField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelField.as_tensor": {
            "name": "as_tensor",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "LabelField.empty_field": {
            "name": "empty_field",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelField.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/list_field.py": {
        "ListField.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "field_list": []
            }
        },
        "ListField.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "ListField.index": {
            "name": "index",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "ListField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListField.sequence_length": {
            "name": "sequence_length",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListField.as_tensor": {
            "name": "as_tensor",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "ListField.empty_field": {
            "name": "empty_field",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListField.batch_tensors": {
            "name": "batch_tensors",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_list": []
            }
        },
        "ListField.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/metadata_field.py": {
        "MetadataField.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "MetadataField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetadataField.as_tensor": {
            "name": "as_tensor",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "MetadataField.empty_field": {
            "name": "empty_field",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetadataField.batch_tensors": {
            "name": "batch_tensors",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": [],
                "tensor_list": []
            }
        },
        "MetadataField.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/multilabel_field.py": {
        "MultiLabelField.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "label_namespace": [],
                "skip_indexing": [],
                "num_labels": []
            }
        },
        "MultiLabelField._maybe_warn_for_namespace": {
            "name": "_maybe_warn_for_namespace",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "label_namespace": []
            }
        },
        "MultiLabelField.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "MultiLabelField.index": {
            "name": "index",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "MultiLabelField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiLabelField.as_tensor": {
            "name": "as_tensor",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "MultiLabelField.empty_field": {
            "name": "empty_field",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiLabelField.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/sequence_field.py": {
        "SequenceField.sequence_length": {
            "name": "sequence_length",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/sequence_label_field.py": {
        "SequenceLabelField.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "sequence_field": [],
                "label_namespace": []
            }
        },
        "SequenceLabelField._maybe_warn_for_namespace": {
            "name": "_maybe_warn_for_namespace",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "label_namespace": []
            }
        },
        "SequenceLabelField.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "SequenceLabelField.index": {
            "name": "index",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "SequenceLabelField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabelField.as_tensor": {
            "name": "as_tensor",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "SequenceLabelField.empty_field": {
            "name": "empty_field",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabelField.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/span_field.py": {
        "SpanField.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "span_start": [],
                "span_end": [],
                "sequence_field": []
            }
        },
        "SpanField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanField.as_tensor": {
            "name": "as_tensor",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "SpanField.empty_field": {
            "name": "empty_field",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanField.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/text_field.py": {
        "TextField.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "token_indexers": []
            }
        },
        "TextField.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "TextField.index": {
            "name": "index",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "TextField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextField.sequence_length": {
            "name": "sequence_length",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextField.as_tensor": {
            "name": "as_tensor",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "padding_lengths": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "TextField.empty_field": {
            "name": "empty_field",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextField.batch_tensors": {
            "name": "batch_tensors",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_list": []
            }
        },
        "TextField.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/fields/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/iterators/adaptive_iterator.py": {
        "AdaptiveIterator.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "adaptive_memory_usage_constant": [],
                "padding_memory_scaling": [],
                "maximum_batch_size": [],
                "biggest_batch_first": [],
                "batch_size": [],
                "sorting_keys": [],
                "padding_noise": [],
                "instances_per_epoch": [],
                "max_instances_in_memory": []
            }
        },
        "AdaptiveIterator.get_num_batches": {
            "name": "get_num_batches",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "AdaptiveIterator._create_batches": {
            "name": "_create_batches",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "shuffle": []
            }
        },
        "AdaptiveIterator._adaptive_grouping": {
            "name": "_adaptive_grouping",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "AdaptiveIterator.from_params": {
            "name": "from_params",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/iterators/basic_iterator.py": {
        "BasicIterator.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "instances_per_epoch": [],
                "max_instances_in_memory": []
            }
        },
        "BasicIterator.get_num_batches": {
            "name": "get_num_batches",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "BasicIterator._take_instances": {
            "name": "_take_instances",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "max_instances": []
            }
        },
        "BasicIterator._memory_sized_lists": {
            "name": "_memory_sized_lists",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "BasicIterator._create_batches": {
            "name": "_create_batches",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "shuffle": []
            }
        },
        "BasicIterator.from_params": {
            "name": "from_params",
            "location": 135,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/iterators/bucket_iterator.py": {
        "BucketIterator.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "sorting_keys": [],
                "padding_noise": [],
                "biggest_batch_first": [],
                "batch_size": [],
                "instances_per_epoch": [],
                "max_instances_in_memory": []
            }
        },
        "BucketIterator._create_batches": {
            "name": "_create_batches",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "shuffle": []
            }
        },
        "BucketIterator._sort_by_padding": {
            "name": "_sort_by_padding",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "sorting_keys": [],
                "padding_noise": []
            }
        },
        "BucketIterator.from_params": {
            "name": "from_params",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/iterators/data_iterator.py": {
        "DataIterator.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "num_epochs": [],
                "shuffle": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "DataIterator.get_num_batches": {
            "name": "get_num_batches",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "DataIterator._yield_one_epoch": {
            "name": "_yield_one_epoch",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "shuffle": [],
                "cuda_device": [],
                "for_training": []
            }
        },
        "DataIterator._create_batches": {
            "name": "_create_batches",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "shuffle": []
            }
        },
        "DataIterator.from_params": {
            "name": "from_params",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "DataIterator.index_with": {
            "name": "index_with",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/iterators/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/tokenizers/character_tokenizer.py": {
        "CharacterTokenizer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "byte_encoding": [],
                "lowercase_characters": [],
                "start_tokens": [],
                "end_tokens": []
            }
        },
        "CharacterTokenizer.batch_tokenize": {
            "name": "batch_tokenize",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "CharacterTokenizer.tokenize": {
            "name": "tokenize",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "CharacterTokenizer.from_params": {
            "name": "from_params",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "idx": [],
                "pos": [],
                "tag": [],
                "dep": [],
                "ent_type": [],
                "text_id": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/tokenizer.py": {
        "Tokenizer.batch_tokenize": {
            "name": "batch_tokenize",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Tokenizer.from_params": {
            "name": "from_params",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/word_filter.py": {
        "WordFilter.filter_words": {
            "name": "filter_words",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "WordFilter.from_params": {
            "name": "from_params",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "PassThroughWordFilter.filter_words": {
            "name": "filter_words",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "StopwordFilter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StopwordFilter.filter_words": {
            "name": "filter_words",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/word_splitter.py": {
        "WordSplitter.batch_split_words": {
            "name": "batch_split_words",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sentences": []
            }
        },
        "WordSplitter.split_words": {
            "name": "split_words",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "WordSplitter.from_params": {
            "name": "from_params",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "SimpleWordSplitter.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleWordSplitter.split_words": {
            "name": "split_words",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "SimpleWordSplitter._can_split": {
            "name": "_can_split",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "SimpleWordSplitter.from_params": {
            "name": "from_params",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "LettersDigitsWordSplitter.split_words": {
            "name": "split_words",
            "location": 115,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "LettersDigitsWordSplitter.from_params": {
            "name": "from_params",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "JustSpacesWordSplitter.split_words": {
            "name": "split_words",
            "location": 139,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "JustSpacesWordSplitter.from_params": {
            "name": "from_params",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "NltkWordSplitter.split_words": {
            "name": "split_words",
            "location": 158,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "NltkWordSplitter.from_params": {
            "name": "from_params",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "SpacyWordSplitter.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "language": [],
                "pos_tags": [],
                "parse": [],
                "ner": []
            }
        },
        "SpacyWordSplitter.batch_split_words": {
            "name": "batch_split_words",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sentences": []
            }
        },
        "SpacyWordSplitter.split_words": {
            "name": "split_words",
            "location": 187,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "SpacyWordSplitter.from_params": {
            "name": "from_params",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/word_stemmer.py": {
        "WordStemmer.stem_word": {
            "name": "stem_word",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "WordStemmer.from_params": {
            "name": "from_params",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "PassThroughWordStemmer.stem_word": {
            "name": "stem_word",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "PorterStemmer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.stem_word": {
            "name": "stem_word",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/word_tokenizer.py": {
        "WordTokenizer.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "word_splitter": [],
                "word_filter": [],
                "word_stemmer": [],
                "start_tokens": [],
                "end_tokens": []
            }
        },
        "WordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordTokenizer.batch_tokenize": {
            "name": "batch_tokenize",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "texts": []
            }
        },
        "WordTokenizer._filter_and_stem": {
            "name": "_filter_and_stem",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "WordTokenizer.from_params": {
            "name": "from_params",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/tokenizers/__init__.py": {},
    "allennlp-dureader-master/allennlp/data/token_indexers/dep_label_indexer.py": {
        "DepLabelIndexer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "DepLabelIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "DepLabelIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "DepLabelIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepLabelIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "DepLabelIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "DepLabelIndexer.from_params": {
            "name": "from_params",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/elmo_indexer.py": {
        "_make_bos_eos": {
            "name": "_make_bos_eos",
            "location": 13,
            "return": [],
            "arguments": {
                "character": [],
                "padding_character": [],
                "beginning_of_word_character": [],
                "end_of_word_character": [],
                "max_word_length": []
            }
        },
        "ELMoCharacterMapper.convert_word_to_char_ids": {
            "name": "convert_word_to_char_ids",
            "location": 61,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "ELMoTokenCharactersIndexer.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "ELMoTokenCharactersIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "ELMoTokenCharactersIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "ELMoTokenCharactersIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "ELMoTokenCharactersIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ELMoTokenCharactersIndexer._default_value_for_padding": {
            "name": "_default_value_for_padding",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "ELMoTokenCharactersIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "ELMoTokenCharactersIndexer.from_params": {
            "name": "from_params",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/ner_tag_indexer.py": {
        "NerTagIndexer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "NerTagIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "NerTagIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "NerTagIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NerTagIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "NerTagIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "NerTagIndexer.from_params": {
            "name": "from_params",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/pos_tag_indexer.py": {
        "PosTagIndexer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "coarse_tags": []
            }
        },
        "PosTagIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "PosTagIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "PosTagIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PosTagIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "PosTagIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "PosTagIndexer.from_params": {
            "name": "from_params",
            "location": 74,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/single_id_token_indexer.py": {
        "SingleIdTokenIndexer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "lowercase_tokens": []
            }
        },
        "SingleIdTokenIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "SingleIdTokenIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "SingleIdTokenIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleIdTokenIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "SingleIdTokenIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "SingleIdTokenIndexer.from_params": {
            "name": "from_params",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/token_characters_indexer.py": {
        "TokenCharactersIndexer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "character_tokenizer": []
            }
        },
        "TokenCharactersIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "TokenCharactersIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "TokenCharactersIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenCharactersIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenCharactersIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "TokenCharactersIndexer.from_params": {
            "name": "from_params",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/token_indexer.py": {
        "TokenIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "counter": []
            }
        },
        "TokenIndexer.token_to_indices": {
            "name": "token_to_indices",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "vocabulary": []
            }
        },
        "TokenIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "desired_num_tokens": [],
                "padding_lengths": []
            }
        },
        "TokenIndexer.from_params": {
            "name": "from_params",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "TokenIndexer.dict_from_params": {
            "name": "dict_from_params",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/data/token_indexers/__init__.py": {},
    "allennlp-dureader-master/allennlp/dureader/dataloader.py": {
        "BRCDataLoader.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "batch_size": [],
                "shuffle": [],
                "sampler": [],
                "batch_sampler": [],
                "num_workers": [],
                "pin_memory": [],
                "drop_last": []
            }
        },
        "BRCDataLoader._collate_fn": {
            "name": "_collate_fn",
            "location": 21,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "BRCDataLoader._pad_sequence": {
            "name": "_pad_sequence",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sequences": [],
                "pad_length": [],
                "pad_value": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/dureader/dataset.py": {
        "display": {
            "name": "display",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "BRCDataset.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_p_num": [],
                "max_p_len": [],
                "max_q_len": [],
                "is_train": [],
                "files": [],
                "rank": [],
                "world_size": [],
                "keep_raw": []
            }
        },
        "BRCDataset._load_dataset": {
            "name": "_load_dataset",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_path": [],
                "train": []
            }
        },
        "BRCDataset.__len__": {
            "name": "__len__",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BRCDataset.__getitem__": {
            "name": "__getitem__",
            "location": 145,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "BRCDataset._one_mini_batch": {
            "name": "_one_mini_batch",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "indices": [],
                "pad_id": []
            }
        },
        "BRCDataset._dynamic_padding": {
            "name": "_dynamic_padding",
            "location": 230,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "batch_data": [
                    "_T0@@"
                ],
                "pad_id": []
            }
        },
        "BRCDataset.word_iter": {
            "name": "word_iter",
            "location": 242,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "set_name": []
            }
        },
        "BRCDataset.convert_to_ids": {
            "name": "convert_to_ids",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/dureader/vocab.py": {
        "Vocab.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "initial_tokens": [],
                "lower": []
            }
        },
        "Vocab.size": {
            "name": "size",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocab.load_from_file": {
            "name": "load_from_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Vocab.get_id": {
            "name": "get_id",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Vocab.get_token": {
            "name": "get_token",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Vocab.add": {
            "name": "add",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "token": [],
                "cnt": []
            }
        },
        "Vocab.filter_tokens_by_cnt": {
            "name": "filter_tokens_by_cnt",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_cnt": []
            }
        },
        "Vocab.randomly_init_embeddings": {
            "name": "randomly_init_embeddings",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed_dim": []
            }
        },
        "Vocab.load_pretrained_embeddings": {
            "name": "load_pretrained_embeddings",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_path": []
            }
        },
        "Vocab.convert_to_ids": {
            "name": "convert_to_ids",
            "location": 174,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Vocab.recover_from_ids": {
            "name": "recover_from_ids",
            "location": 185,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ids": [],
                "stop_id": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/archival.py": {
        "archive_model": {
            "name": "archive_model",
            "location": 35,
            "return": [],
            "arguments": {
                "serialization_dir": [],
                "weights": [],
                "files_to_archive": []
            }
        },
        "load_archive": {
            "name": "load_archive",
            "location": 86,
            "return": [],
            "arguments": {
                "archive_file": [],
                "cuda_device": [],
                "overrides": [],
                "weights_file": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/biattentive_classification_network.py": {
        "BiattentiveClassificationNetwork.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "embedding_dropout": [],
                "pre_encode_feedforward": [],
                "encoder": [],
                "integrator": [],
                "integrator_dropout": [],
                "output_layer": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "BiattentiveClassificationNetwork.forward": {
            "name": "forward",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "label": []
            }
        },
        "BiattentiveClassificationNetwork.decode": {
            "name": "decode",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "BiattentiveClassificationNetwork.get_metrics": {
            "name": "get_metrics",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "BiattentiveClassificationNetwork.from_params": {
            "name": "from_params",
            "location": 207,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/constituency_parser.py": {
        "SpanConstituencyParser.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "span_extractor": [],
                "encoder": [],
                "feedforward_layer": [],
                "pos_tag_embedding": [],
                "initializer": [],
                "regularizer": [],
                "evalb_directory_path": []
            }
        },
        "SpanConstituencyParser.forward": {
            "name": "forward",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "spans": [],
                "metadata": [],
                "pos_tags": [],
                "span_labels": []
            }
        },
        "SpanConstituencyParser.decode": {
            "name": "decode",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "SpanConstituencyParser.construct_trees": {
            "name": "construct_trees",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "all_spans": [],
                "num_spans": [],
                "sentences": [],
                "pos_tags": []
            }
        },
        "SpanConstituencyParser.resolve_overlap_conflicts_greedily": {
            "name": "resolve_overlap_conflicts_greedily",
            "location": 333,
            "return": [],
            "arguments": {
                "spans": []
            }
        },
        "SpanConstituencyParser.construct_tree_from_spans": {
            "name": "construct_tree_from_spans",
            "location": 387,
            "return": [],
            "arguments": {
                "spans_to_labels": [],
                "sentence": [],
                "pos_tags": []
            }
        },
        "SpanConstituencyParser.get_metrics": {
            "name": "get_metrics",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "SpanConstituencyParser.from_params": {
            "name": "from_params",
            "location": 461,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        },
        "SpanConstituencyParser.construct_tree_from_spans.assemble_subtree": {
            "name": "assemble_subtree",
            "location": 405,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/crf_tagger.py": {
        "CrfTagger.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "encoder": [],
                "label_namespace": [],
                "constraint_type": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "CrfTagger.forward": {
            "name": "forward",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "tags": []
            }
        },
        "CrfTagger.decode": {
            "name": "decode",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "CrfTagger.get_metrics": {
            "name": "get_metrics",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "CrfTagger.from_params": {
            "name": "from_params",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/decomposable_attention.py": {
        "DecomposableAttention.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "attend_feedforward": [],
                "similarity_function": [],
                "compare_feedforward": [],
                "aggregate_feedforward": [],
                "premise_encoder": [],
                "hypothesis_encoder": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "DecomposableAttention.forward": {
            "name": "forward",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "premise": [],
                "hypothesis": [],
                "label": []
            }
        },
        "DecomposableAttention.get_metrics": {
            "name": "get_metrics",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "DecomposableAttention.from_params": {
            "name": "from_params",
            "location": 180,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/ensemble.py": {
        "Ensemble.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "submodels": []
            }
        },
        "Ensemble._load": {
            "name": "_load",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "serialization_dir": [],
                "weights_file": [],
                "cuda_device": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/model.py": {
        "remove_pretrained_embedding_params": {
            "name": "remove_pretrained_embedding_params",
            "location": 277,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "regularizer": []
            }
        },
        "Model.get_regularization_penalty": {
            "name": "get_regularization_penalty",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.get_parameters_for_histogram_tensorboard_logging": {
            "name": "get_parameters_for_histogram_tensorboard_logging",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.forward": {
            "name": "forward",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.forward_on_instance": {
            "name": "forward_on_instance",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "cuda_device": []
            }
        },
        "Model.forward_on_instances": {
            "name": "forward_on_instances",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "cuda_device": []
            }
        },
        "Model.decode": {
            "name": "decode",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "Model.get_metrics": {
            "name": "get_metrics",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "Model.from_params": {
            "name": "from_params",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        },
        "Model._load": {
            "name": "_load",
            "location": 199,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "serialization_dir": [],
                "weights_file": [],
                "cuda_device": []
            }
        },
        "Model.load": {
            "name": "load",
            "location": 235,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "serialization_dir": [],
                "weights_file": [],
                "cuda_device": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/semantic_role_labeler.py": {
        "write_to_conll_eval_file": {
            "name": "write_to_conll_eval_file",
            "location": 224,
            "return": [],
            "arguments": {
                "prediction_file": [],
                "gold_file": [],
                "verb_index": [],
                "sentence": [],
                "prediction": [],
                "gold_labels": []
            }
        },
        "convert_bio_tags_to_conll_format": {
            "name": "convert_bio_tags_to_conll_format",
            "location": 269,
            "return": [],
            "arguments": {
                "labels": []
            }
        },
        "SemanticRoleLabeler.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "encoder": [],
                "binary_feature_dim": [],
                "embedding_dropout": [],
                "initializer": [],
                "regularizer": [],
                "label_smoothing": []
            }
        },
        "SemanticRoleLabeler.forward": {
            "name": "forward",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "verb_indicator": [],
                "tags": []
            }
        },
        "SemanticRoleLabeler.decode": {
            "name": "decode",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "SemanticRoleLabeler.get_metrics": {
            "name": "get_metrics",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "SemanticRoleLabeler.get_viterbi_pairwise_potentials": {
            "name": "get_viterbi_pairwise_potentials",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabeler.from_params": {
            "name": "from_params",
            "location": 206,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/simple_tagger.py": {
        "SimpleTagger.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "encoder": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "SimpleTagger.forward": {
            "name": "forward",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "tags": []
            }
        },
        "SimpleTagger.decode": {
            "name": "decode",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "SimpleTagger.get_metrics": {
            "name": "get_metrics",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "SimpleTagger.from_params": {
            "name": "from_params",
            "location": 143,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/__init__.py": {},
    "allennlp-dureader-master/allennlp/models/coreference_resolution/coref.py": {
        "CoreferenceResolver.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "context_layer": [],
                "mention_feedforward": [],
                "antecedent_feedforward": [],
                "feature_size": [],
                "max_span_width": [],
                "spans_per_word": [],
                "max_antecedents": [],
                "lexical_dropout": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "CoreferenceResolver.forward": {
            "name": "forward",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "spans": [],
                "span_labels": [],
                "metadata": []
            }
        },
        "CoreferenceResolver.decode": {
            "name": "decode",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "CoreferenceResolver.get_metrics": {
            "name": "get_metrics",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "CoreferenceResolver._generate_valid_antecedents": {
            "name": "_generate_valid_antecedents",
            "location": 380,
            "return": [],
            "arguments": {
                "num_spans_to_keep": [],
                "max_antecedents": [],
                "device": []
            }
        },
        "CoreferenceResolver._compute_span_pair_embeddings": {
            "name": "_compute_span_pair_embeddings",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "top_span_embeddings": [],
                "antecedent_embeddings": [],
                "antecedent_offsets": []
            }
        },
        "CoreferenceResolver._compute_antecedent_gold_labels": {
            "name": "_compute_antecedent_gold_labels",
            "location": 497,
            "return": [],
            "arguments": {
                "top_span_labels": [],
                "antecedent_labels": []
            }
        },
        "CoreferenceResolver._compute_coreference_scores": {
            "name": "_compute_coreference_scores",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "pairwise_embeddings": [],
                "top_span_mention_scores": [],
                "antecedent_mention_scores": [],
                "antecedent_log_mask": []
            }
        },
        "CoreferenceResolver.from_params": {
            "name": "from_params",
            "location": 586,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/coreference_resolution/__init__.py": {},
    "allennlp-dureader-master/allennlp/models/encoder_decoders/simple_seq2seq.py": {
        "SimpleSeq2Seq.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "source_embedder": [],
                "encoder": [],
                "max_decoding_steps": [],
                "target_namespace": [],
                "target_embedding_dim": [],
                "attention_function": [],
                "scheduled_sampling_ratio": []
            }
        },
        "SimpleSeq2Seq.forward": {
            "name": "forward",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "source_tokens": [],
                "target_tokens": []
            }
        },
        "SimpleSeq2Seq._prepare_decode_step_input": {
            "name": "_prepare_decode_step_input",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "input_indices": [],
                "decoder_hidden_state": [],
                "encoder_outputs": [],
                "encoder_outputs_mask": []
            }
        },
        "SimpleSeq2Seq._get_loss": {
            "name": "_get_loss",
            "location": 230,
            "return": [],
            "arguments": {
                "logits": [],
                "targets": [],
                "target_mask": []
            }
        },
        "SimpleSeq2Seq.decode": {
            "name": "decode",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "SimpleSeq2Seq.from_params": {
            "name": "from_params",
            "location": 287,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/encoder_decoders/__init__.py": {},
    "allennlp-dureader-master/allennlp/models/reading_comprehension/bidaf.py": {
        "BidirectionalAttentionFlow.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "num_highway_layers": [],
                "phrase_layer": [],
                "attention_similarity_function": [],
                "modeling_layer": [],
                "span_end_encoder": [],
                "dropout": [],
                "mask_lstms": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "BidirectionalAttentionFlow.forward": {
            "name": "forward",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "question": [],
                "passage": [],
                "span_start": [],
                "span_end": [],
                "metadata": []
            }
        },
        "BidirectionalAttentionFlow.get_metrics": {
            "name": "get_metrics",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "BidirectionalAttentionFlow.get_best_span": {
            "name": "get_best_span",
            "location": 302,
            "return": [],
            "arguments": {
                "span_start_logits": [],
                "span_end_logits": []
            }
        },
        "BidirectionalAttentionFlow.from_params": {
            "name": "from_params",
            "location": 330,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/reading_comprehension/bidaf_ensemble.py": {
        "ensemble": {
            "name": "ensemble",
            "location": 121,
            "return": [],
            "arguments": {
                "subresults": []
            }
        },
        "BidafEnsemble.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "submodels": []
            }
        },
        "BidafEnsemble.forward": {
            "name": "forward",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "question": [],
                "passage": [],
                "span_start": [],
                "span_end": [],
                "metadata": []
            }
        },
        "BidafEnsemble.get_metrics": {
            "name": "get_metrics",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "BidafEnsemble.from_params": {
            "name": "from_params",
            "location": 110,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/reading_comprehension/dureader_bidaf.py": {
        "BidirectionalAttentionFlow.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "num_highway_layers": [],
                "phrase_layer": [],
                "attention_similarity_function": [],
                "modeling_layer": [],
                "span_end_encoder": [],
                "dropout": [],
                "mask_lstms": [],
                "initializer": [],
                "regularizer": []
            }
        },
        "BidirectionalAttentionFlow.apply_concat_mask_fn": {
            "name": "apply_concat_mask_fn",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "vector": [],
                "mask": [],
                "batch_size": [],
                "fn": []
            }
        },
        "BidirectionalAttentionFlow.forward": {
            "name": "forward",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "question": [],
                "passage": [],
                "span_start": [],
                "span_end": [],
                "metadata": []
            }
        },
        "BidirectionalAttentionFlow.get_metrics": {
            "name": "get_metrics",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "BidirectionalAttentionFlow.get_best_span": {
            "name": "get_best_span",
            "location": 360,
            "return": [],
            "arguments": {
                "span_start_logits": [],
                "span_end_logits": []
            }
        },
        "BidirectionalAttentionFlow.from_params": {
            "name": "from_params",
            "location": 388,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/models/reading_comprehension/__init__.py": {},
    "allennlp-dureader-master/allennlp/modules/alternating_highway_lstm.py": {
        "_AlternatingHighwayLSTMFunction.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "num_layers": [],
                "train": []
            }
        },
        "_AlternatingHighwayLSTMFunction.forward": {
            "name": "forward",
            "location": 22,
            "return": [
                "Tuple[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "weight": [],
                "bias": [],
                "state_accumulator": [],
                "memory_accumulator": [],
                "dropout_mask": [],
                "lengths": [],
                "gates": []
            }
        },
        "_AlternatingHighwayLSTMFunction.backward": {
            "name": "backward",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "grad_output": [],
                "grad_hy": []
            }
        },
        "AlternatingHighwayLSTM.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "num_layers": [],
                "recurrent_dropout_probability": []
            }
        },
        "AlternatingHighwayLSTM.reset_parameters": {
            "name": "reset_parameters",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlternatingHighwayLSTM.forward": {
            "name": "forward",
            "location": 209,
            "return": [
                "Tuple[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "initial_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/attention.py": {
        "Attention.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_function": [],
                "normalize": []
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "vector": [],
                "matrix": [],
                "matrix_mask": []
            }
        },
        "Attention.from_params": {
            "name": "from_params",
            "location": 64,
            "return": [
                "_TAttention@@Attention@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAttention]"
                ],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/augmented_lstm.py": {
        "AugmentedLstm.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "go_forward": [],
                "recurrent_dropout_probability": [],
                "use_highway": [],
                "use_input_projection_bias": []
            }
        },
        "AugmentedLstm.reset_parameters": {
            "name": "reset_parameters",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AugmentedLstm.forward": {
            "name": "forward",
            "location": 95,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "initial_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/conditional_random_field.py": {
        "allowed_transitions": {
            "name": "allowed_transitions",
            "location": 13,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "constraint_type": [],
                "tokens": []
            }
        },
        "ConditionalRandomField.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_tags": [],
                "constraints": []
            }
        },
        "ConditionalRandomField.reset_parameters": {
            "name": "reset_parameters",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRandomField._input_likelihood": {
            "name": "_input_likelihood",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "mask": []
            }
        },
        "ConditionalRandomField._joint_likelihood": {
            "name": "_joint_likelihood",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "tags": [],
                "mask": []
            }
        },
        "ConditionalRandomField.forward": {
            "name": "forward",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "tags": [],
                "mask": []
            }
        },
        "ConditionalRandomField.viterbi_tags": {
            "name": "viterbi_tags",
            "location": 234,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "mask": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/elmo.py": {
        "Elmo.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "options_file": [],
                "weight_file": [],
                "num_output_representations": [],
                "requires_grad": [],
                "do_layer_norm": [],
                "dropout": [],
                "module": []
            }
        },
        "Elmo.forward": {
            "name": "forward",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Elmo.from_params": {
            "name": "from_params",
            "location": 144,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "_ElmoCharacterEncoder.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "options_file": [],
                "weight_file": [],
                "requires_grad": []
            }
        },
        "_ElmoCharacterEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoCharacterEncoder.forward": {
            "name": "forward",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "_ElmoCharacterEncoder._load_weights": {
            "name": "_load_weights",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoCharacterEncoder._load_char_embedding": {
            "name": "_load_char_embedding",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoCharacterEncoder._load_cnn_weights": {
            "name": "_load_cnn_weights",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoCharacterEncoder._load_highway": {
            "name": "_load_highway",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoCharacterEncoder._load_projection": {
            "name": "_load_projection",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ElmoBiLm.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "options_file": [],
                "weight_file": [],
                "requires_grad": []
            }
        },
        "_ElmoBiLm.forward": {
            "name": "forward",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/elmo_lstm.py": {
        "ElmoLstm.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "cell_size": [],
                "num_layers": [],
                "requires_grad": [],
                "recurrent_dropout_probability": [],
                "memory_cell_clip_value": [],
                "state_projection_clip_value": []
            }
        },
        "ElmoLstm.forward": {
            "name": "forward",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": []
            }
        },
        "ElmoLstm._lstm_forward": {
            "name": "_lstm_forward",
            "location": 162,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "initial_state": []
            }
        },
        "ElmoLstm.load_weights": {
            "name": "load_weights",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight_file": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/encoder_base.py": {
        "_EncoderBase.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stateful": []
            }
        },
        "_EncoderBase.sort_and_run_forward": {
            "name": "sort_and_run_forward",
            "location": 33,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "inputs": [],
                "mask": [],
                "hidden_state": []
            }
        },
        "_EncoderBase._get_initial_states": {
            "name": "_get_initial_states",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "num_valid": [],
                "sorting_indices": []
            }
        },
        "_EncoderBase._update_states": {
            "name": "_update_states",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "final_states": [],
                "restoration_indices": []
            }
        },
        "_EncoderBase.reset_states": {
            "name": "reset_states",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/feedforward.py": {
        "FeedForward.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "num_layers": [],
                "hidden_dims": [],
                "activations": [],
                "dropout": []
            }
        },
        "FeedForward.get_output_dim": {
            "name": "get_output_dim",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedForward.get_input_dim": {
            "name": "get_input_dim",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedForward.forward": {
            "name": "forward",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FeedForward.from_params": {
            "name": "from_params",
            "location": 83,
            "return": [
                "_TFeedForward@@FeedForward@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFeedForward]"
                ],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/highway.py": {
        "Highway.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "num_layers": [],
                "activation": []
            }
        },
        "Highway.forward": {
            "name": "forward",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/layer_norm.py": {
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [],
                "eps": []
            }
        },
        "LayerNorm.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tensor": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/lstm_cell_with_projection.py": {
        "LstmCellWithProjection.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "cell_size": [],
                "go_forward": [],
                "recurrent_dropout_probability": [],
                "memory_cell_clip_value": [],
                "state_projection_clip_value": []
            }
        },
        "LstmCellWithProjection.reset_parameters": {
            "name": "reset_parameters",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LstmCellWithProjection.forward": {
            "name": "forward",
            "location": 94,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "batch_lengths": [],
                "initial_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/matrix_attention.py": {
        "MatrixAttention.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_function": []
            }
        },
        "MatrixAttention.forward": {
            "name": "forward",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "matrix_1": [],
                "matrix_2": []
            }
        },
        "MatrixAttention.from_params": {
            "name": "from_params",
            "location": 60,
            "return": [
                "_TMatrixAttention@@MatrixAttention@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMatrixAttention]"
                ],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/maxout.py": {
        "Maxout.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "num_layers": [],
                "output_dims": [],
                "pool_sizes": [],
                "dropout": []
            }
        },
        "Maxout.get_output_dim": {
            "name": "get_output_dim",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maxout.get_input_dim": {
            "name": "get_input_dim",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maxout.forward": {
            "name": "forward",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Maxout.from_params": {
            "name": "from_params",
            "location": 92,
            "return": [
                "_TMaxout@@Maxout@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMaxout]"
                ],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/scalar_mix.py": {
        "ScalarMix.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mixture_size": [],
                "do_layer_norm": []
            }
        },
        "ScalarMix.forward": {
            "name": "forward",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tensors": [],
                "mask": []
            }
        },
        "ScalarMix.forward._do_layer_norm": {
            "name": "_do_layer_norm",
            "location": 43,
            "return": [],
            "arguments": {
                "tensor": [],
                "broadcast_mask": [],
                "num_elements_not_masked": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/span_pruner.py": {
        "SpanPruner.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scorer": []
            }
        },
        "SpanPruner.forward": {
            "name": "forward",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "span_embeddings": [],
                "span_mask": [],
                "num_spans_to_keep": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/stacked_alternating_lstm.py": {
        "StackedAlternatingLstm.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "num_layers": [],
                "recurrent_dropout_probability": [],
                "use_highway": [],
                "use_input_projection_bias": []
            }
        },
        "StackedAlternatingLstm.forward": {
            "name": "forward",
            "location": 72,
            "return": [
                "Tuple[(Any, Generator[(Any, Any, None)])]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "initial_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/time_distributed.py": {
        "TimeDistributed.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "TimeDistributed.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/__init__.py": {},
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/intra_sentence_attention.py": {
        "IntraSentenceAttentionEncoder.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": [],
                "projection_dim": [],
                "similarity_function": [],
                "num_attention_heads": [],
                "combination": [],
                "output_dim": []
            }
        },
        "IntraSentenceAttentionEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntraSentenceAttentionEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntraSentenceAttentionEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntraSentenceAttentionEncoder.forward": {
            "name": "forward",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "mask": []
            }
        },
        "IntraSentenceAttentionEncoder.from_params": {
            "name": "from_params",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/multi_head_self_attention.py": {
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "num_heads": [],
                "input_dim": [],
                "attention_dim": [],
                "values_dim": [],
                "output_projection_dim": [],
                "attention_dropout_prob": []
            }
        },
        "MultiHeadSelfAttention.get_input_dim": {
            "name": "get_input_dim",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.get_output_dim": {
            "name": "get_output_dim",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.forward": {
            "name": "forward",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": []
            }
        },
        "MultiHeadSelfAttention.from_params": {
            "name": "from_params",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/pass_through_encoder.py": {
        "PassThroughEncoder.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": []
            }
        },
        "PassThroughEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEncoder.forward": {
            "name": "forward",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": []
            }
        },
        "PassThroughEncoder.from_params": {
            "name": "from_params",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/pytorch_seq2seq_wrapper.py": {
        "PytorchSeq2SeqWrapper.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "stateful": []
            }
        },
        "PytorchSeq2SeqWrapper.get_input_dim": {
            "name": "get_input_dim",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PytorchSeq2SeqWrapper.get_output_dim": {
            "name": "get_output_dim",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PytorchSeq2SeqWrapper.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PytorchSeq2SeqWrapper.forward": {
            "name": "forward",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": [],
                "hidden_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/seq2seq_encoder.py": {
        "Seq2SeqEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2SeqEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2SeqEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2SeqEncoder.from_params": {
            "name": "from_params",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/stacked_self_attention.py": {
        "StackedSelfAttentionEncoder.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": [],
                "hidden_dim": [],
                "projection_dim": [],
                "feedforward_hidden_dim": [],
                "num_layers": [],
                "num_attention_heads": [],
                "use_positional_encoding": [],
                "dropout_prob": [],
                "residual_dropout_prob": [],
                "attention_dropout_prob": []
            }
        },
        "StackedSelfAttentionEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackedSelfAttentionEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackedSelfAttentionEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackedSelfAttentionEncoder.forward": {
            "name": "forward",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": []
            }
        },
        "StackedSelfAttentionEncoder.from_params": {
            "name": "from_params",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2seq_encoders/__init__.py": {
        "_Seq2SeqWrapper.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_class": []
            }
        },
        "_Seq2SeqWrapper.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "allennlp.modules.seq2seq_encoders.pytorch_seq2seq_wrapper.PytorchSeq2SeqWrapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Seq2SeqWrapper.from_params": {
            "name": "from_params",
            "location": 72,
            "return": [
                "allennlp.modules.seq2seq_encoders.pytorch_seq2seq_wrapper.PytorchSeq2SeqWrapper"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2vec_encoders/boe_encoder.py": {
        "BagOfEmbeddingsEncoder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "embedding_dim": [],
                "averaged": []
            }
        },
        "BagOfEmbeddingsEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BagOfEmbeddingsEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BagOfEmbeddingsEncoder.forward": {
            "name": "forward",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "mask": []
            }
        },
        "BagOfEmbeddingsEncoder.from_params": {
            "name": "from_params",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2vec_encoders/cnn_encoder.py": {
        "CnnEncoder.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "embedding_dim": [],
                "num_filters": [],
                "ngram_filter_sizes": [],
                "conv_layer_activation": [],
                "output_dim": []
            }
        },
        "CnnEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CnnEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CnnEncoder.forward": {
            "name": "forward",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "mask": []
            }
        },
        "CnnEncoder.from_params": {
            "name": "from_params",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2vec_encoders/pytorch_seq2vec_wrapper.py": {
        "PytorchSeq2VecWrapper.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "PytorchSeq2VecWrapper.get_input_dim": {
            "name": "get_input_dim",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PytorchSeq2VecWrapper.get_output_dim": {
            "name": "get_output_dim",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PytorchSeq2VecWrapper.forward": {
            "name": "forward",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "mask": [],
                "hidden_state": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2vec_encoders/seq2vec_encoder.py": {
        "Seq2VecEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2VecEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2VecEncoder.from_params": {
            "name": "from_params",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/seq2vec_encoders/__init__.py": {
        "_Seq2VecWrapper.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_class": []
            }
        },
        "_Seq2VecWrapper.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "allennlp.modules.seq2vec_encoders.pytorch_seq2vec_wrapper.PytorchSeq2VecWrapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Seq2VecWrapper.from_params": {
            "name": "from_params",
            "location": 64,
            "return": [
                "allennlp.modules.seq2vec_encoders.pytorch_seq2vec_wrapper.PytorchSeq2VecWrapper"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/bilinear.py": {
        "BilinearSimilarity.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1_dim": [],
                "tensor_2_dim": [],
                "activation": []
            }
        },
        "BilinearSimilarity.reset_parameters": {
            "name": "reset_parameters",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BilinearSimilarity.forward": {
            "name": "forward",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "BilinearSimilarity.from_params": {
            "name": "from_params",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/cosine.py": {
        "CosineSimilarity.forward": {
            "name": "forward",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "CosineSimilarity.from_params": {
            "name": "from_params",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/dot_product.py": {
        "DotProductSimilarity.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "scale_output": []
            }
        },
        "DotProductSimilarity.forward": {
            "name": "forward",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "DotProductSimilarity.from_params": {
            "name": "from_params",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/linear.py": {
        "LinearSimilarity.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1_dim": [],
                "tensor_2_dim": [],
                "combination": [],
                "activation": []
            }
        },
        "LinearSimilarity.reset_parameters": {
            "name": "reset_parameters",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearSimilarity.forward": {
            "name": "forward",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "LinearSimilarity.from_params": {
            "name": "from_params",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/multiheaded.py": {
        "MultiHeadedSimilarity.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "num_heads": [],
                "tensor_1_dim": [],
                "tensor_1_projected_dim": [],
                "tensor_2_dim": [],
                "tensor_2_projected_dim": [],
                "internal_similarity": []
            }
        },
        "MultiHeadedSimilarity.reset_parameters": {
            "name": "reset_parameters",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadedSimilarity.forward": {
            "name": "forward",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "MultiHeadedSimilarity.from_params": {
            "name": "from_params",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/mylinear.py": {
        "MyLinearSimilarity.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1_dim": [],
                "tensor_2_dim": [],
                "combination": [],
                "activation": []
            }
        },
        "MyLinearSimilarity.reset_parameters": {
            "name": "reset_parameters",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyLinearSimilarity.forward": {
            "name": "forward",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "MyLinearSimilarity.from_params": {
            "name": "from_params",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/similarity_function.py": {
        "SimilarityFunction.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "tensor_1": [],
                "tensor_2": []
            }
        },
        "SimilarityFunction.from_params": {
            "name": "from_params",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/similarity_functions/__init__.py": {},
    "allennlp-dureader-master/allennlp/modules/span_extractors/bidirectional_endpoint_span_extractor.py": {
        "BidirectionalEndpointSpanExtractor.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": [],
                "forward_combination": [],
                "backward_combination": [],
                "num_width_embeddings": [],
                "span_width_embedding_dim": [],
                "bucket_widths": [],
                "use_sentinels": []
            }
        },
        "BidirectionalEndpointSpanExtractor.get_input_dim": {
            "name": "get_input_dim",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalEndpointSpanExtractor.get_output_dim": {
            "name": "get_output_dim",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalEndpointSpanExtractor.forward": {
            "name": "forward",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_tensor": [],
                "span_indices": [],
                "sequence_mask": [],
                "span_indices_mask": []
            }
        },
        "BidirectionalEndpointSpanExtractor.from_params": {
            "name": "from_params",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/span_extractors/endpoint_span_extractor.py": {
        "EndpointSpanExtractor.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": [],
                "combination": [],
                "num_width_embeddings": [],
                "span_width_embedding_dim": [],
                "bucket_widths": [],
                "use_exclusive_start_indices": []
            }
        },
        "EndpointSpanExtractor.get_input_dim": {
            "name": "get_input_dim",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointSpanExtractor.get_output_dim": {
            "name": "get_output_dim",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EndpointSpanExtractor.forward": {
            "name": "forward",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_tensor": [],
                "span_indices": [],
                "sequence_mask": [],
                "span_indices_mask": []
            }
        },
        "EndpointSpanExtractor.from_params": {
            "name": "from_params",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/span_extractors/self_attentive_span_extractor.py": {
        "SelfAttentiveSpanExtractor.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "input_dim": []
            }
        },
        "SelfAttentiveSpanExtractor.get_input_dim": {
            "name": "get_input_dim",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelfAttentiveSpanExtractor.get_output_dim": {
            "name": "get_output_dim",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelfAttentiveSpanExtractor.forward": {
            "name": "forward",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_tensor": [],
                "span_indices": [],
                "sequence_mask": [],
                "span_indices_mask": []
            }
        },
        "SelfAttentiveSpanExtractor.from_params": {
            "name": "from_params",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/span_extractors/span_extractor.py": {
        "SpanExtractor.forward": {
            "name": "forward",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_tensor": [],
                "span_indices": [],
                "sequence_mask": [],
                "span_indices_mask": []
            }
        },
        "SpanExtractor.get_input_dim": {
            "name": "get_input_dim",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanExtractor.get_output_dim": {
            "name": "get_output_dim",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanExtractor.from_params": {
            "name": "from_params",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/span_extractors/__init__.py": {},
    "allennlp-dureader-master/allennlp/modules/text_field_embedders/basic_text_field_embedder.py": {
        "BasicTextFieldEmbedder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "token_embedders": []
            }
        },
        "BasicTextFieldEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicTextFieldEmbedder.forward": {
            "name": "forward",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "text_field_input": [],
                "num_wrapping_dims": []
            }
        },
        "BasicTextFieldEmbedder.from_params": {
            "name": "from_params",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/text_field_embedders/text_field_embedder.py": {
        "TextFieldEmbedder.forward": {
            "name": "forward",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "text_field_input": [],
                "num_wrapping_dims": []
            }
        },
        "TextFieldEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextFieldEmbedder.from_params": {
            "name": "from_params",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/text_field_embedders/__init__.py": {},
    "allennlp-dureader-master/allennlp/modules/token_embedders/elmo_token_embedder.py": {
        "ElmoTokenEmbedder.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "options_file": [],
                "weight_file": [],
                "do_layer_norm": [],
                "dropout": [],
                "requires_grad": []
            }
        },
        "ElmoTokenEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElmoTokenEmbedder.forward": {
            "name": "forward",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ElmoTokenEmbedder.from_params": {
            "name": "from_params",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/token_embedders/embedding.py": {
        "_read_pretrained_embedding_file": {
            "name": "_read_pretrained_embedding_file",
            "location": 176,
            "return": [],
            "arguments": {
                "embeddings_filename": [],
                "embedding_dim": [],
                "vocab": [],
                "namespace": []
            }
        },
        "_read_pretrained_word2vec_format_embedding_file": {
            "name": "_read_pretrained_word2vec_format_embedding_file",
            "location": 216,
            "return": [],
            "arguments": {
                "embeddings_filename": [],
                "embedding_dim": [],
                "vocab": [],
                "namespace": []
            }
        },
        "_read_pretrained_hdf5_format_embedding_file": {
            "name": "_read_pretrained_hdf5_format_embedding_file",
            "location": 279,
            "return": [],
            "arguments": {
                "embeddings_filename": [],
                "embedding_dim": [],
                "vocab": [],
                "namespace": []
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "num_embeddings": [],
                "embedding_dim": [],
                "projection_dim": [],
                "weight": [],
                "padding_index": [],
                "trainable": [],
                "max_norm": [],
                "norm_type": [],
                "scale_grad_by_freq": [],
                "sparse": []
            }
        },
        "Embedding.get_output_dim": {
            "name": "get_output_dim",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embedding.forward": {
            "name": "forward",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Embedding.from_params": {
            "name": "from_params",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/token_embedders/token_characters_encoder.py": {
        "TokenCharactersEncoder.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "embedding": [],
                "encoder": [],
                "dropout": []
            }
        },
        "TokenCharactersEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenCharactersEncoder.forward": {
            "name": "forward",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "token_characters": []
            }
        },
        "TokenCharactersEncoder.from_params": {
            "name": "from_params",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/token_embedders/token_embedder.py": {
        "TokenEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenEmbedder.from_params": {
            "name": "from_params",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "vocab": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/modules/token_embedders/__init__.py": {},
    "allennlp-dureader-master/allennlp/nn/activations.py": {
        "Activation.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "tensor": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/initializers.py": {
        "uniform_unit_scaling": {
            "name": "uniform_unit_scaling",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "nonlinearity": []
            }
        },
        "block_orthogonal": {
            "name": "block_orthogonal",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor": [],
                "split_sizes": [],
                "gain": []
            }
        },
        "_initializer_wrapper": {
            "name": "_initializer_wrapper",
            "location": 156,
            "return": [
                "type"
            ],
            "arguments": {
                "init_function": []
            }
        },
        "Initializer.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "Initializer.from_params": {
            "name": "from_params",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "InitializerApplicator.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initializers": []
            }
        },
        "InitializerApplicator.__call__": {
            "name": "__call__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "InitializerApplicator.from_params": {
            "name": "from_params",
            "location": 239,
            "return": [
                "_TInitializerApplicator@@InitializerApplicator@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInitializerApplicator]"
                ],
                "params": []
            }
        },
        "_initializer_wrapper.Init.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_initializer_wrapper.Init.__call__": {
            "name": "__call__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "_initializer_wrapper.Init.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_initializer_wrapper.Init.from_params": {
            "name": "from_params",
            "location": 166,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/util.py": {
        "batch_tensor_dicts": {
            "name": "batch_tensor_dicts",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "tensor_dicts": [],
                "remove_trailing_dimension": []
            }
        },
        "get_lengths_from_binary_sequence_mask": {
            "name": "get_lengths_from_binary_sequence_mask",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "mask": []
            }
        },
        "sort_batch_by_length": {
            "name": "sort_batch_by_length",
            "location": 63,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "tensor": [],
                "sequence_lengths": []
            }
        },
        "get_final_encoder_states": {
            "name": "get_final_encoder_states",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "encoder_outputs": [],
                "mask": [],
                "bidirectional": []
            }
        },
        "get_dropout_mask": {
            "name": "get_dropout_mask",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "dropout_probability": [],
                "tensor_for_masking": []
            }
        },
        "masked_softmax": {
            "name": "masked_softmax",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "vector": [],
                "mask": []
            }
        },
        "masked_log_softmax": {
            "name": "masked_log_softmax",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "vector": [],
                "mask": []
            }
        },
        "viterbi_decode": {
            "name": "viterbi_decode",
            "location": 218,
            "return": [
                "Tuple[(List[int], Any)]"
            ],
            "arguments": {
                "tag_sequence": [],
                "transition_matrix": [],
                "tag_observations": []
            }
        },
        "get_text_field_mask": {
            "name": "get_text_field_mask",
            "location": 304,
            "return": [
                "Any"
            ],
            "arguments": {
                "text_field_tensors": [],
                "num_wrapping_dims": []
            }
        },
        "_last_dimension_applicator": {
            "name": "_last_dimension_applicator",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {
                "function_to_apply": [],
                "tensor": [],
                "mask": []
            }
        },
        "last_dim_softmax": {
            "name": "last_dim_softmax",
            "location": 367,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "mask": []
            }
        },
        "last_dim_log_softmax": {
            "name": "last_dim_log_softmax",
            "location": 376,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "mask": []
            }
        },
        "weighted_sum": {
            "name": "weighted_sum",
            "location": 385,
            "return": [
                "Any"
            ],
            "arguments": {
                "matrix": [],
                "attention": []
            }
        },
        "sequence_cross_entropy_with_logits": {
            "name": "sequence_cross_entropy_with_logits",
            "location": 424,
            "return": [
                "Any"
            ],
            "arguments": {
                "logits": [],
                "targets": [],
                "weights": [],
                "batch_average": [],
                "label_smoothing": []
            }
        },
        "replace_masked_values": {
            "name": "replace_masked_values",
            "location": 496,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "mask": [],
                "replace_with": []
            }
        },
        "device_mapping": {
            "name": "device_mapping",
            "location": 511,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "cuda_device": []
            }
        },
        "ones_like": {
            "name": "ones_like",
            "location": 525,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "zeros_like": {
            "name": "zeros_like",
            "location": 533,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "combine_tensors": {
            "name": "combine_tensors",
            "location": 541,
            "return": [
                "Any"
            ],
            "arguments": {
                "combination": [],
                "tensors": []
            }
        },
        "_get_combination": {
            "name": "_get_combination",
            "location": 572,
            "return": [
                "Any"
            ],
            "arguments": {
                "combination": [],
                "tensors": []
            }
        },
        "get_combined_dim": {
            "name": "get_combined_dim",
            "location": 594,
            "return": [
                "Any"
            ],
            "arguments": {
                "combination": [],
                "tensor_dims": []
            }
        },
        "_get_combination_dim": {
            "name": "_get_combination_dim",
            "location": 616,
            "return": [
                "Any"
            ],
            "arguments": {
                "combination": [],
                "tensor_dims": []
            }
        },
        "logsumexp": {
            "name": "logsumexp",
            "location": 631,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "dim": [],
                "keepdim": []
            }
        },
        "get_device_of": {
            "name": "get_device_of",
            "location": 655,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "flatten_and_batch_shift_indices": {
            "name": "flatten_and_batch_shift_indices",
            "location": 664,
            "return": [
                "Any"
            ],
            "arguments": {
                "indices": [],
                "sequence_length": []
            }
        },
        "batched_index_select": {
            "name": "batched_index_select",
            "location": 708,
            "return": [
                "Any"
            ],
            "arguments": {
                "target": [],
                "indices": [],
                "flattened_indices": []
            }
        },
        "flattened_index_select": {
            "name": "flattened_index_select",
            "location": 761,
            "return": [
                "Any"
            ],
            "arguments": {
                "target": [],
                "indices": []
            }
        },
        "get_range_vector": {
            "name": "get_range_vector",
            "location": 793,
            "return": [
                "Any"
            ],
            "arguments": {
                "size": [],
                "device": []
            }
        },
        "bucket_values": {
            "name": "bucket_values",
            "location": 805,
            "return": [
                "Any"
            ],
            "arguments": {
                "distances": [],
                "num_identity_buckets": [],
                "num_total_buckets": []
            }
        },
        "add_sentence_boundary_token_ids": {
            "name": "add_sentence_boundary_token_ids",
            "location": 844,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "tensor": [],
                "mask": [],
                "sentence_begin_token": [],
                "sentence_end_token": []
            }
        },
        "remove_sentence_boundaries": {
            "name": "remove_sentence_boundaries",
            "location": 900,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "tensor": [],
                "mask": []
            }
        },
        "add_positional_features": {
            "name": "add_positional_features",
            "location": 943,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "min_timescale": [],
                "max_timescale": []
            }
        },
        "device_mapping.inner_device_mapping": {
            "name": "inner_device_mapping",
            "location": 517,
            "return": [],
            "arguments": {
                "storage": [],
                "location": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/__init__.py": {},
    "allennlp-dureader-master/allennlp/nn/regularizers/regularizer.py": {
        "Regularizer.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "parameter": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/regularizers/regularizers.py": {
        "L1Regularizer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "L1Regularizer.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "L2Regularizer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "L2Regularizer.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/regularizers/regularizer_applicator.py": {
        "RegularizerApplicator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regularizers": []
            }
        },
        "RegularizerApplicator.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "RegularizerApplicator.from_params": {
            "name": "from_params",
            "location": 44,
            "return": [
                "Optional[RegularizerApplicator]"
            ],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/nn/regularizers/__init__.py": {},
    "allennlp-dureader-master/allennlp/service/db.py": {
        "DemoDatabase.add_result": {
            "name": "add_result",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "headers": [],
                "model_name": [],
                "inputs": [],
                "outputs": []
            }
        },
        "DemoDatabase.get_result": {
            "name": "get_result",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "perma_id": []
            }
        },
        "DemoDatabase.from_environment": {
            "name": "from_environment",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PostgresDemoDatabase.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbname": [],
                "host": [],
                "port": [],
                "user": [],
                "password": []
            }
        },
        "PostgresDemoDatabase._connect": {
            "name": "_connect",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDemoDatabase._health_check": {
            "name": "_health_check",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDemoDatabase.from_environment": {
            "name": "from_environment",
            "location": 116,
            "return": [
                "Optional[PostgresDemoDatabase]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PostgresDemoDatabase.add_result": {
            "name": "add_result",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "headers": [],
                "model_name": [],
                "inputs": [],
                "outputs": []
            }
        },
        "PostgresDemoDatabase.get_result": {
            "name": "get_result",
            "location": 160,
            "return": [
                "Optional[allennlp.service.permalinks.Permadata]"
            ],
            "arguments": {
                "self": [],
                "perma_id": []
            }
        },
        "InMemoryDemoDatabase.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryDemoDatabase.add_result": {
            "name": "add_result",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "headers": [],
                "model_name": [],
                "inputs": [],
                "outputs": []
            }
        },
        "InMemoryDemoDatabase.get_result": {
            "name": "get_result",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "perma_id": []
            }
        },
        "InMemoryDemoDatabase.from_environment": {
            "name": "from_environment",
            "location": 201,
            "return": [
                "_TInMemoryDemoDatabase@@InMemoryDemoDatabase@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInMemoryDemoDatabase]"
                ]
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/permalinks.py": {
        "int_to_slug": {
            "name": "int_to_slug",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "i": []
            }
        },
        "slug_to_int": {
            "name": "slug_to_int",
            "location": 26,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "slug": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/server_flask.py": {
        "run": {
            "name": "run",
            "location": 50,
            "return": [],
            "arguments": {
                "port": [],
                "trained_models": [],
                "static_dir": []
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 74,
            "return": [],
            "arguments": {
                "build_dir": [],
                "demo_db": []
            }
        },
        "ServerError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "ServerError.to_dict": {
            "name": "to_dict",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_app.handle_invalid_usage": {
            "name": "handle_invalid_usage",
            "location": 97,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "make_app._caching_prediction": {
            "name": "_caching_prediction",
            "location": 103,
            "return": [],
            "arguments": {
                "model": [],
                "data": []
            }
        },
        "make_app.index": {
            "name": "index",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "make_app.permadata": {
            "name": "permadata",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "make_app.predict": {
            "name": "predict",
            "location": 153,
            "return": [],
            "arguments": {
                "model_name": []
            }
        },
        "make_app.list_models": {
            "name": "list_models",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "make_app.info": {
            "name": "info",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "make_app.return_page": {
            "name": "return_page",
            "location": 269,
            "return": [],
            "arguments": {
                "permalink": []
            }
        },
        "make_app.static_proxy": {
            "name": "static_proxy",
            "location": 274,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "make_app.static_js_proxy": {
            "name": "static_js_proxy",
            "location": 278,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/server_simple.py": {
        "make_app": {
            "name": "make_app",
            "location": 39,
            "return": [],
            "arguments": {
                "predictor": [],
                "field_names": [],
                "static_dir": [],
                "sanitizer": [],
                "title": []
            }
        },
        "main": {
            "name": "main",
            "location": 114,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_html": {
            "name": "_html",
            "location": 699,
            "return": [],
            "arguments": {
                "title": [],
                "field_names": []
            }
        },
        "make_app.handle_invalid_usage": {
            "name": "handle_invalid_usage",
            "location": 74,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "make_app.index": {
            "name": "index",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "make_app.predict": {
            "name": "predict",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "make_app.static_proxy": {
            "name": "static_proxy",
            "location": 105,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/__init__.py": {},
    "allennlp-dureader-master/allennlp/service/predictors/bidaf.py": {
        "BidafPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/constituency_parser.py": {
        "ConstituencyParserPredictor.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "dataset_reader": []
            }
        },
        "ConstituencyParserPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        },
        "ConstituencyParserPredictor.predict_json": {
            "name": "predict_json",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "ConstituencyParserPredictor.predict_batch_json": {
            "name": "predict_batch_json",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "ConstituencyParserPredictor._build_hierplane_tree": {
            "name": "_build_hierplane_tree",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "index": [],
                "is_root": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/coref.py": {
        "CorefPredictor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "dataset_reader": []
            }
        },
        "CorefPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/decomposable_attention.py": {
        "DecomposableAttentionPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/predictor.py": {
        "Predictor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "dataset_reader": []
            }
        },
        "Predictor.load_line": {
            "name": "load_line",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "Predictor.dump_line": {
            "name": "dump_line",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": []
            }
        },
        "Predictor.predict_json": {
            "name": "predict_json",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "Predictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        },
        "Predictor.predict_batch_json": {
            "name": "predict_batch_json",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "Predictor._batch_json_to_instances": {
            "name": "_batch_json_to_instances",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "json_dicts": []
            }
        },
        "Predictor.from_archive": {
            "name": "from_archive",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [],
                "archive": [],
                "predictor_name": []
            }
        },
        "DemoModel.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "archive_file": [],
                "predictor_name": []
            }
        },
        "DemoModel.predictor": {
            "name": "predictor",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/semantic_role_labeler.py": {
        "SemanticRoleLabelerPredictor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "dataset_reader": []
            }
        },
        "SemanticRoleLabelerPredictor.make_srl_string": {
            "name": "make_srl_string",
            "location": 22,
            "return": [],
            "arguments": {
                "words": [],
                "tags": []
            }
        },
        "SemanticRoleLabelerPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        },
        "SemanticRoleLabelerPredictor._sentence_to_srl_instances": {
            "name": "_sentence_to_srl_instances",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        },
        "SemanticRoleLabelerPredictor.predict_batch_json": {
            "name": "predict_batch_json",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "SemanticRoleLabelerPredictor.predict_json": {
            "name": "predict_json",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/sentence_tagger.py": {
        "SentenceTaggerPredictor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "dataset_reader": []
            }
        },
        "SentenceTaggerPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/simple_seq2seq.py": {
        "SimpleSeq2SeqPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/service/predictors/__init__.py": {},
    "allennlp-dureader-master/allennlp/training/learning_rate_schedulers.py": {
        "LearningRateScheduler.from_params": {
            "name": "from_params",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "optimizer": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/optimizers.py": {
        "Optimizer.from_params": {
            "name": "from_params",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "model_parameters": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/trainer.py": {
        "is_sparse": {
            "name": "is_sparse",
            "location": 40,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "sparse_clip_norm": {
            "name": "sparse_clip_norm",
            "location": 44,
            "return": [],
            "arguments": {
                "parameters": [],
                "max_norm": [],
                "norm_type": []
            }
        },
        "time_to_str": {
            "name": "time_to_str",
            "location": 114,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "str_to_time": {
            "name": "str_to_time",
            "location": 124,
            "return": [],
            "arguments": {
                "time_str": []
            }
        },
        "TensorboardWriter.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "train_log": [],
                "validation_log": []
            }
        },
        "TensorboardWriter.add_train_scalar": {
            "name": "add_train_scalar",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "global_step": []
            }
        },
        "TensorboardWriter.add_train_histogram": {
            "name": "add_train_histogram",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "values": [],
                "global_step": []
            }
        },
        "TensorboardWriter.add_validation_scalar": {
            "name": "add_validation_scalar",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "global_step": []
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "iterator": [],
                "train_dataset": [],
                "validation_dataset": [],
                "patience": [],
                "validation_metric": [],
                "num_epochs": [],
                "serialization_dir": [],
                "num_serialized_models_to_keep": [],
                "keep_serialized_model_every_num_seconds": [],
                "model_save_interval": [],
                "cuda_device": [],
                "grad_norm": [],
                "grad_clipping": [],
                "learning_rate_scheduler": [],
                "summary_interval": [],
                "histogram_interval": []
            }
        },
        "Trainer._enable_gradient_clipping": {
            "name": "_enable_gradient_clipping",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._enable_activation_logging": {
            "name": "_enable_activation_logging",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._rescale_gradients": {
            "name": "_rescale_gradients",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._data_parallel": {
            "name": "_data_parallel",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "Trainer._batch_loss": {
            "name": "_batch_loss",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "for_training": []
            }
        },
        "Trainer._get_metrics": {
            "name": "_get_metrics",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "total_loss": [],
                "batch_num": [],
                "reset": []
            }
        },
        "Trainer._train_epoch": {
            "name": "_train_epoch",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": []
            }
        },
        "Trainer._should_stop_early": {
            "name": "_should_stop_early",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "metric_history": []
            }
        },
        "Trainer._parameter_and_gradient_statistics_to_tensorboard": {
            "name": "_parameter_and_gradient_statistics_to_tensorboard",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "batch_grad_norm": []
            }
        },
        "Trainer._histograms_to_tensorboard": {
            "name": "_histograms_to_tensorboard",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "histogram_parameters": []
            }
        },
        "Trainer._metrics_to_tensorboard": {
            "name": "_metrics_to_tensorboard",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "train_metrics": [],
                "val_metrics": []
            }
        },
        "Trainer._metrics_to_console": {
            "name": "_metrics_to_console",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "train_metrics": [],
                "val_metrics": []
            }
        },
        "Trainer._update_learning_rate": {
            "name": "_update_learning_rate",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "val_metric": [],
                "batch_num_total": []
            }
        },
        "Trainer._validation_loss": {
            "name": "_validation_loss",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._description_from_metrics": {
            "name": "_description_from_metrics",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": []
            }
        },
        "Trainer._save_checkpoint": {
            "name": "_save_checkpoint",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "val_metric_per_epoch": [],
                "is_best": []
            }
        },
        "Trainer._restore_checkpoint": {
            "name": "_restore_checkpoint",
            "location": 788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.from_params": {
            "name": "from_params",
            "location": 875,
            "return": [],
            "arguments": {
                "cls": [],
                "model": [],
                "serialization_dir": [],
                "iterator": [],
                "train_data": [],
                "validation_data": [],
                "params": []
            }
        },
        "Trainer._enable_activation_logging.hook": {
            "name": "hook",
            "location": 311,
            "return": [],
            "arguments": {
                "module_": [],
                "inputs": [],
                "outputs": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/__init__.py": {},
    "allennlp-dureader-master/allennlp/training/metrics/average.py": {
        "Average.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Average.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Average.get_metric": {
            "name": "get_metric",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "Average.reset": {
            "name": "reset",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/boolean_accuracy.py": {
        "BooleanAccuracy.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BooleanAccuracy.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [],
                "mask": []
            }
        },
        "BooleanAccuracy.get_metric": {
            "name": "get_metric",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "BooleanAccuracy.reset": {
            "name": "reset",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/categorical_accuracy.py": {
        "CategoricalAccuracy.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "top_k": []
            }
        },
        "CategoricalAccuracy.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [],
                "mask": []
            }
        },
        "CategoricalAccuracy.get_metric": {
            "name": "get_metric",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "CategoricalAccuracy.reset": {
            "name": "reset",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/conll_coref_scores.py": {
        "ConllCorefScores.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConllCorefScores.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "top_spans": [],
                "antecedent_indices": [],
                "predicted_antecedents": [],
                "metadata_list": []
            }
        },
        "ConllCorefScores.get_metric": {
            "name": "get_metric",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "ConllCorefScores.reset": {
            "name": "reset",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConllCorefScores.get_gold_clusters": {
            "name": "get_gold_clusters",
            "location": 42,
            "return": [],
            "arguments": {
                "gold_clusters": []
            }
        },
        "ConllCorefScores.get_predicted_clusters": {
            "name": "get_predicted_clusters",
            "location": 51,
            "return": [],
            "arguments": {
                "top_spans": [],
                "antecedent_indices": [],
                "predicted_antecedents": []
            }
        },
        "Scorer.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "metric": []
            }
        },
        "Scorer.update": {
            "name": "update",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "predicted": [],
                "gold": [],
                "mention_to_predicted": [],
                "mention_to_gold": []
            }
        },
        "Scorer.get_f1": {
            "name": "get_f1",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scorer.get_recall": {
            "name": "get_recall",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scorer.get_precision": {
            "name": "get_precision",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scorer.get_prf": {
            "name": "get_prf",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scorer.b_cubed": {
            "name": "b_cubed",
            "location": 132,
            "return": [],
            "arguments": {
                "clusters": [],
                "mention_to_gold": []
            }
        },
        "Scorer.muc": {
            "name": "muc",
            "location": 154,
            "return": [],
            "arguments": {
                "clusters": [],
                "mention_to_gold": []
            }
        },
        "Scorer.phi4": {
            "name": "phi4",
            "location": 174,
            "return": [],
            "arguments": {
                "gold_clustering": [],
                "predicted_clustering": []
            }
        },
        "Scorer.ceafe": {
            "name": "ceafe",
            "location": 183,
            "return": [],
            "arguments": {
                "clusters": [],
                "gold_clusters": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/entropy.py": {
        "Entropy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entropy.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "mask": []
            }
        },
        "Entropy.get_metric": {
            "name": "get_metric",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "Entropy.reset": {
            "name": "reset",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/evalb_bracketing_scorer.py": {
        "EvalbBracketingScorer.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "evalb_directory_path": [],
                "evalb_param_filename": []
            }
        },
        "EvalbBracketingScorer.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "predicted_trees": [],
                "gold_trees": []
            }
        },
        "EvalbBracketingScorer.get_metric": {
            "name": "get_metric",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "EvalbBracketingScorer.reset": {
            "name": "reset",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/f1_measure.py": {
        "F1Measure.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "positive_label": []
            }
        },
        "F1Measure.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [],
                "mask": []
            }
        },
        "F1Measure.get_metric": {
            "name": "get_metric",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "F1Measure.reset": {
            "name": "reset",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/mention_recall.py": {
        "MentionRecall.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MentionRecall.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "batched_top_spans": [],
                "batched_metadata": []
            }
        },
        "MentionRecall.get_metric": {
            "name": "get_metric",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "MentionRecall.reset": {
            "name": "reset",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/metric.py": {
        "Metric.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [],
                "mask": []
            }
        },
        "Metric.get_metric": {
            "name": "get_metric",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "Metric.reset": {
            "name": "reset",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Metric.from_params": {
            "name": "from_params",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [],
                "params": [],
                "vocab": []
            }
        },
        "Metric.unwrap_to_tensors": {
            "name": "unwrap_to_tensors",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/span_based_f1_measure.py": {
        "SpanBasedF1Measure.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "vocabulary": [],
                "tag_namespace": [],
                "ignore_classes": [],
                "label_encoding": []
            }
        },
        "SpanBasedF1Measure.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [],
                "mask": [],
                "prediction_map": []
            }
        },
        "SpanBasedF1Measure._handle_continued_spans": {
            "name": "_handle_continued_spans",
            "location": 154,
            "return": [],
            "arguments": {
                "spans": []
            }
        },
        "SpanBasedF1Measure.get_metric": {
            "name": "get_metric",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "SpanBasedF1Measure._compute_metrics": {
            "name": "_compute_metrics",
            "location": 229,
            "return": [],
            "arguments": {
                "true_positives": [],
                "false_positives": [],
                "false_negatives": []
            }
        },
        "SpanBasedF1Measure.reset": {
            "name": "reset",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/squad_em_and_f1.py": {
        "SquadEmAndF1.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SquadEmAndF1.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "best_span_string": [],
                "answer_strings": []
            }
        },
        "SquadEmAndF1.get_metric": {
            "name": "get_metric",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "SquadEmAndF1.reset": {
            "name": "reset",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SquadEmAndF1.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/allennlp/training/metrics/__init__.py": {},
    "allennlp-dureader-master/doc/conf.py": {
        "linkcode_resolve": {
            "name": "linkcode_resolve",
            "location": 199,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "domain": [],
                "info": []
            }
        }
    },
    "allennlp-dureader-master/scripts/cache_models.py": {},
    "allennlp-dureader-master/scripts/check_docs.py": {
        "documented_modules": {
            "name": "documented_modules",
            "location": 39,
            "return": [
                "set"
            ],
            "arguments": {
                "docs_dir": [],
                "module_regex": []
            }
        },
        "existing_modules": {
            "name": "existing_modules",
            "location": 51,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "module_glob": []
            }
        }
    },
    "allennlp-dureader-master/scripts/create_elmo_embeddings_from_vocab.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {
                "vocab_path": [],
                "elmo_config_path": [],
                "elmo_weights_path": [],
                "output_dir": [],
                "batch_size": [],
                "device": [],
                "use_custom_oov_token": []
            }
        }
    },
    "allennlp-dureader-master/scripts/inspect_cache.py": {},
    "allennlp-dureader-master/scripts/regenerate_archived_models.py": {
        "generate_archive": {
            "name": "generate_archive",
            "location": 13,
            "return": [],
            "arguments": {
                "config_file": [],
                "serialization_dir": [],
                "weights_file": [],
                "archive_name": [],
                "exist_ok": []
            }
        }
    },
    "allennlp-dureader-master/scripts/train_fixtures.py": {
        "train_fixture": {
            "name": "train_fixture",
            "location": 14,
            "return": [],
            "arguments": {
                "config_prefix": []
            }
        },
        "train_fixture_gpu": {
            "name": "train_fixture_gpu",
            "location": 33,
            "return": [],
            "arguments": {
                "config_prefix": []
            }
        }
    },
    "allennlp-dureader-master/scripts/verify.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "checks": []
            }
        }
    },
    "allennlp-dureader-master/scripts/write_srl_predictions_to_conll_format.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {
                "serialization_directory": [],
                "device": []
            }
        }
    },
    "allennlp-dureader-master/scripts/ai2-internal/run_with_beaker.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {
                "param_file": [],
                "extra_beaker_commands": []
            }
        }
    },
    "allennlp-dureader-master/tests/notebooks_test.py": {
        "TestNotebooks.test_vocabulary_tutorial": {
            "name": "test_vocabulary_tutorial",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotebooks.test_data_pipeline_tutorial": {
            "name": "test_data_pipeline_tutorial",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotebooks.test_embedding_tokens_tutorial": {
            "name": "test_embedding_tokens_tutorial",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNotebooks.execute_notebook": {
            "name": "execute_notebook",
            "location": 20,
            "return": [],
            "arguments": {
                "notebook_path": []
            }
        }
    },
    "allennlp-dureader-master/tests/__init__.py": {},
    "allennlp-dureader-master/tests/commands/dry_run_test.py": {
        "TestDryRun.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDryRun.test_dry_run_doesnt_overwrite_vocab": {
            "name": "test_dry_run_doesnt_overwrite_vocab",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/elmo_test.py": {
        "TestElmoCommand.test_all_embedding_works": {
            "name": "test_all_embedding_works",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoCommand.test_top_embedding_works": {
            "name": "test_top_embedding_works",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoCommand.test_average_embedding_works": {
            "name": "test_average_embedding_works",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoCommand.test_batch_embedding_works": {
            "name": "test_batch_embedding_works",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoCommand.test_duplicate_sentences": {
            "name": "test_duplicate_sentences",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoCommand.test_empty_sentences_are_filtered": {
            "name": "test_empty_sentences_are_filtered",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoEmbedder.test_embeddings_are_as_expected": {
            "name": "test_embeddings_are_as_expected",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoEmbedder.test_embed_batch_is_empty_sentence": {
            "name": "test_embed_batch_is_empty_sentence",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoEmbedder.test_embed_batch_contains_empty_sentence": {
            "name": "test_embed_batch_contains_empty_sentence",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/evaluate_test.py": {
        "TestEvaluate.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluate.test_evaluate_from_args": {
            "name": "test_evaluate_from_args",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/fine_tune_test.py": {
        "TestFineTune.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFineTune.test_fine_tune_model_runs_from_file_paths": {
            "name": "test_fine_tune_model_runs_from_file_paths",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFineTune.test_fine_tune_runs_from_parser_arguments": {
            "name": "test_fine_tune_runs_from_parser_arguments",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFineTune.test_fine_tune_fails_without_required_args": {
            "name": "test_fine_tune_fails_without_required_args",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/main_test.py": {
        "TestMain.test_fails_on_unknown_command": {
            "name": "test_fails_on_unknown_command",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_subcommand_overrides": {
            "name": "test_subcommand_overrides",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_other_modules": {
            "name": "test_other_modules",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_subcommand_overrides.do_nothing": {
            "name": "do_nothing",
            "location": 28,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "TestMain.test_subcommand_overrides.FakeEvaluate.add_subparser": {
            "name": "add_subparser",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parser": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/make_vocab_test.py": {
        "TestMakeVocab.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMakeVocab.test_make_vocab_fails_without_vocabulary_key": {
            "name": "test_make_vocab_fails_without_vocabulary_key",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMakeVocab.test_make_vocab_makes_vocab": {
            "name": "test_make_vocab_makes_vocab",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/predict_test.py": {
        "TestPredict.test_add_predict_subparser": {
            "name": "test_add_predict_subparser",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_works_with_known_model": {
            "name": "test_works_with_known_model",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_batch_prediction_works_with_known_model": {
            "name": "test_batch_prediction_works_with_known_model",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_fails_without_required_args": {
            "name": "test_fails_without_required_args",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_can_specify_predictor": {
            "name": "test_can_specify_predictor",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_other_modules": {
            "name": "test_other_modules",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_alternative_file_formats": {
            "name": "test_alternative_file_formats",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPredict.test_can_specify_predictor.Bidaf3Predictor.predict_json": {
            "name": "predict_json",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "TestPredict.test_alternative_file_formats.BidafCsvPredictor.load_line": {
            "name": "load_line",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "TestPredict.test_alternative_file_formats.BidafCsvPredictor.dump_line": {
            "name": "dump_line",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/serve_test.py": {
        "TestServe.test_add_serve": {
            "name": "test_add_serve",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/train_test.py": {
        "TestTrain.test_train_model": {
            "name": "test_train_model",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrain.test_train_with_test_set": {
            "name": "test_train_with_test_set",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrain.test_train_args": {
            "name": "test_train_args",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyFakeReader.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyFakeReader._read": {
            "name": "_read",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "LazyFakeReader.from_params": {
            "name": "from_params",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "TestTrainOnLazyDataset.test_train_model": {
            "name": "test_train_model",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainOnLazyDataset.test_train_with_test_set": {
            "name": "test_train_with_test_set",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/commands/__init__.py": {},
    "allennlp-dureader-master/tests/common/file_utils_test.py": {
        "set_up_glove": {
            "name": "set_up_glove",
            "location": 12,
            "return": [],
            "arguments": {
                "url": [],
                "byt": [],
                "change_etag_every": []
            }
        },
        "set_up_glove.head_callback": {
            "name": "head_callback",
            "location": 26,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "TestFileUtils.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename": {
            "name": "test_url_to_filename",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename_with_etags": {
            "name": "test_url_to_filename_with_etags",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename_with_etags_eliminates_quotes": {
            "name": "test_url_to_filename_with_etags_eliminates_quotes",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_get_from_cache": {
            "name": "test_get_from_cache",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_cached_path": {
            "name": "test_cached_path",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/common/params_test.py": {
        "TestParams.test_load_from_file": {
            "name": "test_load_from_file",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParams.test_overrides": {
            "name": "test_overrides",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParams.test_as_flat_dict": {
            "name": "test_as_flat_dict",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParams.test_add_file_to_archive": {
            "name": "test_add_file_to_archive",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParams.test_add_file_to_archive.A.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "TestParams.test_add_file_to_archive.A.from_params": {
            "name": "from_params",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "TestParams.test_add_file_to_archive.B.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "c": []
            }
        },
        "TestParams.test_add_file_to_archive.B.from_params": {
            "name": "from_params",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "TestParams.test_add_file_to_archive.C.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "c_file": []
            }
        },
        "TestParams.test_add_file_to_archive.C.from_params": {
            "name": "from_params",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "allennlp-dureader-master/tests/common/registrable_test.py": {
        "TestRegistrable.test_registrable_functionality_works": {
            "name": "test_registrable_functionality_works",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_dataset_readers": {
            "name": "test_registry_has_builtin_dataset_readers",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_iterators": {
            "name": "test_registry_has_builtin_iterators",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_tokenizers": {
            "name": "test_registry_has_builtin_tokenizers",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_token_indexers": {
            "name": "test_registry_has_builtin_token_indexers",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_regularizers": {
            "name": "test_registry_has_builtin_regularizers",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_initializers": {
            "name": "test_registry_has_builtin_initializers",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_learning_rate_schedulers": {
            "name": "test_registry_has_builtin_learning_rate_schedulers",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_token_embedders": {
            "name": "test_registry_has_builtin_token_embedders",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_text_field_embedders": {
            "name": "test_registry_has_builtin_text_field_embedders",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_seq2seq_encoders": {
            "name": "test_registry_has_builtin_seq2seq_encoders",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_seq2vec_encoders": {
            "name": "test_registry_has_builtin_seq2vec_encoders",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_registry_has_builtin_similarity_functions": {
            "name": "test_registry_has_builtin_similarity_functions",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/common/test_util.py": {
        "TestCommonUtils.test_group_by_count": {
            "name": "test_group_by_count",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtils.test_lazy_groups_of": {
            "name": "test_lazy_groups_of",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtils.test_pad_sequence_to_length": {
            "name": "test_pad_sequence_to_length",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtils.test_namespace_match": {
            "name": "test_namespace_match",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtils.test_sanitize": {
            "name": "test_sanitize",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtils.test_import_submodules": {
            "name": "test_import_submodules",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/common/__init__.py": {},
    "allennlp-dureader-master/tests/custom_extensions/alternating_highway_lstm_test.py": {
        "TestCustomHighwayLSTM.test_small_model": {
            "name": "test_small_model",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomHighwayLSTM.test_large_model": {
            "name": "test_large_model",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomHighwayLSTM.test_validation_forward_pass_is_deterministic_in_model_with_dropout": {
            "name": "test_validation_forward_pass_is_deterministic_in_model_with_dropout",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomHighwayLSTM.forward_and_backward_outputs_match": {
            "name": "forward_and_backward_outputs_match",
            "location": 38,
            "return": [],
            "arguments": {
                "baseline_model": [],
                "kernel_model": [],
                "baseline_input": [],
                "kernel_input": [],
                "lengths": []
            }
        },
        "TestCustomHighwayLSTM.get_models_and_inputs": {
            "name": "get_models_and_inputs",
            "location": 88,
            "return": [],
            "arguments": {
                "batch_size": [],
                "input_size": [],
                "output_size": [],
                "num_layers": [],
                "timesteps": [],
                "dropout_prob": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_test.py": {
        "TestDataset.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_instances_must_have_homogeneous_fields": {
            "name": "test_instances_must_have_homogeneous_fields",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_padding_lengths_uses_max_instance_lengths": {
            "name": "test_padding_lengths_uses_max_instance_lengths",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_as_tensor_dict": {
            "name": "test_as_tensor_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.get_instances": {
            "name": "get_instances",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/vocabulary_test.py": {
        "TestVocabulary.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_from_dataset_respects_max_vocab_size_single_int": {
            "name": "test_from_dataset_respects_max_vocab_size_single_int",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_from_dataset_respects_min_count": {
            "name": "test_from_dataset_respects_min_count",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_from_dataset_respects_exclusive_embedding_file": {
            "name": "test_from_dataset_respects_exclusive_embedding_file",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_from_dataset_respects_inclusive_embedding_file": {
            "name": "test_from_dataset_respects_inclusive_embedding_file",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_add_word_to_index_gives_consistent_results": {
            "name": "test_add_word_to_index_gives_consistent_results",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_namespaces": {
            "name": "test_namespaces",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_namespace_dependent_default_dict": {
            "name": "test_namespace_dependent_default_dict",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_unknown_token": {
            "name": "test_unknown_token",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_set_from_file_reads_padded_files": {
            "name": "test_set_from_file_reads_padded_files",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_set_from_file_reads_non_padded_files": {
            "name": "test_set_from_file_reads_non_padded_files",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_saving_and_loading": {
            "name": "test_saving_and_loading",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_saving_and_loading_works_with_byte_encoding": {
            "name": "test_saving_and_loading_works_with_byte_encoding",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_from_params": {
            "name": "test_from_params",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_vocab_can_print": {
            "name": "test_vocab_can_print",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/__init__.py": {},
    "allennlp-dureader-master/tests/data/dataset_readers/conll2003_dataset_reader_test.py": {
        "TestConll2003Reader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": [],
                "coding_scheme": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/language_modeling_dataset_test.py": {
        "TestLanguageModelingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/lazy_dataset_reader_test.py": {
        "LazyDatasetReader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "lazy": []
            }
        },
        "LazyDatasetReader._read": {
            "name": "_read",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestLazyDatasetReader.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLazyDatasetReader.test_lazy": {
            "name": "test_lazy",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLazyDatasetReader.test_non_lazy": {
            "name": "test_non_lazy",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/penn_tree_bank_reader_test.py": {
        "TestPennTreeBankConstituencySpanReader.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPennTreeBankConstituencySpanReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPennTreeBankConstituencySpanReader.test_strip_functional_tags": {
            "name": "test_strip_functional_tags",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPennTreeBankConstituencySpanReader.test_get_gold_spans_correctly_extracts_spans": {
            "name": "test_get_gold_spans_correctly_extracts_spans",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPennTreeBankConstituencySpanReader.test_get_gold_spans_correctly_extracts_spans_with_nested_labels": {
            "name": "test_get_gold_spans_correctly_extracts_spans_with_nested_labels",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/seq2seq_test.py": {
        "TestSeq2SeqDatasetReader.test_default_format": {
            "name": "test_default_format",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestSeq2SeqDatasetReader.test_source_add_start_token": {
            "name": "test_source_add_start_token",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/sequence_tagging_test.py": {
        "TestSequenceTaggingDatasetReader.test_default_format": {
            "name": "test_default_format",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestSequenceTaggingDatasetReader.test_brown_corpus_format": {
            "name": "test_brown_corpus_format",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/snli_reader_test.py": {
        "TestSnliReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/srl_dataset_reader_test.py": {
        "TestSrlReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestSrlReader.test_srl_reader_can_filter_by_domain": {
            "name": "test_srl_reader_can_filter_by_domain",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/stanford_sentiment_tree_bank_test.py": {
        "TestStanfordSentimentTreebankReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestStanfordSentimentTreebankReader.test_use_subtrees": {
            "name": "test_use_subtrees",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStanfordSentimentTreebankReader.test_3_class": {
            "name": "test_3_class",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStanfordSentimentTreebankReader.test_2_class": {
            "name": "test_2_class",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStanfordSentimentTreebankReader.test_from_params": {
            "name": "test_from_params",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/__init__.py": {},
    "allennlp-dureader-master/tests/data/dataset_readers/coreference/coref_reader_test.py": {
        "TestCorefReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestCorefReader.check_candidate_mentions_are_well_defined": {
            "name": "check_candidate_mentions_are_well_defined",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "span_starts": [],
                "span_ends": [],
                "text": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/coreference/winobias_reader_test.py": {
        "TestWinobiasReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestWinobiasReader.check_candidate_mentions_are_well_defined": {
            "name": "check_candidate_mentions_are_well_defined",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "span_starts": [],
                "span_ends": [],
                "text": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/dataset_utils/ontonotes_test.py": {
        "TestOntonotes.test_dataset_iterator": {
            "name": "test_dataset_iterator",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOntonotes.test_dataset_path_iterator": {
            "name": "test_dataset_path_iterator",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOntonotes.test_ontonotes_can_read_conll_file_with_multiple_documents": {
            "name": "test_ontonotes_can_read_conll_file_with_multiple_documents",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/dataset_utils/span_utils_test.py": {
        "SpanUtilsTest.test_bio_tags_to_spans_extracts_correct_spans": {
            "name": "test_bio_tags_to_spans_extracts_correct_spans",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanUtilsTest.test_bio_tags_to_spans_ignores_specified_tags": {
            "name": "test_bio_tags_to_spans_ignores_specified_tags",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanUtilsTest.test_enumerate_spans_enumerates_all_spans": {
            "name": "test_enumerate_spans_enumerates_all_spans",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanUtilsTest.test_bioul_tags_to_spans": {
            "name": "test_bioul_tags_to_spans",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanUtilsTest.test_iob1_to_bioul": {
            "name": "test_iob1_to_bioul",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanUtilsTest.test_enumerate_spans_enumerates_all_spans.no_prefixed_punctuation": {
            "name": "no_prefixed_punctuation",
            "location": 47,
            "return": [],
            "arguments": {
                "tokens": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/reading_comprehension/squad_test.py": {
        "TestSquadReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        },
        "TestSquadReader.test_can_build_from_params": {
            "name": "test_can_build_from_params",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/reading_comprehension/triviaqa_test.py": {
        "TestTriviaQaReader.test_read": {
            "name": "test_read",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lazy": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/reading_comprehension/util_test.py": {
        "TestReadingComprehensionUtil.test_char_span_to_token_span_handles_easy_cases": {
            "name": "test_char_span_to_token_span_handles_easy_cases",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReadingComprehensionUtil.test_char_span_to_token_span_handles_hard_cases": {
            "name": "test_char_span_to_token_span_handles_hard_cases",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/dataset_readers/reading_comprehension/__init__.py": {},
    "allennlp-dureader-master/tests/data/fields/array_field_test.py": {
        "TestArrayField.test_get_padding_lengths_correctly_returns_ordered_shape": {
            "name": "test_get_padding_lengths_correctly_returns_ordered_shape",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArrayField.test_as_tensor_handles_larger_padding_dimensions": {
            "name": "test_as_tensor_handles_larger_padding_dimensions",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArrayField.test_padding_handles_list_fields": {
            "name": "test_padding_handles_list_fields",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArrayField.test_padding_handles_list_fields_with_padding_values": {
            "name": "test_padding_handles_list_fields_with_padding_values",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArrayField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/index_field_test.py": {
        "TestIndexField.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndexField.test_as_tensor_converts_field_correctly": {
            "name": "test_as_tensor_converts_field_correctly",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndexField.test_index_field_raises_on_incorrect_label_type": {
            "name": "test_index_field_raises_on_incorrect_label_type",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndexField.test_index_field_empty_field_works": {
            "name": "test_index_field_empty_field_works",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndexField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/label_field_test.py": {
        "TestLabelField.test_as_tensor_returns_integer_tensor": {
            "name": "test_as_tensor_returns_integer_tensor",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_label_field_can_index_with_vocab": {
            "name": "test_label_field_can_index_with_vocab",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_label_field_raises_with_non_integer_labels_and_no_indexing": {
            "name": "test_label_field_raises_with_non_integer_labels_and_no_indexing",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_label_field_raises_with_incorrect_label_type": {
            "name": "test_label_field_raises_with_incorrect_label_type",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_label_field_empty_field_works": {
            "name": "test_label_field_empty_field_works",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_class_variables_for_namespace_warnings_work_correctly": {
            "name": "test_class_variables_for_namespace_warnings_work_correctly",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLabelField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/list_field_test.py": {
        "TestListField.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_get_padding_lengths": {
            "name": "test_get_padding_lengths",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_list_field_can_handle_empty_text_fields": {
            "name": "test_list_field_can_handle_empty_text_fields",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_list_field_can_handle_empty_index_fields": {
            "name": "test_list_field_can_handle_empty_index_fields",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_list_field_can_handle_empty_sequence_label_fields": {
            "name": "test_list_field_can_handle_empty_sequence_label_fields",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_all_fields_padded_to_max_length": {
            "name": "test_all_fields_padded_to_max_length",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_nested_list_fields_are_padded_correctly": {
            "name": "test_nested_list_fields_are_padded_correctly",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_fields_can_pad_to_greater_than_max_length": {
            "name": "test_fields_can_pad_to_greater_than_max_length",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_as_tensor_can_handle_multiple_token_indexers": {
            "name": "test_as_tensor_can_handle_multiple_token_indexers",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_as_tensor_can_handle_multiple_token_indexers_and_empty_fields": {
            "name": "test_as_tensor_can_handle_multiple_token_indexers_and_empty_fields",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/multilabel_field_test.py": {
        "TestMultiLabelField.test_as_tensor_returns_integer_tensor": {
            "name": "test_as_tensor_returns_integer_tensor",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_can_index_with_vocab": {
            "name": "test_multilabel_field_can_index_with_vocab",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_raises_with_non_integer_labels_and_no_indexing": {
            "name": "test_multilabel_field_raises_with_non_integer_labels_and_no_indexing",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_raises_with_no_indexing_and_missing_num_labels": {
            "name": "test_multilabel_field_raises_with_no_indexing_and_missing_num_labels",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_raises_with_no_indexing_and_wrong_num_labels": {
            "name": "test_multilabel_field_raises_with_no_indexing_and_wrong_num_labels",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_raises_with_incorrect_label_type": {
            "name": "test_multilabel_field_raises_with_incorrect_label_type",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_raises_with_given_num_labels": {
            "name": "test_multilabel_field_raises_with_given_num_labels",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_multilabel_field_empty_field_works": {
            "name": "test_multilabel_field_empty_field_works",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_class_variables_for_namespace_warnings_work_correctly": {
            "name": "test_class_variables_for_namespace_warnings_work_correctly",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiLabelField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/sequence_label_field_test.py": {
        "TestSequenceLabelField.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_tag_length_mismatch_raises": {
            "name": "test_tag_length_mismatch_raises",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_count_vocab_items_correctly_indexes_tags": {
            "name": "test_count_vocab_items_correctly_indexes_tags",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_index_converts_field_correctly": {
            "name": "test_index_converts_field_correctly",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_as_tensor_produces_integer_targets": {
            "name": "test_as_tensor_produces_integer_targets",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_sequence_label_field_raises_on_incorrect_type": {
            "name": "test_sequence_label_field_raises_on_incorrect_type",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_class_variables_for_namespace_warnings_work_correctly": {
            "name": "test_class_variables_for_namespace_warnings_work_correctly",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceLabelField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/span_field_test.py": {
        "TestSpanField.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_as_tensor_converts_span_field_correctly": {
            "name": "test_as_tensor_converts_span_field_correctly",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_span_field_raises_on_incorrect_label_type": {
            "name": "test_span_field_raises_on_incorrect_label_type",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_span_field_raises_on_ill_defined_span": {
            "name": "test_span_field_raises_on_ill_defined_span",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_span_field_raises_if_span_end_is_greater_than_sentence_length": {
            "name": "test_span_field_raises_if_span_end_is_greater_than_sentence_length",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_empty_span_field_works": {
            "name": "test_empty_span_field_works",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/text_field_test.py": {
        "TestTextField.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_field_counts_vocab_items_correctly": {
            "name": "test_field_counts_vocab_items_correctly",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_index_converts_field_correctly": {
            "name": "test_index_converts_field_correctly",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_get_padding_lengths_raises_if_no_indexed_tokens": {
            "name": "test_get_padding_lengths_raises_if_no_indexed_tokens",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_padding_lengths_are_computed_correctly": {
            "name": "test_padding_lengths_are_computed_correctly",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_as_tensor_handles_words": {
            "name": "test_as_tensor_handles_words",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_as_tensor_handles_longer_lengths": {
            "name": "test_as_tensor_handles_longer_lengths",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_as_tensor_handles_characters": {
            "name": "test_as_tensor_handles_characters",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_as_tensor_handles_words_and_characters_with_longer_lengths": {
            "name": "test_as_tensor_handles_words_and_characters_with_longer_lengths",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTextField.test_printing_doesnt_crash": {
            "name": "test_printing_doesnt_crash",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/fields/__init__.py": {},
    "allennlp-dureader-master/tests/data/iterators/adaptive_iterator_test.py": {
        "TestAdaptiveIterator.test_create_batches_groups_correctly": {
            "name": "test_create_batches_groups_correctly",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdaptiveIterator.test_create_batches_respects_maximum_batch_size": {
            "name": "test_create_batches_respects_maximum_batch_size",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdaptiveIterator.test_biggest_batch_first_passes_off_to_bucket_iterator": {
            "name": "test_biggest_batch_first_passes_off_to_bucket_iterator",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdaptiveIterator.test_from_params": {
            "name": "test_from_params",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/iterators/basic_iterator_test.py": {
        "IteratorTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IteratorTest.create_instance": {
            "name": "create_instance",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "str_tokens": []
            }
        },
        "IteratorTest.assert_instances_are_correct": {
            "name": "assert_instances_are_correct",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "candidate_instances": []
            }
        },
        "TestBasicIterator.test_get_num_batches": {
            "name": "test_get_num_batches",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_yield_one_epoch_iterates_over_the_data_once": {
            "name": "test_yield_one_epoch_iterates_over_the_data_once",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_call_iterates_over_data_forever": {
            "name": "test_call_iterates_over_data_forever",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_create_batches_groups_correctly": {
            "name": "test_create_batches_groups_correctly",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_few_instances_per_epoch": {
            "name": "test_few_instances_per_epoch",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_many_instances_per_epoch": {
            "name": "test_many_instances_per_epoch",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_shuffle": {
            "name": "test_shuffle",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_max_instances_in_memory": {
            "name": "test_max_instances_in_memory",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_multiple_cursors": {
            "name": "test_multiple_cursors",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicIterator.test_from_params": {
            "name": "test_from_params",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IteratorTest.setUp.LazyIterable.__iter__": {
            "name": "__iter__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/iterators/bucket_iterator_test.py": {
        "TestBucketIterator.test_create_batches_groups_correctly": {
            "name": "test_create_batches_groups_correctly",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBucketIterator.test_create_batches_groups_correctly_with_max_instances": {
            "name": "test_create_batches_groups_correctly_with_max_instances",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBucketIterator.test_biggest_batch_first_works": {
            "name": "test_biggest_batch_first_works",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBucketIterator.test_from_params": {
            "name": "test_from_params",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/iterators/__init__.py": {},
    "allennlp-dureader-master/tests/data/tokenizers/character_tokenizer_test.py": {
        "TestCharacterTokenizer.test_splits_into_characters": {
            "name": "test_splits_into_characters",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterTokenizer.test_batch_tokenization": {
            "name": "test_batch_tokenization",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterTokenizer.test_handles_byte_encoding": {
            "name": "test_handles_byte_encoding",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/tokenizers/word_splitter_test.py": {
        "TestSimpleWordSplitter.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_tokenize_handles_complex_punctuation": {
            "name": "test_tokenize_handles_complex_punctuation",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_tokenize_handles_contraction": {
            "name": "test_tokenize_handles_contraction",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_batch_tokenization": {
            "name": "test_batch_tokenization",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_tokenize_handles_multiple_contraction": {
            "name": "test_tokenize_handles_multiple_contraction",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_tokenize_handles_final_apostrophe": {
            "name": "test_tokenize_handles_final_apostrophe",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleWordSplitter.test_tokenize_handles_special_cases": {
            "name": "test_tokenize_handles_special_cases",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLettersDigitsWordSplitter.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLettersDigitsWordSplitter.test_tokenize_handles_complex_punctuation": {
            "name": "test_tokenize_handles_complex_punctuation",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLettersDigitsWordSplitter.test_tokenize_handles_unicode_letters": {
            "name": "test_tokenize_handles_unicode_letters",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLettersDigitsWordSplitter.test_tokenize_handles_splits_all_punctuation": {
            "name": "test_tokenize_handles_splits_all_punctuation",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.setUp": {
            "name": "setUp",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_handles_complex_punctuation": {
            "name": "test_tokenize_handles_complex_punctuation",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_handles_contraction": {
            "name": "test_tokenize_handles_contraction",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_handles_multiple_contraction": {
            "name": "test_tokenize_handles_multiple_contraction",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_handles_final_apostrophe": {
            "name": "test_tokenize_handles_final_apostrophe",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_removes_whitespace_tokens": {
            "name": "test_tokenize_removes_whitespace_tokens",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpacyWordSplitter.test_tokenize_handles_special_cases": {
            "name": "test_tokenize_handles_special_cases",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/tokenizers/word_tokenizer_test.py": {
        "TestWordTokenizer.test_passes_through_correctly": {
            "name": "test_passes_through_correctly",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenizer.test_batch_tokenization": {
            "name": "test_batch_tokenization",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenizer.test_stems_and_filters_correctly": {
            "name": "test_stems_and_filters_correctly",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/tokenizers/__init__.py": {},
    "allennlp-dureader-master/tests/data/token_indexers/character_token_indexer_test.py": {
        "CharacterTokenIndexerTest.test_count_vocab_items_respects_casing": {
            "name": "test_count_vocab_items_respects_casing",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTokenIndexerTest.test_as_array_produces_token_sequence": {
            "name": "test_as_array_produces_token_sequence",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterTokenIndexerTest.test_token_to_indices_produces_correct_characters": {
            "name": "test_token_to_indices_produces_correct_characters",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/dep_label_indexer_test.py": {
        "TestDepLabelIndexer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepLabelIndexer.test_count_vocab_items_uses_pos_tags": {
            "name": "test_count_vocab_items_uses_pos_tags",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepLabelIndexer.test_token_to_indices_uses_pos_tags": {
            "name": "test_token_to_indices_uses_pos_tags",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepLabelIndexer.test_padding_functions": {
            "name": "test_padding_functions",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepLabelIndexer.test_as_array_produces_token_sequence": {
            "name": "test_as_array_produces_token_sequence",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/elmo_indexer_test.py": {
        "TestELMoTokenCharactersIndexer.test_bos_to_char_ids": {
            "name": "test_bos_to_char_ids",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestELMoTokenCharactersIndexer.test_eos_to_char_ids": {
            "name": "test_eos_to_char_ids",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestELMoTokenCharactersIndexer.test_unicode_to_char_ids": {
            "name": "test_unicode_to_char_ids",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestELMoTokenCharactersIndexer.test_elmo_as_array_produces_token_sequence": {
            "name": "test_elmo_as_array_produces_token_sequence",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/ner_tag_indexer_test.py": {
        "TestNerTagIndexer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNerTagIndexer.test_count_vocab_items_uses_ner_tags": {
            "name": "test_count_vocab_items_uses_ner_tags",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNerTagIndexer.test_token_to_indices_uses_ner_tags": {
            "name": "test_token_to_indices_uses_ner_tags",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNerTagIndexer.test_padding_functions": {
            "name": "test_padding_functions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNerTagIndexer.test_as_array_produces_token_sequence": {
            "name": "test_as_array_produces_token_sequence",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/pos_tag_indexer_test.py": {
        "TestPosTagIndexer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPosTagIndexer.test_count_vocab_items_uses_pos_tags": {
            "name": "test_count_vocab_items_uses_pos_tags",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPosTagIndexer.test_token_to_indices_uses_pos_tags": {
            "name": "test_token_to_indices_uses_pos_tags",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPosTagIndexer.test_padding_functions": {
            "name": "test_padding_functions",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPosTagIndexer.test_as_array_produces_token_sequence": {
            "name": "test_as_array_produces_token_sequence",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/single_id_token_indexer_test.py": {
        "TestSingleIdTokenIndexer.test_count_vocab_items_respects_casing": {
            "name": "test_count_vocab_items_respects_casing",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSingleIdTokenIndexer.test_as_array_produces_token_sequence": {
            "name": "test_as_array_produces_token_sequence",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/data/token_indexers/__init__.py": {},
    "allennlp-dureader-master/tests/models/archival_test.py": {
        "ArchivalTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArchivalTest.test_archiving": {
            "name": "test_archiving",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArchivalTest.test_extra_files": {
            "name": "test_extra_files",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/biattentive_classification_network_test.py": {
        "BiattentiveClassificationNetworkMaxoutTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiattentiveClassificationNetworkMaxoutTest.test_maxout_bcn_can_train_save_and_load": {
            "name": "test_maxout_bcn_can_train_save_and_load",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiattentiveClassificationNetworkMaxoutTest.test_feedforward_bcn_can_train_save_and_load": {
            "name": "test_feedforward_bcn_can_train_save_and_load",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiattentiveClassificationNetworkMaxoutTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiattentiveClassificationNetworkMaxoutTest.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/constituency_parser_test.py": {
        "SpanConstituencyParserTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_span_parser_can_save_and_load": {
            "name": "test_span_parser_can_save_and_load",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_forward_can_handle_a_single_word_as_input": {
            "name": "test_forward_can_handle_a_single_word_as_input",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_decode_runs": {
            "name": "test_decode_runs",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_resolve_overlap_conflicts_greedily": {
            "name": "test_resolve_overlap_conflicts_greedily",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_construct_tree_from_spans": {
            "name": "test_construct_tree_from_spans",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_construct_tree_from_spans_handles_nested_labels": {
            "name": "test_construct_tree_from_spans_handles_nested_labels",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanConstituencyParserTest.test_tree_construction_with_too_few_spans_creates_trees_with_depth_one_word_nodes": {
            "name": "test_tree_construction_with_too_few_spans_creates_trees_with_depth_one_word_nodes",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/crf_tagger_test.py": {
        "CrfTaggerTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrfTaggerTest.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrfTaggerTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrfTaggerTest.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrfTaggerTest.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/decomposable_attention_test.py": {
        "TestDecomposableAttention.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttention.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttention.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttention.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttention.test_model_load": {
            "name": "test_model_load",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttention.test_mismatched_dimensions_raise_configuration_errors": {
            "name": "test_mismatched_dimensions_raise_configuration_errors",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/semantic_role_labeler_test.py": {
        "SemanticRoleLabelerTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_srl_model_can_train_save_and_load": {
            "name": "test_srl_model_can_train_save_and_load",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_decode_runs_correctly": {
            "name": "test_decode_runs_correctly",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_bio_tags_correctly_convert_to_conll_format": {
            "name": "test_bio_tags_correctly_convert_to_conll_format",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_perl_eval_script_can_run_on_printed_conll_files": {
            "name": "test_perl_eval_script_can_run_on_printed_conll_files",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SemanticRoleLabelerTest.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/simple_tagger_test.py": {
        "SimpleTaggerTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerTest.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerTest.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerTest.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerTest.test_regularization": {
            "name": "test_regularization",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerRegularizationTest.setUp": {
            "name": "setUp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTaggerRegularizationTest.test_regularization": {
            "name": "test_regularization",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/sniff_test.py": {
        "SniffTest.test_config": {
            "name": "test_config",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_machine_comprehension": {
            "name": "test_machine_comprehension",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_semantic_role_labeling": {
            "name": "test_semantic_role_labeling",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_textual_entailment": {
            "name": "test_textual_entailment",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_coreference_resolution": {
            "name": "test_coreference_resolution",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_ner": {
            "name": "test_ner",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SniffTest.test_constituency_parsing": {
            "name": "test_constituency_parsing",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/__init__.py": {},
    "allennlp-dureader-master/tests/models/coreference_resolution/coref_test.py": {
        "CorefTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CorefTest.test_coref_model_can_train_save_and_load": {
            "name": "test_coref_model_can_train_save_and_load",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CorefTest.test_decode": {
            "name": "test_decode",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/encoder_decoders/simple_seq2seq_test.py": {
        "SimpleSeq2SeqWithoutAttentionTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSeq2SeqWithoutAttentionTest.test_encoder_decoder_can_train_save_and_load": {
            "name": "test_encoder_decoder_can_train_save_and_load",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSeq2SeqWithoutAttentionTest.test_loss_is_computed_correctly": {
            "name": "test_loss_is_computed_correctly",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSeq2SeqWithoutAttentionTest.test_decode_runs_correctly": {
            "name": "test_decode_runs_correctly",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSeq2SeqWithAttentionTest.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSeq2SeqWithAttentionTest.test_encoder_decoder_can_train_save_and_load": {
            "name": "test_encoder_decoder_can_train_save_and_load",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/encoder_decoders/__init__.py": {},
    "allennlp-dureader-master/tests/models/reading_comprehension/bidaf_ensemble_test.py": {
        "BidafEnsembleTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidafEnsembleTest.test_ensemble_chooses_highest_average_confidence_2": {
            "name": "test_ensemble_chooses_highest_average_confidence_2",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidafEnsembleTest.test_ensemble_chooses_highest_average_confidence_3": {
            "name": "test_ensemble_chooses_highest_average_confidence_3",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidafEnsembleTest.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/reading_comprehension/bidaf_test.py": {
        "BidirectionalAttentionFlowTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalAttentionFlowTest.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalAttentionFlowTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalAttentionFlowTest.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalAttentionFlowTest.test_get_best_span": {
            "name": "test_get_best_span",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BidirectionalAttentionFlowTest.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/models/reading_comprehension/__init__.py": {},
    "allennlp-dureader-master/tests/modules/attention_test.py": {
        "TestAttention.test_no_mask": {
            "name": "test_no_mask",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttention.test_masked": {
            "name": "test_masked",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttention.test_batched_no_mask": {
            "name": "test_batched_no_mask",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttention.test_batched_masked": {
            "name": "test_batched_masked",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttention.test_non_normalized_attention_works": {
            "name": "test_non_normalized_attention_works",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttention.test_can_build_from_params": {
            "name": "test_can_build_from_params",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/augmented_lstm_test.py": {
        "TestAugmentedLSTM.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_variable_length_sequences_return_correctly_padded_outputs": {
            "name": "test_variable_length_sequences_return_correctly_padded_outputs",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_variable_length_sequences_run_backward_return_correctly_padded_outputs": {
            "name": "test_variable_length_sequences_run_backward_return_correctly_padded_outputs",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_augmented_lstm_computes_same_function_as_pytorch_lstm": {
            "name": "test_augmented_lstm_computes_same_function_as_pytorch_lstm",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_augmented_lstm_works_with_highway_connections": {
            "name": "test_augmented_lstm_works_with_highway_connections",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_augmented_lstm_throws_error_on_non_packed_sequence_input": {
            "name": "test_augmented_lstm_throws_error_on_non_packed_sequence_input",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAugmentedLSTM.test_augmented_lstm_is_initialized_with_correct_biases": {
            "name": "test_augmented_lstm_is_initialized_with_correct_biases",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/conditional_random_field_test.py": {
        "TestConditionalRandomField.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalRandomField.score": {
            "name": "score",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "tags": []
            }
        },
        "TestConditionalRandomField.test_forward_works_without_mask": {
            "name": "test_forward_works_without_mask",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalRandomField.test_forward_works_with_mask": {
            "name": "test_forward_works_with_mask",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalRandomField.test_viterbi_tags": {
            "name": "test_viterbi_tags",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalRandomField.test_constrained_viterbi_tags": {
            "name": "test_constrained_viterbi_tags",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalRandomField.test_allowed_transitions": {
            "name": "test_allowed_transitions",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/elmo_test.py": {
        "ElmoTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElmoTestCase._load_sentences_embeddings": {
            "name": "_load_sentences_embeddings",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoBiLm.test_elmo_bilm": {
            "name": "test_elmo_bilm",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmo.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmo._sentences_to_ids": {
            "name": "_sentences_to_ids",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "sentences": []
            }
        },
        "TestElmo.test_elmo": {
            "name": "test_elmo",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmo.test_elmo_4D_input": {
            "name": "test_elmo_4D_input",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmo.test_elmo_with_module": {
            "name": "test_elmo_with_module",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoRequiresGrad._run_test": {
            "name": "_run_test",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "requires_grad": []
            }
        },
        "TestElmoRequiresGrad.test_elmo_requires_grad": {
            "name": "test_elmo_requires_grad",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoRequiresGrad.test_elmo_does_not_require_grad": {
            "name": "test_elmo_does_not_require_grad",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoTokenRepresentation.test_elmo_token_representation": {
            "name": "test_elmo_token_representation",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoTokenRepresentation.test_elmo_token_representation_bos_eos": {
            "name": "test_elmo_token_representation_bos_eos",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/encoder_base_test.py": {
        "TestEncoderBase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoderBase.test_non_stateful_states_are_sorted_correctly": {
            "name": "test_non_stateful_states_are_sorted_correctly",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoderBase.test_get_initial_states": {
            "name": "test_get_initial_states",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoderBase.test_update_states": {
            "name": "test_update_states",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/feedforward_test.py": {
        "TestFeedForward.test_init_checks_hidden_dim_consistency": {
            "name": "test_init_checks_hidden_dim_consistency",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFeedForward.test_init_checks_activation_consistency": {
            "name": "test_init_checks_activation_consistency",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFeedForward.test_forward_gives_correct_output": {
            "name": "test_forward_gives_correct_output",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/highway_test.py": {
        "TestHighway.test_forward_works_on_simple_input": {
            "name": "test_forward_works_on_simple_input",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/lstm_cell_with_projection_test.py": {
        "TestLstmCellWithProjection.test_elmo_lstm_cell_completes_forward_pass": {
            "name": "test_elmo_lstm_cell_completes_forward_pass",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/matrix_attention_test.py": {
        "TestMatrixAttention.test_forward_works_on_simple_input": {
            "name": "test_forward_works_on_simple_input",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatrixAttention.test_can_build_from_params": {
            "name": "test_can_build_from_params",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/maxout_test.py": {
        "TestMaxout.test_init_checks_output_dims_consistency": {
            "name": "test_init_checks_output_dims_consistency",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxout.test_init_checks_pool_sizes_consistency": {
            "name": "test_init_checks_pool_sizes_consistency",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxout.test_init_checks_dropout_consistency": {
            "name": "test_init_checks_dropout_consistency",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxout.test_forward_gives_correct_output": {
            "name": "test_forward_gives_correct_output",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/scalar_mix_test.py": {
        "TestScalarMix.test_scalar_mix_can_run_forward": {
            "name": "test_scalar_mix_can_run_forward",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScalarMix.test_scalar_mix_throws_error_on_incorrect_number_of_inputs": {
            "name": "test_scalar_mix_throws_error_on_incorrect_number_of_inputs",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScalarMix.test_scalar_mix_layer_norm": {
            "name": "test_scalar_mix_layer_norm",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoder_test.py": {
        "TestSeq2SeqEncoder.test_from_params_builders_encoder_correctly": {
            "name": "test_from_params_builders_encoder_correctly",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeq2SeqEncoder.test_from_params_requires_batch_first": {
            "name": "test_from_params_requires_batch_first",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2vec_encoder_test.py": {
        "TestSeq2VecEncoder.test_from_params_builders_encoder_correctly": {
            "name": "test_from_params_builders_encoder_correctly",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeq2VecEncoder.test_from_params_requires_batch_first": {
            "name": "test_from_params_requires_batch_first",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/span_pruner_test.py": {
        "TestSpanPruner.test_span_pruner_selects_top_scored_spans_and_respects_masking": {
            "name": "test_span_pruner_selects_top_scored_spans_and_respects_masking",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanPruner.test_span_scorer_raises_with_incorrect_scorer_spec": {
            "name": "test_span_scorer_raises_with_incorrect_scorer_spec",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpanPruner.test_span_scorer_works_for_completely_masked_rows": {
            "name": "test_span_scorer_works_for_completely_masked_rows",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/stacked_alternating_lstm_test.py": {
        "TestStackedAlternatingLstm.test_stacked_alternating_lstm_completes_forward_pass": {
            "name": "test_stacked_alternating_lstm_completes_forward_pass",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackedAlternatingLstm.test_lstms_are_interleaved": {
            "name": "test_lstms_are_interleaved",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/stacked_elmo_lstm_test.py": {
        "TestElmoLstmCell.test_elmo_lstm": {
            "name": "test_elmo_lstm",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/time_distributed_test.py": {
        "TestTimeDistributed.test_time_distributed_reshapes_correctly": {
            "name": "test_time_distributed_reshapes_correctly",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimeDistributed.test_time_distributed_works_with_multiple_inputs": {
            "name": "test_time_distributed_works_with_multiple_inputs",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/__init__.py": {},
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/intra_sentence_attention_test.py": {
        "TestIntraSentenceAttentionEncoder.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntraSentenceAttentionEncoder.test_constructor_asserts_multi_head_consistency": {
            "name": "test_constructor_asserts_multi_head_consistency",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntraSentenceAttentionEncoder.test_forward_works_with_simple_attention": {
            "name": "test_forward_works_with_simple_attention",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntraSentenceAttentionEncoder.test_forward_works_with_multi_headed_attention": {
            "name": "test_forward_works_with_multi_headed_attention",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/multi_head_self_attention_test.py": {
        "MultiHeadSelfAttentionTest.test_multi_head_self_attention_can_build_from_params": {
            "name": "test_multi_head_self_attention_can_build_from_params",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttentionTest.test_multi_head_self_attention_runs_forward": {
            "name": "test_multi_head_self_attention_runs_forward",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttentionTest.test_multi_head_self_attention_respects_masking": {
            "name": "test_multi_head_self_attention_respects_masking",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/pass_through_encoder_test.py": {
        "TestStackedSelfAttention.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackedSelfAttention.test_pass_through_encoder_passes_through": {
            "name": "test_pass_through_encoder_passes_through",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/pytorch_seq2seq_wrapper_test.py": {
        "TestPytorchSeq2SeqWrapper.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_forward_works_even_with_empty_sequences": {
            "name": "test_forward_works_even_with_empty_sequences",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_forward_pulls_out_correct_tensor_without_sequence_lengths": {
            "name": "test_forward_pulls_out_correct_tensor_without_sequence_lengths",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_forward_pulls_out_correct_tensor_with_sequence_lengths": {
            "name": "test_forward_pulls_out_correct_tensor_with_sequence_lengths",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_forward_pulls_out_correct_tensor_for_unsorted_batches": {
            "name": "test_forward_pulls_out_correct_tensor_for_unsorted_batches",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_forward_does_not_compress_tensors_padded_to_greater_than_the_max_sequence_length": {
            "name": "test_forward_does_not_compress_tensors_padded_to_greater_than_the_max_sequence_length",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_wrapper_raises_if_batch_first_is_false": {
            "name": "test_wrapper_raises_if_batch_first_is_false",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_wrapper_works_when_passed_state_with_zero_length_sequences": {
            "name": "test_wrapper_works_when_passed_state_with_zero_length_sequences",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_wrapper_can_call_backward_with_zero_length_sequences": {
            "name": "test_wrapper_can_call_backward_with_zero_length_sequences",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_wrapper_stateful": {
            "name": "test_wrapper_stateful",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2SeqWrapper.test_wrapper_stateful_single_state_gru": {
            "name": "test_wrapper_stateful_single_state_gru",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/stacked_self_attention_test.py": {
        "TestStackedSelfAttention.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStackedSelfAttention.test_stacked_self_attention_can_run_foward": {
            "name": "test_stacked_self_attention_can_run_foward",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2seq_encoders/__init__.py": {},
    "allennlp-dureader-master/tests/modules/seq2vec_encoders/boe_encoder_test.py": {
        "TestBagOfEmbeddingsEncoder.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBagOfEmbeddingsEncoder.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBagOfEmbeddingsEncoder.test_forward_does_correct_computation": {
            "name": "test_forward_does_correct_computation",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBagOfEmbeddingsEncoder.test_forward_does_correct_computation_with_average": {
            "name": "test_forward_does_correct_computation_with_average",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBagOfEmbeddingsEncoder.test_forward_does_correct_computation_with_average_no_mask": {
            "name": "test_forward_does_correct_computation_with_average_no_mask",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2vec_encoders/cnn_encoder_test.py": {
        "TestCnnEncoder.test_get_dimension_is_correct": {
            "name": "test_get_dimension_is_correct",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCnnEncoder.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCnnEncoder.test_forward_does_correct_computation": {
            "name": "test_forward_does_correct_computation",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCnnEncoder.test_forward_runs_with_larger_input": {
            "name": "test_forward_runs_with_larger_input",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2vec_encoders/pytorch_seq2vec_wrapper_test.py": {
        "TestPytorchSeq2VecWrapper.test_get_dimensions_is_correct": {
            "name": "test_get_dimensions_is_correct",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2VecWrapper.test_forward_pulls_out_correct_tensor_without_sequence_lengths": {
            "name": "test_forward_pulls_out_correct_tensor_without_sequence_lengths",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2VecWrapper.test_forward_pulls_out_correct_tensor_with_sequence_lengths": {
            "name": "test_forward_pulls_out_correct_tensor_with_sequence_lengths",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2VecWrapper.test_forward_works_even_with_empty_sequences": {
            "name": "test_forward_works_even_with_empty_sequences",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2VecWrapper.test_forward_pulls_out_correct_tensor_with_unsorted_batches": {
            "name": "test_forward_pulls_out_correct_tensor_with_unsorted_batches",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPytorchSeq2VecWrapper.test_wrapper_raises_if_batch_first_is_false": {
            "name": "test_wrapper_raises_if_batch_first_is_false",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/seq2vec_encoders/__init__.py": {},
    "allennlp-dureader-master/tests/modules/similarity_functions/bilinear_test.py": {
        "TestBilinearSimilarityFunction.test_weights_are_correct_sizes": {
            "name": "test_weights_are_correct_sizes",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBilinearSimilarityFunction.test_forward_does_a_bilinear_product": {
            "name": "test_forward_does_a_bilinear_product",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBilinearSimilarityFunction.test_forward_works_with_higher_order_tensors": {
            "name": "test_forward_works_with_higher_order_tensors",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBilinearSimilarityFunction.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/similarity_functions/cosine_test.py": {
        "TestCosineSimilarityFunction.test_forward_does_a_cosine_similarity": {
            "name": "test_forward_does_a_cosine_similarity",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCosineSimilarityFunction.test_forward_works_with_higher_order_tensors": {
            "name": "test_forward_works_with_higher_order_tensors",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCosineSimilarityFunction.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/similarity_functions/dot_product_test.py": {
        "TestDotProductSimilarityFunction.test_forward_does_a_dot_product": {
            "name": "test_forward_does_a_dot_product",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDotProductSimilarityFunction.test_forward_works_with_higher_order_tensors": {
            "name": "test_forward_works_with_higher_order_tensors",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDotProductSimilarityFunction.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/similarity_functions/linear_test.py": {
        "TestLinearSimilarityFunction.test_weights_are_correct_sizes": {
            "name": "test_weights_are_correct_sizes",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_does_a_weighted_product": {
            "name": "test_forward_does_a_weighted_product",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_works_with_higher_order_tensors": {
            "name": "test_forward_works_with_higher_order_tensors",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_works_with_multiply_combinations": {
            "name": "test_forward_works_with_multiply_combinations",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_works_with_divide_combinations": {
            "name": "test_forward_works_with_divide_combinations",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_works_with_add_combinations": {
            "name": "test_forward_works_with_add_combinations",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_forward_works_with_subtract_combinations": {
            "name": "test_forward_works_with_subtract_combinations",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinearSimilarityFunction.test_can_construct_from_params": {
            "name": "test_can_construct_from_params",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/similarity_functions/multiheaded_test.py": {
        "TestMultiHeadedSimilarityFunction.test_weights_are_correct_sizes": {
            "name": "test_weights_are_correct_sizes",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMultiHeadedSimilarityFunction.test_forward": {
            "name": "test_forward",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/similarity_functions/__init__.py": {},
    "allennlp-dureader-master/tests/modules/span_extractors/bidirectional_endpoint_span_extractor_test.py": {
        "TestBidirectonalEndpointSpanExtractor.test_bidirectional_endpoint_span_extractor_can_build_from_params": {
            "name": "test_bidirectional_endpoint_span_extractor_can_build_from_params",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBidirectonalEndpointSpanExtractor.test_raises_on_odd_input_dimension": {
            "name": "test_raises_on_odd_input_dimension",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBidirectonalEndpointSpanExtractor.test_correct_sequence_elements_are_embedded": {
            "name": "test_correct_sequence_elements_are_embedded",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBidirectonalEndpointSpanExtractor.test_correct_sequence_elements_are_embedded_with_a_masked_sequence": {
            "name": "test_correct_sequence_elements_are_embedded_with_a_masked_sequence",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBidirectonalEndpointSpanExtractor.test_forward_raises_with_invalid_indices": {
            "name": "test_forward_raises_with_invalid_indices",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/span_extractors/endpoint_span_extractor_test.py": {
        "TestEndpointSpanExtractor.test_endpoint_span_extractor_can_build_from_params": {
            "name": "test_endpoint_span_extractor_can_build_from_params",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndpointSpanExtractor.test_correct_sequence_elements_are_embedded": {
            "name": "test_correct_sequence_elements_are_embedded",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndpointSpanExtractor.test_masked_indices_are_handled_correctly": {
            "name": "test_masked_indices_are_handled_correctly",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEndpointSpanExtractor.test_masked_indices_are_handled_correctly_with_exclusive_indices": {
            "name": "test_masked_indices_are_handled_correctly_with_exclusive_indices",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/span_extractors/self_attentive_span_extractor_test.py": {
        "TestSelfAttentiveSpanExtractor.test_locally_normalised_span_extractor_can_build_from_params": {
            "name": "test_locally_normalised_span_extractor_can_build_from_params",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelfAttentiveSpanExtractor.test_attention_is_normalised_correctly": {
            "name": "test_attention_is_normalised_correctly",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/span_extractors/__init__.py": {},
    "allennlp-dureader-master/tests/modules/text_field_embedders/basic_text_field_embedder_test.py": {
        "TestBasicTextFieldEmbedder.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTextFieldEmbedder.test_get_output_dim_aggregates_dimension_from_each_embedding": {
            "name": "test_get_output_dim_aggregates_dimension_from_each_embedding",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTextFieldEmbedder.test_forward_asserts_input_field_match": {
            "name": "test_forward_asserts_input_field_match",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTextFieldEmbedder.test_forward_concats_resultant_embeddings": {
            "name": "test_forward_concats_resultant_embeddings",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTextFieldEmbedder.test_forward_works_on_higher_order_input": {
            "name": "test_forward_works_on_higher_order_input",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/text_field_embedders/__init__.py": {},
    "allennlp-dureader-master/tests/modules/token_embedders/elmo_token_embedder_test.py": {
        "TestElmoTokenEmbedder.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoTokenEmbedder.test_tagger_with_elmo_token_embedder_can_train_save_and_load": {
            "name": "test_tagger_with_elmo_token_embedder_can_train_save_and_load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoTokenEmbedder.test_tagger_with_elmo_token_embedder_forward_pass_runs_correctly": {
            "name": "test_tagger_with_elmo_token_embedder_forward_pass_runs_correctly",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElmoTokenEmbedder.test_file_archiving": {
            "name": "test_file_archiving",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/token_embedders/embedding_test.py": {
        "TestEmbedding.test_get_embedding_layer_uses_correct_embedding_dim": {
            "name": "test_get_embedding_layer_uses_correct_embedding_dim",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_forward_works_with_projection_layer": {
            "name": "test_forward_works_with_projection_layer",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_embedding_layer_actually_initializes_word_vectors_correctly": {
            "name": "test_embedding_layer_actually_initializes_word_vectors_correctly",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_get_embedding_layer_initializes_unseen_words_randomly_not_zero": {
            "name": "test_get_embedding_layer_initializes_unseen_words_randomly_not_zero",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_read_hdf5_format_file": {
            "name": "test_read_hdf5_format_file",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_read_hdf5_raises_on_invalid_shape": {
            "name": "test_read_hdf5_raises_on_invalid_shape",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/token_embedders/token_characters_encoder_test.py": {
        "TestTokenCharactersEncoder.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTokenCharactersEncoder.test_get_output_dim_uses_encoder_output_dim": {
            "name": "test_get_output_dim_uses_encoder_output_dim",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTokenCharactersEncoder.test_forward_applies_embedding_then_encoder": {
            "name": "test_forward_applies_embedding_then_encoder",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/modules/token_embedders/__init__.py": {},
    "allennlp-dureader-master/tests/nn/initializers_test.py": {
        "TestInitializers.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_regex_matches_are_initialized_correctly": {
            "name": "test_regex_matches_are_initialized_correctly",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_block_orthogonal_can_initialize": {
            "name": "test_block_orthogonal_can_initialize",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_block_orthogonal_raises_on_mismatching_dimensions": {
            "name": "test_block_orthogonal_raises_on_mismatching_dimensions",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_uniform_unit_scaling_can_initialize": {
            "name": "test_uniform_unit_scaling_can_initialize",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_block_orthogonal_can_initialize.test_block_is_orthogonal": {
            "name": "test_block_is_orthogonal",
            "location": 60,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "TestInitializers.test_regex_matches_are_initialized_correctly.Net.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInitializers.test_regex_matches_are_initialized_correctly.Net.forward": {
            "name": "forward",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "allennlp-dureader-master/tests/nn/regularizers_test.py": {
        "TestRegularizers.test_l1_regularization": {
            "name": "test_l1_regularization",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegularizers.test_l2_regularization": {
            "name": "test_l2_regularization",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegularizers.test_regularizer_applicator_respects_regex_matching": {
            "name": "test_regularizer_applicator_respects_regex_matching",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegularizers.test_from_params": {
            "name": "test_from_params",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/nn/util_test.py": {
        "TestNnUtil.test_get_sequence_lengths_from_binary_mask": {
            "name": "test_get_sequence_lengths_from_binary_mask",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_get_sequence_lengths_converts_to_long_tensor_and_avoids_variable_overflow": {
            "name": "test_get_sequence_lengths_converts_to_long_tensor_and_avoids_variable_overflow",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_sort_tensor_by_length": {
            "name": "test_sort_tensor_by_length",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_sort_tensor_by_length_raises_on_non_variable_inputs": {
            "name": "test_sort_tensor_by_length_raises_on_non_variable_inputs",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_get_final_encoder_states": {
            "name": "test_get_final_encoder_states",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_masked_softmax_no_mask": {
            "name": "test_masked_softmax_no_mask",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_masked_softmax_masked": {
            "name": "test_masked_softmax_masked",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_masked_log_softmax_masked": {
            "name": "test_masked_log_softmax_masked",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_get_text_field_mask_returns_a_correct_mask": {
            "name": "test_get_text_field_mask_returns_a_correct_mask",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_get_text_field_mask_returns_a_correct_mask_character_only_input": {
            "name": "test_get_text_field_mask_returns_a_correct_mask_character_only_input",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_get_text_field_mask_returns_a_correct_mask_list_field": {
            "name": "test_get_text_field_mask_returns_a_correct_mask_list_field",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_last_dim_softmax_does_softmax_on_last_dim": {
            "name": "test_last_dim_softmax_does_softmax_on_last_dim",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_last_dim_softmax_handles_mask_correctly": {
            "name": "test_last_dim_softmax_handles_mask_correctly",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_weighted_sum_works_on_simple_input": {
            "name": "test_weighted_sum_works_on_simple_input",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_weighted_sum_handles_higher_order_input": {
            "name": "test_weighted_sum_handles_higher_order_input",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_weighted_sum_handles_uneven_higher_order_input": {
            "name": "test_weighted_sum_handles_uneven_higher_order_input",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_weighted_sum_handles_3d_attention_with_3d_matrix": {
            "name": "test_weighted_sum_handles_3d_attention_with_3d_matrix",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_viterbi_decode": {
            "name": "test_viterbi_decode",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_sequence_cross_entropy_with_logits_masks_loss_correctly": {
            "name": "test_sequence_cross_entropy_with_logits_masks_loss_correctly",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_sequence_cross_entropy_with_logits_smooths_labels_correctly": {
            "name": "test_sequence_cross_entropy_with_logits_smooths_labels_correctly",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_sequence_cross_entropy_with_logits_averages_batch_correctly": {
            "name": "test_sequence_cross_entropy_with_logits_averages_batch_correctly",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_replace_masked_values_replaces_masked_values_with_finite_value": {
            "name": "test_replace_masked_values_replaces_masked_values_with_finite_value",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_logsumexp": {
            "name": "test_logsumexp",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_flatten_and_batch_shift_indices": {
            "name": "test_flatten_and_batch_shift_indices",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_batched_index_select": {
            "name": "test_batched_index_select",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_flattened_index_select": {
            "name": "test_flattened_index_select",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_bucket_values": {
            "name": "test_bucket_values",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_add_sentence_boundary_token_ids_handles_2D_input": {
            "name": "test_add_sentence_boundary_token_ids_handles_2D_input",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_add_sentence_boundary_token_ids_handles_3D_input": {
            "name": "test_add_sentence_boundary_token_ids_handles_3D_input",
            "location": 601,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_remove_sentence_boundaries": {
            "name": "test_remove_sentence_boundaries",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNnUtil.test_add_positional_features": {
            "name": "test_add_positional_features",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/nn/__init__.py": {},
    "allennlp-dureader-master/tests/service/server_flask_test.py": {
        "CountingPredictor.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingPredictor.predict_json": {
            "name": "predict_json",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "cuda_device": []
            }
        },
        "TestFlask.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.post_json": {
            "name": "post_json",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": [],
                "data": []
            }
        },
        "TestFlask.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_list_models": {
            "name": "test_list_models",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_unknown_model": {
            "name": "test_unknown_model",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_machine_comprehension": {
            "name": "test_machine_comprehension",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_textual_entailment": {
            "name": "test_textual_entailment",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_semantic_role_labeling": {
            "name": "test_semantic_role_labeling",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_caching": {
            "name": "test_caching",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_disable_caching": {
            "name": "test_disable_caching",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_missing_static_dir": {
            "name": "test_missing_static_dir",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_permalinks_fail_gracefully_with_no_database": {
            "name": "test_permalinks_fail_gracefully_with_no_database",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_permalinks_work": {
            "name": "test_permalinks_work",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlask.test_permalinks_work.post": {
            "name": "post",
            "location": 212,
            "return": [],
            "arguments": {
                "endpoint": [],
                "data": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/server_simple_test.py": {
        "post_json": {
            "name": "post_json",
            "location": 15,
            "return": [],
            "arguments": {
                "client": [],
                "endpoint": [],
                "data": []
            }
        },
        "TestSimpleServer.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleServer.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleServer.test_standard_model": {
            "name": "test_standard_model",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleServer.test_sanitizer": {
            "name": "test_sanitizer",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleServer.test_static_dir": {
            "name": "test_static_dir",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleServer.test_sanitizer.sanitize": {
            "name": "sanitize",
            "location": 62,
            "return": [],
            "arguments": {
                "result": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/__init__.py": {},
    "allennlp-dureader-master/tests/service/predictors/bidaf_test.py": {
        "TestBidafPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBidafPredictor.test_batch_prediction": {
            "name": "test_batch_prediction",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/constituency_parser_test.py": {
        "TestConstituencyParserPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParserPredictor.test_batch_prediction": {
            "name": "test_batch_prediction",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParserPredictor.test_build_hierplane_tree": {
            "name": "test_build_hierplane_tree",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/coref_test.py": {
        "TestCorefPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/decomposable_attention_test.py": {
        "TestDecomposableAttentionPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecomposableAttentionPredictor.test_batch_prediction": {
            "name": "test_batch_prediction",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/simple_seq2seq_test.py": {
        "TestSimpleSeq2SeqPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/srl_test.py": {
        "TestSrlPredictor.test_uses_named_inputs": {
            "name": "test_uses_named_inputs",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSrlPredictor.test_batch_prediction": {
            "name": "test_batch_prediction",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSrlPredictor.test_prediction_with_no_verbs": {
            "name": "test_prediction_with_no_verbs",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/service/predictors/__init__.py": {},
    "allennlp-dureader-master/tests/training/optimizer_test.py": {
        "TestOptimizer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOptimizer.test_optimizer_basic": {
            "name": "test_optimizer_basic",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOptimizer.test_optimizer_parameter_groups": {
            "name": "test_optimizer_parameter_groups",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/trainer_test.py": {
        "TestTrainer.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_can_run": {
            "name": "test_trainer_can_run",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_can_run_cuda": {
            "name": "test_trainer_can_run_cuda",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_can_run_multiple_gpu": {
            "name": "test_trainer_can_run_multiple_gpu",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_can_resume_training": {
            "name": "test_trainer_can_resume_training",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_should_stop_early_with_increasing_metric": {
            "name": "test_should_stop_early_with_increasing_metric",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_should_stop_early_with_decreasing_metric": {
            "name": "test_should_stop_early_with_decreasing_metric",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_train_driver_raises_on_model_with_no_loss_key": {
            "name": "test_train_driver_raises_on_model_with_no_loss_key",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_can_log_histograms": {
            "name": "test_trainer_can_log_histograms",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_respects_num_serialized_models_to_keep": {
            "name": "test_trainer_respects_num_serialized_models_to_keep",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_respects_keep_serialized_model_every_num_seconds": {
            "name": "test_trainer_respects_keep_serialized_model_every_num_seconds",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_saves_models_at_specified_interval": {
            "name": "test_trainer_saves_models_at_specified_interval",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSparseClipGrad.test_sparse_clip_grad": {
            "name": "test_sparse_clip_grad",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_train_driver_raises_on_model_with_no_loss_key.FakeModel.forward": {
            "name": "forward",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrainer.test_trainer_respects_keep_serialized_model_every_num_seconds.WaitingIterator._create_batches": {
            "name": "_create_batches",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/__init__.py": {},
    "allennlp-dureader-master/tests/training/metrics/boolean_accuracy_test.py": {
        "BooleanAccuracyTest.test_accuracy_computation": {
            "name": "test_accuracy_computation",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/categorical_accuracy_test.py": {
        "CategoricalAccuracyTest.test_categorical_accuracy": {
            "name": "test_categorical_accuracy",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccuracyTest.test_top_k_categorical_accuracy": {
            "name": "test_top_k_categorical_accuracy",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccuracyTest.test_top_k_categorical_accuracy_accumulates_and_resets_correctly": {
            "name": "test_top_k_categorical_accuracy_accumulates_and_resets_correctly",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccuracyTest.test_top_k_categorical_accuracy_respects_mask": {
            "name": "test_top_k_categorical_accuracy_respects_mask",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccuracyTest.test_top_k_categorical_accuracy_works_for_sequences": {
            "name": "test_top_k_categorical_accuracy_works_for_sequences",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccuracyTest.test_top_k_categorical_accuracy_catches_exceptions": {
            "name": "test_top_k_categorical_accuracy_catches_exceptions",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/entropy_test.py": {
        "EntropyTest.test_low_entropy_distribution": {
            "name": "test_low_entropy_distribution",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntropyTest.test_entropy_for_uniform_distribution": {
            "name": "test_entropy_for_uniform_distribution",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntropyTest.test_masked_case": {
            "name": "test_masked_case",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/evalb_bracketing_scorer_test.py": {
        "EvalbBracketingScorerTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalbBracketingScorerTest.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalbBracketingScorerTest.test_evalb_correctly_scores_identical_trees": {
            "name": "test_evalb_correctly_scores_identical_trees",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalbBracketingScorerTest.test_evalb_correctly_scores_imperfect_trees": {
            "name": "test_evalb_correctly_scores_imperfect_trees",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalbBracketingScorerTest.test_evalb_correctly_calculates_bracketing_metrics_over_multiple_trees": {
            "name": "test_evalb_correctly_calculates_bracketing_metrics_over_multiple_trees",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalbBracketingScorerTest.test_evalb_with_terrible_trees_handles_nan_f1": {
            "name": "test_evalb_with_terrible_trees_handles_nan_f1",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/f1_measure_test.py": {
        "F1MeasureTest.test_f1_measure_catches_exceptions": {
            "name": "test_f1_measure_catches_exceptions",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F1MeasureTest.test_f1_measure": {
            "name": "test_f1_measure",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F1MeasureTest.test_f1_measure_accumulates_and_resets_correctly": {
            "name": "test_f1_measure_accumulates_and_resets_correctly",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F1MeasureTest.test_f1_measure_works_for_sequences": {
            "name": "test_f1_measure_works_for_sequences",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/span_based_f1_measure_test.py": {
        "SpanBasedF1Test.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanBasedF1Test.test_span_metrics_are_computed_correcly_with_prediction_map": {
            "name": "test_span_metrics_are_computed_correcly_with_prediction_map",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanBasedF1Test.test_span_metrics_are_computed_correctly": {
            "name": "test_span_metrics_are_computed_correctly",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanBasedF1Test.test_span_f1_can_build_from_params": {
            "name": "test_span_f1_can_build_from_params",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpanBasedF1Test.test_span_f1_matches_perl_script_for_continued_arguments": {
            "name": "test_span_f1_matches_perl_script_for_continued_arguments",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tests/training/metrics/__init__.py": {},
    "allennlp-dureader-master/tools/distributed_utils.py": {
        "average_gradients": {
            "name": "average_gradients",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "broadcast_params": {
            "name": "broadcast_params",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "dist_init": {
            "name": "dist_init",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "port": [],
                "backend": []
            }
        }
    },
    "allennlp-dureader-master/tools/dureader_eval.py": {
        "normalize": {
            "name": "normalize",
            "location": 37,
            "return": [
                "Union[(List[str], _T0)]"
            ],
            "arguments": {
                "s": [
                    "_T0@@"
                ]
            }
        },
        "data_check": {
            "name": "data_check",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "task": []
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 82,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "file_name": [],
                "task": [],
                "is_ref": []
            }
        },
        "compute_bleu_rouge": {
            "name": "compute_bleu_rouge",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": [],
                "bleu_order": []
            }
        },
        "local_prf": {
            "name": "local_prf",
            "location": 142,
            "return": [
                "Tuple[(Union[(float, int)], Union[(float, int)], Union[(float, int)])]"
            ],
            "arguments": {
                "pred_list": [],
                "ref_list": []
            }
        },
        "compute_prf": {
            "name": "compute_prf",
            "location": 157,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": []
            }
        },
        "prepare_prf": {
            "name": "prepare_prf",
            "location": 194,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": []
            }
        },
        "filter_dict": {
            "name": "filter_dict",
            "location": 203,
            "return": [
                "dict"
            ],
            "arguments": {
                "result_dict": [],
                "key_tag": []
            }
        },
        "get_metrics": {
            "name": "get_metrics",
            "location": 214,
            "return": [
                "dict"
            ],
            "arguments": {
                "pred_result": [],
                "ref_result": [],
                "task": [],
                "source": []
            }
        },
        "prepare_bleu": {
            "name": "prepare_bleu",
            "location": 267,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "pred_result": [],
                "ref_result": [],
                "task": []
            }
        },
        "get_main_result": {
            "name": "get_main_result",
            "location": 304,
            "return": [
                "Tuple[(List[Tuple[(_T0, Any)]], List[Tuple[(_T0, Any)]])]"
            ],
            "arguments": {
                "qid": [
                    "_T0@@"
                ],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_entity_result": {
            "name": "get_entity_result",
            "location": 329,
            "return": [
                "Tuple[(Optional[List[Tuple[(_T3, Any)]]], Optional[List[Tuple[(_T3, Any)]]])]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_desc_result": {
            "name": "get_desc_result",
            "location": 349,
            "return": [
                "Tuple[(Optional[List[Tuple[(_T3, Any)]]], Optional[List[Tuple[(_T3, Any)]]])]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_yesno_result": {
            "name": "get_yesno_result",
            "location": 369,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_all_result": {
            "name": "get_all_result",
            "location": 426,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "qid": [
                    "_T0@@"
                ],
                "pred_result": [],
                "ref_result": []
            }
        },
        "format_metrics": {
            "name": "format_metrics",
            "location": 446,
            "return": [
                "Dict[(str, Union[(int, str, List[Dict[(str, Union[(float, str)])]])])]"
            ],
            "arguments": {
                "metrics": [],
                "task": [],
                "err_msg": []
            }
        },
        "main": {
            "name": "main",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "read_file._open": {
            "name": "_open",
            "location": 99,
            "return": [],
            "arguments": {
                "file_name": [],
                "mode": [],
                "zip_obj": []
            }
        },
        "get_yesno_result._uniq": {
            "name": "_uniq",
            "location": 384,
            "return": [],
            "arguments": {
                "li": [],
                "is_ref": []
            }
        },
        "get_yesno_result._expand_result": {
            "name": "_expand_result",
            "location": 402,
            "return": [],
            "arguments": {
                "uniq_li": []
            }
        },
        "get_yesno_result._get_yesno_ans": {
            "name": "_get_yesno_ans",
            "location": 409,
            "return": [],
            "arguments": {
                "qid": [],
                "result_dict": [],
                "is_ref": []
            }
        }
    },
    "allennlp-dureader-master/tools/load_helper.py": {
        "check_keys": {
            "name": "check_keys",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [],
                "pretrained_state_dict": []
            }
        },
        "load_pretrain": {
            "name": "load_pretrain",
            "location": 18,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "model": [
                    "_T0@@"
                ],
                "pretrained_path": []
            }
        },
        "restore_from": {
            "name": "restore_from",
            "location": 27,
            "return": [
                "Tuple[(_T0, _T1, Any)]"
            ],
            "arguments": {
                "model": [
                    "_T0@@"
                ],
                "optimizer": [
                    "_T1@@"
                ],
                "ckpt_path": []
            }
        }
    },
    "allennlp-dureader-master/tools/log_helper.py": {
        "init_log": {
            "name": "init_log",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "filter_by_rank": [],
                "level": []
            }
        },
        "print_speed": {
            "name": "print_speed",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [],
                "i_time": [],
                "n": []
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "allennlp-dureader-master/tools/lr_helper.py": {
        "_IterLRScheduler.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "last_iter": []
            }
        },
        "_IterLRScheduler.get_lr": {
            "name": "get_lr",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IterLRScheduler.step": {
            "name": "step",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter": []
            }
        },
        "IterLinearLR.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "gamma": [],
                "last_iter": []
            }
        },
        "IterLinearLR.get_lr": {
            "name": "get_lr",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterExponentialLR.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "gamma": [],
                "last_iter": []
            }
        },
        "IterExponentialLR.get_lr": {
            "name": "get_lr",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/tools/parse_anno_json.py": {
        "reader": {
            "name": "reader",
            "location": 5,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "input": []
            }
        },
        "writer": {
            "name": "writer",
            "location": 9,
            "return": [
                "codecs.StreamReaderWriter"
            ],
            "arguments": {
                "output": []
            }
        },
        "add_yesno_answer": {
            "name": "add_yesno_answer",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "get_segmented_sentences": {
            "name": "get_segmented_sentences",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "output": []
            }
        }
    },
    "allennlp-dureader-master/tools/train_val.py": {
        "get_rank_world_size": {
            "name": "get_rank_world_size",
            "location": 127,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "construct_allen_vocab_from_du_vocab": {
            "name": "construct_allen_vocab_from_du_vocab",
            "location": 141,
            "return": [],
            "arguments": {
                "du_vocab": []
            }
        },
        "prepare_du_vocab": {
            "name": "prepare_du_vocab",
            "location": 157,
            "return": [],
            "arguments": {
                "vocab_dir": [],
                "trainset": [],
                "embed_size": [],
                "args": []
            }
        },
        "build_dataloader": {
            "name": "build_dataloader",
            "location": 189,
            "return": [],
            "arguments": {
                "files": [],
                "args": [],
                "is_train": []
            }
        },
        "warmup": {
            "name": "warmup",
            "location": 200,
            "return": [],
            "arguments": {
                "model": [],
                "train_loader": [],
                "optimizer": [],
                "args": []
            }
        },
        "makedirs": {
            "name": "makedirs",
            "location": 215,
            "return": [],
            "arguments": {
                "dirs": []
            }
        },
        "main": {
            "name": "main",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 292,
            "return": [],
            "arguments": {
                "train_loader": [],
                "model": [],
                "lr_scheduler": [],
                "epoch": [],
                "args": [],
                "warmup": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 339,
            "return": [],
            "arguments": {
                "val_loader": [],
                "model": [],
                "args": []
            }
        },
        "dump_pred_results": {
            "name": "dump_pred_results",
            "location": 384,
            "return": [],
            "arguments": {
                "pred_answers": [],
                "output_file": [],
                "readable": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 394,
            "return": [],
            "arguments": {
                "pred_answers": [],
                "ref_answers": []
            }
        },
        "get_ref_answers": {
            "name": "get_ref_answers",
            "location": 407,
            "return": [],
            "arguments": {
                "samples": []
            }
        },
        "get_pred_answers": {
            "name": "get_pred_answers",
            "location": 418,
            "return": [],
            "arguments": {
                "best_spans": [],
                "best_scores": [],
                "samples": []
            }
        },
        "find_best_answer": {
            "name": "find_best_answer",
            "location": 455,
            "return": [],
            "arguments": {
                "best_spans": [],
                "best_scores": [],
                "batch_size": []
            }
        },
        "get_answer_str": {
            "name": "get_answer_str",
            "location": 482,
            "return": [],
            "arguments": {
                "answer_doc": [],
                "answer_span": [],
                "sample": []
            }
        },
        "AverageMeter.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.reset": {
            "name": "reset",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.update": {
            "name": "update",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "n": []
            }
        }
    },
    "allennlp-dureader-master/tools/train_word2vec.py": {},
    "allennlp-dureader-master/tools/ZQ.py": {},
    "allennlp-dureader-master/utils/dureader_eval.py": {
        "normalize": {
            "name": "normalize",
            "location": 37,
            "return": [
                "Union[(List[str], _T0)]"
            ],
            "arguments": {
                "s": [
                    "_T0@@"
                ]
            }
        },
        "data_check": {
            "name": "data_check",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "task": []
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 82,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "file_name": [],
                "task": [],
                "is_ref": []
            }
        },
        "compute_bleu_rouge": {
            "name": "compute_bleu_rouge",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": [],
                "bleu_order": []
            }
        },
        "local_prf": {
            "name": "local_prf",
            "location": 142,
            "return": [
                "Tuple[(Union[(float, int)], Union[(float, int)], Union[(float, int)])]"
            ],
            "arguments": {
                "pred_list": [],
                "ref_list": []
            }
        },
        "compute_prf": {
            "name": "compute_prf",
            "location": 157,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": []
            }
        },
        "prepare_prf": {
            "name": "prepare_prf",
            "location": 194,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "pred_dict": [],
                "ref_dict": []
            }
        },
        "filter_dict": {
            "name": "filter_dict",
            "location": 203,
            "return": [
                "dict"
            ],
            "arguments": {
                "result_dict": [],
                "key_tag": []
            }
        },
        "get_metrics": {
            "name": "get_metrics",
            "location": 214,
            "return": [
                "dict"
            ],
            "arguments": {
                "pred_result": [],
                "ref_result": [],
                "task": [],
                "source": []
            }
        },
        "prepare_bleu": {
            "name": "prepare_bleu",
            "location": 267,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "pred_result": [],
                "ref_result": [],
                "task": []
            }
        },
        "get_main_result": {
            "name": "get_main_result",
            "location": 304,
            "return": [
                "Tuple[(List[Tuple[(_T0, Any)]], List[Tuple[(_T0, Any)]])]"
            ],
            "arguments": {
                "qid": [
                    "_T0@@"
                ],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_entity_result": {
            "name": "get_entity_result",
            "location": 329,
            "return": [
                "Tuple[(Optional[List[Tuple[(_T3, Any)]]], Optional[List[Tuple[(_T3, Any)]]])]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_desc_result": {
            "name": "get_desc_result",
            "location": 349,
            "return": [
                "Tuple[(Optional[List[Tuple[(_T3, Any)]]], Optional[List[Tuple[(_T3, Any)]]])]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_yesno_result": {
            "name": "get_yesno_result",
            "location": 369,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "qid": [],
                "pred_result": [],
                "ref_result": []
            }
        },
        "get_all_result": {
            "name": "get_all_result",
            "location": 426,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "qid": [
                    "_T0@@"
                ],
                "pred_result": [],
                "ref_result": []
            }
        },
        "format_metrics": {
            "name": "format_metrics",
            "location": 446,
            "return": [
                "Dict[(str, Union[(int, str, List[Dict[(str, Union[(float, str)])]])])]"
            ],
            "arguments": {
                "metrics": [],
                "task": [],
                "err_msg": []
            }
        },
        "main": {
            "name": "main",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "read_file._open": {
            "name": "_open",
            "location": 99,
            "return": [],
            "arguments": {
                "file_name": [],
                "mode": [],
                "zip_obj": []
            }
        },
        "get_yesno_result._uniq": {
            "name": "_uniq",
            "location": 384,
            "return": [],
            "arguments": {
                "li": [],
                "is_ref": []
            }
        },
        "get_yesno_result._expand_result": {
            "name": "_expand_result",
            "location": 402,
            "return": [],
            "arguments": {
                "uniq_li": []
            }
        },
        "get_yesno_result._get_yesno_ans": {
            "name": "_get_yesno_ans",
            "location": 409,
            "return": [],
            "arguments": {
                "qid": [],
                "result_dict": [],
                "is_ref": []
            }
        }
    },
    "allennlp-dureader-master/utils/filter_passage_by_title_question_f1.py": {
        "to_list": {
            "name": "to_list",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "allennlp-dureader-master/utils/get_vocab.py": {
        "get_vocab": {
            "name": "get_vocab",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [],
                "vocab_file": []
            }
        }
    },
    "allennlp-dureader-master/utils/preprocess.py": {
        "precision_recall_f1": {
            "name": "precision_recall_f1",
            "location": 29,
            "return": [
                "Tuple[(Union[(float, int)], Union[(float, int)], Union[(float, int)])]"
            ],
            "arguments": {
                "prediction": [],
                "ground_truth": []
            }
        },
        "recall": {
            "name": "recall",
            "location": 58,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "prediction": [],
                "ground_truth": []
            }
        },
        "f1_score": {
            "name": "f1_score",
            "location": 72,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "prediction": [],
                "ground_truth": []
            }
        },
        "metric_max_over_ground_truths": {
            "name": "metric_max_over_ground_truths",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "metric_fn": [],
                "prediction": [],
                "ground_truths": []
            }
        },
        "find_best_question_match": {
            "name": "find_best_question_match",
            "location": 105,
            "return": [
                "Union[(int, Tuple[(int, Any)])]"
            ],
            "arguments": {
                "doc": [],
                "question": [],
                "with_score": []
            }
        },
        "find_fake_answer": {
            "name": "find_fake_answer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": []
            }
        }
    },
    "allennlp-dureader-master/utils/__init__.py": {},
    "allennlp-dureader-master/utils/bleu_metric/bleu.py": {
        "Bleu.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Bleu.compute_score": {
            "name": "compute_score",
            "location": 21,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "gts": [],
                "res": []
            }
        },
        "Bleu.method": {
            "name": "method",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/utils/bleu_metric/bleu_scorer.py": {
        "precook": {
            "name": "precook",
            "location": 23,
            "return": [
                "Tuple[(int, collections.defaultdict[(tuple, Any)])]"
            ],
            "arguments": {
                "s": [],
                "n": [],
                "out": []
            }
        },
        "cook_refs": {
            "name": "cook_refs",
            "location": 35,
            "return": [
                "Tuple[(Union[(float, int, List[int])], Dict[(tuple, Any)])]"
            ],
            "arguments": {
                "refs": [],
                "eff": [],
                "n": []
            }
        },
        "cook_test": {
            "name": "cook_test",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "test": [],
                "xxx_todo_changeme": [],
                "eff": [],
                "n": []
            }
        },
        "BleuScorer.copy": {
            "name": "copy",
            "location": 92,
            "return": [
                "_TBleuScorer@@BleuScorer@@"
            ],
            "arguments": {
                "self": [
                    "_TBleuScorer@@BleuScorer@@"
                ]
            }
        },
        "BleuScorer.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [],
                "refs": [],
                "n": [],
                "special_reflen": []
            }
        },
        "BleuScorer.cook_append": {
            "name": "cook_append",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [],
                "refs": []
            }
        },
        "BleuScorer.ratio": {
            "name": "ratio",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer.score_ratio": {
            "name": "score_ratio",
            "location": 126,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer.score_ratio_str": {
            "name": "score_ratio_str",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer.reflen": {
            "name": "reflen",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer.testlen": {
            "name": "testlen",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer.retest": {
            "name": "retest",
            "location": 141,
            "return": [
                "_TBleuScorer@@BleuScorer@@"
            ],
            "arguments": {
                "self": [
                    "_TBleuScorer@@BleuScorer@@"
                ],
                "new_test": []
            }
        },
        "BleuScorer.rescore": {
            "name": "rescore",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "new_test": []
            }
        },
        "BleuScorer.size": {
            "name": "size",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BleuScorer.__iadd__": {
            "name": "__iadd__",
            "location": 161,
            "return": [
                "_TBleuScorer@@BleuScorer@@"
            ],
            "arguments": {
                "self": [
                    "_TBleuScorer@@BleuScorer@@"
                ],
                "other": []
            }
        },
        "BleuScorer.compatible": {
            "name": "compatible",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BleuScorer.single_reflen": {
            "name": "single_reflen",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "BleuScorer._single_reflen": {
            "name": "_single_reflen",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "reflens": [],
                "option": [],
                "testlen": []
            }
        },
        "BleuScorer.recompute_score": {
            "name": "recompute_score",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": [],
                "verbose": []
            }
        },
        "BleuScorer.compute_score": {
            "name": "compute_score",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option": [],
                "verbose": []
            }
        }
    },
    "allennlp-dureader-master/utils/bleu_metric/__init__.py": {},
    "allennlp-dureader-master/utils/rouge_metric/rouge.py": {
        "my_lcs": {
            "name": "my_lcs",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [],
                "sub": []
            }
        },
        "Rouge.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rouge.calc_score": {
            "name": "calc_score",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "refs": []
            }
        },
        "Rouge.compute_score": {
            "name": "compute_score",
            "location": 77,
            "return": [
                "Tuple[(Any, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "gts": [],
                "res": []
            }
        },
        "Rouge.method": {
            "name": "method",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allennlp-dureader-master/utils/rouge_metric/__init__.py": {}
}
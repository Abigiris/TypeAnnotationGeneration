{
    "allygator-visualizer-master/visualizer/manage.py": {},
    "allygator-visualizer-master/visualizer/vehicles/admin.py": {},
    "allygator-visualizer-master/visualizer/vehicles/api.py": {
        "register_vehicle": {
            "name": "register_vehicle",
            "location": 26,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "deregister_vehicle": {
            "name": "deregister_vehicle",
            "location": 40,
            "return": [],
            "arguments": {
                "vehicle": []
            }
        },
        "update_location": {
            "name": "update_location",
            "location": 53,
            "return": [],
            "arguments": {
                "vehicle": [],
                "location": [],
                "at": []
            }
        },
        "location_is_valid": {
            "name": "location_is_valid",
            "location": 84,
            "return": [],
            "arguments": {
                "location": []
            }
        },
        "validate_location": {
            "name": "validate_location",
            "location": 91,
            "return": [],
            "arguments": {
                "location": []
            }
        },
        "get_bearing_degrees": {
            "name": "get_bearing_degrees",
            "location": 99,
            "return": [],
            "arguments": {
                "from_location": [],
                "to_location": []
            }
        },
        "point_from_lat_lng": {
            "name": "point_from_lat_lng",
            "location": 120,
            "return": [],
            "arguments": {
                "lat": [],
                "lng": []
            }
        },
        "InvalidLocation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "location": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/apps.py": {},
    "allygator-visualizer-master/visualizer/vehicles/conf.py": {
        "get_city_polygon": {
            "name": "get_city_polygon",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/models.py": {},
    "allygator-visualizer-master/visualizer/vehicles/serializers.py": {
        "VehicleSerializer.create": {
            "name": "create",
            "location": 25,
            "return": [
                "vehicles_models.Vehicle"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "VehicleLocationSerializer.validate": {
            "name": "validate",
            "location": 43,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "_T0"
                ]
            }
        },
        "VehicleLocationSerializer.create": {
            "name": "create",
            "location": 59,
            "return": [
                "vehicles_models.VehicleLocation"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/migrations/0001_initial.py": {},
    "allygator-visualizer-master/visualizer/vehicles/migrations/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_deregister_vehicle.py": {
        "DeregisterVehicleTests.test_removes_active_flag": {
            "name": "test_removes_active_flag",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_unsets_current_location_and_bearing": {
            "name": "test_unsets_current_location_and_bearing",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_raises_exception_when_already_inactive": {
            "name": "test_raises_exception_when_already_inactive",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_location_is_valid.py": {
        "LocationIsValidTests.test_city_center_valid": {
            "name": "test_city_center_valid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_huge_distance_away_invalid": {
            "name": "test_huge_distance_away_invalid",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_3km_away_valid": {
            "name": "test_3km_away_valid",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_west_invalid": {
            "name": "test_over_3km_away_west_invalid",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_east_invalid": {
            "name": "test_over_3km_away_east_invalid",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_north_invalid": {
            "name": "test_over_3km_away_north_invalid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationIsValidTests.test_over_3km_away_south_invalid": {
            "name": "test_over_3km_away_south_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_register_vehicle.py": {
        "RegisterVehicleTests.test_creates_and_returns_active_vehicle": {
            "name": "test_creates_and_returns_active_vehicle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_creates_multiple_vehicles": {
            "name": "test_creates_multiple_vehicles",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_reactivates_existing_inactive_vehicle": {
            "name": "test_reactivates_existing_inactive_vehicle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterVehicleTests.test_raises_exception_when_already_active": {
            "name": "test_raises_exception_when_already_active",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/test_update_location.py": {
        "UpdateLocationTests.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_raises_exception_given_invalid_location": {
            "name": "test_raises_exception_given_invalid_location",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_sets_current_location_on_vehicle": {
            "name": "test_sets_current_location_on_vehicle",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_updates_current_location_on_vehicle": {
            "name": "test_updates_current_location_on_vehicle",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_adds_vehicle_location_entry": {
            "name": "test_adds_vehicle_location_entry",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_sets_bearing_when_previous_location": {
            "name": "test_sets_bearing_when_previous_location",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateLocationTests.test_does_not_set_bearing_when_previous_update_after_new": {
            "name": "test_does_not_set_bearing_when_previous_update_after_new",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/api/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/views/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_deregister_vehicle.py": {
        "DeregisterVehicleTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeregisterVehicleTests.test_post_deregisters_vehicle_with_given_uuid": {
            "name": "test_post_deregisters_vehicle_with_given_uuid",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_list_register_vehicle.py": {
        "ListRegisterVehicleTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_post_creates_vehicle_with_given_uuid": {
            "name": "test_post_creates_vehicle_with_given_uuid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_post_reactivates_existing_vehicle_with_given_uuid": {
            "name": "test_post_reactivates_existing_vehicle_with_given_uuid",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListRegisterVehicleTests.test_get_lists_existing_vehicles": {
            "name": "test_get_lists_existing_vehicles",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/test_location_update.py": {
        "LocationUpdateTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationUpdateTests.test_post_sets_current_location_and_archives_record": {
            "name": "test_post_sets_current_location_and_archives_record",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationUpdateTests.test_rejects_updates_out_of_city_boundary": {
            "name": "test_rejects_updates_out_of_city_boundary",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/tests/views/api/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/urls/api.py": {},
    "allygator-visualizer-master/visualizer/vehicles/urls/__init__.py": {},
    "allygator-visualizer-master/visualizer/vehicles/views/api.py": {
        "VehicleAPIMixin.get_queryset": {
            "name": "get_queryset",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VehicleAPIMixin.create": {
            "name": "create",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "VehicleAPIMixin.destroy": {
            "name": "destroy",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DeregisterVehicle.perform_destroy": {
            "name": "perform_destroy",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "LocationUpdate.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "allygator-visualizer-master/visualizer/vehicles/views/__init__.py": {},
    "allygator-visualizer-master/visualizer/visualizer/urls.py": {},
    "allygator-visualizer-master/visualizer/visualizer/wsgi.py": {},
    "allygator-visualizer-master/visualizer/visualizer/__init__.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/base.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/dev.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/prod.py": {},
    "allygator-visualizer-master/visualizer/visualizer/settings/__init__.py": {}
}
{
    "ambianic-edge-master/docs/fastapi_spec_gen.py": {},
    "ambianic-edge-master/src/setup.py": {},
    "ambianic-edge-master/src/__init__.py": {},
    "ambianic-edge-master/src/ambianic/configuration.py": {
        "get_root_config": {
            "name": "get_root_config",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_config_defaults_file": {
            "name": "get_config_defaults_file",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_config_file": {
            "name": "get_config_file",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_local_config_file": {
            "name": "get_local_config_file",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_peerid_file": {
            "name": "get_peerid_file",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_secrets_file": {
            "name": "get_secrets_file",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_all_config_files": {
            "name": "get_all_config_files",
            "location": 77,
            "return": [
                "Optional[list]"
            ],
            "arguments": {}
        },
        "init_config": {
            "name": "init_config",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "reload_config": {
            "name": "reload_config",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_config": {
            "name": "save_config",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_work_dir": {
            "name": "get_work_dir",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/src/ambianic/device.py": {},
    "ambianic-edge-master/src/ambianic/logger.py": {
        "_get_log_level": {
            "name": "_get_log_level",
            "location": 13,
            "return": [
                "Tuple[(Any, logging.Formatter)]"
            ],
            "arguments": {
                "log_level": [],
                "default_log_level": []
            }
        },
        "configure": {
            "name": "configure",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/notification.py": {
        "Notification.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "envelope": [],
                "providers": []
            }
        },
        "Notification.add_attachments": {
            "name": "add_attachments",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.to_dict": {
            "name": "to_dict",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationHandler.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "NotificationHandler.send": {
            "name": "send",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notification": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/server.py": {
        "AmbianicServer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_dir": []
            }
        },
        "AmbianicServer.stop_watch_config": {
            "name": "stop_watch_config",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer.start_watch_config": {
            "name": "start_watch_config",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer._stop_servers": {
            "name": "_stop_servers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "servers": []
            }
        },
        "AmbianicServer._healthcheck": {
            "name": "_healthcheck",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "servers": []
            }
        },
        "AmbianicServer._log_heartbeat": {
            "name": "_log_heartbeat",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer._heartbeat": {
            "name": "_heartbeat",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer.dispatch": {
            "name": "dispatch",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "AmbianicServer.restart": {
            "name": "restart",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer.start": {
            "name": "start",
            "location": 119,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmbianicServer.stop": {
            "name": "stop",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/util.py": {
        "stacktrace": {
            "name": "stacktrace",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "jsonify": {
            "name": "jsonify",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "val": []
            }
        },
        "ManagedService.start": {
            "name": "start",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedService.stop": {
            "name": "stop",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedService.healthcheck": {
            "name": "healthcheck",
            "location": 30,
            "return": [
                "Tuple[(float, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedService.heal": {
            "name": "heal",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedJob.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "ThreadedJob.run": {
            "name": "run",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedJob.stop": {
            "name": "stop",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedJob.heal": {
            "name": "heal",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedJob.healthcheck": {
            "name": "healthcheck",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonEncoder.default": {
            "name": "default",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/__init__.py": {},
    "ambianic-edge-master/src/ambianic/__main__.py": {
        "start": {
            "name": "start",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_service_shutdown": {
            "name": "_service_shutdown",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "_register_sys_handlers": {
            "name": "_register_sys_handlers",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/interpreter.py": {
        "get_pipelines": {
            "name": "get_pipelines",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "pipelines_config": [],
                "data_dir": []
            }
        },
        "PipelineServer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PipelineServer.start": {
            "name": "start",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServer.healthcheck": {
            "name": "healthcheck",
            "location": 77,
            "return": [
                "Tuple[(float, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServer.heal": {
            "name": "heal",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServer.stop": {
            "name": "stop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServerJob.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PipelineServerJob.reset": {
            "name": "reset",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PipelineServerJob._on_terminal_pipeline_health": {
            "name": "_on_terminal_pipeline_health",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [],
                "lapse": []
            }
        },
        "PipelineServerJob._on_pipeline_job_ended": {
            "name": "_on_pipeline_job_ended",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threaded_job": []
            }
        },
        "PipelineServerJob.healthcheck": {
            "name": "healthcheck",
            "location": 163,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServerJob.heal": {
            "name": "heal",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServerJob.heal_pipeline_job": {
            "name": "heal_pipeline_job",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threaded_job": []
            }
        },
        "PipelineServerJob.start": {
            "name": "start",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineServerJob.stop": {
            "name": "stop",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealingThread.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "on_finished": []
            }
        },
        "HealingThread.run": {
            "name": "run",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._on_unknown_pipe_element": {
            "name": "_on_unknown_pipe_element",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pname": [],
                "pconfig": [],
                "data_dir": []
            }
        },
        "Pipeline.load_elements": {
            "name": "load_elements",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.parse_ai_model_config": {
            "name": "parse_ai_model_config",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element_def": []
            }
        },
        "Pipeline.parse_source_config": {
            "name": "parse_source_config",
            "location": 403,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element_def": []
            }
        },
        "Pipeline.restart": {
            "name": "restart",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.reset": {
            "name": "reset",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._heartbeat": {
            "name": "_heartbeat",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._on_start_no_elements": {
            "name": "_on_start_no_elements",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.start": {
            "name": "start",
            "location": 456,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.healthcheck": {
            "name": "healthcheck",
            "location": 484,
            "return": [
                "Tuple[(float, bool)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._on_healing_already_in_progress": {
            "name": "_on_healing_already_in_progress",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.heal": {
            "name": "heal",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.stop": {
            "name": "stop",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.heal.healing_finished": {
            "name": "healing_finished",
            "location": 517,
            "return": [],
            "arguments": {}
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/pipeline_event.py": {
        "configure_timeline": {
            "name": "configure_timeline",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "get_event_log": {
            "name": "get_event_log",
            "location": 167,
            "return": [
                "logging.LoggerAdapter[logging.Logger]"
            ],
            "arguments": {
                "pipeline_context": []
            }
        },
        "PipelineEvent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PipelineEvent.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineContext.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_pipeline_name": []
            }
        },
        "PipelineContext.unique_pipeline_name": {
            "name": "unique_pipeline_name",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipelineContext.data_dir": {
            "name": "data_dir",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "dd": []
            }
        },
        "PipelineContext.push_element_context": {
            "name": "push_element_context",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_context": []
            }
        },
        "PipelineContext.pop_element_context": {
            "name": "pop_element_context",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineEventFormatter.format": {
            "name": "format",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/save_event.py": {
        "SaveDetectionEvents.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "positive_interval": [],
                "idle_interval": [],
                "notify": []
            }
        },
        "SaveDetectionEvents._save_sample": {
            "name": "_save_sample",
            "location": 81,
            "return": [
                "Tuple[(pathlib.Path, pathlib.Path)]"
            ],
            "arguments": {
                "self": [],
                "inf_time": [],
                "image": [],
                "thumbnail": [],
                "inference_result": [],
                "inference_meta": []
            }
        },
        "SaveDetectionEvents.process_sample": {
            "name": "process_sample",
            "location": 138,
            "return": [
                "Generator[(Optional[Dict[(str, Any)]], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveDetectionEvents.notify": {
            "name": "notify",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_data": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/__init__.py": {
        "PipeElement.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_name": [],
                "context": [],
                "event_log": []
            }
        },
        "PipeElement.name": {
            "name": "name",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.context": {
            "name": "context",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.push_context": {
            "name": "push_context",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element_context": []
            }
        },
        "PipeElement.pop_context": {
            "name": "pop_context",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.event_log": {
            "name": "event_log",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.state": {
            "name": "state",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.start": {
            "name": "start",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.heal": {
            "name": "heal",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.healthcheck": {
            "name": "healthcheck",
            "location": 124,
            "return": [
                "Tuple[(float, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.heartbeat": {
            "name": "heartbeat",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.stop": {
            "name": "stop",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.connect_to_next_element": {
            "name": "connect_to_next_element",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_element": []
            }
        },
        "PipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeElement.process_sample": {
            "name": "process_sample",
            "location": 191,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthChecker.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "health_status_callback": []
            }
        },
        "HealthChecker.process_sample": {
            "name": "process_sample",
            "location": 241,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/face_detect.py": {
        "FaceDetector.crop_image": {
            "name": "crop_image",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "box": []
            }
        },
        "FaceDetector.process_sample": {
            "name": "process_sample",
            "location": 30,
            "return": [
                "Generator[(Optional[Dict[(str, Any)]], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceDetector.convert_inference_result": {
            "name": "convert_inference_result",
            "location": 99,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/fall_detect.py": {
        "FallDetector.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "confidence_threshold": []
            }
        },
        "FallDetector.process_sample": {
            "name": "process_sample",
            "location": 98,
            "return": [
                "Generator[(Optional[Dict[(str, Any)]], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FallDetector.calculate_angle": {
            "name": "calculate_angle",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "FallDetector.is_body_line_motion_downward": {
            "name": "is_body_line_motion_downward",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left_angle_with_yaxis": [],
                "rigth_angle_with_yaxis": [],
                "inx": []
            }
        },
        "FallDetector.find_keypoints": {
            "name": "find_keypoints",
            "location": 170,
            "return": [
                "Tuple[(Any, Any, Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "FallDetector.find_changes_in_angle": {
            "name": "find_changes_in_angle",
            "location": 231,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "pose_dix": [],
                "inx": []
            }
        },
        "FallDetector.assign_prev_records": {
            "name": "assign_prev_records",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pose_dix": [],
                "left_angle_with_yaxis": [],
                "rigth_angle_with_yaxis": [],
                "now": [],
                "thumbnail": [],
                "current_body_vector_score": []
            }
        },
        "FallDetector.draw_lines": {
            "name": "draw_lines",
            "location": 302,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "thumbnail": [],
                "pose_dix": [],
                "score": []
            }
        },
        "FallDetector.get_line_angles_with_yaxis": {
            "name": "get_line_angles_with_yaxis",
            "location": 333,
            "return": [
                "Tuple[(Union[(float, int)], Union[(float, int)])]"
            ],
            "arguments": {
                "self": [],
                "pose_dix": []
            }
        },
        "FallDetector.estimate_spinal_vector_score": {
            "name": "estimate_spinal_vector_score",
            "location": 360,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "pose": []
            }
        },
        "FallDetector.fall_detect": {
            "name": "fall_detect",
            "location": 423,
            "return": [
                "Tuple[(Optional[List[Tuple[(str, Any, Any, Any)]]], Any)]"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "FallDetector.convert_inference_result": {
            "name": "convert_inference_result",
            "location": 537,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "inference_result": []
            }
        },
        "FallDetector.estimate_spinal_vector_score.find_spinalLine": {
            "name": "find_spinalLine",
            "location": 384,
            "return": [],
            "arguments": {}
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/image_boundingBox_detection.py": {
        "TFBoundingBoxDetection.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TFBoundingBoxDetection.detect": {
            "name": "detect",
            "location": 25,
            "return": [
                "Tuple[(Any, Any, List[Tuple[(Any, Any, Tuple[(Any, Any, Any, Any)])]])]"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/inference.py": {
        "_get_edgetpu_interpreter": {
            "name": "_get_edgetpu_interpreter",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "model": []
            }
        },
        "TFInferenceEngine.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "labels": [],
                "confidence_threshold": [],
                "top_k": []
            }
        },
        "TFInferenceEngine.input_details": {
            "name": "input_details",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.output_details": {
            "name": "output_details",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.is_quantized": {
            "name": "is_quantized",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.labels_path": {
            "name": "labels_path",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.confidence_threshold": {
            "name": "confidence_threshold",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.top_k": {
            "name": "top_k",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.infer": {
            "name": "infer",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFInferenceEngine.set_tensor": {
            "name": "set_tensor",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "tensor_data": []
            }
        },
        "TFInferenceEngine.get_tensor": {
            "name": "get_tensor",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/object_detect.py": {
        "ObjectDetector.process_sample": {
            "name": "process_sample",
            "location": 14,
            "return": [
                "Generator[(Optional[Dict[(str, Any)]], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetector.convert_inference_result": {
            "name": "convert_inference_result",
            "location": 46,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/pose_engine.py": {
        "Keypoint.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "yx": [],
                "score": []
            }
        },
        "Keypoint.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pose.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keypoints": [],
                "score": []
            }
        },
        "Pose.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoseEngine.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfengine": [],
                "context": []
            }
        },
        "PoseEngine.get_input_tensor_shape": {
            "name": "get_input_tensor_shape",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoseEngine.parse_output": {
            "name": "parse_output",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "heatmap_data": [],
                "offset_data": [],
                "threshold": []
            }
        },
        "PoseEngine.sigmoid": {
            "name": "sigmoid",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "PoseEngine.tf_interpreter": {
            "name": "tf_interpreter",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoseEngine.detect_poses": {
            "name": "detect_poses",
            "location": 137,
            "return": [
                "Tuple[(List[Pose], Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/ai/tf_detect.py": {
        "TFDetectionModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "labels": [],
                "label_filter": [],
                "confidence_threshold": [],
                "top_k": []
            }
        },
        "TFDetectionModel.load_labels": {
            "name": "load_labels",
            "location": 51,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "label_path": []
            }
        },
        "TFDetectionModel.thumbnail": {
            "name": "thumbnail",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "desired_size": []
            }
        },
        "TFDetectionModel.resize": {
            "name": "resize",
            "location": 111,
            "return": [
                "PIL.Image.Image"
            ],
            "arguments": {
                "image": [],
                "desired_size": []
            }
        },
        "TFDetectionModel.resize_to_input_tensor": {
            "name": "resize_to_input_tensor",
            "location": 144,
            "return": [
                "Tuple[(PIL.Image.Image, Any)]"
            ],
            "arguments": {
                "image": [],
                "desired_size": []
            }
        },
        "TFDetectionModel.log_stats": {
            "name": "log_stats",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_time": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/avsource/av_element.py": {
        "AVSourceElement.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "type": [],
                "live": []
            }
        },
        "AVSourceElement._on_new_sample": {
            "name": "_on_new_sample",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "AVSourceElement._get_gst_service_starter": {
            "name": "_get_gst_service_starter",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement._get_sample_queue": {
            "name": "_get_sample_queue",
            "location": 90,
            "return": [
                "multiprocessing.queues.Queue[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement.fetch_img": {
            "name": "fetch_img",
            "location": 94,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "url": []
            }
        },
        "AVSourceElement._on_fetch_img_exception": {
            "name": "_on_fetch_img_exception",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_exception": []
            }
        },
        "AVSourceElement._fetch_img_exception_recovery": {
            "name": "_fetch_img_exception_recovery",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement._run_picamera_fetch": {
            "name": "_run_picamera_fetch",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement._run_http_fetch": {
            "name": "_run_http_fetch",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "continuous": []
            }
        },
        "AVSourceElement._run_gst_service": {
            "name": "_run_gst_service",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement._clear_gst_out_queue": {
            "name": "_clear_gst_out_queue",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement._process_terminate": {
            "name": "_process_terminate",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "AVSourceElement._process_good_kill": {
            "name": "_process_good_kill",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "AVSourceElement._stop_gst_service": {
            "name": "_stop_gst_service",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement.start": {
            "name": "start",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement.heal": {
            "name": "heal",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVSourceElement.stop": {
            "name": "stop",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/avsource/gst_process.py": {
        "start_gst_service": {
            "name": "start_gst_service",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "source_conf": [],
                "out_queue": [],
                "stop_signal": [],
                "eos_reached": []
            }
        },
        "GstService.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_conf": [],
                "out_queue": [],
                "stop_signal": [],
                "eos_reached": []
            }
        },
        "GstService.on_autoplug_continue": {
            "name": "on_autoplug_continue",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "src_bin": [],
                "src_pad": [],
                "src_caps": []
            }
        },
        "GstService._on_bus_message_eos": {
            "name": "_on_bus_message_eos",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GstService._on_bus_message_warning": {
            "name": "_on_bus_message_warning",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GstService._on_bus_message_error": {
            "name": "_on_bus_message_error",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GstService._on_bus_message": {
            "name": "_on_bus_message",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bus": [],
                "message": [],
                "loop": []
            }
        },
        "GstService._on_new_sample_out_queue_full": {
            "name": "_on_new_sample_out_queue_full",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sink": []
            }
        },
        "GstService._on_new_sample": {
            "name": "_on_new_sample",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sink": []
            }
        },
        "GstService._get_pipeline_args": {
            "name": "_get_pipeline_args",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._set_gst_debug_level": {
            "name": "_set_gst_debug_level",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._build_gst_pipeline": {
            "name": "_build_gst_pipeline",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._gst_mainloop_run": {
            "name": "_gst_mainloop_run",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._gst_pipeline_play": {
            "name": "_gst_pipeline_play",
            "location": 278,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._gst_loop": {
            "name": "_gst_loop",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._gst_cleanup": {
            "name": "_gst_cleanup",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._service_terminate": {
            "name": "_service_terminate",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [],
                "frame": []
            }
        },
        "GstService._stop_handler": {
            "name": "_stop_handler",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._register_stop_handler": {
            "name": "_register_stop_handler",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService._register_sys_signal_handler": {
            "name": "_register_sys_signal_handler",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService.run": {
            "name": "run",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstService.PipelineSource.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_conf": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/pipeline/avsource/picam.py": {
        "Picamera.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_format": [],
                "queue_max_size": []
            }
        },
        "Picamera.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "_TPicamera@@Picamera@@"
            ],
            "arguments": {
                "self": [
                    "_TPicamera@@Picamera@@"
                ]
            }
        },
        "Picamera.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "_TPicamera@@Picamera@@"
            ],
            "arguments": {
                "self": [
                    "_TPicamera@@Picamera@@"
                ],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": []
            }
        },
        "Picamera.start": {
            "name": "start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picamera.has_failure": {
            "name": "has_failure",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picamera._get_camera": {
            "name": "_get_camera",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picamera.run": {
            "name": "run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picamera.acquire": {
            "name": "acquire",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Picamera.stop": {
            "name": "stop",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/webapp/fastapi_app.py": {
        "_mount_data_dir": {
            "name": "_mount_data_dir",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": []
            }
        },
        "set_data_dir": {
            "name": "set_data_dir",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": []
            }
        },
        "hello": {
            "name": "hello",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "health_check": {
            "name": "health_check",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "get_status": {
            "name": "get_status",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "initialize_premium_notification": {
            "name": "initialize_premium_notification",
            "location": 137,
            "return": [],
            "arguments": {
                "userId": [],
                "notification_endpoint": []
            }
        },
        "get_timeline": {
            "name": "get_timeline",
            "location": 160,
            "return": [],
            "arguments": {
                "page": []
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "get_device_display_name": {
            "name": "get_device_display_name",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "set_device_display_name": {
            "name": "set_device_display_name",
            "location": 199,
            "return": [],
            "arguments": {
                "display_name": []
            }
        },
        "test_notifications": {
            "name": "test_notifications",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "set_ifttt_api_key": {
            "name": "set_ifttt_api_key",
            "location": 240,
            "return": [],
            "arguments": {
                "api_key": []
            }
        },
        "enable_notifications": {
            "name": "enable_notifications",
            "location": 266,
            "return": [],
            "arguments": {
                "enable": []
            }
        },
        "get_config_source": {
            "name": "get_config_source",
            "location": 282,
            "return": [],
            "arguments": {
                "source_id": []
            }
        },
        "update_config_source": {
            "name": "update_config_source",
            "location": 287,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "delete_config_source": {
            "name": "delete_config_source",
            "location": 293,
            "return": [],
            "arguments": {
                "source_id": []
            }
        },
        "ping": {
            "name": "ping",
            "location": 300,
            "return": [],
            "arguments": {}
        }
    },
    "ambianic-edge-master/src/ambianic/webapp/__init__.py": {},
    "ambianic-edge-master/src/ambianic/webapp/server/config_sources.py": {
        "get": {
            "name": "get",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "source_id": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "source_id": []
            }
        },
        "save": {
            "name": "save",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "source": []
            }
        }
    },
    "ambianic-edge-master/src/ambianic/webapp/server/timeline_dao.py": {
        "_remove_timeline": {
            "name": "_remove_timeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "get_timeline": {
            "name": "get_timeline",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "before_datetime": [],
                "page": [],
                "data_dir": []
            }
        }
    },
    "ambianic-edge-master/tests/test_config.py": {
        "setup": {
            "name": "setup",
            "location": 17,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "config": {
            "name": "config",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_get_workdir_env": {
            "name": "test_get_workdir_env",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_pipelines": {
            "name": "test_no_pipelines",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "test_secrets": {
            "name": "test_secrets",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "ambianic-edge-master/tests/test_logger.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "test_log_config_with_file": {
            "name": "test_log_config_with_file",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_log_config_without_file": {
            "name": "test_log_config_without_file",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_with_debug_level": {
            "name": "test_log_config_with_debug_level",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_with_warning_level": {
            "name": "test_log_config_with_warning_level",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_without_level": {
            "name": "test_log_config_without_level",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_bad_level1": {
            "name": "test_log_config_bad_level1",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_bad_level2": {
            "name": "test_log_config_bad_level2",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_with_debug_console_level": {
            "name": "test_log_config_with_debug_console_level",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_with_warning_console_level": {
            "name": "test_log_config_with_warning_console_level",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_with_info_console_level": {
            "name": "test_log_config_with_info_console_level",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_without_console_level": {
            "name": "test_log_config_without_console_level",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_bad_console_level1": {
            "name": "test_log_config_bad_console_level1",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_config_bad_console_level2": {
            "name": "test_log_config_bad_console_level2",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/test_rest_api.py": {
        "setup_session": {
            "name": "setup_session",
            "location": 27,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "change_test_dir": {
            "name": "change_test_dir",
            "location": 36,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 49,
            "return": [],
            "arguments": {
                "request": [],
                "tmp_path": []
            }
        },
        "client": {
            "name": "client",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_hello": {
            "name": "test_hello",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_health_check": {
            "name": "test_health_check",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_timeline": {
            "name": "test_get_timeline",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_initialize_premium_notification": {
            "name": "test_initialize_premium_notification",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_config": {
            "name": "test_get_config",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_save_source": {
            "name": "test_save_source",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_delete_source": {
            "name": "test_delete_source",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_ping": {
            "name": "test_ping",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_device_display_name": {
            "name": "test_get_device_display_name",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "config": []
            }
        },
        "test_set_device_display_name": {
            "name": "test_set_device_display_name",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "request": [],
                "config": []
            }
        },
        "test_set_device_display_name_empty": {
            "name": "test_set_device_display_name_empty",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_enable_notifications": {
            "name": "test_enable_notifications",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "config": []
            }
        },
        "test_set_ifttt_api_key": {
            "name": "test_set_ifttt_api_key",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "config": []
            }
        },
        "test_test_notifications": {
            "name": "test_test_notifications",
            "location": 257,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "client": [],
                "config": []
            }
        },
        "test_test_notifications.fake_send": {
            "name": "fake_send",
            "location": 261,
            "return": [],
            "arguments": {
                "_": [],
                "notification": []
            }
        }
    },
    "ambianic-edge-master/tests/test_service.py": {
        "test_threaded_job_init_no_job": {
            "name": "test_threaded_job_init_no_job",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_threaded_job_init_no_ms": {
            "name": "test_threaded_job_init_no_ms",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_threaded_job_init_ms": {
            "name": "test_threaded_job_init_ms",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_healthcheck": {
            "name": "test_healthcheck",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_heal": {
            "name": "test_heal",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "MockManagedService.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockManagedService.healthcheck": {
            "name": "healthcheck",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockManagedService.heal": {
            "name": "heal",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/test_startup.py": {
        "my_dir": {
            "name": "my_dir",
            "location": 19,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "setup_module": {
            "name": "setup_module",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "config": {
            "name": "config",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_no_work_dir": {
            "name": "test_no_work_dir",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_work_dir": {
            "name": "test_bad_work_dir",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_start_mock_server": {
            "name": "_start_mock_server",
            "location": 84,
            "return": [
                "Tuple[(MockAmbianicServer, threading.Thread)]"
            ],
            "arguments": {}
        },
        "_stop_mock_server": {
            "name": "_stop_mock_server",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "thread": []
            }
        },
        "test_no_pipelines": {
            "name": "test_no_pipelines",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "my_dir": [],
                "config": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "my_dir": [],
                "config": []
            }
        },
        "test_system_shutdown_signal": {
            "name": "test_system_shutdown_signal",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_heartbeat_threshold": {
            "name": "test_heartbeat_threshold",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "my_dir": []
            }
        },
        "test_main_heartbeat_log": {
            "name": "test_main_heartbeat_log",
            "location": 162,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "my_dir": [],
                "config": []
            }
        },
        "test_config_change": {
            "name": "test_config_change",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "my_dir": []
            }
        },
        "MockAmbianicServer.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_dir": [],
                "heartbeat_flag": []
            }
        },
        "MockAmbianicServer._heartbeat": {
            "name": "_heartbeat",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockAmbianicServer._log_heartbeat": {
            "name": "_log_heartbeat",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockAmbianicServer.dispatch": {
            "name": "dispatch",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "_BadPipelineServer.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "_BadPipelineServer.healthcheck": {
            "name": "healthcheck",
            "location": 135,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BadPipelineServer.heal": {
            "name": "heal",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/test_timeline_dao.py": {
        "test_get_timeline_overflow": {
            "name": "test_get_timeline_overflow",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_timelines_no_dir": {
            "name": "test_get_timelines_no_dir",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_list": {
            "name": "test_empty_list",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_timelines_before_datetime": {
            "name": "test_get_timelines_before_datetime",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_yaml": {
            "name": "test_bad_yaml",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_yaml_2": {
            "name": "test_bad_yaml_2",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_yaml_3": {
            "name": "test_bad_yaml_3",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_timelines": {
            "name": "test_get_timelines",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/test_util.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "test_jsonify_none": {
            "name": "test_jsonify_none",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/test_interpreter.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "_get_pipelines_config": {
            "name": "_get_pipelines_config",
            "location": 75,
            "return": [
                "Dict[(str, List[Dict[(str, Dict[(str, str)])]])]"
            ],
            "arguments": {}
        },
        "_one_pipeline_setup": {
            "name": "_one_pipeline_setup",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "pipelines_config": [],
                "set_source_el": []
            }
        },
        "test_get_pipelines_none": {
            "name": "test_get_pipelines_none",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_derived_pipe_element": {
            "name": "test_derived_pipe_element",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_pipelines_one": {
            "name": "test_get_pipelines_one",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_pipelines_two": {
            "name": "test_get_pipelines_two",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_start": {
            "name": "test_pipeline_start",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_stop": {
            "name": "test_pipeline_stop",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_source_config": {
            "name": "test_pipeline_source_config",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_ai_model_config": {
            "name": "test_pipeline_ai_model_config",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_TestPipeline.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pname": [],
                "pconfig": [],
                "data_dir": []
            }
        },
        "_TestPipeline.restart": {
            "name": "restart",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.start": {
            "name": "start",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.heal": {
            "name": "heal",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.stop": {
            "name": "stop",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/test_interpreter_more.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "teardown_module": {
            "name": "teardown_module",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        },
        "_get_config": {
            "name": "_get_config",
            "location": 55,
            "return": [
                "Dict[(str, Dict[(str, List[Dict[(str, Dict[(str, str)])]])])]"
            ],
            "arguments": {
                "source_class": []
            }
        },
        "test_pipeline_server_init": {
            "name": "test_pipeline_server_init",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_config_invalid_element": {
            "name": "_get_config_invalid_element",
            "location": 71,
            "return": [
                "List[Dict[(str, Dict[(str, str)])]]"
            ],
            "arguments": {
                "source_class": []
            }
        },
        "test_pipeline_init_invalid_element": {
            "name": "test_pipeline_init_invalid_element",
            "location": 102,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_pipeline_server_start_stop": {
            "name": "test_pipeline_server_start_stop",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_server_config_change": {
            "name": "test_pipeline_server_config_change",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_server_heal": {
            "name": "test_pipeline_server_heal",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_terminal_health": {
            "name": "test_pipeline_terminal_health",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_pipeline_config_2_elements": {
            "name": "_get_pipeline_config_2_elements",
            "location": 241,
            "return": [
                "List[Dict[(str, Dict[(str, str)])]]"
            ],
            "arguments": {}
        },
        "test_pipeline_start2": {
            "name": "test_pipeline_start2",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_heal2": {
            "name": "test_pipeline_heal2",
            "location": 277,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_pipeline_start_no_elements": {
            "name": "test_pipeline_start_no_elements",
            "location": 293,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_healing_thread": {
            "name": "test_healing_thread",
            "location": 302,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_on_pipeline_job_ended": {
            "name": "test_on_pipeline_job_ended",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_TestSourceElement.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.start": {
            "name": "start",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestPipeline.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pname": [],
                "pconfig": []
            }
        },
        "_TestPipeline._on_unknown_pipe_element": {
            "name": "_on_unknown_pipe_element",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_TestPipeline._on_healing_already_in_progress": {
            "name": "_on_healing_already_in_progress",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestPipeline._on_start_no_elements": {
            "name": "_on_start_no_elements",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement2.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement2.start": {
            "name": "start",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement3.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement3.heal": {
            "name": "heal",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement3.start": {
            "name": "start",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestPipelineServer2.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "_TestPipelineServer2._on_terminal_pipeline_health": {
            "name": "_on_terminal_pipeline_health",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [],
                "lapse": []
            }
        },
        "_TestDummyElement.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestDummyElement.process_sample": {
            "name": "process_sample",
            "location": 235,
            "return": [
                "Generator[(Dict[(str, _T0)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "_T0@@"
                ]
            }
        },
        "_TestSourceElement4.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement4.start": {
            "name": "start",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement4.heal": {
            "name": "heal",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_healing_thread.target": {
            "name": "target",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_healing_thread.on_finished": {
            "name": "on_finished",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "_TestPipelineServer5._on_pipeline_job_ended": {
            "name": "_on_pipeline_job_ended",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threaded_job": []
            }
        },
        "_TestSourceElement5.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceElement5.start": {
            "name": "start",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/test_notify.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "test_notification_with_attachments": {
            "name": "test_notification_with_attachments",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notification_without_attachments": {
            "name": "test_notification_without_attachments",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plain_notification": {
            "name": "test_plain_notification",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockRequestHandler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MockRequestHandler.do_POST": {
            "name": "do_POST",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPMockServer.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ev": []
            }
        },
        "HTTPMockServer.stop": {
            "name": "stop",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSaveDetectionSamples._save_sample": {
            "name": "_save_sample",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inf_time": [],
                "image": [],
                "thumbnail": [],
                "inference_result": [],
                "inference_meta": []
            }
        },
        "HTTPMockServer.__init__.handler": {
            "name": "handler",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/test_pipeline_healthchecker.py": {
        "test_init": {
            "name": "test_init",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_receive_next_sample": {
            "name": "test_receive_next_sample",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_init.hc_callback": {
            "name": "hc_callback",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_receive_next_sample.hc_callback": {
            "name": "hc_callback",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/test_pipeline_server.py": {
        "test_pipeline_server_start_stop": {
            "name": "test_pipeline_server_start_stop",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/test_pipe_element.py": {
        "test_init": {
            "name": "test_init",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start": {
            "name": "test_start",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stop": {
            "name": "test_stop",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_connect_to_next_element": {
            "name": "test_connect_to_next_element",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_connect_to_bad_next_element": {
            "name": "test_connect_to_bad_next_element",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_healthcheck": {
            "name": "test_healthcheck",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/test_save_event.py": {
        "setup": {
            "name": "setup",
            "location": 25,
            "return": [],
            "arguments": {
                "request": [],
                "tmp_path": []
            }
        },
        "config": {
            "name": "config",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_json_encoder": {
            "name": "test_json_encoder",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_encoder_integerData": {
            "name": "test_json_encoder_integerData",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_encoder_arrayData": {
            "name": "test_json_encoder_arrayData",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_sample_none": {
            "name": "test_process_sample_none",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_sample": {
            "name": "test_process_sample",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_store_positive_detection": {
            "name": "test_store_positive_detection",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_positive_detection": {
            "name": "test_notify_positive_detection",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "mocker": []
            }
        },
        "test_store_negative_detection": {
            "name": "test_store_negative_detection",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_negative_detection": {
            "name": "test_notify_negative_detection",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "mocker": []
            }
        },
        "test_store_negative_detection_no_inference": {
            "name": "test_store_negative_detection_no_inference",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notify_negative_detection_no_inference": {
            "name": "test_notify_negative_detection_no_inference",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "mocker": []
            }
        },
        "test_process_sample_exception": {
            "name": "test_process_sample_exception",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_TestSaveDetectionSamples.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSaveDetectionSamples._save_sample": {
            "name": "_save_sample",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inf_time": [],
                "image": [],
                "thumbnail": [],
                "inference_result": [],
                "inference_meta": []
            }
        },
        "_TestSaveDetectionSamples2.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSaveDetectionSamples2._save_sample": {
            "name": "_save_sample",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inf_time": [],
                "image": [],
                "thumbnail": [],
                "inference_result": [],
                "inference_meta": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_face_detect.py": {
        "_object_detect_config": {
            "name": "_object_detect_config",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "_face_detect_config": {
            "name": "_face_detect_config",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "_get_image": {
            "name": "_get_image",
            "location": 52,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "test_model_inputs": {
            "name": "test_model_inputs",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_model_outputs": {
            "name": "test_model_outputs",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_no_sample": {
            "name": "test_no_sample",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_bad_sample_good_sample": {
            "name": "test_bad_sample_good_sample",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_background_image_no_person": {
            "name": "test_background_image_no_person",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_one_person_high_confidence_face_low_confidence_two_stage_pipe": {
            "name": "test_one_person_high_confidence_face_low_confidence_two_stage_pipe",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "test_thermal_one_person_face_two_stage_pipe": {
            "name": "test_thermal_one_person_face_two_stage_pipe",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_thermal_one_person_miss_face_two_stage_pipe": {
            "name": "test_thermal_one_person_miss_face_two_stage_pipe",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test2_one_person_high_confidence_face_low_confidence_two_stage_pipe": {
            "name": "test2_one_person_high_confidence_face_low_confidence_two_stage_pipe",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "test_one_person_two_stage_pipe_high_face_confidence": {
            "name": "test_one_person_two_stage_pipe_high_face_confidence",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "test_two_person_high_confidence_one_face_high_confidence_two_stage_pipe": {
            "name": "test_two_person_high_confidence_one_face_high_confidence_two_stage_pipe",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_two_person_with_faces_no_confidence_one_stage_pipe": {
            "name": "test_two_person_with_faces_no_confidence_one_stage_pipe",
            "location": 420,
            "return": [],
            "arguments": {}
        },
        "test_one_person_face_high_confidence_one_stage_pipe": {
            "name": "test_one_person_face_high_confidence_one_stage_pipe",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "test_one_person_no_face_two_stage": {
            "name": "test_one_person_no_face_two_stage",
            "location": 486,
            "return": [],
            "arguments": {}
        },
        "_OutPipeElement.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "sample_callback": []
            }
        },
        "_OutPipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_no_sample.sample_callback": {
            "name": "sample_callback",
            "location": 108,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_bad_sample_good_sample.sample_callback": {
            "name": "sample_callback",
            "location": 124,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_background_image_no_person.sample_callback": {
            "name": "sample_callback",
            "location": 173,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_high_confidence_face_low_confidence_two_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 191,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_thermal_one_person_face_two_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 228,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_thermal_one_person_miss_face_two_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 272,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test2_one_person_high_confidence_face_low_confidence_two_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 307,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_two_stage_pipe_high_face_confidence.sample_callback": {
            "name": "sample_callback",
            "location": 343,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_two_person_high_confidence_one_face_high_confidence_two_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 373,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_two_person_with_faces_no_confidence_one_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 433,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_face_high_confidence_one_stage_pipe.sample_callback": {
            "name": "sample_callback",
            "location": 455,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_no_face_two_stage.sample_callback": {
            "name": "sample_callback",
            "location": 492,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_fall_detect.py": {
        "_fall_detect_config": {
            "name": "_fall_detect_config",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "_get_image": {
            "name": "_get_image",
            "location": 33,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "test_model_inputs": {
            "name": "test_model_inputs",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_thumbnail_present": {
            "name": "test_fall_detection_thumbnail_present",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_1": {
            "name": "test_fall_detection_case_1",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_2_1": {
            "name": "test_fall_detection_case_2_1",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_2_2": {
            "name": "test_fall_detection_case_2_2",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_3_1": {
            "name": "test_fall_detection_case_3_1",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_3_2": {
            "name": "test_fall_detection_case_3_2",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_4": {
            "name": "test_fall_detection_case_4",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_5": {
            "name": "test_fall_detection_case_5",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_6": {
            "name": "test_fall_detection_case_6",
            "location": 336,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_7": {
            "name": "test_fall_detection_case_7",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_case_8": {
            "name": "test_fall_detection_case_8",
            "location": 397,
            "return": [],
            "arguments": {}
        },
        "test_background_image": {
            "name": "test_background_image",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "test_no_sample": {
            "name": "test_no_sample",
            "location": 448,
            "return": [],
            "arguments": {}
        },
        "test_bad_sample_good_sample": {
            "name": "test_bad_sample_good_sample",
            "location": 464,
            "return": [],
            "arguments": {}
        },
        "test_draw_line_0": {
            "name": "test_draw_line_0",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "test_draw_line_1": {
            "name": "test_draw_line_1",
            "location": 525,
            "return": [],
            "arguments": {}
        },
        "test_draw_line_1_1": {
            "name": "test_draw_line_1_1",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "test_draw_line_2": {
            "name": "test_draw_line_2",
            "location": 549,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_2_frame_back_case_1": {
            "name": "test_fall_detection_2_frame_back_case_1",
            "location": 567,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_2_frame_back_case_2": {
            "name": "test_fall_detection_2_frame_back_case_2",
            "location": 623,
            "return": [],
            "arguments": {}
        },
        "test_fall_detection_2_frame_back_case_3": {
            "name": "test_fall_detection_2_frame_back_case_3",
            "location": 678,
            "return": [],
            "arguments": {}
        },
        "_OutPipeElement.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "sample_callback": []
            }
        },
        "_OutPipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fall_detection_thumbnail_present.sample_callback": {
            "name": "sample_callback",
            "location": 73,
            "return": [],
            "arguments": {
                "image": [],
                "thumbnail": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_1.sample_callback": {
            "name": "sample_callback",
            "location": 92,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_2_1.sample_callback": {
            "name": "sample_callback",
            "location": 122,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_2_2.sample_callback": {
            "name": "sample_callback",
            "location": 159,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_3_1.sample_callback": {
            "name": "sample_callback",
            "location": 199,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_3_2.sample_callback": {
            "name": "sample_callback",
            "location": 241,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_4.sample_callback": {
            "name": "sample_callback",
            "location": 282,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_5.sample_callback": {
            "name": "sample_callback",
            "location": 312,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_6.sample_callback": {
            "name": "sample_callback",
            "location": 342,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_7.sample_callback": {
            "name": "sample_callback",
            "location": 372,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_case_8.sample_callback": {
            "name": "sample_callback",
            "location": 402,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_background_image.sample_callback": {
            "name": "sample_callback",
            "location": 432,
            "return": [],
            "arguments": {
                "image": [],
                "thumbnail": [],
                "inference_result": []
            }
        },
        "test_no_sample.sample_callback": {
            "name": "sample_callback",
            "location": 453,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_bad_sample_good_sample.sample_callback": {
            "name": "sample_callback",
            "location": 469,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_2_frame_back_case_1.sample_callback": {
            "name": "sample_callback",
            "location": 578,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_2_frame_back_case_2.sample_callback": {
            "name": "sample_callback",
            "location": 633,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_fall_detection_2_frame_back_case_3.sample_callback": {
            "name": "sample_callback",
            "location": 689,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_fall_detect_more.py": {
        "test_model_inputs": {
            "name": "test_model_inputs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_confidence_threshold": {
            "name": "test_config_confidence_threshold",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_helper_test_debug_image_save": {
            "name": "_helper_test_debug_image_save",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_debug_image_save_no_context": {
            "name": "test_debug_image_save_no_context",
            "location": 86,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_debug_image_save_with_context": {
            "name": "test_debug_image_save_with_context",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_helper_test_debug_image_save.sample_callback": {
            "name": "sample_callback",
            "location": 59,
            "return": [],
            "arguments": {
                "image": [],
                "thumbnail": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_image_detect.py": {
        "test_inference_init_no_config": {
            "name": "test_inference_init_no_config",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inference_init_bad_config": {
            "name": "test_inference_init_bad_config",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_good_config": {
            "name": "_good_config",
            "location": 28,
            "return": [
                "Dict[(str, Union[(float, int, str, Dict[(str, str)])])]"
            ],
            "arguments": {}
        },
        "test_inference_init_good_config": {
            "name": "test_inference_init_good_config",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_inputs": {
            "name": "test_model_inputs",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_outputs": {
            "name": "test_model_outputs",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resize": {
            "name": "test_resize",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thumbnail": {
            "name": "test_thumbnail",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_receive_next_sample": {
            "name": "test_receive_next_sample",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_labels": {
            "name": "test_load_labels",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_inference.py": {
        "test_inference_init_no_params": {
            "name": "test_inference_init_no_params",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inference_init_no_model_yes_labels": {
            "name": "test_inference_init_no_model_yes_labels",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inference_init_no_tflite_model_yes_edgemodel": {
            "name": "test_inference_init_no_tflite_model_yes_edgemodel",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_good_labels": {
            "name": "_good_labels",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_good_tflite_model": {
            "name": "_good_tflite_model",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_good_edgetpu_model": {
            "name": "_good_edgetpu_model",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_inference_init_yes_tflite_model_no_edgemodel": {
            "name": "test_inference_init_yes_tflite_model_no_edgemodel",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inference_init_yes_models_yes_labels": {
            "name": "test_inference_init_yes_models_yes_labels",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inference_init_other_params": {
            "name": "test_inference_init_other_params",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ambianic-edge-master/tests/pipeline/ai/test_object_detect.py": {
        "_object_detect_config": {
            "name": "_object_detect_config",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "_get_image": {
            "name": "_get_image",
            "location": 30,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "test_model_inputs": {
            "name": "test_model_inputs",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_model_outputs": {
            "name": "test_model_outputs",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_background_image": {
            "name": "test_background_image",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_one_person": {
            "name": "test_one_person",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_one_person_thermal": {
            "name": "test_one_person_thermal",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_no_sample": {
            "name": "test_no_sample",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_bad_sample_good_sample": {
            "name": "test_bad_sample_good_sample",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_one_person_no_face": {
            "name": "test_one_person_no_face",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "test_one_label_filter": {
            "name": "test_one_label_filter",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_two_labels_filter": {
            "name": "test_two_labels_filter",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "test_no_labels_filter": {
            "name": "test_no_labels_filter",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_bad_label_filter": {
            "name": "test_bad_label_filter",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_one_label_not_in_picture": {
            "name": "test_one_label_not_in_picture",
            "location": 369,
            "return": [],
            "arguments": {}
        },
        "_OutPipeElement.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "sample_callback": []
            }
        },
        "_OutPipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_background_image.sample_callback": {
            "name": "sample_callback",
            "location": 86,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person.sample_callback": {
            "name": "sample_callback",
            "location": 103,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_thermal.sample_callback": {
            "name": "sample_callback",
            "location": 132,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_no_sample.sample_callback": {
            "name": "sample_callback",
            "location": 161,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_bad_sample_good_sample.sample_callback": {
            "name": "sample_callback",
            "location": 177,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_person_no_face.sample_callback": {
            "name": "sample_callback",
            "location": 209,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_label_filter.sample_callback": {
            "name": "sample_callback",
            "location": 241,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_two_labels_filter.sample_callback": {
            "name": "sample_callback",
            "location": 272,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_no_labels_filter.sample_callback": {
            "name": "sample_callback",
            "location": 314,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_bad_label_filter.sample_callback": {
            "name": "sample_callback",
            "location": 356,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_one_label_not_in_picture.sample_callback": {
            "name": "sample_callback",
            "location": 377,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/avsource/test_avsource.py": {
        "test_no_config": {
            "name": "test_no_config",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_start_stop_dummy_source": {
            "name": "test_start_stop_dummy_source",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_start_stop_file_source_image_size": {
            "name": "test_start_stop_file_source_image_size",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "_object_detect_config": {
            "name": "_object_detect_config",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_start_stop_file_source_person_detect": {
            "name": "test_start_stop_file_source_person_detect",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_stop_on_video_EOS": {
            "name": "test_stop_on_video_EOS",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_still_image_input_detect_person_exit_eos": {
            "name": "test_still_image_input_detect_person_exit_eos",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_still_image_input_detect_person_exit_stop_signal": {
            "name": "test_still_image_input_detect_person_exit_stop_signal",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_picamera_fail_import": {
            "name": "test_picamera_fail_import",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_picamera_input": {
            "name": "test_picamera_input",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "test_heal": {
            "name": "test_heal",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_exception_on_new_sample": {
            "name": "test_exception_on_new_sample",
            "location": 467,
            "return": [],
            "arguments": {}
        },
        "_test_start_gst_service3": {
            "name": "_test_start_gst_service3",
            "location": 523,
            "return": [],
            "arguments": {
                "source_conf": [],
                "out_queue": [],
                "stop_signal": [],
                "eos_reached": []
            }
        },
        "test_gst_process_kill": {
            "name": "test_gst_process_kill",
            "location": 571,
            "return": [],
            "arguments": {}
        },
        "_test_start_gst_service4": {
            "name": "_test_start_gst_service4",
            "location": 649,
            "return": [],
            "arguments": {
                "source_conf": [],
                "out_queue": [],
                "stop_signal": [],
                "eos_reached": []
            }
        },
        "test_gst_process_terminate": {
            "name": "test_gst_process_terminate",
            "location": 691,
            "return": [],
            "arguments": {}
        },
        "_TestAVSourceElement.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement._run_gst_service": {
            "name": "_run_gst_service",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement._stop_gst_service": {
            "name": "_stop_gst_service",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OutPipeElement.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "sample_callback": []
            }
        },
        "_OutPipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_start_stop_file_source_image_size.sample_callback": {
            "name": "sample_callback",
            "location": 73,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_start_stop_file_source_person_detect.sample_callback": {
            "name": "sample_callback",
            "location": 128,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_stop_on_video_EOS.sample_callback": {
            "name": "sample_callback",
            "location": 183,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_still_image_input_detect_person_exit_eos.sample_callback": {
            "name": "sample_callback",
            "location": 223,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_still_image_input_detect_person_exit_stop_signal.sample_callback": {
            "name": "sample_callback",
            "location": 280,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_picamera_input.sample_callback": {
            "name": "sample_callback",
            "location": 347,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "_TestAVSourceElement2.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement2._get_sample_queue": {
            "name": "_get_sample_queue",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement2._on_new_sample": {
            "name": "_on_new_sample",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "test_exception_on_new_sample.sample_callback": {
            "name": "sample_callback",
            "location": 479,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "_TestGstService3._stop_handler": {
            "name": "_stop_handler",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService3._on_bus_message_eos": {
            "name": "_on_bus_message_eos",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_TestAVSourceElement3.__init__": {
            "name": "__init__",
            "location": 551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement3._get_gst_service_starter": {
            "name": "_get_gst_service_starter",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement3._process_good_kill": {
            "name": "_process_good_kill",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "test_gst_process_kill.sample_callback": {
            "name": "sample_callback",
            "location": 583,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "_TestGstService4._service_terminate": {
            "name": "_service_terminate",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [],
                "frame": []
            }
        },
        "_TestGstService4._stop_handler": {
            "name": "_stop_handler",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService4._on_bus_message_eos": {
            "name": "_on_bus_message_eos",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_TestAVSourceElement4.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement4._get_gst_service_starter": {
            "name": "_get_gst_service_starter",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement4._process_terminate": {
            "name": "_process_terminate",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "_TestAVSourceElement4._process_good_kill": {
            "name": "_process_good_kill",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "test_gst_process_terminate.sample_callback": {
            "name": "sample_callback",
            "location": 703,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/avsource/test_avsource_http.py": {
        "_object_detect_config": {
            "name": "_object_detect_config",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_http_still_image_input_detect_person_exit": {
            "name": "test_http_still_image_input_detect_person_exit",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_http_still_image_input_detect_person_exit_stop_signal": {
            "name": "test_http_still_image_input_detect_person_exit_stop_signal",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_exception_on_new_sample": {
            "name": "test_exception_on_new_sample",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "test_exception_on_http_fetch_single_snapshot": {
            "name": "test_exception_on_http_fetch_single_snapshot",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_exception_on_http_fetch_continuous": {
            "name": "test_exception_on_http_fetch_continuous",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "_TestAVSourceElement.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement._run_http_fetch": {
            "name": "_run_http_fetch",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "continuous": []
            }
        },
        "_OutPipeElement.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "sample_callback": []
            }
        },
        "_OutPipeElement.receive_next_sample": {
            "name": "receive_next_sample",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_http_still_image_input_detect_person_exit.sample_callback": {
            "name": "sample_callback",
            "location": 64,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "test_http_still_image_input_detect_person_exit_stop_signal.sample_callback": {
            "name": "sample_callback",
            "location": 116,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "_TestAVSourceElement2.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement2._get_sample_queue": {
            "name": "_get_sample_queue",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement2._on_new_sample": {
            "name": "_on_new_sample",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "test_exception_on_new_sample.sample_callback": {
            "name": "sample_callback",
            "location": 197,
            "return": [],
            "arguments": {
                "image": [],
                "inference_result": []
            }
        },
        "_TestAVSourceElement3.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAVSourceElement3._run_http_fetch": {
            "name": "_run_http_fetch",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "continuous": []
            }
        },
        "_TestAVSourceElement3._on_fetch_img_exception": {
            "name": "_on_fetch_img_exception",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "_exception": []
            }
        },
        "_TestAVSourceElement3._fetch_img_exception_recovery": {
            "name": "_fetch_img_exception_recovery",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/avsource/test_avsource_picamera.py": {
        "test_fail_import": {
            "name": "test_fail_import",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_acquire": {
            "name": "test_acquire",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_TestPiCamera.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fail_read": []
            }
        },
        "_TestPiCamera.__iter__": {
            "name": "__iter__",
            "location": 22,
            "return": [
                "_T_TestPiCamera@@_TestPiCamera@@"
            ],
            "arguments": {
                "self": [
                    "_T_TestPiCamera@@_TestPiCamera@@"
                ]
            }
        },
        "_TestPiCamera.__next__": {
            "name": "__next__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestPiCamera.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "_T_TestPiCamera@@_TestPiCamera@@"
            ],
            "arguments": {
                "self": [
                    "_T_TestPiCamera@@_TestPiCamera@@"
                ]
            }
        },
        "_TestPiCamera.__exit__": {
            "name": "__exit__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": []
            }
        },
        "_TestPiCamera.start_preview": {
            "name": "start_preview",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestPiCamera.capture_continuous": {
            "name": "capture_continuous",
            "location": 40,
            "return": [
                "_T_TestPiCamera@@_TestPiCamera@@"
            ],
            "arguments": {
                "self": [
                    "_T_TestPiCamera@@_TestPiCamera@@"
                ],
                "stream": [],
                "format": []
            }
        },
        "_TestPiCamera.capture": {
            "name": "capture",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "format": []
            }
        },
        "_TestPiCamera.close": {
            "name": "close",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ambianic-edge-master/tests/pipeline/avsource/test_gstreamer.py": {
        "test_on_auto_plugin": {
            "name": "test_on_auto_plugin",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_test_start_gst_service2": {
            "name": "_test_start_gst_service2",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "source_conf": [],
                "out_queue": [],
                "stop_signal": [],
                "eos_reached": []
            }
        },
        "test_image_source_one_sample": {
            "name": "test_image_source_one_sample",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_on_bus_message_warning": {
            "name": "test_on_bus_message_warning",
            "location": 155,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_on_bus_message_error": {
            "name": "test_on_bus_message_error",
            "location": 164,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_on_bus_message_eos_not_live_source": {
            "name": "test_on_bus_message_eos_not_live_source",
            "location": 173,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_on_bus_message_eos_live_source": {
            "name": "test_on_bus_message_eos_live_source",
            "location": 183,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_on_bus_message_other": {
            "name": "test_on_bus_message_other",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_still_image_source_one_sample_main_thread": {
            "name": "test_still_image_source_one_sample_main_thread",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample_out_queue_full_on_sample": {
            "name": "test_sample_out_queue_full_on_sample",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gst_debug_level": {
            "name": "test_gst_debug_level",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test2_on_new_sample_out_queue_full": {
            "name": "test2_on_new_sample_out_queue_full",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_exception": {
            "name": "test_run_exception",
            "location": 326,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_service_terminate_no_stop_signal": {
            "name": "test_service_terminate_no_stop_signal",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_on_new_sample": {
            "name": "test_on_new_sample",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gst_cleanup_exception": {
            "name": "test_gst_cleanup_exception",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gst_set_state_playing_failure": {
            "name": "test_gst_set_state_playing_failure",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gst_set_state_playing_no_preroll": {
            "name": "test_gst_set_state_playing_no_preroll",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dev_video_source": {
            "name": "test_dev_video_source",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_TestGstService.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSourceCaps.get_structure": {
            "name": "get_structure",
            "location": 32,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_TestGstService2._register_sys_signal_handler": {
            "name": "_register_sys_signal_handler",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService3.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService3._on_bus_message_eos": {
            "name": "_on_bus_message_eos",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_TestGstService3._on_bus_message_warning": {
            "name": "_on_bus_message_warning",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_TestGstService3._gst_cleanup": {
            "name": "_gst_cleanup",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService3._on_bus_message_error": {
            "name": "_on_bus_message_error",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "_TestBusMessage3.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestBusMessage3.parse_warning": {
            "name": "parse_warning",
            "location": 148,
            "return": [
                "Tuple[(None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestBusMessage3.parse_error": {
            "name": "parse_error",
            "location": 151,
            "return": [
                "Tuple[(None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService4._on_new_sample_out_queue_full": {
            "name": "_on_new_sample_out_queue_full",
            "location": 239,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sink": []
            }
        },
        "_TestGstService5.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService6.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestSink6.emit": {
            "name": "emit",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_TestGstService7.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService7._gst_loop": {
            "name": "_gst_loop",
            "location": 316,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService7._gst_cleanup": {
            "name": "_gst_cleanup",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService7._stop_handler": {
            "name": "_stop_handler",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService8.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService9.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestBuf.map": {
            "name": "map",
            "location": 355,
            "return": [
                "Tuple[(bool, _TestMapInfo)]"
            ],
            "arguments": {
                "self": [],
                "flag": []
            }
        },
        "_TestBuf.unmap": {
            "name": "unmap",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapinfo": []
            }
        },
        "_TestCaps.get_structure": {
            "name": "get_structure",
            "location": 364,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_TestGstSample.get_caps": {
            "name": "get_caps",
            "location": 370,
            "return": [
                "_TestCaps"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstSample.get_buffer": {
            "name": "get_buffer",
            "location": 373,
            "return": [
                "_TestBuf"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstSample.get_structure": {
            "name": "get_structure",
            "location": 376,
            "return": [
                "_TestCaps"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_TestSink9.emit": {
            "name": "emit",
            "location": 384,
            "return": [
                "_TestGstSample"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_TestGstService10.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService10._gst_cleanup": {
            "name": "_gst_cleanup",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService11.__init__": {
            "name": "__init__",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService11._gst_pipeline_play": {
            "name": "_gst_pipeline_play",
            "location": 429,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService11._gst_cleanup": {
            "name": "_gst_cleanup",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService11._build_gst_pipeline": {
            "name": "_build_gst_pipeline",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService11._gst_mainloop_run": {
            "name": "_gst_mainloop_run",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestGstService12._gst_pipeline_play": {
            "name": "_gst_pipeline_play",
            "location": 451,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_dev_video_source.create_gst": {
            "name": "create_gst",
            "location": 464,
            "return": [],
            "arguments": {
                "fmt": [],
                "uri": []
            }
        }
    }
}
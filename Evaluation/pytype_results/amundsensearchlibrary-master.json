{
    "amundsensearchlibrary-master/setup.py": {},
    "amundsensearchlibrary-master/search_service/config.py": {},
    "amundsensearchlibrary-master/search_service/exception.py": {
        "NotFoundException.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/search_wsgi.py": {},
    "amundsensearchlibrary-master/search_service/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/api/base.py": {
        "BaseFilterAPI.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFilterAPI.post": {
            "name": "post",
            "location": 34,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/api/dashboard.py": {
        "SearchDashboardAPI.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchDashboardAPI.get": {
            "name": "get",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchDashboardFilterAPI.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchDashboardFilterAPI.post": {
            "name": "post",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/api/document.py": {
        "BaseDocumentAPI.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "proxy": []
            }
        },
        "BaseDocumentAPI.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "Tuple[(Dict[(str, str)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDocumentsAPI.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "proxy": []
            }
        },
        "BaseDocumentsAPI.post": {
            "name": "post",
            "location": 55,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDocumentsAPI.put": {
            "name": "put",
            "location": 82,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTableAPI.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTableAPI.delete": {
            "name": "delete",
            "location": 117,
            "return": [
                "Tuple[(Dict[(str, str)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentUserAPI.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentUserAPI.delete": {
            "name": "delete",
            "location": 128,
            "return": [
                "Tuple[(Dict[(str, str)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTablesAPI.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTablesAPI.post": {
            "name": "post",
            "location": 139,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentTablesAPI.put": {
            "name": "put",
            "location": 143,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentUsersAPI.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentUsersAPI.post": {
            "name": "post",
            "location": 154,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentUsersAPI.put": {
            "name": "put",
            "location": 158,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/api/healthcheck.py": {
        "healthcheck": {
            "name": "healthcheck",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/api/table.py": {
        "SearchTableAPI.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTableAPI.get": {
            "name": "get",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchTableFilterAPI.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTableFilterAPI.post": {
            "name": "post",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/api/user.py": {
        "SearchUserAPI.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchUserAPI.get": {
            "name": "get",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/api/__init__.py": {},
    "amundsensearchlibrary-master/search_service/models/base.py": {
        "Base.get_id": {
            "name": "get_id",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Base"
                ]
            }
        },
        "Base.get_attrs": {
            "name": "get_attrs",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Base"
                ]
            }
        },
        "Base.get_type": {
            "name": "get_type",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/models/dashboard.py": {
        "Dashboard.get_id": {
            "name": "get_id",
            "location": 21,
            "return": [
                "Annotated[(Any, 'pytype_metadata', {'tag': 'attr.ib', 'init': True, 'kw_only': False, 'type_source': None, 'default': False})]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.get_attrs": {
            "name": "get_attrs",
            "location": 26,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Dashboard.get_type": {
            "name": "get_type",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/models/search_result.py": {
        "SearchResult.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/models/table.py": {
        "Table.get_id": {
            "name": "get_id",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.get_attrs_dict": {
            "name": "get_attrs_dict",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.get_attrs": {
            "name": "get_attrs",
            "location": 57,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Table.get_type": {
            "name": "get_type",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/models/tag.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/models/user.py": {
        "User.get_id": {
            "name": "get_id",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_attrs": {
            "name": "get_attrs",
            "location": 29,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "User.get_type": {
            "name": "get_type",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/models/__init__.py": {},
    "amundsensearchlibrary-master/search_service/proxy/atlas.py": {
        "AtlasProxy.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy._extract_entities": {
            "name": "_extract_entities",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "collections": []
            }
        },
        "AtlasProxy._prepare_tables": {
            "name": "_prepare_tables",
            "location": 55,
            "return": [
                "List[search_service.models.table.Table]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "enhance_metadata": []
            }
        },
        "AtlasProxy._atlas_basic_search": {
            "name": "_atlas_basic_search",
            "location": 112,
            "return": [
                "Tuple[(List[search_service.models.table.Table], Any)]"
            ],
            "arguments": {
                "self": [],
                "query_params": []
            }
        },
        "AtlasProxy._prepare_basic_search_query": {
            "name": "_prepare_basic_search_query",
            "location": 137,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "limit": [],
                "page_index": [],
                "query_term": [],
                "filters": [],
                "operator": [],
                "classification": [],
                "entity_type": []
            }
        },
        "AtlasProxy.fetch_table_search_results": {
            "name": "fetch_table_search_results",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.fetch_search_results_with_filter": {
            "name": "fetch_search_results_with_filter",
            "location": 223,
            "return": [
                "search_service.models.table.SearchTableResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.fetch_user_search_results": {
            "name": "fetch_user_search_results",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.update_document": {
            "name": "update_document",
            "location": 277,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.create_document": {
            "name": "create_document",
            "location": 280,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.delete_document": {
            "name": "delete_document",
            "location": 283,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasProxy.fetch_dashboard_search_results": {
            "name": "fetch_dashboard_search_results",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/proxy/base.py": {
        "BaseProxy.fetch_table_search_results": {
            "name": "fetch_table_search_results",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.fetch_user_search_results": {
            "name": "fetch_user_search_results",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.update_document": {
            "name": "update_document",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.create_document": {
            "name": "create_document",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.delete_document": {
            "name": "delete_document",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.fetch_search_results_with_filter": {
            "name": "fetch_search_results_with_filter",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.fetch_dashboard_search_results": {
            "name": "fetch_dashboard_search_results",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/proxy/elasticsearch.py": {
        "ElasticsearchProxy.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy._get_search_result": {
            "name": "_get_search_result",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "page_index": [],
                "client": [],
                "model": [],
                "search_result_model": []
            }
        },
        "ElasticsearchProxy._get_instance": {
            "name": "_get_instance",
            "location": 164,
            "return": [
                "Union[(List[search_service.models.tag.Tag], _T1)]"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "val": [
                    "_T1@@"
                ]
            }
        },
        "ElasticsearchProxy._search_helper": {
            "name": "_search_helper",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "page_index": [],
                "client": [],
                "query_name": [],
                "model": [],
                "search_result_model": []
            }
        },
        "ElasticsearchProxy.fetch_table_search_results": {
            "name": "fetch_table_search_results",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.get_model_by_index": {
            "name": "get_model_by_index",
            "location": 249,
            "return": [
                "Type[Union[(search_service.models.dashboard.Dashboard, search_service.models.table.Table, search_service.models.user.User)]]"
            ],
            "arguments": {
                "index": []
            }
        },
        "ElasticsearchProxy.parse_filters": {
            "name": "parse_filters",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "filter_list": [],
                "index": []
            }
        },
        "ElasticsearchProxy.validate_filter_values": {
            "name": "validate_filter_values",
            "location": 284,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "search_request": []
            }
        },
        "ElasticsearchProxy.parse_query_term": {
            "name": "parse_query_term",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "query_term": [],
                "index": []
            }
        },
        "ElasticsearchProxy.convert_query_json_to_query_dsl": {
            "name": "convert_query_json_to_query_dsl",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [
                    "Type[ElasticsearchProxy]"
                ]
            }
        },
        "ElasticsearchProxy.fetch_search_results_with_filter": {
            "name": "fetch_search_results_with_filter",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.fetch_user_search_results": {
            "name": "fetch_user_search_results",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.fetch_dashboard_search_results": {
            "name": "fetch_dashboard_search_results",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.create_document": {
            "name": "create_document",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.update_document": {
            "name": "update_document",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy.delete_document": {
            "name": "delete_document",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElasticsearchProxy._create_document_helper": {
            "name": "_create_document_helper",
            "location": 567,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index": [
                    "_T1@@"
                ]
            }
        },
        "ElasticsearchProxy._update_document_helper": {
            "name": "_update_document_helper",
            "location": 580,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index": [
                    "_T1@@"
                ]
            }
        },
        "ElasticsearchProxy._delete_document_helper": {
            "name": "_delete_document_helper",
            "location": 593,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index": [
                    "_T1@@"
                ]
            }
        },
        "ElasticsearchProxy._build_index_actions": {
            "name": "_build_index_actions",
            "location": 609,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index_key": []
            }
        },
        "ElasticsearchProxy._build_update_actions": {
            "name": "_build_update_actions",
            "location": 617,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index_key": []
            }
        },
        "ElasticsearchProxy._build_delete_actions": {
            "name": "_build_delete_actions",
            "location": 625,
            "return": [
                "List[Dict[(str, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "index_key": [],
                "type": []
            }
        },
        "ElasticsearchProxy._bulk_helper": {
            "name": "_bulk_helper",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": []
            }
        },
        "ElasticsearchProxy._fetch_old_index": {
            "name": "_fetch_old_index",
            "location": 638,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "alias": []
            }
        },
        "ElasticsearchProxy._create_index_helper": {
            "name": "_create_index_helper",
            "location": 654,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alias": []
            }
        },
        "ElasticsearchProxy._create_index_helper._get_mapping": {
            "name": "_get_mapping",
            "location": 655,
            "return": [],
            "arguments": {
                "alias": []
            }
        }
    },
    "amundsensearchlibrary-master/search_service/proxy/statsd_utilities.py": {
        "timer_with_counter": {
            "name": "timer_with_counter",
            "location": 21,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "_get_statsd_client": {
            "name": "_get_statsd_client",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "timer_with_counter.wrapper": {
            "name": "wrapper",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/search_service/proxy/__init__.py": {
        "get_proxy_client": {
            "name": "get_proxy_client",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/tests/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/test_app.py": {
        "AppTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_app_exists": {
            "name": "test_app_exists",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/test_swagger.py": {
        "TestSwagger.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_get_swagger_docs": {
            "name": "test_should_get_swagger_docs",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_get_swagger_json": {
            "name": "test_should_get_swagger_json",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_a_component_from_each_reference": {
            "name": "test_should_have_a_component_from_each_reference",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_type_for_each_query_parameter": {
            "name": "test_should_have_type_for_each_query_parameter",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.test_should_have_all_endpoints_in_swagger": {
            "name": "test_should_have_all_endpoints_in_swagger",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwagger.find": {
            "name": "find",
            "location": 65,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "key": [],
                "json_response": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/api/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/api/dashboard/fixtures.py": {
        "mock_proxy_results": {
            "name": "mock_proxy_results",
            "location": 7,
            "return": [
                "search_service.models.dashboard.Dashboard"
            ],
            "arguments": {}
        },
        "mock_json_response": {
            "name": "mock_json_response",
            "location": 20,
            "return": [
                "Dict[(str, Union[(int, str, List[nothing])])]"
            ],
            "arguments": {}
        },
        "default_json_response": {
            "name": "default_json_response",
            "location": 36,
            "return": [
                "Dict[(str, Optional[Union[(int, List[nothing])]])]"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/dashboard/test_search_dashboard_api.py": {
        "TestSearchDashboardAPI.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchDashboardAPI.tear_down": {
            "name": "tear_down",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchDashboardAPI.test_should_get_result_for_search": {
            "name": "test_should_get_result_for_search",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchDashboardAPI.test_should_give_empty_result_when_there_are_no_results_from_proxy": {
            "name": "test_should_give_empty_result_when_there_are_no_results_from_proxy",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchDashboardAPI.test_should_fail_without_query_term": {
            "name": "test_should_fail_without_query_term",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchDashboardAPI.test_should_fail_when_proxy_fails": {
            "name": "test_should_fail_when_proxy_fails",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/dashboard/test_search_dashboard_filter.py": {
        "SearchDashboardFilterTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchDashboardFilterTest.tear_down": {
            "name": "tear_down",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchDashboardFilterTest.test_post": {
            "name": "test_post",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "SearchDashboardFilterTest.test_post_return_400_if_no_search_request": {
            "name": "test_post_return_400_if_no_search_request",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "SearchDashboardFilterTest.test_post_return_400_if_bad_query_term": {
            "name": "test_post_return_400_if_bad_query_term",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/dashboard/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/api/document/test_document_tables_api.py": {
        "TestDocumentTablesAPI.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentTablesAPI.tear_down": {
            "name": "tear_down",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentTablesAPI.test_post": {
            "name": "test_post",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentTablesAPI.test_put": {
            "name": "test_put",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentTablesAPI.test_put_multiple_tables": {
            "name": "test_put_multiple_tables",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentTablesAPI.test_put_multiple_tables_fails": {
            "name": "test_put_multiple_tables_fails",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentTablesAPI.test_should_not_reach_create_with_id": {
            "name": "test_should_not_reach_create_with_id",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentTablesAPI.test_should_not_reach_update_with_id": {
            "name": "test_should_not_reach_update_with_id",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/document/test_document_table_api.py": {
        "TestDocumentTableAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentTableAPI.tear_down": {
            "name": "tear_down",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentTableAPI.test_delete": {
            "name": "test_delete",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentTableAPI.test_should_not_reach_delete_without_id": {
            "name": "test_should_not_reach_delete_without_id",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/document/test_document_users_api.py": {
        "TestDocumentUsersAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentUsersAPI.tear_down": {
            "name": "tear_down",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentUsersAPI.test_post": {
            "name": "test_post",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentUsersAPI.test_put": {
            "name": "test_put",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentUsersAPI.test_should_not_reach_create_with_id": {
            "name": "test_should_not_reach_create_with_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentUsersAPI.test_should_not_reach_update_with_id": {
            "name": "test_should_not_reach_update_with_id",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/document/test_document_user_api.py": {
        "TestDocumentUserAPI.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentUserAPI.tear_down": {
            "name": "tear_down",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentUserAPI.test_delete": {
            "name": "test_delete",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "TestDocumentUserAPI.test_should_not_reach_delete_without_id": {
            "name": "test_should_not_reach_delete_without_id",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/document/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/api/table/fixtures.py": {
        "mock_proxy_results": {
            "name": "mock_proxy_results",
            "location": 8,
            "return": [
                "search_service.models.table.Table"
            ],
            "arguments": {}
        },
        "mock_default_proxy_results": {
            "name": "mock_default_proxy_results",
            "location": 25,
            "return": [
                "search_service.models.table.Table"
            ],
            "arguments": {}
        },
        "mock_json_response": {
            "name": "mock_json_response",
            "location": 42,
            "return": [
                "Dict[(str, Optional[Union[(int, str, List[Union[(str, Dict[(str, str)])]])]])]"
            ],
            "arguments": {}
        },
        "default_json_response": {
            "name": "default_json_response",
            "location": 63,
            "return": [
                "Dict[(str, Optional[Union[(int, str, List[nothing])]])]"
            ],
            "arguments": {}
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/table/test_search_table_api.py": {
        "TestSearchTableAPI.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.tear_down": {
            "name": "tear_down",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.test_should_get_result_for_search": {
            "name": "test_should_get_result_for_search",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.test_should_give_empty_result_when_there_are_no_results_from_proxy": {
            "name": "test_should_give_empty_result_when_there_are_no_results_from_proxy",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.test_should_get_default_response_values_when_values_not_in_proxy_response": {
            "name": "test_should_get_default_response_values_when_values_not_in_proxy_response",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.test_should_fail_without_query_term": {
            "name": "test_should_fail_without_query_term",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchTableAPI.test_should_fail_when_proxy_fails": {
            "name": "test_should_fail_when_proxy_fails",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/table/test_search_table_filter.py": {
        "SearchTableFilterTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTableFilterTest.tear_down": {
            "name": "tear_down",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTableFilterTest.test_post": {
            "name": "test_post",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "SearchTableFilterTest.test_post_return_400_if_no_search_request": {
            "name": "test_post_return_400_if_no_search_request",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        },
        "SearchTableFilterTest.test_post_return_400_if_bad_query_term": {
            "name": "test_post_return_400_if_bad_query_term",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "get_proxy": [],
                "RequestParser": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/api/table/__init__.py": {},
    "amundsensearchlibrary-master/tests/unit/proxy/test_atlas.py": {
        "TestAtlasProxy.to_class": {
            "name": "to_class",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "TestAtlasProxy.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy._qualified": {
            "name": "_qualified",
            "location": 118,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "kind": [],
                "name": [
                    "_T1@@"
                ],
                "table": []
            }
        },
        "TestAtlasProxy.recursive_mock": {
            "name": "recursive_mock",
            "location": 130,
            "return": [
                "Union[(list, mock.mock.MagicMock, _T0)]"
            ],
            "arguments": {
                "start": [
                    "_T0@@"
                ]
            }
        },
        "TestAtlasProxy.dsl_inject": {
            "name": "dsl_inject",
            "location": 155,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "checks": []
            }
        },
        "TestAtlasProxy.bulk_inject": {
            "name": "bulk_inject",
            "location": 181,
            "return": [
                "Callable"
            ],
            "arguments": {
                "entities": []
            }
        },
        "TestAtlasProxy.test_setup_client": {
            "name": "test_setup_client",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_setup_config": {
            "name": "test_setup_config",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_search_normal": {
            "name": "test_search_normal",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_search_empty": {
            "name": "test_search_empty",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.test_unknown_field": {
            "name": "test_unknown_field",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAtlasProxy.dsl_inject.search_dsl": {
            "name": "search_dsl",
            "location": 162,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "TestAtlasProxy.bulk_inject.guid_filter": {
            "name": "guid_filter",
            "location": 189,
            "return": [],
            "arguments": {
                "guid": [],
                "ignoreRelationships": []
            }
        },
        "TestAtlasProxy.to_class.ObjectView.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dictionary": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/proxy/test_elasticsearch.py": {
        "MockSearchResult.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockUserSearchResult.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "TableResponse.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "UserResponse.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "TestElasticsearchProxy.setUp": {
            "name": "setUp",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_setup_client": {
            "name": "test_setup_client",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_setup_client_with_username_and_password": {
            "name": "test_setup_client_with_username_and_password",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "elasticsearch_mock": []
            }
        },
        "TestElasticsearchProxy.test_setup_client_without_username": {
            "name": "test_setup_client_without_username",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "elasticsearch_mock": []
            }
        },
        "TestElasticsearchProxy.test_setup_config": {
            "name": "test_setup_config",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_search_with_empty_query_string": {
            "name": "test_search_with_empty_query_string",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_search_with_empty_result": {
            "name": "test_search_with_empty_result",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_search_with_one_table_result": {
            "name": "test_search_with_one_table_result",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_search_with_multiple_result": {
            "name": "test_search_with_multiple_result",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_search_table_filter": {
            "name": "test_search_table_filter",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_search_table_filter_return_no_results_if_no_search_request": {
            "name": "test_search_table_filter_return_no_results_if_no_search_request",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_search_table_filter_return_no_results_if_dsl_conversion_error": {
            "name": "test_search_table_filter_return_no_results_if_dsl_conversion_error",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_get_model_by_index_table": {
            "name": "test_get_model_by_index_table",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_get_model_by_index_user": {
            "name": "test_get_model_by_index_user",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_get_model_by_index_raise_exception": {
            "name": "test_get_model_by_index_raise_exception",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_parse_filters_return_results": {
            "name": "test_parse_filters_return_results",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_parse_filters_return_no_results": {
            "name": "test_parse_filters_return_no_results",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_validate_wrong_filters_values": {
            "name": "test_validate_wrong_filters_values",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_validate_accepted_filters_values": {
            "name": "test_validate_accepted_filters_values",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_parse_query_term": {
            "name": "test_parse_query_term",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_convert_query_json_to_query_dsl_term_and_filters": {
            "name": "test_convert_query_json_to_query_dsl_term_and_filters",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_convert_query_json_to_query_dsl_no_term": {
            "name": "test_convert_query_json_to_query_dsl_no_term",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_convert_query_json_to_query_dsl_no_filters": {
            "name": "test_convert_query_json_to_query_dsl_no_filters",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_convert_query_json_to_query_dsl_raise_exception_no_term_or_filters": {
            "name": "test_convert_query_json_to_query_dsl_raise_exception_no_term_or_filters",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_search_with_one_user_result": {
            "name": "test_search_with_one_user_result",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        },
        "TestElasticsearchProxy.test_create_document_with_no_data": {
            "name": "test_create_document_with_no_data",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_create_document": {
            "name": "test_create_document",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "mock_uuid": []
            }
        },
        "TestElasticsearchProxy.test_update_document_with_no_data": {
            "name": "test_update_document_with_no_data",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_update_document": {
            "name": "test_update_document",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "mock_uuid": []
            }
        },
        "TestElasticsearchProxy.test_delete_table_document": {
            "name": "test_delete_table_document",
            "location": 662,
            "return": [],
            "arguments": {
                "self": [],
                "mock_uuid": []
            }
        },
        "TestElasticsearchProxy.test_delete_user_document": {
            "name": "test_delete_user_document",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "mock_uuid": []
            }
        },
        "TestElasticsearchProxy.test_get_instance_string": {
            "name": "test_get_instance_string",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_get_instance_tag": {
            "name": "test_get_instance_tag",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_get_instance_badge": {
            "name": "test_get_instance_badge",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElasticsearchProxy.test_fetch_dashboard_search_results": {
            "name": "test_fetch_dashboard_search_results",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/proxy/test_statsd_utilities.py": {
        "TestStatsdUtilities.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_no_statsd_client": {
            "name": "test_no_statsd_client",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_get_statsd_client": {
            "name": "test_get_statsd_client",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_same_statsd_client_for_same_prefix": {
            "name": "test_same_statsd_client_for_same_prefix",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_different_statsd_client_for_different_prefix": {
            "name": "test_different_statsd_client_for_different_prefix",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsdUtilities.test_with_elasticsearch_proxy": {
            "name": "test_with_elasticsearch_proxy",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mock_search": []
            }
        }
    },
    "amundsensearchlibrary-master/tests/unit/proxy/__init__.py": {}
}
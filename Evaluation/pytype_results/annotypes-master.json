{
    "annotypes-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "annotypes-master/annotypes/version.py": {},
    "annotypes-master/annotypes/_anno.py": {
        "anno_with_default": {
            "name": "anno_with_default",
            "location": 17,
            "return": [
                "Anno"
            ],
            "arguments": {
                "src": [],
                "default": []
            }
        },
        "caller_locals": {
            "name": "caller_locals",
            "location": 43,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "make_repr": {
            "name": "make_repr",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "inst": [
                    "object"
                ],
                "attrs": [
                    "Sequence[str]"
                ]
            }
        },
        "Anno.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "default": []
            }
        },
        "Anno.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Anno.__repr__": {
            "name": "__repr__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Anno.__enter__": {
            "name": "__enter__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Anno._get_defined_name": {
            "name": "_get_defined_name",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locals_d": []
            }
        },
        "Anno.set_typ": {
            "name": "set_typ",
            "location": 122,
            "return": [
                "_TAnno"
            ],
            "arguments": {
                "self": [
                    "_TAnno"
                ],
                "typ": [],
                "is_array": [],
                "is_mapping": []
            }
        },
        "Anno._get_type": {
            "name": "_get_type",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Anno.__exit__": {
            "name": "__exit__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "annotypes-master/annotypes/_array.py": {
        "array_type": {
            "name": "array_type",
            "location": 14,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "Type[Array]"
                ]
            }
        },
        "seq_neq": {
            "name": "seq_neq",
            "location": 22,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "seq": [
                    "typing.Any"
                ],
                "other": [
                    "typing.Any"
                ]
            }
        },
        "to_array": {
            "name": "to_array",
            "location": 85,
            "return": [
                "Array"
            ],
            "arguments": {
                "typ": [
                    "Type[Array]"
                ],
                "seq": [
                    "typing.Any"
                ]
            }
        },
        "Array.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "typing.Any"
                ]
            }
        },
        "Array.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Any"
                ]
            }
        },
        "Array.__eq__": {
            "name": "__eq__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Array.__ne__": {
            "name": "__ne__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Array.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "annotypes-master/annotypes/_calltypes.py": {
        "add_call_types": {
            "name": "add_call_types",
            "location": 45,
            "return": [
                "_T0"
            ],
            "arguments": {
                "f": [
                    "_T0"
                ]
            }
        },
        "make_call_types": {
            "name": "make_call_types",
            "location": 50,
            "return": [
                "Tuple[(Dict[(str, annotypes._anno.Anno)], annotypes._anno.Anno)]"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "globals_d": [
                    "dict"
                ]
            }
        },
        "make_annotations": {
            "name": "make_annotations",
            "location": 112,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "globals_d": [
                    "dict"
                ]
            }
        },
        "CallTypesMeta.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "CallTypesMeta"
                ],
                "name": [
                    "typing.Any"
                ],
                "bases": [
                    "typing.Any"
                ],
                "dct": [
                    "typing.Any"
                ]
            }
        },
        "CallTypesMeta.matches_type": {
            "name": "matches_type",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Any"
                ]
            }
        },
        "WithCallTypes.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EchoStr.__getitem__": {
            "name": "__getitem__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Any"
                ]
            }
        },
        "EchoStr.__getattr__": {
            "name": "__getattr__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Any"
                ]
            }
        },
        "EchoDict.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [
                "EchoStr"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Any"
                ]
            }
        }
    },
    "annotypes-master/annotypes/_compat.py": {
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "metaclass": []
            }
        },
        "getargspec": {
            "name": "getargspec",
            "location": 16,
            "return": [
                "inspect.ArgSpec"
            ],
            "arguments": {
                "f": []
            }
        },
        "func_globals": {
            "name": "func_globals",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "f": []
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "annotypes-master/annotypes/_frozen_dict.py": {
        "not_supported": {
            "name": "not_supported",
            "location": 1,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [
                    "FrozenOrderedDict"
                ]
            }
        },
        "FrozenOrderedDict.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "FrozenOrderedDict.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenOrderedDict.items": {
            "name": "items",
            "location": 27,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenOrderedDict.iteritems": {
            "name": "iteritems",
            "location": 30,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenOrderedDict.itervalues": {
            "name": "itervalues",
            "location": 35,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenOrderedDict.keys": {
            "name": "keys",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenOrderedDict.values": {
            "name": "values",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "annotypes-master/annotypes/_serializable.py": {
        "stringify_error": {
            "name": "stringify_error",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "Exception"
                ]
            }
        },
        "json_encode": {
            "name": "json_encode",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [],
                "indent": []
            }
        },
        "json_decode": {
            "name": "json_decode",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "dict_cls": []
            }
        },
        "serialize_object": {
            "name": "serialize_object",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": [],
                "dict_cls": [
                    "Type[dict]"
                ]
            }
        },
        "deserialize_object": {
            "name": "deserialize_object",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "ob": [],
                "type_check": [
                    "Union[(type, Tuple[(type, ...)])]"
                ]
            }
        },
        "Serializable.__getitem__": {
            "name": "__getitem__",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Serializable.__iter__": {
            "name": "__iter__",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.to_dict": {
            "name": "to_dict",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dict_cls": [
                    "Type[dict]"
                ]
            }
        },
        "Serializable.from_dict": {
            "name": "from_dict",
            "location": 147,
            "return": [
                "_TSerializable"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSerializable]"
                ],
                "d": [],
                "ignore": []
            }
        },
        "Serializable.register_subclass": {
            "name": "register_subclass",
            "location": 172,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [],
                "typeid": []
            }
        },
        "Serializable.lookup_subclass": {
            "name": "lookup_subclass",
            "location": 185,
            "return": [
                "_TSerializable"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSerializable]"
                ],
                "d": []
            }
        },
        "Serializable.register_subclass.decorator": {
            "name": "decorator",
            "location": 178,
            "return": [],
            "arguments": {
                "subclass": []
            }
        }
    },
    "annotypes-master/annotypes/_stackinfo.py": {
        "find_caller_class": {
            "name": "find_caller_class",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "annotypes-master/annotypes/_typing.py": {},
    "annotypes-master/annotypes/__init__.py": {},
    "annotypes-master/annotypes/py2_examples/composition.py": {
        "composition_func": {
            "name": "composition_func",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "exposure": [
                    "float"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "CompositionClass.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exposure": [
                    "float"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "CompositionClass.write_hello": {
            "name": "write_hello",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/enumtaker.py": {
        "EnumTaker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Status"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/manyargs.py": {
        "ManyArgs.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axes": [],
                "start": [],
                "stop": [],
                "size": [],
                "units": [],
                "alternate": []
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/mapping.py": {
        "LayoutManager.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part_layout": [
                    "typing.Any"
                ],
                "value": [
                    "typing.Any"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/reusecls.py": {
        "ReuseCls.validate": {
            "name": "validate",
            "location": 12,
            "return": [
                "annotypes.py2_examples.simple.Simple"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "annotypes.py2_examples.simple.Simple"
                ]
            }
        },
        "ReuseCls.configure": {
            "name": "configure",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "annotypes.py2_examples.simple.Simple"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/simple.py": {
        "Simple.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exposure": [
                    "float"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Simple.write_data": {
            "name": "write_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/table.py": {
        "Table.validate": {
            "name": "validate",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LayoutTable.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "annotypes._array.Array"
                ],
                "mri": [
                    "annotypes._array.Array"
                ],
                "x": [
                    "annotypes._array.Array"
                ],
                "y": [
                    "annotypes._array.Array"
                ],
                "visible": [
                    "annotypes._array.Array"
                ]
            }
        },
        "Manager.set_layout": {
            "name": "set_layout",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "LayoutTable"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py2_examples/__init__.py": {},
    "annotypes-master/annotypes/py3_examples/composition.py": {
        "composition_func": {
            "name": "composition_func",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "exposure": [
                    "float"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "CompositionClass.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exposure": [
                    "float"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "CompositionClass.write_hello": {
            "name": "write_hello",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/enumtaker.py": {
        "EnumTaker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Status"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/manyargs.py": {
        "ManyArgs.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axes": [],
                "start": [],
                "stop": [],
                "size": [
                    "int"
                ],
                "units": [],
                "alternate": [
                    "bool"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/mapping.py": {
        "LayoutManager.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part_layout": [
                    "typing.Any"
                ],
                "value": [
                    "typing.Any"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/reusecls.py": {
        "ReuseCls.validate": {
            "name": "validate",
            "location": 12,
            "return": [
                "annotypes.py3_examples.simple.Simple"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "annotypes.py3_examples.simple.Simple"
                ]
            }
        },
        "ReuseCls.configure": {
            "name": "configure",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "annotypes.py3_examples.simple.Simple"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/simple.py": {
        "Simple.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exposure": [
                    "float"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Simple.write_data": {
            "name": "write_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/table.py": {
        "Table.validate": {
            "name": "validate",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LayoutTable.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "annotypes._array.Array"
                ],
                "mri": [
                    "annotypes._array.Array"
                ],
                "x": [
                    "annotypes._array.Array"
                ],
                "y": [
                    "annotypes._array.Array"
                ],
                "visible": [
                    "annotypes._array.Array"
                ]
            }
        },
        "Manager.set_layout": {
            "name": "set_layout",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "LayoutTable"
                ]
            }
        }
    },
    "annotypes-master/annotypes/py3_examples/__init__.py": {},
    "annotypes-master/annotypes/sphinxext/call_types.py": {
        "skip_member": {
            "name": "skip_member",
            "location": 2,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "skip": [],
                "options": []
            }
        },
        "process_docstring": {
            "name": "process_docstring",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 39,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "annotypes-master/annotypes/sphinxext/__init__.py": {},
    "annotypes-master/tests/mypy_bad.py": {},
    "annotypes-master/tests/mypy_good.py": {},
    "annotypes-master/tests/test_annotypes.py": {
        "TestAnnotypes.test_no_args_base_repr": {
            "name": "test_no_args_base_repr",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotypes.test_anno_inst": {
            "name": "test_anno_inst",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotypes.test_bad_origin": {
            "name": "test_bad_origin",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotypes.test_good_origin": {
            "name": "test_good_origin",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotypes.test_error_raised": {
            "name": "test_error_raised",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_bad_arg_type": {
            "name": "test_bad_arg_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_no_return": {
            "name": "test_no_return",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_any_return": {
            "name": "test_any_return",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_bad_return": {
            "name": "test_bad_return",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_kwargs": {
            "name": "test_kwargs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_make_annotations_no_globals": {
            "name": "test_make_annotations_no_globals",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_make_annotations_no_comments": {
            "name": "test_make_annotations_no_comments",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_make_annotations_self": {
            "name": "test_make_annotations_self",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_make_annotations_attr": {
            "name": "test_make_annotations_attr",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_meta_class": {
            "name": "test_meta_class",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_subclassing_with_no_init": {
            "name": "test_subclassing_with_no_init",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_not_stored_repr": {
            "name": "test_not_stored_repr",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimple.setUp": {
            "name": "setUp",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimple.test_simple": {
            "name": "test_simple",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManyArgs.setUp": {
            "name": "setUp",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManyArgs.test_many_args": {
            "name": "test_many_args",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.setUp": {
            "name": "setUp",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.test_composition_class": {
            "name": "test_composition_class",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.test_composition_func": {
            "name": "test_composition_func",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnum.setUp": {
            "name": "setUp",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnum.test_enum": {
            "name": "test_enum",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReuse.setUp": {
            "name": "setUp",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReuse.test_reuse": {
            "name": "test_reuse",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_sequence": {
            "name": "test_sequence",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_array": {
            "name": "test_array",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_to_array": {
            "name": "test_to_array",
            "location": 353,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_to_array_unicode": {
            "name": "test_to_array_unicode",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_anno_array_instantiate": {
            "name": "test_anno_array_instantiate",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_array_type": {
            "name": "test_array_type",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_wrong_numpy_type": {
            "name": "test_wrong_numpy_type",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_eq": {
            "name": "test_eq",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_numpy_eq": {
            "name": "test_numpy_eq",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArray.test_contains": {
            "name": "test_contains",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.setUp": {
            "name": "setUp",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_table": {
            "name": "test_table",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDict.setUp": {
            "name": "setUp",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDict.test_dict": {
            "name": "test_dict",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_any_return.any_func": {
            "name": "any_func",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "TestWithCallTypes.test_kwargs.f": {
            "name": "f",
            "location": 89,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "TestWithCallTypes.test_make_annotations_no_globals.f": {
            "name": "f",
            "location": 95,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestWithCallTypes.test_make_annotations_no_comments.f": {
            "name": "f",
            "location": 104,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestWithCallTypes.test_make_annotations_attr.f": {
            "name": "f",
            "location": 126,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestWithCallTypes.test_bad_arg_type.f": {
            "name": "f",
            "location": 54,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "TestWithCallTypes.test_no_return.f": {
            "name": "f",
            "location": 63,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "TestWithCallTypes.test_bad_return.f": {
            "name": "f",
            "location": 81,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "TestWithCallTypes.test_make_annotations_self.A.f": {
            "name": "f",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestWithCallTypes.test_make_annotations_self.A.c": {
            "name": "c",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": [],
                "a": []
            }
        },
        "TestWithCallTypes.test_meta_class.MyGeneric.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestWithCallTypes.test_meta_class.MyGeneric.func": {
            "name": "func",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "TestWithCallTypes.test_subclassing_with_no_init.Root.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestWithCallTypes.test_subclassing_with_no_init.Sub1.func": {
            "name": "func",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_subclassing_with_no_init.Sub2.another_func": {
            "name": "another_func",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWithCallTypes.test_not_stored_repr.NotStored.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        }
    },
    "annotypes-master/tests/test_mypy.py": {
        "mypy": {
            "name": "mypy",
            "location": 7,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestMyPy.test_mypy_good": {
            "name": "test_mypy_good",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyPy.test_mypy_bad": {
            "name": "test_mypy_bad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "annotypes-master/tests/test_serializable.py": {
        "DummySerializable.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "boo": [],
                "bar": [],
                "NOT_CAMEL": []
            }
        },
        "DummySerializable.set_boo": {
            "name": "set_boo",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "boo": []
            }
        },
        "DummySerializable.set_bar": {
            "name": "set_bar",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "bar": []
            }
        },
        "DummySerializable.set_not": {
            "name": "set_not",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "NestedSerializable.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "boo": [],
                "dsarray": []
            }
        },
        "TestSerialization.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_to_dict_from_dict": {
            "name": "test_to_dict_from_dict",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_get_item": {
            "name": "test_get_item",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_iter": {
            "name": "test_iter",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_serialize": {
            "name": "test_serialize",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_no_args": {
            "name": "test_no_args",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_no_typeid": {
            "name": "test_no_typeid",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_bad_typeid": {
            "name": "test_bad_typeid",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_deserialize": {
            "name": "test_deserialize",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_frozen_dict": {
            "name": "test_frozen_dict",
            "location": 121,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_json_numpy_array": {
            "name": "test_json_numpy_array",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_exception_serialize": {
            "name": "test_exception_serialize",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_enum_serialize": {
            "name": "test_enum_serialize",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_serializable_not_setting_attr": {
            "name": "test_serializable_not_setting_attr",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_json_decode": {
            "name": "test_json_decode",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_json_decode_not_dict": {
            "name": "test_json_decode_not_dict",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_to_dict_children": {
            "name": "test_to_dict_children",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_to_dict_nested": {
            "name": "test_to_dict_nested",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_serializable_not_setting_attr.NoAttr.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "boo": []
            }
        }
    },
    "annotypes-master/tests/test_sphinx_extension.py": {
        "MyCallTypesClass.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyReturnTypeClass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SphinxSerializable.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "boo": [],
                "bar": [],
                "foo": []
            }
        },
        "SphinxSerializable.set_boo": {
            "name": "set_boo",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "boo": []
            }
        },
        "SphinxSerializable.set_bar": {
            "name": "set_bar",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "bar": []
            }
        },
        "SphinxSerializable.set_foo": {
            "name": "set_foo",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "TestSphinxExtension.test_skip_member_doesnt_skip": {
            "name": "test_skip_member_doesnt_skip",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_skip_member_doesnt_skip_calltypes": {
            "name": "test_skip_member_doesnt_skip_calltypes",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_skip_member_doesnt_skip_returntype": {
            "name": "test_skip_member_doesnt_skip_returntype",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_skip_member_skips_gorg": {
            "name": "test_skip_member_skips_gorg",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_process_docstring": {
            "name": "test_process_docstring",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_process_docstring_no_calltypes": {
            "name": "test_process_docstring_no_calltypes",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_process_docstring_no_returntypes": {
            "name": "test_process_docstring_no_returntypes",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_setup": {
            "name": "test_setup",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_setup.DummyApp.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSphinxExtension.test_setup.DummyApp.connect": {
            "name": "connect",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "item": []
            }
        }
    },
    "annotypes-master/tests/__init__.py": {}
}
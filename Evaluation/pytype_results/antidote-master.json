{
    "antidote-master/setup.py": {
        "generate_extensions": {
            "name": "generate_extensions",
            "location": 45,
            "return": [
                "List[setuptools.extension.Extension]"
            ],
            "arguments": {}
        }
    },
    "antidote-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 210,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "antidote-master/src/antidote/constants.py": {
        "Constants.provide_const": {
            "name": "provide_const",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constants.Conf.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constants.Conf.copy": {
            "name": "copy",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/exceptions.py": {},
    "antidote-master/src/antidote/factory.py": {
        "factory": {
            "name": "factory",
            "location": 230,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "factory.register_factory": {
            "name": "register_factory",
            "location": 367,
            "return": [],
            "arguments": {
                "func": [],
                "factory_provider": []
            }
        },
        "Factory.Conf.singleton": {
            "name": "singleton",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factory.Conf.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factory.Conf.copy": {
            "name": "copy",
            "location": 181,
            "return": [
                "_TFactory"
            ],
            "arguments": {
                "self": [
                    "_TFactory"
                ]
            }
        }
    },
    "antidote-master/src/antidote/implementation.py": {
        "implementation": {
            "name": "implementation",
            "location": 34,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "ImplementationProtocol.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "ImplementationProtocol.__antidote_dependency__": {
            "name": "__antidote_dependency__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "ImplementationProtocol.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "implementation.register": {
            "name": "register",
            "location": 172,
            "return": [],
            "arguments": {
                "func": [],
                "indirect_provider": []
            }
        },
        "implementation.register.impl": {
            "name": "impl",
            "location": 185,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lazy.py": {
        "LazyCall.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "LazyCall.__call__": {
            "name": "__call__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "LazyMethodCall.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "LazyMethodCall.__call__": {
            "name": "__call__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyMethodCall.__str__": {
            "name": "__str__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyMethodCall.__get__": {
            "name": "__get__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "antidote-master/src/antidote/service.py": {
        "service": {
            "name": "service",
            "location": 249,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "service.reg": {
            "name": "reg",
            "location": 308,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Service.Conf.singleton": {
            "name": "singleton",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.Conf.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.Conf.copy": {
            "name": "copy",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/utils.py": {
        "is_compiled": {
            "name": "is_compiled",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "validated_scope": {
            "name": "validated_scope",
            "location": 21,
            "return": [],
            "arguments": {
                "scope": [],
                "singleton": []
            }
        }
    },
    "antidote-master/src/antidote/_config.py": {
        "Config.auto_detect_type_hints_locals": {
            "name": "auto_detect_type_hints_locals",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "antidote-master/src/antidote/_constants.py": {
        "_configure_constants": {
            "name": "_configure_constants",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "conf": []
            }
        },
        "ConstantsMeta.__new__": {
            "name": "__new__",
            "location": 16,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "_configure_constants.auto_converter": {
            "name": "auto_converter",
            "location": 49,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        }
    },
    "antidote-master/src/antidote/_factory.py": {
        "_configure_factory": {
            "name": "_configure_factory",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [],
                "factory_provider": []
            }
        },
        "FactoryMeta.__new__": {
            "name": "__new__",
            "location": 28,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "FactoryMeta.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [],
                "left_operand": []
            }
        },
        "FactoryMeta.parameterized": {
            "name": "parameterized",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FactoryWrapper.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactoryWrapper.__call__": {
            "name": "__call__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactoryWrapper.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "FactoryWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FactoryWrapper.__repr__": {
            "name": "__repr__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreBuild.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "left_operand": []
            }
        }
    },
    "antidote-master/src/antidote/_implementation.py": {
        "validate_provided_class": {
            "name": "validate_provided_class",
            "location": 46,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "ImplementationWrapper.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "implementation_dependency": []
            }
        },
        "ImplementationWrapper.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImplementationWrapper.__antidote_dependency__": {
            "name": "__antidote_dependency__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "ImplementationWrapper.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "ImplementationWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "antidote-master/src/antidote/_lazy.py": {
        "LazyCallWithArgsKwargs.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCallWithArgsKwargs.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCallWithArgsKwargs.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "LazyMethodCallWithArgsKwargs.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "method_name": [],
                "scope": [],
                "args": [],
                "kwargs": []
            }
        },
        "LazyMethodCallWithArgsKwargs.__get__": {
            "name": "__get__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "LazyMethodCallWithArgsKwargs.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyMethodCallDependency.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyMethodCallDependency.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        }
    },
    "antidote-master/src/antidote/_service.py": {
        "_configure_service": {
            "name": "_configure_service",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "service_provider": [],
                "conf": []
            }
        },
        "ServiceMeta.__new__": {
            "name": "__new__",
            "location": 18,
            "return": [
                "_TServiceMeta"
            ],
            "arguments": {
                "mcs": [
                    "Type[_TServiceMeta]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "namespace": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "ServiceMeta.parameterized": {
            "name": "parameterized",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "ServiceMeta"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_utils.py": {
        "validated_parameters": {
            "name": "validated_parameters",
            "location": 10,
            "return": [
                "Optional[FrozenSet[str]]"
            ],
            "arguments": {
                "parameters": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "validate_method_parameters": {
            "name": "validate_method_parameters",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "Callable"
                ],
                "parameters": [
                    "Optional[FrozenSet[str]]"
                ]
            }
        }
    },
    "antidote-master/src/antidote/__init__.py": {},
    "antidote-master/src/antidote/core/annotations.py": {
        "SupportsRMatmul.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "type_hint": []
            }
        },
        "Get.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "__dependency": []
            }
        },
        "From.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "__source": []
            }
        },
        "FromArg.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "__function": []
            }
        }
    },
    "antidote-master/src/antidote/core/container.py": {
        "Scope.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.singleton": {
            "name": "singleton",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "Scope.sentinel": {
            "name": "sentinel",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "DependencyValue.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DependencyValue.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DependencyValue.is_singleton": {
            "name": "is_singleton",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.get": {
            "name": "get",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "default": []
            }
        },
        "Container.provide": {
            "name": "provide",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawProvider.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawProvider.clone": {
            "name": "clone",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "RawProvider.exists": {
            "name": "exists",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "RawProvider.maybe_debug": {
            "name": "maybe_debug",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawProvider._bound_container_locked": {
            "name": "_bound_container_locked",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawProvider._bound_container_raise_if_exists": {
            "name": "_bound_container_raise_if_exists",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawProvider.__bound_container": {
            "name": "__bound_container",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawProvider.is_registered": {
            "name": "is_registered",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.__repr__": {
            "name": "__repr__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.with_same_providers_and_scopes": {
            "name": "with_same_providers_and_scopes",
            "location": 301,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "RawContainer.scopes": {
            "name": "scopes",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.providers": {
            "name": "providers",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.locked": {
            "name": "locked",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.freeze": {
            "name": "freeze",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.add_provider": {
            "name": "add_provider",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "provider_cls": []
            }
        },
        "RawContainer.create_scope": {
            "name": "create_scope",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RawContainer.reset_scope": {
            "name": "reset_scope",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "RawContainer.raise_if_exists": {
            "name": "raise_if_exists",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawContainer.clone": {
            "name": "clone",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawContainer.debug": {
            "name": "debug",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawContainer.provide": {
            "name": "provide",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "RawContainer.get": {
            "name": "get",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "default": []
            }
        },
        "RawContainer._safe_provide": {
            "name": "_safe_provide",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "OverridableRawContainer.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OverridableRawContainer.clone": {
            "name": "clone",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OverridableRawContainer.override_singletons": {
            "name": "override_singletons",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "singletons": []
            }
        },
        "OverridableRawContainer.override_factory": {
            "name": "override_factory",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "OverridableRawContainer.override_provider": {
            "name": "override_provider",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "provider": []
            }
        },
        "OverridableRawContainer.reset_scope": {
            "name": "reset_scope",
            "location": 510,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "OverridableRawContainer.debug": {
            "name": "debug",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "OverridableRawContainer.provide": {
            "name": "provide",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "OverridableRawContainer.get": {
            "name": "get",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "default": []
            }
        },
        "OverridableRawContainer._safe_provide": {
            "name": "_safe_provide",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        }
    },
    "antidote-master/src/antidote/core/exceptions.py": {
        "_stack_repr": {
            "name": "_stack_repr",
            "location": 100,
            "return": [],
            "arguments": {
                "stack": []
            }
        },
        "AntidoteError.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleInjectionError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DependencyInstantiationError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "stack": []
            }
        },
        "DependencyCycleError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "stack": []
            }
        },
        "DependencyNotFoundError.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        }
    },
    "antidote-master/src/antidote/core/getter.py": {
        "DependencyLoader.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "default": []
            }
        },
        "SupportsRMatmul.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "type_hint": []
            }
        },
        "DependencyGetter.enforced": {
            "name": "enforced",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "loader": []
            }
        },
        "DependencyGetter.raw": {
            "name": "raw",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "loader": []
            }
        },
        "DependencyGetter.__call__": {
            "name": "__call__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "__dependency": []
            }
        },
        "DependencyGetter.__getitem__": {
            "name": "__getitem__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "tpe": []
            }
        },
        "TypedDependencyGetter.__call__": {
            "name": "__call__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "__dependency": []
            }
        },
        "TypedDependencyGetter.single": {
            "name": "single",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypedDependencyGetter.all": {
            "name": "all",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypedDependencyGetter.__matmul__": {
            "name": "__matmul__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "antidote-master/src/antidote/core/injection.py": {
        "validate_injection": {
            "name": "validate_injection",
            "location": 456,
            "return": [],
            "arguments": {
                "dependencies": [],
                "auto_provide": []
            }
        },
        "Arg.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_hint": [],
                "type_hint_with_extras": []
            }
        },
        "Injector.me": {
            "name": "me",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Injector.__call__": {
            "name": "__call__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "__arg": []
            }
        },
        "Injector.__call__.decorate": {
            "name": "decorate",
            "location": 439,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "antidote-master/src/antidote/core/marker.py": {},
    "antidote-master/src/antidote/core/provider.py": {
        "does_not_freeze": {
            "name": "does_not_freeze",
            "location": 22,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "Provider.clone": {
            "name": "clone",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "Provider.exists": {
            "name": "exists",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "Provider.provide": {
            "name": "provide",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "Provider.debug": {
            "name": "debug",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "Provider.maybe_provide": {
            "name": "maybe_provide",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "Provider.maybe_debug": {
            "name": "maybe_debug",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "Provider._assert_not_duplicate": {
            "name": "_assert_not_duplicate",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "Provider._container_lock": {
            "name": "_container_lock",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatelessProvider.clone": {
            "name": "clone",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        }
    },
    "antidote-master/src/antidote/core/typing.py": {
        "Source.__antidote_dependency__": {
            "name": "__antidote_dependency__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "CallableClass.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/core/utils.py": {
        "DependencyDebug.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "__info": []
            }
        },
        "DependencyDebug.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "antidote-master/src/antidote/core/wiring.py": {
        "wire": {
            "name": "wire",
            "location": 280,
            "return": [],
            "arguments": {
                "__klass": []
            }
        },
        "Wiring.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wiring.copy": {
            "name": "copy",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wiring.wire": {
            "name": "wire",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "__klass": []
            }
        },
        "wire.wire_methods": {
            "name": "wire_methods",
            "location": 356,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "WithWiringMixin.copy": {
            "name": "copy",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithWiringMixin.with_wiring": {
            "name": "with_wiring",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/core/_annotations.py": {
        "extract_annotated_dependency": {
            "name": "extract_annotated_dependency",
            "location": 19,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "extract_annotated_arg_dependency": {
            "name": "extract_annotated_arg_dependency",
            "location": 54,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "extract_auto_provided_arg_dependency": {
            "name": "extract_auto_provided_arg_dependency",
            "location": 143,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "is_valid_class_type_hint": {
            "name": "is_valid_class_type_hint",
            "location": 161,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "_extract_type_hint": {
            "name": "_extract_type_hint",
            "location": 170,
            "return": [],
            "arguments": {
                "argument": [],
                "extras": []
            }
        }
    },
    "antidote-master/src/antidote/core/_injection.py": {
        "raw_inject": {
            "name": "raw_inject",
            "location": 65,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_build_injection_blueprint": {
            "name": "_build_injection_blueprint",
            "location": 119,
            "return": [],
            "arguments": {
                "arguments": [],
                "dependencies": [],
                "auto_provide": [],
                "strict_validation": []
            }
        },
        "_build_from_annotations": {
            "name": "_build_from_annotations",
            "location": 158,
            "return": [],
            "arguments": {
                "arguments": []
            }
        },
        "_build_from_dependencies": {
            "name": "_build_from_dependencies",
            "location": 171,
            "return": [],
            "arguments": {
                "arguments": [],
                "dependencies": [],
                "strict_validation": []
            }
        },
        "_build_auto_provide": {
            "name": "_build_auto_provide",
            "location": 207,
            "return": [],
            "arguments": {
                "arguments": [],
                "auto_provide": [],
                "annotated": [],
                "strict_validation": []
            }
        },
        "_check_valid_arg_names": {
            "name": "_check_valid_arg_names",
            "location": 267,
            "return": [],
            "arguments": {
                "param": [],
                "names": [],
                "arguments": [],
                "strict_validation": []
            }
        },
        "ArgDependency.of": {
            "name": "of",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "ArgDependency.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "_build_auto_provide.is_auto_provided": {
            "name": "is_auto_provided",
            "location": 239,
            "return": [],
            "arguments": {
                "__cls": []
            }
        }
    },
    "antidote-master/src/antidote/core/_provider.py": {
        "_make_wrapper": {
            "name": "_make_wrapper",
            "location": 45,
            "return": [],
            "arguments": {
                "attr": [],
                "method": []
            }
        },
        "ProviderMeta.__new__": {
            "name": "__new__",
            "location": 17,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": [],
                "abstract": []
            }
        },
        "_make_wrapper.wrapped_method": {
            "name": "wrapped_method",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/core/_wiring.py": {
        "wire_class": {
            "name": "wire_class",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/core/__init__.py": {},
    "antidote-master/src/antidote/lib/__init__.py": {},
    "antidote-master/src/antidote/lib/injectable/injectable.py": {
        "injectable": {
            "name": "injectable",
            "location": 49,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "injectable.reg": {
            "name": "reg",
            "location": 159,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "antidote-master/src/antidote/lib/injectable/_internal.py": {
        "register_injectable": {
            "name": "register_injectable",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lib/injectable/_provider.py": {
        "Parameterized.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "parameters": []
            }
        },
        "Parameterized.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameterized.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameterized.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameterized.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InjectableProvider.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InjectableProvider.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InjectableProvider.exists": {
            "name": "exists",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "InjectableProvider.clone": {
            "name": "clone",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "InjectableProvider.debug": {
            "name": "debug",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "InjectableProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "InjectableProvider.register": {
            "name": "register",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        }
    },
    "antidote-master/src/antidote/lib/injectable/__init__.py": {
        "register_injectable_provider": {
            "name": "register_injectable_provider",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lib/interface/interface.py": {
        "interface": {
            "name": "interface",
            "location": 33,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "implements.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "__interface": []
            }
        },
        "implements.__call__": {
            "name": "__call__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "implements.when": {
            "name": "when",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "implements.overriding": {
            "name": "overriding",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "__existing_implementation": []
            }
        },
        "implements.by_default": {
            "name": "by_default",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "__klass": []
            }
        },
        "ImplementationsOf.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "ImplementationsOf.all": {
            "name": "all",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImplementationsOf.single": {
            "name": "single",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "implements.when.register": {
            "name": "register",
            "location": 255,
            "return": [],
            "arguments": {
                "__klass": []
            }
        },
        "implements.overriding.register": {
            "name": "register",
            "location": 314,
            "return": [],
            "arguments": {
                "__klass": []
            }
        }
    },
    "antidote-master/src/antidote/lib/interface/predicate.py": {
        "predicate": {
            "name": "predicate",
            "location": 325,
            "return": [],
            "arguments": {
                "__func": []
            }
        },
        "PredicateWeight.of_neutral": {
            "name": "of_neutral",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "predicate": []
            }
        },
        "PredicateWeight.__lt__": {
            "name": "__lt__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PredicateWeight.__add__": {
            "name": "__add__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NeutralWeight.of_neutral": {
            "name": "of_neutral",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "predicate": []
            }
        },
        "NeutralWeight.__lt__": {
            "name": "__lt__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NeutralWeight.__add__": {
            "name": "__add__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NeutralWeight.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeutralWeight.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Predicate.weight": {
            "name": "weight",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MergeablePredicate.merge": {
            "name": "merge",
            "location": 232,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "PredicateConstraint.evaluate": {
            "name": "evaluate",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "MergeablePredicateConstraint.merge": {
            "name": "merge",
            "location": 310,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "predicate.wrapped": {
            "name": "wrapped",
            "location": 375,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lib/interface/qualifier.py": {
        "QualifiedBy.one_of": {
            "name": "one_of",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "QualifiedBy.merge": {
            "name": "merge",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "QualifiedBy.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QualifiedBy.evaluate": {
            "name": "evaluate",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "QualifiedBy.weight": {
            "name": "weight",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "QualifiedBy.__eq__": {
            "name": "__eq__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QualifiedBy.__hash__": {
            "name": "__hash__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QualifiedByOneOf.evaluate": {
            "name": "evaluate",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        }
    },
    "antidote-master/src/antidote/lib/interface/_internal.py": {
        "create_constraints": {
            "name": "create_constraints",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "register_interface": {
            "name": "register_interface",
            "location": 105,
            "return": [],
            "arguments": {
                "__interface": []
            }
        },
        "register_implementation": {
            "name": "register_implementation",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "override_implementation": {
            "name": "override_implementation",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "register_default_implementation": {
            "name": "register_default_implementation",
            "location": 188,
            "return": [],
            "arguments": {
                "interface": [],
                "implementation": [],
                "type_hints_locals": [],
                "provider": []
            }
        },
        "_validate": {
            "name": "_validate",
            "location": 206,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lib/interface/_provider.py": {
        "InterfaceProvider.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceProvider.clone": {
            "name": "clone",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "InterfaceProvider.has_interface": {
            "name": "has_interface",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "tpe": []
            }
        },
        "InterfaceProvider.exists": {
            "name": "exists",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "InterfaceProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "InterfaceProvider.debug": {
            "name": "debug",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "InterfaceProvider.register": {
            "name": "register",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "InterfaceProvider.override_implementation": {
            "name": "override_implementation",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceProvider.register_default_implementation": {
            "name": "register_default_implementation",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "interface": [],
                "dependency": []
            }
        },
        "InterfaceProvider.register_implementation": {
            "name": "register_implementation",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implementations.add_candidate": {
            "name": "add_candidate",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "impl": []
            }
        },
        "Implementations.candidates": {
            "name": "candidates",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implementations.copy": {
            "name": "copy",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implementation.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implementation.__lt__": {
            "name": "__lt__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Implementation.match": {
            "name": "match",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "constraints": []
            }
        }
    },
    "antidote-master/src/antidote/lib/interface/_query.py": {
        "Query.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/lib/interface/__init__.py": {
        "register_interface_provider": {
            "name": "register_interface_provider",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/lib/lazy/constant.py": {
        "Constant.__get__": {
            "name": "__get__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "TypedConstantFactory.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "__arg": []
            }
        },
        "ConstantFactory.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "__type": []
            }
        },
        "ConstantValueProviderFunction.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "ConstantValueProviderMethod.__call__": {
            "name": "__call__",
            "location": 105,
            "return": [],
            "arguments": {
                "_": [],
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "ConstantValueConverter.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "tpe": []
            }
        },
        "ConstantValueConverterMethod.__call__": {
            "name": "__call__",
            "location": 123,
            "return": [],
            "arguments": {
                "_": [],
                "self": [],
                "value": [],
                "tpe": []
            }
        },
        "ConstantValueProvider.__call__": {
            "name": "__call__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ConstantValueProvider.__wrapped__": {
            "name": "__wrapped__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantValueProvider.const": {
            "name": "const",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantValueProvider.converter": {
            "name": "converter",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "__func": []
            }
        },
        "Const.env": {
            "name": "env",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Const.__call__": {
            "name": "__call__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "__value": []
            }
        },
        "Const.__getitem__": {
            "name": "__getitem__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "__type": []
            }
        },
        "Const.provider": {
            "name": "provider",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "__func": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/lazy.py": {
        "lazy": {
            "name": "lazy",
            "location": 97,
            "return": [],
            "arguments": {
                "__func": []
            }
        },
        "LazyWrappedFunction.__wrapped__": {
            "name": "__wrapped__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrappedFunction.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrappedFunction.call": {
            "name": "call",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "lazy.decorate": {
            "name": "decorate",
            "location": 185,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/_constant.py": {
        "get_singleton_instance": {
            "name": "get_singleton_instance",
            "location": 27,
            "return": [],
            "arguments": {
                "container": [],
                "cls": []
            }
        },
        "ConstantImpl.create": {
            "name": "create",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstantImpl.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantImpl.__set_name__": {
            "name": "__set_name__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "ConstantImpl.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantImpl.__get__": {
            "name": "__get__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "ConstantImpl.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "ConstantImpl._provide": {
            "name": "_provide",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "get_provider_self": []
            }
        },
        "ConstantFuncImpl.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantFuncImpl._provide": {
            "name": "_provide",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "get_provider_self": []
            }
        },
        "ConstantMethImpl.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantMethImpl._provide": {
            "name": "_provide",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "get_provider_self": []
            }
        },
        "ConstantImpl.create.wrapped_converter": {
            "name": "wrapped_converter",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "tpe": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/_constant_factory.py": {
        "const_env_provider": {
            "name": "const_env_provider",
            "location": 38,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "const_env_converter": {
            "name": "const_env_converter",
            "location": 43,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        },
        "const_identity_provider": {
            "name": "const_identity_provider",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "ConstantFactoryImpl.create": {
            "name": "create",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [],
                "provider": [],
                "converter": []
            }
        },
        "ConstantFactoryImpl.with_converter": {
            "name": "with_converter",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "__func": []
            }
        },
        "ConstantFactoryImpl.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "__arg": []
            }
        },
        "ConstantFactoryImpl.__getitem__": {
            "name": "__getitem__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "__type": []
            }
        },
        "TypedConstantFactoryImpl.__call__": {
            "name": "__call__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "__arg": []
            }
        },
        "ConstantProviderImpl.__post_init__": {
            "name": "__post_init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantProviderImpl.__get__": {
            "name": "__get__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "ConstantProviderImpl.__call__": {
            "name": "__call__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantProviderImpl.converter": {
            "name": "converter",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "__func": []
            }
        },
        "ConstImpl.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstImpl.__call__": {
            "name": "__call__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "__value": []
            }
        },
        "ConstImpl.__getitem__": {
            "name": "__getitem__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "__type": []
            }
        },
        "ConstImpl.provider": {
            "name": "provider",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "__func": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/_lazy.py": {
        "Function.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapperWithoutScope.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapperWithoutScope.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapperWithoutScope.call": {
            "name": "call",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapper.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapper.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyWrapper.call": {
            "name": "call",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyKey.of": {
            "name": "of",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": [],
                "args": [],
                "kwargs": []
            }
        },
        "DependencyKey.__hash__": {
            "name": "__hash__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyKey.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/_provider.py": {
        "Lazy.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lazy.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "LazyFunction.of": {
            "name": "of",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "func": [],
                "args": [],
                "kwargs": [],
                "scope": []
            }
        },
        "LazyFunction.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyFunction.__antidote_debug_info__": {
            "name": "__antidote_debug_info__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyFunction.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "LazyFunction.__hash__": {
            "name": "__hash__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyProvider.exists": {
            "name": "exists",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "LazyProvider.debug": {
            "name": "debug",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "LazyProvider.provide": {
            "name": "provide",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        }
    },
    "antidote-master/src/antidote/lib/lazy/__init__.py": {
        "__const": {
            "name": "__const",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "register_lazy_provider": {
            "name": "register_lazy_provider",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/src/antidote/world/scopes.py": {},
    "antidote-master/src/antidote/world/_methods.py": {
        "__apply_lazy": {
            "name": "__apply_lazy",
            "location": 23,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "lazy": {
            "name": "lazy",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 65,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "freeze": {
            "name": "freeze",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 117,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "new": {
            "name": "new",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 194,
            "return": [],
            "arguments": {
                "scope": []
            }
        }
    },
    "antidote-master/src/antidote/world/__init__.py": {},
    "antidote-master/src/antidote/world/test/override.py": {},
    "antidote-master/src/antidote/world/test/_methods.py": {
        "clone": {
            "name": "clone",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "singleton": {
            "name": "singleton",
            "location": 148,
            "return": [],
            "arguments": {
                "dependency": [],
                "value": [],
                "test_provider": []
            }
        },
        "factory": {
            "name": "factory",
            "location": 196,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "empty": {
            "name": "empty",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "maybe_provide_from": {
            "name": "maybe_provide_from",
            "location": 287,
            "return": [],
            "arguments": {
                "provider": [],
                "dependency": []
            }
        },
        "clone.build": {
            "name": "build",
            "location": 84,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "new.build_new_container": {
            "name": "build_new_container",
            "location": 117,
            "return": [],
            "arguments": {
                "existing": []
            }
        },
        "factory.decorate": {
            "name": "decorate",
            "location": 238,
            "return": [],
            "arguments": {
                "f": [],
                "test_provider": []
            }
        },
        "empty.build_container": {
            "name": "build_container",
            "location": 277,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "antidote-master/src/antidote/world/test/_override.py": {
        "singleton": {
            "name": "singleton",
            "location": 23,
            "return": [],
            "arguments": {
                "dependency": [],
                "value": []
            }
        },
        "factory": {
            "name": "factory",
            "location": 66,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "provider": {
            "name": "provider",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "factory.decorate": {
            "name": "decorate",
            "location": 122,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "provider.decorate": {
            "name": "decorate",
            "location": 189,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "antidote-master/src/antidote/world/test/__init__.py": {},
    "antidote-master/src/antidote/_internal/API.py": {
        "public": {
            "name": "public",
            "location": 8,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 17,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "experimental": {
            "name": "experimental",
            "location": 25,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "private": {
            "name": "private",
            "location": 35,
            "return": [
                "T"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_internal/argspec.py": {
        "is_unbound_method": {
            "name": "is_unbound_method",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [
                    "Union[(classmethod, staticmethod, Callable[(..., object)])]"
                ]
            }
        },
        "Argument.has_default": {
            "name": "has_default",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.is_optional": {
            "name": "is_optional",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.from_callable": {
            "name": "from_callable",
            "location": 61,
            "return": [
                "_TArguments"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArguments]"
                ],
                "func": [
                    "Union[(classmethod, staticmethod, Callable[(..., object)])]"
                ]
            }
        },
        "Arguments._build": {
            "name": "_build",
            "location": 78,
            "return": [
                "_TArguments"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArguments]"
                ]
            }
        },
        "Arguments.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "Sequence[Argument]"
                ],
                "has_var_positional": [
                    "bool"
                ],
                "has_var_keyword": [
                    "bool"
                ],
                "has_self": [
                    "bool"
                ]
            }
        },
        "Arguments.arg_names": {
            "name": "arg_names",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Arguments.__repr__": {
            "name": "__repr__",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.__getitem__": {
            "name": "__getitem__",
            "location": 155,
            "return": [
                "Argument"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Arguments.__contains__": {
            "name": "__contains__",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Arguments.__len__": {
            "name": "__len__",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.__iter__": {
            "name": "__iter__",
            "location": 169,
            "return": [
                "Iterator[Argument]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/localns.py": {
        "retrieve_or_validate_injection_locals": {
            "name": "retrieve_or_validate_injection_locals",
            "location": 13,
            "return": [
                "Optional[Mapping[(str, Any)]]"
            ],
            "arguments": {
                "type_hints_locals": [
                    "Optional[Union[(antidote._internal.utils.Default, Mapping[(str, object)], Literal['auto'])]]"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_internal/stack.py": {
        "DependencyStack.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyStack.depth": {
            "name": "depth",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyStack.to_list": {
            "name": "to_list",
            "location": 24,
            "return": [
                "List[Hashable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyStack.instantiating": {
            "name": "instantiating",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/state.py": {
        "current_container": {
            "name": "current_container",
            "location": 16,
            "return": [
                "antidote.core.container.RawContainer"
            ],
            "arguments": {}
        },
        "current_overridable_container": {
            "name": "current_overridable_container",
            "location": 21,
            "return": [
                "antidote.core.container.OverridableRawContainer"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "override": {
            "name": "override",
            "location": 47,
            "return": [],
            "arguments": {
                "create": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/world.py": {
        "new_container": {
            "name": "new_container",
            "location": 98,
            "return": [
                "antidote.core.container.RawContainer"
            ],
            "arguments": {}
        },
        "SupportsRMatmul.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 21,
            "return": [
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "type_hint": [
                    "object"
                ]
            }
        },
        "LazyDependency.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__dependency": [],
                "expected_type": [
                    "Type[T]"
                ]
            }
        },
        "LazyDependency.get": {
            "name": "get",
            "location": 54,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldLazy.__call__": {
            "name": "__call__",
            "location": 73,
            "return": [
                "LazyDependency"
            ],
            "arguments": {
                "self": [],
                "__dependency": []
            }
        },
        "WorldLazy.__getitem__": {
            "name": "__getitem__",
            "location": 77,
            "return": [
                "TypedWorldLazy[T]"
            ],
            "arguments": {
                "self": [],
                "tpe": [
                    "Type[T]"
                ]
            }
        },
        "TypedWorldLazy.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "LazyDependency[T]"
            ],
            "arguments": {
                "self": [],
                "__dependency": []
            }
        },
        "TypedWorldLazy.__matmul__": {
            "name": "__matmul__",
            "location": 93,
            "return": [
                "LazyDependency[T]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsRMatmul"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_internal/wrapper.py": {
        "build_wrapper": {
            "name": "build_wrapper",
            "location": 49,
            "return": [
                "Callable"
            ],
            "arguments": {
                "blueprint": [
                    "InjectionBlueprint"
                ],
                "wrapped": [
                    "Callable[(..., object)]"
                ],
                "skip_self": [
                    "bool"
                ]
            }
        },
        "get_wrapper_injections": {
            "name": "get_wrapper_injections",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "wrapper": [
                    "Callable[(..., object)]"
                ]
            }
        },
        "is_wrapper": {
            "name": "is_wrapper",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "object"
                ]
            }
        },
        "get_wrapped": {
            "name": "get_wrapped",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [
                    "object"
                ]
            }
        },
        "_inject_kwargs": {
            "name": "_inject_kwargs",
            "location": 198,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "container": [
                    "antidote.core.container.Container"
                ],
                "blueprint": [
                    "InjectionBlueprint"
                ],
                "offset": [
                    "int"
                ],
                "kwargs": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "Injection.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectionBlueprint.is_empty": {
            "name": "is_empty",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectedWrapper.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "Callable[(..., object)]"
                ]
            }
        },
        "InjectedWrapper.__class__": {
            "name": "__class__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InjectedWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "SyncInjectedWrapper.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "InjectionBlueprint"
                ],
                "wrapped": [
                    "Callable[(..., object)]"
                ],
                "skip_self": [
                    "bool"
                ]
            }
        },
        "SyncInjectedWrapper.__call__": {
            "name": "__call__",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncInjectedWrapper.__get__": {
            "name": "__get__",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "owner": [
                    "type"
                ]
            }
        },
        "SyncInjectedBoundWrapper.__get__": {
            "name": "__get__",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "owner": [
                    "type"
                ]
            }
        },
        "AsyncInjectedWrapper.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "InjectionBlueprint"
                ],
                "wrapped": [
                    "Callable[(..., Awaitable[object])]"
                ],
                "skip_self": [
                    "bool"
                ]
            }
        },
        "AsyncInjectedWrapper.__get__": {
            "name": "__get__",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "owner": [
                    "type"
                ]
            }
        },
        "AsyncInjectedBoundWrapper.__get__": {
            "name": "__get__",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "owner": [
                    "type"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_internal/__init__.py": {},
    "antidote-master/src/antidote/_internal/utils/debug.py": {
        "short_id": {
            "name": "short_id",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "__obj": [
                    "object"
                ]
            }
        },
        "debug_repr": {
            "name": "debug_repr",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "__obj": [
                    "object"
                ]
            }
        },
        "get_injections": {
            "name": "get_injections",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "__func": []
            }
        },
        "scope_repr": {
            "name": "scope_repr",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": [
                    "Optional[antidote.core.container.Scope]"
                ]
            }
        },
        "tree_debug_info": {
            "name": "tree_debug_info",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "container": [
                    "antidote.core.container.RawContainer"
                ],
                "origin": [
                    "object"
                ],
                "max_depth": [
                    "int"
                ]
            }
        },
        "tree_debug_info.add_root_injections": {
            "name": "add_root_injections",
            "location": 143,
            "return": [],
            "arguments": {
                "parent": [],
                "parent_dependencies": [],
                "dependency": []
            }
        },
        "tree_debug_info.DebugTreeNode.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "tree_debug_info.DebugTreeNode.child": {
            "name": "child",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/utils/immutable.py": {
        "ImmutableMeta.__new__": {
            "name": "__new__",
            "location": 12,
            "return": [
                "_TImmutableMeta"
            ],
            "arguments": {
                "mcs": [
                    "Type[_TImmutableMeta]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "namespace": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "Immutable.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Immutable.__setattr__": {
            "name": "__setattr__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "object"
                ]
            }
        },
        "FinalImmutableMeta.__new__": {
            "name": "__new__",
            "location": 58,
            "return": [
                "_TFinalImmutableMeta"
            ],
            "arguments": {
                "mcs": [
                    "Type[_TFinalImmutableMeta]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "namespace": [
                    "Dict[(str, object)]"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_internal/utils/meta.py": {
        "FinalMeta.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [
                "_TFinalMeta"
            ],
            "arguments": {
                "mcs": [
                    "Type[_TFinalMeta]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "namespace": [
                    "Dict[(str, object)]"
                ]
            }
        },
        "AbstractMeta.__new__": {
            "name": "__new__",
            "location": 25,
            "return": [
                "_TAbstractMeta"
            ],
            "arguments": {
                "mcs": [
                    "Type[_TAbstractMeta]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[(type, ...)]"
                ],
                "namespace": [
                    "Dict[(str, object)]"
                ],
                "abstract": [
                    "bool"
                ]
            }
        },
        "Singleton.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/utils/slots.py": {
        "SlotsRepr.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/src/antidote/_internal/utils/__init__.py": {
        "_enforce": {
            "name": "_enforce",
            "location": 78,
            "return": [],
            "arguments": {
                "obj": [],
                "tpe": [],
                "check": []
            }
        },
        "enforce_type_if_possible": {
            "name": "enforce_type_if_possible",
            "location": 87,
            "return": [],
            "arguments": {
                "obj": [],
                "tpe": []
            }
        },
        "enforce_subclass_if_possible": {
            "name": "enforce_subclass_if_possible",
            "location": 94,
            "return": [],
            "arguments": {
                "child": [],
                "mother": []
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 101,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "is_optional": {
            "name": "is_optional",
            "location": 107,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "extract_optional_value": {
            "name": "extract_optional_value",
            "location": 117,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "Copy.immutable": {
            "name": "immutable",
            "location": 50,
            "return": [],
            "arguments": {
                "current": []
            }
        },
        "_is_protocol": {
            "name": "_is_protocol",
            "location": 73,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "antidote-master/src/antidote/_providers/factory.py": {
        "FactoryProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryProvider.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryProvider.clone": {
            "name": "clone",
            "location": 23,
            "return": [
                "_TFactoryProvider"
            ],
            "arguments": {
                "self": [
                    "_TFactoryProvider"
                ],
                "keep_singletons_cache": [
                    "bool"
                ]
            }
        },
        "FactoryProvider.exists": {
            "name": "exists",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "FactoryProvider.maybe_debug": {
            "name": "maybe_debug",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "FactoryProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ],
                "container": []
            }
        },
        "FactoryProvider.get_dependency_of": {
            "name": "get_dependency_of",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "FactoryProvider.register": {
            "name": "register",
            "location": 108,
            "return": [
                "FactoryDependency"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "type"
                ]
            }
        },
        "FactoryDependency.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryDependency.__repr__": {
            "name": "__repr__",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryDependency.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryDependency.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryDependency.__hash__": {
            "name": "__hash__",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryDependency.__eq__": {
            "name": "__eq__",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Factory.__post_init__": {
            "name": "__post_init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Factory.copy": {
            "name": "copy",
            "location": 179,
            "return": [
                "_TFactory"
            ],
            "arguments": {
                "self": [
                    "_TFactory"
                ],
                "keep_function": [
                    "bool"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_providers/indirect.py": {
        "IndirectProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndirectProvider.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndirectProvider.clone": {
            "name": "clone",
            "location": 22,
            "return": [
                "_TIndirectProvider"
            ],
            "arguments": {
                "self": [
                    "_TIndirectProvider"
                ],
                "keep_singletons_cache": [
                    "bool"
                ]
            }
        },
        "IndirectProvider.exists": {
            "name": "exists",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "IndirectProvider.maybe_debug": {
            "name": "maybe_debug",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "IndirectProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ],
                "container": []
            }
        },
        "IndirectProvider.register_implementation": {
            "name": "register_implementation",
            "location": 73,
            "return": [
                "ImplementationDependency"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ],
                "implementation": [
                    "Callable[([], object)]"
                ]
            }
        },
        "ImplementationCallback.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementationDependency.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "object"
                ],
                "implementation": [
                    "Callable[([], object)]"
                ],
                "permanent": [
                    "bool"
                ]
            }
        },
        "ImplementationDependency.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementationDependency.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementationDependency.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementationDependency.__hash__": {
            "name": "__hash__",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementationDependency.__eq__": {
            "name": "__eq__",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_providers/world_test.py": {
        "WorldTestProvider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldTestProvider.clone": {
            "name": "clone",
            "location": 17,
            "return": [
                "_TWorldTestProvider"
            ],
            "arguments": {
                "self": [
                    "_TWorldTestProvider"
                ],
                "keep_singletons_cache": [
                    "bool"
                ]
            }
        },
        "WorldTestProvider.exists": {
            "name": "exists",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "WorldTestProvider.debug": {
            "name": "debug",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        },
        "WorldTestProvider.provide": {
            "name": "provide",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ],
                "container": []
            }
        },
        "WorldTestProvider.add_singletons": {
            "name": "add_singletons",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "Mapping[(object, object)]"
                ]
            }
        },
        "WorldTestProvider.add_factory": {
            "name": "add_factory",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "object"
                ]
            }
        }
    },
    "antidote-master/src/antidote/_providers/__init__.py": {},
    "antidote-master/tests/conftest.py": {
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 8,
            "return": [],
            "arguments": {
                "item": []
            }
        }
    },
    "antidote-master/tests/test_class_auto_wiring.py": {
        "new_world": {
            "name": "new_world",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "builder": {
            "name": "builder",
            "location": 68,
            "return": [],
            "arguments": {
                "cls_or_decorator": [],
                "wiring_kind": [],
                "subclass": []
            }
        },
        "class_builder": {
            "name": "class_builder",
            "location": 145,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "subclass_builder": {
            "name": "subclass_builder",
            "location": 156,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_default": {
            "name": "test_default",
            "location": 164,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_no_wiring": {
            "name": "test_no_wiring",
            "location": 174,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_methods": {
            "name": "test_methods",
            "location": 180,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_auto_provide": {
            "name": "test_auto_provide",
            "location": 198,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_dependencies_dict": {
            "name": "test_dependencies_dict",
            "location": 238,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_dependencies_seq": {
            "name": "test_dependencies_seq",
            "location": 270,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_dependencies_callable": {
            "name": "test_dependencies_callable",
            "location": 322,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "test_distinct_arguments": {
            "name": "test_distinct_arguments",
            "location": 358,
            "return": [],
            "arguments": {
                "class_builder": []
            }
        },
        "DummyProtocol.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "DummyProtocol.method_AB": {
            "name": "method_AB",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "DummyProtocol.method_ab": {
            "name": "method_ab",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "DummyProtocol.method_xyz": {
            "name": "method_xyz",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "z": []
            }
        },
        "builder.build": {
            "name": "build",
            "location": 84,
            "return": [],
            "arguments": {
                "wiring": []
            }
        },
        "builder.decorator": {
            "name": "decorator",
            "location": 77,
            "return": [],
            "arguments": {
                "wiring": []
            }
        },
        "builder.build.Dummy.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "builder.build.Dummy.method_AB": {
            "name": "method_AB",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "builder.build.Dummy.method_ab": {
            "name": "method_ab",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "builder.build.Dummy.method_xyz": {
            "name": "method_xyz",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "z": []
            }
        },
        "builder.build.Dummy.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "builder.build.Dummy.get": {
            "name": "get",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "builder.build.SubDummy.__call__": {
            "name": "__call__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/test_config.py": {
        "test_invalid_auto_detect_type_hints_locals": {
            "name": "test_invalid_auto_detect_type_hints_locals",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/test_exceptions.py": {
        "test_stack_error": {
            "name": "test_stack_error",
            "location": 32,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "test_dependency_not_found": {
            "name": "test_dependency_not_found",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_dependency_error": {
            "name": "test_duplicate_dependency_error",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_frozen_world": {
            "name": "test_frozen_world",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_dependency": {
            "name": "test_duplicate_dependency",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "LongRepr.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/test_meta.py": {
        "test_is_compiled": {
            "name": "test_is_compiled",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/test_thread_safety.py": {
        "delayed_new_class": {
            "name": "delayed_new_class",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_container_instantiation_safety": {
            "name": "test_container_instantiation_safety",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_world_safety": {
            "name": "test_world_safety",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_state_init_safety": {
            "name": "test_state_init_safety",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_state_override_safety": {
            "name": "test_state_override_safety",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "ThreadSafetyTest.run": {
            "name": "run",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "target": [],
                "n_threads": []
            }
        },
        "ThreadSafetyTest.random_delay": {
            "name": "random_delay",
            "location": 33,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ThreadSafetyTest.unique_id": {
            "name": "unique_id",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "ThreadSafetyTest.check_locked": {
            "name": "check_locked",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "failures": []
            }
        },
        "delayed_new_class.f": {
            "name": "f",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_world_safety.worker": {
            "name": "worker",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_state_init_safety.new_container": {
            "name": "new_container",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_state_override_safety.create": {
            "name": "create",
            "location": 124,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_state_override_safety.worker": {
            "name": "worker",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "test_container_instantiation_safety.worker": {
            "name": "worker",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/test_utils.py": {
        "does_not_raise": {
            "name": "does_not_raise",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_invalid_validated_scope": {
            "name": "test_invalid_validated_scope",
            "location": 41,
            "return": [],
            "arguments": {
                "expectation": [],
                "kwargs": []
            }
        },
        "test_validated_scope": {
            "name": "test_validated_scope",
            "location": 61,
            "return": [],
            "arguments": {
                "scope": [],
                "singleton": [],
                "default": [],
                "expected": []
            }
        }
    },
    "antidote-master/tests/__init__.py": {},
    "antidote-master/tests/core/test_annotations.py": {
        "test_invalid_from_arg": {
            "name": "test_invalid_from_arg",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_extract_explicit_arg_dependency": {
            "name": "test_extract_explicit_arg_dependency",
            "location": 58,
            "return": [],
            "arguments": {
                "type_hint": [],
                "expected": []
            }
        },
        "test_extract_auto_provided_arg_dependency": {
            "name": "test_extract_auto_provided_arg_dependency",
            "location": 96,
            "return": [],
            "arguments": {
                "type_hint": [],
                "expected": []
            }
        },
        "test_extract_annotated_dependency": {
            "name": "test_extract_annotated_dependency",
            "location": 129,
            "return": [],
            "arguments": {
                "type_hint": [],
                "expected": []
            }
        },
        "test_multiple_antidote_annotations": {
            "name": "test_multiple_antidote_annotations",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_unknown_antidote_annotations": {
            "name": "test_unknown_antidote_annotations",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_antidote_annotation_with_marker": {
            "name": "test_antidote_annotation_with_marker",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_argument_only_annotations": {
            "name": "test_argument_only_annotations",
            "location": 181,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "DummyLegacySource.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_extract_explicit_arg_dependency.f": {
            "name": "f",
            "location": 59,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_extract_explicit_arg_dependency.g": {
            "name": "g",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_extract_auto_provided_arg_dependency.f": {
            "name": "f",
            "location": 97,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_extract_auto_provided_arg_dependency.g": {
            "name": "g",
            "location": 103,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiple_antidote_annotations.f": {
            "name": "f",
            "location": 136,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_unknown_antidote_annotations.f": {
            "name": "f",
            "location": 150,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_antidote_annotation_with_marker.f": {
            "name": "f",
            "location": 164,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "antidote-master/tests/core/test_annotations_get.py": {
        "new_world": {
            "name": "new_world",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_injectable": {
            "name": "test_injectable",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_nested_get": {
            "name": "test_nested_get",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_factory": {
            "name": "test_factory",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_source": {
            "name": "test_source",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_invalid_source": {
            "name": "test_invalid_source",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory": {
            "name": "test_invalid_factory",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory_output": {
            "name": "test_invalid_factory_output",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_injectable.f": {
            "name": "f",
            "location": 21,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_injectable.g": {
            "name": "g",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_nested_get.f": {
            "name": "f",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_nested_get.g": {
            "name": "g",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_factory.build_dummy": {
            "name": "build_dummy",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_factory.f": {
            "name": "f",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_factory.g": {
            "name": "g",
            "location": 64,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_source.f": {
            "name": "f",
            "location": 85,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_source.g": {
            "name": "g",
            "location": 89,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_invalid_factory_output.dummy_factory": {
            "name": "dummy_factory",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_source.DummySource.__antidote_dependency__": {
            "name": "__antidote_dependency__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        }
    },
    "antidote-master/tests/core/test_cache.py": {
        "test_fast_dict": {
            "name": "test_fast_dict",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/core/test_container.py": {
        "container": {
            "name": "container",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_dependency_repr": {
            "name": "test_dependency_repr",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_scope_repr": {
            "name": "test_scope_repr",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 56,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 77,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_dependency_cycle_error": {
            "name": "test_dependency_cycle_error",
            "location": 98,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_dependency_instantiation_error": {
            "name": "test_dependency_instantiation_error",
            "location": 116,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_providers_property": {
            "name": "test_providers_property",
            "location": 135,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_scope_property": {
            "name": "test_scope_property",
            "location": 150,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_repr_str": {
            "name": "test_repr_str",
            "location": 160,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 168,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_freezing_locked": {
            "name": "test_freezing_locked",
            "location": 177,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_provider_property": {
            "name": "test_provider_property",
            "location": 188,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_clone": {
            "name": "test_clone",
            "location": 194,
            "return": [],
            "arguments": {
                "container": [],
                "singleton": []
            }
        },
        "test_providers_must_properly_clone": {
            "name": "test_providers_must_properly_clone",
            "location": 217,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_providers_must_properly_clone2": {
            "name": "test_providers_must_properly_clone2",
            "location": 228,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_raise_if_exists": {
            "name": "test_raise_if_exists",
            "location": 242,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_scope": {
            "name": "test_scope",
            "location": 260,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_sanity_checks": {
            "name": "test_sanity_checks",
            "location": 293,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_already_frozen": {
            "name": "test_already_frozen",
            "location": 304,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_debug": {
            "name": "test_debug",
            "location": 311,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceWithNonMetDependency.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_dependency_instantiation_error.raise_error": {
            "name": "raise_error",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_providers_must_properly_clone.DummySelf.clone": {
            "name": "clone",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "test_providers_must_properly_clone2.DummyRegistered.clone": {
            "name": "clone",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "test_raise_if_exists.DummyProviderWithDebug.debug": {
            "name": "debug",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_scope.ScopeProvider.exists": {
            "name": "exists",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_scope.ScopeProvider.maybe_provide": {
            "name": "maybe_provide",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        }
    },
    "antidote-master/tests/core/test_getter.py": {
        "test_dependency_cannot_have_source": {
            "name": "test_dependency_cannot_have_source",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/core/test_injection.py": {
        "setup_world": {
            "name": "setup_world",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_validate_injection": {
            "name": "test_validate_injection",
            "location": 61,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expectation": []
            }
        },
        "injector": {
            "name": "injector",
            "location": 73,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 77,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_without_type_hints": {
            "name": "test_without_type_hints",
            "location": 113,
            "return": [],
            "arguments": {
                "injector": [],
                "expected": [],
                "kwargs": []
            }
        },
        "test_with_auto_provide": {
            "name": "test_with_auto_provide",
            "location": 216,
            "return": [],
            "arguments": {
                "injector": [],
                "expected": [],
                "kwargs": []
            }
        },
        "test_with_provide": {
            "name": "test_with_provide",
            "location": 336,
            "return": [],
            "arguments": {
                "injector": [],
                "expected": [],
                "kwargs": []
            }
        },
        "test_ignored_type_hints": {
            "name": "test_ignored_type_hints",
            "location": 403,
            "return": [],
            "arguments": {
                "injector": [],
                "type_hint": []
            }
        },
        "test_none_optional_support": {
            "name": "test_none_optional_support",
            "location": 413,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_none_optional_support_auto_provide": {
            "name": "test_none_optional_support_auto_provide",
            "location": 439,
            "return": [],
            "arguments": {
                "injector": [],
                "auto_provide": []
            }
        },
        "test_annotations": {
            "name": "test_annotations",
            "location": 471,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_multiple_antidote_annotations": {
            "name": "test_multiple_antidote_annotations",
            "location": 535,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "injected_method_with": {
            "name": "injected_method_with",
            "location": 557,
            "return": [],
            "arguments": {
                "request": [],
                "injector": []
            }
        },
        "test_invalid_args": {
            "name": "test_invalid_args",
            "location": 634,
            "return": [],
            "arguments": {
                "injected_method_with": [],
                "expectation": [],
                "kwargs": []
            }
        },
        "test_unknown_dependency": {
            "name": "test_unknown_dependency",
            "location": 674,
            "return": [],
            "arguments": {
                "injected_method_with": [],
                "expectation": [],
                "kwargs": []
            }
        },
        "test_unknown_provide": {
            "name": "test_unknown_provide",
            "location": 680,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_strict_validation": {
            "name": "test_strict_validation",
            "location": 717,
            "return": [],
            "arguments": {
                "injected_method_with": [],
                "injector": [],
                "expectation": [],
                "kwargs": [],
                "strict": []
            }
        },
        "test_cannot_inject_self": {
            "name": "test_cannot_inject_self",
            "location": 736,
            "return": [],
            "arguments": {
                "injector": [],
                "expectation": [],
                "kwargs": []
            }
        },
        "test_no_injections": {
            "name": "test_no_injections",
            "location": 767,
            "return": [],
            "arguments": {}
        },
        "test_double_injection": {
            "name": "test_double_injection",
            "location": 775,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_invalid_inject": {
            "name": "test_invalid_inject",
            "location": 830,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_static_class_method": {
            "name": "test_static_class_method",
            "location": 841,
            "return": [],
            "arguments": {
                "injector": []
            }
        },
        "test_dependencies_shortcut": {
            "name": "test_dependencies_shortcut",
            "location": 932,
            "return": [],
            "arguments": {}
        },
        "test_ignore_type_hints": {
            "name": "test_ignore_type_hints",
            "location": 964,
            "return": [],
            "arguments": {}
        },
        "test_no_injection_error_when_ignoring_type_hints": {
            "name": "test_no_injection_error_when_ignoring_type_hints",
            "location": 981,
            "return": [],
            "arguments": {}
        },
        "test_wrapped_injection": {
            "name": "test_wrapped_injection",
            "location": 995,
            "return": [],
            "arguments": {}
        },
        "test_problematic_type_hints": {
            "name": "test_problematic_type_hints",
            "location": 1013,
            "return": [],
            "arguments": {}
        },
        "DoesNotRaise.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoesNotRaise.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "test_simple.f": {
            "name": "f",
            "location": 79,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_without_type_hints.f": {
            "name": "f",
            "location": 115,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_with_auto_provide.f": {
            "name": "f",
            "location": 218,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_with_provide.f": {
            "name": "f",
            "location": 338,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_ignored_type_hints.f": {
            "name": "f",
            "location": 405,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_none_optional_support.f": {
            "name": "f",
            "location": 418,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_none_optional_support.g": {
            "name": "g",
            "location": 422,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_none_optional_support_auto_provide.f": {
            "name": "f",
            "location": 444,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_none_optional_support_auto_provide.g": {
            "name": "g",
            "location": 448,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_none_optional_support_auto_provide.h": {
            "name": "h",
            "location": 452,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "injected_method_with.builder": {
            "name": "builder",
            "location": 560,
            "return": [],
            "arguments": {}
        },
        "test_no_injections.f": {
            "name": "f",
            "location": 768,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dependencies_shortcut.f": {
            "name": "f",
            "location": 934,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dependencies_shortcut.g": {
            "name": "g",
            "location": 940,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_ignore_type_hints.g": {
            "name": "g",
            "location": 972,
            "return": [],
            "arguments": {
                "a": [],
                "my_service": []
            }
        },
        "test_wrapped_injection.f": {
            "name": "f",
            "location": 997,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_wrapped_injection.g": {
            "name": "g",
            "location": 1003,
            "return": [],
            "arguments": {}
        },
        "test_problematic_type_hints.static": {
            "name": "static",
            "location": 1015,
            "return": [],
            "arguments": {
                "actions": []
            }
        },
        "test_validate_injection.f": {
            "name": "f",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_without_type_hints.A.method": {
            "name": "method",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "test_without_type_hints.A.class_method": {
            "name": "class_method",
            "location": 125,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_without_type_hints.A.static_method": {
            "name": "static_method",
            "location": 130,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_without_type_hints.A.klass": {
            "name": "klass",
            "location": 135,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_with_auto_provide.A.method": {
            "name": "method",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "test_with_auto_provide.A.class_method": {
            "name": "class_method",
            "location": 228,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_with_auto_provide.A.static_method": {
            "name": "static_method",
            "location": 233,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_with_auto_provide.A.klass": {
            "name": "klass",
            "location": 238,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_with_provide.A.method": {
            "name": "method",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "test_with_provide.A.class_method": {
            "name": "class_method",
            "location": 348,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_with_provide.A.static_method": {
            "name": "static_method",
            "location": 355,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "test_with_provide.A.klass": {
            "name": "klass",
            "location": 360,
            "return": [],
            "arguments": {
                "cls": [],
                "first": [],
                "second": []
            }
        },
        "test_annotations.custom_annotated": {
            "name": "custom_annotated",
            "location": 478,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_annotations.optional_annotated": {
            "name": "optional_annotated",
            "location": 488,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_annotations.get": {
            "name": "get",
            "location": 528,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_annotations.optional_get": {
            "name": "optional_get",
            "location": 506,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_annotations.from_arg": {
            "name": "from_arg",
            "location": 515,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiple_antidote_annotations.Maker.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_unknown_provide.f": {
            "name": "f",
            "location": 684,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_double_injection.f": {
            "name": "f",
            "location": 782,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_static_class_method.Dummy.static": {
            "name": "static",
            "location": 845,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_static_class_method.Dummy.klass": {
            "name": "klass",
            "location": 850,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_dependencies_shortcut.h": {
            "name": "h",
            "location": 948,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dependencies_shortcut.h2": {
            "name": "h2",
            "location": 954,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dependencies_shortcut.h3": {
            "name": "h3",
            "location": 960,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_ignore_type_hints.f": {
            "name": "f",
            "location": 968,
            "return": [],
            "arguments": {
                "a": [],
                "my_service": []
            }
        },
        "test_no_injection_error_when_ignoring_type_hints.f": {
            "name": "f",
            "location": 985,
            "return": [],
            "arguments": {}
        },
        "test_no_injection_error_when_ignoring_type_hints.g": {
            "name": "g",
            "location": 991,
            "return": [],
            "arguments": {}
        },
        "test_annotations.Maker.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_multiple_antidote_annotations.custom_annotated": {
            "name": "custom_annotated",
            "location": 552,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "injected_method_with.builder.f": {
            "name": "f",
            "location": 564,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_cannot_inject_self.A.method": {
            "name": "method",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_cannot_inject_self.A.classmethod": {
            "name": "classmethod",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_double_injection.StaticmethodA.f": {
            "name": "f",
            "location": 791,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_double_injection.StaticmethodB.f": {
            "name": "f",
            "location": 800,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_double_injection.ClassmethodA.f": {
            "name": "f",
            "location": 809,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_double_injection.ClassmethodB.f": {
            "name": "f",
            "location": 818,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_double_injection.Method.f": {
            "name": "f",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "injected_method_with.builder.Dummy.method": {
            "name": "method",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "injected_method_with.builder.Dummy.class_method": {
            "name": "class_method",
            "location": 577,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "injected_method_with.builder.Dummy.class_method_after": {
            "name": "class_method_after",
            "location": 582,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "injected_method_with.builder.Dummy.static_method": {
            "name": "static_method",
            "location": 587,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "antidote-master/tests/core/test_injection_localns.py": {
        "setup_world": {
            "name": "setup_world",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_locals": {
            "name": "test_locals",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_local_class": {
            "name": "test_local_class",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_local_nested_class": {
            "name": "test_local_nested_class",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_invalid_locals": {
            "name": "test_invalid_locals",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_explicit_locals": {
            "name": "test_explicit_locals",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_no_locals": {
            "name": "test_no_locals",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_no_type_hints": {
            "name": "test_no_type_hints",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_config_not_activated": {
            "name": "test_config_not_activated",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_locals.f": {
            "name": "f",
            "location": 24,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_explicit_locals.f": {
            "name": "f",
            "location": 94,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_no_type_hints.g": {
            "name": "g",
            "location": 168,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_local_class.Service.method": {
            "name": "method",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_local_class.Service2.method": {
            "name": "method",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_explicit_locals.Service.method": {
            "name": "method",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_locals.f": {
            "name": "f",
            "location": 117,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_no_locals.g": {
            "name": "g",
            "location": 123,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_no_type_hints.f": {
            "name": "f",
            "location": 151,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_no_locals.F.method": {
            "name": "method",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_locals.G.method": {
            "name": "method",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_type_hints.F.method": {
            "name": "method",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_config_not_activated.f": {
            "name": "f",
            "location": 188,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_local_nested_class.Service1.Service2.Service3.method": {
            "name": "method",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_local_nested_class.Service1.Service2.Service3b.method": {
            "name": "method",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_config_not_activated.Service.method": {
            "name": "method",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "antidote-master/tests/core/test_injection_markers.py": {
        "setup_world": {
            "name": "setup_world",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_marker_me": {
            "name": "test_marker_me",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_me_missing_dependency": {
            "name": "test_invalid_marker_me_missing_dependency",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_me_wrong_type_hint": {
            "name": "test_invalid_marker_me_wrong_type_hint",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_from": {
            "name": "test_marker_me_from",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_me_from_wrong_type_hint": {
            "name": "test_invalid_marker_me_from_wrong_type_hint",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_me_from_argument_mix": {
            "name": "test_invalid_marker_me_from_argument_mix",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_marker_get": {
            "name": "test_marker_get",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_get_missing_dependency": {
            "name": "test_invalid_marker_get_missing_dependency",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_marker_from_get": {
            "name": "test_marker_from_get",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_from_get_wrong_target": {
            "name": "test_invalid_marker_from_get_wrong_target",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_custom_marker": {
            "name": "test_custom_marker",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_optional": {
            "name": "test_marker_me_optional",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_optional_source": {
            "name": "test_marker_me_optional_source",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_marker_me.f": {
            "name": "f",
            "location": 23,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_missing_dependency.f": {
            "name": "f",
            "location": 34,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_marker_me_from.create_service": {
            "name": "create_service",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_from.f": {
            "name": "f",
            "location": 65,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_from_wrong_type_hint.create_service": {
            "name": "create_service",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_invalid_marker_me_from_argument_mix.create_service": {
            "name": "create_service",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "test_marker_get.f": {
            "name": "f",
            "location": 128,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_get_missing_dependency.f": {
            "name": "f",
            "location": 139,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_marker_from_get.create_service": {
            "name": "create_service",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_marker_from_get.f": {
            "name": "f",
            "location": 156,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_from_get_wrong_target.create_service": {
            "name": "create_service",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_optional.f": {
            "name": "f",
            "location": 197,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_marker_me_optional.f2": {
            "name": "f2",
            "location": 206,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_marker_me_optional_source.create_service": {
            "name": "create_service",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_marker_me_optional_source.f": {
            "name": "f",
            "location": 235,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_wrong_type_hint.f": {
            "name": "f",
            "location": 46,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_wrong_type_hint.g": {
            "name": "g",
            "location": 52,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_from_wrong_type_hint.f": {
            "name": "f",
            "location": 82,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_from_wrong_type_hint.g": {
            "name": "g",
            "location": 88,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_from_wrong_type_hint.h": {
            "name": "h",
            "location": 97,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_invalid_marker_me_from_argument_mix.f": {
            "name": "f",
            "location": 112,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_invalid_marker_me_from_argument_mix.f2": {
            "name": "f2",
            "location": 118,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_invalid_marker_from_get_wrong_target.f": {
            "name": "f",
            "location": 176,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_custom_marker.test": {
            "name": "test",
            "location": 187,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "test_marker_me_optional.f3": {
            "name": "f3",
            "location": 217,
            "return": [],
            "arguments": {
                "my_service": []
            }
        }
    },
    "antidote-master/tests/core/test_overridable_container.py": {
        "original_container": {
            "name": "original_container",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "container": {
            "name": "container",
            "location": 21,
            "return": [],
            "arguments": {
                "original_container": []
            }
        },
        "test_override_singletons": {
            "name": "test_override_singletons",
            "location": 25,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_override_factory": {
            "name": "test_override_factory",
            "location": 35,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_override_provider": {
            "name": "test_override_provider",
            "location": 58,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 88,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "test_errors.factory": {
            "name": "factory",
            "location": 93,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/core/test_provider.py": {
        "does_not_raise": {
            "name": "does_not_raise",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_freeze_world": {
            "name": "test_freeze_world",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_stateless": {
            "name": "test_stateless",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_no_default_implementation": {
            "name": "test_no_default_implementation",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_debug": {
            "name": "test_debug",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_provide": {
            "name": "test_provide",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_container_lock": {
            "name": "test_container_lock",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_assert_not_duplicate": {
            "name": "test_assert_not_duplicate",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_freeze_world.DummyProvider.provide": {
            "name": "provide",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_freeze_world.DummyProvider.clone": {
            "name": "clone",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "test_freeze_world.DummyProvider.register": {
            "name": "register",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_freeze_world.DummyProvider.method": {
            "name": "method",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_freeze_world.DummyProvider.static": {
            "name": "static",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_freeze_world.DummyProvider.klass": {
            "name": "klass",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_stateless.DummyProvider.provide": {
            "name": "provide",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_debug.Dummy.exists": {
            "name": "exists",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_provide.Dummy.exists": {
            "name": "exists",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_provide.Dummy.provide": {
            "name": "provide",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_container_lock.worker": {
            "name": "worker",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_assert_not_duplicate.A.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assert_not_duplicate.A.exists": {
            "name": "exists",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_assert_not_duplicate.A.provide": {
            "name": "provide",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_assert_not_duplicate.A.add": {
            "name": "add",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "value": []
            }
        },
        "test_container_lock.A.exists": {
            "name": "exists",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_container_lock.A.provide": {
            "name": "provide",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_container_lock.A.change_state": {
            "name": "change_state",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_container_lock.B.exists": {
            "name": "exists",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_container_lock.B.provide": {
            "name": "provide",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_container_lock.B.change_state": {
            "name": "change_state",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_container_lock.C.change_state": {
            "name": "change_state",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assert_not_duplicate.B.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assert_not_duplicate.B.debug": {
            "name": "debug",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_assert_not_duplicate.B.exists": {
            "name": "exists",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_assert_not_duplicate.B.provide": {
            "name": "provide",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "test_assert_not_duplicate.B.add": {
            "name": "add",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "value": []
            }
        }
    },
    "antidote-master/tests/core/test_utils.py": {
        "test_dependency_value": {
            "name": "test_dependency_value",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_dependency_debug": {
            "name": "test_dependency_debug",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/core/test_wire.py": {
        "new_world": {
            "name": "new_world",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_invalid_class": {
            "name": "test_invalid_class",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 21,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        }
    },
    "antidote-master/tests/core/test_wiring.py": {
        "wire_": {
            "name": "wire_",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "new_world": {
            "name": "new_world",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_no_strict_validation": {
            "name": "test_no_strict_validation",
            "location": 65,
            "return": [],
            "arguments": {
                "wire_": [],
                "kwargs": []
            }
        },
        "test_no_strict_validation_auto_provide": {
            "name": "test_no_strict_validation_auto_provide",
            "location": 79,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_subclass_classmethod": {
            "name": "test_subclass_classmethod",
            "location": 93,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_invalid_arguments": {
            "name": "test_invalid_arguments",
            "location": 119,
            "return": [],
            "arguments": {
                "wire_": [],
                "arg": []
            }
        },
        "test_invalid_class": {
            "name": "test_invalid_class",
            "location": 127,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_iterable": {
            "name": "test_iterable",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_default_all_methods": {
            "name": "test_default_all_methods",
            "location": 141,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_methods": {
            "name": "test_methods",
            "location": 198,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_double_injection": {
            "name": "test_double_injection",
            "location": 218,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_invalid_methods": {
            "name": "test_invalid_methods",
            "location": 252,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "wired_method_builder": {
            "name": "wired_method_builder",
            "location": 264,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_use_inject_annotation": {
            "name": "test_use_inject_annotation",
            "location": 302,
            "return": [],
            "arguments": {
                "wire_": [],
                "wired_method_builder": []
            }
        },
        "test_dependencies": {
            "name": "test_dependencies",
            "location": 311,
            "return": [],
            "arguments": {
                "wire_": [],
                "wired_method_builder": []
            }
        },
        "test_wiring_auto_provide": {
            "name": "test_wiring_auto_provide",
            "location": 327,
            "return": [],
            "arguments": {
                "wire_": [],
                "wired_method_builder": [],
                "annotation": []
            }
        },
        "test_complex_wiring": {
            "name": "test_complex_wiring",
            "location": 377,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_class_static_methods": {
            "name": "test_class_static_methods",
            "location": 392,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 411,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "test_with_wiring": {
            "name": "test_with_wiring",
            "location": 434,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "test_new_old_wiring_wire": {
            "name": "test_new_old_wiring_wire",
            "location": 446,
            "return": [],
            "arguments": {}
        },
        "test_class_in_localns": {
            "name": "test_class_in_localns",
            "location": 463,
            "return": [],
            "arguments": {
                "type_hints_locals": []
            }
        },
        "test_default_class_in_localns": {
            "name": "test_default_class_in_localns",
            "location": 481,
            "return": [],
            "arguments": {
                "wire_": []
            }
        },
        "test_invalid_class_in_localns": {
            "name": "test_invalid_class_in_localns",
            "location": 505,
            "return": [],
            "arguments": {}
        },
        "wired_method_builder.build": {
            "name": "build",
            "location": 267,
            "return": [],
            "arguments": {
                "wire": []
            }
        },
        "DummyConf.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "wiring": []
            }
        },
        "DummyConf.copy": {
            "name": "copy",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "wiring": []
            }
        },
        "wire_.wire": {
            "name": "wire",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_no_strict_validation.A.f": {
            "name": "f",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_strict_validation.A.g": {
            "name": "g",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "test_no_strict_validation_auto_provide.A.f": {
            "name": "f",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_strict_validation_auto_provide.A.g": {
            "name": "g",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "test_subclass_classmethod.Dummy.cls_method": {
            "name": "cls_method",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_default_all_methods.A.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_all_methods.A.__call__": {
            "name": "__call__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_all_methods.A.method": {
            "name": "method",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_all_methods.A.klass": {
            "name": "klass",
            "location": 154,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_default_all_methods.A.static": {
            "name": "static",
            "location": 158,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_default_all_methods.A._method": {
            "name": "_method",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_all_methods.A._klass": {
            "name": "_klass",
            "location": 165,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_default_all_methods.A._static": {
            "name": "_static",
            "location": 169,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_default_all_methods.A.__method": {
            "name": "__method",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_all_methods.A.__klass": {
            "name": "__klass",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_default_all_methods.A.__static": {
            "name": "__static",
            "location": 180,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_methods.A.f": {
            "name": "f",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_methods.A.g": {
            "name": "g",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_double_injection.A.f": {
            "name": "f",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_double_injection.C.f": {
            "name": "f",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_complex_wiring.A.f": {
            "name": "f",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_complex_wiring.A.g": {
            "name": "g",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_class_static_methods.Dummy.static": {
            "name": "static",
            "location": 396,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_class_static_methods.Dummy.klass": {
            "name": "klass",
            "location": 400,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_class_in_localns.Dummy.create": {
            "name": "create",
            "location": 471,
            "return": [],
            "arguments": {
                "cls": [],
                "service": []
            }
        },
        "test_default_class_in_localns.Dummy.create": {
            "name": "create",
            "location": 488,
            "return": [],
            "arguments": {
                "cls": [],
                "service": []
            }
        },
        "test_default_class_in_localns.Dummy2.create": {
            "name": "create",
            "location": 499,
            "return": [],
            "arguments": {
                "cls": [],
                "service": []
            }
        },
        "wire_.wire.decorator": {
            "name": "decorator",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_double_injection.B.f": {
            "name": "f",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_double_injection.D.f": {
            "name": "f",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "wired_method_builder.build.A.f": {
            "name": "f",
            "location": 291,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "antidote-master/tests/core/utils.py": {
        "DummyProvider.clone": {
            "name": "clone",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "DummyProvider.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "singleton": []
            }
        },
        "DummyProvider.exists": {
            "name": "exists",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "DummyProvider.provide": {
            "name": "provide",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "DummyFactoryProvider.clone": {
            "name": "clone",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        },
        "DummyFactoryProvider.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "singleton": []
            }
        },
        "DummyFactoryProvider.exists": {
            "name": "exists",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "DummyFactoryProvider.provide": {
            "name": "provide",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        }
    },
    "antidote-master/tests/core/__init__.py": {},
    "antidote-master/tests/internals/test_argspec.py": {
        "f": {
            "name": "f",
            "location": 10,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "g": {
            "name": "g",
            "location": 14,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "h": {
            "name": "h",
            "location": 18,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "k": {
            "name": "k",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "lazy": {
            "name": "lazy",
            "location": 42,
            "return": [],
            "arguments": {
                "dummy": []
            }
        },
        "arg": {
            "name": "arg",
            "location": 46,
            "return": [],
            "arguments": {
                "__name": []
            }
        },
        "test_from_callable": {
            "name": "test_from_callable",
            "location": 195,
            "return": [],
            "arguments": {
                "func": [],
                "expected": []
            }
        },
        "test_from_methods": {
            "name": "test_from_methods",
            "location": 216,
            "return": [],
            "arguments": {
                "descriptor": []
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_without_self": {
            "name": "test_without_self",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_magic_methods_arguments": {
            "name": "test_magic_methods_arguments",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_invalid_callable": {
            "name": "test_invalid_callable",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_repr_argument": {
            "name": "test_repr_argument",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "Dummy.f": {
            "name": "f",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "Dummy.g": {
            "name": "g",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "a": []
            }
        },
        "Dummy.h": {
            "name": "h",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_from_methods.f": {
            "name": "f",
            "location": 217,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "antidote-master/tests/internals/test_stack.py": {
        "test_instantiating": {
            "name": "test_instantiating",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/internals/test_state.py": {
        "test_double_init": {
            "name": "test_double_init",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_overridable_container": {
            "name": "test_overridable_container",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/internals/test_wrapper.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "wrap": {
            "name": "wrap",
            "location": 43,
            "return": [],
            "arguments": {
                "__func": []
            }
        },
        "f": {
            "name": "f",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_wrapper": {
            "name": "test_wrapper",
            "location": 112,
            "return": [],
            "arguments": {
                "expected": [],
                "func": []
            }
        },
        "test_classmethod_wrapping": {
            "name": "test_classmethod_wrapping",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_required_dependency_not_found": {
            "name": "test_required_dependency_not_found",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_dependency_not_found": {
            "name": "test_dependency_not_found",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_multiple_injections": {
            "name": "test_multiple_injections",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_custom_attributes": {
            "name": "test_custom_attributes",
            "location": 189,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "wrap.wrapper": {
            "name": "wrapper",
            "location": 44,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Dummy.method": {
            "name": "method",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Dummy.class_after": {
            "name": "class_after",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "Dummy.static_after": {
            "name": "static_after",
            "location": 77,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Dummy2.method": {
            "name": "method",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_classmethod_wrapping.class_method": {
            "name": "class_method",
            "location": 132,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_required_dependency_not_found.f": {
            "name": "f",
            "location": 144,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dependency_not_found.f": {
            "name": "f",
            "location": 153,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiple_injections.f": {
            "name": "f",
            "location": 166,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        }
    },
    "antidote-master/tests/internals/test_wrapper_inspect.py": {
        "func": {
            "name": "func",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "func_with_annotations": {
            "name": "func_with_annotations",
            "location": 12,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "func_with_defaults": {
            "name": "func_with_defaults",
            "location": 16,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "func_with_kw_only": {
            "name": "func_with_kw_only",
            "location": 20,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_wrapped_attributes": {
            "name": "test_wrapped_attributes",
            "location": 418,
            "return": [],
            "arguments": {
                "original": [],
                "wrapped": [],
                "strict_is": []
            }
        },
        "Klass.method": {
            "name": "method",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Klass.method_with_annotations": {
            "name": "method_with_annotations",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Klass.method_with_defaults": {
            "name": "method_with_defaults",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Klass.method_with_kw_only": {
            "name": "method_with_kw_only",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Klass.cls": {
            "name": "cls",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "Klass.cls_with_annotations": {
            "name": "cls_with_annotations",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "Klass.cls_with_defaults": {
            "name": "cls_with_defaults",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "x": [],
                "y": []
            }
        },
        "Klass.cls_with_kw_only": {
            "name": "cls_with_kw_only",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "Klass.static": {
            "name": "static",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "Klass.static_with_annotations": {
            "name": "static_with_annotations",
            "location": 96,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Klass.static_with_defaults": {
            "name": "static_with_defaults",
            "location": 100,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "Klass.static_with_kw_only": {
            "name": "static_with_kw_only",
            "location": 104,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "antidote-master/tests/internals/__init__.py": {},
    "antidote-master/tests/internals/utils/test_immutable.py": {
        "cls": {
            "name": "cls",
            "location": 7,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_immutable_meta": {
            "name": "test_immutable_meta",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "test_invalid_immutable": {
            "name": "test_invalid_immutable",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "test_immutability": {
            "name": "test_immutability",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "test_immutable_meta.B.get": {
            "name": "get",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_immutability.A.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "antidote-master/tests/internals/utils/test_meta.py": {
        "test_abstract_meta": {
            "name": "test_abstract_meta",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_meta": {
            "name": "test_final_meta",
            "location": 29,
            "return": [],
            "arguments": {
                "meta": []
            }
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "antidote-master/tests/internals/utils/test_slots.py": {
        "test_slot_repr_mixin": {
            "name": "test_slot_repr_mixin",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummySlot.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [],
                "value": []
            }
        }
    },
    "antidote-master/tests/internals/utils/test_utils.py": {
        "does_not_raise": {
            "name": "does_not_raise",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_enforce_type": {
            "name": "test_enforce_type",
            "location": 59,
            "return": [],
            "arguments": {
                "expectation": [],
                "obj": [],
                "tpe": []
            }
        },
        "test_enforce_subtype": {
            "name": "test_enforce_subtype",
            "location": 78,
            "return": [],
            "arguments": {
                "expectation": [],
                "sub": [],
                "tpe": []
            }
        },
        "DummyProtocol.dummy": {
            "name": "dummy",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyRuntimeProtocol.dummy": {
            "name": "dummy",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidDummy.dummy": {
            "name": "dummy",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/internals/utils/test_world.py": {
        "test_new_container": {
            "name": "test_new_container",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_dependency": {
            "name": "test_dependency",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/internals/utils/__init__.py": {},
    "antidote-master/tests/lib/test_constants.py": {
        "test_world": {
            "name": "test_world",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_marker": {
            "name": "test_marker",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_default": {
            "name": "test_default",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_auto_cast": {
            "name": "test_auto_cast",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_type_safety": {
            "name": "test_type_safety",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_default_get": {
            "name": "test_default_get",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_no_const": {
            "name": "test_no_const",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_no_get_method": {
            "name": "test_no_get_method",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_invalid_conf": {
            "name": "test_invalid_conf",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "test_no_subclass_of_constants": {
            "name": "test_no_subclass_of_constants",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "test_conf_error": {
            "name": "test_conf_error",
            "location": 252,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expectation": []
            }
        },
        "test_conf_copy": {
            "name": "test_conf_copy",
            "location": 264,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "test_conf_repr": {
            "name": "test_conf_repr",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_marker.f": {
            "name": "f",
            "location": 47,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simple.Config.provide_const": {
            "name": "provide_const",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "test_default.Config.provide_const": {
            "name": "provide_const",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "test_auto_cast.MetaDummy.__new__": {
            "name": "__new__",
            "location": 139,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_type_safety.MetaDummy.__new__": {
            "name": "__new__",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_name.Config.provide_const": {
            "name": "provide_const",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "test_no_const.Config.provide_const": {
            "name": "provide_const",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        }
    },
    "antidote-master/tests/lib/test_factory.py": {
        "does_not_raise": {
            "name": "does_not_raise",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_world": {
            "name": "test_world",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "dummy": {
            "name": "dummy",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 39,
            "return": [],
            "arguments": {
                "test_world": [],
                "request": []
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 64,
            "return": [],
            "arguments": {
                "build": []
            }
        },
        "test_pass_through": {
            "name": "test_pass_through",
            "location": 70,
            "return": [],
            "arguments": {
                "build": []
            }
        },
        "test_legacy_notation": {
            "name": "test_legacy_notation",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_parameterized": {
            "name": "test_parameterized",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_not_parametrized": {
            "name": "test_not_parametrized",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_invalid_with_default_parameters": {
            "name": "test_invalid_with_default_parameters",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_invalid_with_injected_parameters": {
            "name": "test_invalid_with_injected_parameters",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_invalid_parameterized_dependency": {
            "name": "test_invalid_parameterized_dependency",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_invalid_dependency": {
            "name": "test_invalid_dependency",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "test_getattr": {
            "name": "test_getattr",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_wiring": {
            "name": "test_wiring",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "test_wiring_none": {
            "name": "test_wiring_none",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_wiring_custom": {
            "name": "test_wiring_custom",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_missing_call": {
            "name": "test_missing_call",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "test_missing_return_type_hint": {
            "name": "test_missing_return_type_hint",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory_args": {
            "name": "test_invalid_factory_args",
            "location": 348,
            "return": [],
            "arguments": {
                "expectation": [],
                "kwargs": [],
                "func": []
            }
        },
        "test_no_subclass_of_service": {
            "name": "test_no_subclass_of_service",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_invalid_conf": {
            "name": "test_invalid_conf",
            "location": 368,
            "return": [],
            "arguments": {}
        },
        "test_conf_parameters": {
            "name": "test_conf_parameters",
            "location": 389,
            "return": [],
            "arguments": {
                "expectation": [],
                "parameters": []
            }
        },
        "test_invalid_conf_args": {
            "name": "test_invalid_conf_args",
            "location": 406,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expectation": []
            }
        },
        "test_conf_copy": {
            "name": "test_conf_copy",
            "location": 420,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "test_invalid_copy": {
            "name": "test_invalid_copy",
            "location": 426,
            "return": [],
            "arguments": {}
        },
        "test_conf_repr": {
            "name": "test_conf_repr",
            "location": 432,
            "return": [],
            "arguments": {}
        },
        "test_default_injection": {
            "name": "test_default_injection",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "test_double_injection": {
            "name": "test_double_injection",
            "location": 456,
            "return": [],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_legacy_notation.f": {
            "name": "f",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_custom_scope.scoped_factory": {
            "name": "scoped_factory",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_invalid_dependency.f": {
            "name": "f",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "test_getattr.build": {
            "name": "build",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_wiring.build_b": {
            "name": "build_b",
            "location": 216,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_wiring_none.build_b2": {
            "name": "build_b2",
            "location": 232,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_wiring_custom.build_b3": {
            "name": "build_b3",
            "location": 257,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_default_injection.build_a": {
            "name": "build_a",
            "location": 447,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_double_injection.build_a": {
            "name": "build_a",
            "location": 463,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "build.build": {
            "name": "build",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_legacy_notation.BFactory.__call__": {
            "name": "__call__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_scope.ScopedF.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parameterized.BuildA.__call__": {
            "name": "__call__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_not_parametrized.BuildA.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_parameterized_dependency.BuildA.__call__": {
            "name": "__call__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_invalid_dependency.F.__call__": {
            "name": "__call__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_wiring.BuildB.__call__": {
            "name": "__call__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "test_wiring_none.BuildB2.__call__": {
            "name": "__call__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "test_wiring_custom.BuildB3.__call__": {
            "name": "__call__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "test_missing_return_type_hint.faulty_service_provider": {
            "name": "faulty_service_provider",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "test_missing_return_type_hint.faulty_service_provider2": {
            "name": "faulty_service_provider2",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_no_subclass_of_service.Dummy.__call__": {
            "name": "__call__",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_with_default_parameters.BuildA.__call__": {
            "name": "__call__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_invalid_with_injected_parameters.BuildA.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_missing_return_type_hint.FaultyServiceFactory.__call__": {
            "name": "__call__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_missing_return_type_hint.FaultyServiceFactory2.__call__": {
            "name": "__call__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_missing_return_type_hint.FaultyServiceFactory3.__call__": {
            "name": "__call__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_missing_return_type_hint.FaultyServiceFactory4.__call__": {
            "name": "__call__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_no_subclass_of_service.SubDummy.__call__": {
            "name": "__call__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_conf.Dummy.__call__": {
            "name": "__call__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_conf_parameters.Build.__call__": {
            "name": "__call__",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "build.ServiceFactory.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/lib/test_implementation.py": {
        "test_world": {
            "name": "test_world",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_default_implementation": {
            "name": "test_default_implementation",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_implementation": {
            "name": "test_implementation",
            "location": 40,
            "return": [],
            "arguments": {
                "singleton": [],
                "permanent": []
            }
        },
        "test_implementation_parameterized_service": {
            "name": "test_implementation_parameterized_service",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_implementation_with_factory": {
            "name": "test_implementation_with_factory",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "dummy_choose": {
            "name": "dummy_choose",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation": {
            "name": "test_invalid_implementation",
            "location": 137,
            "return": [],
            "arguments": {
                "expectation": [],
                "kwargs": [],
                "func": []
            }
        },
        "test_invalid_implementation_return_type": {
            "name": "test_invalid_implementation_return_type",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_dependency": {
            "name": "test_invalid_implementation_dependency",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_getattr": {
            "name": "test_getattr",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class": {
            "name": "test_validate_provided_class",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class_factory": {
            "name": "test_validate_provided_class_factory",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_default_injection": {
            "name": "test_default_injection",
            "location": 328,
            "return": [],
            "arguments": {}
        },
        "test_double_injection": {
            "name": "test_double_injection",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_source_notation": {
            "name": "test_source_notation",
            "location": 375,
            "return": [],
            "arguments": {}
        },
        "test_default_implementation.choose": {
            "name": "choose",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_implementation.choose_service": {
            "name": "choose_service",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_implementation_parameterized_service.impl": {
            "name": "impl",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_implementation_with_factory.impl2": {
            "name": "impl2",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_dependency.current_interface": {
            "name": "current_interface",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_getattr.current_interface": {
            "name": "current_interface",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class.choose_a": {
            "name": "choose_a",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class.choose_b": {
            "name": "choose_b",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "test_default_injection.choose_a": {
            "name": "choose_a",
            "location": 341,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_double_injection.choose_a": {
            "name": "choose_a",
            "location": 366,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_source_notation.choose": {
            "name": "choose",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "test_source_notation.f": {
            "name": "f",
            "location": 387,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_implementation_parameterized_service.A.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_implementation_with_factory.A.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_implementation_with_factory.BuildA.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_implementation_return_type.choose": {
            "name": "choose",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_return_type.choose2": {
            "name": "choose2",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_return_type.impl": {
            "name": "impl",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_return_type.impl2": {
            "name": "impl2",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class_factory.build_a": {
            "name": "build_a",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "test_validate_provided_class_factory.build_b": {
            "name": "build_b",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation_return_type.C.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_implementation_return_type.D.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_implementation_return_type.BuildD.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_validate_provided_class_factory.BuildA.__call__": {
            "name": "__call__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_validate_provided_class_factory.BuildB.__call__": {
            "name": "__call__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/lib/test_lazy.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_lazy_call_singleton": {
            "name": "test_lazy_call_singleton",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_args_kwargs": {
            "name": "test_args_kwargs",
            "location": 27,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "test_method_call": {
            "name": "test_method_call",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_method_same_instance": {
            "name": "test_method_same_instance",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_method_singleton": {
            "name": "test_method_singleton",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_method_direct_call": {
            "name": "test_method_direct_call",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_method_args_kwargs": {
            "name": "test_method_args_kwargs",
            "location": 86,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "test_invalid_lazy_call": {
            "name": "test_invalid_lazy_call",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_invalid_lazy_method_call": {
            "name": "test_invalid_lazy_method_call",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_invalid_lazy_method_class": {
            "name": "test_invalid_lazy_method_class",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_lazy_call_singleton.func": {
            "name": "func",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_args_kwargs.func": {
            "name": "func",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_method_call.Test.get": {
            "name": "get",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "test_method_same_instance.Test.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_method_singleton.Test.get": {
            "name": "get",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_method_direct_call.Test.get": {
            "name": "get",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_method_args_kwargs.Test.get": {
            "name": "get",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_lazy_method_class.Dummy.get": {
            "name": "get",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "antidote-master/tests/lib/test_service.py": {
        "does_not_raise": {
            "name": "does_not_raise",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_world": {
            "name": "test_world",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_register_simple": {
            "name": "test_register_simple",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_register_singleton": {
            "name": "test_register_singleton",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_parameterized": {
            "name": "test_parameterized",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_not_parametrized": {
            "name": "test_not_parametrized",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_invalid_with_default_parameters": {
            "name": "test_invalid_with_default_parameters",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_invalid_with_injected_parameters": {
            "name": "test_invalid_with_injected_parameters",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_registration": {
            "name": "test_duplicate_registration",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_invalid_class": {
            "name": "test_invalid_class",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_invalid_service_args": {
            "name": "test_invalid_service_args",
            "location": 161,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expectation": []
            }
        },
        "test_no_subclass_of_service": {
            "name": "test_no_subclass_of_service",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "test_invalid_conf": {
            "name": "test_invalid_conf",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_conf_parameters": {
            "name": "test_conf_parameters",
            "location": 197,
            "return": [],
            "arguments": {
                "expectation": [],
                "parameters": []
            }
        },
        "test_invalid_conf_args": {
            "name": "test_invalid_conf_args",
            "location": 211,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expectation": []
            }
        },
        "test_conf_copy": {
            "name": "test_conf_copy",
            "location": 225,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "test_invalid_copy": {
            "name": "test_invalid_copy",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_conf_repr": {
            "name": "test_conf_repr",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "test_parameterized.A.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_not_parametrized.A.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_with_default_parameters.A.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_invalid_with_injected_parameters.B.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "antidote-master/tests/lib/__init__.py": {},
    "antidote-master/tests/lib/injectable/test_injectable.py": {
        "setup_world": {
            "name": "setup_world",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_scope": {
            "name": "test_scope",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_default_wiring": {
            "name": "test_default_wiring",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_no_wiring": {
            "name": "test_no_wiring",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_custom_wiring": {
            "name": "test_custom_wiring",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_factory": {
            "name": "test_factory",
            "location": 158,
            "return": [],
            "arguments": {
                "factory_method": []
            }
        },
        "test_invalid_arguments": {
            "name": "test_invalid_arguments",
            "location": 183,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_invalid_class": {
            "name": "test_invalid_class",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory_method": {
            "name": "test_invalid_factory_method",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_forbid_inheriting_service_class": {
            "name": "test_forbid_inheriting_service_class",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_declaration": {
            "name": "test_duplicate_declaration",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_simple.f": {
            "name": "f",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simple.f2": {
            "name": "f2",
            "location": 37,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_default_wiring.WithWiring.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_wiring.WithWiring.method": {
            "name": "method",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_wiring.WithWiring.injected_method": {
            "name": "injected_method",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_wiring.NoWiring.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_wiring.NoWiring.method": {
            "name": "method",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_default_wiring.NoWiring.injected_method": {
            "name": "injected_method",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_wiring.MyService.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_no_wiring.MyService.method": {
            "name": "method",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_custom_wiring.MyService.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_custom_wiring.MyService.method": {
            "name": "method",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_factory.Dummy.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_factory.Dummy.class_method": {
            "name": "class_method",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_factory.Dummy.static_method": {
            "name": "static_method",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory_method.Dummy3.build": {
            "name": "build",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/lib/injectable/test_provider.py": {
        "test_clone": {
            "name": "test_clone",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/lib/injectable/__init__.py": {},
    "antidote-master/tests/lib/interface/test_custom.py": {
        "_": {
            "name": "_",
            "location": 22,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "setup_world": {
            "name": "setup_world",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_custom_predicate_weight": {
            "name": "test_custom_predicate_weight",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_custom_predicate_condition": {
            "name": "test_custom_predicate_condition",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_predicate_merge_typeclasses": {
            "name": "test_predicate_merge_typeclasses",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_custom_predicate_constraint_missing_predicate": {
            "name": "test_custom_predicate_constraint_missing_predicate",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_custom_predicate_neutral_weight": {
            "name": "test_custom_predicate_neutral_weight",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_lang_example": {
            "name": "test_lang_example",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "test_event_subscriber_example": {
            "name": "test_event_subscriber_example",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "Weight.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "Weight.of_neutral": {
            "name": "of_neutral",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "predicate": []
            }
        },
        "Weight.__lt__": {
            "name": "__lt__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Weight.__add__": {
            "name": "__add__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Weight.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnPath.weight": {
            "name": "weight",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnPath.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WithPrefix.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "WithPrefix.evaluate": {
            "name": "evaluate",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Version.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "major": []
            }
        },
        "Version.evaluate": {
            "name": "evaluate",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Version.weight": {
            "name": "weight",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UseMe.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "UseMe.weight": {
            "name": "weight",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Weighted.merge": {
            "name": "merge",
            "location": 173,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "Weighted.weight": {
            "name": "weight",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreaterThan.merge": {
            "name": "merge",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "GreaterThan.evaluate": {
            "name": "evaluate",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "LocaleIs.weight": {
            "name": "weight",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocaleIs.evaluate": {
            "name": "evaluate",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "test_event_subscriber_example.process_initialization": {
            "name": "process_initialization",
            "location": 318,
            "return": [],
            "arguments": {
                "event": [],
                "subscribers": []
            }
        },
        "test_custom_predicate_constraint_missing_predicate.NotQualified.evaluate": {
            "name": "evaluate",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "test_custom_predicate_neutral_weight.Dummy.weight": {
            "name": "weight",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_event_subscriber_example.EventSubscriber.process": {
            "name": "process",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "test_event_subscriber_example.OnInitialization.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_event_subscriber_example.OnInitialization.process": {
            "name": "process",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "antidote-master/tests/lib/interface/test_interface.py": {
        "_": {
            "name": "_",
            "location": 19,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "setup_world": {
            "name": "setup_world",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_single_implementation": {
            "name": "test_single_implementation",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_single_multiple_implementations_failure": {
            "name": "test_single_multiple_implementations_failure",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_qualified_implementations": {
            "name": "test_qualified_implementations",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_invalid_interface": {
            "name": "test_invalid_interface",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "test_invalid_implementation": {
            "name": "test_invalid_implementation",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_unique_predicate": {
            "name": "test_unique_predicate",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test_custom_injectable": {
            "name": "test_custom_injectable",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_type_enforcement_if_possible": {
            "name": "test_type_enforcement_if_possible",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "test_generic": {
            "name": "test_generic",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "test_generic_protocol": {
            "name": "test_generic_protocol",
            "location": 403,
            "return": [],
            "arguments": {}
        },
        "test_override": {
            "name": "test_override",
            "location": 431,
            "return": [],
            "arguments": {}
        },
        "test_by_default": {
            "name": "test_by_default",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "test_by_default_override": {
            "name": "test_by_default_override",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "Qualifier.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Qualifier.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_single_implementation.single_base": {
            "name": "single_base",
            "location": 80,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_implementation.all_bases": {
            "name": "all_bases",
            "location": 86,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_implementation.all_bases_sequence": {
            "name": "all_bases_sequence",
            "location": 103,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_implementation.all_bases_iterable": {
            "name": "all_bases_iterable",
            "location": 109,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_qualified_implementations.f": {
            "name": "f",
            "location": 195,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_qualified_implementations.f2": {
            "name": "f2",
            "location": 201,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_qualified_implementations.g": {
            "name": "g",
            "location": 230,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_qualified_implementations.g2": {
            "name": "g2",
            "location": 236,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_generic.f": {
            "name": "f",
            "location": 391,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_generic.f_all": {
            "name": "f_all",
            "location": 397,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_generic_protocol.f": {
            "name": "f",
            "location": 419,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_generic_protocol.f_all": {
            "name": "f_all",
            "location": 425,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_implementation.all_bases_type_alias": {
            "name": "all_bases_type_alias",
            "location": 97,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_multiple_implementations_failure.f": {
            "name": "f",
            "location": 137,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_unique_predicate.MyPred.weight": {
            "name": "weight",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_type_enforcement_if_possible.BaseProtocol.method": {
            "name": "method",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_type_enforcement_if_possible.RuntimeProtocol.method": {
            "name": "method",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/lib/interface/test_internal.py": {
        "test_create_constraints_qualifiers": {
            "name": "test_create_constraints_qualifiers",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_create_invalid_kwargs": {
            "name": "test_create_invalid_kwargs",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_create_constraint_combination": {
            "name": "test_create_constraint_combination",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_create_constraint_invalid_predicate_class": {
            "name": "test_create_constraint_invalid_predicate_class",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_create_constraint_invalid_type_hint": {
            "name": "test_create_constraint_invalid_type_hint",
            "location": 61,
            "return": [],
            "arguments": {
                "type_hint": []
            }
        },
        "test_python310_support": {
            "name": "test_python310_support",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_create_constraint_invalid_predicate_class.MissingPredicateArgument.evaluate": {
            "name": "evaluate",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_create_constraint_invalid_type_hint.InvalidTypeHint.evaluate": {
            "name": "evaluate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "test_python310_support.NewUnionSyntaxTypeHint.evaluate": {
            "name": "evaluate",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        }
    },
    "antidote-master/tests/lib/interface/test_predicate.py": {
        "_": {
            "name": "_",
            "location": 16,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "setup_world": {
            "name": "setup_world",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_neutral_weight": {
            "name": "test_neutral_weight",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "only_if": {
            "name": "only_if",
            "location": 51,
            "return": [],
            "arguments": {
                "condition": []
            }
        },
        "weighted": {
            "name": "weighted",
            "location": 56,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_simple_predicate": {
            "name": "test_simple_predicate",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_predicate_implements": {
            "name": "test_predicate_implements",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_multiple_predicates": {
            "name": "test_multiple_predicates",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_predicate_generated_class": {
            "name": "test_predicate_generated_class",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_predicate_invalid_function": {
            "name": "test_predicate_invalid_function",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_predicate_already_injected": {
            "name": "test_predicate_already_injected",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "Weight.of_neutral": {
            "name": "of_neutral",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "predicate": []
            }
        },
        "Weight.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Weight.__add__": {
            "name": "__add__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_predicate_already_injected.if_only": {
            "name": "if_only",
            "location": 132,
            "return": [],
            "arguments": {
                "condition": [],
                "dummy": []
            }
        }
    },
    "antidote-master/tests/lib/interface/test_provider.py": {
        "test_clone": {
            "name": "test_clone",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_unknown_interface": {
            "name": "test_unknown_interface",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/lib/interface/test_qualifier.py": {
        "test_qualified_by_must_have_at_least_one_qualifier": {
            "name": "test_qualified_by_must_have_at_least_one_qualifier",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_qualifier_validation": {
            "name": "test_qualifier_validation",
            "location": 35,
            "return": [],
            "arguments": {
                "qualifiers": []
            }
        },
        "test_qualified_by_eq_hash": {
            "name": "test_qualified_by_eq_hash",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_qualified_by_predicate": {
            "name": "test_qualified_by_predicate",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_qualified_by_predicate_constraint": {
            "name": "test_qualified_by_predicate_constraint",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_qualified_by_one_of": {
            "name": "test_qualified_by_one_of",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_only_qualifier_id_matters": {
            "name": "test_only_qualifier_id_matters",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_only_qualifier_id_matters.Dummy.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "test_only_qualifier_id_matters.Dummy.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_only_qualifier_id_matters.Dummy.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_only_qualifier_id_matters.Dummy.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/lib/interface/__init__.py": {},
    "antidote-master/tests/lib/lazy/test_const.py": {
        "setup_tests": {
            "name": "setup_tests",
            "location": 27,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_static": {
            "name": "test_static",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "check_conf": {
            "name": "check_conf",
            "location": 69,
            "return": [],
            "arguments": {
                "Conf": []
            }
        },
        "env_converter": {
            "name": "env_converter",
            "location": 113,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        },
        "test_env": {
            "name": "test_env",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_factory_env_external": {
            "name": "test_factory_env_external",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_factory_env_method": {
            "name": "test_factory_env_method",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory": {
            "name": "test_invalid_factory",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_type_enforcement": {
            "name": "test_type_enforcement",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_unchecked_type": {
            "name": "test_unchecked_type",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_converter": {
            "name": "test_converter",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "test_invalid_converter": {
            "name": "test_invalid_converter",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_const_repr": {
            "name": "test_const_repr",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "test_singleton_dependency": {
            "name": "test_singleton_dependency",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_static.f": {
            "name": "f",
            "location": 48,
            "return": [],
            "arguments": {
                "host": [],
                "port": []
            }
        },
        "check_conf.check": {
            "name": "check",
            "location": 87,
            "return": [],
            "arguments": {
                "host": [],
                "hostname": [],
                "port": [],
                "port_number": [],
                "choice": [],
                "missing_with_default": []
            }
        },
        "test_factory_env_external.env": {
            "name": "env",
            "location": 135,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_factory_env_external._env": {
            "name": "_env",
            "location": 153,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_type_enforcement.f": {
            "name": "f",
            "location": 220,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_unchecked_type.f": {
            "name": "f",
            "location": 259,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_converter.f": {
            "name": "f",
            "location": 285,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_converter.f_converter": {
            "name": "f_converter",
            "location": 291,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        },
        "test_invalid_converter.get": {
            "name": "get",
            "location": 325,
            "return": [],
            "arguments": {
                "name": [],
                "arg": []
            }
        },
        "test_invalid_converter.f3": {
            "name": "f3",
            "location": 344,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        },
        "test_factory_env_method.Conf.env": {
            "name": "env",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "test_invalid_factory.f": {
            "name": "f",
            "location": 208,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_invalid_factory.f2": {
            "name": "f2",
            "location": 214,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_invalid_converter.f": {
            "name": "f",
            "location": 334,
            "return": [],
            "arguments": {
                "tpe": []
            }
        },
        "test_invalid_converter.f2": {
            "name": "f2",
            "location": 340,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_invalid_converter.f4": {
            "name": "f4",
            "location": 350,
            "return": [],
            "arguments": {
                "value": [],
                "tpe": []
            }
        },
        "test_singleton_dependency.Conf.env": {
            "name": "env",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        },
        "test_singleton_dependency.NotASingleton.env": {
            "name": "env",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": []
            }
        }
    },
    "antidote-master/tests/lib/lazy/test_lazy.py": {
        "setup_tests": {
            "name": "setup_tests",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_default": {
            "name": "test_default",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_single_arg": {
            "name": "test_single_arg",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_not_singleton": {
            "name": "test_not_singleton",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_scope": {
            "name": "test_scope",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_not_singleton_with_arg": {
            "name": "test_not_singleton_with_arg",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_unhashable_arguments": {
            "name": "test_unhashable_arguments",
            "location": 140,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_complex_arguments": {
            "name": "test_complex_arguments",
            "location": 150,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_equivalent_arguments": {
            "name": "test_equivalent_arguments",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_invalid_function": {
            "name": "test_invalid_function",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_injected": {
            "name": "test_injected",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "Bag.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_default.dummy": {
            "name": "dummy",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_default.f": {
            "name": "f",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_arg.named": {
            "name": "named",
            "location": 55,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_single_arg.f": {
            "name": "f",
            "location": 62,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_single_arg.g": {
            "name": "g",
            "location": 66,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_not_singleton.dummy": {
            "name": "dummy",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_not_singleton.f": {
            "name": "f",
            "location": 89,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_scope.dummy": {
            "name": "dummy",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_scope.f": {
            "name": "f",
            "location": 107,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_not_singleton_with_arg.named": {
            "name": "named",
            "location": 123,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_not_singleton_with_arg.f": {
            "name": "f",
            "location": 127,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_unhashable_arguments.bag": {
            "name": "bag",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_complex_arguments.bag": {
            "name": "bag",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_equivalent_arguments.f": {
            "name": "f",
            "location": 162,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_injected.dummy": {
            "name": "dummy",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_injected.bag_of_dummy": {
            "name": "bag_of_dummy",
            "location": 182,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_injected.f": {
            "name": "f",
            "location": 186,
            "return": [],
            "arguments": {
                "bag": []
            }
        },
        "test_injected.injected_bag": {
            "name": "injected_bag",
            "location": 193,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_injected.f2": {
            "name": "f2",
            "location": 197,
            "return": [],
            "arguments": {
                "bag": []
            }
        }
    },
    "antidote-master/tests/lib/lazy/__init__.py": {},
    "antidote-master/tests/mypy_typing/test_type_cast.py": {
        "test_constants_typing": {
            "name": "test_constants_typing",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_annotated_typing": {
            "name": "test_annotated_typing",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_proper_typing_assert_none": {
            "name": "test_proper_typing_assert_none",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_proper_typing_protocol": {
            "name": "test_proper_typing_protocol",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_annotated_typing.build_dummy": {
            "name": "build_dummy",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_annotated_typing.f": {
            "name": "f",
            "location": 46,
            "return": [],
            "arguments": {
                "dummy": []
            }
        },
        "test_annotated_typing.g": {
            "name": "g",
            "location": 54,
            "return": [],
            "arguments": {
                "dummy": []
            }
        },
        "test_proper_typing_assert_none.f": {
            "name": "f",
            "location": 68,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_proper_typing_assert_none.g": {
            "name": "g",
            "location": 88,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_proper_typing_protocol.f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {
                "my_service": []
            }
        },
        "test_constants_typing.Conf.provide_const": {
            "name": "provide_const",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": [],
                "my_service": []
            }
        },
        "test_annotated_typing.Dummy.hello": {
            "name": "hello",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_proper_typing_protocol.FProtocol.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "my_service": []
            }
        }
    },
    "antidote-master/tests/mypy_typing/__init__.py": {},
    "antidote-master/tests/providers/test_factory.py": {
        "build": {
            "name": "build",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "factory_params": {
            "name": "factory_params",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "scope": {
            "name": "scope",
            "location": 37,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 41,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 47,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_lazy": {
            "name": "test_lazy",
            "location": 54,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 62,
            "return": [],
            "arguments": {
                "scope": [],
                "factory_params": []
            }
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 75,
            "return": [],
            "arguments": {
                "provider": [],
                "singleton": [],
                "factory_params": []
            }
        },
        "test_multiple_factories": {
            "name": "test_multiple_factories",
            "location": 82,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_duplicate_dependency": {
            "name": "test_duplicate_dependency",
            "location": 93,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": [],
                "factory_params": []
            }
        },
        "test_parameterized_dependency": {
            "name": "test_parameterized_dependency",
            "location": 99,
            "return": [],
            "arguments": {
                "scope": [],
                "factory_params": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 110,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 162,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_factory_id_repr": {
            "name": "test_factory_id_repr",
            "location": 169,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_unknown_dependency": {
            "name": "test_unknown_dependency",
            "location": 182,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_invalid_lazy_dependency": {
            "name": "test_invalid_lazy_dependency",
            "location": 193,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_sanity_checks": {
            "name": "test_sanity_checks",
            "location": 209,
            "return": [],
            "arguments": {
                "provider": [],
                "output": [],
                "factory": [],
                "scope": []
            }
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 214,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_multiple_factories.build2": {
            "name": "build2",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_copy.build2": {
            "name": "build2",
            "location": 117,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/providers/test_indirect.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "service": {
            "name": "service",
            "location": 31,
            "return": [],
            "arguments": {
                "empty_world": []
            }
        },
        "indirect": {
            "name": "indirect",
            "location": 37,
            "return": [],
            "arguments": {
                "empty_world": []
            }
        },
        "permanent": {
            "name": "permanent",
            "location": 43,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_implementation": {
            "name": "test_implementation",
            "location": 47,
            "return": [],
            "arguments": {
                "permanent": []
            }
        },
        "test_implementation_permanent_singleton": {
            "name": "test_implementation_permanent_singleton",
            "location": 59,
            "return": [],
            "arguments": {
                "service": [],
                "singleton": [],
                "permanent": []
            }
        },
        "test_implementation_exists": {
            "name": "test_implementation_exists",
            "location": 90,
            "return": [],
            "arguments": {
                "indirect": [],
                "permanent": []
            }
        },
        "test_clone": {
            "name": "test_clone",
            "location": 117,
            "return": [],
            "arguments": {
                "indirect": [],
                "keep_singletons_cache": [],
                "register": []
            }
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 167,
            "return": [],
            "arguments": {
                "indirect": [],
                "permanent": []
            }
        },
        "test_register_duplicate_check": {
            "name": "test_register_duplicate_check",
            "location": 180,
            "return": [],
            "arguments": {
                "indirect": [],
                "permanent": []
            }
        },
        "test_invalid_link": {
            "name": "test_invalid_link",
            "location": 193,
            "return": [],
            "arguments": {
                "permanent": []
            }
        },
        "test_implementation_permanent_singleton.implementation": {
            "name": "implementation",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_register_duplicate_check.implementation": {
            "name": "implementation",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_invalid_link.implementation": {
            "name": "implementation",
            "location": 197,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/providers/test_lazy.py": {
        "lazy_provider": {
            "name": "lazy_provider",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_lazy": {
            "name": "test_lazy",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_exists": {
            "name": "test_exists",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 45,
            "return": [],
            "arguments": {
                "lazy_provider": []
            }
        },
        "test_debug": {
            "name": "test_debug",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "Dummy.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "singleton": []
            }
        },
        "Dummy.__antidote_provide__": {
            "name": "__antidote_provide__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        }
    },
    "antidote-master/tests/providers/test_providers.py": {
        "provider": {
            "name": "provider",
            "location": 9,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_unknown_dependency": {
            "name": "test_unknown_dependency",
            "location": 13,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_clone": {
            "name": "test_clone",
            "location": 19,
            "return": [],
            "arguments": {
                "provider": []
            }
        }
    },
    "antidote-master/tests/providers/test_service.py": {
        "provider": {
            "name": "provider",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "scope": {
            "name": "scope",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_parameterized_str_repr": {
            "name": "test_parameterized_str_repr",
            "location": 43,
            "return": [],
            "arguments": {
                "wrapped": [],
                "kwargs": []
            }
        },
        "test_parameterized_eq_hash": {
            "name": "test_parameterized_eq_hash",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 71,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_register": {
            "name": "test_register",
            "location": 78,
            "return": [],
            "arguments": {
                "singleton": []
            }
        },
        "test_parameterized": {
            "name": "test_parameterized",
            "location": 86,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "test_duplicate_error": {
            "name": "test_duplicate_error",
            "location": 95,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 103,
            "return": [],
            "arguments": {
                "provider": [],
                "keep_singletons_cache": [],
                "scope": []
            }
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 136,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 143,
            "return": [],
            "arguments": {
                "provider": [],
                "scope": []
            }
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 151,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_sanity_checks": {
            "name": "test_sanity_checks",
            "location": 169,
            "return": [],
            "arguments": {
                "provider": [],
                "klass": [],
                "scope": []
            }
        },
        "KeepInit.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "antidote-master/tests/providers/test_world_test.py": {
        "provider": {
            "name": "provider",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 23,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_factory": {
            "name": "test_factory",
            "location": 32,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_factory_singleton": {
            "name": "test_factory_singleton",
            "location": 42,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_factory_no_scope": {
            "name": "test_factory_no_scope",
            "location": 47,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_factory_scope": {
            "name": "test_factory_scope",
            "location": 52,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_duplicate": {
            "name": "test_duplicate",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_clone": {
            "name": "test_clone",
            "location": 85,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "test_clone.d": {
            "name": "d",
            "location": 91,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "antidote-master/tests/providers/__init__.py": {},
    "antidote-master/tests/world/test_debug.py": {
        "setup_world": {
            "name": "setup_world",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "assert_valid": {
            "name": "assert_valid",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_no_debug": {
            "name": "test_no_debug",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_injections": {
            "name": "test_injections",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_interface_debug": {
            "name": "test_interface_debug",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_implementation_debug": {
            "name": "test_implementation_debug",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_lazy_call_debug": {
            "name": "test_lazy_call_debug",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_unknown_debug": {
            "name": "test_unknown_debug",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_singleton_debug": {
            "name": "test_singleton_debug",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "test_wiring_debug": {
            "name": "test_wiring_debug",
            "location": 358,
            "return": [],
            "arguments": {}
        },
        "test_multiline_debug": {
            "name": "test_multiline_debug",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_lazy_method_debug": {
            "name": "test_lazy_method_debug",
            "location": 467,
            "return": [],
            "arguments": {}
        },
        "test_constants_debug": {
            "name": "test_constants_debug",
            "location": 522,
            "return": [],
            "arguments": {}
        },
        "test_const": {
            "name": "test_const",
            "location": 566,
            "return": [],
            "arguments": {}
        },
        "test_lazy": {
            "name": "test_lazy",
            "location": 631,
            "return": [],
            "arguments": {}
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "test_complex_debug": {
            "name": "test_complex_debug",
            "location": 718,
            "return": [],
            "arguments": {}
        },
        "DebugTestCase.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected": [],
                "depth": [],
                "legend": []
            }
        },
        "test_no_debug.g": {
            "name": "g",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_injections.f": {
            "name": "f",
            "location": 79,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_interface_debug._": {
            "name": "_",
            "location": 107,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_const.build": {
            "name": "build",
            "location": 594,
            "return": [],
            "arguments": {
                "name": [],
                "arg": [],
                "test": []
            }
        },
        "test_lazy.dummy": {
            "name": "dummy",
            "location": 638,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_lazy.build": {
            "name": "build",
            "location": 675,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_complex_debug.impl": {
            "name": "impl",
            "location": 736,
            "return": [],
            "arguments": {}
        },
        "test_complex_debug.f": {
            "name": "f",
            "location": 766,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_complex_debug.f_with_options": {
            "name": "f_with_options",
            "location": 772,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_complex_debug.g": {
            "name": "g",
            "location": 776,
            "return": [],
            "arguments": {
                "s": [],
                "s4": []
            }
        },
        "test_interface_debug.Weight.of_neutral": {
            "name": "of_neutral",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": [],
                "predicate": []
            }
        },
        "test_interface_debug.Weight.__lt__": {
            "name": "__lt__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_interface_debug.Weight.__add__": {
            "name": "__add__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_interface_debug.Weight.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interface_debug.Weighted.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_interface_debug.Weighted.weight": {
            "name": "weight",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_implementation_debug.f": {
            "name": "f",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_implementation_debug.g": {
            "name": "g",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_lazy_call_debug.f": {
            "name": "f",
            "location": 300,
            "return": [],
            "arguments": {
                "service": []
            }
        },
        "test_unknown_debug.Dummy.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "test_wiring_debug.DummyA.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "service": []
            }
        },
        "test_wiring_debug.DummyB.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "test_wiring_debug.DummyB.get": {
            "name": "get",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "test_wiring_debug.DummyC.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_wiring_debug.DummyC.get": {
            "name": "get",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "my_service": []
            }
        },
        "test_wiring_debug.DummyD.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_wiring_debug.DummyD.get": {
            "name": "get",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_multiline_debug.MultilineService.__antidote_debug_repr__": {
            "name": "__antidote_debug_repr__",
            "location": 448,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_multiline_debug.Dummy.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "test_lazy_method_debug.Conf.fetch": {
            "name": "fetch",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "service": []
            }
        },
        "test_const.CustomConf.custom": {
            "name": "custom",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": [],
                "test": []
            }
        },
        "test_custom_scope.BigService.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [],
            "arguments": {
                "self": [],
                "my_service": []
            }
        },
        "test_complex_debug.Service2.__init__": {
            "name": "__init__",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "service1": []
            }
        },
        "test_complex_debug.BuildS2.__call__": {
            "name": "__call__",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "service1": []
            }
        },
        "test_complex_debug.Service3.__init__": {
            "name": "__init__",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "service1": [],
                "service2": [],
                "i": []
            }
        },
        "test_complex_debug.Service3.get": {
            "name": "get",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "service1": []
            }
        },
        "test_complex_debug.Service4.__init__": {
            "name": "__init__",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "service1": [],
                "service2": [],
                "service3": []
            }
        },
        "test_constants_debug.Conf.provide_const": {
            "name": "provide_const",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arg": [],
                "service": []
            }
        }
    },
    "antidote-master/tests/world/test_override.py": {
        "test_singleton": {
            "name": "test_singleton",
            "location": 20,
            "return": [],
            "arguments": {
                "override": []
            }
        },
        "test_factory": {
            "name": "test_factory",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_factory_return_type": {
            "name": "test_factory_return_type",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_provider": {
            "name": "test_provider",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_scope_support": {
            "name": "test_scope_support",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_deep_clone": {
            "name": "test_deep_clone",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_debug": {
            "name": "test_debug",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_factory.f2": {
            "name": "f2",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_factory.f3": {
            "name": "f3",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_factory.f4": {
            "name": "f4",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_factory_return_type.build": {
            "name": "build",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_provider.f3": {
            "name": "f3",
            "location": 165,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "test_provider.f4": {
            "name": "f4",
            "location": 175,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "test_scope_support.build": {
            "name": "build",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_scope_support.provide": {
            "name": "provide",
            "location": 204,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "test_factory.f": {
            "name": "f",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_factory.g": {
            "name": "g",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_factory.f1": {
            "name": "f1",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_factory_return_type.build2": {
            "name": "build2",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_provider.f": {
            "name": "f",
            "location": 138,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "test_provider.f2": {
            "name": "f2",
            "location": 154,
            "return": [],
            "arguments": {
                "dependency": []
            }
        },
        "test_debug.f": {
            "name": "f",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "test_invalid.f": {
            "name": "f",
            "location": 270,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/world/test_scopes.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_new": {
            "name": "test_new",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_invalid_new_scope_name": {
            "name": "test_invalid_new_scope_name",
            "location": 27,
            "return": [],
            "arguments": {
                "expectation": [],
                "name": []
            }
        },
        "test_no_duplicate_scope": {
            "name": "test_no_duplicate_scope",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_invalid_reset": {
            "name": "test_invalid_reset",
            "location": 51,
            "return": [],
            "arguments": {
                "expectation": [],
                "scope": []
            }
        },
        "test_reset_unknown_scope": {
            "name": "test_reset_unknown_scope",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/world/test_test.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_world": {
            "name": "test_world",
            "location": 33,
            "return": [],
            "arguments": {
                "context": [],
                "keeps_singletons": [],
                "strategy": []
            }
        },
        "test_clone_keep_singletons": {
            "name": "test_clone_keep_singletons",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_clone_restrictions": {
            "name": "test_clone_restrictions",
            "location": 103,
            "return": [],
            "arguments": {
                "keep_singletons": [],
                "keep_scopes": []
            }
        },
        "test_deep_clone": {
            "name": "test_deep_clone",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_new": {
            "name": "test_new",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_provide_from": {
            "name": "test_provide_from",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_world.DummyFloatProvider.exists": {
            "name": "exists",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "test_world.DummyFloatProvider.provide": {
            "name": "provide",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        }
    },
    "antidote-master/tests/world/test_test_dependencies.py": {
        "empty_context": {
            "name": "empty_context",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_invalid_root_world": {
            "name": "test_invalid_root_world",
            "location": 19,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_invalid_singleton": {
            "name": "test_invalid_singleton",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_duplicate_singletons": {
            "name": "test_duplicate_singletons",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_factory": {
            "name": "test_factory",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_factory_from_annotation": {
            "name": "test_factory_from_annotation",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_factory_singleton": {
            "name": "test_factory_singleton",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_factory_no_scope": {
            "name": "test_factory_no_scope",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_factory_scope": {
            "name": "test_factory_scope",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory": {
            "name": "test_invalid_factory",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_factory.build": {
            "name": "build",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_factory_from_annotation.build": {
            "name": "build",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_factory_singleton.build": {
            "name": "build",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_factory_singleton.build2": {
            "name": "build2",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_factory_singleton.build3": {
            "name": "build3",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_factory_no_scope.build": {
            "name": "build",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_factory_scope.build": {
            "name": "build",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_invalid_root_world.build": {
            "name": "build",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_invalid_factory.build": {
            "name": "build",
            "location": 142,
            "return": [],
            "arguments": {}
        }
    },
    "antidote-master/tests/world/test_world.py": {
        "empty_world": {
            "name": "empty_world",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_get_type_safety": {
            "name": "test_get_type_safety",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_get_factory": {
            "name": "test_get_factory",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_annotation_support": {
            "name": "test_annotation_support",
            "location": 87,
            "return": [],
            "arguments": {
                "getter": []
            }
        },
        "test_lazy": {
            "name": "test_lazy",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_lazy_type_safety": {
            "name": "test_lazy_type_safety",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_lazy_factory": {
            "name": "test_lazy_factory",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_add_provider": {
            "name": "test_add_provider",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_no_duplicate_provider": {
            "name": "test_no_duplicate_provider",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_invalid_add_provider": {
            "name": "test_invalid_add_provider",
            "location": 175,
            "return": [],
            "arguments": {
                "p": [],
                "expectation": []
            }
        },
        "test_get_factory.build_a": {
            "name": "build_a",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_lazy_factory.build_a": {
            "name": "build_a",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_annotation_support.Maker.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "antidote-master/tests/world/utils.py": {
        "DummyIntProvider.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyIntProvider.exists": {
            "name": "exists",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": []
            }
        },
        "DummyIntProvider.provide": {
            "name": "provide",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [],
                "container": []
            }
        },
        "DummyIntProvider.clone": {
            "name": "clone",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "keep_singletons_cache": []
            }
        }
    },
    "antidote-master/tests/world/__init__.py": {}
}
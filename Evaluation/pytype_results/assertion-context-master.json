{
    "assertion-context-master/scripts/one-off-scripts/run-fullstory-link-getter.py": {
        "get_fullstory_link": {
            "name": "get_fullstory_link",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "profile_name": [
                    "str"
                ],
                "timestamp_string": [
                    "str"
                ]
            }
        }
    },
    "assertion-context-master/scripts/one-off-scripts/send_example_message_to_slack.py": {},
    "assertion-context-master/scripts/one-off-scripts/update_tracebacks_with_profile_name_parser.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/src/run_badcorp.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "assertion-context-master/src/server.py": {
        "index": {
            "name": "index",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "parse_s3": {
            "name": "parse_s3",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "parse_s3_day": {
            "name": "parse_s3_day",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "parse_s3_date_range": {
            "name": "parse_s3_date_range",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "realtime_update": {
            "name": "realtime_update",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "hide_traceback": {
            "name": "hide_traceback",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "restore_all_tracebacks": {
            "name": "restore_all_tracebacks",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "create_jira_ticket": {
            "name": "create_jira_ticket",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "jira_comment": {
            "name": "jira_comment",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "jira_formatted_list": {
            "name": "jira_formatted_list",
            "location": 325,
            "return": [],
            "arguments": {
                "traceback_origin_id": []
            }
        },
        "slack_callback": {
            "name": "slack_callback",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "update_jira_db": {
            "name": "update_jira_db",
            "location": 420,
            "return": [],
            "arguments": {}
        },
        "invalidate_cache": {
            "name": "invalidate_cache",
            "location": 452,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "purge_celery_queue": {
            "name": "purge_celery_queue",
            "location": 461,
            "return": [],
            "arguments": {}
        },
        "admin": {
            "name": "admin",
            "location": 469,
            "return": [],
            "arguments": {}
        },
        "before_first_request": {
            "name": "before_first_request",
            "location": 492,
            "return": [],
            "arguments": {}
        },
        "start_request": {
            "name": "start_request",
            "location": 498,
            "return": [],
            "arguments": {}
        },
        "after_request": {
            "name": "after_request",
            "location": 531,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "exceptions": {
            "name": "exceptions",
            "location": 558,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "assertion-context-master/src/tasks.py": {
        "update_jira_issue": {
            "name": "update_jira_issue",
            "location": 52,
            "return": [],
            "arguments": {
                "issue_key": [],
                "do_invalidate_cache": []
            }
        },
        "update_all_jira_issues": {
            "name": "update_all_jira_issues",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "parse_log_file": {
            "name": "parse_log_file",
            "location": 89,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        },
        "realtime_update": {
            "name": "realtime_update",
            "location": 118,
            "return": [],
            "arguments": {
                "start_time": [],
                "end_time": []
            }
        },
        "hydrate_cache": {
            "name": "hydrate_cache",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "post_unticketed_tracebacks_to_slack": {
            "name": "post_unticketed_tracebacks_to_slack",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "create_jira_ticket": {
            "name": "create_jira_ticket",
            "location": 169,
            "return": [],
            "arguments": {
                "origin_papertrail_id": [],
                "assign_to": []
            }
        },
        "create_comment_on_existing_ticket": {
            "name": "create_comment_on_existing_ticket",
            "location": 179,
            "return": [],
            "arguments": {
                "selected_ticket_key": [],
                "origin_papertrail_id": []
            }
        },
        "tell_slack_about_new_jira_ticket": {
            "name": "tell_slack_about_new_jira_ticket",
            "location": 187,
            "return": [],
            "arguments": {
                "channel": [],
                "ticket_id": []
            }
        },
        "tell_slack_about_updated_jira_ticket": {
            "name": "tell_slack_about_updated_jira_ticket",
            "location": 193,
            "return": [],
            "arguments": {
                "channel": [],
                "ticket_id": []
            }
        },
        "tell_slack_about_error": {
            "name": "tell_slack_about_error",
            "location": 199,
            "return": [],
            "arguments": {
                "channel": [],
                "error": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 205,
            "return": [],
            "arguments": {}
        }
    },
    "assertion-context-master/src/badcorp/main.py": {
        "generate_assertions": {
            "name": "generate_assertions",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/src/badcorp/util/setup_logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": []
            }
        }
    },
    "assertion-context-master/src/common_util/config_util.py": {
        "get": {
            "name": "get",
            "location": 11,
            "return": [
                "Union[(float, int, str)]"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "assertion-context-master/src/common_util/elasticsearch_config.py": {
        "get_db": {
            "name": "get_db",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/src/common_util/es_util.py": {
        "generate_text_match_payload": {
            "name": "generate_text_match_payload",
            "location": 8,
            "return": [
                "Dict[(str, Dict[(str, Dict[(str, Union[(str, _T0, _T1)])])])]"
            ],
            "arguments": {
                "text": [
                    "_T0"
                ],
                "fields_to_match_against": [
                    "_T1"
                ],
                "match_level": []
            }
        }
    },
    "assertion-context-master/src/common_util/logging_util.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/src/common_util/parser_util.py": {
        "ParserUtil.parse_papertrail_log_line": {
            "name": "parse_papertrail_log_line",
            "location": 19,
            "return": [
                "Tuple[(Any, datetime.datetime, Any, Any, Any, str)]"
            ],
            "arguments": {
                "raw_log_line": []
            }
        }
    },
    "assertion-context-master/src/common_util/redis_util.py": {
        "make_dogpile_region": {
            "name": "make_dogpile_region",
            "location": 16,
            "return": [],
            "arguments": {
                "dogpile_region_prefix": []
            }
        },
        "force_redis_cache_invalidation": {
            "name": "force_redis_cache_invalidation",
            "location": 46,
            "return": [],
            "arguments": {
                "key_prefix": []
            }
        }
    },
    "assertion-context-master/src/common_util/retry.py": {
        "Retry.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries": [],
                "exceptions": [],
                "sleep_seconds": [],
                "debug": []
            }
        },
        "Retry.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Retry.__enter__": {
            "name": "__enter__",
            "location": 108,
            "return": [
                "_TRetry"
            ],
            "arguments": {
                "self": [
                    "_TRetry"
                ]
            }
        },
        "Retry.__exit__": {
            "name": "__exit__",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.execute": {
            "name": "execute",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Retry.__call__.retry_func": {
            "name": "retry_func",
            "location": 103,
            "return": [],
            "arguments": {}
        }
    },
    "assertion-context-master/src/common_util/time_util.py": {
        "round_time": {
            "name": "round_time",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": [],
                "date_delta": [],
                "to": []
            }
        }
    },
    "assertion-context-master/src/common_util/__init__.py": {},
    "assertion-context-master/src/lib/api_call/api_call.py": {
        "ApiCall.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [],
                "papertrail_id": [],
                "instance_id": [],
                "program_name": [],
                "api_name": [],
                "profile_name": [],
                "username": [],
                "method": [],
                "duration": [],
                "memory_final": [],
                "memory_delta": []
            }
        },
        "ApiCall.document": {
            "name": "document",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.generate_from_source": {
            "name": "generate_from_source",
            "location": 77,
            "return": [
                "ApiCall"
            ],
            "arguments": {
                "source": []
            }
        },
        "ApiCall.timestamp": {
            "name": "timestamp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.papertrail_id": {
            "name": "papertrail_id",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.instance_id": {
            "name": "instance_id",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.program_name": {
            "name": "program_name",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.api_name": {
            "name": "api_name",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.profile_name": {
            "name": "profile_name",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.username": {
            "name": "username",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.method": {
            "name": "method",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.duration": {
            "name": "duration",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.memory_final": {
            "name": "memory_final",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiCall.memory_delta": {
            "name": "memory_delta",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/api_call/api_call_db.py": {
        "save": {
            "name": "save",
            "location": 28,
            "return": [],
            "arguments": {
                "es": [],
                "api_calls": []
            }
        },
        "_create_documents": {
            "name": "_create_documents",
            "location": 39,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "api_calls": []
            }
        }
    },
    "assertion-context-master/src/lib/api_call/api_call_parser.py": {
        "ApiCallParser.parse_stream": {
            "name": "parse_stream",
            "location": 42,
            "return": [
                "Generator[(lib.api_call.api_call.ApiCall, Any, None)]"
            ],
            "arguments": {
                "file_object": []
            }
        },
        "ApiCallParser.__log_line_contains_api_call_with_timing": {
            "name": "__log_line_contains_api_call_with_timing",
            "location": 58,
            "return": [],
            "arguments": {
                "log_line": []
            }
        },
        "ApiCallParser.__generate_ApiCall": {
            "name": "__generate_ApiCall",
            "location": 74,
            "return": [],
            "arguments": {
                "log_line": []
            }
        }
    },
    "assertion-context-master/src/lib/api_call/test_api_call_parser.py": {
        "TestApiCallParser.test_that_we_get_expected_api_calls": {
            "name": "test_that_we_get_expected_api_calls",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiCallParser.test_that_we_do_not_see_unexpected_api_calls": {
            "name": "test_that_we_do_not_see_unexpected_api_calls",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiCallParser.test_dummy_api_call": {
            "name": "test_dummy_api_call",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/common/cache_util.py": {
        "invalidate_cache": {
            "name": "invalidate_cache",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "cache": [
                    "Optional[str]"
                ]
            }
        }
    },
    "assertion-context-master/src/lib/fullstory/fullstory.py": {
        "invalidate_cache": {
            "name": "invalidate_cache",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_link_to_session_at_traceback_time": {
            "name": "get_link_to_session_at_traceback_time",
            "location": 49,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "lib.traceback.traceback.Traceback"
                ]
            }
        },
        "__get_sessions": {
            "name": "__get_sessions",
            "location": 91,
            "return": [],
            "arguments": {
                "profile_name": []
            }
        }
    },
    "assertion-context-master/src/lib/jira/jira_issue.py": {
        "generate_from_source": {
            "name": "generate_from_source",
            "location": 133,
            "return": [
                "JiraIssue"
            ],
            "arguments": {
                "source": [
                    "dict"
                ]
            }
        },
        "JiraIssue.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "url": [],
                "summary": [],
                "description": [],
                "description_filtered": [],
                "comments": [],
                "comments_filtered": [],
                "issue_type": [],
                "assignee": [],
                "status": [],
                "created": [],
                "updated": [],
                "labels": []
            }
        },
        "JiraIssue.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.key": {
            "name": "key",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.url": {
            "name": "url",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.summary": {
            "name": "summary",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.description": {
            "name": "description",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.description_filtered": {
            "name": "description_filtered",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.comments": {
            "name": "comments",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.comments_filtered": {
            "name": "comments_filtered",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.issue_type": {
            "name": "issue_type",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.assignee": {
            "name": "assignee",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.status": {
            "name": "status",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.created": {
            "name": "created",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.updated": {
            "name": "updated",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.labels": {
            "name": "labels",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.document": {
            "name": "document",
            "location": 110,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/jira/jira_issue_aservice.py": {
        "JiraClient": {
            "name": "JiraClient",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "create_title": {
            "name": "create_title",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "traceback_text": []
            }
        },
        "create_description": {
            "name": "create_description",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "similar_tracebacks": []
            }
        },
        "create_comment_with_hits_list": {
            "name": "create_comment_with_hits_list",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "tracebacks": []
            }
        },
        "create_comment": {
            "name": "create_comment",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "issue": [],
                "comment_string": []
            }
        },
        "create_jira_issue": {
            "name": "create_jira_issue",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "description": [
                    "str"
                ],
                "assign_to": [
                    "AssignToTeam"
                ]
            }
        },
        "get_issue": {
            "name": "get_issue",
            "location": 218,
            "return": [
                "Optional[lib.jira.jira_issue.JiraIssue]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_all_issues": {
            "name": "get_all_issues",
            "location": 234,
            "return": [
                "Iterator"
            ],
            "arguments": {}
        },
        "search_matching_jira_tickets": {
            "name": "search_matching_jira_tickets",
            "location": 265,
            "return": [
                "Iterator[dict]"
            ],
            "arguments": {
                "ES": [],
                "search_phrase": [
                    "str"
                ]
            }
        },
        "get_link_to_issue": {
            "name": "get_link_to_issue",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "issue_key": [
                    "str"
                ]
            }
        },
        "jira_api_object_to_JiraIssue": {
            "name": "jira_api_object_to_JiraIssue",
            "location": 292,
            "return": [
                "lib.jira.jira_issue.JiraIssue"
            ],
            "arguments": {
                "jira_object": []
            }
        },
        "get_all_referenced_ids": {
            "name": "get_all_referenced_ids",
            "location": 335,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "issue": [
                    "lib.jira.jira_issue.JiraIssue"
                ]
            }
        },
        "find_latest_referenced_id": {
            "name": "find_latest_referenced_id",
            "location": 358,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "issue": [
                    "lib.jira.jira_issue.JiraIssue"
                ]
            }
        },
        "__strip_papertrail_metadata": {
            "name": "__strip_papertrail_metadata",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AssignToTeam.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_name": []
            }
        },
        "AssignToTeam.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignToTeam.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "assertion-context-master/src/lib/jira/jira_issue_db.py": {
        "invalidate_cache": {
            "name": "invalidate_cache",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_jira_issue": {
            "name": "save_jira_issue",
            "location": 38,
            "return": [],
            "arguments": {
                "es": [],
                "jira_issue": []
            }
        },
        "remove_jira_issue": {
            "name": "remove_jira_issue",
            "location": 61,
            "return": [],
            "arguments": {
                "es": [],
                "issue_key": []
            }
        },
        "refresh": {
            "name": "refresh",
            "location": 81,
            "return": [],
            "arguments": {
                "es": []
            }
        },
        "get_matching_jira_issues": {
            "name": "get_matching_jira_issues",
            "location": 92,
            "return": [],
            "arguments": {
                "es": [],
                "tracer": [],
                "traceback_text": [],
                "match_level": []
            }
        },
        "search_jira_issues": {
            "name": "search_jira_issues",
            "location": 134,
            "return": [
                "List[lib.jira.jira_issue.JiraIssue]"
            ],
            "arguments": {
                "es": [],
                "search_phrase": [
                    "str"
                ],
                "max_count": [
                    "int"
                ]
            }
        },
        "get_num_jira_issues": {
            "name": "get_num_jira_issues",
            "location": 162,
            "return": [],
            "arguments": {
                "es": []
            }
        }
    },
    "assertion-context-master/src/lib/jira/jira_issue_db_integration_test.py": {
        "test_refresh": {
            "name": "test_refresh",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/src/lib/logparse/logline.py": {
        "generate_logline_from_source": {
            "name": "generate_logline_from_source",
            "location": 104,
            "return": [
                "LogLine"
            ],
            "arguments": {
                "source": []
            }
        },
        "LogLine.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_log_message": [],
                "raw_log_message": [],
                "timestamp": [],
                "papertrail_id": [],
                "origin_papertrail_id": [],
                "line_number": [],
                "instance_id": [],
                "program_name": []
            }
        },
        "LogLine.document": {
            "name": "document",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogLine.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogLine.parsed_log_message": {
            "name": "parsed_log_message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.raw_log_message": {
            "name": "raw_log_message",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.timestamp": {
            "name": "timestamp",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.papertrail_id": {
            "name": "papertrail_id",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.origin_papertrail_id": {
            "name": "origin_papertrail_id",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.line_number": {
            "name": "line_number",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.instance_id": {
            "name": "instance_id",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogLine.program_name": {
            "name": "program_name",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/logparse/profile_name_parser.py": {
        "parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "Optional[lib.traceback.traceback.Traceback]"
            ],
            "arguments": {
                "traceback": [
                    "lib.traceback.traceback.Traceback"
                ]
            }
        },
        "__strip_traceback_text": {
            "name": "__strip_traceback_text",
            "location": 125,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "log_lines": [
                    "List[str]"
                ]
            }
        },
        "__find_first_error_line": {
            "name": "__find_first_error_line",
            "location": 136,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "log_lines": [
                    "List[str]"
                ]
            }
        }
    },
    "assertion-context-master/src/lib/papertrail/file_parser.py": {
        "parse_gzipped_file": {
            "name": "parse_gzipped_file",
            "location": 7,
            "return": [
                "Tuple[(List[lib.traceback.traceback.Traceback], List[lib.api_call.api_call.ApiCall])]"
            ],
            "arguments": {
                "zipped_filename": []
            }
        }
    },
    "assertion-context-master/src/lib/papertrail/json_parser.py": {
        "parse_json_file": {
            "name": "parse_json_file",
            "location": 11,
            "return": [
                "Tuple[(List[lib.traceback.traceback.Traceback], List[lib.api_call.api_call.ApiCall])]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "yield_lines": {
            "name": "yield_lines",
            "location": 42,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "f": []
            }
        }
    },
    "assertion-context-master/src/lib/papertrail/realtime_updater.py": {
        "enqueue": {
            "name": "enqueue",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "end_time": []
            }
        },
        "run": {
            "name": "run",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ES": [],
                "start_time": [],
                "end_time": []
            }
        },
        "__call_papertrail_cli": {
            "name": "__call_papertrail_cli",
            "location": 73,
            "return": [
                "Optional[tempfile._TemporaryFileWrapper[bytes]]"
            ],
            "arguments": {
                "start_time": [],
                "end_time": []
            }
        },
        "__get_times": {
            "name": "__get_times",
            "location": 96,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "end_time": []
            }
        }
    },
    "assertion-context-master/src/lib/parser/s3.py": {
        "parse_s3_file": {
            "name": "parse_s3_file",
            "location": 25,
            "return": [],
            "arguments": {
                "bucket": [],
                "key": []
            }
        }
    },
    "assertion-context-master/src/lib/slack/slack_channel.py": {
        "get_webhook_url": {
            "name": "get_webhook_url",
            "location": 15,
            "return": [
                "Union[(float, int, str)]"
            ],
            "arguments": {
                "traceback": [
                    "lib.traceback.traceback.Traceback"
                ]
            }
        },
        "get_channel_name": {
            "name": "get_channel_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "traceback": [
                    "lib.traceback.traceback.Traceback"
                ]
            }
        }
    },
    "assertion-context-master/src/lib/slack/slack_poster.py": {
        "post_traceback": {
            "name": "post_traceback",
            "location": 54,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "traceback": [],
                "similar_tracebacks": [
                    "List[lib.traceback.traceback.Traceback]"
                ],
                "jira_issues": [
                    "List[lib.jira.jira_issue.JiraIssue]"
                ]
            }
        },
        "__send_message_to_slack": {
            "name": "__send_message_to_slack",
            "location": 146,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "slack_data": [
                    "dict"
                ],
                "webhook_url": [
                    "str"
                ]
            }
        },
        "post_message_to_slack_as_real_user": {
            "name": "post_message_to_slack_as_real_user",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "assertion-context-master/src/lib/traceback/parser.py": {
        "Parser.parse_stream": {
            "name": "parse_stream",
            "location": 77,
            "return": [
                "Generator[(lib.traceback.traceback.Traceback, Any, None)]"
            ],
            "arguments": {
                "file_object": []
            }
        },
        "Parser.__generate_LogLine": {
            "name": "__generate_LogLine",
            "location": 118,
            "return": [],
            "arguments": {
                "raw_log_line": [],
                "origin_papertrail_id": [],
                "line_number": []
            }
        },
        "Parser.__generate_Traceback": {
            "name": "__generate_Traceback",
            "location": 146,
            "return": [],
            "arguments": {
                "origin_logline": [],
                "previous_loglines": []
            }
        },
        "Parser.__get_last_traceback_text": {
            "name": "__get_last_traceback_text",
            "location": 183,
            "return": [],
            "arguments": {
                "parsed_log_text": []
            }
        },
        "Parser.__get_last_traceback_text_raw": {
            "name": "__get_last_traceback_text_raw",
            "location": 209,
            "return": [],
            "arguments": {
                "raw_log_text": []
            }
        },
        "Parser.__get_previous_log_lines": {
            "name": "__get_previous_log_lines",
            "location": 238,
            "return": [],
            "arguments": {
                "circular_buffer": [],
                "origin_line": []
            }
        },
        "Parser.log_line_contains_important_error": {
            "name": "log_line_contains_important_error",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "log_line": []
            }
        }
    },
    "assertion-context-master/src/lib/traceback/test_assertion_regex.py": {
        "TestAssertionRegex.test_lines_that_should_match": {
            "name": "test_lines_that_should_match",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssertionRegex.test_lines_that_should_not_match": {
            "name": "test_lines_that_should_not_match",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/traceback/traceback.py": {
        "generate_traceback_from_source": {
            "name": "generate_traceback_from_source",
            "location": 147,
            "return": [
                "Traceback"
            ],
            "arguments": {
                "source": [
                    "dict"
                ]
            }
        },
        "Traceback.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traceback_text": [],
                "traceback_plus_context_text": [],
                "raw_traceback_text": [],
                "raw_full_text": [],
                "origin_papertrail_id": [],
                "origin_timestamp": [],
                "instance_id": [],
                "program_name": [],
                "profile_name": [],
                "username": []
            }
        },
        "Traceback.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Traceback.traceback_text": {
            "name": "traceback_text",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.traceback_plus_context_text": {
            "name": "traceback_plus_context_text",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.raw_traceback_text": {
            "name": "raw_traceback_text",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.raw_full_text": {
            "name": "raw_full_text",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.origin_papertrail_id": {
            "name": "origin_papertrail_id",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.origin_timestamp": {
            "name": "origin_timestamp",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.instance_id": {
            "name": "instance_id",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.program_name": {
            "name": "program_name",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Traceback.profile_name": {
            "name": "profile_name",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Traceback.username": {
            "name": "username",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Traceback.document": {
            "name": "document",
            "location": 127,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assertion-context-master/src/lib/traceback/traceback_db.py": {
        "invalidate_cache": {
            "name": "invalidate_cache",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_traceback": {
            "name": "save_traceback",
            "location": 34,
            "return": [],
            "arguments": {
                "es": [],
                "traceback": []
            }
        },
        "refresh": {
            "name": "refresh",
            "location": 55,
            "return": [],
            "arguments": {
                "es": []
            }
        },
        "get_tracebacks": {
            "name": "get_tracebacks",
            "location": 66,
            "return": [],
            "arguments": {
                "es": [],
                "tracer": [],
                "start_date": [],
                "end_date": [],
                "num_matches": []
            }
        },
        "get_matching_tracebacks": {
            "name": "get_matching_tracebacks",
            "location": 127,
            "return": [],
            "arguments": {
                "es": [],
                "tracer": [],
                "traceback_text": [],
                "match_level": [],
                "num_matches": []
            }
        },
        "get_traceback": {
            "name": "get_traceback",
            "location": 160,
            "return": [
                "lib.traceback.traceback.Traceback"
            ],
            "arguments": {
                "es": [],
                "id_": [
                    "int"
                ]
            }
        }
    },
    "assertion-context-master/src/lib/traceback/traceback_formatter.py": {
        "jira_formatted_string": {
            "name": "jira_formatted_string",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "lib.traceback.traceback.Traceback"
                ],
                "include_profile_link": [
                    "bool"
                ],
                "include_user_link": [
                    "bool"
                ]
            }
        },
        "slack_formatted_string": {
            "name": "slack_formatted_string",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "lib.traceback.traceback.Traceback"
                ],
                "include_profile_link": [
                    "bool"
                ],
                "include_user_link": [
                    "bool"
                ]
            }
        },
        "create_hits_list": {
            "name": "create_hits_list",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "tracebacks": [],
                "formatter": [
                    "Callable"
                ],
                "max_number_hits": [
                    "Optional[int]"
                ]
            }
        }
    },
    "assertion-context-master/src/webapp/api_aservice.py": {
        "get_tracebacks_for_day": {
            "name": "get_tracebacks_for_day",
            "location": 55,
            "return": [
                "List[TracebackPlusMetadata]"
            ],
            "arguments": {
                "ES": [],
                "tracer": [],
                "date_to_analyze": [
                    "datetime.date"
                ],
                "filter_text": [
                    "str"
                ],
                "hidden_traceback_ids": [
                    "set"
                ]
            }
        },
        "render_main_page": {
            "name": "render_main_page",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "ES": [],
                "tracer": [],
                "days_ago": [
                    "int"
                ],
                "filter_text": [
                    "str"
                ],
                "hidden_traceback_ids": [
                    "set"
                ]
            }
        },
        "__user_has_hidden_tracebacks": {
            "name": "__user_has_hidden_tracebacks",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "parse_s3_for_date": {
            "name": "parse_s3_for_date",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "date_": [],
                "bucket": [],
                "key_prefix": []
            }
        },
        "create_ticket": {
            "name": "create_ticket",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "ES": [],
                "origin_papertrail_id": [
                    "int"
                ],
                "assign_to": [
                    "Optional[str]"
                ],
                "reject_if_ticket_exists": [
                    "bool"
                ]
            }
        },
        "create_comment_on_existing_ticket": {
            "name": "create_comment_on_existing_ticket",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "ES": [],
                "existing_jira_issue_key": [
                    "str"
                ],
                "origin_papertrail_id": [
                    "int"
                ]
            }
        },
        "TracebackPlusMetadata.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traceback": []
            }
        }
    },
    "assertion-context-master/src/webapp/healthz.py": {
        "add_healthcheck_endpoint": {
            "name": "add_healthcheck_endpoint",
            "location": 7,
            "return": [],
            "arguments": {
                "app": [],
                "ES": [],
                "REDIS": []
            }
        },
        "add_healthcheck_endpoint.elasticsearch_available": {
            "name": "elasticsearch_available",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "add_healthcheck_endpoint.redis_available": {
            "name": "redis_available",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "assertion-context-master/src/webapp/text_keys.py": {},
    "assertion-context-master/src/webapp/tracing.py": {
        "initialize_tracer": {
            "name": "initialize_tracer",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "assertion-context-master/tests/run_end_to_end_tests.py": {
        "test_papertrail_to_elasticsearch_integration": {
            "name": "test_papertrail_to_elasticsearch_integration",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_server_daemon": []
            }
        },
        "setup_server_daemon": {
            "name": "setup_server_daemon",
            "location": 47,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "setup_server_daemon.check_server_is_running": {
            "name": "check_server_is_running",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "setup_server_daemon.teardown_server_daemon": {
            "name": "teardown_server_daemon",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    }
}
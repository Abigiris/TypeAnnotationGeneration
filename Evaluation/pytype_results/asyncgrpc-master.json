{
    "asyncgrpc-master/setup.py": {},
    "asyncgrpc-master/asyncgrpc/_channel.py": {
        "parse_address": {
            "name": "parse_address",
            "location": 18,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "address": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Channel.close": {
            "name": "close",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.protocol_factory": {
            "name": "protocol_factory",
            "location": 36,
            "return": [
                "asyncgrpc._protocol.GrpcProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel._multi_callable": {
            "name": "_multi_callable",
            "location": 39,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "meta": []
            }
        },
        "Channel.subscribe": {
            "name": "subscribe",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "callback": [],
                "try_to_connect": []
            }
        },
        "Channel.unsubscribe": {
            "name": "unsubscribe",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Channel.unary_unary": {
            "name": "unary_unary",
            "location": 60,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "request_serializer": [],
                "response_deserializer": []
            }
        },
        "Channel.unary_stream": {
            "name": "unary_stream",
            "location": 68,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "request_serializer": [],
                "response_deserializer": []
            }
        },
        "Channel.stream_unary": {
            "name": "stream_unary",
            "location": 76,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "request_serializer": [],
                "response_deserializer": []
            }
        },
        "Channel.stream_stream": {
            "name": "stream_stream",
            "location": 84,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "request_serializer": [],
                "response_deserializer": []
            }
        }
    },
    "asyncgrpc-master/asyncgrpc/_protocol.py": {
        "_handle_call": {
            "name": "_handle_call",
            "location": 20,
            "return": [
                "Optional[asyncio.tasks.Task[None]]"
            ],
            "arguments": {
                "stream": [],
                "method_finder": []
            }
        },
        "_send_request_stream": {
            "name": "_send_request_stream",
            "location": 352,
            "return": [
                "Optional[asyncio.tasks.Task[None]]"
            ],
            "arguments": {
                "stream": [],
                "call_meta": [],
                "call_request": []
            }
        },
        "_invoke_call": {
            "name": "_invoke_call",
            "location": 378,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "stream": [],
                "authority": [],
                "call_meta": [],
                "call_request": []
            }
        },
        "GrpcStream.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [],
                "h2conn": [],
                "stream_id": [],
                "call_meta": [],
                "method_finder": [],
                "headers": []
            }
        },
        "GrpcStream.send_data": {
            "name": "send_data",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "end_stream": []
            }
        },
        "GrpcStream.send_header": {
            "name": "send_header",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "List[tuple]"
                ],
                "end_stream": []
            }
        },
        "GrpcStream.end_stream": {
            "name": "end_stream",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_message_data": {
            "name": "send_message_data",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "serializer": [],
                "end_stream": []
            }
        },
        "GrpcStream.send_request_headers": {
            "name": "send_request_headers",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authority": [],
                "rpc_method": []
            }
        },
        "GrpcStream.send_response_headers": {
            "name": "send_response_headers",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_response_trailers": {
            "name": "send_response_trailers",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "message": []
            }
        },
        "GrpcStream.send_trailers_content_type_missing": {
            "name": "send_trailers_content_type_missing",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_trailers_content_type_unknow": {
            "name": "send_trailers_content_type_unknow",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_trailers_unknown": {
            "name": "send_trailers_unknown",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_trailers_unimplemented": {
            "name": "send_trailers_unimplemented",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.send_trailers_resource_exhausted": {
            "name": "send_trailers_resource_exhausted",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.start_rpc_task": {
            "name": "start_rpc_task",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcStream.invoke_rpc_call": {
            "name": "invoke_rpc_call",
            "location": 221,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "self": [],
                "authority": [],
                "call_meta": [],
                "call_request": []
            }
        },
        "GrpcStream.cancel_rpc_task": {
            "name": "cancel_rpc_task",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpcProtocol.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_side": [],
                "method_finder": []
            }
        },
        "GrpcProtocol.connection_made": {
            "name": "connection_made",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "GrpcProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "GrpcProtocol.data_received": {
            "name": "data_received",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GrpcProtocol.request_received": {
            "name": "request_received",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ],
                "headers": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "GrpcProtocol.response_received": {
            "name": "response_received",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ],
                "headers": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "GrpcProtocol.trailers_received": {
            "name": "trailers_received",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ],
                "headers": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "GrpcProtocol.stream_data_received": {
            "name": "stream_data_received",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "GrpcProtocol.stream_ended": {
            "name": "stream_ended",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ]
            }
        },
        "GrpcProtocol.stream_reset": {
            "name": "stream_reset",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [
                    "int"
                ]
            }
        },
        "GrpcProtocol.invoke_rpc_call": {
            "name": "invoke_rpc_call",
            "location": 340,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "authority": [],
                "call_meta": [],
                "call_request": []
            }
        },
        "GrpcProtocol.close": {
            "name": "close",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "asyncgrpc-master/asyncgrpc/_server.py": {
        "parse_address": {
            "name": "parse_address",
            "location": 10,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "address": []
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interceptors": []
            }
        },
        "Server.add_generic_rpc_handlers": {
            "name": "add_generic_rpc_handlers",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic_rpc_handlers": []
            }
        },
        "Server.add_insecure_port": {
            "name": "add_insecure_port",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "Server.add_secure_port": {
            "name": "add_secure_port",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "certfile": [],
                "keyfile": []
            }
        },
        "Server.start": {
            "name": "start",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.stop": {
            "name": "stop",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grace": []
            }
        },
        "Server.__del__": {
            "name": "__del__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.protocol_factory": {
            "name": "protocol_factory",
            "location": 64,
            "return": [
                "asyncgrpc._protocol.GrpcProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.find_method_handler": {
            "name": "find_method_handler",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "rpc_method": []
            }
        },
        "Server.find_method_handler.query_handlers": {
            "name": "query_handlers",
            "location": 69,
            "return": [],
            "arguments": {
                "handler_call_details": []
            }
        }
    },
    "asyncgrpc-master/asyncgrpc/__init__.py": {},
    "asyncgrpc-master/test/test_client_aio.py": {
        "generate_messages": {
            "name": "generate_messages",
            "location": 20,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncgrpc-master/test/test_client_io.py": {
        "generate_messages": {
            "name": "generate_messages",
            "location": 10,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "asyncgrpc-master/test/test_server_aio.py": {
        "get_feature": {
            "name": "get_feature",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "feature_db": [],
                "point": []
            }
        },
        "get_distance": {
            "name": "get_distance",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "start": [],
                "end": []
            }
        },
        "read_route_guide_database": {
            "name": "read_route_guide_database",
            "location": 104,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "serve": {
            "name": "serve",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RouteGuideServicer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "asyncgrpc-master/test/test_server_io.py": {
        "get_feature": {
            "name": "get_feature",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "feature_db": [],
                "point": []
            }
        },
        "get_distance": {
            "name": "get_distance",
            "location": 22,
            "return": [
                "float"
            ],
            "arguments": {
                "start": [],
                "end": []
            }
        },
        "read_route_guide_database": {
            "name": "read_route_guide_database",
            "location": 100,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "serve": {
            "name": "serve",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "RouteGuideServicer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteGuideServicer.GetFeature": {
            "name": "GetFeature",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "RouteGuideServicer.ListFeatures": {
            "name": "ListFeatures",
            "location": 57,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "RouteGuideServicer.RecordRoute": {
            "name": "RecordRoute",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "RouteGuideServicer.RouteChat": {
            "name": "RouteChat",
            "location": 91,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        }
    },
    "asyncgrpc-master/test/protos/route_guide_pb2.py": {},
    "asyncgrpc-master/test/protos/route_guide_pb2_grpc.py": {
        "add_RouteGuideServicer_to_server": {
            "name": "add_RouteGuideServicer_to_server",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "RouteGuideStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "RouteGuideServicer.GetFeature": {
            "name": "GetFeature",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "RouteGuideServicer.ListFeatures": {
            "name": "ListFeatures",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "RouteGuideServicer.RecordRoute": {
            "name": "RecordRoute",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "RouteGuideServicer.RouteChat": {
            "name": "RouteChat",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        }
    }
}
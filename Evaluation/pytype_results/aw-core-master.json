{
    "aw-core-master/aw_cli/log.py": {
        "print_log": {
            "name": "print_log",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "since": [
                    "_datetime.datetime"
                ],
                "level": [
                    "str"
                ]
            }
        },
        "find_oldest_log": {
            "name": "find_oldest_log",
            "location": 39,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "testing": []
            }
        }
    },
    "aw-core-master/aw_cli/__main__.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {
                "testing": []
            }
        },
        "qt": {
            "name": "qt",
            "location": 23,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "directories": {
            "name": "directories",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "logs": {
            "name": "logs",
            "location": 54,
            "return": [],
            "arguments": {
                "ctx": [],
                "module_name": [],
                "since": [],
                "level": []
            }
        },
        "print_oldest_log": {
            "name": "print_oldest_log",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "testing": [],
                "since": [],
                "level": []
            }
        }
    },
    "aw-core-master/aw_core/config.py": {
        "_merge": {
            "name": "_merge",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "a": [
                    "dict"
                ],
                "b": [
                    "dict"
                ],
                "path": []
            }
        },
        "_comment_out_toml": {
            "name": "_comment_out_toml",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "load_config_toml": {
            "name": "load_config_toml",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "appname": [
                    "str"
                ],
                "default_config": [
                    "str"
                ]
            }
        },
        "save_config_toml": {
            "name": "save_config_toml",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "appname": [
                    "str"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 81,
            "return": [],
            "arguments": {
                "appname": [],
                "default_config": []
            }
        },
        "save_config": {
            "name": "save_config",
            "location": 107,
            "return": [],
            "arguments": {
                "appname": [],
                "config": []
            }
        }
    },
    "aw-core-master/aw_core/decorators.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 7,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "restart_on_exception": {
            "name": "restart_on_exception",
            "location": 38,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [],
                "delay": [],
                "exception": []
            }
        },
        "deprecated.g": {
            "name": "g",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "restart_on_exception.g": {
            "name": "g",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "aw-core-master/aw_core/dirs.py": {
        "ensure_path_exists": {
            "name": "ensure_path_exists",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_ensure_returned_path_exists": {
            "name": "_ensure_returned_path_exists",
            "location": 15,
            "return": [
                "Callable[([Optional[str]], str)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([Optional[str]], str)]"
                ]
            }
        },
        "get_data_dir": {
            "name": "get_data_dir",
            "location": 26,
            "return": [],
            "arguments": {
                "module_name": []
            }
        },
        "get_cache_dir": {
            "name": "get_cache_dir",
            "location": 32,
            "return": [],
            "arguments": {
                "module_name": []
            }
        },
        "get_config_dir": {
            "name": "get_config_dir",
            "location": 38,
            "return": [],
            "arguments": {
                "module_name": []
            }
        },
        "get_log_dir": {
            "name": "get_log_dir",
            "location": 44,
            "return": [],
            "arguments": {
                "module_name": []
            }
        },
        "_ensure_returned_path_exists.wrapper": {
            "name": "wrapper",
            "location": 17,
            "return": [],
            "arguments": {
                "subpath": []
            }
        }
    },
    "aw-core-master/aw_core/log.py": {
        "get_log_file_path": {
            "name": "get_log_file_path",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "testing": [],
                "verbose": [],
                "log_stderr": [],
                "log_file": [],
                "log_file_json": []
            }
        },
        "_get_latest_log_files": {
            "name": "_get_latest_log_files",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "name": [],
                "testing": []
            }
        },
        "get_latest_log_file": {
            "name": "get_latest_log_file",
            "location": 72,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "name": [],
                "testing": []
            }
        },
        "_create_stderr_handler": {
            "name": "_create_stderr_handler",
            "location": 81,
            "return": [
                "logging.Handler"
            ],
            "arguments": {}
        },
        "_create_file_handler": {
            "name": "_create_file_handler",
            "location": 88,
            "return": [
                "logging.Handler"
            ],
            "arguments": {
                "name": [],
                "testing": [],
                "log_json": []
            }
        },
        "_create_human_formatter": {
            "name": "_create_human_formatter",
            "location": 112,
            "return": [
                "logging.Formatter"
            ],
            "arguments": {}
        },
        "_create_json_formatter": {
            "name": "_create_json_formatter",
            "location": 119,
            "return": [
                "logging.Formatter"
            ],
            "arguments": {}
        },
        "setup_logging.excepthook": {
            "name": "excepthook",
            "location": 50,
            "return": [],
            "arguments": {
                "type_": [],
                "value": [],
                "traceback": []
            }
        },
        "_create_json_formatter.log_format": {
            "name": "log_format",
            "location": 140,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "aw-core-master/aw_core/models.py": {
        "_timestamp_parse": {
            "name": "_timestamp_parse",
            "location": 20,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "ts_in": [
                    "Union[(str, _datetime.datetime)]"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[Union[(int, str)]]"
                ],
                "timestamp": [
                    "Union[(str, _datetime.datetime)]"
                ],
                "duration": [
                    "Union[(float, _datetime.timedelta)]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Event.__eq__": {
            "name": "__eq__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Event.__lt__": {
            "name": "__lt__",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Event.to_json_dict": {
            "name": "to_json_dict",
            "location": 87,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.to_json_str": {
            "name": "to_json_str",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event._hasprop": {
            "name": "_hasprop",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "propname": [
                    "str"
                ]
            }
        },
        "Event.id": {
            "name": "id",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Event.data": {
            "name": "data",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Event.timestamp": {
            "name": "timestamp",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "Event.duration": {
            "name": "duration",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "duration": []
            }
        }
    },
    "aw-core-master/aw_core/schema.py": {
        "_this_dir": {
            "name": "_this_dir",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_schema_dir": {
            "name": "_schema_dir",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_json_schema": {
            "name": "get_json_schema",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "aw-core-master/aw_core/util.py": {
        "_version_info_tuple": {
            "name": "_version_info_tuple",
            "location": 12,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {}
        },
        "assert_version": {
            "name": "assert_version",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "required_version": [
                    "Tuple[(int, ...)]"
                ]
            }
        }
    },
    "aw-core-master/aw_core/__about__.py": {},
    "aw-core-master/aw_core/__init__.py": {},
    "aw-core-master/aw_datastore/benchmark.py": {
        "create_test_events": {
            "name": "create_test_events",
            "location": 17,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "temporary_bucket": {
            "name": "temporary_bucket",
            "location": 30,
            "return": [],
            "arguments": {
                "ds": []
            }
        },
        "benchmark": {
            "name": "benchmark",
            "location": 41,
            "return": [],
            "arguments": {
                "storage": []
            }
        }
    },
    "aw-core-master/aw_datastore/datastore.py": {
        "Datastore.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "storage_strategy": [],
                "testing": []
            }
        },
        "Datastore.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datastore.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "Datastore.create_bucket": {
            "name": "create_bucket",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "type": [],
                "client": [],
                "hostname": [],
                "created": [],
                "name": []
            }
        },
        "Datastore.delete_bucket": {
            "name": "delete_bucket",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "Datastore.buckets": {
            "name": "buckets",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "bucket_id": []
            }
        },
        "Bucket.metadata": {
            "name": "metadata",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.get": {
            "name": "get",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [],
                "starttime": [],
                "endtime": []
            }
        },
        "Bucket.get_by_id": {
            "name": "get_by_id",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "Bucket.get_eventcount": {
            "name": "get_eventcount",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "starttime": [],
                "endtime": []
            }
        },
        "Bucket.insert": {
            "name": "insert",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "Bucket.delete": {
            "name": "delete",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "Bucket.replace_last": {
            "name": "replace_last",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Bucket.replace": {
            "name": "replace",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "event": []
            }
        }
    },
    "aw-core-master/aw_datastore/migration.py": {
        "detect_db_files": {
            "name": "detect_db_files",
            "location": 12,
            "return": [],
            "arguments": {
                "data_dir": [],
                "datastore_name": [],
                "version": []
            }
        },
        "check_for_migration": {
            "name": "check_for_migration",
            "location": 29,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "peewee_v2_to_sqlite_v1": {
            "name": "peewee_v2_to_sqlite_v1",
            "location": 41,
            "return": [],
            "arguments": {
                "datastore": []
            }
        }
    },
    "aw-core-master/aw_datastore/__init__.py": {
        "get_storage_methods": {
            "name": "get_storage_methods",
            "location": 11,
            "return": [
                "Dict[(str, Callable[([Any], Any)])]"
            ],
            "arguments": {}
        }
    },
    "aw-core-master/aw_datastore/storages/abstract.py": {
        "AbstractStorage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testing": [
                    "bool"
                ]
            }
        },
        "AbstractStorage.buckets": {
            "name": "buckets",
            "location": 22,
            "return": [
                "Dict[(str, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractStorage.create_bucket": {
            "name": "create_bucket",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "type_id": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "created": [
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "AbstractStorage.delete_bucket": {
            "name": "delete_bucket",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "AbstractStorage.get_metadata": {
            "name": "get_metadata",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "AbstractStorage.get_event": {
            "name": "get_event",
            "location": 46,
            "return": [
                "Optional[aw_core.models.Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "AbstractStorage.get_events": {
            "name": "get_events",
            "location": 54,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "starttime": [
                    "Optional[_datetime.datetime]"
                ],
                "endtime": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "AbstractStorage.get_eventcount": {
            "name": "get_eventcount",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "starttime": [
                    "Optional[_datetime.datetime]"
                ],
                "endtime": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "AbstractStorage.insert_one": {
            "name": "insert_one",
            "location": 72,
            "return": [
                "aw_core.models.Event"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event": [
                    "aw_core.models.Event"
                ]
            }
        },
        "AbstractStorage.insert_many": {
            "name": "insert_many",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "events": [
                    "List[aw_core.models.Event]"
                ]
            }
        },
        "AbstractStorage.delete": {
            "name": "delete",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "AbstractStorage.replace": {
            "name": "replace",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ],
                "event": [
                    "aw_core.models.Event"
                ]
            }
        },
        "AbstractStorage.replace_last": {
            "name": "replace_last",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event": [
                    "aw_core.models.Event"
                ]
            }
        }
    },
    "aw-core-master/aw_datastore/storages/memory.py": {
        "MemoryStorage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "testing": []
            }
        },
        "MemoryStorage.create_bucket": {
            "name": "create_bucket",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "type_id": [],
                "client": [],
                "hostname": [],
                "created": [],
                "name": []
            }
        },
        "MemoryStorage.delete_bucket": {
            "name": "delete_bucket",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "MemoryStorage.buckets": {
            "name": "buckets",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryStorage.get_event": {
            "name": "get_event",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "MemoryStorage.get_events": {
            "name": "get_events",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "limit": [],
                "starttime": [],
                "endtime": []
            }
        },
        "MemoryStorage.get_eventcount": {
            "name": "get_eventcount",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "starttime": [],
                "endtime": []
            }
        },
        "MemoryStorage.get_metadata": {
            "name": "get_metadata",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "MemoryStorage.insert_one": {
            "name": "insert_one",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "event": []
            }
        },
        "MemoryStorage.delete": {
            "name": "delete",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "MemoryStorage._get_event": {
            "name": "_get_event",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "MemoryStorage.replace": {
            "name": "replace",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": [],
                "event": []
            }
        },
        "MemoryStorage.replace_last": {
            "name": "replace_last",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event": []
            }
        }
    },
    "aw-core-master/aw_datastore/storages/mongodb.py": {
        "MongoDBStorage.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "testing": []
            }
        },
        "MongoDBStorage.create_bucket": {
            "name": "create_bucket",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "type_id": [],
                "client": [],
                "hostname": [],
                "created": [],
                "name": []
            }
        },
        "MongoDBStorage.delete_bucket": {
            "name": "delete_bucket",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "MongoDBStorage.buckets": {
            "name": "buckets",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoDBStorage.get_metadata": {
            "name": "get_metadata",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "MongoDBStorage.get_events": {
            "name": "get_events",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "limit": [],
                "starttime": [],
                "endtime": []
            }
        },
        "MongoDBStorage.get_eventcount": {
            "name": "get_eventcount",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "starttime": [],
                "endtime": []
            }
        },
        "MongoDBStorage._transform_event": {
            "name": "_transform_event",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MongoDBStorage.insert_one": {
            "name": "insert_one",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "event": []
            }
        },
        "MongoDBStorage.insert_many": {
            "name": "insert_many",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "events": []
            }
        },
        "MongoDBStorage.delete": {
            "name": "delete",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "MongoDBStorage.replace_last": {
            "name": "replace_last",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event": []
            }
        },
        "MongoDBStorage.replace": {
            "name": "replace",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": [],
                "event": []
            }
        }
    },
    "aw-core-master/aw_datastore/storages/peewee.py": {
        "chunks": {
            "name": "chunks",
            "location": 41,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "ls": [],
                "n": []
            }
        },
        "dt_plus_duration": {
            "name": "dt_plus_duration",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": [],
                "duration": []
            }
        },
        "BucketModel.json": {
            "name": "json",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventModel.from_event": {
            "name": "from_event",
            "location": 92,
            "return": [
                "_TEventModel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEventModel]"
                ],
                "bucket_key": [],
                "event": [
                    "aw_core.models.Event"
                ]
            }
        },
        "EventModel.json": {
            "name": "json",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeeweeStorage.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testing": [
                    "bool"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "PeeweeStorage.update_bucket_keys": {
            "name": "update_bucket_keys",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeeweeStorage.buckets": {
            "name": "buckets",
            "location": 139,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeeweeStorage.create_bucket": {
            "name": "create_bucket",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "type_id": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "created": [
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "PeeweeStorage.delete_bucket": {
            "name": "delete_bucket",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "PeeweeStorage.get_metadata": {
            "name": "get_metadata",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ]
            }
        },
        "PeeweeStorage.insert_one": {
            "name": "insert_one",
            "location": 182,
            "return": [
                "aw_core.models.Event"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event": [
                    "aw_core.models.Event"
                ]
            }
        },
        "PeeweeStorage.insert_many": {
            "name": "insert_many",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "events": [
                    "List[aw_core.models.Event]"
                ]
            }
        },
        "PeeweeStorage._get_event": {
            "name": "_get_event",
            "location": 215,
            "return": [
                "Optional[EventModel]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "PeeweeStorage._get_last": {
            "name": "_get_last",
            "location": 226,
            "return": [
                "EventModel"
            ],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "PeeweeStorage.replace_last": {
            "name": "replace_last",
            "location": 234,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event": [
                    "_T1"
                ]
            }
        },
        "PeeweeStorage.delete": {
            "name": "delete",
            "location": 243,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "PeeweeStorage.replace": {
            "name": "replace",
            "location": 251,
            "return": [
                "_T2"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": [],
                "event": [
                    "_T2"
                ]
            }
        },
        "PeeweeStorage.get_event": {
            "name": "get_event",
            "location": 260,
            "return": [
                "Optional[aw_core.models.Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "event_id": [
                    "int"
                ]
            }
        },
        "PeeweeStorage.get_events": {
            "name": "get_events",
            "location": 271,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "starttime": [
                    "Optional[_datetime.datetime]"
                ],
                "endtime": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "PeeweeStorage.get_eventcount": {
            "name": "get_eventcount",
            "location": 321,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket_id": [
                    "str"
                ],
                "starttime": [
                    "Optional[_datetime.datetime]"
                ],
                "endtime": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "PeeweeStorage._where_range": {
            "name": "_where_range",
            "location": 331,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "q": [],
                "starttime": [
                    "Optional[_datetime.datetime]"
                ],
                "endtime": [
                    "Optional[_datetime.datetime]"
                ]
            }
        }
    },
    "aw-core-master/aw_datastore/storages/sqlite.py": {
        "_rows_to_events": {
            "name": "_rows_to_events",
            "location": 57,
            "return": [],
            "arguments": {
                "rows": []
            }
        },
        "SqliteStorage.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "testing": [],
                "filepath": [],
                "enable_lazy_commit": []
            }
        },
        "SqliteStorage.commit": {
            "name": "commit",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqliteStorage.conditional_commit": {
            "name": "conditional_commit",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "num_statements": []
            }
        },
        "SqliteStorage.buckets": {
            "name": "buckets",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqliteStorage.create_bucket": {
            "name": "create_bucket",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "type_id": [],
                "client": [],
                "hostname": [],
                "created": [],
                "name": []
            }
        },
        "SqliteStorage.delete_bucket": {
            "name": "delete_bucket",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "SqliteStorage.get_metadata": {
            "name": "get_metadata",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": []
            }
        },
        "SqliteStorage.insert_one": {
            "name": "insert_one",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event": []
            }
        },
        "SqliteStorage.insert_many": {
            "name": "insert_many",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "events": []
            }
        },
        "SqliteStorage.replace_last": {
            "name": "replace_last",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event": []
            }
        },
        "SqliteStorage.delete": {
            "name": "delete",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "SqliteStorage.replace": {
            "name": "replace",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": [],
                "event": []
            }
        },
        "SqliteStorage.get_event": {
            "name": "get_event",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "event_id": []
            }
        },
        "SqliteStorage.get_events": {
            "name": "get_events",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "limit": [],
                "starttime": [],
                "endtime": []
            }
        },
        "SqliteStorage.get_eventcount": {
            "name": "get_eventcount",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_id": [],
                "starttime": [],
                "endtime": []
            }
        }
    },
    "aw-core-master/aw_datastore/storages/__init__.py": {},
    "aw-core-master/aw_query/exceptions.py": {},
    "aw-core-master/aw_query/functions.py": {
        "_verify_bucket_exists": {
            "name": "_verify_bucket_exists",
            "location": 34,
            "return": [],
            "arguments": {
                "datastore": [],
                "bucketname": []
            }
        },
        "_verify_variable_is_type": {
            "name": "_verify_variable_is_type",
            "location": 41,
            "return": [],
            "arguments": {
                "variable": [],
                "t": []
            }
        },
        "q2_function": {
            "name": "q2_function",
            "location": 63,
            "return": [],
            "arguments": {
                "transform_func": []
            }
        },
        "q2_typecheck": {
            "name": "q2_typecheck",
            "location": 98,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "q2_find_bucket": {
            "name": "q2_find_bucket",
            "location": 128,
            "return": [],
            "arguments": {
                "datastore": [],
                "filter_str": [],
                "hostname": []
            }
        },
        "q2_query_bucket": {
            "name": "q2_query_bucket",
            "location": 152,
            "return": [],
            "arguments": {
                "datastore": [],
                "namespace": [],
                "bucketname": []
            }
        },
        "q2_query_bucket_eventcount": {
            "name": "q2_query_bucket_eventcount",
            "location": 168,
            "return": [],
            "arguments": {
                "datastore": [],
                "namespace": [],
                "bucketname": []
            }
        },
        "q2_filter_keyvals": {
            "name": "q2_filter_keyvals",
            "location": 184,
            "return": [],
            "arguments": {
                "events": [],
                "key": [],
                "vals": []
            }
        },
        "q2_exclude_keyvals": {
            "name": "q2_exclude_keyvals",
            "location": 190,
            "return": [],
            "arguments": {
                "events": [],
                "key": [],
                "vals": []
            }
        },
        "q2_filter_keyvals_regex": {
            "name": "q2_filter_keyvals_regex",
            "location": 196,
            "return": [],
            "arguments": {
                "events": [],
                "key": [],
                "regex": []
            }
        },
        "q2_filter_period_intersect": {
            "name": "q2_filter_period_intersect",
            "location": 202,
            "return": [],
            "arguments": {
                "events": [],
                "filterevents": []
            }
        },
        "q2_period_union": {
            "name": "q2_period_union",
            "location": 208,
            "return": [],
            "arguments": {
                "events1": [],
                "events2": []
            }
        },
        "q2_limit_events": {
            "name": "q2_limit_events",
            "location": 214,
            "return": [],
            "arguments": {
                "events": [],
                "count": []
            }
        },
        "q2_merge_events_by_keys": {
            "name": "q2_merge_events_by_keys",
            "location": 225,
            "return": [],
            "arguments": {
                "events": [],
                "keys": []
            }
        },
        "q2_chunk_events_by_key": {
            "name": "q2_chunk_events_by_key",
            "location": 231,
            "return": [],
            "arguments": {
                "events": [],
                "key": []
            }
        },
        "q2_sort_by_timestamp": {
            "name": "q2_sort_by_timestamp",
            "location": 242,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "q2_sort_by_duration": {
            "name": "q2_sort_by_duration",
            "location": 248,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "q2_sum_durations": {
            "name": "q2_sum_durations",
            "location": 259,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "q2_concat": {
            "name": "q2_concat",
            "location": 265,
            "return": [],
            "arguments": {
                "events1": [],
                "events2": []
            }
        },
        "q2_flood": {
            "name": "q2_flood",
            "location": 276,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "q2_split_url_events": {
            "name": "q2_split_url_events",
            "location": 287,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "q2_simplify_window_titles": {
            "name": "q2_simplify_window_titles",
            "location": 293,
            "return": [],
            "arguments": {
                "events": [],
                "key": []
            }
        },
        "q2_nop": {
            "name": "q2_nop",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "q2_categorize": {
            "name": "q2_categorize",
            "location": 316,
            "return": [],
            "arguments": {
                "events": [],
                "classes": []
            }
        },
        "q2_tag": {
            "name": "q2_tag",
            "location": 323,
            "return": [],
            "arguments": {
                "events": [],
                "classes": []
            }
        },
        "q2_function.h": {
            "name": "h",
            "location": 71,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "q2_typecheck.g": {
            "name": "g",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "q2_function.h.g": {
            "name": "g",
            "location": 80,
            "return": [],
            "arguments": {
                "datastore": [],
                "namespace": []
            }
        }
    },
    "aw-core-master/aw_query/query2.py": {
        "_parse_token": {
            "name": "_parse_token",
            "location": 332,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "create_namespace": {
            "name": "create_namespace",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "parse": {
            "name": "parse",
            "location": 362,
            "return": [],
            "arguments": {
                "line": [],
                "namespace": []
            }
        },
        "interpret": {
            "name": "interpret",
            "location": 384,
            "return": [],
            "arguments": {
                "var": [],
                "val": [],
                "namespace": [],
                "datastore": []
            }
        },
        "get_return": {
            "name": "get_return",
            "location": 389,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "query": {
            "name": "query",
            "location": 397,
            "return": [],
            "arguments": {
                "name": [],
                "query": [],
                "starttime": [],
                "endtime": [],
                "datastore": []
            }
        },
        "QToken.interpret": {
            "name": "interpret",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QToken.parse": {
            "name": "parse",
            "location": 19,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QToken.check": {
            "name": "check",
            "location": 23,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QInteger.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QInteger.interpret": {
            "name": "interpret",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QInteger.parse": {
            "name": "parse",
            "location": 35,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QInteger.check": {
            "name": "check",
            "location": 39,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QVariable.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "QVariable.interpret": {
            "name": "interpret",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QVariable.parse": {
            "name": "parse",
            "location": 65,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QVariable.check": {
            "name": "check",
            "location": 72,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QString.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QString.interpret": {
            "name": "interpret",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QString.parse": {
            "name": "parse",
            "location": 92,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QString.check": {
            "name": "check",
            "location": 99,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QFunction.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "args": []
            }
        },
        "QFunction.interpret": {
            "name": "interpret",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QFunction.parse": {
            "name": "parse",
            "location": 144,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QFunction.check": {
            "name": "check",
            "location": 166,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QDict.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QDict.interpret": {
            "name": "interpret",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QDict.parse": {
            "name": "parse",
            "location": 220,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QDict.check": {
            "name": "check",
            "location": 247,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "QList.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QList.interpret": {
            "name": "interpret",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": [],
                "namespace": []
            }
        },
        "QList.parse": {
            "name": "parse",
            "location": 285,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": []
            }
        },
        "QList.check": {
            "name": "check",
            "location": 302,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "aw-core-master/aw_query/__init__.py": {},
    "aw-core-master/aw_transform/chunk_events_by_key.py": {
        "chunk_events_by_key": {
            "name": "chunk_events_by_key",
            "location": 10,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "key": [
                    "str"
                ],
                "pulsetime": [
                    "float"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/classify.py": {
        "categorize": {
            "name": "categorize",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "classes": [
                    "List[Tuple[(List[str], Rule)]]"
                ]
            }
        },
        "_categorize_one": {
            "name": "_categorize_one",
            "location": 47,
            "return": [
                "aw_core.models.Event"
            ],
            "arguments": {
                "e": [
                    "aw_core.models.Event"
                ],
                "classes": [
                    "List[Tuple[(List[str], Rule)]]"
                ]
            }
        },
        "tag": {
            "name": "tag",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "classes": [
                    "List[Tuple[(str, Rule)]]"
                ]
            }
        },
        "_tag_one": {
            "name": "_tag_one",
            "location": 58,
            "return": [
                "aw_core.models.Event"
            ],
            "arguments": {
                "e": [
                    "aw_core.models.Event"
                ],
                "classes": [
                    "List[Tuple[(str, Rule)]]"
                ]
            }
        },
        "_pick_category": {
            "name": "_pick_category",
            "location": 63,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "tags": [
                    "Iterable[List[str]]"
                ]
            }
        },
        "_pick_deepest_cat": {
            "name": "_pick_deepest_cat",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "t1": [
                    "List[str]"
                ],
                "t2": [
                    "List[str]"
                ]
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Rule.match": {
            "name": "match",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "aw_core.models.Event"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/filter_keyvals.py": {
        "filter_keyvals": {
            "name": "filter_keyvals",
            "location": 10,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "key": [
                    "str"
                ],
                "vals": [
                    "List[str]"
                ],
                "exclude": []
            }
        },
        "filter_keyvals_regex": {
            "name": "filter_keyvals_regex",
            "location": 22,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "key": [
                    "str"
                ],
                "regex": [
                    "str"
                ]
            }
        },
        "filter_keyvals.predicate": {
            "name": "predicate",
            "location": 13,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "filter_keyvals_regex.predicate": {
            "name": "predicate",
            "location": 25,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "aw-core-master/aw_transform/filter_period_intersect.py": {
        "_get_event_period": {
            "name": "_get_event_period",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "event": [
                    "aw_core.models.Event"
                ]
            }
        },
        "_replace_event_period": {
            "name": "_replace_event_period",
            "location": 17,
            "return": [
                "aw_core.models.Event"
            ],
            "arguments": {
                "event": [
                    "aw_core.models.Event"
                ],
                "period": []
            }
        },
        "_intersecting_eventpairs": {
            "name": "_intersecting_eventpairs",
            "location": 24,
            "return": [
                "Iterable[Tuple[(aw_core.models.Event, aw_core.models.Event, Any)]]"
            ],
            "arguments": {
                "events1": [
                    "List[aw_core.models.Event]"
                ],
                "events2": [
                    "List[aw_core.models.Event]"
                ]
            }
        },
        "filter_period_intersect": {
            "name": "filter_period_intersect",
            "location": 60,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "filterevents": [
                    "List[aw_core.models.Event]"
                ]
            }
        },
        "period_union": {
            "name": "period_union",
            "location": 92,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events1": [
                    "List[aw_core.models.Event]"
                ],
                "events2": [
                    "List[aw_core.models.Event]"
                ]
            }
        },
        "union": {
            "name": "union",
            "location": 127,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events1": [
                    "List[aw_core.models.Event]"
                ],
                "events2": [
                    "List[aw_core.models.Event]"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/flood.py": {
        "flood": {
            "name": "flood",
            "location": 11,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "pulsetime": [
                    "float"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/heartbeats.py": {
        "heartbeat_reduce": {
            "name": "heartbeat_reduce",
            "location": 10,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "pulsetime": [
                    "float"
                ]
            }
        },
        "heartbeat_merge": {
            "name": "heartbeat_merge",
            "location": 26,
            "return": [
                "Optional[aw_core.models.Event]"
            ],
            "arguments": {
                "last_event": [
                    "aw_core.models.Event"
                ],
                "heartbeat": [
                    "aw_core.models.Event"
                ],
                "pulsetime": [
                    "float"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/merge_events_by_keys.py": {
        "merge_events_by_keys": {
            "name": "merge_events_by_keys",
            "location": 9,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [],
                "keys": []
            }
        }
    },
    "aw-core-master/aw_transform/simplify.py": {
        "simplify_string": {
            "name": "simplify_string",
            "location": 8,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/sort_by.py": {
        "sort_by_timestamp": {
            "name": "sort_by_timestamp",
            "location": 9,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": []
            }
        },
        "sort_by_duration": {
            "name": "sort_by_duration",
            "location": 14,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": []
            }
        },
        "limit_events": {
            "name": "limit_events",
            "location": 19,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [],
                "count": []
            }
        },
        "sum_durations": {
            "name": "sum_durations",
            "location": 24,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "events": []
            }
        },
        "concat": {
            "name": "concat",
            "location": 29,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events1": [],
                "events2": []
            }
        }
    },
    "aw-core-master/aw_transform/split_url_events.py": {
        "split_url_events": {
            "name": "split_url_events",
            "location": 11,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events": [
                    "List[aw_core.models.Event]"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/union_no_overlap.py": {
        "_split_event": {
            "name": "_split_event",
            "location": 14,
            "return": [
                "Tuple[(aw_core.models.Event, Optional[aw_core.models.Event])]"
            ],
            "arguments": {
                "e": [
                    "aw_core.models.Event"
                ],
                "dt": [
                    "_datetime.datetime"
                ]
            }
        },
        "test_split_event": {
            "name": "test_split_event",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "union_no_overlap": {
            "name": "union_no_overlap",
            "location": 37,
            "return": [
                "List[aw_core.models.Event]"
            ],
            "arguments": {
                "events1": [
                    "List[aw_core.models.Event]"
                ],
                "events2": [
                    "List[aw_core.models.Event]"
                ]
            }
        }
    },
    "aw-core-master/aw_transform/__init__.py": {},
    "aw-core-master/stubs/appdirs.py": {
        "user_data_dir": {
            "name": "user_data_dir",
            "location": 1,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "user_cache_dir": {
            "name": "user_cache_dir",
            "location": 2,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "user_config_dir": {
            "name": "user_config_dir",
            "location": 3,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "user_log_dir": {
            "name": "user_log_dir",
            "location": 4,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        }
    },
    "aw-core-master/stubs/iso8601.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 3,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "aw-core-master/stubs/pythonjsonlogger/jsonlogger.py": {
        "JsonFormatter.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "a1": []
            }
        }
    },
    "aw-core-master/stubs/pythonjsonlogger/__init__.py": {},
    "aw-core-master/tests/context.py": {},
    "aw-core-master/tests/test_config.py": {
        "clean_config": {
            "name": "clean_config",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_defaults": {
            "name": "test_config_defaults",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_no_defaults": {
            "name": "test_config_no_defaults",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_override": {
            "name": "test_config_override",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_ini": {
            "name": "test_config_ini",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "aw-core-master/tests/test_datastore.py": {
        "test_get_storage_methods": {
            "name": "test_get_storage_methods",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_get_buckets": {
            "name": "test_get_buckets",
            "location": 30,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_create_bucket": {
            "name": "test_create_bucket",
            "location": 38,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_delete_bucket": {
            "name": "test_delete_bucket",
            "location": 63,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_nonexistent_bucket": {
            "name": "test_nonexistent_bucket",
            "location": 75,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_insert_one": {
            "name": "test_insert_one",
            "location": 84,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_empty_bucket": {
            "name": "test_empty_bucket",
            "location": 101,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_insert_many": {
            "name": "test_insert_many",
            "location": 110,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_insert_many_upsert": {
            "name": "test_insert_many_upsert",
            "location": 125,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 151,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_insert_badtype": {
            "name": "test_insert_badtype",
            "location": 176,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_ordered": {
            "name": "test_get_ordered",
            "location": 189,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_event_with_timezone": {
            "name": "test_get_event_with_timezone",
            "location": 209,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_datefilter_simple": {
            "name": "test_get_datefilter_simple",
            "location": 232,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_event_by_id": {
            "name": "test_get_event_by_id",
            "location": 290,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_event_by_id_notfound": {
            "name": "test_get_event_by_id_notfound",
            "location": 309,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_event_trimming": {
            "name": "test_get_event_trimming",
            "location": 316,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_datefilter_start": {
            "name": "test_get_datefilter_start",
            "location": 345,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_datefilter_end": {
            "name": "test_get_datefilter_end",
            "location": 363,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_datefilter_both": {
            "name": "test_get_datefilter_both",
            "location": 381,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_insert_invalid": {
            "name": "test_insert_invalid",
            "location": 405,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_replace": {
            "name": "test_replace",
            "location": 413,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_replace_last": {
            "name": "test_replace_last",
            "location": 446,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_replace_last_complex": {
            "name": "test_replace_last_complex",
            "location": 472,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_last": {
            "name": "test_get_last",
            "location": 495,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_limit": {
            "name": "test_limit",
            "location": 516,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_metadata": {
            "name": "test_get_metadata",
            "location": 532,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        },
        "test_get_eventcount": {
            "name": "test_get_eventcount",
            "location": 551,
            "return": [],
            "arguments": {
                "bucket_cm": []
            }
        }
    },
    "aw-core-master/tests/test_event.py": {
        "test_create": {
            "name": "test_create",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_serialization": {
            "name": "test_json_serialization",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_invalid_duration": {
            "name": "test_set_invalid_duration",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aw-core-master/tests/test_flood.py": {
        "test_flood_forward": {
            "name": "test_flood_forward",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_forward_merge": {
            "name": "test_flood_forward_merge",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_backward": {
            "name": "test_flood_backward",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_backward_merge": {
            "name": "test_flood_backward_merge",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_negative_gap_same_data": {
            "name": "test_flood_negative_gap_same_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_negative_gap_differing_data": {
            "name": "test_flood_negative_gap_differing_data",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flood_negative_small_gap_differing_data": {
            "name": "test_flood_negative_small_gap_differing_data",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aw-core-master/tests/test_heartbeat.py": {
        "test_heartbeat_merge": {
            "name": "test_heartbeat_merge",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_heartbeat_merge_fail": {
            "name": "test_heartbeat_merge_fail",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_heartbeat_reduce": {
            "name": "test_heartbeat_reduce",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_heartbeat_same_timestamp": {
            "name": "test_heartbeat_same_timestamp",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_heartbeat_reduce_fail": {
            "name": "test_heartbeat_reduce_fail",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aw-core-master/tests/test_query2.py": {
        "test_query2_test_token_parsing": {
            "name": "test_query2_test_token_parsing",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_query2_bogus_query": {
            "name": "test_query2_bogus_query",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_query2_query_function_calling": {
            "name": "test_query2_query_function_calling",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_query2_return_value": {
            "name": "test_query2_return_value",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_query2_multiline": {
            "name": "test_query2_multiline",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_query2_function_invalid_types": {
            "name": "test_query2_function_invalid_types",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "test_query2_function_invalid_argument_count": {
            "name": "test_query2_function_invalid_argument_count",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_query2_function_in_function": {
            "name": "test_query2_function_in_function",
            "location": 276,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_query2_query_functions": {
            "name": "test_query2_query_functions",
            "location": 306,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_query2_basic_query": {
            "name": "test_query2_basic_query",
            "location": 360,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_query2_test_merged_keys": {
            "name": "test_query2_test_merged_keys",
            "location": 414,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_query2_fancy_query": {
            "name": "test_query2_fancy_query",
            "location": 472,
            "return": [],
            "arguments": {
                "datastore": []
            }
        },
        "test_query2_query_categorize": {
            "name": "test_query2_query_categorize",
            "location": 513,
            "return": [],
            "arguments": {
                "datastore": []
            }
        }
    },
    "aw-core-master/tests/test_schemas.py": {
        "EventSchemaTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.validate": {
            "name": "validate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "EventSchemaTest.test_event": {
            "name": "test_event",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_data": {
            "name": "test_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_timestamp": {
            "name": "test_timestamp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_timestamp_invalid_string": {
            "name": "test_timestamp_invalid_string",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_timestamp_invalid_number": {
            "name": "test_timestamp_invalid_number",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_duration": {
            "name": "test_duration",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSchemaTest.test_duration_invalid_string": {
            "name": "test_duration_invalid_string",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aw-core-master/tests/test_transforms.py": {
        "test_simplify_string": {
            "name": "test_simplify_string",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_keyval": {
            "name": "test_filter_keyval",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_keyval_regex": {
            "name": "test_filter_keyval_regex",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intersecting_eventpairs": {
            "name": "test_intersecting_eventpairs",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_period_intersect": {
            "name": "test_filter_period_intersect",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_period_union": {
            "name": "test_period_union",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_by_timestamp": {
            "name": "test_sort_by_timestamp",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_by_duration": {
            "name": "test_sort_by_duration",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_durations": {
            "name": "test_sum_durations",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_events_by_keys_1": {
            "name": "test_merge_events_by_keys_1",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_events_by_keys_2": {
            "name": "test_merge_events_by_keys_2",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chunk_events_by_key": {
            "name": "test_chunk_events_by_key",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_parse_event": {
            "name": "test_url_parse_event",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_categorize": {
            "name": "test_categorize",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tags": {
            "name": "test_tags",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_no_overlap": {
            "name": "test_union_no_overlap",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aw-core-master/tests/utils.py": {
        "param_datastore_objects": {
            "name": "param_datastore_objects",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "param_testing_buckets_cm": {
            "name": "param_testing_buckets_cm",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "TempTestBucket.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "datastore": []
            }
        },
        "TempTestBucket.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempTestBucket.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempTestBucket.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aw-core-master/tests/__init__.py": {}
}
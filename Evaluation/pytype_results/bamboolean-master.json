{
    "bamboolean-master/conf.py": {},
    "bamboolean-master/run_tests.py": {
        "do_call": {
            "name": "do_call",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "run_mypy": {
            "name": "run_mypy",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_flake8": {
            "name": "run_flake8",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_python_tests": {
            "name": "run_python_tests",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bamboolean-master/setup.py": {},
    "bamboolean-master/upload.py": {
        "upload": {
            "name": "upload",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "version_exists": {
            "name": "version_exists",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bamboolean-master/bamboolean/ast.py": {
        "AST.tree_repr": {
            "name": "tree_repr",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.stringify": {
            "name": "stringify",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBasedAST.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenBasedAST.tree_repr": {
            "name": "tree_repr",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBasedAST.stringify": {
            "name": "stringify",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.stringify": {
            "name": "stringify",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "rel_op": [],
                "value": []
            }
        },
        "Constraint.tree_repr": {
            "name": "tree_repr",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.stringify": {
            "name": "stringify",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinOp.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [],
                "op": [],
                "right": []
            }
        },
        "BinOp.tree_repr": {
            "name": "tree_repr",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinOp.stringify": {
            "name": "stringify",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOp.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "right": []
            }
        },
        "UnaryOp.tree_repr": {
            "name": "tree_repr",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOp.stringify": {
            "name": "stringify",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOp.tree_repr": {
            "name": "tree_repr",
            "location": 104,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOp.stringify": {
            "name": "stringify",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/exceptions.py": {},
    "bamboolean-master/bamboolean/factories.py": {
        "ParserFactory": {
            "name": "ParserFactory",
            "location": 9,
            "return": [
                "bamboolean.parser.Parser"
            ],
            "arguments": {
                "text": []
            }
        },
        "InterpreterFactory": {
            "name": "InterpreterFactory",
            "location": 14,
            "return": [
                "bamboolean.interpreter.Interpreter"
            ],
            "arguments": {
                "text": [],
                "symbol_table": []
            }
        },
        "interpret": {
            "name": "interpret",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": [],
                "symbol_table": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_vars": {
            "name": "extract_vars",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "bamboolean-master/bamboolean/interpreter.py": {
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [],
                "symbol_table": []
            }
        },
        "Interpreter.interpret": {
            "name": "interpret",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.error": {
            "name": "error",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "extra": []
            }
        },
        "Interpreter.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter._handle_rel_op": {
            "name": "_handle_rel_op",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "op_type": [],
                "val1": [],
                "val2": []
            }
        },
        "Interpreter.visit_Var": {
            "name": "visit_Var",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_Num": {
            "name": "visit_Num",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_Bool": {
            "name": "visit_Bool",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_String": {
            "name": "visit_String",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_NoOp": {
            "name": "visit_NoOp",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "bamboolean-master/bamboolean/lexer.py": {
        "Lexer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Lexer.error": {
            "name": "error",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._is_eof": {
            "name": "_is_eof",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "Lexer.next": {
            "name": "next",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.peek": {
            "name": "peek",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.id": {
            "name": "id",
            "location": 41,
            "return": [
                "tok.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.skip_whitespace": {
            "name": "skip_whitespace",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._is_quotation_mark": {
            "name": "_is_quotation_mark",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "char": []
            }
        },
        "Lexer.string": {
            "name": "string",
            "location": 62,
            "return": [
                "tok.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.number": {
            "name": "number",
            "location": 72,
            "return": [
                "tok.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._integer": {
            "name": "_integer",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.skip_n_chars": {
            "name": "skip_n_chars",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Lexer.is_token_equal": {
            "name": "is_token_equal",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "Lexer.get_next_token": {
            "name": "get_next_token",
            "location": 100,
            "return": [
                "tok.Token"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/node_visitor.py": {
        "NodeVisitor.visit": {
            "name": "visit",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "bamboolean-master/bamboolean/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.error": {
            "name": "error",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "extra": []
            }
        },
        "Parser.consume": {
            "name": "consume",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_type": []
            }
        },
        "Parser.compound_expr": {
            "name": "compound_expr",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.expr": {
            "name": "expr",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.simple_expr": {
            "name": "simple_expr",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_bin_op": {
            "name": "_parse_bin_op",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node_func": [],
                "token_type": []
            }
        },
        "Parser._parse_unary_op": {
            "name": "_parse_unary_op",
            "location": 72,
            "return": [
                "ast.UnaryOp"
            ],
            "arguments": {
                "self": [],
                "node_func": []
            }
        },
        "Parser.term": {
            "name": "term",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.statement": {
            "name": "statement",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.constraint": {
            "name": "constraint",
            "location": 101,
            "return": [
                "Union[(ast.Constraint, ast.Var)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.variable": {
            "name": "variable",
            "location": 112,
            "return": [
                "ast.Var"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.relational_op": {
            "name": "relational_op",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.value": {
            "name": "value",
            "location": 131,
            "return": [
                "Union[(ast.Bool, ast.Num, ast.String)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.empty": {
            "name": "empty",
            "location": 152,
            "return": [
                "ast.NoOp"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tokens.py": {
        "flip_dict": {
            "name": "flip_dict",
            "location": 52,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": []
            }
        },
        "is_unary_op": {
            "name": "is_unary_op",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "op": []
            }
        },
        "is_rel_op": {
            "name": "is_rel_op",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "op": []
            }
        },
        "is_value": {
            "name": "is_value",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "tok_type": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "value": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__hash__": {
            "name": "__hash__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Token.stringify": {
            "name": "stringify",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.tree_repr": {
            "name": "tree_repr",
            "location": 48,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/__init__.py": {},
    "bamboolean-master/bamboolean/tests/fixtures.py": {},
    "bamboolean-master/bamboolean/tests/test_interpreter.py": {
        "InterpreterTestCase.test_interpreter__basic": {
            "name": "test_interpreter__basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.assertResults": {
            "name": "assertResults",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [],
                "sym_tab": [],
                "results": []
            }
        },
        "InterpreterTestCase.test_interpreter": {
            "name": "test_interpreter",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_parentheses": {
            "name": "test_parentheses",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_empty_expr_evaluates_to_true": {
            "name": "test_empty_expr_evaluates_to_true",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_variable_evaluates_to_its_truthness": {
            "name": "test_variable_evaluates_to_its_truthness",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_constant_evaluates_to_its_truthness": {
            "name": "test_constant_evaluates_to_its_truthness",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_complex_constant_statement": {
            "name": "test_complex_constant_statement",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_not": {
            "name": "test_not",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_multi_not": {
            "name": "test_multi_not",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_lexer.py": {
        "LexerTestCase.test_tokens": {
            "name": "test_tokens",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LexerTestCase.test_lexer": {
            "name": "test_lexer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LexerTestCase.test_lexer_raises_on_invalid_token": {
            "name": "test_lexer_raises_on_invalid_token",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_normalize.py": {
        "NormalizeExpr.test_normalize_should_not_change_normalized_terms": {
            "name": "test_normalize_should_not_change_normalized_terms",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_negation": {
            "name": "test_normalize_negation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_binop": {
            "name": "test_normalize_binop",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_empty": {
            "name": "test_normalize_empty",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_bool": {
            "name": "test_normalize_bool",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_relop": {
            "name": "test_normalize_relop",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_parser.py": {
        "ParserTestCase.test_parser": {
            "name": "test_parser",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parsing_parentheses": {
            "name": "test_parsing_parentheses",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_constant_statements": {
            "name": "test_constant_statements",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parser_raises_on_invalid_ast": {
            "name": "test_parser_raises_on_invalid_ast",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_empty_expression": {
            "name": "test_empty_expression",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_not": {
            "name": "test_not",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_not_nested": {
            "name": "test_not_nested",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_vars_extractor.py": {
        "VarsExtractorTestCase.test_simple_example": {
            "name": "test_simple_example",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_parentheses": {
            "name": "test_parentheses",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_many_vars": {
            "name": "test_many_vars",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/__init__.py": {},
    "bamboolean-master/bamboolean/walkers/normalize.py": {
        "ExprNegator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "ExprNegator.demorgan": {
            "name": "demorgan",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprNegator.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 14,
            "return": [
                "bamboolean.ast.Constraint"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 18,
            "return": [
                "bamboolean.ast.BinOp"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.visit_Var": {
            "name": "visit_Var",
            "location": 27,
            "return": [
                "bamboolean.ast.UnaryOp"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.visit_Bool": {
            "name": "visit_Bool",
            "location": 30,
            "return": [
                "bamboolean.ast.Bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.generic_visit": {
            "name": "generic_visit",
            "location": 34,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        },
        "ExprNormalizer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "ExprNormalizer.normalize": {
            "name": "normalize",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprNormalizer.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNormalizer.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 51,
            "return": [
                "bamboolean.ast.BinOp"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNormalizer.generic_visit": {
            "name": "generic_visit",
            "location": 54,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        }
    },
    "bamboolean-master/bamboolean/walkers/vars_extractor.py": {
        "VarsExtractor.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "VarsExtractor.extract": {
            "name": "extract",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractor.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarsExtractor.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarsExtractor.visit_Var": {
            "name": "visit_Var",
            "location": 21,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarsExtractor.generic_visit": {
            "name": "generic_visit",
            "location": 24,
            "return": [
                "Set[nothing]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "bamboolean-master/bamboolean/walkers/__init__.py": {}
}
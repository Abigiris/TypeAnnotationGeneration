{
    "bankroll-broker-master/setup.py": {},
    "bankroll-broker-master/bankroll/broker/account.py": {
        "AccountData.fromSettings": {
            "name": "fromSettings",
            "location": 22,
            "return": [
                "_TAccountData"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAccountData]"
                ],
                "settings": [
                    "Mapping[(broker.configuration.Settings, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "AccountData.positions": {
            "name": "positions",
            "location": 32,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountData.activity": {
            "name": "activity",
            "location": 39,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountData.balance": {
            "name": "balance",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/aggregator.py": {
        "AccountAggregator.allSettings": {
            "name": "allSettings",
            "location": 14,
            "return": [
                "Dict[(broker.configuration.Settings, str)]"
            ],
            "arguments": {
                "cls": [],
                "config": [
                    "broker.configuration.Configuration"
                ]
            }
        },
        "AccountAggregator._accountSubclasses": {
            "name": "_accountSubclasses",
            "location": 25,
            "return": [
                "Iterable[Type[broker.account.AccountData]]"
            ],
            "arguments": {
                "start": [
                    "Type[broker.account.AccountData]"
                ]
            }
        },
        "AccountAggregator._loadAccountFromSettings": {
            "name": "_loadAccountFromSettings",
            "location": 35,
            "return": [
                "Optional[broker.account.AccountData]"
            ],
            "arguments": {
                "accountCls": [
                    "Type[broker.account.AccountData]"
                ],
                "settings": [
                    "Mapping[(broker.configuration.Settings, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "AccountAggregator.fromSettings": {
            "name": "fromSettings",
            "location": 44,
            "return": [
                "_TAccountAggregator"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAccountAggregator]"
                ],
                "settings": [
                    "Mapping[(broker.configuration.Settings, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "AccountAggregator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "accounts": [
                    "Iterable[broker.account.AccountData]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "AccountAggregator._deduplicatePositions": {
            "name": "_deduplicatePositions",
            "location": 65,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "Iterable"
                ]
            }
        },
        "AccountAggregator.positions": {
            "name": "positions",
            "location": 76,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.activity": {
            "name": "activity",
            "location": 82,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.balance": {
            "name": "balance",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.accounts": {
            "name": "accounts",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/configuration.py": {
        "addSettingsToArgumentGroup": {
            "name": "addSettingsToArgumentGroup",
            "location": 70,
            "return": [
                "Callable[([Configuration, argparse.Namespace], Dict[(_S, str)])]"
            ],
            "arguments": {
                "settings": [
                    "Type[_S]"
                ],
                "group": []
            }
        },
        "Settings.help": {
            "name": "help",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.sectionName": {
            "name": "sectionName",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "searchPaths": [
                    "Iterable[str]"
                ],
                "defaultConfig": [
                    "Optional[str]"
                ],
                "defaultConfigName": [
                    "str"
                ]
            }
        },
        "Configuration.section": {
            "name": "section",
            "location": 43,
            "return": [
                "Dict[(_S, str)]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Type[_S]"
                ],
                "overrides": [
                    "Mapping[(_S, Optional[str])]"
                ]
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "addSettingsToArgumentGroup.readSettings": {
            "name": "readSettings",
            "location": 84,
            "return": [],
            "arguments": {
                "config": [],
                "ns": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/csvsectionslicer.py": {
        "parseSectionsForCSV": {
            "name": "parseSectionsForCSV",
            "location": 53,
            "return": [
                "List[CSVSectionResult]"
            ],
            "arguments": {
                "csvFile": [
                    "Iterator[str]"
                ],
                "criteria": [
                    "List[CSVSectionCriterion]"
                ]
            }
        },
        "CSVSectionCriterion.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startSectionRowMatch": [
                    "List[str]"
                ],
                "endSectionRowMatch": [
                    "List[str]"
                ],
                "rowFilter": [
                    "Optional[Callable[([List[str]], Optional[List[str]])]]"
                ]
            }
        },
        "CSVSectionCriterion.startSectionRowMatch": {
            "name": "startSectionRowMatch",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.endSectionRowMatch": {
            "name": "endSectionRowMatch",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.rowFilter": {
            "name": "rowFilter",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "parseSectionsForCSV.rowEndsSection": {
            "name": "rowEndsSection",
            "location": 69,
            "return": [],
            "arguments": {
                "row": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/parsetools.py": {
        "lenientParse": {
            "name": "lenientParse",
            "location": 9,
            "return": [
                "Iterable[_U]"
            ],
            "arguments": {
                "xs": [
                    "Iterable[_T]"
                ],
                "transform": [
                    "Callable[([_T], _U)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "lenientParse.f": {
            "name": "f",
            "location": 12,
            "return": [],
            "arguments": {
                "input": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/__init__.py": {},
    "bankroll-broker-master/tests/helpers.py": {
        "optionals": {
            "name": "optionals",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "inner": []
            }
        },
        "cashAmounts": {
            "name": "cashAmounts",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "positionQuantities": {
            "name": "positionQuantities",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ],
                "allow_zero": [
                    "bool"
                ]
            }
        },
        "multipliers": {
            "name": "multipliers",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "strikes": {
            "name": "strikes",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "cash": {
            "name": "cash",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "quantity": []
            }
        },
        "exchanges": {
            "name": "exchanges",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "bonds": {
            "name": "bonds",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "exchange": []
            }
        },
        "stocks": {
            "name": "stocks",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "exchange": []
            }
        },
        "options": {
            "name": "options",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "underlying": [],
                "currency": [],
                "optionType": [],
                "expiration": [],
                "strike": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "futuresOptions": {
            "name": "futuresOptions",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "underlying": [],
                "currency": [],
                "optionType": [],
                "expiration": [],
                "strike": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "futures": {
            "name": "futures",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "forex": {
            "name": "forex",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "baseCurrency": [],
                "quoteCurrency": [],
                "exchange": []
            }
        },
        "instruments": {
            "name": "instruments",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "exchange": []
            }
        },
        "positions": {
            "name": "positions",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "instrument": [],
                "quantity": [],
                "costBasis": []
            }
        },
        "dividendPayments": {
            "name": "dividendPayments",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": [],
                "stock": [],
                "proceeds": []
            }
        },
        "trades": {
            "name": "trades",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": [],
                "instrument": [],
                "quantity": [],
                "amount": [],
                "fees": [],
                "flags": []
            }
        },
        "activity": {
            "name": "activity",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": []
            }
        },
        "quotes": {
            "name": "quotes",
            "location": 255,
            "return": [
                "Any"
            ],
            "arguments": {
                "bid": [],
                "ask": [],
                "last": [],
                "close": [],
                "grow_ask": [
                    "bool"
                ]
            }
        },
        "uniformCurrencyQuotes": {
            "name": "uniformCurrencyQuotes",
            "location": 273,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "bid": [],
                "ask": [],
                "last": [],
                "close": [],
                "grow_ask": [
                    "bool"
                ]
            }
        },
        "accountBalances": {
            "name": "accountBalances",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "currencies": [],
                "quantities": []
            }
        },
        "cashUSD": {
            "name": "cashUSD",
            "location": 417,
            "return": [
                "Any"
            ],
            "arguments": {
                "amount": [
                    "decimal.Decimal"
                ]
            }
        },
        "splitAndStripCSVString": {
            "name": "splitAndStripCSVString",
            "location": 421,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "StubAccount.fromSettings": {
            "name": "fromSettings",
            "location": 380,
            "return": [
                "_TStubAccount"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStubAccount]"
                ],
                "settings": [
                    "Mapping[(Any, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "StubAccount.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "list"
                ],
                "activity": [
                    "list"
                ],
                "balance": []
            }
        },
        "StubAccount.positions": {
            "name": "positions",
            "location": 396,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubAccount.activity": {
            "name": "activity",
            "location": 399,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubAccount.balance": {
            "name": "balance",
            "location": 402,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_aggregator.py": {
        "StubRecursiveAccount.fromSettings": {
            "name": "fromSettings",
            "location": 20,
            "return": [
                "_TStubRecursiveAccount"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStubRecursiveAccount]"
                ],
                "settings": [
                    "Mapping[(Any, str)]"
                ],
                "lenient": [
                    "bool"
                ]
            }
        },
        "StubRecursiveAccount.positions": {
            "name": "positions",
            "location": 25,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubRecursiveAccount.activity": {
            "name": "activity",
            "location": 28,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubRecursiveAccount.balance": {
            "name": "balance",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountAggregator.testDataAddsUp": {
            "name": "testDataAddsUp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "accounts": []
            }
        },
        "TestAccountAggregator.testDiscoversRecursiveDescendants": {
            "name": "testDiscoversRecursiveDescendants",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_configuration.py": {
        "TestSettings.sectionName": {
            "name": "sectionName",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestConfiguration.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfiguration.testSettingsApplied": {
            "name": "testSettingsApplied",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfiguration.testOverrides": {
            "name": "testOverrides",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TestConfiguration.testAddSettingsToArgumentGroup": {
            "name": "testAddSettingsToArgumentGroup",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_csvsectionslicer.py": {
        "TestFidelityPositionSections.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_stocksSection": {
            "name": "test_stocksSection",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_bondsSection": {
            "name": "test_bondsSection",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_optionsSection": {
            "name": "test_optionsSection",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactionsSections.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactionsSections.test_transactionsSection": {
            "name": "test_transactionsSection",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.setUp": {
            "name": "setUp",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.test_investmentsSection": {
            "name": "test_investmentsSection",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.test_tradesSection": {
            "name": "test_tradesSection",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_parsetools.py": {
        "failingTransform": {
            "name": "failingTransform",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "_": []
            }
        },
        "TestParsetools.test_lenientParseNonLenient": {
            "name": "test_lenientParseNonLenient",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestParsetools.test_lenientParseEmpty": {
            "name": "test_lenientParseEmpty",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "lenient": []
            }
        },
        "TestParsetools.test_lenientParseLenient": {
            "name": "test_lenientParseLenient",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        }
    },
    "bankroll-broker-master/tests/__init__.py": {}
}
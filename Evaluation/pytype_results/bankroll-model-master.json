{
    "bankroll-model-master/setup.py": {},
    "bankroll-model-master/bankroll/model/activity.py": {
        "CashPayment.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.quantizeQuantity": {
            "name": "quantizeQuantity",
            "location": 50,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "quantity": [
                    "decimal.Decimal"
                ]
            }
        },
        "Trade.__post_init__": {
            "name": "__post_init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.price": {
            "name": "price",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.proceeds": {
            "name": "proceeds",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.action": {
            "name": "action",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.__str__": {
            "name": "__str__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/balance.py": {
        "AccountBalance.__post_init__": {
            "name": "__post_init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountBalance.__add__": {
            "name": "__add__",
            "location": 32,
            "return": [
                "_TAccountBalance"
            ],
            "arguments": {
                "self": [
                    "_TAccountBalance"
                ],
                "other": []
            }
        },
        "AccountBalance.__sub__": {
            "name": "__sub__",
            "location": 57,
            "return": [
                "_TAccountBalance"
            ],
            "arguments": {
                "self": [
                    "_TAccountBalance"
                ],
                "other": []
            }
        },
        "AccountBalance.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/cash.py": {
        "Currency.__lt__": {
            "name": "__lt__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.format": {
            "name": "format",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "decimal.Decimal"
                ]
            }
        },
        "Currency.formatWithPadding": {
            "name": "formatWithPadding",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "decimal.Decimal"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "Cash.quantize": {
            "name": "quantize",
            "location": 65,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "d": [
                    "decimal.Decimal"
                ]
            }
        },
        "Cash.__post_init__": {
            "name": "__post_init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cash.paddedString": {
            "name": "paddedString",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "padding": [
                    "int"
                ]
            }
        },
        "Cash.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cash.__add__": {
            "name": "__add__",
            "location": 80,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ],
                "other": [
                    "Union[(int, decimal.Decimal, _TCash)]"
                ]
            }
        },
        "Cash.__sub__": {
            "name": "__sub__",
            "location": 95,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ],
                "other": [
                    "Union[(int, decimal.Decimal, _TCash)]"
                ]
            }
        },
        "Cash.__mul__": {
            "name": "__mul__",
            "location": 116,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ],
                "other": [
                    "Union[(int, decimal.Decimal)]"
                ]
            }
        },
        "Cash.__truediv__": {
            "name": "__truediv__",
            "location": 139,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ],
                "other": [
                    "Union[(int, decimal.Decimal)]"
                ]
            }
        },
        "Cash.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 152,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ],
                "other": [
                    "Union[(int, decimal.Decimal)]"
                ]
            }
        },
        "Cash.__neg__": {
            "name": "__neg__",
            "location": 158,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ]
            }
        },
        "Cash.__abs__": {
            "name": "__abs__",
            "location": 161,
            "return": [
                "_TCash"
            ],
            "arguments": {
                "self": [
                    "_TCash"
                ]
            }
        },
        "Cash.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cash.__lt__": {
            "name": "__lt__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(Cash, int, decimal.Decimal)]"
                ]
            }
        }
    },
    "bankroll-model-master/bankroll/model/converter.py": {
        "dataframeForModelObjects": {
            "name": "dataframeForModelObjects",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "items": [
                    "Sequence[_ConvertibleModel]"
                ]
            }
        },
        "_dataframeColumnFunctions": {
            "name": "_dataframeColumnFunctions",
            "location": 25,
            "return": [
                "Dict[(str, Callable[([_ConvertibleModel], Any)])]"
            ],
            "arguments": {
                "model": [
                    "_ConvertibleModel"
                ]
            }
        }
    },
    "bankroll-model-master/bankroll/model/instrument.py": {
        "Instrument.quantizeMultiplier": {
            "name": "quantizeMultiplier",
            "location": 25,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "multiplier": [
                    "decimal.Decimal"
                ]
            }
        },
        "Instrument.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.__lt__": {
            "name": "__lt__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Instrument"
                ]
            }
        },
        "Instrument.__format__": {
            "name": "__format__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str"
                ]
            }
        },
        "Instrument.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stock.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "currency": [
                    "model.cash.Currency"
                ],
                "exchange": [
                    "Optional[str]"
                ]
            }
        },
        "Bond.validBondSymbol": {
            "name": "validBondSymbol",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "symbol": [
                    "str"
                ]
            }
        },
        "Bond.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "currency": [
                    "model.cash.Currency"
                ],
                "exchange": [
                    "Optional[str]"
                ],
                "validateSymbol": [
                    "bool"
                ]
            }
        },
        "Option.quantizeStrike": {
            "name": "quantizeStrike",
            "location": 102,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "strike": [
                    "decimal.Decimal"
                ]
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "underlying": [
                    "str"
                ],
                "currency": [
                    "model.cash.Currency"
                ],
                "optionType": [
                    "OptionType"
                ],
                "expiration": [
                    "datetime.date"
                ],
                "strike": [
                    "decimal.Decimal"
                ],
                "multiplier": [
                    "decimal.Decimal"
                ],
                "exchange": [
                    "Optional[str]"
                ],
                "symbol": [
                    "Optional[str]"
                ]
            }
        },
        "FutureOption.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "underlying": [
                    "str"
                ],
                "currency": [
                    "model.cash.Currency"
                ],
                "optionType": [
                    "OptionType"
                ],
                "expiration": [
                    "datetime.date"
                ],
                "strike": [
                    "decimal.Decimal"
                ],
                "multiplier": [
                    "decimal.Decimal"
                ],
                "exchange": [
                    "Optional[str]"
                ]
            }
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "currency": [
                    "model.cash.Currency"
                ],
                "multiplier": [
                    "decimal.Decimal"
                ],
                "expiration": [
                    "datetime.date"
                ],
                "exchange": [
                    "Optional[str]"
                ]
            }
        },
        "Forex.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baseCurrency": [
                    "model.cash.Currency"
                ],
                "quoteCurrency": [
                    "model.cash.Currency"
                ],
                "exchange": [
                    "Optional[str]"
                ]
            }
        },
        "Forex.quoteCurrency": {
            "name": "quoteCurrency",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/position.py": {
        "Position.quantizeQuantity": {
            "name": "quantizeQuantity",
            "location": 18,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "cls": [],
                "quantity": [
                    "decimal.Decimal"
                ]
            }
        },
        "Position.averagePrice": {
            "name": "averagePrice",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Position.__post_init__": {
            "name": "__post_init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__add__": {
            "name": "__add__",
            "location": 47,
            "return": [
                "_TPosition"
            ],
            "arguments": {
                "self": [
                    "_TPosition"
                ],
                "other": []
            }
        },
        "Position.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/quote.py": {
        "_allEqual": {
            "name": "_allEqual",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "Iterable[_Item]"
                ]
            }
        },
        "Quote.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.midpoint": {
            "name": "midpoint",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Quote.market": {
            "name": "market",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-model-master/bankroll/model/__init__.py": {},
    "bankroll-model-master/tests/helpers.py": {
        "optionals": {
            "name": "optionals",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "inner": []
            }
        },
        "cashAmounts": {
            "name": "cashAmounts",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "positionQuantities": {
            "name": "positionQuantities",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ],
                "allow_zero": [
                    "bool"
                ]
            }
        },
        "multipliers": {
            "name": "multipliers",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "strikes": {
            "name": "strikes",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "cash": {
            "name": "cash",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "quantity": []
            }
        },
        "exchanges": {
            "name": "exchanges",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "bonds": {
            "name": "bonds",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "exchange": []
            }
        },
        "stocks": {
            "name": "stocks",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "exchange": []
            }
        },
        "options": {
            "name": "options",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "underlying": [],
                "currency": [],
                "optionType": [],
                "expiration": [],
                "strike": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "futuresOptions": {
            "name": "futuresOptions",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "underlying": [],
                "currency": [],
                "optionType": [],
                "expiration": [],
                "strike": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "futures": {
            "name": "futures",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "symbol": [],
                "currency": [],
                "multiplier": [],
                "exchange": []
            }
        },
        "forex": {
            "name": "forex",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "baseCurrency": [],
                "quoteCurrency": [],
                "exchange": []
            }
        },
        "instruments": {
            "name": "instruments",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "exchange": []
            }
        },
        "positions": {
            "name": "positions",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {
                "instrument": [],
                "quantity": [],
                "costBasis": []
            }
        },
        "dividendPayments": {
            "name": "dividendPayments",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": [],
                "stock": [],
                "proceeds": []
            }
        },
        "trades": {
            "name": "trades",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": [],
                "instrument": [],
                "quantity": [],
                "amount": [],
                "fees": [],
                "flags": []
            }
        },
        "activity": {
            "name": "activity",
            "location": 249,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": []
            }
        },
        "quotes": {
            "name": "quotes",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "bid": [],
                "ask": [],
                "last": [],
                "close": [],
                "grow_ask": [
                    "bool"
                ]
            }
        },
        "uniformCurrencyQuotes": {
            "name": "uniformCurrencyQuotes",
            "location": 271,
            "return": [
                "Any"
            ],
            "arguments": {
                "currency": [],
                "bid": [],
                "ask": [],
                "last": [],
                "close": [],
                "grow_ask": [
                    "bool"
                ]
            }
        },
        "accountBalances": {
            "name": "accountBalances",
            "location": 290,
            "return": [
                "Any"
            ],
            "arguments": {
                "currencies": [],
                "quantities": []
            }
        },
        "cashUSD": {
            "name": "cashUSD",
            "location": 372,
            "return": [
                "Any"
            ],
            "arguments": {
                "amount": [
                    "decimal.Decimal"
                ]
            }
        },
        "splitAndStripCSVString": {
            "name": "splitAndStripCSVString",
            "location": 376,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "bankroll-model-master/tests/test_converter.py": {
        "TestModelConverter.test_convertTrades": {
            "name": "test_convertTrades",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "trades": []
            }
        },
        "TestModelConverter.test_convertPositions": {
            "name": "test_convertPositions",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "positions": []
            }
        }
    },
    "bankroll-model-master/tests/test_model.py": {
        "TestCash.test_addCash": {
            "name": "test_addCash",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "a": [],
                "b": []
            }
        },
        "TestCash.test_subtractCash": {
            "name": "test_subtractCash",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "a": [],
                "b": []
            }
        },
        "TestCash.test_addIncompatibleCash": {
            "name": "test_addIncompatibleCash",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "curs": [],
                "a": [],
                "b": []
            }
        },
        "TestCash.test_subtractIncompatibleCash": {
            "name": "test_subtractIncompatibleCash",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "curs": [],
                "a": [],
                "b": []
            }
        },
        "TestCash.test_multiplyCash": {
            "name": "test_multiplyCash",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "cashA": [],
                "b": []
            }
        },
        "TestCash.test_divideCash": {
            "name": "test_divideCash",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "cashA": [],
                "b": []
            }
        },
        "TestCash.test_cashEqualsSelf": {
            "name": "test_cashEqualsSelf",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "cashA": []
            }
        },
        "TestCash.test_cashEquality": {
            "name": "test_cashEquality",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "a": []
            }
        },
        "TestCash.test_cashInequality": {
            "name": "test_cashInequality",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "a": [],
                "b": []
            }
        },
        "TestCash.test_cashComparison": {
            "name": "test_cashComparison",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "cur": [],
                "a": [],
                "b": []
            }
        },
        "TestPosition.test_positionEqualsItself": {
            "name": "test_positionEqualsItself",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TestPosition.test_combineError": {
            "name": "test_combineError",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "TestPosition.test_combineIncreasesBasis": {
            "name": "test_combineIncreasesBasis",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestPosition.test_combineIsCommutative": {
            "name": "test_combineIsCommutative",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "aQty": [],
                "aPrice": [],
                "bQty": [],
                "bPrice": []
            }
        },
        "TestPosition.test_combineToZero": {
            "name": "test_combineToZero",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TestInstrument.test_instrumentEqualsItself": {
            "name": "test_instrumentEqualsItself",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestInstrument.test_instrumentHashStable": {
            "name": "test_instrumentHashStable",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestInstrument.test_differentInstrumentTypesNotEqual": {
            "name": "test_differentInstrumentTypesNotEqual",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "TestOption.test_spxSymbol": {
            "name": "test_spxSymbol",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_lamrSymbol": {
            "name": "test_lamrSymbol",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuote.test_quoteEqualsItself": {
            "name": "test_quoteEqualsItself",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "q": []
            }
        },
        "TestQuote.test_quoteEquality": {
            "name": "test_quoteEquality",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "currency": [],
                "bid": [],
                "ask": [],
                "last": [],
                "close": []
            }
        },
        "TestTrade.test_tradeEqualsItself": {
            "name": "test_tradeEqualsItself",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TestTrade.test_signOfTradePrice": {
            "name": "test_signOfTradePrice",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TestAccountBalance.test_zeroEntriesIgnoredForEquality": {
            "name": "test_zeroEntriesIgnoredForEquality",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TestAccountBalance.test_unhashable": {
            "name": "test_unhashable",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "balance": []
            }
        },
        "TestAccountBalance.test_additionAndSubtraction": {
            "name": "test_additionAndSubtraction",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        }
    },
    "bankroll-model-master/tests/__init__.py": {}
}
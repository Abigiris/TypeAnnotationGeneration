{
    "beautiful-python-3-master/algorithms/algorithms.py": {
        "median_up_to_5": {
            "name": "median_up_to_5",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": []
            }
        },
        "average_pivot": {
            "name": "average_pivot",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": []
            }
        },
        "partition": {
            "name": "partition",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": [],
                "pivot_index": []
            }
        },
        "quicksort": {
            "name": "quicksort",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": [],
                "pivot_fn": []
            }
        },
        "quickselect": {
            "name": "quickselect",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "k": [],
                "pivot_fn": []
            }
        },
        "_quickselect": {
            "name": "_quickselect",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "k": [],
                "pivot_fn": [],
                "start": [],
                "end": []
            }
        },
        "median_of_medians_pivot": {
            "name": "median_of_medians_pivot",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": []
            }
        },
        "median_of_medians": {
            "name": "median_of_medians",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "k": []
            }
        }
    },
    "beautiful-python-3-master/algorithms/algorithms_test.py": {
        "TestPartition.test_partition": {
            "name": "test_partition",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuicksort.test_quicksort": {
            "name": "test_quicksort",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuickselect.test_quickselect": {
            "name": "test_quickselect",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMedianOfMedians.test_median_of_medians": {
            "name": "test_median_of_medians",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/algorithms/sorting.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "key_fn": []
            }
        },
        "merge_sort": {
            "name": "merge_sort",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": []
            }
        },
        "merge_adjacent_runs": {
            "name": "merge_adjacent_runs",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "half": [],
                "end": []
            }
        }
    },
    "beautiful-python-3-master/algorithms/sorting_hints.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": [],
                "key_fn": []
            }
        },
        "merge_sort": {
            "name": "merge_sort",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "end": []
            }
        },
        "merge_adjacent_runs": {
            "name": "merge_adjacent_runs",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "array": [],
                "start": [],
                "half": [],
                "end": []
            }
        }
    },
    "beautiful-python-3-master/algorithms/sorting_test.py": {
        "TestCountingSort.test_counting_sort": {
            "name": "test_counting_sort",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeSort.test_merge_sort": {
            "name": "test_merge_sort",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/data_structures/bloom_filter.py": {
        "md5_to_int": {
            "name": "md5_to_int",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "item": []
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BloomFilter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BloomFilter.add": {
            "name": "add",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BloomFilter.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "beautiful-python-3-master/data_structures/bloom_filter_hints.py": {
        "md5_to_int": {
            "name": "md5_to_int",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "item": []
            }
        },
        "main": {
            "name": "main",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BloomFilter.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BloomFilter.add": {
            "name": "add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "BloomFilter.__contains__": {
            "name": "__contains__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "beautiful-python-3-master/data_structures/skip_list.py": {
        "NilNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_key": []
            }
        },
        "NilNode.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NilNode.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipListNode.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "search_key": [],
                "value": []
            }
        },
        "SkipListNode.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipListNode.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "max_level": [],
                "min_key": [],
                "max_key": []
            }
        },
        "SkipList._traverse_list": {
            "name": "_traverse_list",
            "location": 81,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "search_key": [],
                "with_updates": []
            }
        },
        "SkipList._get_random_level": {
            "name": "_get_random_level",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.search": {
            "name": "search",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "search_key": []
            }
        },
        "SkipList.insert": {
            "name": "insert",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_key": [],
                "new_value": []
            }
        },
        "SkipList.delete": {
            "name": "delete",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_key": []
            }
        },
        "SkipList._level_generator": {
            "name": "_level_generator",
            "location": 196,
            "return": [
                "Generator[(SkipListNode, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "SkipList.__iter__": {
            "name": "__iter__",
            "location": 208,
            "return": [
                "Generator[(SkipListNode, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkipList.__repr__": {
            "name": "__repr__",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/data_structures/skip_list_test.py": {
        "TestSkipList.test_skip_list": {
            "name": "test_skip_list",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/design_patterns/behavioural/command_mixer.py": {
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VolumeController.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_volume": [],
                "max_volume": []
            }
        },
        "VolumeController.raise_volume": {
            "name": "raise_volume",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "increase": []
            }
        },
        "VolumeController.decrease_volume": {
            "name": "decrease_volume",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decrease": []
            }
        },
        "VolumeController.boost_volume": {
            "name": "boost_volume",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeController.mute_volume": {
            "name": "mute_volume",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeController.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeCommand.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "VolumeCommand.do_action": {
            "name": "do_action",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaiseVolumeCommand.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [],
                "increment": []
            }
        },
        "RaiseVolumeCommand.do_action": {
            "name": "do_action",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecreaseVolumeCommand.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [],
                "decrement": []
            }
        },
        "DecreaseVolumeCommand.do_action": {
            "name": "do_action",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoostVolumeCommand.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "BoostVolumeCommand.do_action": {
            "name": "do_action",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuteVolumeCommand.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "MuteVolumeCommand.do_action": {
            "name": "do_action",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIButton.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "command": []
            }
        },
        "GUIButton.on_click": {
            "name": "on_click",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIButton.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeControlGUI.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeControlGUI.add_button": {
            "name": "add_button",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": []
            }
        },
        "VolumeControlGUI.click": {
            "name": "click",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "VolumeControlGUI.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/design_patterns/behavioural/iterator_graph.py": {
        "main": {
            "name": "main",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_node": {
            "name": "add_node",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node1": [],
                "node2": []
            }
        },
        "Graph.get_adjacents": {
            "name": "get_adjacents",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Graph.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIterator.get_next": {
            "name": "get_next",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIterator.is_done": {
            "name": "is_done",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BFSIterator.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "source": []
            }
        },
        "BFSIterator.get_next": {
            "name": "get_next",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BFSIterator.is_done": {
            "name": "is_done",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DFSIterator.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "source": []
            }
        },
        "DFSIterator.get_next": {
            "name": "get_next",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DFSIterator.get_next_helper": {
            "name": "get_next_helper",
            "location": 112,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "curr_node": [
                    "_T0@@"
                ]
            }
        },
        "DFSIterator.is_done": {
            "name": "is_done",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTraversal.get_iterator": {
            "name": "get_iterator",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BFSTraversal.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "source": []
            }
        },
        "BFSTraversal.get_iterator": {
            "name": "get_iterator",
            "location": 138,
            "return": [
                "BFSIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DFSTraversal.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "source": []
            }
        },
        "DFSTraversal.get_iterator": {
            "name": "get_iterator",
            "location": 148,
            "return": [
                "DFSIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphExplorer.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traversal": []
            }
        },
        "GraphExplorer.explore": {
            "name": "explore",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/design_patterns/mix/command_decorator_mixer.py": {
        "main": {
            "name": "main",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VolumeController.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_volume": [],
                "max_volume": []
            }
        },
        "VolumeController.raise_volume": {
            "name": "raise_volume",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "increase": []
            }
        },
        "VolumeController.decrease_volume": {
            "name": "decrease_volume",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decrease": []
            }
        },
        "VolumeController.boost_volume": {
            "name": "boost_volume",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeController.mute_volume": {
            "name": "mute_volume",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeController.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeCommand.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "VolumeCommand.do_action": {
            "name": "do_action",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndoableVolumeCommand.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "UndoableVolumeCommand.undo_action": {
            "name": "undo_action",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleUndoCommand.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "SingleUndoCommand.do_action": {
            "name": "do_action",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleUndoCommand.undo_action": {
            "name": "undo_action",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RaiseVolumeCommand.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [],
                "increment": []
            }
        },
        "RaiseVolumeCommand.do_action": {
            "name": "do_action",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecreaseVolumeCommand.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [],
                "decrement": []
            }
        },
        "DecreaseVolumeCommand.do_action": {
            "name": "do_action",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoostVolumeCommand.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "BoostVolumeCommand.do_action": {
            "name": "do_action",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuteVolumeCommand.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "MuteVolumeCommand.do_action": {
            "name": "do_action",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIButton.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "command": []
            }
        },
        "GUIButton.on_click": {
            "name": "on_click",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIButton.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndoableGUIButton.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "command": []
            }
        },
        "UndoableGUIButton.cancel": {
            "name": "cancel",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndoableGUIButton.__repr__": {
            "name": "__repr__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeControlGUI.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeControlGUI.add_button": {
            "name": "add_button",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": []
            }
        },
        "VolumeControlGUI.click": {
            "name": "click",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "VolumeControlGUI.cancel": {
            "name": "cancel",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumeControlGUI.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/design_patterns/structural/decorator_menu.py": {
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MenuConsumation.get_price": {
            "name": "get_price",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MenuConsumation.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheeseBurger.get_price": {
            "name": "get_price",
            "location": 18,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrenchFries.get_price": {
            "name": "get_price",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumationWithExtra.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumation": []
            }
        },
        "ConsumationWithExtra.get_price": {
            "name": "get_price",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumationWithExtra.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraMaionnaise.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumation": []
            }
        },
        "ExtraMaionnaise.get_price": {
            "name": "get_price",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraKetchup.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumation": []
            }
        },
        "ExtraKetchup.get_price": {
            "name": "get_price",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShopClient.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShopClient.add_consumation": {
            "name": "add_consumation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumation": []
            }
        },
        "ShopClient.print_order": {
            "name": "print_order",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShopClient.print_total": {
            "name": "print_total",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "beautiful-python-3-master/design_patterns/structural/proxy_os.py": {
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_type": []
            }
        },
        "FileSystem.list_files": {
            "name": "list_files",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystem.create_file": {
            "name": "create_file",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FileSystem.remove_file": {
            "name": "remove_file",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "OSFileSystem.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSFileSystem.list_files": {
            "name": "list_files",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSFileSystem.create_file": {
            "name": "create_file",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "OSFileSystem.remove_file": {
            "name": "remove_file",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AuthenticatedUserFileSystem.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "AuthenticatedUserFileSystem.list_files": {
            "name": "list_files",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticatedUserFileSystem.create_file": {
            "name": "create_file",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AuthenticatedUserFileSystem.remove_file": {
            "name": "remove_file",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fs": []
            }
        },
        "Client.list_files": {
            "name": "list_files",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.create_file": {
            "name": "create_file",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Client.remove_file": {
            "name": "remove_file",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    }
}
{
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/app.py": {
        "shutdown_session": {
            "name": "shutdown_session",
            "location": 23,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "realtime": {
            "name": "realtime",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "_spreads_list_view": {
            "name": "_spreads_list_view",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "queryset": []
            }
        },
        "today": {
            "name": "today",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "all_spreads": {
            "name": "all_spreads",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "not_found_error": {
            "name": "not_found_error",
            "location": 74,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "internal_error": {
            "name": "internal_error",
            "location": 79,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "start_monitor_thread": {
            "name": "start_monitor_thread",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/config.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/models.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/trader.py": {
        "Trade.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sell_order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ],
                "buy_order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        },
        "Trader.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        },
        "Trader.run": {
            "name": "run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "Trader._should_use_this_spread": {
            "name": "_should_use_this_spread",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trader._make_trade": {
            "name": "_make_trade",
            "location": 60,
            "return": [
                "Trade"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trader._store_trade": {
            "name": "_store_trade",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "Trade"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/__init__.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/currency.py": {
        "CurrencyPair.fiat_symbol": {
            "name": "fiat_symbol",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/log.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 6,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "logger_name": [],
                "log_file": [],
                "level": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/monitor.py": {
        "Monitor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor._calculate_spreads": {
            "name": "_calculate_spreads",
            "location": 33,
            "return": [
                "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/order.py": {
        "Order.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "order_id": [
                    "str"
                ]
            }
        },
        "Order.get_state": {
            "name": "get_state",
            "location": 18,
            "return": [
                "OrderState"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/settings_sample.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/spread_detection.py": {
        "Spread.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_one": [
                    "bitcoin_arbitrage.monitor.exchange.Exchange"
                ],
                "exchange_two": [
                    "bitcoin_arbitrage.monitor.exchange.Exchange"
                ]
            }
        },
        "Spread.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spread.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spread.summary": {
            "name": "summary",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spread.spread_with_currency": {
            "name": "spread_with_currency",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spread.spread_percentage": {
            "name": "spread_percentage",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spread._calculate_spread": {
            "name": "_calculate_spread",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spread.is_above_trading_thresehold": {
            "name": "is_above_trading_thresehold",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/__init__.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/__main__.py": {},
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/exchange/bitfinex.py": {
        "Bitfinex.ticker_url": {
            "name": "ticker_url",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitfinex.limit_sell_order": {
            "name": "limit_sell_order",
            "location": 24,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Bitfinex.limit_buy_order": {
            "name": "limit_buy_order",
            "location": 27,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Bitfinex.get_order_state": {
            "name": "get_order_state",
            "location": 30,
            "return": [
                "bitcoin_arbitrage.monitor.order.OrderState"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/exchange/bitstamp.py": {
        "Bitstamp.ticker_url": {
            "name": "ticker_url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitstamp.get_account_balance": {
            "name": "get_account_balance",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bitstamp._place_limit_order": {
            "name": "_place_limit_order",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "str"
                ],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Bitstamp.limit_sell_order": {
            "name": "limit_sell_order",
            "location": 51,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Bitstamp.limit_buy_order": {
            "name": "limit_buy_order",
            "location": 55,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Bitstamp.get_order_state": {
            "name": "get_order_state",
            "location": 59,
            "return": [
                "bitcoin_arbitrage.monitor.order.OrderState"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/exchange/gdax.py": {
        "GdaxAuth.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "secret": [
                    "str"
                ],
                "passphrase": [
                    "str"
                ]
            }
        },
        "GdaxAuth.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_T0"
                ]
            }
        },
        "Gdax.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency_pair": [
                    "bitcoin_arbitrage.monitor.currency.CurrencyPair"
                ],
                "api_key": [
                    "str"
                ],
                "secret_key": [
                    "str"
                ],
                "passphrase": [
                    "str"
                ]
            }
        },
        "Gdax.ticker_url": {
            "name": "ticker_url",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gdax._place_limit_order": {
            "name": "_place_limit_order",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "str"
                ],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Gdax.limit_sell_order": {
            "name": "limit_sell_order",
            "location": 78,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Gdax.limit_buy_order": {
            "name": "limit_buy_order",
            "location": 82,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Gdax.get_order_state": {
            "name": "get_order_state",
            "location": 86,
            "return": [
                "bitcoin_arbitrage.monitor.order.OrderState"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/exchange/__init__.py": {
        "Exchange.name": {
            "name": "name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.currency_pair_api_representation": {
            "name": "currency_pair_api_representation",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.base_url": {
            "name": "base_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.ticker_url": {
            "name": "ticker_url",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency_pair": [
                    "bitcoin_arbitrage.monitor.currency.CurrencyPair"
                ]
            }
        },
        "Exchange.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.summary": {
            "name": "summary",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.update_prices": {
            "name": "update_prices",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.limit_buy_order": {
            "name": "limit_buy_order",
            "location": 64,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Exchange.limit_sell_order": {
            "name": "limit_sell_order",
            "location": 68,
            "return": [
                "bitcoin_arbitrage.monitor.order.Order"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "limit": [
                    "float"
                ]
            }
        },
        "Exchange.get_order_state": {
            "name": "get_order_state",
            "location": 71,
            "return": [
                "bitcoin_arbitrage.monitor.order.OrderState"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        },
        "Exchange.cancel_order": {
            "name": "cancel_order",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bitcoin_arbitrage.monitor.order.Order"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/csv_writer.py": {
        "AbstractSpreadToCSV.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "should_override": [
                    "bool"
                ],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        },
        "AbstractSpreadToCSV.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "LastSpreadsToCSV.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "should_override": [],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        },
        "SpreadHistoryToCSV.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "should_override": [],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/db_commit.py": {
        "SpreadHistoryToDB.run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.models.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/__init__.py": {
        "UpdateAction.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        },
        "UpdateAction.run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/notification/pushbullet.py": {
        "Pushbullet.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spread_threshold": [
                    "int"
                ],
                "api_key": [
                    "str"
                ]
            }
        },
        "Pushbullet.run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/notification/stdout.py": {
        "StdoutNotification.run": {
            "name": "run",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/monitor/update/notification/__init__.py": {
        "NotificationService.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spread_threshold": [
                    "Optional[int]"
                ]
            }
        },
        "NotificationService.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ],
                "exchanges": [
                    "List[bitcoin_arbitrage.monitor.exchange.Exchange]"
                ],
                "timestamp": [
                    "float"
                ]
            }
        },
        "NotificationService._should_notify": {
            "name": "_should_notify",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time_between_notifications": []
            }
        },
        "NotificationService._get_spread_for_notification": {
            "name": "_get_spread_for_notification",
            "location": 35,
            "return": [
                "Optional[bitcoin_arbitrage.monitor.spread_detection.Spread]"
            ],
            "arguments": {
                "self": [],
                "spreads": [
                    "List[bitcoin_arbitrage.monitor.spread_detection.Spread]"
                ]
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/bitcoin_arbitrage/static/vendors/jqvmap/create/jqvmap.py": {
        "JQVMap.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "language": []
            }
        },
        "JQVMap.addPath": {
            "name": "addPath",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "code": [],
                "name": []
            }
        },
        "JQVMap.getJSCode": {
            "name": "getJSCode",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Converter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Converter.convert": {
            "name": "convert",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": [],
                "output_file": []
            }
        },
        "Converter.renderMapInset": {
            "name": "renderMapInset",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_source": [],
                "codes": [],
                "left": [],
                "top": [],
                "width": []
            }
        },
        "Geometry.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "geometry": [],
                "properties": []
            }
        },
        "GeometryProperty.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GeometryProperty.equals": {
            "name": "equals",
            "location": 215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "context": []
            }
        },
        "GeometryProperty.belongs_to": {
            "name": "belongs_to",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "context": []
            }
        },
        "GeometryProperty.is_subset": {
            "name": "is_subset",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "context": []
            }
        },
        "GeometryProperty.to_python": {
            "name": "to_python",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DataSource.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "DataSource.load_data": {
            "name": "load_data",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.create_grammar": {
            "name": "create_grammar",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.output": {
            "name": "output",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "DataSource.output_ogr": {
            "name": "output_ogr",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "DataSource.output_jvm": {
            "name": "output_jvm",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "PolygonSimplifier.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "geometries": []
            }
        },
        "PolygonSimplifier.simplifyRing": {
            "name": "simplifyRing",
            "location": 389,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ring": []
            }
        },
        "PolygonSimplifier.simplifyPolygon": {
            "name": "simplifyPolygon",
            "location": 434,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "polygon": []
            }
        },
        "PolygonSimplifier.simplify": {
            "name": "simplify",
            "location": 445,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Processor.process": {
            "name": "process",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor.read_data": {
            "name": "read_data",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.write_data": {
            "name": "write_data",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.union": {
            "name": "union",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.merge": {
            "name": "merge",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.join_data": {
            "name": "join_data",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.remove": {
            "name": "remove",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.remove_fields": {
            "name": "remove_fields",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.remove_other_fields": {
            "name": "remove_other_fields",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.buffer": {
            "name": "buffer",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.simplify_adjancent_polygons": {
            "name": "simplify_adjancent_polygons",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.intersect_rect": {
            "name": "intersect_rect",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        },
        "Processor.remove_small_polygons": {
            "name": "remove_small_polygons",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "data_source": []
            }
        }
    },
    "bitcoin-arbitrage-trading-bot-master/scripts/_reset_db.py": {},
    "bitcoin-arbitrage-trading-bot-master/tests/test_notification.py": {
        "test_should_notify": {
            "name": "test_should_notify",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bitcoin-arbitrage-trading-bot-master/tests/test_spread.py": {
        "test_calculate_spread": {
            "name": "test_calculate_spread",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_different_currencies_exception": {
            "name": "test_different_currencies_exception",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
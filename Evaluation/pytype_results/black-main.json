{
    "black-main/fuzz.py": {
        "test_idempotent_any_syntatically_valid_python": {
            "name": "test_idempotent_any_syntatically_valid_python",
            "location": 40,
            "return": [],
            "arguments": {
                "src_contents": [],
                "mode": []
            }
        }
    },
    "black-main/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "find_python_files": {
            "name": "find_python_files",
            "location": 22,
            "return": [],
            "arguments": {
                "base": []
            }
        }
    },
    "black-main/action/main.py": {},
    "black-main/docs/conf.py": {
        "make_pypi_svg": {
            "name": "make_pypi_svg",
            "location": 25,
            "return": [],
            "arguments": {
                "version": []
            }
        }
    },
    "black-main/gallery/gallery.py": {
        "get_pypi_download_url": {
            "name": "get_pypi_download_url",
            "location": 43,
            "return": [],
            "arguments": {
                "package": [],
                "version": []
            }
        },
        "get_top_packages": {
            "name": "get_top_packages",
            "location": 67,
            "return": [],
            "arguments": {
                "days": []
            }
        },
        "get_package_source": {
            "name": "get_package_source",
            "location": 74,
            "return": [],
            "arguments": {
                "package": [],
                "version": []
            }
        },
        "get_archive_manager": {
            "name": "get_archive_manager",
            "location": 89,
            "return": [],
            "arguments": {
                "local_file": []
            }
        },
        "get_first_archive_member": {
            "name": "get_first_archive_member",
            "location": 98,
            "return": [],
            "arguments": {
                "archive": []
            }
        },
        "download_and_extract": {
            "name": "download_and_extract",
            "location": 105,
            "return": [],
            "arguments": {
                "package": [],
                "version": [],
                "directory": []
            }
        },
        "get_package": {
            "name": "get_package",
            "location": 115,
            "return": [],
            "arguments": {
                "package": [],
                "version": [],
                "directory": []
            }
        },
        "download_and_extract_top_packages": {
            "name": "download_and_extract_top_packages",
            "location": 129,
            "return": [],
            "arguments": {
                "directory": [],
                "days": [],
                "workers": [],
                "limit": []
            }
        },
        "git_create_repository": {
            "name": "git_create_repository",
            "location": 142,
            "return": [],
            "arguments": {
                "repo": []
            }
        },
        "git_add_and_commit": {
            "name": "git_add_and_commit",
            "location": 147,
            "return": [],
            "arguments": {
                "msg": [],
                "repo": []
            }
        },
        "git_switch_branch": {
            "name": "git_switch_branch",
            "location": 152,
            "return": [],
            "arguments": {
                "branch": [],
                "repo": [],
                "new": [],
                "from_branch": []
            }
        },
        "init_repos": {
            "name": "init_repos",
            "location": 164,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "black_runner": {
            "name": "black_runner",
            "location": 198,
            "return": [],
            "arguments": {
                "version": [],
                "black_repo": []
            }
        },
        "format_repo_with_version": {
            "name": "format_repo_with_version",
            "location": 209,
            "return": [],
            "arguments": {
                "repo": [],
                "from_branch": [],
                "black_repo": [],
                "black_version": [],
                "input_directory": []
            }
        },
        "format_repos": {
            "name": "format_repos",
            "location": 236,
            "return": [],
            "arguments": {
                "repos": [],
                "options": []
            }
        },
        "main": {
            "name": "main",
            "location": 256,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/profiling/dict_big.py": {},
    "black-main/profiling/dict_huge.py": {},
    "black-main/profiling/list_big.py": {},
    "black-main/profiling/list_huge.py": {},
    "black-main/profiling/mix_big.py": {},
    "black-main/profiling/mix_huge.py": {},
    "black-main/profiling/mix_small.py": {},
    "black-main/scripts/check_pre_commit_rev_in_example.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {
                "changes": [],
                "source_version_control": []
            }
        }
    },
    "black-main/scripts/check_version_in_basics_example.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {
                "changes": [],
                "the_basics": []
            }
        }
    },
    "black-main/scripts/diff_shades_gha_helper.py": {
        "set_output": {
            "name": "set_output",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [],
                "value": []
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 58,
            "return": [],
            "arguments": {
                "url": [],
                "is_json": []
            }
        },
        "get_branch_or_tag_revision": {
            "name": "get_branch_or_tag_revision",
            "location": 81,
            "return": [],
            "arguments": {
                "sha": []
            }
        },
        "get_pr_revision": {
            "name": "get_pr_revision",
            "location": 90,
            "return": [],
            "arguments": {
                "pr": []
            }
        },
        "get_pypi_version": {
            "name": "get_pypi_version",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "resolve_custom_ref": {
            "name": "resolve_custom_ref",
            "location": 103,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "main": {
            "name": "main",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 141,
            "return": [],
            "arguments": {
                "event": [],
                "custom_baseline": [],
                "custom_target": [],
                "baseline_args": []
            }
        },
        "comment_body": {
            "name": "comment_body",
            "location": 200,
            "return": [],
            "arguments": {
                "baseline": [],
                "target": [],
                "baseline_sha": [],
                "target_sha": [],
                "pr_num": []
            }
        },
        "comment_details": {
            "name": "comment_details",
            "location": 233,
            "return": [],
            "arguments": {
                "run_id": []
            }
        }
    },
    "black-main/scripts/__init__.py": {},
    "black-main/src/black/brackets.py": {
        "is_split_after_delimiter": {
            "name": "is_split_after_delimiter",
            "location": 199,
            "return": [],
            "arguments": {
                "leaf": [],
                "previous": []
            }
        },
        "is_split_before_delimiter": {
            "name": "is_split_before_delimiter",
            "location": 213,
            "return": [],
            "arguments": {
                "leaf": [],
                "previous": []
            }
        },
        "max_delimiter_priority_in_atom": {
            "name": "max_delimiter_priority_in_atom",
            "location": 309,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "BracketTracker.mark": {
            "name": "mark",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.any_open_brackets": {
            "name": "any_open_brackets",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BracketTracker.max_delimiter_priority": {
            "name": "max_delimiter_priority",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": []
            }
        },
        "BracketTracker.delimiter_count_with_priority": {
            "name": "delimiter_count_with_priority",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "priority": []
            }
        },
        "BracketTracker.maybe_increment_for_loop_variable": {
            "name": "maybe_increment_for_loop_variable",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_decrement_after_for_loop_variable": {
            "name": "maybe_decrement_after_for_loop_variable",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_increment_lambda_arguments": {
            "name": "maybe_increment_lambda_arguments",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.maybe_decrement_after_lambda_arguments": {
            "name": "maybe_decrement_after_lambda_arguments",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.get_open_lsqb": {
            "name": "get_open_lsqb",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/black/cache.py": {
        "get_cache_dir": {
            "name": "get_cache_dir",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "read_cache": {
            "name": "read_cache",
            "location": 42,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "get_cache_file": {
            "name": "get_cache_file",
            "location": 60,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "get_cache_info": {
            "name": "get_cache_info",
            "location": 64,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "filter_cached": {
            "name": "filter_cached",
            "location": 70,
            "return": [],
            "arguments": {
                "cache": [],
                "sources": []
            }
        },
        "write_cache": {
            "name": "write_cache",
            "location": 86,
            "return": [],
            "arguments": {
                "cache": [],
                "sources": [],
                "mode": []
            }
        }
    },
    "black-main/src/black/comments.py": {
        "generate_comments": {
            "name": "generate_comments",
            "location": 45,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "list_comments": {
            "name": "list_comments",
            "location": 69,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "make_comment": {
            "name": "make_comment",
            "location": 105,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "normalize_fmt_off": {
            "name": "normalize_fmt_off",
            "location": 131,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "convert_one_fmt_off_pair": {
            "name": "convert_one_fmt_off_pair",
            "location": 138,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "generate_ignored_nodes": {
            "name": "generate_ignored_nodes",
            "location": 200,
            "return": [],
            "arguments": {
                "leaf": [],
                "comment": []
            }
        },
        "is_fmt_on": {
            "name": "is_fmt_on",
            "location": 238,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "contains_fmt_on_at_column": {
            "name": "contains_fmt_on_at_column",
            "location": 251,
            "return": [],
            "arguments": {
                "container": [],
                "column": []
            }
        },
        "contains_pragma_comment": {
            "name": "contains_pragma_comment",
            "location": 266,
            "return": [],
            "arguments": {
                "comment_list": []
            }
        }
    },
    "black-main/src/black/concurrency.py": {
        "maybe_install_uvloop": {
            "name": "maybe_install_uvloop",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "cancel": {
            "name": "cancel",
            "location": 24,
            "return": [],
            "arguments": {
                "tasks": []
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 31,
            "return": [],
            "arguments": {
                "loop": []
            }
        }
    },
    "black-main/src/black/const.py": {},
    "black-main/src/black/debug.py": {
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [],
                "code": []
            }
        }
    },
    "black-main/src/black/files.py": {
        "find_project_root": {
            "name": "find_project_root",
            "location": 34,
            "return": [],
            "arguments": {
                "srcs": []
            }
        },
        "find_pyproject_toml": {
            "name": "find_pyproject_toml",
            "location": 76,
            "return": [],
            "arguments": {
                "path_search_start": []
            }
        },
        "parse_pyproject_toml": {
            "name": "parse_pyproject_toml",
            "location": 97,
            "return": [],
            "arguments": {
                "path_config": []
            }
        },
        "find_user_pyproject_toml": {
            "name": "find_user_pyproject_toml",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "get_gitignore": {
            "name": "get_gitignore",
            "location": 125,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "normalize_path_maybe_ignore": {
            "name": "normalize_path_maybe_ignore",
            "location": 139,
            "return": [],
            "arguments": {
                "path": [],
                "root": [],
                "report": []
            }
        },
        "path_is_excluded": {
            "name": "path_is_excluded",
            "location": 169,
            "return": [],
            "arguments": {
                "normalized_path": [],
                "pattern": []
            }
        },
        "gen_python_files": {
            "name": "gen_python_files",
            "location": 177,
            "return": [],
            "arguments": {
                "paths": [],
                "root": [],
                "include": [],
                "exclude": [],
                "extend_exclude": [],
                "force_exclude": [],
                "report": [],
                "gitignore": []
            }
        },
        "wrap_stream_for_windows": {
            "name": "wrap_stream_for_windows",
            "location": 254,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "black-main/src/black/handle_ipynb_magics.py": {
        "jupyter_dependencies_are_installed": {
            "name": "jupyter_dependencies_are_installed",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "remove_trailing_semicolon": {
            "name": "remove_trailing_semicolon",
            "location": 77,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "put_trailing_semicolon_back": {
            "name": "put_trailing_semicolon_back",
            "location": 113,
            "return": [],
            "arguments": {
                "src": [],
                "has_trailing_semicolon": []
            }
        },
        "mask_cell": {
            "name": "mask_cell",
            "location": 137,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "get_token": {
            "name": "get_token",
            "location": 177,
            "return": [],
            "arguments": {
                "src": [],
                "magic": []
            }
        },
        "replace_cell_magics": {
            "name": "replace_cell_magics",
            "location": 203,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "replace_magics": {
            "name": "replace_magics",
            "location": 234,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "unmask_cell": {
            "name": "unmask_cell",
            "location": 275,
            "return": [],
            "arguments": {
                "src": [],
                "replacements": []
            }
        },
        "_is_ipython_magic": {
            "name": "_is_ipython_magic",
            "location": 293,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_get_str_args": {
            "name": "_get_str_args",
            "location": 308,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "CellMagic.header": {
            "name": "header",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CellMagicFinder.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "cell_magic": []
            }
        },
        "CellMagicFinder.visit_Expr": {
            "name": "visit_Expr",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MagicFinder.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MagicFinder.visit_Assign": {
            "name": "visit_Assign",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MagicFinder.visit_Expr": {
            "name": "visit_Expr",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "black-main/src/black/linegen.py": {
        "transform_line": {
            "name": "transform_line",
            "location": 332,
            "return": [],
            "arguments": {
                "line": [],
                "mode": [],
                "features": []
            }
        },
        "left_hand_split": {
            "name": "left_hand_split",
            "location": 453,
            "return": [],
            "arguments": {
                "line": [],
                "_features": []
            }
        },
        "right_hand_split": {
            "name": "right_hand_split",
            "location": 489,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": [],
                "features": [],
                "omit": []
            }
        },
        "bracket_split_succeeded_or_raise": {
            "name": "bracket_split_succeeded_or_raise",
            "location": 577,
            "return": [],
            "arguments": {
                "head": [],
                "body": [],
                "tail": []
            }
        },
        "bracket_split_build_line": {
            "name": "bracket_split_build_line",
            "location": 603,
            "return": [],
            "arguments": {
                "leaves": [],
                "original": [],
                "opening_bracket": []
            }
        },
        "dont_increase_indentation": {
            "name": "dont_increase_indentation",
            "location": 660,
            "return": [],
            "arguments": {
                "split_func": []
            }
        },
        "delimiter_split": {
            "name": "delimiter_split",
            "location": 676,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "standalone_comment_split": {
            "name": "standalone_comment_split",
            "location": 753,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "normalize_prefix": {
            "name": "normalize_prefix",
            "location": 787,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "normalize_invisible_parens": {
            "name": "normalize_invisible_parens",
            "location": 805,
            "return": [],
            "arguments": {
                "node": [],
                "parens_after": []
            }
        },
        "maybe_make_parens_invisible_in_atom": {
            "name": "maybe_make_parens_invisible_in_atom",
            "location": 859,
            "return": [],
            "arguments": {
                "node": [],
                "parent": []
            }
        },
        "should_split_line": {
            "name": "should_split_line",
            "location": 908,
            "return": [],
            "arguments": {
                "line": [],
                "opening_bracket": []
            }
        },
        "generate_trailers_to_omit": {
            "name": "generate_trailers_to_omit",
            "location": 935,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": []
            }
        },
        "run_transformer": {
            "name": "run_transformer",
            "location": 1011,
            "return": [],
            "arguments": {
                "line": [],
                "transform": [],
                "mode": [],
                "features": []
            }
        },
        "LineGenerator.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "LineGenerator.line": {
            "name": "line",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "indent": []
            }
        },
        "LineGenerator.visit_default": {
            "name": "visit_default",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_INDENT": {
            "name": "visit_INDENT",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_DEDENT": {
            "name": "visit_DEDENT",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_stmt": {
            "name": "visit_stmt",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "keywords": [],
                "parens": []
            }
        },
        "LineGenerator.visit_match_case": {
            "name": "visit_match_case",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_suite": {
            "name": "visit_suite",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_async_stmt": {
            "name": "visit_async_stmt",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_decorators": {
            "name": "visit_decorators",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_power": {
            "name": "visit_power",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_SEMI": {
            "name": "visit_SEMI",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_ENDMARKER": {
            "name": "visit_ENDMARKER",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_STANDALONE_COMMENT": {
            "name": "visit_STANDALONE_COMMENT",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_factor": {
            "name": "visit_factor",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_STRING": {
            "name": "visit_STRING",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.__post_init__": {
            "name": "__post_init__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dont_increase_indentation.split_wrapper": {
            "name": "split_wrapper",
            "location": 667,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "delimiter_split.append_to_line": {
            "name": "append_to_line",
            "location": 703,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "standalone_comment_split.append_to_line": {
            "name": "append_to_line",
            "location": 764,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "transform_line._rhs": {
            "name": "_rhs",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "features": []
            }
        }
    },
    "black-main/src/black/lines.py": {
        "enumerate_reversed": {
            "name": "enumerate_reversed",
            "location": 562,
            "return": [],
            "arguments": {
                "sequence": []
            }
        },
        "append_leaves": {
            "name": "append_leaves",
            "location": 570,
            "return": [],
            "arguments": {
                "new_line": [],
                "old_line": [],
                "leaves": [],
                "preformatted": []
            }
        },
        "is_line_short_enough": {
            "name": "is_line_short_enough",
            "location": 594,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "can_be_split": {
            "name": "can_be_split",
            "location": 608,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "can_omit_invisible_parens": {
            "name": "can_omit_invisible_parens",
            "location": 644,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": []
            }
        },
        "_can_omit_opening_paren": {
            "name": "_can_omit_opening_paren",
            "location": 711,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "_can_omit_closing_paren": {
            "name": "_can_omit_closing_paren",
            "location": 736,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "line_to_string": {
            "name": "line_to_string",
            "location": 753,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "Line.append": {
            "name": "append",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [],
                "preformatted": []
            }
        },
        "Line.append_safe": {
            "name": "append_safe",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [],
                "preformatted": []
            }
        },
        "Line.is_comment": {
            "name": "is_comment",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_decorator": {
            "name": "is_decorator",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_import": {
            "name": "is_import",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class": {
            "name": "is_class",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_stub_class": {
            "name": "is_stub_class",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_def": {
            "name": "is_def",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class_paren_empty": {
            "name": "is_class_paren_empty",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_triple_quoted_string": {
            "name": "is_triple_quoted_string",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_standalone_comments": {
            "name": "contains_standalone_comments",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "depth_limit": []
            }
        },
        "Line.contains_uncollapsable_type_comments": {
            "name": "contains_uncollapsable_type_comments",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_unsplittable_type_ignore": {
            "name": "contains_unsplittable_type_ignore",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.contains_multiline_strings": {
            "name": "contains_multiline_strings",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.has_magic_trailing_comma": {
            "name": "has_magic_trailing_comma",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "closing": [],
                "ensure_removable": []
            }
        },
        "Line.append_comment": {
            "name": "append_comment",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "Line.comments_after": {
            "name": "comments_after",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.remove_trailing_comma": {
            "name": "remove_trailing_comma",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_complex_subscript": {
            "name": "is_complex_subscript",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.enumerate_with_length": {
            "name": "enumerate_with_length",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "reversed": []
            }
        },
        "Line.clone": {
            "name": "clone",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__bool__": {
            "name": "__bool__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineTracker.maybe_empty_lines": {
            "name": "maybe_empty_lines",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "EmptyLineTracker._maybe_empty_lines": {
            "name": "_maybe_empty_lines",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "EmptyLineTracker._maybe_empty_lines_for_class_or_def": {
            "name": "_maybe_empty_lines_for_class_or_def",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": [],
                "before": []
            }
        }
    },
    "black-main/src/black/mode.py": {
        "supports_feature": {
            "name": "supports_feature",
            "location": 122,
            "return": [],
            "arguments": {
                "target_versions": [],
                "feature": []
            }
        },
        "Mode.__post_init__": {
            "name": "__post_init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mode.__contains__": {
            "name": "__contains__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "feature": []
            }
        },
        "Mode.get_cache_key": {
            "name": "get_cache_key",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/black/nodes.py": {
        "whitespace": {
            "name": "whitespace",
            "location": 188,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "preceding_leaf": {
            "name": "preceding_leaf",
            "location": 406,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "prev_siblings_are": {
            "name": "prev_siblings_are",
            "location": 424,
            "return": [],
            "arguments": {
                "node": [],
                "tokens": []
            }
        },
        "parent_type": {
            "name": "parent_type",
            "location": 440,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "child_towards": {
            "name": "child_towards",
            "location": 453,
            "return": [],
            "arguments": {
                "ancestor": [],
                "descendant": []
            }
        },
        "replace_child": {
            "name": "replace_child",
            "location": 461,
            "return": [],
            "arguments": {
                "old_child": [],
                "new_child": []
            }
        },
        "container_of": {
            "name": "container_of",
            "location": 478,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "first_leaf_column": {
            "name": "first_leaf_column",
            "location": 503,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_arith_like": {
            "name": "is_arith_like",
            "location": 511,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_docstring": {
            "name": "is_docstring",
            "location": 521,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_empty_tuple": {
            "name": "is_empty_tuple",
            "location": 536,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_one_tuple": {
            "name": "is_one_tuple",
            "location": 546,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_one_tuple_between": {
            "name": "is_one_tuple_between",
            "location": 562,
            "return": [],
            "arguments": {
                "opening": [],
                "closing": [],
                "leaves": []
            }
        },
        "is_walrus_assignment": {
            "name": "is_walrus_assignment",
            "location": 594,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_simple_decorator_trailer": {
            "name": "is_simple_decorator_trailer",
            "location": 600,
            "return": [],
            "arguments": {
                "node": [],
                "last": []
            }
        },
        "is_simple_decorator_expression": {
            "name": "is_simple_decorator_expression",
            "location": 626,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_yield": {
            "name": "is_yield",
            "location": 650,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_vararg": {
            "name": "is_vararg",
            "location": 671,
            "return": [],
            "arguments": {
                "leaf": [],
                "within": []
            }
        },
        "is_multiline_string": {
            "name": "is_multiline_string",
            "location": 694,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_stub_suite": {
            "name": "is_stub_suite",
            "location": 699,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_stub_body": {
            "name": "is_stub_body",
            "location": 712,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_atom_with_invisible_parens": {
            "name": "is_atom_with_invisible_parens",
            "location": 728,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_empty_par": {
            "name": "is_empty_par",
            "location": 746,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_empty_lpar": {
            "name": "is_empty_lpar",
            "location": 750,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_empty_rpar": {
            "name": "is_empty_rpar",
            "location": 754,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 758,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_type_comment": {
            "name": "is_type_comment",
            "location": 772,
            "return": [],
            "arguments": {
                "leaf": [],
                "suffix": []
            }
        },
        "wrap_in_parentheses": {
            "name": "wrap_in_parentheses",
            "location": 780,
            "return": [],
            "arguments": {
                "parent": [],
                "child": []
            }
        },
        "unwrap_singleton_parenthesis": {
            "name": "unwrap_singleton_parenthesis",
            "location": 798,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ensure_visible": {
            "name": "ensure_visible",
            "location": 812,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_name_token": {
            "name": "is_name_token",
            "location": 824,
            "return": [],
            "arguments": {
                "nl": []
            }
        },
        "is_lpar_token": {
            "name": "is_lpar_token",
            "location": 828,
            "return": [],
            "arguments": {
                "nl": []
            }
        },
        "is_rpar_token": {
            "name": "is_rpar_token",
            "location": 832,
            "return": [],
            "arguments": {
                "nl": []
            }
        },
        "is_string_token": {
            "name": "is_string_token",
            "location": 836,
            "return": [],
            "arguments": {
                "nl": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_default": {
            "name": "visit_default",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "black-main/src/black/numerics.py": {
        "format_hex": {
            "name": "format_hex",
            "location": 7,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "format_scientific_notation": {
            "name": "format_scientific_notation",
            "location": 15,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "format_complex_number": {
            "name": "format_complex_number",
            "location": 28,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "format_float_or_int_string": {
            "name": "format_float_or_int_string",
            "location": 35,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_numeric_literal": {
            "name": "normalize_numeric_literal",
            "location": 44,
            "return": [],
            "arguments": {
                "leaf": []
            }
        }
    },
    "black-main/src/black/output.py": {
        "_out": {
            "name": "_out",
            "location": 15,
            "return": [],
            "arguments": {
                "message": [],
                "nl": []
            }
        },
        "_err": {
            "name": "_err",
            "location": 24,
            "return": [],
            "arguments": {
                "message": [],
                "nl": []
            }
        },
        "out": {
            "name": "out",
            "location": 33,
            "return": [],
            "arguments": {
                "message": [],
                "nl": []
            }
        },
        "err": {
            "name": "err",
            "location": 37,
            "return": [],
            "arguments": {
                "message": [],
                "nl": []
            }
        },
        "ipynb_diff": {
            "name": "ipynb_diff",
            "location": 41,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": []
            }
        },
        "diff": {
            "name": "diff",
            "location": 58,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": []
            }
        },
        "color_diff": {
            "name": "color_diff",
            "location": 79,
            "return": [],
            "arguments": {
                "contents": []
            }
        },
        "dump_to_file": {
            "name": "dump_to_file",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/src/black/parsing.py": {
        "get_grammars": {
            "name": "get_grammars",
            "location": 52,
            "return": [],
            "arguments": {
                "target_versions": []
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 85,
            "return": [],
            "arguments": {
                "src_txt": [],
                "target_versions": []
            }
        },
        "matches_grammar": {
            "name": "matches_grammar",
            "location": 135,
            "return": [],
            "arguments": {
                "src_txt": [],
                "grammar": []
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 145,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "parse_single_version": {
            "name": "parse_single_version",
            "location": 151,
            "return": [],
            "arguments": {
                "src": [],
                "version": []
            }
        },
        "parse_ast": {
            "name": "parse_ast",
            "location": 166,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "_normalize": {
            "name": "_normalize",
            "location": 184,
            "return": [],
            "arguments": {
                "lineend": [],
                "value": []
            }
        },
        "stringify_ast": {
            "name": "stringify_ast",
            "location": 194,
            "return": [],
            "arguments": {
                "node": [],
                "depth": []
            }
        },
        "fixup_ast_constants": {
            "name": "fixup_ast_constants",
            "location": 261,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "black-main/src/black/report.py": {
        "Report.done": {
            "name": "done",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "changed": []
            }
        },
        "Report.failed": {
            "name": "failed",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "message": []
            }
        },
        "Report.path_ignored": {
            "name": "path_ignored",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "message": []
            }
        },
        "Report.return_code": {
            "name": "return_code",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/black/rusty.py": {
        "Ok.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Ok.ok": {
            "name": "ok",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Err.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Err.err": {
            "name": "err",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/black/strings.py": {
        "sub_twice": {
            "name": "sub_twice",
            "location": 23,
            "return": [],
            "arguments": {
                "regex": [],
                "replacement": [],
                "original": []
            }
        },
        "has_triple_quotes": {
            "name": "has_triple_quotes",
            "location": 32,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "lines_with_leading_tabs_expanded": {
            "name": "lines_with_leading_tabs_expanded",
            "location": 41,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "fix_docstring": {
            "name": "fix_docstring",
            "location": 63,
            "return": [],
            "arguments": {
                "docstring": [],
                "prefix": []
            }
        },
        "get_string_prefix": {
            "name": "get_string_prefix",
            "location": 87,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "assert_is_leaf_string": {
            "name": "assert_is_leaf_string",
            "location": 106,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "normalize_string_prefix": {
            "name": "normalize_string_prefix",
            "location": 141,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_cached_compile": {
            "name": "_cached_compile",
            "location": 163,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "normalize_string_quotes": {
            "name": "normalize_string_quotes",
            "location": 167,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "black-main/src/black/trans.py": {
        "TErr": {
            "name": "TErr",
            "location": 65,
            "return": [],
            "arguments": {
                "err_msg": []
            }
        },
        "hug_power_op": {
            "name": "hug_power_op",
            "location": 74,
            "return": [],
            "arguments": {
                "line": [],
                "features": []
            }
        },
        "iter_fexpr_spans": {
            "name": "iter_fexpr_spans",
            "location": 1027,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "fstring_contains_expr": {
            "name": "fstring_contains_expr",
            "location": 1074,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "insert_str_child_factory": {
            "name": "insert_str_child_factory",
            "location": 2061,
            "return": [],
            "arguments": {
                "string_leaf": []
            }
        },
        "is_valid_index_factory": {
            "name": "is_valid_index_factory",
            "location": 2122,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "hug_power_op.is_simple_lookup": {
            "name": "is_simple_lookup",
            "location": 84,
            "return": [],
            "arguments": {
                "index": [],
                "step": []
            }
        },
        "hug_power_op.is_simple_operand": {
            "name": "is_simple_operand",
            "location": 108,
            "return": [],
            "arguments": {
                "index": [],
                "kind": []
            }
        },
        "StringTransformer.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "line_length": [],
                "normalize_strings": []
            }
        },
        "StringTransformer.do_match": {
            "name": "do_match",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StringTransformer.do_transform": {
            "name": "do_transform",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringTransformer.__call__": {
            "name": "__call__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "_features": []
            }
        },
        "CustomSplitMapMixin._get_key": {
            "name": "_get_key",
            "location": 295,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "CustomSplitMapMixin.add_custom_splits": {
            "name": "add_custom_splits",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "custom_splits": []
            }
        },
        "CustomSplitMapMixin.pop_custom_splits": {
            "name": "pop_custom_splits",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "CustomSplitMapMixin.has_custom_splits": {
            "name": "has_custom_splits",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StringMerger.do_match": {
            "name": "do_match",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StringMerger.do_transform": {
            "name": "do_transform",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringMerger._remove_backslash_line_continuation_chars": {
            "name": "_remove_backslash_line_continuation_chars",
            "location": 409,
            "return": [],
            "arguments": {
                "line": [],
                "string_idx": []
            }
        },
        "StringMerger._merge_string_group": {
            "name": "_merge_string_group",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringMerger._validate_msg": {
            "name": "_validate_msg",
            "location": 588,
            "return": [],
            "arguments": {
                "line": [],
                "string_idx": []
            }
        },
        "StringParenStripper.do_match": {
            "name": "do_match",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StringParenStripper.do_transform": {
            "name": "do_transform",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "BaseStringSplitter.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "BaseStringSplitter.do_match": {
            "name": "do_match",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "BaseStringSplitter._validate": {
            "name": "_validate",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "BaseStringSplitter._get_max_string_length": {
            "name": "_get_max_string_length",
            "location": 917,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringSplitter.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StringSplitter.do_transform": {
            "name": "do_transform",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringSplitter._iter_nameescape_slices": {
            "name": "_iter_nameescape_slices",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StringSplitter._iter_fexpr_slices": {
            "name": "_iter_fexpr_slices",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StringSplitter._get_illegal_split_indices": {
            "name": "_get_illegal_split_indices",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StringSplitter._get_break_idx": {
            "name": "_get_break_idx",
            "location": 1437,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "max_break_idx": []
            }
        },
        "StringSplitter._maybe_normalize_string_quotes": {
            "name": "_maybe_normalize_string_quotes",
            "location": 1521,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "StringSplitter._normalize_f_string": {
            "name": "_normalize_f_string",
            "location": 1525,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "prefix": []
            }
        },
        "StringSplitter._get_string_operator_leaves": {
            "name": "_get_string_operator_leaves",
            "location": 1552,
            "return": [],
            "arguments": {
                "self": [],
                "leaves": []
            }
        },
        "StringParenWrapper.do_splitter_match": {
            "name": "do_splitter_match",
            "location": 1613,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StringParenWrapper._return_match": {
            "name": "_return_match",
            "location": 1649,
            "return": [],
            "arguments": {
                "LL": []
            }
        },
        "StringParenWrapper._else_match": {
            "name": "_else_match",
            "location": 1674,
            "return": [],
            "arguments": {
                "LL": []
            }
        },
        "StringParenWrapper._assert_match": {
            "name": "_assert_match",
            "location": 1701,
            "return": [],
            "arguments": {
                "LL": []
            }
        },
        "StringParenWrapper._assign_match": {
            "name": "_assign_match",
            "location": 1736,
            "return": [],
            "arguments": {
                "LL": []
            }
        },
        "StringParenWrapper._dict_match": {
            "name": "_dict_match",
            "location": 1783,
            "return": [],
            "arguments": {
                "LL": []
            }
        },
        "StringParenWrapper.do_transform": {
            "name": "do_transform",
            "location": 1820,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "string_idx": []
            }
        },
        "StringParser.__init__": {
            "name": "__init__",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringParser.parse": {
            "name": "parse",
            "location": 1991,
            "return": [],
            "arguments": {
                "self": [],
                "leaves": [],
                "string_idx": []
            }
        },
        "StringParser._next_state": {
            "name": "_next_state",
            "location": 2009,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "insert_str_child_factory.insert_str_child": {
            "name": "insert_str_child",
            "location": 2110,
            "return": [],
            "arguments": {
                "child": []
            }
        },
        "is_valid_index_factory.is_valid_index": {
            "name": "is_valid_index",
            "location": 2138,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "StringMerger._merge_string_group.make_naked": {
            "name": "make_naked",
            "location": 475,
            "return": [],
            "arguments": {
                "string": [],
                "string_prefix": []
            }
        },
        "StringSplitter.do_transform.maybe_append_string_operators": {
            "name": "maybe_append_string_operators",
            "location": 1196,
            "return": [],
            "arguments": {
                "new_line": []
            }
        },
        "StringSplitter.do_transform.max_last_string": {
            "name": "max_last_string",
            "location": 1213,
            "return": [],
            "arguments": {}
        },
        "StringSplitter.do_transform.more_splits_should_be_made": {
            "name": "more_splits_should_be_made",
            "location": 1252,
            "return": [],
            "arguments": {}
        },
        "StringSplitter._get_break_idx.breaks_unsplittable_expression": {
            "name": "breaks_unsplittable_expression",
            "location": 1468,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "StringSplitter._get_break_idx.passes_all_checks": {
            "name": "passes_all_checks",
            "location": 1476,
            "return": [],
            "arguments": {
                "i": []
            }
        }
    },
    "black-main/src/black/__init__.py": {
        "read_pyproject_toml": {
            "name": "read_pyproject_toml",
            "location": 108,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "target_version_option_callback": {
            "name": "target_version_option_callback",
            "location": 154,
            "return": [],
            "arguments": {
                "c": [],
                "p": [],
                "v": []
            }
        },
        "re_compile_maybe_verbose": {
            "name": "re_compile_maybe_verbose",
            "location": 165,
            "return": [],
            "arguments": {
                "regex": []
            }
        },
        "validate_regex": {
            "name": "validate_regex",
            "location": 176,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "main": {
            "name": "main",
            "location": 405,
            "return": [],
            "arguments": {
                "ctx": [],
                "code": [],
                "line_length": [],
                "target_version": [],
                "check": [],
                "diff": [],
                "color": [],
                "fast": [],
                "pyi": [],
                "ipynb": [],
                "python_cell_magics": [],
                "skip_string_normalization": [],
                "skip_magic_trailing_comma": [],
                "experimental_string_processing": [],
                "preview": [],
                "quiet": [],
                "verbose": [],
                "required_version": [],
                "include": [],
                "exclude": [],
                "extend_exclude": [],
                "force_exclude": [],
                "stdin_filename": [],
                "workers": [],
                "src": [],
                "config": []
            }
        },
        "get_sources": {
            "name": "get_sources",
            "location": 573,
            "return": [],
            "arguments": {}
        },
        "path_empty": {
            "name": "path_empty",
            "location": 649,
            "return": [],
            "arguments": {
                "src": [],
                "msg": [],
                "quiet": [],
                "verbose": [],
                "ctx": []
            }
        },
        "reformat_code": {
            "name": "reformat_code",
            "location": 661,
            "return": [],
            "arguments": {
                "content": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": []
            }
        },
        "reformat_one": {
            "name": "reformat_one",
            "location": 685,
            "return": [],
            "arguments": {
                "src": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": []
            }
        },
        "reformat_many": {
            "name": "reformat_many",
            "location": 739,
            "return": [],
            "arguments": {
                "sources": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": [],
                "workers": []
            }
        },
        "format_file_in_place": {
            "name": "format_file_in_place",
            "location": 856,
            "return": [],
            "arguments": {
                "src": [],
                "fast": [],
                "mode": [],
                "write_back": [],
                "lock": []
            }
        },
        "format_stdin_to_stdout": {
            "name": "format_stdin_to_stdout",
            "location": 915,
            "return": [],
            "arguments": {
                "fast": []
            }
        },
        "check_stability_and_equivalence": {
            "name": "check_stability_and_equivalence",
            "location": 966,
            "return": [],
            "arguments": {
                "src_contents": [],
                "dst_contents": []
            }
        },
        "format_file_contents": {
            "name": "format_file_contents",
            "location": 979,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "validate_cell": {
            "name": "validate_cell",
            "location": 1002,
            "return": [],
            "arguments": {
                "src": [],
                "mode": []
            }
        },
        "format_cell": {
            "name": "format_cell",
            "location": 1028,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "validate_metadata": {
            "name": "validate_metadata",
            "location": 1065,
            "return": [],
            "arguments": {
                "nb": []
            }
        },
        "format_ipynb_string": {
            "name": "format_ipynb_string",
            "location": 1077,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "format_str": {
            "name": "format_str",
            "location": 1106,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "_format_str_once": {
            "name": "_format_str_once",
            "location": 1145,
            "return": [],
            "arguments": {
                "src_contents": []
            }
        },
        "decode_bytes": {
            "name": "decode_bytes",
            "location": 1175,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "get_features_used": {
            "name": "get_features_used",
            "location": 1192,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "detect_target_versions": {
            "name": "detect_target_versions",
            "location": 1280,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "get_future_imports": {
            "name": "get_future_imports",
            "location": 1290,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "assert_equivalent": {
            "name": "assert_equivalent",
            "location": 1340,
            "return": [],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "assert_stable": {
            "name": "assert_stable",
            "location": 1373,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "mode": []
            }
        },
        "nullcontext": {
            "name": "nullcontext",
            "location": 1393,
            "return": [],
            "arguments": {}
        },
        "patch_click": {
            "name": "patch_click",
            "location": 1401,
            "return": [],
            "arguments": {}
        },
        "patched_main": {
            "name": "patched_main",
            "location": 1425,
            "return": [],
            "arguments": {}
        },
        "WriteBack.from_configuration": {
            "name": "from_configuration",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "get_future_imports.get_imports_from_children": {
            "name": "get_imports_from_children",
            "location": 1294,
            "return": [],
            "arguments": {
                "children": []
            }
        }
    },
    "black-main/src/black/__main__.py": {},
    "black-main/src/blackd/middlewares.py": {
        "cors": {
            "name": "cors",
            "location": 10,
            "return": [],
            "arguments": {
                "allow_headers": []
            }
        }
    },
    "black-main/src/blackd/__init__.py": {
        "main": {
            "name": "main",
            "location": 61,
            "return": [],
            "arguments": {
                "bind_host": [],
                "bind_port": []
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "parse_python_variant_header": {
            "name": "parse_python_variant_header",
            "location": 158,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "patched_main": {
            "name": "patched_main",
            "location": 191,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/src/blackd/__main__.py": {},
    "black-main/src/black_primer/cli.py": {
        "_handle_debug": {
            "name": "_handle_debug",
            "location": 32,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "debug": []
            }
        },
        "load_projects": {
            "name": "load_projects",
            "location": 46,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "_projects_callback": {
            "name": "_projects_callback",
            "location": 56,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "projects": []
            }
        },
        "main": {
            "name": "main",
            "location": 183,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "black-main/src/black_primer/lib.py": {
        "analyze_results": {
            "name": "analyze_results",
            "location": 87,
            "return": [],
            "arguments": {
                "project_count": [],
                "results": []
            }
        },
        "_flatten_cli_args": {
            "name": "_flatten_cli_args",
            "location": 131,
            "return": [],
            "arguments": {
                "cli_args": []
            }
        },
        "handle_PermissionError": {
            "name": "handle_PermissionError",
            "location": 264,
            "return": [],
            "arguments": {
                "func": [],
                "path": [],
                "exc": []
            }
        }
    },
    "black-main/src/black_primer/__init__.py": {},
    "black-main/src/blib2to3/pygram.py": {
        "initialize": {
            "name": "initialize",
            "location": 163,
            "return": [],
            "arguments": {
                "cache_dir": []
            }
        },
        "Symbols.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": []
            }
        }
    },
    "black-main/src/blib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 40,
            "return": [],
            "arguments": {
                "type_num": []
            }
        },
        "convert": {
            "name": "convert",
            "location": 481,
            "return": [],
            "arguments": {
                "gr": [],
                "raw_node": []
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 957,
            "return": [],
            "arguments": {
                "patterns": [],
                "nodes": []
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base.prefix": {
            "name": "prefix",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Base.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "new": []
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "children": [],
                "context": [],
                "prefix": [],
                "fixers_applied": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.prefix": {
            "name": "prefix",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "child": []
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "child": []
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "child": []
            }
        },
        "Node.invalidate_sibling_maps": {
            "name": "invalidate_sibling_maps",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.update_sibling_maps": {
            "name": "update_sibling_maps",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": [],
                "prefix": [],
                "fixers_applied": [],
                "opening_bracket": []
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__str__": {
            "name": "__str__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaf.prefix": {
            "name": "prefix",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 526,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePattern._submatch": {
            "name": "_submatch",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "content": [],
                "name": []
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 628,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "content": [],
                "name": []
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "min": [],
                "max": [],
                "name": []
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 774,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "count": []
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "results": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 945,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        }
    },
    "black-main/src/blib2to3/__init__.py": {},
    "black-main/src/blib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "graminit_h": [],
                "graminit_c": []
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/driver.py": {
        "_generate_pickle_name": {
            "name": "_generate_pickle_name",
            "location": 243,
            "return": [],
            "arguments": {
                "gt": [],
                "cache_dir": []
            }
        },
        "load_grammar": {
            "name": "load_grammar",
            "location": 254,
            "return": [],
            "arguments": {
                "gt": [],
                "gp": [],
                "save": [],
                "force": [],
                "logger": []
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 280,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "load_packaged_grammar": {
            "name": "load_packaged_grammar",
            "location": 289,
            "return": [],
            "arguments": {
                "package": [],
                "grammar_source": [],
                "cache_dir": []
            }
        },
        "main": {
            "name": "main",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "ReleaseRange.lock": {
            "name": "lock",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenProxy.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "generator": []
            }
        },
        "TokenProxy.release": {
            "name": "release",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenProxy.eat": {
            "name": "eat",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "TokenProxy.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenProxy.__next__": {
            "name": "__next__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenProxy.can_advance": {
            "name": "can_advance",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "to": []
            }
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "logger": []
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "debug": []
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "debug": []
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "debug": []
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "encoding": [],
                "debug": []
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "debug": []
            }
        },
        "Driver._partially_consume_prefix": {
            "name": "_partially_consume_prefix",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "column": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Grammar._update": {
            "name": "_update",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Grammar.loads": {
            "name": "loads",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "pkl": []
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 25,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 47,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test": {
            "name": "test",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/src/blib2to3/pgen2/parse.py": {
        "lam_sub": {
            "name": "lam_sub",
            "location": 44,
            "return": [],
            "arguments": {
                "grammar": [],
                "node": []
            }
        },
        "stack_copy": {
            "name": "stack_copy",
            "location": 53,
            "return": [],
            "arguments": {
                "stack": []
            }
        },
        "Recorder.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "ilabels": [],
                "context": []
            }
        },
        "Recorder.ilabels": {
            "name": "ilabels",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Recorder.switch_to": {
            "name": "switch_to",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "ilabel": []
            }
        },
        "Recorder.backtrack": {
            "name": "backtrack",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Recorder.add_token": {
            "name": "add_token",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "tok_type": [],
                "tok_val": [],
                "raw": []
            }
        },
        "Recorder.determine_route": {
            "name": "determine_route",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "force": []
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "convert": []
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "proxy": [],
                "start": []
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser._addtoken": {
            "name": "_addtoken",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "ilabel": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "context": []
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "newstate": [],
                "context": []
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "newdfa": [],
                "newstate": [],
                "context": []
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 431,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "stream": []
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "name": []
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "label": []
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "finish": []
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": [],
                "finish": []
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "dfa": []
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "dfa": []
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": []
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "next": [],
                "label": []
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "nfaset": [],
                "final": []
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "next": [],
                "label": []
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 213,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 218,
            "return": [],
            "arguments": {
                "state": [],
                "base": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 85,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 89,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 93,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "_combinations": {
            "name": "_combinations",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 191,
            "return": [],
            "arguments": {
                "type": [],
                "token": [],
                "xxx_todo_changeme": [],
                "xxx_todo_changeme1": [],
                "line": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 203,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 223,
            "return": [],
            "arguments": {
                "readline": [],
                "tokeneater": []
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 299,
            "return": [],
            "arguments": {
                "orig_enc": []
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 312,
            "return": [],
            "arguments": {
                "readline": []
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 387,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 409,
            "return": [],
            "arguments": {
                "readline": [],
                "grammar": []
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "iterable": []
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 340,
            "return": [],
            "arguments": {
                "line": []
            }
        }
    },
    "black-main/src/blib2to3/pgen2/__init__.py": {},
    "black-main/tests/conftest.py": {},
    "black-main/tests/optional.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 45,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 57,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 98,
            "return": [],
            "arguments": {
                "config": [],
                "items": []
            }
        },
        "skip_mark": {
            "name": "skip_mark",
            "location": 115,
            "return": [],
            "arguments": {
                "tests": []
            }
        },
        "no": {
            "name": "no",
            "location": 121,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "black-main/tests/test_black.py": {
        "cache_dir": {
            "name": "cache_dir",
            "location": 78,
            "return": [],
            "arguments": {
                "exists": []
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "invokeBlack": {
            "name": "invokeBlack",
            "location": 122,
            "return": [],
            "arguments": {
                "args": [],
                "exit_code": [],
                "ignore_config": []
            }
        },
        "assert_collected_sources": {
            "name": "assert_collected_sources",
            "location": 1785,
            "return": [],
            "arguments": {
                "src": [],
                "expected": []
            }
        },
        "tracefunc": {
            "name": "tracefunc",
            "location": 2100,
            "return": [],
            "arguments": {
                "frame": [],
                "event": [],
                "arg": []
            }
        },
        "FakeContext.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeParameter.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackRunner.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_empty_ff": {
            "name": "test_empty_ff",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_experimental_string_processing_warns": {
            "name": "test_experimental_string_processing_warns",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping": {
            "name": "test_piping",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping_diff": {
            "name": "test_piping_diff",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping_diff_with_color": {
            "name": "test_piping_diff_with_color",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase._test_wip": {
            "name": "_test_wip",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pep_572_version_detection": {
            "name": "test_pep_572_version_detection",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_ff": {
            "name": "test_expression_ff",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_diff": {
            "name": "test_expression_diff",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression_diff_with_color": {
            "name": "test_expression_diff_with_color",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_detect_pos_only_arguments": {
            "name": "test_detect_pos_only_arguments",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_string_quotes": {
            "name": "test_string_quotes",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_skip_magic_trailing_comma": {
            "name": "test_skip_magic_trailing_comma",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_async_as_identifier": {
            "name": "test_async_as_identifier",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_python37": {
            "name": "test_python37",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_tab_comment_indentation": {
            "name": "test_tab_comment_indentation",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose": {
            "name": "test_report_verbose",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_quiet": {
            "name": "test_report_quiet",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_normal": {
            "name": "test_report_normal",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_lib2to3_parse": {
            "name": "test_lib2to3_parse",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_features_used_decorator": {
            "name": "test_get_features_used_decorator",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_features_used": {
            "name": "test_get_features_used",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_features_used_for_future_flags": {
            "name": "test_get_features_used_for_future_flags",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_get_future_imports": {
            "name": "test_get_future_imports",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_debug_visitor": {
            "name": "test_debug_visitor",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_format_file_contents": {
            "name": "test_format_file_contents",
            "location": 871,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_endmarker": {
            "name": "test_endmarker",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assertFormatEqual": {
            "name": "test_assertFormatEqual",
            "location": 899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_works_in_mono_process_only_environment": {
            "name": "test_works_in_mono_process_only_environment",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_check_diff_use_together": {
            "name": "test_check_diff_use_together",
            "location": 930,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_no_src_fails": {
            "name": "test_no_src_fails",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_src_and_code_fails": {
            "name": "test_src_and_code_fails",
            "location": 945,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_broken_symlink": {
            "name": "test_broken_symlink",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_pyi": {
            "name": "test_single_file_force_pyi",
            "location": 958,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_pyi": {
            "name": "test_multi_file_force_pyi",
            "location": 978,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_pyi": {
            "name": "test_pipe_force_pyi",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_single_file_force_py36": {
            "name": "test_single_file_force_py36",
            "location": 1011,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_multi_file_force_py36": {
            "name": "test_multi_file_force_py36",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_pipe_force_py36": {
            "name": "test_pipe_force_py36",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin": {
            "name": "test_reformat_one_with_stdin",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin_filename": {
            "name": "test_reformat_one_with_stdin_filename",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin_filename_pyi": {
            "name": "test_reformat_one_with_stdin_filename_pyi",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin_filename_ipynb": {
            "name": "test_reformat_one_with_stdin_filename_ipynb",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin_and_existing_path": {
            "name": "test_reformat_one_with_stdin_and_existing_path",
            "location": 1157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_reformat_one_with_stdin_empty": {
            "name": "test_reformat_one_with_stdin_empty",
            "location": 1181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_invalid_cli_regex": {
            "name": "test_invalid_cli_regex",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_required_version_matches_version": {
            "name": "test_required_version_matches_version",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_required_version_matches_partial_version": {
            "name": "test_required_version_matches_partial_version",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_required_version_does_not_match_on_minor_version": {
            "name": "test_required_version_does_not_match_on_minor_version",
            "location": 1213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_required_version_does_not_match_version": {
            "name": "test_required_version_does_not_match_version",
            "location": 1220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings": {
            "name": "test_preserves_line_endings",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_preserves_line_endings_via_stdin": {
            "name": "test_preserves_line_endings_via_stdin",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_assert_equivalent_different_asts": {
            "name": "test_assert_equivalent_different_asts",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_shhh_click": {
            "name": "test_shhh_click",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly": {
            "name": "test_root_logger_not_used_directly",
            "location": 1279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_invalid_config_return_code": {
            "name": "test_invalid_config_return_code",
            "location": 1294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_parse_pyproject_toml": {
            "name": "test_parse_pyproject_toml",
            "location": 1304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_read_pyproject_toml": {
            "name": "test_read_pyproject_toml",
            "location": 1317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_find_project_root": {
            "name": "test_find_project_root",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_find_user_pyproject_toml_linux": {
            "name": "test_find_user_pyproject_toml_linux",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_find_user_pyproject_toml_windows": {
            "name": "test_find_user_pyproject_toml_windows",
            "location": 1385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_bpo_33660_workaround": {
            "name": "test_bpo_33660_workaround",
            "location": 1394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_newline_comment_interaction": {
            "name": "test_newline_comment_interaction",
            "location": 1406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_bpo_2142_workaround": {
            "name": "test_bpo_2142_workaround",
            "location": 1411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.compare_results": {
            "name": "compare_results",
            "location": 1434,
            "return": [],
            "arguments": {
                "result": [],
                "expected_value": [],
                "expected_exit_code": []
            }
        },
        "BlackTestCase.test_code_option": {
            "name": "test_code_option",
            "location": 1443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_changed": {
            "name": "test_code_option_changed",
            "location": 1451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_check": {
            "name": "test_code_option_check",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_check_changed": {
            "name": "test_code_option_check_changed",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_diff": {
            "name": "test_code_option_diff",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_color_diff": {
            "name": "test_code_option_color_diff",
            "location": 1488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_safe": {
            "name": "test_code_option_safe",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_fast": {
            "name": "test_code_option_fast",
            "location": 1518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_config": {
            "name": "test_code_option_config",
            "location": 1531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_code_option_parent_config": {
            "name": "test_code_option_parent_config",
            "location": 1552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_for_handled_unexpected_eof_error": {
            "name": "test_for_handled_unexpected_eof_error",
            "location": 1571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_equivalency_ast_parse_failure_includes_error": {
            "name": "test_equivalency_ast_parse_failure_includes_error",
            "location": 1580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_get_cache_dir": {
            "name": "test_get_cache_dir",
            "location": 1592,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "monkeypatch": []
            }
        },
        "TestCaching.test_cache_broken_file": {
            "name": "test_cache_broken_file",
            "location": 1619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_cache_single_file_already_cached": {
            "name": "test_cache_single_file_already_cached",
            "location": 1631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_cache_multiple_files": {
            "name": "test_cache_multiple_files",
            "location": 1641,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_no_cache_when_writeback_diff": {
            "name": "test_no_cache_when_writeback_diff",
            "location": 1663,
            "return": [],
            "arguments": {
                "self": [],
                "color": []
            }
        },
        "TestCaching.test_output_locking_when_writeback_diff": {
            "name": "test_output_locking_when_writeback_diff",
            "location": 1683,
            "return": [],
            "arguments": {
                "self": [],
                "color": []
            }
        },
        "TestCaching.test_no_cache_when_stdin": {
            "name": "test_no_cache_when_stdin",
            "location": 1698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_read_cache_no_cachefile": {
            "name": "test_read_cache_no_cachefile",
            "location": 1708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_write_cache_read_cache": {
            "name": "test_write_cache_read_cache",
            "location": 1713,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_filter_cached": {
            "name": "test_filter_cached",
            "location": 1723,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_write_cache_creates_directory_if_needed": {
            "name": "test_write_cache_creates_directory_if_needed",
            "location": 1742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_failed_formatting_does_not_get_cached": {
            "name": "test_failed_formatting_does_not_get_cached",
            "location": 1750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_write_cache_write_fail": {
            "name": "test_write_cache_write_fail",
            "location": 1766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaching.test_read_cache_line_lengths": {
            "name": "test_read_cache_line_lengths",
            "location": 1772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_include_exclude": {
            "name": "test_include_exclude",
            "location": 1820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_gitignore_used_as_default": {
            "name": "test_gitignore_used_as_default",
            "location": 1834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_exclude_for_issue_1572": {
            "name": "test_exclude_for_issue_1572",
            "location": 1846,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_gitignore_exclude": {
            "name": "test_gitignore_exclude",
            "location": 1855,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_nested_gitignore": {
            "name": "test_nested_gitignore",
            "location": 1885,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_invalid_gitignore": {
            "name": "test_invalid_gitignore",
            "location": 1914,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_invalid_nested_gitignore": {
            "name": "test_invalid_nested_gitignore",
            "location": 1926,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_empty_include": {
            "name": "test_empty_include",
            "location": 1938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_extend_exclude": {
            "name": "test_extend_exclude",
            "location": 1957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_symlink_out_of_root_directory": {
            "name": "test_symlink_out_of_root_directory",
            "location": 1969,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_get_sources_with_stdin": {
            "name": "test_get_sources_with_stdin",
            "location": 2029,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_get_sources_with_stdin_filename": {
            "name": "test_get_sources_with_stdin_filename",
            "location": 2035,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_get_sources_with_stdin_filename_and_exclude": {
            "name": "test_get_sources_with_stdin_filename_and_exclude",
            "location": 2047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_get_sources_with_stdin_filename_and_extend_exclude": {
            "name": "test_get_sources_with_stdin_filename_and_extend_exclude",
            "location": 2063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileCollection.test_get_sources_with_stdin_filename_and_force_exclude": {
            "name": "test_get_sources_with_stdin_filename_and_force_exclude",
            "location": 2079,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report_verbose.out": {
            "name": "out",
            "location": 406,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_verbose.err": {
            "name": "err",
            "location": 409,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_quiet.out": {
            "name": "out",
            "location": 508,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_quiet.err": {
            "name": "err",
            "location": 511,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_normal.out": {
            "name": "out",
            "location": 602,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_report_normal.err": {
            "name": "err",
            "location": 605,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_debug_visitor.out": {
            "name": "out",
            "location": 853,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_debug_visitor.err": {
            "name": "err",
            "location": 856,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_assertFormatEqual.out": {
            "name": "out",
            "location": 903,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_assertFormatEqual.err": {
            "name": "err",
            "location": 906,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "BlackTestCase.test_root_logger_not_used_directly.fail": {
            "name": "fail",
            "location": 1280,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/test_blackd.py": {
        "BlackDTestCase.test_blackd_main": {
            "name": "test_blackd_main",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/test_format.py": {
        "patch_dump_to_file": {
            "name": "patch_dump_to_file",
            "location": 129,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "check_file": {
            "name": "check_file",
            "location": 134,
            "return": [],
            "arguments": {
                "filename": [],
                "mode": []
            }
        },
        "test_simple_format": {
            "name": "test_simple_format",
            "location": 140,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "test_preview_format": {
            "name": "test_preview_format",
            "location": 145,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "test_source_is_formatted": {
            "name": "test_source_is_formatted",
            "location": 150,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_pep_572": {
            "name": "test_pep_572",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_pep_572_remove_parens": {
            "name": "test_pep_572_remove_parens",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_pep_572_do_not_remove_parens": {
            "name": "test_pep_572_do_not_remove_parens",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_pep_572_newer_syntax": {
            "name": "test_pep_572_newer_syntax",
            "location": 183,
            "return": [],
            "arguments": {
                "major": [],
                "minor": []
            }
        },
        "test_pep_570": {
            "name": "test_pep_570",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "test_python_310": {
            "name": "test_python_310",
            "location": 194,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "test_python_310_without_target_version": {
            "name": "test_python_310_without_target_version",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_patma_invalid": {
            "name": "test_patma_invalid",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_python_2_hint": {
            "name": "test_python_2_hint",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_docstring_no_string_normalization": {
            "name": "test_docstring_no_string_normalization",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_long_strings_flag_disabled": {
            "name": "test_long_strings_flag_disabled",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_numeric_literals": {
            "name": "test_numeric_literals",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "test_numeric_literals_ignoring_underscores": {
            "name": "test_numeric_literals_ignoring_underscores",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_stub": {
            "name": "test_stub",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "test_python38": {
            "name": "test_python38",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_python39": {
            "name": "test_python39",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_power_op_newline": {
            "name": "test_power_op_newline",
            "location": 263,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/test_ipynb.py": {
        "test_noop": {
            "name": "test_noop",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_trailing_semicolon": {
            "name": "test_trailing_semicolon",
            "location": 37,
            "return": [],
            "arguments": {
                "fast": []
            }
        },
        "test_trailing_semicolon_with_comment": {
            "name": "test_trailing_semicolon_with_comment",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_trailing_semicolon_with_comment_on_next_line": {
            "name": "test_trailing_semicolon_with_comment_on_next_line",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_trailing_semicolon_indented": {
            "name": "test_trailing_semicolon_indented",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_trailing_semicolon_noop": {
            "name": "test_trailing_semicolon_noop",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic": {
            "name": "test_cell_magic",
            "location": 79,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "test_cell_magic_noop": {
            "name": "test_cell_magic_noop",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_magic": {
            "name": "test_magic",
            "location": 122,
            "return": [],
            "arguments": {
                "src": [],
                "expected": [],
                "mode": []
            }
        },
        "test_non_python_magics": {
            "name": "test_non_python_magics",
            "location": 135,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "test_set_input": {
            "name": "test_set_input",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_input_already_contains_transformed_magic": {
            "name": "test_input_already_contains_transformed_magic",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_magic_noop": {
            "name": "test_magic_noop",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic_with_magic": {
            "name": "test_cell_magic_with_magic",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic_with_custom_python_magic": {
            "name": "test_cell_magic_with_custom_python_magic",
            "location": 188,
            "return": [],
            "arguments": {
                "mode": [],
                "expected_output": [],
                "expectation": []
            }
        },
        "test_cell_magic_nested": {
            "name": "test_cell_magic_nested",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic_with_magic_noop": {
            "name": "test_cell_magic_with_magic_noop",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_automagic": {
            "name": "test_automagic",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_multiline_magic": {
            "name": "test_multiline_magic",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_multiline_no_magic": {
            "name": "test_multiline_no_magic",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_cell_magic_with_invalid_body": {
            "name": "test_cell_magic_with_invalid_body",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_empty_cell": {
            "name": "test_empty_cell",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "test_entire_notebook_empty_metadata": {
            "name": "test_entire_notebook_empty_metadata",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_entire_notebook_trailing_newline": {
            "name": "test_entire_notebook_trailing_newline",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_entire_notebook_no_trailing_newline": {
            "name": "test_entire_notebook_no_trailing_newline",
            "location": 330,
            "return": [],
            "arguments": {}
        },
        "test_entire_notebook_without_changes": {
            "name": "test_entire_notebook_without_changes",
            "location": 379,
            "return": [],
            "arguments": {}
        },
        "test_non_python_notebook": {
            "name": "test_non_python_notebook",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_empty_string": {
            "name": "test_empty_string",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "test_unparseable_notebook": {
            "name": "test_unparseable_notebook",
            "location": 400,
            "return": [],
            "arguments": {}
        },
        "test_ipynb_diff_with_change": {
            "name": "test_ipynb_diff_with_change",
            "location": 407,
            "return": [],
            "arguments": {}
        },
        "test_ipynb_diff_with_no_change": {
            "name": "test_ipynb_diff_with_no_change",
            "location": 419,
            "return": [],
            "arguments": {}
        },
        "test_cache_isnt_written_if_no_jupyter_deps_single": {
            "name": "test_cache_isnt_written_if_no_jupyter_deps_single",
            "location": 431,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_cache_isnt_written_if_no_jupyter_deps_dir": {
            "name": "test_cache_isnt_written_if_no_jupyter_deps_dir",
            "location": 453,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_ipynb_flag": {
            "name": "test_ipynb_flag",
            "location": 475,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_ipynb_and_pyi_flags": {
            "name": "test_ipynb_and_pyi_flags",
            "location": 492,
            "return": [],
            "arguments": {}
        },
        "test_unable_to_replace_magics": {
            "name": "test_unable_to_replace_magics",
            "location": 508,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "black-main/tests/test_no_ipynb.py": {
        "test_ipynb_diff_with_no_change_single": {
            "name": "test_ipynb_diff_with_no_change_single",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_ipynb_diff_with_no_change_dir": {
            "name": "test_ipynb_diff_with_no_change_dir",
            "location": 25,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "black-main/tests/test_primer.py": {
        "capture_stdout": {
            "name": "capture_stdout",
            "location": 51,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "collect": {
            "name": "collect",
            "location": 104,
            "return": [],
            "arguments": {
                "queue": []
            }
        },
        "test_projects": {
            "name": "test_projects",
            "location": 272,
            "return": [],
            "arguments": {
                "caplog": []
            }
        },
        "PrimerLibTests.test_analyze_results": {
            "name": "test_analyze_results",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerLibTests.test_black_run": {
            "name": "test_black_run",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerLibTests.test_flatten_cli_args": {
            "name": "test_flatten_cli_args",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerLibTests.test_gen_check_output": {
            "name": "test_gen_check_output",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerLibTests.test_git_checkout_or_rebase": {
            "name": "test_git_checkout_or_rebase",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerLibTests.test_process_queue": {
            "name": "test_process_queue",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout": []
            }
        },
        "PrimerLibTests.test_load_projects_queue": {
            "name": "test_load_projects_queue",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerCLITests.test_async_main": {
            "name": "test_async_main",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerCLITests.test_handle_debug": {
            "name": "test_handle_debug",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimerCLITests.test_help_output": {
            "name": "test_help_output",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/test_trans.py": {
        "test_fexpr_spans": {
            "name": "test_fexpr_spans",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_fexpr_spans.check": {
            "name": "check",
            "location": 6,
            "return": [],
            "arguments": {
                "string": [],
                "expected_spans": [],
                "expected_slices": []
            }
        }
    },
    "black-main/tests/util.py": {
        "_assert_format_equal": {
            "name": "_assert_format_equal",
            "location": 32,
            "return": [],
            "arguments": {
                "expected": [],
                "actual": []
            }
        },
        "assert_format": {
            "name": "assert_format",
            "location": 56,
            "return": [],
            "arguments": {
                "source": [],
                "expected": [],
                "mode": []
            }
        },
        "dump_to_stderr": {
            "name": "dump_to_stderr",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 93,
            "return": [],
            "arguments": {
                "name": [],
                "data": []
            }
        },
        "read_data_from_file": {
            "name": "read_data_from_file",
            "location": 101,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "change_directory": {
            "name": "change_directory",
            "location": 121,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "BlackBaseTestCase.assertFormatEqual": {
            "name": "assertFormatEqual",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": []
            }
        }
    },
    "black-main/tests/__init__.py": {},
    "black-main/tests/data/async_as_identifier.py": {},
    "black-main/tests/data/attribute_access_on_number_literals.py": {},
    "black-main/tests/data/beginning_backslash.py": {},
    "black-main/tests/data/blackd_diff.py": {
        "abc": {
            "name": "abc",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/bracketmatch.py": {},
    "black-main/tests/data/cantfit.py": {},
    "black-main/tests/data/class_blank_parentheses.py": {
        "public_func_with_blank_parentheses": {
            "name": "public_func_with_blank_parentheses",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "class_under_the_func_with_blank_parentheses": {
            "name": "class_under_the_func_with_blank_parentheses",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "ClassWithSpaceParentheses.test_func": {
            "name": "test_func",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithEmptyFunc.func_with_blank_parentheses": {
            "name": "func_with_blank_parentheses",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "NormalClass.func_for_testing": {
            "name": "func_for_testing",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        }
    },
    "black-main/tests/data/class_methods_new_line.py": {
        "ClassWithInit.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithTheDocstringAndInit.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVars.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInit.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVars.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstring.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitWithInner.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitWithInner.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsWithInner.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassWithDecoInitAndVarsAndDocstringWithInner2.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassSimplestWithInnerWithDocstring.Inner.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/collections.py": {},
    "black-main/tests/data/comments.py": {
        "function": {
            "name": "function",
            "location": 32,
            "return": [],
            "arguments": {
                "default": []
            }
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/comments2.py": {
        "inline_comments_in_brackets_ruin_everything": {
            "name": "inline_comments_in_brackets_ruin_everything",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "Test._init_host": {
            "name": "_init_host",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "parsed": []
            }
        }
    },
    "black-main/tests/data/comments3.py": {
        "func": {
            "name": "func",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/comments4.py": {
        "foo": {
            "name": "foo",
            "location": 59,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo2": {
            "name": "foo2",
            "location": 75,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "foo3": {
            "name": "foo3",
            "location": 86,
            "return": [],
            "arguments": {
                "list_a": [],
                "list_b": []
            }
        },
        "C.test_fails_invalid_post_data": {
            "name": "test_fails_invalid_post_data",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "pyramid_config": [],
                "db_request": [],
                "post_data": [],
                "message": []
            }
        }
    },
    "black-main/tests/data/comments5.py": {
        "wat": {
            "name": "wat",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "decorated1": {
            "name": "decorated1",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/comments6.py": {
        "f": {
            "name": "f",
            "location": 80,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "func": {
            "name": "func",
            "location": 86,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "black-main/tests/data/comments7.py": {
        "func": {
            "name": "func",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "C.test_fails_invalid_post_data": {
            "name": "test_fails_invalid_post_data",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "pyramid_config": [],
                "db_request": [],
                "post_data": [],
                "message": []
            }
        }
    },
    "black-main/tests/data/comments_non_breaking_space.py": {
        "function": {
            "name": "function",
            "location": 37,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "black-main/tests/data/comment_after_escaped_newline.py": {
        "bob": {
            "name": "bob",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "bobtwo": {
            "name": "bobtwo",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/composition.py": {
        "C.test": {
            "name": "test",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.omitting_trailers": {
            "name": "omitting_trailers",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.easy_asserts": {
            "name": "easy_asserts",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.tricky_asserts": {
            "name": "tricky_asserts",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/composition_no_trailing_comma.py": {
        "C.test": {
            "name": "test",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.omitting_trailers": {
            "name": "omitting_trailers",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.easy_asserts": {
            "name": "easy_asserts",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.tricky_asserts": {
            "name": "tricky_asserts",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/debug_visitor.py": {
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.show": {
            "name": "show",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "code": []
            }
        }
    },
    "black-main/tests/data/decorators.py": {},
    "black-main/tests/data/docstring.py": {
        "foo": {
            "name": "foo",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "baz": {
            "name": "baz",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "troz": {
            "name": "troz",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "zort": {
            "name": "zort",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "poit": {
            "name": "poit",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "under_indent": {
            "name": "under_indent",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "over_indent": {
            "name": "over_indent",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "single_line": {
            "name": "single_line",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "this": {
            "name": "this",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "that": {
            "name": "that",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "and_that": {
            "name": "and_that",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "and_this": {
            "name": "and_this",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "multiline_whitespace": {
            "name": "multiline_whitespace",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "oneline_whitespace": {
            "name": "oneline_whitespace",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "empty": {
            "name": "empty",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "single_quotes": {
            "name": "single_quotes",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "believe_it_or_not_this_is_in_the_py_stdlib": {
            "name": "believe_it_or_not_this_is_in_the_py_stdlib",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "ignored_docstring": {
            "name": "ignored_docstring",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "single_line_docstring_with_whitespace": {
            "name": "single_line_docstring_with_whitespace",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "docstring_with_inline_tabs_and_space_indentation": {
            "name": "docstring_with_inline_tabs_and_space_indentation",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "docstring_with_inline_tabs_and_tab_indentation": {
            "name": "docstring_with_inline_tabs_and_tab_indentation",
            "location": 338,
            "return": [],
            "arguments": {}
        },
        "backslash_space": {
            "name": "backslash_space",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_1": {
            "name": "multiline_backslash_1",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_2": {
            "name": "multiline_backslash_2",
            "location": 361,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_3": {
            "name": "multiline_backslash_3",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "my_god_its_full_of_stars_1": {
            "name": "my_god_its_full_of_stars_1",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "my_god_its_full_of_stars_2": {
            "name": "my_god_its_full_of_stars_2",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "MyClass.method": {
            "name": "method",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/docstring_no_string_normalization.py": {
        "one_function": {
            "name": "one_function",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "shockingly_the_quotes_are_normalized": {
            "name": "shockingly_the_quotes_are_normalized",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "baz": {
            "name": "baz",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "poit": {
            "name": "poit",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "under_indent": {
            "name": "under_indent",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "over_indent": {
            "name": "over_indent",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "single_line": {
            "name": "single_line",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "this": {
            "name": "this",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "that": {
            "name": "that",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "and_that": {
            "name": "and_that",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "and_this": {
            "name": "and_this",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "believe_it_or_not_this_is_in_the_py_stdlib": {
            "name": "believe_it_or_not_this_is_in_the_py_stdlib",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "shockingly_the_quotes_are_normalized_v2": {
            "name": "shockingly_the_quotes_are_normalized_v2",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "backslash_space": {
            "name": "backslash_space",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_1": {
            "name": "multiline_backslash_1",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_2": {
            "name": "multiline_backslash_2",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "multiline_backslash_3": {
            "name": "multiline_backslash_3",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "ALonelyClass.AnEquallyLonelyMethod": {
            "name": "AnEquallyLonelyMethod",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/empty_lines.py": {
        "f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 151,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/expression.py": {
        "gen": {
            "name": "gen",
            "location": 498,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/fmtonoff.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 228,
            "return": [],
            "arguments": {
                "number": [],
                "no_annotation": [],
                "text": []
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 231,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 236,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 250,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "subscriptlist": {
            "name": "subscriptlist",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "import_as_names": {
            "name": "import_as_names",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "testlist_star_expr": {
            "name": "testlist_star_expr",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "yield_expr": {
            "name": "yield_expr",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "example": {
            "name": "example",
            "location": 297,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "off_and_on_without_data": {
            "name": "off_and_on_without_data",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "on_and_off_broken": {
            "name": "on_and_off_broken",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "long_lines": {
            "name": "long_lines",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "single_literal_yapf_disable": {
            "name": "single_literal_yapf_disable",
            "location": 376,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/fmtonoff2.py": {
        "test_fader": {
            "name": "test_fader",
            "location": 18,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "check_fader": {
            "name": "check_fader",
            "location": 21,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "verify_fader": {
            "name": "verify_fader",
            "location": 29,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "test_calculate_fades": {
            "name": "test_calculate_fades",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/fmtonoff3.py": {},
    "black-main/tests/data/fmtonoff4.py": {
        "f": {
            "name": "f",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/fmtskip.py": {},
    "black-main/tests/data/fmtskip2.py": {},
    "black-main/tests/data/fmtskip3.py": {},
    "black-main/tests/data/fmtskip4.py": {},
    "black-main/tests/data/fmtskip5.py": {},
    "black-main/tests/data/fmtskip6.py": {
        "A.f": {
            "name": "f",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/force_py36.py": {
        "long_function_name": {
            "name": "long_function_name",
            "location": 7,
            "return": [],
            "arguments": {
                "argument_one": [],
                "argument_two": [],
                "argument_three": [],
                "argument_four": [],
                "argument_five": [],
                "argument_six": []
            }
        }
    },
    "black-main/tests/data/force_pyi.py": {
        "zoo": {
            "name": "zoo",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "spam": {
            "name": "spam",
            "location": 61,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "eggs": {
            "name": "eggs",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "B.BMethod": {
            "name": "BMethod",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    },
    "black-main/tests/data/fstring.py": {},
    "black-main/tests/data/function.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 135,
            "return": [],
            "arguments": {
                "number": [],
                "no_annotation": [],
                "text": []
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 146,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces_types": {
            "name": "spaces_types",
            "location": 151,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": [],
                "e": [],
                "f": [],
                "g": [],
                "h": [],
                "i": []
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 165,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "example": {
            "name": "example",
            "location": 169,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "long_lines": {
            "name": "long_lines",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "trailing_comma": {
            "name": "trailing_comma",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "f": {
            "name": "f",
            "location": 233,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "__await__": {
            "name": "__await__",
            "location": 246,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/function2.py": {
        "f": {
            "name": "f",
            "location": 57,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "g": {
            "name": "g",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "h": {
            "name": "h",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "g.inner": {
            "name": "inner",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "h.inner": {
            "name": "inner",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "i_should_be_followed_by_only_one_newline": {
            "name": "i_should_be_followed_by_only_one_newline",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "IHopeYouAreHavingALovelyDay.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/function_trailing_comma.py": {
        "f": {
            "name": "f",
            "location": 77,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "f2": {
            "name": "f2",
            "location": 63,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "xxxxxxxxxxxxxxxxxxxxxxxxxxxx": {
            "name": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "some_function_with_a_really_long_name": {
            "name": "some_function_with_a_really_long_name",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "some_method_with_a_really_long_name": {
            "name": "some_method_with_a_really_long_name",
            "location": 130,
            "return": [],
            "arguments": {
                "very_long_parameter_so_yeah": [],
                "another_long_parameter": []
            }
        },
        "func": {
            "name": "func",
            "location": 146,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/import_spacing.py": {},
    "black-main/tests/data/long_strings.py": {
        "foo": {
            "name": "foo",
            "location": 593,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/long_strings_flag_disabled.py": {
        "foo": {
            "name": "foo",
            "location": 273,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/long_strings__edge_case.py": {},
    "black-main/tests/data/long_strings__regression.py": {
        "foo": {
            "name": "foo",
            "location": 862,
            "return": [],
            "arguments": {}
        },
        "A": {
            "name": "A",
            "location": 942,
            "return": [],
            "arguments": {}
        },
        "_legacy_listen_examples": {
            "name": "_legacy_listen_examples",
            "location": 1020,
            "return": [],
            "arguments": {}
        },
        "A.foo": {
            "name": "foo",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.disappearing_comment": {
            "name": "disappearing_comment",
            "location": 611,
            "return": [],
            "arguments": {}
        },
        "A.append": {
            "name": "append",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.xxxx_xxx_xx_xxxxxxxxxx_xxxx_xxxxxxxxx": {
            "name": "xxxx_xxx_xx_xxxxxxxxxx_xxxx_xxxxxxxxx",
            "location": 740,
            "return": [],
            "arguments": {
                "xxxx": []
            }
        },
        "Step.who": {
            "name": "who",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.B": {
            "name": "B",
            "location": 943,
            "return": [],
            "arguments": {}
        },
        "xxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxx": {
            "name": "xxxxxxx_xxxxxx",
            "location": 956,
            "return": [],
            "arguments": {
                "xxxx": []
            }
        },
        "A.B.foo": {
            "name": "foo",
            "location": 887,
            "return": [],
            "arguments": {}
        },
        "A.B.C": {
            "name": "C",
            "location": 944,
            "return": [],
            "arguments": {}
        },
        "A.B.C.D": {
            "name": "D",
            "location": 945,
            "return": [],
            "arguments": {}
        },
        "A.B.C.D.E": {
            "name": "E",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "A.B.C.D.E.F": {
            "name": "F",
            "location": 947,
            "return": [],
            "arguments": {}
        },
        "A.B.C.D.E.F.G": {
            "name": "G",
            "location": 948,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/missing_final_newline.py": {},
    "black-main/tests/data/numeric_literals.py": {},
    "black-main/tests/data/numeric_literals_skip_underscores.py": {},
    "black-main/tests/data/parenthesized_context_managers.py": {},
    "black-main/tests/data/pattern_matching_complex.py": {},
    "black-main/tests/data/pattern_matching_extras.py": {},
    "black-main/tests/data/pattern_matching_generic.py": {},
    "black-main/tests/data/pattern_matching_invalid.py": {},
    "black-main/tests/data/pattern_matching_simple.py": {},
    "black-main/tests/data/pattern_matching_style.py": {},
    "black-main/tests/data/pep_570.py": {
        "positional_only_arg": {
            "name": "positional_only_arg",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "all_markers": {
            "name": "all_markers",
            "location": 5,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "all_markers_with_args_and_kwargs": {
            "name": "all_markers_with_args_and_kwargs",
            "location": 9,
            "return": [],
            "arguments": {
                "c_long_one": [],
                "d_long_one": []
            }
        },
        "all_markers_with_defaults": {
            "name": "all_markers_with_defaults",
            "location": 23,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "long_one_with_long_parameter_names": {
            "name": "long_one_with_long_parameter_names",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/pep_572.py": {
        "foo": {
            "name": "foo",
            "location": 18,
            "return": [],
            "arguments": {
                "answer": []
            }
        }
    },
    "black-main/tests/data/pep_572_do_not_remove_parens.py": {},
    "black-main/tests/data/pep_572_py310.py": {},
    "black-main/tests/data/pep_572_py39.py": {},
    "black-main/tests/data/pep_572_remove_parens.py": {
        "foo": {
            "name": "foo",
            "location": 79,
            "return": [],
            "arguments": {
                "answer": []
            }
        },
        "foo2": {
            "name": "foo2",
            "location": 83,
            "return": [],
            "arguments": {
                "answer": []
            }
        },
        "a": {
            "name": "a",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "this_is_so_dumb": {
            "name": "this_is_so_dumb",
            "location": 103,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/percent_precedence.py": {},
    "black-main/tests/data/power_op_newline.py": {},
    "black-main/tests/data/power_op_spacing.py": {
        "function": {
            "name": "function",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "function_replace_spaces": {
            "name": "function_replace_spaces",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "function_dont_replace_spaces": {
            "name": "function_dont_replace_spaces",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/python2_detection.py": {},
    "black-main/tests/data/python37.py": {
        "f": {
            "name": "f",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "awaited_generator_value": {
            "name": "awaited_generator_value",
            "location": 60,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "make_arange": {
            "name": "make_arange",
            "location": 64,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "black-main/tests/data/python38.py": {
        "starred_return": {
            "name": "starred_return",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "starred_yield": {
            "name": "starred_yield",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "t": {
            "name": "t",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/python39.py": {},
    "black-main/tests/data/remove_parens.py": {
        "example": {
            "name": "example",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "example1": {
            "name": "example1",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "example1point5": {
            "name": "example1point5",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "example2": {
            "name": "example2",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "example3": {
            "name": "example3",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "example4": {
            "name": "example4",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "example5": {
            "name": "example5",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "example6": {
            "name": "example6",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "example7": {
            "name": "example7",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "example8": {
            "name": "example8",
            "location": 141,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/slices.py": {},
    "black-main/tests/data/string_prefixes.py": {
        "docstring_singleline": {
            "name": "docstring_singleline",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "docstring_multiline": {
            "name": "docstring_multiline",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "black-main/tests/data/string_quotes.py": {},
    "black-main/tests/data/stub.py": {
        "f": {
            "name": "f",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "h": {
            "name": "h",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "B.b": {
            "name": "b",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.f": {
            "name": "f",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.g": {
            "name": "g",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nested.verse": {
            "name": "verse",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.f": {
            "name": "f",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.h": {
            "name": "h",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.i": {
            "name": "i",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.k": {
            "name": "k",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "E.f": {
            "name": "f",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "F.f": {
            "name": "f",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "K.f": {
            "name": "f",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nested.secret.who_has_to_know": {
            "name": "who_has_to_know",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.g": {
            "name": "g",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.j": {
            "name": "j",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.C.l": {
            "name": "l",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conditional.C.m": {
            "name": "m",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/torture.py": {
        "test": {
            "name": "test",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "othr": []
            }
        },
        "A.foo": {
            "name": "foo",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/trailing_comma_optional_parens1.py": {
        "X.get_help_text": {
            "name": "get_help_text",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.b": {
            "name": "b",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "black-main/tests/data/trailing_comma_optional_parens2.py": {},
    "black-main/tests/data/trailing_comma_optional_parens3.py": {},
    "black-main/tests/data/tricky_unicode_symbols.py": {},
    "black-main/tests/data/tupleassign.py": {},
    "black-main/tests/data/include_exclude_tests/b/.definitely_exclude/a.py": {},
    "black-main/tests/data/include_exclude_tests/b/dont_exclude/a.py": {},
    "black-main/tests/data/include_exclude_tests/b/exclude/a.py": {},
    "black-main/tests/data/invalid_gitignore_tests/a.py": {},
    "black-main/tests/data/invalid_nested_gitignore_tests/a.py": {},
    "black-main/tests/data/invalid_nested_gitignore_tests/a/a.py": {},
    "black-main/tests/data/nested_gitignore_tests/x.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/a.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/b.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/c.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/child/a.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/child/b.py": {},
    "black-main/tests/data/nested_gitignore_tests/root/child/c.py": {}
}
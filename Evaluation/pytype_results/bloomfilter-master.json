{
    "bloomfilter-master/setup.py": {},
    "bloomfilter-master/bloomfilter/__init__.py": {
        "sha256_hash_fun": {
            "name": "sha256_hash_fun",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "e": [],
                "c": []
            }
        },
        "optimal_hash_runs": {
            "name": "optimal_hash_runs",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "total_items": [],
                "filter_bits": []
            }
        },
        "optimal_filter_bits": {
            "name": "optimal_filter_bits",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "total_items": [],
                "error_rate": []
            }
        },
        "len": {
            "name": "len",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "bloomfilter": [],
                "filter_bits": [],
                "hash_runs": []
            }
        },
        "element": {
            "name": "element",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "b": [],
                "filter_bits": [],
                "hash_runs": [],
                "hash_funs": []
            }
        },
        "union": {
            "name": "union",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "intersection": {
            "name": "intersection",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "bloomfilter-master/tests/__init__.py": {
        "TestUtils.test_optimal_hash_runs": {
            "name": "test_optimal_hash_runs",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_optimal_filter_bits": {
            "name": "test_optimal_filter_bits",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_element_is_deterministic": {
            "name": "test_element_is_deterministic",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_element_is_int": {
            "name": "test_element_is_int",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_intersection_duplicates": {
            "name": "test_intersection_duplicates",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_intersection_unions": {
            "name": "test_intersection_unions",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_union_nests": {
            "name": "test_union_nests",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_false_positive_rate": {
            "name": "test_false_positive_rate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_count": [],
                "bloom_size": [],
                "bloom_hashes": []
            }
        },
        "TestBloomFilter.test_false_positive_rate_at_different_settings": {
            "name": "test_false_positive_rate_at_different_settings",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBloomFilter.test_len": {
            "name": "test_len",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
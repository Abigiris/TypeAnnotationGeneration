{
    "bm-master/ebsetenv.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bm-master/locustfile.py": {},
    "bm-master/manage.py": {},
    "bm-master/bm/routing.py": {},
    "bm-master/bm/__init__.py": {},
    "bm-master/bm/contrib/__init__.py": {},
    "bm-master/bm/contrib/sites/__init__.py": {},
    "bm-master/bm/contrib/sites/migrations/0001_initial.py": {},
    "bm-master/bm/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "bm-master/bm/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "bm-master/bm/contrib/sites/migrations/__init__.py": {},
    "bm-master/bm/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CeleryConfig.ready": {
            "name": "ready",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/taskapp/__init__.py": {},
    "bm-master/bm/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountAdapter.send_mail": {
            "name": "send_mail",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_prefix": [],
                "email": [],
                "context": []
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "sociallogin": []
            }
        }
    },
    "bm-master/bm/users/admin.py": {
        "MyUserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/dot_dict.py": {},
    "bm-master/bm/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/serializer.py": {
        "UserSerializer.get_profile_url": {
            "name": "get_profile_url",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object": []
            }
        }
    },
    "bm-master/bm/users/urls.py": {},
    "bm-master/bm/users/utils.py": {
        "to_datetime_format": {
            "name": "to_datetime_format",
            "location": 10,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "date": [],
                "date_format": []
            }
        },
        "to_datetime_object": {
            "name": "to_datetime_object",
            "location": 30,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "date": [],
                "date_format": []
            }
        },
        "days_to_secs": {
            "name": "days_to_secs",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "days": []
            }
        },
        "import_class": {
            "name": "import_class",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "set_cache": {
            "name": "set_cache",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "data": [],
                "timeout": []
            }
        },
        "get_cache": {
            "name": "get_cache",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "diff_date_months": {
            "name": "diff_date_months",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "date1": [],
                "date2": []
            }
        }
    },
    "bm-master/bm/users/views.py": {
        "redirect_password_rest_done": {
            "name": "redirect_password_rest_done",
            "location": 24,
            "return": [],
            "arguments": {
                "request": [],
                "uidb64": [],
                "token": []
            }
        },
        "handling_mail_confirm": {
            "name": "handling_mail_confirm",
            "location": 43,
            "return": [],
            "arguments": {
                "request": [],
                "key": []
            }
        },
        "handling_user": {
            "name": "handling_user",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "display_home_page": {
            "name": "display_home_page",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "redirect_after_email_confirm": {
            "name": "redirect_after_email_confirm",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "password_reset_done": {
            "name": "password_reset_done",
            "location": 176,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "uidb64": [],
                "token": []
            }
        },
        "change_password_done": {
            "name": "change_password_done",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "requests": []
            }
        },
        "LoginAfterPasswordChangeView.success_url": {
            "name": "success_url",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserDetailView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 99,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_object": {
            "name": "get_object",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserListView.get_object": {
            "name": "get_object",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMPasswordResetView.post": {
            "name": "post",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "bm-master/bm/users/__init__.py": {},
    "bm-master/bm/users/migrations/0001_initial.py": {},
    "bm-master/bm/users/migrations/__init__.py": {},
    "bm-master/bm/users/tests/factories.py": {},
    "bm-master/bm/users/tests/test_admin.py": {
        "TestMyUserCreationForm.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyUserCreationForm.test_clean_username_success": {
            "name": "test_clean_username_success",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyUserCreationForm.test_clean_username_false": {
            "name": "test_clean_username_false",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_models.py": {
        "TestUser.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test__str__": {
            "name": "test__str__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_urls.py": {
        "TestUserURLs.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_list_reverse": {
            "name": "test_list_reverse",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_list_resolve": {
            "name": "test_list_resolve",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_redirect_reverse": {
            "name": "test_redirect_reverse",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_redirect_resolve": {
            "name": "test_redirect_resolve",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_detail_reverse": {
            "name": "test_detail_reverse",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_detail_resolve": {
            "name": "test_detail_resolve",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_update_reverse": {
            "name": "test_update_reverse",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_update_resolve": {
            "name": "test_update_resolve",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_utils.py": {
        "TestUserURLs.test_import_class": {
            "name": "test_import_class",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "bm-master/bm/users/tests/test_views.py": {
        "BaseUserTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/__init__.py": {},
    "bm-master/config/asgi.py": {},
    "bm-master/config/urls.py": {},
    "bm-master/config/wsgi.py": {},
    "bm-master/config/__init__.py": {},
    "bm-master/config/settings/base.py": {},
    "bm-master/config/settings/local.py": {},
    "bm-master/config/settings/production.py": {},
    "bm-master/config/settings/test.py": {},
    "bm-master/config/settings/__init__.py": {},
    "bm-master/docs/conf.py": {},
    "bm-master/docs/__init__.py": {},
    "bm-master/load_test/user_behaviour.py": {
        "UserBehavior.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "UserBehavior.base_url": {
            "name": "base_url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.packages_url": {
            "name": "packages_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.user_details": {
            "name": "user_details",
            "location": 45,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.on_start": {
            "name": "on_start",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.login": {
            "name": "login",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.currency_details": {
            "name": "currency_details",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/load_test/__init__.py": {},
    "bm-master/packages/admin.py": {},
    "bm-master/packages/apps.py": {},
    "bm-master/packages/config.py": {
        "PaymentTypeNumber.default_type": {
            "name": "default_type",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "PaymentTypeNumber.paytm_type": {
            "name": "paytm_type",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "PaymentTypeNumber.excel_type": {
            "name": "excel_type",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "bm-master/packages/consumers.py": {
        "BMNotifcationConsumer.validation_jwt": {
            "name": "validation_jwt",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "bm-master/packages/models.py": {
        "after_user_signed_up": {
            "name": "after_user_signed_up",
            "location": 19,
            "return": [],
            "arguments": {
                "sender": [],
                "request": [],
                "user": []
            }
        },
        "validate_country_code_": {
            "name": "validate_country_code_",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "post_save_items_list": {
            "name": "post_save_items_list",
            "location": 178,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "MonthBudgetAmount.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsList.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageSettings.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsGroupLog.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/routing.py": {},
    "bm-master/packages/serializers.py": {
        "ItemsListSerializer.get_total_amount": {
            "name": "get_total_amount",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "ItemsListSerializer.to_representation": {
            "name": "to_representation",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "MonthBudgetAmountSerializer.Meta.get_month": {
            "name": "get_month",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ItemsListSerializer.get_total_amount.flat": {
            "name": "flat",
            "location": 40,
            "return": [],
            "arguments": {
                "e": []
            }
        }
    },
    "bm-master/packages/tasks.py": {},
    "bm-master/packages/urls.py": {},
    "bm-master/packages/utils.py": {
        "flatter_list": {
            "name": "flatter_list",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "items": []
            }
        },
        "to_hexdigit": {
            "name": "to_hexdigit",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "to_hrs": {
            "name": "to_hrs",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "mins": [],
                "secs": [],
                "time_format": []
            }
        },
        "to_percentage": {
            "name": "to_percentage",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "current_value": [],
                "total_value": []
            }
        },
        "validate_bm_standard_date_format": {
            "name": "validate_bm_standard_date_format",
            "location": 57,
            "return": [
                "Optional[Match]"
            ],
            "arguments": {
                "value": []
            }
        },
        "validate_less_than_today": {
            "name": "validate_less_than_today",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "to_query_string_dict": {
            "name": "to_query_string_dict",
            "location": 97,
            "return": [
                "dict"
            ],
            "arguments": {
                "value": []
            }
        },
        "find_dict_value": {
            "name": "find_dict_value",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "key_word": [],
                "_items": []
            }
        },
        "start_and_end_month": {
            "name": "start_and_end_month",
            "location": 120,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "month": [],
                "operation": [],
                "date_format": []
            }
        },
        "start_month_year": {
            "name": "start_month_year",
            "location": 152,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "month": [],
                "operation": [],
                "date_format": []
            }
        },
        "sending_mail_pdf": {
            "name": "sending_mail_pdf",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "mail_to": [],
                "content": [],
                "file_pointer": []
            }
        }
    },
    "bm-master/packages/views.py": {},
    "bm-master/packages/__init__.py": {},
    "bm-master/packages/flat_file_interface/api.py": {
        "FlatFileInterFaceAPI.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "FlatFileInterFaceAPI.read_file": {
            "name": "read_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_format": [],
                "name": []
            }
        }
    },
    "bm-master/packages/flat_file_interface/base_excel_interface.py": {
        "BaseExcelClass.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "BaseExcelClass.read_excel": {
            "name": "read_excel",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseExcelClass.read_csv": {
            "name": "read_csv",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseExcelClass.data": {
            "name": "data",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.mapping_fields": {
            "name": "mapping_fields",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "BaseExcelClass.paytm_process": {
            "name": "paytm_process",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.insert_db": {
            "name": "insert_db",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "BaseExcelClass.get_info": {
            "name": "get_info",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.api_name": {
            "name": "api_name",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/flat_file_interface/pandas_interface.py": {
        "PandasExcelAPI.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "PandasExcelAPI.read_excel": {
            "name": "read_excel",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PandasExcelAPI.read_csv": {
            "name": "read_csv",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PandasExcelAPI.data": {
            "name": "data",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.mapping_fields": {
            "name": "mapping_fields",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "entry_type": [],
                "options": []
            }
        },
        "PandasExcelAPI.paytm_process": {
            "name": "paytm_process",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.get_info": {
            "name": "get_info",
            "location": 135,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.get_mem_info": {
            "name": "get_mem_info",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.insert_db": {
            "name": "insert_db",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.api_name": {
            "name": "api_name",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.as_msg_client": {
            "name": "as_msg_client",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_value": [],
                "total_value": []
            }
        },
        "PandasExcelAPI.close_connection": {
            "name": "close_connection",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/flat_file_interface/__init__.py": {},
    "bm-master/packages/migrations/0001_initial.py": {},
    "bm-master/packages/migrations/__init__.py": {},
    "bm-master/packages/packages_task/task_generate_summary.py": {
        "celery_generate_summary": {
            "name": "celery_generate_summary",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "content": [],
                "cache_name": []
            }
        }
    },
    "bm-master/packages/packages_task/task_upload_flat_file.py": {
        "celery_upload_flat_file": {
            "name": "celery_upload_flat_file",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "file_name": [],
                "file_format": [],
                "use_fields": [],
                "entry_type": [],
                "temp_location": []
            }
        }
    },
    "bm-master/packages/packages_views/viewItemsAll.py": {
        "get_months": {
            "name": "get_months",
            "location": 117,
            "return": [],
            "arguments": {
                "request": [],
                "start": [],
                "end": []
            }
        },
        "itemlist_get_by_months": {
            "name": "itemlist_get_by_months",
            "location": 160,
            "return": [],
            "arguments": {
                "request": [],
                "start": [],
                "end": []
            }
        },
        "get_all_group_in_itemslist": {
            "name": "get_all_group_in_itemslist",
            "location": 203,
            "return": [],
            "arguments": {
                "request": [],
                "start": [],
                "end": []
            }
        },
        "delete_bulk": {
            "name": "delete_bulk",
            "location": 244,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ItemsListCreateView.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsListCreateView.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 31,
            "return": [
                "Type[Union[(packages.serializers.ItemsListSerializer, packages.serializers.ItemsListSerializerOnlyForListFun)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsListCreateView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "save_object": []
            }
        },
        "ItemsListCreateView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "custom_request_data": [],
                "update": []
            }
        },
        "ItemsListCreateView.create": {
            "name": "create",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ItemsListCreateView.update": {
            "name": "update",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "ItemsListCreateView.partial_update": {
            "name": "partial_update",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "ItemsListCreateView.destroy": {
            "name": "destroy",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "bm-master/packages/packages_views/viewMBA.py": {
        "get_range_mba": {
            "name": "get_range_mba",
            "location": 133,
            "return": [],
            "arguments": {
                "request": [],
                "start": [],
                "end": []
            }
        },
        "MonthBudgetAmountView.get_queryset": {
            "name": "get_queryset",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthBudgetAmountView.get_valid_date_or_error_response": {
            "name": "get_valid_date_or_error_response",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "month_year": []
            }
        },
        "MonthBudgetAmountView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "save_object": []
            }
        },
        "MonthBudgetAmountView.return_only_monthYear": {
            "name": "return_only_monthYear",
            "location": 72,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "month_year": []
            }
        },
        "MonthBudgetAmountView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "custom_request_data": [],
                "update": []
            }
        },
        "MonthBudgetAmountView.retrieve": {
            "name": "retrieve",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "month_year": []
            }
        },
        "MonthBudgetAmountView.create": {
            "name": "create",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MonthBudgetAmountView.update": {
            "name": "update",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "month_year": []
            }
        },
        "MonthBudgetAmountView.partial_update": {
            "name": "partial_update",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "month_year": []
            }
        }
    },
    "bm-master/packages/packages_views/viewMiscellaneous.py": {
        "get_currency": {
            "name": "get_currency",
            "location": 32,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "print_summary_config": {
            "name": "print_summary_config",
            "location": 47,
            "return": [
                "Dict[(str, Dict[(str, Optional[str])])]"
            ],
            "arguments": {}
        },
        "print_summary_key": {
            "name": "print_summary_key",
            "location": 72,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "print_summary": {
            "name": "print_summary",
            "location": 104,
            "return": [],
            "arguments": {
                "request": [],
                "key_value": []
            }
        },
        "get_timezone_list": {
            "name": "get_timezone_list",
            "location": 139,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "bm-master/packages/packages_views/viewSettings.py": {
        "PackageSettingsView": {
            "name": "PackageSettingsView",
            "location": 11,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "PackageSettingsView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 13,
            "return": [],
            "arguments": {
                "save_object": []
            }
        },
        "PackageSettingsView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 29,
            "return": [],
            "arguments": {
                "custom_request_data": [],
                "update": []
            }
        }
    },
    "bm-master/packages/packages_views/viewUpload.py": {
        "upload_term_condition": {
            "name": "upload_term_condition",
            "location": 23,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "upload_file_wrapper": {
            "name": "upload_file_wrapper",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "temp_location": [],
                "file_name": [],
                "file_format": []
            }
        },
        "upload_flat_file": {
            "name": "upload_flat_file",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "file_name": [],
                "file_format": [],
                "use_fields": [],
                "entry_type": []
            }
        },
        "is_paytm_active": {
            "name": "is_paytm_active",
            "location": 145,
            "return": [],
            "arguments": {
                "request": [],
                "file_name": [],
                "file_format": []
            }
        },
        "upload_file_wrapper.upload_file_handler": {
            "name": "upload_file_handler",
            "location": 44,
            "return": [],
            "arguments": {
                "file_pointer": [],
                "_file_name": []
            }
        }
    },
    "bm-master/packages/serializers_childs/filter_nested_items.py": {
        "FilterNestedItems.to_representation": {
            "name": "to_representation",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "bm-master/packages/serializers_childs/package_rest_exceptionHandling.py": {
        "custom_exception_handler": {
            "name": "custom_exception_handler",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "exc": [],
                "context": []
            }
        }
    },
    "bm-master/packages/templatetags/find_dict_value.py": {
        "find_dict_value_payment": {
            "name": "find_dict_value_payment",
            "location": 11,
            "return": [],
            "arguments": {
                "key_word": []
            }
        }
    },
    "bm-master/packages/tests/test_upload_list.py": {
        "TestUploadKeys.setUpClass": {
            "name": "setUpClass",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestUploadKeys.setUpClass.test__str__": {
            "name": "test__str__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/tests/test_utils.py": {
        "TestPackagesUtils.test_to_hexdigit": {
            "name": "test_to_hexdigit",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_to_percentage": {
            "name": "test_to_percentage",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_todays": {
            "name": "test_todays",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_find_dict_value": {
            "name": "test_find_dict_value",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_to_percentage.test__str__": {
            "name": "test__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/admin.py": {},
    "bm-master/weather/apps.py": {},
    "bm-master/weather/exceptions.py": {
        "LatLonDoesNotExit.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateDoesNotExit.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/havesine.py": {
        "Haversine.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coord1": [],
                "coord2": []
            }
        }
    },
    "bm-master/weather/models.py": {
        "AirPollution.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirPollutionData.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/serializers.py": {},
    "bm-master/weather/tasks.py": {
        "delete_all_airpollution": {
            "name": "delete_all_airpollution",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "lat": [],
                "lon": []
            }
        },
        "celery_update_air_pollution_db": {
            "name": "celery_update_air_pollution_db",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "lat": [],
                "lon": [],
                "delete_all": []
            }
        }
    },
    "bm-master/weather/tests.py": {},
    "bm-master/weather/urls.py": {},
    "bm-master/weather/views.py": {
        "air_pollution": {
            "name": "air_pollution",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "weather_date": [],
                "lat": [],
                "lon": []
            }
        },
        "get_air_pollution": {
            "name": "get_air_pollution",
            "location": 59,
            "return": [],
            "arguments": {
                "request": [],
                "weather_date": [],
                "lat": [],
                "lon": []
            }
        }
    },
    "bm-master/weather/__init__.py": {},
    "bm-master/weather/weatherTask/task_weather.py": {},
    "bm-master/weather2/admin.py": {},
    "bm-master/weather2/apps.py": {},
    "bm-master/weather2/models.py": {},
    "bm-master/weather2/tasks.py": {
        "celery_get_co_data": {
            "name": "celery_get_co_data",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "lat": [],
                "lon": []
            }
        },
        "celery_get_so2_data": {
            "name": "celery_get_so2_data",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "lat": [],
                "lon": []
            }
        }
    },
    "bm-master/weather2/tests.py": {
        "TestAirPollution.test_result_airpollution_equal": {
            "name": "test_result_airpollution_equal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather2/urls.py": {},
    "bm-master/weather2/utils.py": {
        "get_air_pollution_data": {
            "name": "get_air_pollution_data",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "lat": [],
                "lon": [],
                "gtype_code": []
            }
        },
        "empty_gas_type": {
            "name": "empty_gas_type",
            "location": 102,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {}
        }
    },
    "bm-master/weather2/views.py": {
        "get_openweather_data": {
            "name": "get_openweather_data",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "lat": [],
                "lon": [],
                "gcode_name": []
            }
        },
        "get_count_days": {
            "name": "get_count_days",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "last_upate": []
            }
        },
        "set_caches_redis": {
            "name": "set_caches_redis",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "lat": [],
                "lon": [],
                "gcode_name": [],
                "caches_name": []
            }
        },
        "get_caches_redis": {
            "name": "get_caches_redis",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "caches_content": [],
                "gcode_name": []
            }
        },
        "get_air_pollution": {
            "name": "get_air_pollution",
            "location": 183,
            "return": [],
            "arguments": {
                "request": [],
                "weather_date": [],
                "lat": [],
                "lon": []
            }
        }
    },
    "bm-master/weather2/__init__.py": {}
}
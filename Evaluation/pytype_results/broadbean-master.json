{
    "broadbean-master/setup.py": {},
    "broadbean-master/broadbean/blueprint.py": {
        "_subelementBuilder": {
            "name": "_subelementBuilder",
            "location": 773,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "blueprint": [],
                "SR": [],
                "durs": []
            }
        },
        "BluePrint.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "funlist": [],
                "argslist": [],
                "namelist": [],
                "marker1": [],
                "marker2": [],
                "segmentmarker1": [],
                "segmentmarker2": [],
                "SR": [],
                "durslist": []
            }
        },
        "BluePrint._basename": {
            "name": "_basename",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": []
            }
        },
        "BluePrint._make_names_unique": {
            "name": "_make_names_unique",
            "location": 141,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "lst": [
                    "_T0@@"
                ]
            }
        },
        "BluePrint.length_segments": {
            "name": "length_segments",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.duration": {
            "name": "duration",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.points": {
            "name": "points",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.durations": {
            "name": "durations",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.SR": {
            "name": "SR",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.description": {
            "name": "description",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.write_to_json": {
            "name": "write_to_json",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_file": []
            }
        },
        "BluePrint.blueprint_from_description": {
            "name": "blueprint_from_description",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "blue_dict": []
            }
        },
        "BluePrint.init_from_json": {
            "name": "init_from_json",
            "location": 316,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "path_to_file": []
            }
        },
        "BluePrint._makeWaitDurations": {
            "name": "_makeWaitDurations",
            "location": 331,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.showPrint": {
            "name": "showPrint",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BluePrint.changeArg": {
            "name": "changeArg",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "arg": [],
                "value": [],
                "replaceeverywhere": []
            }
        },
        "BluePrint.changeDuration": {
            "name": "changeDuration",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "dur": [],
                "replaceeverywhere": []
            }
        },
        "BluePrint.setSR": {
            "name": "setSR",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SR": []
            }
        },
        "BluePrint.setSegmentMarker": {
            "name": "setSegmentMarker",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "specs": [],
                "markerID": []
            }
        },
        "BluePrint.removeSegmentMarker": {
            "name": "removeSegmentMarker",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "markerID": []
            }
        },
        "BluePrint.copy": {
            "name": "copy",
            "location": 575,
            "return": [
                "_TBluePrint@@BluePrint@@"
            ],
            "arguments": {
                "self": [
                    "_TBluePrint@@BluePrint@@"
                ]
            }
        },
        "BluePrint.insertSegment": {
            "name": "insertSegment",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "func": [],
                "args": [],
                "dur": [],
                "name": [],
                "durs": []
            }
        },
        "BluePrint.removeSegment": {
            "name": "removeSegment",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BluePrint.__add__": {
            "name": "__add__",
            "location": 689,
            "return": [
                "_TBluePrint@@BluePrint@@"
            ],
            "arguments": {
                "self": [
                    "_TBluePrint@@BluePrint@@"
                ],
                "other": []
            }
        },
        "BluePrint.__eq__": {
            "name": "__eq__",
            "location": 735,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "broadbean-master/broadbean/broadbean.py": {
        "marked_for_deletion": {
            "name": "marked_for_deletion",
            "location": 79,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "replaced_by": []
            }
        },
        "_channelListSorter": {
            "name": "_channelListSorter",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "channels": []
            }
        },
        "PulseAtoms.sine": {
            "name": "sine",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "freq": [],
                "ampl": [],
                "off": [],
                "phase": [],
                "SR": [],
                "npts": []
            }
        },
        "PulseAtoms.ramp": {
            "name": "ramp",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "start": [],
                "stop": [],
                "SR": [],
                "npts": []
            }
        },
        "PulseAtoms.waituntil": {
            "name": "waituntil",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "dummy": [],
                "SR": [],
                "npts": []
            }
        },
        "PulseAtoms.gaussian": {
            "name": "gaussian",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "ampl": [],
                "sigma": [],
                "mu": [],
                "offset": [],
                "SR": [],
                "npts": []
            }
        },
        "PulseAtoms.gaussian_smooth_cutoff": {
            "name": "gaussian_smooth_cutoff",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "ampl": [],
                "sigma": [],
                "mu": [],
                "offset": [],
                "SR": [],
                "npts": []
            }
        },
        "marked_for_deletion.decorator": {
            "name": "decorator",
            "location": 84,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_AWGOutput.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rawpackage": [],
                "channels": []
            }
        },
        "_AWGOutput.__getitem__": {
            "name": "__getitem__",
            "location": 149,
            "return": [
                "Tuple[(list, list, list, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "marked_for_deletion.decorator.warner": {
            "name": "warner",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "broadbean-master/broadbean/element.py": {
        "Element.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.addBluePrint": {
            "name": "addBluePrint",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "blueprint": []
            }
        },
        "Element.addFlags": {
            "name": "addFlags",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "flags": []
            }
        },
        "Element.addArray": {
            "name": "addArray",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "waveform": [],
                "SR": []
            }
        },
        "Element.validateDurations": {
            "name": "validateDurations",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.getArrays": {
            "name": "getArrays",
            "location": 200,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "includetime": []
            }
        },
        "Element.SR": {
            "name": "SR",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.points": {
            "name": "points",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.duration": {
            "name": "duration",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.channels": {
            "name": "channels",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.description": {
            "name": "description",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.write_to_json": {
            "name": "write_to_json",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_file": []
            }
        },
        "Element.element_from_description": {
            "name": "element_from_description",
            "location": 329,
            "return": [
                "_TElement@@Element@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TElement]"
                ],
                "element_dict": []
            }
        },
        "Element.init_from_json": {
            "name": "init_from_json",
            "location": 345,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "path_to_file": []
            }
        },
        "Element.changeArg": {
            "name": "changeArg",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "name": [],
                "arg": [],
                "value": [],
                "replaceeverywhere": []
            }
        },
        "Element.changeDuration": {
            "name": "changeDuration",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "name": [],
                "newdur": [],
                "replaceeverywhere": []
            }
        },
        "Element._applyDelays": {
            "name": "_applyDelays",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delays": []
            }
        },
        "Element.copy": {
            "name": "copy",
            "location": 476,
            "return": [
                "_TElement@@Element@@"
            ],
            "arguments": {
                "self": [
                    "_TElement@@Element@@"
                ]
            }
        },
        "Element.__eq__": {
            "name": "__eq__",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "broadbean-master/broadbean/plotting.py": {
        "getSIScalingAndPrefix": {
            "name": "getSIScalingAndPrefix",
            "location": 15,
            "return": [
                "Tuple[(Union[(float, int)], str)]"
            ],
            "arguments": {
                "minmax": []
            }
        },
        "_plot_object_validator": {
            "name": "_plot_object_validator",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "obj_to_plot": []
            }
        },
        "_plot_object_forger": {
            "name": "_plot_object_forger",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj_to_plot": []
            }
        },
        "_plot_summariser": {
            "name": "_plot_summariser",
            "location": 92,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "seq": []
            }
        },
        "plotter": {
            "name": "plotter",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "obj_to_plot": []
            }
        },
        "plotter.update_minmax": {
            "name": "update_minmax",
            "location": 152,
            "return": [],
            "arguments": {
                "chanminmax": [],
                "wfmdata": [],
                "chanind": []
            }
        }
    },
    "broadbean-master/broadbean/ripasso.py": {
        "_rcFilter": {
            "name": "_rcFilter",
            "location": 20,
            "return": [
                "complex"
            ],
            "arguments": {
                "SR": [],
                "npts": [],
                "f_cut": [],
                "kind": [],
                "order": [],
                "DCgain": []
            }
        },
        "applyRCFilter": {
            "name": "applyRCFilter",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "signal": [],
                "SR": [],
                "kind": [],
                "f_cut": [],
                "order": [],
                "DCgain": []
            }
        },
        "applyInverseRCFilter": {
            "name": "applyInverseRCFilter",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "signal": [],
                "SR": [],
                "kind": [],
                "f_cut": [],
                "order": [],
                "DCgain": []
            }
        },
        "applyCustomTransferFunction": {
            "name": "applyCustomTransferFunction",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "signal": [],
                "SR": [],
                "tf_freqs": [],
                "tf_amp": [],
                "invert": []
            }
        }
    },
    "broadbean-master/broadbean/sequence.py": {
        "Sequence.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Sequence.__add__": {
            "name": "__add__",
            "location": 99,
            "return": [
                "_TSequence@@Sequence@@"
            ],
            "arguments": {
                "self": [
                    "_TSequence@@Sequence@@"
                ],
                "other": []
            }
        },
        "Sequence.copy": {
            "name": "copy",
            "location": 148,
            "return": [
                "_TSequence@@Sequence@@"
            ],
            "arguments": {
                "self": [
                    "_TSequence@@Sequence@@"
                ]
            }
        },
        "Sequence.setSequenceSettings": {
            "name": "setSequenceSettings",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "wait": [],
                "nreps": [],
                "jump": [],
                "goto": []
            }
        },
        "Sequence.setSequencingTriggerWait": {
            "name": "setSequencingTriggerWait",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "wait": []
            }
        },
        "Sequence.setSequencingNumberOfRepetitions": {
            "name": "setSequencingNumberOfRepetitions",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "nrep": []
            }
        },
        "Sequence.setSequencingEventInput": {
            "name": "setSequencingEventInput",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "jump_input": []
            }
        },
        "Sequence.setSequencingEventJumpTarget": {
            "name": "setSequencingEventJumpTarget",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "jump_target": []
            }
        },
        "Sequence.setSequencingGoto": {
            "name": "setSequencingGoto",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "goto": []
            }
        },
        "Sequence.setSR": {
            "name": "setSR",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "SR": []
            }
        },
        "Sequence.setChannelVoltageRange": {
            "name": "setChannelVoltageRange",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "ampl": [],
                "offset": []
            }
        },
        "Sequence.setChannelAmplitude": {
            "name": "setChannelAmplitude",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "ampl": []
            }
        },
        "Sequence.setChannelOffset": {
            "name": "setChannelOffset",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "offset": []
            }
        },
        "Sequence.setChannelDelay": {
            "name": "setChannelDelay",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "delay": []
            }
        },
        "Sequence.setChannelFilterCompensation": {
            "name": "setChannelFilterCompensation",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "kind": [],
                "order": [],
                "f_cut": [],
                "tau": []
            }
        },
        "Sequence.addElement": {
            "name": "addElement",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "element": []
            }
        },
        "Sequence.addSubSequence": {
            "name": "addSubSequence",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "subsequence": []
            }
        },
        "Sequence.checkConsistency": {
            "name": "checkConsistency",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "verbose": []
            }
        },
        "Sequence.description": {
            "name": "description",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.write_to_json": {
            "name": "write_to_json",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_file": []
            }
        },
        "Sequence.sequence_from_description": {
            "name": "sequence_from_description",
            "location": 513,
            "return": [
                "_TSequence@@Sequence@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSequence]"
                ],
                "seq_dict": []
            }
        },
        "Sequence.init_from_json": {
            "name": "init_from_json",
            "location": 556,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "path_to_file": []
            }
        },
        "Sequence.name": {
            "name": "name",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "newname": []
            }
        },
        "Sequence.length_sequenceelements": {
            "name": "length_sequenceelements",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.SR": {
            "name": "SR",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.channels": {
            "name": "channels",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.points": {
            "name": "points",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.element": {
            "name": "element",
            "location": 626,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "Sequence._plotSummary": {
            "name": "_plotSummary",
            "location": 647,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "seq": []
            }
        },
        "Sequence.forge": {
            "name": "forge",
            "location": 684,
            "return": [
                "Dict[(int, Dict[(str, Union[(str, Dict[(Union[(int, str)], Any)])])])]"
            ],
            "arguments": {
                "self": [],
                "apply_delays": [],
                "apply_filters": [],
                "includetime": []
            }
        },
        "Sequence._prepareForOutputting": {
            "name": "_prepareForOutputting",
            "location": 789,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.outputForSEQXFile": {
            "name": "outputForSEQXFile",
            "location": 900,
            "return": [
                "Tuple[(List[int], List[int], List[int], List[int], List[int], List[List[np.ndarray]], List[int], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.outputForSEQXFileWithFlags": {
            "name": "outputForSEQXFileWithFlags",
            "location": 1039,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.outputForAWGFile": {
            "name": "outputForAWGFile",
            "location": 1080,
            "return": [
                "broadbean.broadbean._AWGOutput"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.outputForAWGFile.rescaler": {
            "name": "rescaler",
            "location": 1112,
            "return": [],
            "arguments": {
                "val": [],
                "ampl": [],
                "off": []
            }
        }
    },
    "broadbean-master/broadbean/tools.py": {
        "makeLinearlyVaryingSequence": {
            "name": "makeLinearlyVaryingSequence",
            "location": 12,
            "return": [
                "broadbean.sequence.Sequence"
            ],
            "arguments": {
                "baseelement": [],
                "channel": [],
                "name": [],
                "arg": [],
                "start": [],
                "stop": [],
                "step": []
            }
        },
        "makeVaryingSequence": {
            "name": "makeVaryingSequence",
            "location": 51,
            "return": [
                "broadbean.sequence.Sequence"
            ],
            "arguments": {
                "baseelement": [],
                "channels": [],
                "names": [],
                "args": [],
                "iters": []
            }
        },
        "repeatAndVarySequence": {
            "name": "repeatAndVarySequence",
            "location": 114,
            "return": [
                "broadbean.sequence.Sequence"
            ],
            "arguments": {
                "seq": [],
                "poss": [],
                "channels": [],
                "names": [],
                "args": [],
                "iters": []
            }
        }
    },
    "broadbean-master/broadbean/_version.py": {
        "_get_version": {
            "name": "_get_version",
            "location": 1,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "broadbean-master/broadbean/__init__.py": {},
    "broadbean-master/broadbean/tests/conftest.py": {},
    "broadbean-master/broadbean/tests/test_awgfilegeneration.py": {
        "protosequence1": {
            "name": "protosequence1",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_awg_output": {
            "name": "test_awg_output",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "should_raise_sequencingerror": {
            "name": "should_raise_sequencingerror",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "wait": [],
                "nrep": [],
                "jump_to": [],
                "goto": [],
                "num_elms": []
            }
        },
        "test_awg_output_validations": {
            "name": "test_awg_output_validations",
            "location": 92,
            "return": [],
            "arguments": {
                "protosequence1": [],
                "wait": [],
                "nrep": [],
                "jump_to": [],
                "goto": []
            }
        }
    },
    "broadbean-master/broadbean/tests/test_blueprint.py": {
        "virgin_blueprint": {
            "name": "virgin_blueprint",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "blueprint_tophat": {
            "name": "blueprint_tophat",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "blueprint_nasty": {
            "name": "blueprint_nasty",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_basename": {
            "name": "test_basename",
            "location": 69,
            "return": [],
            "arguments": {
                "inp": [],
                "outp": []
            }
        },
        "test_basename_input": {
            "name": "test_basename_input",
            "location": 76,
            "return": [],
            "arguments": {
                "notstring": []
            }
        },
        "test_make_names_unique0": {
            "name": "test_make_names_unique0",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_names_unique1": {
            "name": "test_make_names_unique1",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_names_unique2": {
            "name": "test_make_names_unique2",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_names_unique3": {
            "name": "test_make_names_unique3",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_names_unique4": {
            "name": "test_make_names_unique4",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_names_unique_input": {
            "name": "test_make_names_unique_input",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creation": {
            "name": "test_creation",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "virgin_blueprint": []
            }
        },
        "test_bare_init": {
            "name": "test_bare_init",
            "location": 139,
            "return": [],
            "arguments": {
                "virgin_blueprint": [],
                "attribute": [],
                "expected": []
            }
        },
        "test_tophat_init": {
            "name": "test_tophat_init",
            "location": 157,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "attribute": [],
                "val": []
            }
        },
        "test_tophat_copy": {
            "name": "test_tophat_copy",
            "location": 172,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "attribute": [],
                "val": []
            }
        },
        "test_tophat_changeduration": {
            "name": "test_tophat_changeduration",
            "location": 181,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "name": [],
                "newdur": [],
                "durslist": []
            }
        },
        "test_tophat_changeduration_everywhere": {
            "name": "test_tophat_changeduration_everywhere",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_tophat_changeduration_valueerror": {
            "name": "test_tophat_changeduration_valueerror",
            "location": 192,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "newdur": []
            }
        },
        "test_tophat_changeargument": {
            "name": "test_tophat_changeargument",
            "location": 203,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "name": [],
                "arg": [],
                "newval": [],
                "argslist": []
            }
        },
        "test_tophat_changeargument_replaceeverywhere": {
            "name": "test_tophat_changeargument_replaceeverywhere",
            "location": 213,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "name": [],
                "arg": [],
                "newval": [],
                "argslist": []
            }
        },
        "test_tophat_changeargument_valueerror": {
            "name": "test_tophat_changeargument_valueerror",
            "location": 224,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "name": [],
                "arg": []
            }
        },
        "test_tophat_insert_funlist": {
            "name": "test_tophat_insert_funlist",
            "location": 234,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "pos": [],
                "func": [],
                "funlist": []
            }
        },
        "test_tophat_insert_argslist": {
            "name": "test_tophat_insert_argslist",
            "location": 246,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "pos": [],
                "argslist": []
            }
        },
        "test_tophat_insert_namelist": {
            "name": "test_tophat_insert_namelist",
            "location": 255,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "pos": [],
                "name": [],
                "namelist": []
            }
        },
        "test_tophat_remove_namelist": {
            "name": "test_tophat_remove_namelist",
            "location": 261,
            "return": [],
            "arguments": {
                "blueprint_tophat": [],
                "name": []
            }
        },
        "test_tophat_remove_segmentmarker": {
            "name": "test_tophat_remove_segmentmarker",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_add_two_identical": {
            "name": "test_add_two_identical",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_add_two_different": {
            "name": "test_add_two_different",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": [],
                "blueprint_nasty": []
            }
        },
        "test_description": {
            "name": "test_description",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_nasty": [],
                "blueprint_tophat": []
            }
        }
    },
    "broadbean-master/broadbean/tests/test_element.py": {
        "blueprint_tophat": {
            "name": "blueprint_tophat",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "mixed_element": {
            "name": "mixed_element",
            "location": 35,
            "return": [],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_bare_init": {
            "name": "test_bare_init",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_equality_true": {
            "name": "test_equality_true",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_equality_false": {
            "name": "test_equality_false",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": []
            }
        },
        "test_addArray": {
            "name": "test_addArray",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_durations": {
            "name": "test_invalid_durations",
            "location": 124,
            "return": [],
            "arguments": {
                "SR1": [],
                "SR2": [],
                "N": [],
                "M": []
            }
        },
        "test_applyDelays": {
            "name": "test_applyDelays",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "mixed_element": []
            }
        },
        "test_input_fail1": {
            "name": "test_input_fail1",
            "location": 201,
            "return": [],
            "arguments": {
                "improper_bp": []
            }
        },
        "test_points": {
            "name": "test_points",
            "location": 212,
            "return": [],
            "arguments": {
                "SR": [],
                "N": []
            }
        },
        "test_write_read_element": {
            "name": "test_write_read_element",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint_tophat": [],
                "tmp_path": []
            }
        }
    },
    "broadbean-master/broadbean/tests/test_forging.py": {
        "sequence_maker": {
            "name": "sequence_maker",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "_has_period": {
            "name": "_has_period",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "array": [],
                "period": []
            }
        },
        "test_too_short_durations_rejected": {
            "name": "test_too_short_durations_rejected",
            "location": 70,
            "return": [],
            "arguments": {
                "SR": [],
                "ratio": []
            }
        },
        "test_correct_periods": {
            "name": "test_correct_periods",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_correct_marker_times": {
            "name": "test_correct_marker_times",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_filters_in_forging": {
            "name": "test_apply_filters_in_forging",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "sequence_maker": []
            }
        },
        "sequence_maker.make_seq": {
            "name": "make_seq",
            "location": 27,
            "return": [],
            "arguments": {
                "seqlen": [],
                "channels": [],
                "SR": []
            }
        }
    },
    "broadbean-master/broadbean/tests/test_sequence.py": {
        "protosequence1": {
            "name": "protosequence1",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "protosequence2": {
            "name": "protosequence2",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "badseq_missing_pos": {
            "name": "badseq_missing_pos",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "squarepulse_baseelem": {
            "name": "squarepulse_baseelem",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_copy_positively": {
            "name": "test_copy_positively",
            "location": 173,
            "return": [],
            "arguments": {
                "protosequence1": [],
                "attribute": []
            }
        },
        "test_copy_negatively_01": {
            "name": "test_copy_negatively_01",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_copy_negatively_02": {
            "name": "test_copy_negatively_02",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_copy_negatively_03": {
            "name": "test_copy_negatively_03",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_copy_and_eq": {
            "name": "test_copy_and_eq",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_addition_fail_vrange": {
            "name": "test_addition_fail_vrange",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": []
            }
        },
        "test_addition_fail_position": {
            "name": "test_addition_fail_position",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "badseq_missing_pos": []
            }
        },
        "test_addition_data": {
            "name": "test_addition_data",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": []
            }
        },
        "test_addition_sequencing1": {
            "name": "test_addition_sequencing1",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": []
            }
        },
        "test_addition_sequencing2": {
            "name": "test_addition_sequencing2",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": []
            }
        },
        "test_addition_awgspecs": {
            "name": "test_addition_awgspecs",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": []
            }
        },
        "test_addition_data_with_empty": {
            "name": "test_addition_data_with_empty",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_add_subsequence_raises": {
            "name": "test_add_subsequence_raises",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "squarepulse_baseelem": []
            }
        },
        "test_setSR": {
            "name": "test_setSR",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_makeVaryingSequence_fail": {
            "name": "test_makeVaryingSequence_fail",
            "location": 328,
            "return": [],
            "arguments": {
                "squarepulse_baseelem": [],
                "channels": [],
                "names": [],
                "args": [],
                "iters": []
            }
        },
        "test_makeVaryingSequence": {
            "name": "test_makeVaryingSequence",
            "location": 338,
            "return": [],
            "arguments": {
                "squarepulse_baseelem": [],
                "seqpos": [],
                "argslist": []
            }
        },
        "test_repeatAndVarySequence_length": {
            "name": "test_repeatAndVarySequence_length",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_repeatAndVarySequence_awgspecs": {
            "name": "test_repeatAndVarySequence_awgspecs",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_repeatAndVarySequence_fail_inputlength1": {
            "name": "test_repeatAndVarySequence_fail_inputlength1",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_repeatAndVarySequence_fail_inputlength2": {
            "name": "test_repeatAndVarySequence_fail_inputlength2",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": []
            }
        },
        "test_repeatAndVarySequence_fail_consistency": {
            "name": "test_repeatAndVarySequence_fail_consistency",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "squarepulse_baseelem": []
            }
        },
        "test_repeatAndVarySequence_same_elements": {
            "name": "test_repeatAndVarySequence_same_elements",
            "location": 419,
            "return": [],
            "arguments": {
                "protosequence1": [],
                "pos": []
            }
        },
        "test_write_read_sequence": {
            "name": "test_write_read_sequence",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "protosequence1": [],
                "protosequence2": [],
                "tmp_path": []
            }
        }
    },
    "broadbean-master/broadbean/tests/test_subsequences.py": {
        "subseq1": {
            "name": "subseq1",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "subseq2": {
            "name": "subseq2",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "noise_element": {
            "name": "noise_element",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "bp_element": {
            "name": "bp_element",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "master_sequence": {
            "name": "master_sequence",
            "location": 152,
            "return": [],
            "arguments": {
                "subseq1": [],
                "subseq2": [],
                "bp_element": [],
                "noise_element": []
            }
        },
        "test_forge": {
            "name": "test_forge",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "master_sequence": []
            }
        }
    },
    "broadbean-master/broadbean/tests/__init__.py": {},
    "broadbean-master/docs/conf.py": {}
}
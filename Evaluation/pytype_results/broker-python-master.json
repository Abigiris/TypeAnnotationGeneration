{
    "broker-python-master/main.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [],
            "arguments": {
                "log_target": [],
                "log_level": []
            }
        },
        "learn": {
            "name": "learn",
            "location": 27,
            "return": [],
            "arguments": {
                "component": [],
                "model": [],
                "tag": []
            }
        },
        "wholesale": {
            "name": "wholesale",
            "location": 43,
            "return": [],
            "arguments": {
                "agent_type": [],
                "network": [],
                "action_type": [],
                "preprocessing": [],
                "reward": [],
                "games": [],
                "tag": []
            }
        },
        "get_learner_config": {
            "name": "get_learner_config",
            "location": 61,
            "return": [
                "module"
            ],
            "arguments": {
                "component": []
            }
        },
        "compete": {
            "name": "compete",
            "location": 80,
            "return": [],
            "arguments": {
                "continuous": [],
                "demand_model": [],
                "wholesale_model": []
            }
        },
        "about": {
            "name": "about",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "log_target": [],
                "log_level": []
            }
        }
    },
    "broker-python-master/setup.py": {},
    "broker-python-master/__init__.py": {},
    "broker-python-master/agent_components/test_comp_integration.py": {
        "TestIntegration.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_estimator_wholesale_integration": {
            "name": "test_estimator_wholesale_integration",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_estimator_wholesale_integration.listen_pred_ev": {
            "name": "listen_pred_ev",
            "location": 51,
            "return": [],
            "arguments": {
                "signal": [],
                "sender": [],
                "msg": []
            }
        },
        "TestIntegration.test_estimator_wholesale_integration.listen_orders_ev": {
            "name": "listen_orders_ev",
            "location": 56,
            "return": [],
            "arguments": {
                "signal": [],
                "sender": [],
                "msg": []
            }
        }
    },
    "broker-python-master/agent_components/__init__.py": {},
    "broker-python-master/agent_components/balancing/learning/__init__.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "configure": {
            "name": "configure",
            "location": 10,
            "return": [],
            "arguments": {
                "model": [],
                "tag": [],
                "fresh": []
            }
        }
    },
    "broker-python-master/agent_components/demand/estimator.py": {
        "Estimator.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Estimator.subscribe": {
            "name": "subscribe",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Estimator.unsubscribe": {
            "name": "unsubscribe",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Estimator.handle_tariff_transaction_event": {
            "name": "handle_tariff_transaction_event",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "Estimator.handle_customer_change": {
            "name": "handle_customer_change",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Estimator.handle_customer_bootstrap_data_event": {
            "name": "handle_customer_bootstrap_data_event",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "Estimator.handle_timeslot_complete": {
            "name": "handle_timeslot_complete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "Estimator.handle_sim_end": {
            "name": "handle_sim_end",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "Estimator.handle_usage": {
            "name": "handle_usage",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx": []
            }
        },
        "Estimator._convert_to_whole_population": {
            "name": "_convert_to_whole_population",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "usage": [],
                "name": []
            }
        },
        "Estimator._convert_from_whole_population": {
            "name": "_convert_from_whole_population",
            "location": 141,
            "return": [
                "CustomerPredictions"
            ],
            "arguments": {
                "self": [],
                "customer_prediction": [
                    "CustomerPredictions"
                ]
            }
        },
        "Estimator._apply_usage": {
            "name": "_apply_usage",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "customer_name": [],
                "kwh": [],
                "timeslot": []
            }
        },
        "Estimator.process_customer_new_data": {
            "name": "process_customer_new_data",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Estimator.store_predictions": {
            "name": "store_predictions",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "customer_name": [
                    "str"
                ],
                "predictions": []
            }
        },
        "Estimator._ensure_all_there": {
            "name": "_ensure_all_there",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tss": []
            }
        },
        "CustomerPredictions.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "predictions": [],
                "first_ts": []
            }
        }
    },
    "broker-python-master/agent_components/demand/test_demand_learning.py": {
        "TestDemandLearning.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandLearning.test_data_make_sequences_from_historical": {
            "name": "test_data_make_sequences_from_historical",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.tearDown": {
            "name": "tearDown",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_add_transaction": {
            "name": "test_add_transaction",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_handle_customer_bootstrap_data_event": {
            "name": "test_handle_customer_bootstrap_data_event",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_process_customer_new_data": {
            "name": "test_process_customer_new_data",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestEstimator.test_handle_sim_end": {
            "name": "test_handle_sim_end",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_missing_demand_in_estimator": {
            "name": "test_missing_demand_in_estimator",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_handle_usage": {
            "name": "test_handle_usage",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_handle_customer_change": {
            "name": "test_handle_customer_change",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_store_predictions": {
            "name": "test_store_predictions",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/data.py": {
        "append_usage": {
            "name": "append_usage",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "sum": []
            }
        },
        "clear": {
            "name": "clear",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sequence_for_usages": {
            "name": "sequence_for_usages",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "usages": [],
                "is_flat": [],
                "scaler": []
            }
        },
        "get_demand_data_values": {
            "name": "get_demand_data_values",
            "location": 65,
            "return": [
                "np.ndarray"
            ],
            "arguments": {}
        },
        "make_sequences_from_historical": {
            "name": "make_sequences_from_historical",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "is_flat": [],
                "scaler": []
            }
        },
        "preprocess_data": {
            "name": "preprocess_data",
            "location": 82,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "scaler_type": []
            }
        },
        "get_fresh_scaler": {
            "name": "get_fresh_scaler",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "scaler_type": []
            }
        },
        "parse_usage_game_log": {
            "name": "parse_usage_game_log",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {
                "file_path": [],
                "pp_type": []
            }
        },
        "get_first_timestep_for_file": {
            "name": "get_first_timestep_for_file",
            "location": 120,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "file_path": []
            }
        },
        "DemandForecasts.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_timestep": [],
                "forecasts": []
            }
        },
        "DemandForecasts.total": {
            "name": "total",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/DemandLearner.py": {
        "DemandLearner.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tag": [],
                "fresh": []
            }
        },
        "DemandLearner._fit_offline": {
            "name": "_fit_offline",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat": [],
                "games": []
            }
        },
        "DemandLearner._fit_on_game": {
            "name": "_fit_on_game",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "flat": []
            }
        },
        "DemandLearner.fresh_model": {
            "name": "fresh_model",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemandLearner.learn": {
            "name": "learn",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "games": []
            }
        },
        "DemandLearner.reload_model": {
            "name": "reload_model",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemandLearner.predict": {
            "name": "predict",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/preprocessing.py": {
        "drain_generator": {
            "name": "drain_generator",
            "location": 132,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "seq": [],
                "batches": []
            }
        },
        "_hotencode_times": {
            "name": "_hotencode_times",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        },
        "DemandCustomerSequence.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "forecast_distance": [],
                "cust_features": [],
                "cust_targets": [],
                "flatten_sequences": []
            }
        },
        "DemandCustomerSequence.__len__": {
            "name": "__len__",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemandCustomerSequence.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "DemandCustomerSequence._insert_features": {
            "name": "_insert_features",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_x": [],
                "beginning_offset": [],
                "from_": [],
                "till_": []
            }
        },
        "DemandCustomerSequence._flatten_sequences": {
            "name": "_flatten_sequences",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "batch_x": []
            }
        },
        "DemandCustomerSequence._calculate_from": {
            "name": "_calculate_from",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "DemandCustomerSequence._calculate_till": {
            "name": "_calculate_till",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": [],
                "offset": []
            }
        },
        "DemandCustomerSequence._calculate_offset": {
            "name": "_calculate_offset",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "DemandCustomerSequence._normalize_y": {
            "name": "_normalize_y",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cust_targets": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/test_preprocessing.py": {
        "TestDemandPreprocessing.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_shape": {
            "name": "test_DemandCustomerSequence_shape",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_beginning_padding": {
            "name": "test_DemandCustomerSequence_beginning_padding",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_only_usage": {
            "name": "test_DemandCustomerSequence_only_usage",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_flatten_seq": {
            "name": "test_DemandCustomerSequence_flatten_seq",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_end_padding": {
            "name": "test_DemandCustomerSequence_end_padding",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_from": {
            "name": "test_DemandCustomerSequence_from",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_till": {
            "name": "test_DemandCustomerSequence_till",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_offset": {
            "name": "test_DemandCustomerSequence_offset",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemandPreprocessing.test_DemandCustomerSequence_with_other_sequence_length": {
            "name": "test_DemandCustomerSequence_with_other_sequence_length",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/__init__.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "configure": {
            "name": "configure",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "tag": [],
                "fresh": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/baseline/learner.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 14,
            "return": [
                "BaselineLearner"
            ],
            "arguments": {
                "tag": [],
                "fresh": []
            }
        },
        "BaselineLearner.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "fresh": []
            }
        },
        "BaselineLearner.learn": {
            "name": "learn",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineLearner.fresh_model": {
            "name": "fresh_model",
            "location": 24,
            "return": [
                "FakeModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeModel.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": []
            }
        },
        "FakeModel.save_weights": {
            "name": "save_weights",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeModel.fit_generator": {
            "name": "fit_generator",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/baseline/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/dense/learner.py": {
        "Learner.run_with_demand_files": {
            "name": "run_with_demand_files",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.get_model": {
            "name": "get_model",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.fit_with_generator": {
            "name": "fit_with_generator",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "train_generator": [],
                "callbacks": [],
                "validation_set": []
            }
        },
        "Learner.run_epoch": {
            "name": "run_epoch",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mdl": [],
                "generator": [],
                "validation": [],
                "epoch_n": [],
                "tb_writer": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/dense/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/dense_v2/learner.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 19,
            "return": [
                "DenseLearner"
            ],
            "arguments": {
                "tag": [],
                "fresh": []
            }
        },
        "DenseLearner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "fresh": []
            }
        },
        "DenseLearner.learn": {
            "name": "learn",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "games": []
            }
        },
        "DenseLearner.fresh_model": {
            "name": "fresh_model",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/dense_v2/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/gru/gru_preprocessing.py": {
        "GruCustomerIterator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_customers": [],
                "targets_customers": []
            }
        },
        "GruCustomerIterator.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [
                "_TGruCustomerIterator"
            ],
            "arguments": {
                "self": [
                    "_TGruCustomerIterator"
                ]
            }
        },
        "GruCustomerIterator.__next__": {
            "name": "__next__",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GruCustomerIterator.make_sequences": {
            "name": "make_sequences",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "cutoff": [],
                "data": [],
                "targets": []
            }
        },
        "GruCustomerIterator._get_next_pair": {
            "name": "_get_next_pair",
            "location": 42,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GruCustomerIterator._convert_sequence_to_set": {
            "name": "_convert_sequence_to_set",
            "location": 48,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "GruCustomerIterator._hotencode_times": {
            "name": "_hotencode_times",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "targets": []
            }
        },
        "GruCustomerIterator.generate_batches_for_customer": {
            "name": "generate_batches_for_customer",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "targets": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/gru/learner.py": {
        "Learner.run_with_demand_files": {
            "name": "run_with_demand_files",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.get_model": {
            "name": "get_model",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.fit_with_generator": {
            "name": "fit_with_generator",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "train_generator": [],
                "callbacks": [],
                "validation_set": []
            }
        },
        "Learner.run_epoch": {
            "name": "run_epoch",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mdl": [],
                "generator": [],
                "validation": [],
                "epoch_n": [],
                "tb_writer": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/gru/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/logreg/learner.py": {
        "Learner.run_with_demand_files": {
            "name": "run_with_demand_files",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.get_model": {
            "name": "get_model",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.fit_with_generator": {
            "name": "fit_with_generator",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "train_generator": [],
                "callbacks": [],
                "validation_set": []
            }
        },
        "Learner.run_epoch": {
            "name": "run_epoch",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mdl": [],
                "generator": [],
                "validation": [],
                "epoch_n": [],
                "tb_writer": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/logreg/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/lstm_dense_huge/learner.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 17,
            "return": [
                "HugeLearner"
            ],
            "arguments": {
                "tag": [],
                "fresh": []
            }
        },
        "HugeLearner.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "fresh": []
            }
        },
        "HugeLearner.learn": {
            "name": "learn",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "games": []
            }
        },
        "HugeLearner.fresh_model": {
            "name": "fresh_model",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/lstm_dense_huge/__init__.py": {},
    "broker-python-master/agent_components/demand/learning/lstm_v2/learner.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 17,
            "return": [
                "LstmLearner"
            ],
            "arguments": {
                "tag": [],
                "fresh": []
            }
        },
        "LstmLearner.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "fresh": []
            }
        },
        "LstmLearner.learn": {
            "name": "learn",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "games": []
            }
        },
        "LstmLearner.fresh_model": {
            "name": "fresh_model",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/demand/learning/lstm_v2/__init__.py": {},
    "broker-python-master/agent_components/subscriptions/__init__.py": {},
    "broker-python-master/agent_components/tariffs/publisher.py": {
        "TariffPublisher.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TariffPublisher.subscribe": {
            "name": "subscribe",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TariffPublisher.unsubscribe": {
            "name": "unsubscribe",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TariffPublisher.handle_tariff_spec": {
            "name": "handle_tariff_spec",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "TariffPublisher.make_spec_mine": {
            "name": "make_spec_mine",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TariffPublisher.handle_tariff_revoke": {
            "name": "handle_tariff_revoke",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        }
    },
    "broker-python-master/agent_components/tariffs/test_publisher.py": {
        "TestPublisher.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublisher.test_clone": {
            "name": "test_clone",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestPublisher.test_revoke": {
            "name": "test_revoke",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        }
    },
    "broker-python-master/agent_components/tariffs/__init__.py": {},
    "broker-python-master/agent_components/wholesale/util.py": {
        "calculate_running_averages": {
            "name": "calculate_running_averages",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "known_results": []
            }
        },
        "calculate_running_average": {
            "name": "calculate_running_average",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "timeslot_trading_data": []
            }
        },
        "get_sum_purchased_for_ts": {
            "name": "get_sum_purchased_for_ts",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "purchases": [
                    "list"
                ]
            }
        },
        "calculate_missing_energy": {
            "name": "calculate_missing_energy",
            "location": 55,
            "return": [
                "float"
            ],
            "arguments": {
                "purchases": [
                    "float"
                ],
                "demand": [
                    "float"
                ]
            }
        },
        "average_price_for_power_paid": {
            "name": "average_price_for_power_paid",
            "location": 68,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "purchases": []
            }
        },
        "calculate_du_fee": {
            "name": "calculate_du_fee",
            "location": 100,
            "return": [],
            "arguments": {
                "average_market": [],
                "balancing_needed": []
            }
        },
        "calculate_balancing_needed_obj": {
            "name": "calculate_balancing_needed_obj",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "purchases": [
                    "list"
                ],
                "realized_usage": [
                    "float"
                ]
            }
        },
        "calculate_balancing_needed": {
            "name": "calculate_balancing_needed",
            "location": 167,
            "return": [
                "float"
            ],
            "arguments": {
                "purchases": [],
                "realized_usage": [
                    "float"
                ]
            }
        },
        "parse_wholesale_file": {
            "name": "parse_wholesale_file",
            "location": 179,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "file": []
            }
        },
        "_get_wholesale_as_nparr": {
            "name": "_get_wholesale_as_nparr",
            "location": 187,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "wholesale_data": [
                    "list"
                ]
            }
        },
        "calculate_energy_needed": {
            "name": "calculate_energy_needed",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "latest_news": [],
                "purchases": [
                    "list"
                ]
            }
        },
        "is_cleared_with_volume_probability": {
            "name": "is_cleared_with_volume_probability",
            "location": 205,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "order": [],
                "marketClearing": []
            }
        },
        "fuzz_forecast_for_training": {
            "name": "fuzz_forecast_for_training",
            "location": 252,
            "return": [
                "_T0"
            ],
            "arguments": {
                "customer_data": [
                    "_T0"
                ]
            }
        }
    },
    "broker-python-master/agent_components/wholesale/__init__.py": {},
    "broker-python-master/agent_components/wholesale/environments/LogEnvManagerAdapter.py": {
        "LogEnvManagerAdapter.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "reward_function": []
            }
        },
        "LogEnvManagerAdapter.subscribe": {
            "name": "subscribe",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.unsubscribe": {
            "name": "unsubscribe",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.handle_order": {
            "name": "handle_order",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [],
                "msg": []
            }
        },
        "LogEnvManagerAdapter.handle_reward": {
            "name": "handle_reward",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [],
                "msg": [
                    "float"
                ]
            }
        },
        "LogEnvManagerAdapter.start": {
            "name": "start",
            "location": 119,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "max_games": []
            }
        },
        "LogEnvManagerAdapter.step_game": {
            "name": "step_game",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.new_game": {
            "name": "new_game",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.make_data_for_game": {
            "name": "make_data_for_game",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "LogEnvManagerAdapter.make_wholesale_data": {
            "name": "make_wholesale_data",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wholesale_file_path": []
            }
        },
        "LogEnvManagerAdapter.make_demand_data": {
            "name": "make_demand_data",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "demand_file_path": []
            }
        },
        "LogEnvManagerAdapter._make_random_game_order": {
            "name": "_make_random_game_order",
            "location": 214,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.get_first_timestep": {
            "name": "get_first_timestep",
            "location": 225,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_cleared_trade": {
            "name": "simulate_cleared_trade",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_timeslot_update": {
            "name": "simulate_timeslot_update",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_balancing_transactions": {
            "name": "simulate_balancing_transactions",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.generate_du_balancing_tx": {
            "name": "generate_du_balancing_tx",
            "location": 257,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "LogEnvManagerAdapter.evaluate_orders_received": {
            "name": "evaluate_orders_received",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_timeslot_complete": {
            "name": "simulate_timeslot_complete",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_predictions": {
            "name": "simulate_predictions",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEnvManagerAdapter.simulate_tariff_transactions": {
            "name": "simulate_tariff_transactions",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/PowerTacEnv.py": {
        "PowerTacEnv.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [],
                "reward_function": [],
                "target_ts": [],
                "historical_prices": []
            }
        },
        "PowerTacEnv.step": {
            "name": "step",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "PowerTacEnv.reset": {
            "name": "reset",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerTacEnv.render": {
            "name": "render",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "PowerTacEnv.close": {
            "name": "close",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerTacEnv.handle_timeslot_update": {
            "name": "handle_timeslot_update",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PowerTacEnv.handle_prediction": {
            "name": "handle_prediction",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "prediction": []
            }
        },
        "PowerTacEnv.handle_cleared_trade": {
            "name": "handle_cleared_trade",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PowerTacEnv.handle_market_transaction": {
            "name": "handle_market_transaction",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PowerTacEnv.send_order": {
            "name": "send_order",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "PowerTacEnv.handle_tariff_transaction": {
            "name": "handle_tariff_transaction",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PowerTacEnv.get_last_known_market_price": {
            "name": "get_last_known_market_price",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerTacEnv.handle_balancing_transaction": {
            "name": "handle_balancing_transaction",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/PowerTacWholesaleAgent.py": {
        "PowerTacWholesaleAgent.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_name": []
            }
        },
        "PowerTacWholesaleAgent.forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "PowerTacWholesaleAgent.backward": {
            "name": "backward",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "action": [],
                "reward": []
            }
        },
        "PowerTacWholesaleAgent.save_model": {
            "name": "save_model",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerTacWholesaleAgent.load_model": {
            "name": "load_model",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "model_name": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/PowerTacWholesaleObservation.py": {
        "PowerTacWholesaleObservation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hist_avg_prices": [],
                "step": [
                    "int"
                ],
                "orderbooks": [
                    "list"
                ],
                "purchases": [
                    "list"
                ],
                "cleared_trades": [
                    "list"
                ],
                "predictions": [
                    "List[float]"
                ],
                "actions": [
                    "list"
                ],
                "internals": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/test_environment.py": {
        "TestWholesaleEnvironmentManager.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_handle_market_transaction": {
            "name": "test_handle_market_transaction",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_handle_timeslot_update": {
            "name": "test_handle_timeslot_update",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_historical_prices": {
            "name": "test_historical_prices",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_handle_predictions": {
            "name": "test_handle_predictions",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_handle_cleared_trade": {
            "name": "test_handle_cleared_trade",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_get_sums_from_preds": {
            "name": "test_get_sums_from_preds",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_handle_market_bootstrap_data": {
            "name": "test_handle_market_bootstrap_data",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_multiple_coroutines": {
            "name": "test_multiple_coroutines",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPowerTacEnv.setUp": {
            "name": "setUp",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPowerTacEnv.test_handle_balancing_transaction": {
            "name": "test_handle_balancing_transaction",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWholesaleEnvironmentManager.test_multiple_coroutines.callable2": {
            "name": "callable2",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "TestWholesaleEnvironmentManager.test_multiple_coroutines.callable1": {
            "name": "callable1",
            "location": 135,
            "return": [],
            "arguments": {}
        }
    },
    "broker-python-master/agent_components/wholesale/environments/test_LogEnvManagerAdapter.py": {
        "_fill_with_mock_data": {
            "name": "_fill_with_mock_data",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "testable": []
            }
        },
        "make_mock_demand_data": {
            "name": "make_mock_demand_data",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "TestLogEnvManagerAdapter.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogEnvManagerAdapter.test_make_wholesale_data": {
            "name": "test_make_wholesale_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "parse_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_make_demand_data": {
            "name": "test_make_demand_data",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "demand_data_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_step_game": {
            "name": "test_step_game",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_simulate_cleared_trade": {
            "name": "test_simulate_cleared_trade",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_fuzz_forecast_for_training": {
            "name": "test_fuzz_forecast_for_training",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogEnvManagerAdapter.test_simulate_predictions": {
            "name": "test_simulate_predictions",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_evaluate_orders_received": {
            "name": "test_evaluate_orders_received",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher_mock": []
            }
        },
        "TestLogEnvManagerAdapter.test_is_cleared_with_volume_probability": {
            "name": "test_is_cleared_with_volume_probability",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogEnvManagerAdapter.test_get_first_timestep": {
            "name": "test_get_first_timestep",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogEnvManagerAdapter.test_simulate_tariff_transactions": {
            "name": "test_simulate_tariff_transactions",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "dispatcher": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/test_log_environment.py": {
        "make_mock_demand_data": {
            "name": "make_mock_demand_data",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {}
        },
        "make_mock_active_timeslots": {
            "name": "make_mock_active_timeslots",
            "location": 14,
            "return": [
                "collections.deque"
            ],
            "arguments": {
                "data": []
            }
        },
        "make_mock_wholesale_data": {
            "name": "make_mock_wholesale_data",
            "location": 19,
            "return": [
                "List[list]"
            ],
            "arguments": {}
        },
        "make_mock_averages": {
            "name": "make_mock_averages",
            "location": 43,
            "return": [
                "List[float]"
            ],
            "arguments": {}
        }
    },
    "broker-python-master/agent_components/wholesale/environments/test_mdp.py": {
        "TestMdp.test_parse_wholesale_file": {
            "name": "test_parse_wholesale_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMdp.test_calculate_running_average": {
            "name": "test_calculate_running_average",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/WholesaleEnvironmentManager.py": {
        "WholesaleEnvironmentManager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "reward_function": []
            }
        },
        "WholesaleEnvironmentManager.subscribe": {
            "name": "subscribe",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WholesaleEnvironmentManager.unsubscribe": {
            "name": "unsubscribe",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WholesaleEnvironmentManager.handle_market_transaction": {
            "name": "handle_market_transaction",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.handle_timeslot_update": {
            "name": "handle_timeslot_update",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.handle_cleared_trade": {
            "name": "handle_cleared_trade",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.handle_predictions": {
            "name": "handle_predictions",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": [
                    "list"
                ]
            }
        },
        "WholesaleEnvironmentManager.handle_market_bootstrap_data": {
            "name": "handle_market_bootstrap_data",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.handle_tariff_transaction": {
            "name": "handle_tariff_transaction",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.handle_balancing_transaction": {
            "name": "handle_balancing_transaction",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "signal": [
                    "str"
                ],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.get_avg_for_ts": {
            "name": "get_avg_for_ts",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ts": []
            }
        },
        "WholesaleEnvironmentManager.append_historical": {
            "name": "append_historical",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "WholesaleEnvironmentManager.get_historical_prices": {
            "name": "get_historical_prices",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_ts": []
            }
        },
        "WholesaleEnvironmentManager.get_sums_from_preds": {
            "name": "get_sums_from_preds",
            "location": 154,
            "return": [
                "Dict[(int, float)]"
            ],
            "arguments": {
                "self": [],
                "preds_list": [
                    "list"
                ]
            }
        },
        "WholesaleEnvironmentManager._ensure_historicals_present": {
            "name": "_ensure_historicals_present",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_ts": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/environments/__init__.py": {},
    "broker-python-master/agent_components/wholesale/learning/baseline.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 14,
            "return": [
                "BaselineTrader"
            ],
            "arguments": {
                "tag_": [],
                "fresh": []
            }
        },
        "BaselineTrader.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineTrader.forward": {
            "name": "forward",
            "location": 30,
            "return": [
                "Tuple[(np.ndarray, None, None)]"
            ],
            "arguments": {
                "self": [],
                "observation": []
            }
        },
        "BaselineTrader.determine_mWh": {
            "name": "determine_mWh",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "observation": []
            }
        },
        "BaselineTrader.determine_price": {
            "name": "determine_price",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "observation": [],
                "needed": []
            }
        },
        "BaselineTrader.backward": {
            "name": "backward",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "action": [],
                "reward": []
            }
        },
        "BaselineTrader.save_model": {
            "name": "save_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineTrader.make_logger_callback": {
            "name": "make_logger_callback",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/postprocessor.py": {
        "get_action_translator": {
            "name": "get_action_translator",
            "location": 10,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "action_type": []
            }
        },
        "direct_translator": {
            "name": "direct_translator",
            "location": 23,
            "return": [
                "_T0"
            ],
            "arguments": {
                "env": [],
                "actions": [
                    "_T0"
                ]
            }
        },
        "two_armed_bandit_translator": {
            "name": "two_armed_bandit_translator",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": [],
                "actions": []
            }
        },
        "continuous_translator": {
            "name": "continuous_translator",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": [],
                "action": []
            }
        },
        "discrete_translator": {
            "name": "discrete_translator",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": [],
                "action": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/preprocessor.py": {
        "get_observation_preprocessor": {
            "name": "get_observation_preprocessor",
            "location": 7,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "preprocessor_type": []
            }
        },
        "simple_hist_and_preds": {
            "name": "simple_hist_and_preds",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "norm_hist_and_preds": {
            "name": "norm_hist_and_preds",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/reward_functions.py": {
        "simple_truth_ordering": {
            "name": "simple_truth_ordering",
            "location": 23,
            "return": [],
            "arguments": {
                "env": [],
                "action": [],
                "market_trades": [],
                "purchases": [],
                "realized_usage": []
            }
        },
        "market_relative_prices": {
            "name": "market_relative_prices",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "direct_cash_reward": {
            "name": "direct_cash_reward",
            "location": 61,
            "return": [],
            "arguments": {
                "env": [],
                "action": [],
                "market_trades": [],
                "purchases": [],
                "realized_usage": []
            }
        },
        "balancing_reward": {
            "name": "balancing_reward",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "only_final_step": {
            "name": "only_final_step",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "step_close_relative_mprice": {
            "name": "step_close_relative_mprice",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "unified_step_close_relative_market_rel_mprice": {
            "name": "unified_step_close_relative_market_rel_mprice",
            "location": 162,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "close_to_market_price": {
            "name": "close_to_market_price",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        },
        "step_close_to_prediction_reward": {
            "name": "step_close_to_prediction_reward",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/tensorforce.py": {
        "load_spec_file": {
            "name": "load_spec_file",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "spec": []
            }
        },
        "create_spec": {
            "name": "create_spec",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "action_type": [],
                "agent_type": [],
                "network": []
            }
        },
        "TensorforceAgent.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_type": [],
                "network": [],
                "action_type": [],
                "preprocessor_type": [],
                "reward": [],
                "tag": []
            }
        },
        "TensorforceAgent.forward": {
            "name": "forward",
            "location": 77,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "TensorforceAgent.backward": {
            "name": "backward",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "action": [],
                "reward": []
            }
        },
        "TensorforceAgent.save_model": {
            "name": "save_model",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorforceAgent.load_model": {
            "name": "load_model",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/test_baseline.py": {
        "TestBaseline.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseline.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseline.test_forward": {
            "name": "test_forward",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseline._make_sample_observation": {
            "name": "_make_sample_observation",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/test_reward_functions.py": {
        "TestRewardFunctions.test_direct_cash_reward": {
            "name": "test_direct_cash_reward",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRewardFunctions.test_step_close_to_prediction_reward": {
            "name": "test_step_close_to_prediction_reward",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/test_tensorforce.py": {
        "TestTensorforce.test_create_spec": {
            "name": "test_create_spec",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorforce.test_discrete_translator": {
            "name": "test_discrete_translator",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/agent_components/wholesale/learning/__init__.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "configure": {
            "name": "configure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "tag": [],
                "fresh": []
            }
        }
    },
    "broker-python-master/communication/grpc_messages_pb2.py": {},
    "broker-python-master/communication/grpc_messages_pb2_grpc.py": {
        "add_ContextManagerServiceServicer_to_server": {
            "name": "add_ContextManagerServiceServicer_to_server",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_MarketManagerServiceServicer_to_server": {
            "name": "add_MarketManagerServiceServicer_to_server",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_PortfolioManagerServiceServicer_to_server": {
            "name": "add_PortfolioManagerServiceServicer_to_server",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_GameServiceServicer_to_server": {
            "name": "add_GameServiceServicer_to_server",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_ExtraSpyMessageManagerServiceServicer_to_server": {
            "name": "add_ExtraSpyMessageManagerServiceServicer_to_server",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_ConnectionServiceServicer_to_server": {
            "name": "add_ConnectionServiceServicer_to_server",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "add_SubmitServiceServicer_to_server": {
            "name": "add_SubmitServiceServicer_to_server",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "ContextManagerServiceStub.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ContextManagerServiceServicer.handlePBBankTransaction": {
            "name": "handlePBBankTransaction",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerServiceServicer.handlePBCashPosition": {
            "name": "handlePBCashPosition",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerServiceServicer.handlePBDistributionReport": {
            "name": "handlePBDistributionReport",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerServiceServicer.handlePBCompetition": {
            "name": "handlePBCompetition",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerServiceServicer.handlePBProperties": {
            "name": "handlePBProperties",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceStub.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "MarketManagerServiceServicer.handlePBActivate": {
            "name": "handlePBActivate",
            "location": 206,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBCompetition": {
            "name": "handlePBCompetition",
            "location": 213,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBBalancingTransaction": {
            "name": "handlePBBalancingTransaction",
            "location": 220,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBClearedTrade": {
            "name": "handlePBClearedTrade",
            "location": 227,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBDistributionTransaction": {
            "name": "handlePBDistributionTransaction",
            "location": 234,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBCapacityTransaction": {
            "name": "handlePBCapacityTransaction",
            "location": 241,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBMarketBootstrapData": {
            "name": "handlePBMarketBootstrapData",
            "location": 248,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBMarketPosition": {
            "name": "handlePBMarketPosition",
            "location": 255,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBMarketTransaction": {
            "name": "handlePBMarketTransaction",
            "location": 262,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBOrderbook": {
            "name": "handlePBOrderbook",
            "location": 269,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBWeatherForecast": {
            "name": "handlePBWeatherForecast",
            "location": 276,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBWeatherReport": {
            "name": "handlePBWeatherReport",
            "location": 283,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerServiceServicer.handlePBBalanceReport": {
            "name": "handlePBBalanceReport",
            "location": 290,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceStub.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBCustomerBootstrapData": {
            "name": "handlePBCustomerBootstrapData",
            "location": 417,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBTariffSpecification": {
            "name": "handlePBTariffSpecification",
            "location": 424,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBTariffStatus": {
            "name": "handlePBTariffStatus",
            "location": 431,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBTariffTransaction": {
            "name": "handlePBTariffTransaction",
            "location": 438,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBTariffRevoke": {
            "name": "handlePBTariffRevoke",
            "location": 445,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerServiceServicer.handlePBBalancingControlEvent": {
            "name": "handlePBBalancingControlEvent",
            "location": 452,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceStub.__init__": {
            "name": "__init__",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "GameServiceServicer.handlePBTimeslotComplete": {
            "name": "handlePBTimeslotComplete",
            "location": 544,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceServicer.handlePBTimeslotUpdate": {
            "name": "handlePBTimeslotUpdate",
            "location": 551,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceServicer.handlePBSimPause": {
            "name": "handlePBSimPause",
            "location": 558,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceServicer.handlePBSimResume": {
            "name": "handlePBSimResume",
            "location": 565,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceServicer.handlePBSimEnd": {
            "name": "handlePBSimEnd",
            "location": 572,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameServiceServicer.handlePBBrokerAccept": {
            "name": "handlePBBrokerAccept",
            "location": 579,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ExtraSpyMessageManagerServiceStub.__init__": {
            "name": "__init__",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ExtraSpyMessageManagerServiceServicer.handlePBOrder": {
            "name": "handlePBOrder",
            "location": 653,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ExtraSpyMessageManagerServiceServicer.handlePBTariffSpec": {
            "name": "handlePBTariffSpec",
            "location": 660,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ConnectionServiceStub.__init__": {
            "name": "__init__",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ConnectionServiceServicer.pingpong": {
            "name": "pingpong",
            "location": 707,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SubmitServiceStub.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "SubmitServiceServicer.submitOrder": {
            "name": "submitOrder",
            "location": 759,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SubmitServiceServicer.submitTariffSpec": {
            "name": "submitTariffSpec",
            "location": 766,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SubmitServiceServicer.submitTariffRevoke": {
            "name": "submitTariffRevoke",
            "location": 773,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "broker-python-master/communication/messages_cache.py": {
        "store_message": {
            "name": "store_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "signal": [],
                "msg": []
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_file_handler": {
            "name": "get_file_handler",
            "location": 69,
            "return": [
                "Union[(BinaryIO, TextIO)]"
            ],
            "arguments": {
                "signal": [],
                "file_type": []
            }
        },
        "log_message": {
            "name": "log_message",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [],
                "msg": []
            }
        },
        "_log_normal_message": {
            "name": "_log_normal_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [],
                "msg": []
            }
        },
        "_log_protobuf_message": {
            "name": "_log_protobuf_message",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [],
                "msg": []
            }
        },
        "_close_all_handlers": {
            "name": "_close_all_handlers",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "broker-python-master/communication/messages_handlers.py": {},
    "broker-python-master/communication/powertac_communication_server.py": {
        "serve": {
            "name": "serve",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "SubmitService.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitService.subscribe": {
            "name": "subscribe",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitService.unsubscribe": {
            "name": "unsubscribe",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitService.send_order": {
            "name": "send_order",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "SubmitService.send_tariff_revoke": {
            "name": "send_tariff_revoke",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "SubmitService.send_tariff_spec": {
            "name": "send_tariff_spec",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "SubmitService.submitOrder": {
            "name": "submitOrder",
            "location": 92,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SubmitService.submitTariffRevoke": {
            "name": "submitTariffRevoke",
            "location": 100,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SubmitService.submitTariffSpec": {
            "name": "submitTariffSpec",
            "location": 108,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerService.handlePBBankTransaction": {
            "name": "handlePBBankTransaction",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerService.handlePBCashPosition": {
            "name": "handlePBCashPosition",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerService.handlePBDistributionReport": {
            "name": "handlePBDistributionReport",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerService.handlePBCompetition": {
            "name": "handlePBCompetition",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ContextManagerService.handlePBProperties": {
            "name": "handlePBProperties",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBActivate": {
            "name": "handlePBActivate",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBCompetition": {
            "name": "handlePBCompetition",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBBalancingTransaction": {
            "name": "handlePBBalancingTransaction",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBClearedTrade": {
            "name": "handlePBClearedTrade",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBMarketPosition": {
            "name": "handlePBMarketPosition",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBMarketTransaction": {
            "name": "handlePBMarketTransaction",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBOrderbook": {
            "name": "handlePBOrderbook",
            "location": 176,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBDistributionTransaction": {
            "name": "handlePBDistributionTransaction",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBCapacityTransaction": {
            "name": "handlePBCapacityTransaction",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBMarketBootstrapData": {
            "name": "handlePBMarketBootstrapData",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBWeatherForecast": {
            "name": "handlePBWeatherForecast",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBWeatherReport": {
            "name": "handlePBWeatherReport",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MarketManagerService.handlePBBalanceReport": {
            "name": "handlePBBalanceReport",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBCustomerBootstrapData": {
            "name": "handlePBCustomerBootstrapData",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBTariffSpecification": {
            "name": "handlePBTariffSpecification",
            "location": 210,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBTariffStatus": {
            "name": "handlePBTariffStatus",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBTariffTransaction": {
            "name": "handlePBTariffTransaction",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBTariffRevoke": {
            "name": "handlePBTariffRevoke",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "PortfolioManagerService.handlePBBalancingControlEvent": {
            "name": "handlePBBalancingControlEvent",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ConnectionService.pingpong": {
            "name": "pingpong",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBSimPause": {
            "name": "handlePBSimPause",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBTimeslotComplete": {
            "name": "handlePBTimeslotComplete",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBSimResume": {
            "name": "handlePBSimResume",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBTimeslotUpdate": {
            "name": "handlePBTimeslotUpdate",
            "location": 250,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBSimEnd": {
            "name": "handlePBSimEnd",
            "location": 254,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "GameService.handlePBBrokerAccept": {
            "name": "handlePBBrokerAccept",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ExtraSpyMessageManagerService.handlePBOrder": {
            "name": "handlePBOrder",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "CallLogInterceptor.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallLogInterceptor.intercept_service": {
            "name": "intercept_service",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "continuation": [],
                "handler_call_details": []
            }
        }
    },
    "broker-python-master/communication/test_grpc_communication.py": {
        "run_in_loop": {
            "name": "run_in_loop",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "coro_or_future": []
            }
        },
        "TestGrpcCommunicationServer.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.test_send_grpc_message_dispatcher": {
            "name": "test_send_grpc_message_dispatcher",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.test_reverse_streaming": {
            "name": "test_reverse_streaming",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.test_actual_grpc_reverse": {
            "name": "test_actual_grpc_reverse",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "asyncio_mock": []
            }
        },
        "TestGrpcCommunicationServer.test_publish_pb_message": {
            "name": "test_publish_pb_message",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.test_large_system": {
            "name": "test_large_system",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGrpcCommunicationServer.test_send_grpc_message_dispatcher.handle_event": {
            "name": "handle_event",
            "location": 52,
            "return": [],
            "arguments": {
                "sender": [],
                "msg": []
            }
        },
        "TestGrpcCommunicationServer.test_actual_grpc_reverse.client_thread": {
            "name": "client_thread",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "TestGrpcCommunicationServer.test_publish_pb_message.listen": {
            "name": "listen",
            "location": 145,
            "return": [],
            "arguments": {
                "sender": [],
                "signal": [],
                "msg": []
            }
        }
    },
    "broker-python-master/communication/test_messages_cache.py": {
        "TestMessageCache.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageCache.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageCache.test_cache_all_pb_messages": {
            "name": "test_cache_all_pb_messages",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageCache.test_log_protobuf_message": {
            "name": "test_log_protobuf_message",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageCache.test_log_protobuf": {
            "name": "test_log_protobuf",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "gfhm": []
            }
        },
        "TestMessageCache.test_log_normal_obj": {
            "name": "test_log_normal_obj",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "pickle_mock": []
            }
        },
        "TestMessageCache.test_log_unlog": {
            "name": "test_log_unlog",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/communication/__init__.py": {},
    "broker-python-master/communication/pubsub/grpc_adapter.py": {
        "publish_pb_message": {
            "name": "publish_pb_message",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pb_message": [],
                "loop": []
            }
        }
    },
    "broker-python-master/communication/pubsub/SignalConsumer.py": {
        "SignalConsumer.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalConsumer.subscribe": {
            "name": "subscribe",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalConsumer.unsubscribe": {
            "name": "unsubscribe",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/communication/pubsub/signals.py": {},
    "broker-python-master/communication/pubsub/__init__.py": {},
    "broker-python-master/notebooks/helpers.py": {},
    "broker-python-master/scripts/download_files.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_file": {
            "name": "download_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "game_name": []
            }
        },
        "dl_progress": {
            "name": "dl_progress",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [],
                "blockSize": [],
                "totalSize": []
            }
        }
    },
    "broker-python-master/scripts/extract_files.py": {
        "unzip_file": {
            "name": "unzip_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "origin": [],
                "dest": []
            }
        }
    },
    "broker-python-master/scripts/run_agent_tests.py": {
        "generate_calls": {
            "name": "generate_calls",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "loop_through_and_add": {
            "name": "loop_through_and_add",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "calls": [],
                "current_call": [],
                "params": [],
                "current_param_index": []
            }
        },
        "call_all": {
            "name": "call_all",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "calls": []
            }
        },
        "print_calls": {
            "name": "print_calls",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "calls": []
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "broker-python-master/tests/teststrings.py": {},
    "broker-python-master/tests/__init__.py": {},
    "broker-python-master/util/config.py": {
        "get_log_handlers": {
            "name": "get_log_handlers",
            "location": 77,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "get_log_config": {
            "name": "get_log_config",
            "location": 89,
            "return": [
                "Dict[(str, Union[(int, Dict[(str, Dict[(str, Union[(bool, str, List[str])])])])])]"
            ],
            "arguments": {}
        }
    },
    "broker-python-master/util/id_generator.py": {
        "get_string": {
            "name": "get_string",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "_id": []
            }
        },
        "extract_prefix": {
            "name": "extract_prefix",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "_id": []
            }
        },
        "create_id": {
            "name": "create_id",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "broker_accept_intercept": {
            "name": "broker_accept_intercept",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "handle_broker_accept_line": {
            "name": "handle_broker_accept_line",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "set_prefix": {
            "name": "set_prefix",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "_prefix": []
            }
        },
        "set_key": {
            "name": "set_key",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "_key": []
            }
        }
    },
    "broker-python-master/util/learning_utils.py": {
        "get_callbacks": {
            "name": "get_callbacks",
            "location": 95,
            "return": [
                "list"
            ],
            "arguments": {
                "model_name": []
            }
        },
        "get_callbacks_with_generator": {
            "name": "get_callbacks_with_generator",
            "location": 101,
            "return": [
                "list"
            ],
            "arguments": {
                "model_name": []
            }
        },
        "get_tb_cb": {
            "name": "get_tb_cb",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_name": []
            }
        },
        "tensorboard_write_mpd_sum": {
            "name": "tensorboard_write_mpd_sum",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "get_usage_file_paths": {
            "name": "get_usage_file_paths",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_wholesale_file_paths": {
            "name": "get_wholesale_file_paths",
            "location": 142,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "store_model_customer_nn": {
            "name": "store_model_customer_nn",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "customer_name": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "reload_model_customer_nn": {
            "name": "reload_model_customer_nn",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "customer_name": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "store_usage_predictions": {
            "name": "store_usage_predictions",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "usages": [],
                "predictions": [],
                "model_name": []
            }
        },
        "get_model_path": {
            "name": "get_model_path",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "customer_name": [],
                "model_name": []
            }
        },
        "get_now_string": {
            "name": "get_now_string",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ModelWriter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [],
                "fresh": []
            }
        },
        "ModelWriter.write_model": {
            "name": "write_model",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mdl": []
            }
        },
        "ModelWriter.write_model_source": {
            "name": "write_model_source",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [],
                "name": []
            }
        },
        "ModelWriter.load_model": {
            "name": "load_model",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TbWriterHelper.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [],
                "fresh": []
            }
        },
        "TbWriterHelper.write_train_loss": {
            "name": "write_train_loss",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "TbWriterHelper.write_test_loss": {
            "name": "write_test_loss",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "TbWriterHelper.write_any": {
            "name": "write_any",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_": [],
                "tag": []
            }
        },
        "NoneScaler.fit": {
            "name": "fit",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "NoneScaler.transform": {
            "name": "transform",
            "location": 185,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ]
            }
        },
        "NoneScaler.inverse_transform": {
            "name": "inverse_transform",
            "location": 188,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ]
            }
        },
        "NoneScaler.fit_transform": {
            "name": "fit_transform",
            "location": 191,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "_T0"
                ]
            }
        }
    },
    "broker-python-master/util/make_xml_collection.py": {
        "parse_message": {
            "name": "parse_message",
            "location": 9,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "xml": [
                    "str"
                ]
            }
        },
        "merge_xml": {
            "name": "merge_xml",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "bs4.BeautifulSoup"
                ],
                "target": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "add_to_type_set": {
            "name": "add_to_type_set",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "xml_obj": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "pickle_xml": {
            "name": "pickle_xml",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "broker-python-master/util/strings.py": {},
    "broker-python-master/util/test_id_generator.py": {
        "TestIdGenerator.test_handle_broker_accept_line": {
            "name": "test_handle_broker_accept_line",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/util/test_learning_utils.py": {},
    "broker-python-master/util/test_xml_collection.py": {
        "TestXmlCollection.test_parse_message": {
            "name": "test_parse_message",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXmlCollection.test_add_to_type_set": {
            "name": "test_add_to_type_set",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/util/utils.py": {
        "list_dim": {
            "name": "list_dim",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "a": []
            }
        },
        "get_now_date_file_ready": {
            "name": "get_now_date_file_ready",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "deprecated": {
            "name": "deprecated",
            "location": 21,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "time_function": {
            "name": "time_function",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [],
                "params": []
            }
        },
        "deprecated.new_func": {
            "name": "new_func",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "Bunch.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "broker-python-master/util/__init__.py": {}
}
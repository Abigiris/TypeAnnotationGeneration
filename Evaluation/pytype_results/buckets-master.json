{
    "buckets-master/action.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [],
                "target": []
            }
        },
        "Action.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buckets-master/dot.py": {
        "_name": {
            "name": "_name",
            "location": 7,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_state_label": {
            "name": "_state_label",
            "location": 11,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_link_label": {
            "name": "_link_label",
            "location": 15,
            "return": [],
            "arguments": {
                "action": []
            }
        },
        "_state_row": {
            "name": "_state_row",
            "location": 21,
            "return": [],
            "arguments": {
                "state": [],
                "target": []
            }
        },
        "_link_row": {
            "name": "_link_row",
            "location": 25,
            "return": [],
            "arguments": {
                "state": [],
                "action": [],
                "parent": []
            }
        },
        "to_dot": {
            "name": "to_dot",
            "location": 29,
            "return": [],
            "arguments": {
                "graph": [],
                "target": []
            }
        }
    },
    "buckets-master/enums.py": {
        "Target.other": {
            "name": "other",
            "location": 17,
            "return": [
                "_TTarget@@Target@@"
            ],
            "arguments": {
                "self": [
                    "_TTarget@@Target@@"
                ]
            }
        }
    },
    "buckets-master/main.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "buckets-master/performer.py": {
        "get_performer": {
            "name": "get_performer",
            "location": 10,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "max_left": [],
                "max_right": []
            }
        },
        "get_performer.perform": {
            "name": "perform",
            "location": 14,
            "return": [],
            "arguments": {
                "action": [],
                "initial_state": []
            }
        }
    },
    "buckets-master/solver.py": {
        "solve": {
            "name": "solve",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "max_left": [],
                "max_right": [],
                "target_amount": []
            }
        },
        "generate_graph": {
            "name": "generate_graph",
            "location": 63,
            "return": [
                "Dict[(Any, Optional[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "max_left": [],
                "max_right": [],
                "break_out_early": []
            }
        },
        "UnsolvableError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valid": []
            }
        },
        "solve.break_out_early": {
            "name": "break_out_early",
            "location": 32,
            "return": [],
            "arguments": {
                "current": []
            }
        },
        "generate_graph.put_all": {
            "name": "put_all",
            "location": 72,
            "return": [],
            "arguments": {
                "current": []
            }
        }
    },
    "buckets-master/test_dot.py": {
        "test_01": {
            "name": "test_01",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_011": {
            "name": "test_011",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "buckets-master/test_graph.py": {
        "cleanup_generate": {
            "name": "cleanup_generate",
            "location": 11,
            "return": [
                "Dict[(Tuple[(int, int)], Optional[Tuple[(Any, Any, Tuple[(int, int)])]])]"
            ],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "test_01": {
            "name": "test_01",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "buckets-master/test_main.py": {
        "test_normal": {
            "name": "test_normal",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_non_integral": {
            "name": "test_non_integral",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_non_float": {
            "name": "test_non_float",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_zeroes": {
            "name": "test_zeroes",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_letters": {
            "name": "test_letters",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_negative_bucket_sizes": {
            "name": "test_negative_bucket_sizes",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_negative_water_size": {
            "name": "test_negative_water_size",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_bad_args": {
            "name": "test_bad_args",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_two_args": {
            "name": "test_two_args",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_strange_options": {
            "name": "test_strange_options",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_graph": {
            "name": "test_graph",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "buckets-master/test_perform.py": {
        "_wrap_performer": {
            "name": "_wrap_performer",
            "location": 12,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fill": {
            "name": "test_fill",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_wrap_performer.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [],
            "arguments": {
                "action": [],
                "input_state": []
            }
        }
    },
    "buckets-master/test_solver.py": {
        "to_tuples": {
            "name": "to_tuples",
            "location": 14,
            "return": [
                "Tuple[(List[Tuple[(Any, Any, Any)]], _T1)]"
            ],
            "arguments": {
                "actions": [],
                "target": [
                    "_T1@@"
                ]
            }
        },
        "_solve": {
            "name": "_solve",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_simple_fill": {
            "name": "test_simple_fill",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "assert_impossible": {
            "name": "assert_impossible",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_532": {
            "name": "test_532",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_one_and_half": {
            "name": "test_one_and_half",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_534": {
            "name": "test_534",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_53": {
            "name": "test_53",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "buckets-master/type_aliases.py": {}
}
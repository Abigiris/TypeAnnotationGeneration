{
    "cincoconfig-master/example.py": {},
    "cincoconfig-master/setup.py": {
        "load_requirements": {
            "name": "load_requirements",
            "location": 7,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/core.py": {
        "isconfigtype": {
            "name": "isconfigtype",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "field": [
                    "Optional[BaseField]"
                ],
                "exc": [
                    "Union[(Exception, str)]"
                ],
                "ref_path": [
                    "str"
                ]
            }
        },
        "ValidationError.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.ref_path": {
            "name": "ref_path",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerValueMixin._get_item_position": {
            "name": "_get_item_position",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FeatureFlagFieldMixin.is_feature_enabled": {
            "name": "is_feature_enabled",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "IncludeFieldMixin.include": {
            "name": "include",
            "location": 132,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "fmt": [
                    "ConfigFormat"
                ],
                "filename": [
                    "str"
                ],
                "base": [
                    "dict"
                ]
            }
        },
        "BaseField.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "schema": [
                    "Schema"
                ]
            }
        },
        "BaseField.__setkey__": {
            "name": "__setkey__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Schema"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BaseField.__getval__": {
            "name": "__getval__",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "BaseField.__setdefault__": {
            "name": "__setdefault__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "BaseField.full_path": {
            "name": "full_path",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseField._ref_path": {
            "name": "_ref_path",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.short_help": {
            "name": "short_help",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.default": {
            "name": "default",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.name": {
            "name": "name",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field._validate": {
            "name": "_validate",
            "location": 388,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ],
                "value": []
            }
        },
        "Field.__setval__": {
            "name": "__setval__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ],
                "value": []
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 404,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ],
                "value": []
            }
        },
        "Field.__setkey__": {
            "name": "__setkey__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Schema"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Field.__setdefault__": {
            "name": "__setdefault__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "Field.to_python": {
            "name": "to_python",
            "location": 472,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ],
                "value": []
            }
        },
        "Field.to_basic": {
            "name": "to_basic",
            "location": 493,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ],
                "value": []
            }
        },
        "ConfigTypeField.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_type": [
                    "Type[ConfigType]"
                ],
                "key": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ConfigTypeField.__setdefault__": {
            "name": "__setdefault__",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "ConfigTypeField.__call__": {
            "name": "__call__",
            "location": 530,
            "return": [
                "ConfigType"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "dynamic": [
                    "bool"
                ],
                "env": [
                    "Union[(bool, str)]"
                ],
                "schema": [
                    "Schema"
                ]
            }
        },
        "Schema._feature_flag_fields": {
            "name": "_feature_flag_fields",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema._is_feature_enabled": {
            "name": "_is_feature_enabled",
            "location": 586,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "Schema.__setkey__": {
            "name": "__setkey__",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Schema"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Schema.__setdefault__": {
            "name": "__setdefault__",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Config"
                ]
            }
        },
        "Schema._get_field": {
            "name": "_get_field",
            "location": 610,
            "return": [
                "Optional[BaseField]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Schema.__setattr__": {
            "name": "__setattr__",
            "location": 616,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "Schema._add_field": {
            "name": "_add_field",
            "location": 628,
            "return": [
                "BaseField"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "field": [
                    "Union[(BaseField, ConfigType)]"
                ]
            }
        },
        "Schema.__getattr__": {
            "name": "__getattr__",
            "location": 644,
            "return": [
                "BaseField"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Schema.__call__": {
            "name": "__call__",
            "location": 652,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Config"
                ]
            }
        },
        "Schema.__iter__": {
            "name": "__iter__",
            "location": 658,
            "return": [
                "Iterator[Tuple[(str, BaseField)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__getitem__": {
            "name": "__getitem__",
            "location": 664,
            "return": [
                "BaseField"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Schema.__setitem__": {
            "name": "__setitem__",
            "location": 684,
            "return": [
                "BaseField"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Union[(BaseField, ConfigType)]"
                ]
            }
        },
        "Schema._validate": {
            "name": "_validate",
            "location": 706,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "collect_errors": [
                    "bool"
                ]
            }
        },
        "Schema._validate_field": {
            "name": "_validate_field",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "field": [
                    "BaseField"
                ]
            }
        },
        "Schema.get_all_fields": {
            "name": "get_all_fields",
            "location": 762,
            "return": [
                "List[Tuple[(str, Schema, BaseField)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.generate_argparse_parser": {
            "name": "generate_argparse_parser",
            "location": 775,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.instance_method": {
            "name": "instance_method",
            "location": 789,
            "return": [
                "Callable[([Config], None)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Schema.validator": {
            "name": "validator",
            "location": 800,
            "return": [
                "Callable[([Config], None)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([Config], None)]"
                ]
            }
        },
        "Schema.make_type": {
            "name": "make_type",
            "location": 810,
            "return": [
                "Type[ConfigType]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "module": [
                    "str"
                ],
                "key_filename": [
                    "str"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Schema"
                ],
                "parent": [
                    "Config"
                ],
                "key_filename": [
                    "str"
                ]
            }
        },
        "Config._key_filename": {
            "name": "_key_filename",
            "location": 911,
            "return": [],
            "arguments": {
                "self": [],
                "key_filename": []
            }
        },
        "Config._keyfile": {
            "name": "_keyfile",
            "location": 922,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._get_field": {
            "name": "_get_field",
            "location": 934,
            "return": [
                "Optional[BaseField]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Config._set_default_value": {
            "name": "_set_default_value",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "Config._set_value": {
            "name": "_set_value",
            "location": 951,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 1000,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 1012,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config._get_value": {
            "name": "_get_value",
            "location": 1020,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 1027,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Config.__iter__": {
            "name": "__iter__",
            "location": 1044,
            "return": [
                "Iterator[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 1048,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 1068,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Config.full_path": {
            "name": "full_path",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._ref_path": {
            "name": "_ref_path",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.save": {
            "name": "save",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "Config.dumps": {
            "name": "dumps",
            "location": 1141,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ],
                "virtual": [
                    "bool"
                ],
                "sensitive_mask": [
                    "str"
                ]
            }
        },
        "Config.to_tree": {
            "name": "to_tree",
            "location": 1155,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "virtual": [
                    "bool"
                ],
                "sensitive_mask": [
                    "str"
                ]
            }
        },
        "Config.load_tree": {
            "name": "load_tree",
            "location": 1208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 1232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "Config.loads": {
            "name": "loads",
            "location": 1245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Union[(bytes, str)]"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "Config._process_includes": {
            "name": "_process_includes",
            "location": 1265,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Schema"
                ],
                "tree": [
                    "dict"
                ],
                "format_factory": [
                    "Callable[([], ConfigFormat)]"
                ]
            }
        },
        "Config.validate": {
            "name": "validate",
            "location": 1299,
            "return": [
                "List[ValidationError]"
            ],
            "arguments": {
                "self": [],
                "collect_errors": [
                    "bool"
                ]
            }
        },
        "Config.cmdline_args_override": {
            "name": "cmdline_args_override",
            "location": 1305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ],
                "ignore": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "ConfigType.__init__": {
            "name": "__init__",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Config"
                ]
            }
        },
        "ConfigType.__eq__": {
            "name": "__eq__",
            "location": 1335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConfigFormat.register": {
            "name": "register",
            "location": 1352,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "format_cls": [
                    "Type[ConfigFormat]"
                ]
            }
        },
        "ConfigFormat.get": {
            "name": "get",
            "location": 1362,
            "return": [
                "_TConfigFormat"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfigFormat]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ConfigFormat.initialize_registry": {
            "name": "initialize_registry",
            "location": 1377,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ConfigFormat.dumps": {
            "name": "dumps",
            "location": 1390,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "ConfigFormat.loads": {
            "name": "loads",
            "location": 1402,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/encryption.py": {
        "IEncryptionProvider.encrypt": {
            "name": "encrypt",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bytes"
                ]
            }
        },
        "IEncryptionProvider.decrypt": {
            "name": "decrypt",
            "location": 68,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ciphertext": [
                    "bytes"
                ]
            }
        },
        "KeyFile.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "KeyFile.__load_key": {
            "name": "__load_key",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFile.__generate_key": {
            "name": "__generate_key",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFile.generate_key": {
            "name": "generate_key",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFile._validate_key": {
            "name": "_validate_key",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFile.__enter__": {
            "name": "__enter__",
            "location": 147,
            "return": [
                "_TKeyFile"
            ],
            "arguments": {
                "self": [
                    "_TKeyFile"
                ]
            }
        },
        "KeyFile.__exit__": {
            "name": "__exit__",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "KeyFile._get_provider": {
            "name": "_get_provider",
            "location": 161,
            "return": [
                "Tuple[(IEncryptionProvider, str)]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "KeyFile.encrypt": {
            "name": "encrypt",
            "location": 187,
            "return": [
                "SecureValue"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Union[(bytes, str)]"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "KeyFile.decrypt": {
            "name": "decrypt",
            "location": 202,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "SecureValue"
                ]
            }
        },
        "XorProvider.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "XorProvider.encrypt": {
            "name": "encrypt",
            "location": 223,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "XorProvider.decrypt": {
            "name": "decrypt",
            "location": 233,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ciphertext": [
                    "bytes"
                ]
            }
        },
        "AesProvider.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes"
                ]
            }
        },
        "AesProvider.decrypt": {
            "name": "decrypt",
            "location": 251,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ciphertext": [
                    "bytes"
                ]
            }
        },
        "AesProvider.encrypt": {
            "name": "encrypt",
            "location": 268,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/stubs.py": {
        "get_annotation_typestr": {
            "name": "get_annotation_typestr",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "Union[(str, type, cincoconfig.core.BaseField)]"
                ]
            }
        },
        "get_arg_annotation": {
            "name": "get_arg_annotation",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "field": [
                    "Union[(str, type, cincoconfig.core.BaseField)]"
                ]
            }
        },
        "get_retval_annotation": {
            "name": "get_retval_annotation",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation": []
            }
        },
        "get_method_annotation": {
            "name": "get_method_annotation",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "field": [
                    "cincoconfig.fields.instance_method_field.InstanceMethodField"
                ]
            }
        },
        "generate_stub": {
            "name": "generate_stub",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Union[(cincoconfig.core.Config, cincoconfig.core.Schema)]"
                ],
                "class_name": [
                    "str"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/support.py": {
        "make_type": {
            "name": "make_type",
            "location": 17,
            "return": [
                "Type[cincoconfig.core.ConfigType]"
            ],
            "arguments": {
                "schema": [
                    "cincoconfig.core.Schema"
                ],
                "name": [
                    "str"
                ],
                "module": [
                    "str"
                ],
                "key_filename": [
                    "str"
                ]
            }
        },
        "generate_argparse_parser": {
            "name": "generate_argparse_parser",
            "location": 81,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "schema": []
            }
        },
        "validator": {
            "name": "validator",
            "location": 109,
            "return": [
                "Callable"
            ],
            "arguments": {
                "field": [
                    "cincoconfig.core.BaseField"
                ]
            }
        },
        "get_all_fields": {
            "name": "get_all_fields",
            "location": 155,
            "return": [
                "List[Tuple[(str, cincoconfig.core.Schema, cincoconfig.core.BaseField)]]"
            ],
            "arguments": {
                "schema": [
                    "Union[(cincoconfig.core.Config, cincoconfig.core.Schema)]"
                ]
            }
        },
        "cmdline_args_override": {
            "name": "cmdline_args_override",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "cincoconfig.core.Config"
                ],
                "args": [
                    "argparse.Namespace"
                ],
                "ignore": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "item_ref_path": {
            "name": "item_ref_path",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "Union[(cincoconfig.core.BaseField, cincoconfig.core.Config)]"
                ]
            }
        },
        "get_fields": {
            "name": "get_fields",
            "location": 253,
            "return": [
                "List[Tuple[(str, cincoconfig.core.BaseField)]]"
            ],
            "arguments": {
                "schema": [
                    "Union[(cincoconfig.core.Config, cincoconfig.core.Schema)]"
                ],
                "types": [
                    "Union[(type, Tuple[type])]"
                ]
            }
        },
        "_list_asdict": {
            "name": "_list_asdict",
            "location": 274,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "list"
                ],
                "virtual": [
                    "bool"
                ]
            }
        },
        "asdict": {
            "name": "asdict",
            "location": 294,
            "return": [
                "dict"
            ],
            "arguments": {
                "config": [
                    "cincoconfig.core.Config"
                ],
                "virtual": [
                    "bool"
                ]
            }
        },
        "is_value_defined": {
            "name": "is_value_defined",
            "location": 322,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "cincoconfig.core.Config"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "reset_value": {
            "name": "reset_value",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "cincoconfig.core.Config"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "validator.inner": {
            "name": "inner",
            "location": 144,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/version.py": {},
    "cincoconfig-master/cincoconfig/__init__.py": {},
    "cincoconfig-master/cincoconfig/fields/bool_field.py": {
        "BoolField._validate": {
            "name": "_validate",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FeatureFlagField.is_feature_enabled": {
            "name": "is_feature_enabled",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/bytes_field.py": {
        "BytesField.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str"
                ]
            }
        },
        "BytesField._validate": {
            "name": "_validate",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        },
        "BytesField.to_basic": {
            "name": "to_basic",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "bytes"
                ]
            }
        },
        "BytesField.to_python": {
            "name": "to_python",
            "location": 59,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/dict_field.py": {
        "DictField._validate": {
            "name": "_validate",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "dict"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/file_field.py": {
        "FilenameField.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilenameField._validate": {
            "name": "_validate",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/include_field.py": {
        "IncludeField.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startdir": [
                    "str"
                ]
            }
        },
        "IncludeField.include": {
            "name": "include",
            "location": 61,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "fmt": [
                    "cincoconfig.core.ConfigFormat"
                ],
                "filename": [
                    "str"
                ],
                "base": [
                    "dict"
                ]
            }
        },
        "IncludeField.combine_trees": {
            "name": "combine_trees",
            "location": 80,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "dict"
                ],
                "child": [
                    "dict"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/instance_method_field.py": {
        "instance_method": {
            "name": "instance_method",
            "location": 58,
            "return": [
                "Callable"
            ],
            "arguments": {
                "schema": [
                    "cincoconfig.core.Schema"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "InstanceMethodField.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Callable[([cincoconfig.core.Config], Any)]"
                ]
            }
        },
        "InstanceMethodField.__setdefault__": {
            "name": "__setdefault__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "InstanceMethodField._bind": {
            "name": "_bind",
            "location": 38,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "InstanceMethodField.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        },
        "InstanceMethodField.__setval__": {
            "name": "__setval__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        },
        "instance_method.wrapper": {
            "name": "wrapper",
            "location": 76,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "InstanceMethodField._bind.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "cincoconfig-master/cincoconfig/fields/list_field.py": {
        "ListProxy.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "list_field": [
                    "ListField"
                ],
                "iterable": [
                    "Iterable[_T]"
                ]
            }
        },
        "ListProxy.item_field": {
            "name": "item_field",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListProxy.append": {
            "name": "append",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T"
                ]
            }
        },
        "ListProxy.extend": {
            "name": "extend",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Iterable[_T]"
                ]
            }
        },
        "ListProxy.insert": {
            "name": "insert",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "item": [
                    "_T"
                ]
            }
        },
        "ListProxy.copy": {
            "name": "copy",
            "location": 58,
            "return": [
                "_TListProxy"
            ],
            "arguments": {
                "self": [
                    "_TListProxy"
                ]
            }
        },
        "ListProxy.__iadd__": {
            "name": "__iadd__",
            "location": 61,
            "return": [
                "_TListProxy"
            ],
            "arguments": {
                "self": [
                    "_TListProxy"
                ],
                "iterable": [
                    "Iterable[_T]"
                ]
            }
        },
        "ListProxy.__add__": {
            "name": "__add__",
            "location": 65,
            "return": [
                "_TListProxy"
            ],
            "arguments": {
                "self": [
                    "_TListProxy"
                ],
                "iterable": [
                    "Iterable[_T]"
                ]
            }
        },
        "ListProxy.__setitem__": {
            "name": "__setitem__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[(int, slice)]"
                ],
                "item": [
                    "Union[(Iterable[_T], _T)]"
                ]
            }
        },
        "ListProxy._validate": {
            "name": "_validate",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ListProxy._get_item_position": {
            "name": "_get_item_position",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ListField.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Union[(cincoconfig.core.BaseField, Type[cincoconfig.core.ConfigType])]"
                ]
            }
        },
        "ListField.__setdefault__": {
            "name": "__setdefault__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "ListField._validate": {
            "name": "_validate",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "list"
                ]
            }
        },
        "ListField.to_basic": {
            "name": "to_basic",
            "location": 170,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "list"
                ]
            }
        },
        "ListField.to_python": {
            "name": "to_python",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "list"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/net_field.py": {
        "PortField.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPv4AddressField._validate": {
            "name": "_validate",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "IPv4NetworkField.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_prefix_len": [
                    "int"
                ],
                "max_prefix_len": [
                    "int"
                ]
            }
        },
        "IPv4NetworkField._validate": {
            "name": "_validate",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "HostnameField.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostnameField._validate": {
            "name": "_validate",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/number_field.py": {
        "NumberField.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_cls": [
                    "type"
                ]
            }
        },
        "NumberField._validate": {
            "name": "_validate",
            "location": 34,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "Union[(float, str)]"
                ]
            }
        },
        "IntField.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatField.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/secure_field.py": {
        "DigestValue.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigestValue.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "_TDigestValue"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDigestValue]"
                ],
                "value": [
                    "str"
                ],
                "algorithm": [
                    "Callable[([Optional[bytes]], hashlib._Hash)]"
                ]
            }
        },
        "DigestValue.create": {
            "name": "create",
            "location": 57,
            "return": [
                "_TDigestValue"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDigestValue]"
                ],
                "plaintext": [
                    "Union[(bytes, str)]"
                ],
                "algorithm": [
                    "Callable[([Optional[bytes]], hashlib._Hash)]"
                ],
                "salt": [
                    "bytes"
                ]
            }
        },
        "DigestValue.challenge": {
            "name": "challenge",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "Union[(bytes, str)]"
                ]
            }
        },
        "ChallengeField.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_algorithm": [
                    "str"
                ]
            }
        },
        "ChallengeField.__setdefault__": {
            "name": "__setdefault__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "ChallengeField._validate": {
            "name": "_validate",
            "location": 208,
            "return": [
                "DigestValue"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        },
        "ChallengeField._hash": {
            "name": "_hash",
            "location": 220,
            "return": [
                "DigestValue"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "Union[(bytes, str)]"
                ],
                "salt": [
                    "bytes"
                ]
            }
        },
        "ChallengeField.to_basic": {
            "name": "to_basic",
            "location": 232,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "DigestValue"
                ]
            }
        },
        "ChallengeField.to_python": {
            "name": "to_python",
            "location": 249,
            "return": [
                "DigestValue"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "Union[(dict, str)]"
                ]
            }
        },
        "SecureField.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "sensitive": [
                    "bool"
                ]
            }
        },
        "SecureField.to_basic": {
            "name": "to_basic",
            "location": 296,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SecureField.to_python": {
            "name": "to_python",
            "location": 308,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/string_field.py": {
        "StringField.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringField._validate": {
            "name": "_validate",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "LogLevelField.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "List[str]"
                ]
            }
        },
        "ApplicationModeField.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modes": [
                    "List[str]"
                ],
                "create_helpers": [
                    "bool"
                ]
            }
        },
        "ApplicationModeField._create_helper": {
            "name": "_create_helper",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "ApplicationModeField.__setkey__": {
            "name": "__setkey__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "cincoconfig.core.Schema"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/url_field.py": {
        "UrlField._validate": {
            "name": "_validate",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/virtual_field.py": {
        "VirtualField.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getter": [
                    "Callable[([cincoconfig.core.Config], Any)]"
                ],
                "setter": [
                    "Callable[([cincoconfig.core.Config, Any], Any)]"
                ]
            }
        },
        "VirtualField.__setdefault__": {
            "name": "__setdefault__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "VirtualField.__getval__": {
            "name": "__getval__",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ]
            }
        },
        "VirtualField.__setval__": {
            "name": "__setval__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "cincoconfig.core.Config"
                ],
                "value": []
            }
        }
    },
    "cincoconfig-master/cincoconfig/fields/__init__.py": {},
    "cincoconfig-master/cincoconfig/formats/bson.py": {
        "BsonConfigFormat.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BsonConfigFormat.dumps": {
            "name": "dumps",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "BsonConfigFormat.loads": {
            "name": "loads",
            "location": 49,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/formats/json.py": {
        "JsonConfigFormat.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "bool"
                ]
            }
        },
        "JsonConfigFormat.dumps": {
            "name": "dumps",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "JsonConfigFormat.loads": {
            "name": "loads",
            "location": 46,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/formats/pickle.py": {
        "PickleConfigFormat.dumps": {
            "name": "dumps",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "PickleConfigFormat.loads": {
            "name": "loads",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/formats/xml.py": {
        "XmlConfigFormat.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_tag": [
                    "str"
                ]
            }
        },
        "XmlConfigFormat._to_element": {
            "name": "_to_element",
            "location": 48,
            "return": [
                "ET.Element"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "XmlConfigFormat._from_element": {
            "name": "_from_element",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ele": [
                    "ET.Element"
                ],
                "py_type": [
                    "str"
                ]
            }
        },
        "XmlConfigFormat._prettify": {
            "name": "_prettify",
            "location": 150,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ele": [
                    "ET.Element"
                ]
            }
        },
        "XmlConfigFormat.dumps": {
            "name": "dumps",
            "location": 161,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "XmlConfigFormat.loads": {
            "name": "loads",
            "location": 174,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/formats/yaml.py": {
        "YamlConfigFormat.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_key": [
                    "str"
                ]
            }
        },
        "YamlConfigFormat.dumps": {
            "name": "dumps",
            "location": 68,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "tree": [
                    "dict"
                ]
            }
        },
        "YamlConfigFormat.loads": {
            "name": "loads",
            "location": 82,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cincoconfig.core.Config"
                ],
                "content": [
                    "bytes"
                ]
            }
        }
    },
    "cincoconfig-master/cincoconfig/formats/__init__.py": {},
    "cincoconfig-master/docs/conf.py": {},
    "cincoconfig-master/stubs/bson.py": {
        "dumps": {
            "name": "dumps",
            "location": 1,
            "return": [
                "bytes"
            ],
            "arguments": {
                "obj": []
            }
        },
        "loads": {
            "name": "loads",
            "location": 3,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "cincoconfig-master/stubs/xml/__init__.py": {},
    "cincoconfig-master/stubs/xml/dom/minidom.py": {
        "parseString": {
            "name": "parseString",
            "location": 8,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "DomElement.toprettyxml": {
            "name": "toprettyxml",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "indent": []
            }
        }
    },
    "cincoconfig-master/stubs/xml/dom/__init__.py": {},
    "cincoconfig-master/tests/test_config.py": {
        "MockFormatter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFormatInclude.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_add_field_dynamic": {
            "name": "test_add_field_dynamic",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_add_field_failed": {
            "name": "test_add_field_failed",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_field_base": {
            "name": "test_get_field_base",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_field_dynamic": {
            "name": "test_get_field_dynamic",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_key_filename_ctor": {
            "name": "test_key_filename_ctor",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_key_filename_none_ctor": {
            "name": "test_key_filename_none_ctor",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_key_filename_parent": {
            "name": "test_key_filename_parent",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_key_filename_setter": {
            "name": "test_key_filename_setter",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_key_filename_set_none": {
            "name": "test_key_filename_set_none",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_keyfile_set": {
            "name": "test_keyfile_set",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_keyfile_parent": {
            "name": "test_keyfile_parent",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_keyfile_default": {
            "name": "test_keyfile_default",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ref_path": {
            "name": "test_ref_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ref_path_container": {
            "name": "test_ref_path_container",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ref_path_container_error": {
            "name": "test_ref_path_container_error",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_ref_path_no_parent": {
            "name": "test_ref_path_no_parent",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setdefault": {
            "name": "test_setdefault",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_subschema": {
            "name": "test_subschema",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_field": {
            "name": "test_setattr_field",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_dynamic": {
            "name": "test_setattr_dynamic",
            "location": 156,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_non_dynamic": {
            "name": "test_setattr_non_dynamic",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_config_dict": {
            "name": "test_setattr_config_dict",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_value": {
            "name": "test_setattr_value",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_config_no_dict": {
            "name": "test_setattr_config_no_dict",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_getitem": {
            "name": "test_getitem",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree": {
            "name": "test_to_tree",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_include_virtual": {
            "name": "test_to_tree_include_virtual",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_exclude_virtual": {
            "name": "test_to_tree_exclude_virtual",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_empty_mask_secure": {
            "name": "test_to_tree_empty_mask_secure",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_sensitive_mask_single": {
            "name": "test_to_tree_sensitive_mask_single",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_sensitive_mask_multi": {
            "name": "test_to_tree_sensitive_mask_multi",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_sensitive_mask_empty": {
            "name": "test_to_tree_sensitive_mask_empty",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_dumps_to_tree_args": {
            "name": "test_dumps_to_tree_args",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "fr_get": []
            }
        },
        "TestConfig.test_iter": {
            "name": "test_iter",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_getattr_error": {
            "name": "test_getattr_error",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_getattr_dynamic": {
            "name": "test_getattr_dynamic",
            "location": 284,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setitem": {
            "name": "test_setitem",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_dumps": {
            "name": "test_dumps",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "fr_get": []
            }
        },
        "TestConfig.test_loads": {
            "name": "test_loads",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "fr_get": []
            }
        },
        "TestConfig.test_load": {
            "name": "test_load",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "loads": [],
                "mop": []
            }
        },
        "TestConfig.test_save": {
            "name": "test_save",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "dumps": [],
                "mop": []
            }
        },
        "TestConfig.test_version": {
            "name": "test_version",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_getitem_nested": {
            "name": "test_getitem_nested",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setitem_nested": {
            "name": "test_setitem_nested",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_include_field": {
            "name": "test_include_field",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_nested_include": {
            "name": "test_nested_include",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_config": {
            "name": "test_set_config",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_validate": {
            "name": "test_validate",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_load_tree_validate": {
            "name": "test_load_tree_validate",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_load_tree_ignore_env": {
            "name": "test_load_tree_ignore_env",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "mock_os": []
            }
        },
        "TestConfig.test_validator": {
            "name": "test_validator",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_cmdline_args_override": {
            "name": "test_cmdline_args_override",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "mock_override": []
            }
        },
        "TestConfig.test_in_flat": {
            "name": "test_in_flat",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_in_nested": {
            "name": "test_in_nested",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_not_in": {
            "name": "test_not_in",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_in_not_config": {
            "name": "test_in_not_config",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_wrap_validation_error": {
            "name": "test_wrap_validation_error",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_validation_error_str": {
            "name": "test_validation_error_str",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_setattr_validation_error_reraise": {
            "name": "test_setattr_validation_error_reraise",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_valdiate_wrap_validation_error": {
            "name": "test_valdiate_wrap_validation_error",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_validate_reraise_validation_error": {
            "name": "test_validate_reraise_validation_error",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_save_expanduser": {
            "name": "test_save_expanduser",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "expanduser": [],
                "mop": []
            }
        },
        "TestConfig.test_load_expanduser": {
            "name": "test_load_expanduser",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "expanduser": [],
                "mop": []
            }
        },
        "TestConfig.test_configtype_eq": {
            "name": "test_configtype_eq",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_configtype_eq_none": {
            "name": "test_configtype_eq_none",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_configtype_eq_diff_class": {
            "name": "test_configtype_eq_diff_class",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_configtype_ne": {
            "name": "test_configtype_ne",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_value_config_validation_error": {
            "name": "test_set_value_config_validation_error",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_value_config_exc": {
            "name": "test_set_value_config_exc",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_full_path": {
            "name": "test_full_path",
            "location": 654,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_ignore_instance_method": {
            "name": "test_to_tree_ignore_instance_method",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_to_basic_exc": {
            "name": "test_to_tree_to_basic_exc",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_to_tree_to_basic_validation_error": {
            "name": "test_to_tree_to_basic_validation_error",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_load_tree_to_python_exc": {
            "name": "test_load_tree_to_python_exc",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_load_tree_to_python_validation_error": {
            "name": "test_load_tree_to_python_validation_error",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_validate_collect_errors": {
            "name": "test_validate_collect_errors",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_load_tree_no_validate": {
            "name": "test_load_tree_no_validate",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_default_keys": {
            "name": "test_default_keys",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_default_keys_override": {
            "name": "test_default_keys_override",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_default_keys_config_override": {
            "name": "test_default_keys_config_override",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_default_value": {
            "name": "test_set_default_value",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_validator.validate": {
            "name": "validate",
            "location": 446,
            "return": [],
            "arguments": {
                "cfg": []
            }
        }
    },
    "cincoconfig-master/tests/test_encryption.py": {
        "StubProvider.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_with": {
            "name": "test_with",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "load_key": []
            }
        },
        "TestKeyFile.test_load_key_exists": {
            "name": "test_load_key_exists",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "genkey_mock": [],
                "validate_mock": [],
                "open_mock": []
            }
        },
        "TestKeyFile.test_load_generate": {
            "name": "test_load_generate",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "genkey_mock": [],
                "open_mock": []
            }
        },
        "TestKeyFile.test_generate_key": {
            "name": "test_generate_key",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "urandom_mock": [],
                "open_mock": []
            }
        },
        "TestKeyFile.test_validate_none": {
            "name": "test_validate_none",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_validate_short": {
            "name": "test_validate_short",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_validate_success": {
            "name": "test_validate_success",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_get_provider_aes": {
            "name": "test_get_provider_aes",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_get_provider_xor": {
            "name": "test_get_provider_xor",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_get_provider_unknown": {
            "name": "test_get_provider_unknown",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_get_provider_no_key": {
            "name": "test_get_provider_no_key",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_encrypt": {
            "name": "test_encrypt",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_decrypt": {
            "name": "test_decrypt",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_encrypt_nokey": {
            "name": "test_encrypt_nokey",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_decrypt_nokey": {
            "name": "test_decrypt_nokey",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_encrypt_best_aes": {
            "name": "test_encrypt_best_aes",
            "location": 144,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFile.test_encrypt_best_xor": {
            "name": "test_encrypt_best_xor",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAesProvider.test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAesProvider.test_aes_unavailable": {
            "name": "test_aes_unavailable",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAesProvider.test_decrypt_bad_value": {
            "name": "test_decrypt_bad_value",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXorProvider.test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_errors.py": {
        "TestValidationError.test_set_ref_path": {
            "name": "test_set_ref_path",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationError.test_ref_path": {
            "name": "test_ref_path",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_schema.py": {
        "TestSchema.test_setkey": {
            "name": "test_setkey",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_add_field_field": {
            "name": "test_add_field_field",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_add_field_schema": {
            "name": "test_add_field_schema",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_add_field_config_type": {
            "name": "test_add_field_config_type",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "mock_ct_field_cls": []
            }
        },
        "TestSchema.test_add_field_other": {
            "name": "test_add_field_other",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_get_field_exists": {
            "name": "test_get_field_exists",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_get_field_no_exists": {
            "name": "test_get_field_no_exists",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_env_true": {
            "name": "test_env_true",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setkey_inherit_env": {
            "name": "test_setkey_inherit_env",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setkey_inherit_env_append": {
            "name": "test_setkey_inherit_env_append",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setkey_env_false": {
            "name": "test_setkey_env_false",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setattr_field": {
            "name": "test_setattr_field",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_getattr": {
            "name": "test_getattr",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_getattr_new": {
            "name": "test_getattr_new",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_iter": {
            "name": "test_iter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_call": {
            "name": "test_call",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_make_type": {
            "name": "test_make_type",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "mock_make_type": []
            }
        },
        "TestSchema.test_instance_method_decorator": {
            "name": "test_instance_method_decorator",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "mock_method": []
            }
        },
        "TestSchema.test_validate_ignore_methods": {
            "name": "test_validate_ignore_methods",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_get_all_fields": {
            "name": "test_get_all_fields",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_all_fields": []
            }
        },
        "TestSchema.test_getitem": {
            "name": "test_getitem",
            "location": 141,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_getitem_missing_schema": {
            "name": "test_getitem_missing_schema",
            "location": 150,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_getitem_keyerror_not_schema": {
            "name": "test_getitem_keyerror_not_schema",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setitem": {
            "name": "test_setitem",
            "location": 160,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_setitem_typeerror": {
            "name": "test_setitem_typeerror",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_getattr_add_field": {
            "name": "test_getattr_add_field",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_generate_argparse_parser": {
            "name": "test_generate_argparse_parser",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "mock_gen_parser": []
            }
        },
        "TestSchema.test_validator": {
            "name": "test_validator",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_validate_collect_errors": {
            "name": "test_validate_collect_errors",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_validate_collect_errors_other": {
            "name": "test_validate_collect_errors_other",
            "location": 204,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_feature_flag_fields": {
            "name": "test_feature_flag_fields",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_is_feature_enabled_true": {
            "name": "test_is_feature_enabled_true",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_is_feature_disabled_false": {
            "name": "test_is_feature_disabled_false",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_validate_feature_flag_disabled": {
            "name": "test_validate_feature_flag_disabled",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_stubs.py": {
        "TestStubs.test_get_annotation_typestr_field": {
            "name": "test_get_annotation_typestr_field",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_annotation_typestr_type_module": {
            "name": "test_get_annotation_typestr_type_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_annotation_typestr_schema": {
            "name": "test_get_annotation_typestr_schema",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_annotation_typestr_str": {
            "name": "test_get_annotation_typestr_str",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_annotation_type_any": {
            "name": "test_get_annotation_type_any",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_arg_annotation": {
            "name": "test_get_arg_annotation",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_retval_annotation": {
            "name": "test_get_retval_annotation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_retval_annotation_invalid": {
            "name": "test_get_retval_annotation_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_method_annotation_kwonly": {
            "name": "test_get_method_annotation_kwonly",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_method_annotation_kwonly_varargs": {
            "name": "test_get_method_annotation_kwonly_varargs",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_method_annotation_var_kw": {
            "name": "test_get_method_annotation_var_kw",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_schema": {
            "name": "test_generate_stub_schema",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_config": {
            "name": "test_generate_stub_config",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_configtype": {
            "name": "test_generate_stub_configtype",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_no_class_name": {
            "name": "test_generate_stub_no_class_name",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_instance_methods": {
            "name": "test_generate_stub_instance_methods",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_generate_stub_invalid_type": {
            "name": "test_generate_stub_invalid_type",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubs.test_get_method_annotation_kwonly.meth": {
            "name": "meth",
            "location": 46,
            "return": [],
            "arguments": {
                "obj": [],
                "x": [],
                "y": []
            }
        },
        "TestStubs.test_get_method_annotation_kwonly_varargs.meth": {
            "name": "meth",
            "location": 57,
            "return": [],
            "arguments": {
                "obj": [],
                "x": [],
                "y": []
            }
        },
        "TestStubs.test_get_method_annotation_var_kw.meth": {
            "name": "meth",
            "location": 68,
            "return": [],
            "arguments": {
                "obj": [],
                "x": []
            }
        },
        "TestStubs.test_generate_stub_instance_methods.meth1": {
            "name": "meth1",
            "location": 122,
            "return": [],
            "arguments": {
                "thing": [],
                "x": []
            }
        },
        "TestStubs.test_generate_stub_instance_methods.meth2": {
            "name": "meth2",
            "location": 125,
            "return": [],
            "arguments": {
                "thing": [],
                "y": []
            }
        }
    },
    "cincoconfig-master/tests/test_support.py": {
        "TestSupportFuncs.test_generate_argparse_parser": {
            "name": "test_generate_argparse_parser",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "mock_argparse": []
            }
        },
        "TestSupportFuncs.test_get_all_fields_schema": {
            "name": "test_get_all_fields_schema",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_get_all_fields_config": {
            "name": "test_get_all_fields_config",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_make_type": {
            "name": "test_make_type",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_cmdline_args_override": {
            "name": "test_cmdline_args_override",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_cmdline_args_ocverride_single_ignore": {
            "name": "test_cmdline_args_ocverride_single_ignore",
            "location": 112,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_validator_schema": {
            "name": "test_validator_schema",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_validator_field": {
            "name": "test_validator_field",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_item_ref_path": {
            "name": "test_item_ref_path",
            "location": 145,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_get_fields_schema": {
            "name": "test_get_fields_schema",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_get_fields_config": {
            "name": "test_get_fields_config",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_get_fields_type": {
            "name": "test_get_fields_type",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_asdict": {
            "name": "test_asdict",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_asdict_virtual": {
            "name": "test_asdict_virtual",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_asdict_copy": {
            "name": "test_asdict_copy",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_asdict_list": {
            "name": "test_asdict_list",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "mock_list_asdict": []
            }
        },
        "TestSupportFuncs.test_list_asdict_nested_list": {
            "name": "test_list_asdict_nested_list",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "mock_list_asdict": []
            }
        },
        "TestSupportFuncs.test_list_asdict_nested_config": {
            "name": "test_list_asdict_nested_config",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "mock_asdict": []
            }
        },
        "TestSupportFuncs.test_list_asdict_copy": {
            "name": "test_list_asdict_copy",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_is_value_defined": {
            "name": "test_is_value_defined",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_is_value_defined_nested": {
            "name": "test_is_value_defined_nested",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_reset_value": {
            "name": "test_reset_value",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_reset_value_nested": {
            "name": "test_reset_value_nested",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSupportFuncs.test_reset_value_attribute_error": {
            "name": "test_reset_value_attribute_error",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/__init__.py": {},
    "cincoconfig-master/tests/test_fields/test_bool.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_valid_true_str": {
            "name": "test_valid_true_str",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestBoolField.test_valid_false_str": {
            "name": "test_valid_false_str",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestBoolField.test_true_int": {
            "name": "test_true_int",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_false_int": {
            "name": "test_false_int",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_true_float": {
            "name": "test_true_float",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_false_float": {
            "name": "test_false_float",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_bool": {
            "name": "test_bool",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_not_convertable": {
            "name": "test_not_convertable",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoolField.test_invalid_str": {
            "name": "test_invalid_str",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureFlagFIeld.test_enabled": {
            "name": "test_enabled",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureFlagFIeld.test_disabled": {
            "name": "test_disabled",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_bytes.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig._full_path": {
            "name": "_full_path",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_init_valid_encoding": {
            "name": "test_init_valid_encoding",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_init_invalid_encoding": {
            "name": "test_init_invalid_encoding",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_validate_str": {
            "name": "test_validate_str",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_validate_bytes": {
            "name": "test_validate_bytes",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_validate_invalid_type": {
            "name": "test_validate_invalid_type",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_basic_none": {
            "name": "test_to_basic_none",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_basic_base64": {
            "name": "test_to_basic_base64",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_basic_hex": {
            "name": "test_to_basic_hex",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_basic_invalid": {
            "name": "test_to_basic_invalid",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_none": {
            "name": "test_to_python_none",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_not_str": {
            "name": "test_to_python_not_str",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_base64_valid": {
            "name": "test_to_python_base64_valid",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_base64_invalid": {
            "name": "test_to_python_base64_invalid",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_hex_valid": {
            "name": "test_to_python_hex_valid",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_hex_invalid": {
            "name": "test_to_python_hex_invalid",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBytesField.test_to_python_invalid": {
            "name": "test_to_python_invalid",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_challenge.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig._full_path": {
            "name": "_full_path",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_str": {
            "name": "test_str",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_parse": {
            "name": "test_parse",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_parse_invalid": {
            "name": "test_parse_invalid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_challenge_success": {
            "name": "test_challenge_success",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_challenge_failed": {
            "name": "test_challenge_failed",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_create_no_salt": {
            "name": "test_create_no_salt",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_create_trunc_salt": {
            "name": "test_create_trunc_salt",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_create_short_salt": {
            "name": "test_create_short_salt",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigestValue.test_create_salt_exact": {
            "name": "test_create_salt_exact",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_valid_default": {
            "name": "test_valid_default",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_invalid_algorithm": {
            "name": "test_invalid_algorithm",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_validate_str": {
            "name": "test_validate_str",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_validate_tuple": {
            "name": "test_validate_tuple",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_validate_error": {
            "name": "test_validate_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_hash": {
            "name": "test_hash",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "create_mock": []
            }
        },
        "TestChallengeField.test_to_basic": {
            "name": "test_to_basic",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_basic_none": {
            "name": "test_to_basic_none",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_dict": {
            "name": "test_to_python_dict",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_str": {
            "name": "test_to_python_str",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_error": {
            "name": "test_to_python_error",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_invalid_salt": {
            "name": "test_to_python_invalid_salt",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_invalid_digest": {
            "name": "test_to_python_invalid_digest",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_set_default_str": {
            "name": "test_set_default_str",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "create_mock": []
            }
        },
        "TestChallengeField.test_set_default_tuple": {
            "name": "test_set_default_tuple",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_set_default_error": {
            "name": "test_set_default_error",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_set_default_none": {
            "name": "test_set_default_none",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeField.test_to_python_none": {
            "name": "test_to_python_none",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_configtype_field.py": {
        "TestConfigTypeField.test_setdefault": {
            "name": "test_setdefault",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigTypeField.test_call": {
            "name": "test_call",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_dict.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictField.test__validate_dict": {
            "name": "test__validate_dict",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictField.test__validate_non_dict": {
            "name": "test__validate_non_dict",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictField.test_required_empty": {
            "name": "test_required_empty",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_field.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "parent": [],
                "key": []
            }
        },
        "MockConfig._full_path": {
            "name": "_full_path",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.setup_method": {
            "name": "setup_method",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestBaseField.test_default_value": {
            "name": "test_default_value",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_default_callable": {
            "name": "test_default_callable",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_name": {
            "name": "test_name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setval": {
            "name": "test_setval",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_getval": {
            "name": "test_getval",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setkey": {
            "name": "test_setkey",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setdefault": {
            "name": "test_setdefault",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_to_python": {
            "name": "test_to_python",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_to_basic": {
            "name": "test_to_basic",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test__validate": {
            "name": "test__validate",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_required": {
            "name": "test_required",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_not_required": {
            "name": "test_not_required",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_validate_value": {
            "name": "test_validate_value",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_validate_validator_valid": {
            "name": "test_validate_validator_valid",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_validate_validator_invalid": {
            "name": "test_validate_validator_invalid",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_ref_path_flat": {
            "name": "test_ref_path_flat",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_ref_path_nested": {
            "name": "test_ref_path_nested",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_full_path": {
            "name": "test_full_path",
            "location": 116,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_short_help_none": {
            "name": "test_short_help_none",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_short_help_everything": {
            "name": "test_short_help_everything",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_short_help_paragraph": {
            "name": "test_short_help_paragraph",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_env_true": {
            "name": "test_env_true",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setkey_inherit_env": {
            "name": "test_setkey_inherit_env",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setkey_inherit_env_append": {
            "name": "test_setkey_inherit_env_append",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setkey_env_false": {
            "name": "test_setkey_env_false",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseField.test_setdefault_env_exists": {
            "name": "test_setdefault_env_exists",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestBaseField.test_setdefault_env_exists_valid": {
            "name": "test_setdefault_env_exists_valid",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestBaseField.test_setdefault_env_exists_invalid": {
            "name": "test_setdefault_env_exists_invalid",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestBaseField.test_setdefault_env_exists_invalid_validationerror": {
            "name": "test_setdefault_env_exists_invalid_validationerror",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestBaseField.test_setdefault_env_not_exists": {
            "name": "test_setdefault_env_not_exists",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "mock_environ_get": []
            }
        },
        "TestBaseField.test_validate_validator_invalid.inner": {
            "name": "inner",
            "location": 98,
            "return": [],
            "arguments": {
                "cfg": [],
                "value": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_filename.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestFilenameField.test_resolve_relative": {
            "name": "test_resolve_relative",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilenameField.test_absolute": {
            "name": "test_absolute",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilenameField.test_convert_win_slashes": {
            "name": "test_convert_win_slashes",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFilenameField.test_exists_true_true": {
            "name": "test_exists_true_true",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "exists": []
            }
        },
        "TestFilenameField.test_exists_true_false": {
            "name": "test_exists_true_false",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "exists": []
            }
        },
        "TestFilenameField.test_exists_false_true": {
            "name": "test_exists_false_true",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "exists": []
            }
        },
        "TestFilenameField.test_exists_false_false": {
            "name": "test_exists_false_false",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "exists": []
            }
        },
        "TestFilenameField.test_dir_true": {
            "name": "test_dir_true",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "isdir": []
            }
        },
        "TestFilenameField.test_dir_false": {
            "name": "test_dir_false",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "isdir": []
            }
        },
        "TestFilenameField.test_file_true": {
            "name": "test_file_true",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "isfile": []
            }
        },
        "TestFilenameField.test_file_false": {
            "name": "test_file_false",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "isfile": []
            }
        },
        "TestFilenameField.test_empty_not_required": {
            "name": "test_empty_not_required",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilenameField.test_empty_required": {
            "name": "test_empty_required",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_include.py": {
        "MockConfigFormat.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestIncludeField.test_combine_trees": {
            "name": "test_combine_trees",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIncludeField.test_include": {
            "name": "test_include",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "mop": []
            }
        },
        "TestIncludeField.test_include_expanduser": {
            "name": "test_include_expanduser",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "expanduser": [],
                "mop": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_instance_method.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestInstanceMethodField.setup_method": {
            "name": "setup_method",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestInstanceMethodField._meth": {
            "name": "_meth",
            "location": 17,
            "return": [
                "Tuple[(_T0, _T1, _T2, _T3)]"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "_T0"
                ],
                "x": [
                    "_T1"
                ],
                "y": [
                    "_T2"
                ],
                "z": [
                    "_T3"
                ]
            }
        },
        "TestInstanceMethodField.test_call_wrapper": {
            "name": "test_call_wrapper",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstanceMethodField.test_setval": {
            "name": "test_setval",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstanceMethodField.test_default_error": {
            "name": "test_default_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstanceMethodField.test_setdefault": {
            "name": "test_setdefault",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstanceMethodField.test_instance_method_decorator_schema": {
            "name": "test_instance_method_decorator_schema",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "mock_method_cls": []
            }
        },
        "TestInstanceMethodField.test_validate": {
            "name": "test_validate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_list.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_create": {
            "name": "test_create",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_eq_list": {
            "name": "test_eq_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_eq_proxy": {
            "name": "test_eq_proxy",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_eq_not_list": {
            "name": "test_eq_not_list",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_append": {
            "name": "test_append",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_add_list": {
            "name": "test_add_list",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_add_wrapper": {
            "name": "test_add_wrapper",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_iadd": {
            "name": "test_iadd",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_setitem": {
            "name": "test_setitem",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_setitem_slice": {
            "name": "test_setitem_slice",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_copy": {
            "name": "test_copy",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_insert": {
            "name": "test_insert",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_to_basic_schema": {
            "name": "test_to_basic_schema",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_schema_dict": {
            "name": "test_validate_schema_dict",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_schema_config": {
            "name": "test_validate_schema_config",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_schema_invalid": {
            "name": "test_validate_schema_invalid",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_extend_list": {
            "name": "test_extend_list",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_extend_proxy": {
            "name": "test_extend_proxy",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_item_valid": {
            "name": "test_validate_item_valid",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_item_error": {
            "name": "test_validate_item_error",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_item_error_friendly_name": {
            "name": "test_validate_item_error_friendly_name",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_item_validation_error": {
            "name": "test_validate_item_validation_error",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_listfield_no_field": {
            "name": "test_listfield_no_field",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_get_item_position_exists": {
            "name": "test_get_item_position_exists",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_get_item_position_not_exists": {
            "name": "test_get_item_position_not_exists",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListProxy.test_validate_not_field": {
            "name": "test_validate_not_field",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_storage_type_str": {
            "name": "test_storage_type_str",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_storage_type_custom": {
            "name": "test_storage_type_custom",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_storage_type_schema": {
            "name": "test_storage_type_schema",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_required_not_empty": {
            "name": "test_required_not_empty",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_required_empty": {
            "name": "test_required_empty",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_non_list": {
            "name": "test_non_list",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_any_validate": {
            "name": "test_any_validate",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_basic": {
            "name": "test_to_basic",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_python": {
            "name": "test_to_python",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_basic_any": {
            "name": "test_to_basic_any",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_python_any": {
            "name": "test_to_python_any",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_validate_list_proxy": {
            "name": "test_validate_list_proxy",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_default_list_wrap": {
            "name": "test_default_list_wrap",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_basic_none": {
            "name": "test_to_basic_none",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListField.test_to_basic_empty": {
            "name": "test_to_basic_empty",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_net.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4AddressField.test_valid_ipv4": {
            "name": "test_valid_ipv4",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4AddressField.test_invalid_ipv4": {
            "name": "test_invalid_ipv4",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_valid_net": {
            "name": "test_valid_net",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_invalid_net": {
            "name": "test_invalid_net",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_min_prefix_good": {
            "name": "test_min_prefix_good",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_min_prefix_bad": {
            "name": "test_min_prefix_bad",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_max_prefix_good": {
            "name": "test_max_prefix_good",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIPv4NetworkField.test_max_prefix_bad": {
            "name": "test_max_prefix_bad",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_valid_ipv4": {
            "name": "test_valid_ipv4",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_no_ipv4": {
            "name": "test_no_ipv4",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_valid_hostname_resolve": {
            "name": "test_valid_hostname_resolve",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "gethostbyname": []
            }
        },
        "TestHostnameField.test_valid_dnsname": {
            "name": "test_valid_dnsname",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_valid_netbios": {
            "name": "test_valid_netbios",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_invalid_dnsname": {
            "name": "test_invalid_dnsname",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHostnameField.test_resolve_failed": {
            "name": "test_resolve_failed",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "gethostbyname": []
            }
        },
        "TestPortField.test_port_valid": {
            "name": "test_port_valid",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_number.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_valid_int": {
            "name": "test_valid_int",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_invalid_int": {
            "name": "test_invalid_int",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_min_valid": {
            "name": "test_min_valid",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_min_invalid": {
            "name": "test_min_invalid",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_max_valid": {
            "name": "test_max_valid",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_max_invalid": {
            "name": "test_max_invalid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntField.test_non_int_convertable": {
            "name": "test_non_int_convertable",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFloatField.test_valid_float": {
            "name": "test_valid_float",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFloatField.test_invalid_float": {
            "name": "test_invalid_float",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_secure.py": {
        "StubKeyFile.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubConfig.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubConfig._full_path": {
            "name": "_full_path",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_basic_none": {
            "name": "test_to_basic_none",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_basic_empty_string": {
            "name": "test_to_basic_empty_string",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_basic": {
            "name": "test_to_basic",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_none": {
            "name": "test_to_python_none",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_empty_string": {
            "name": "test_to_python_empty_string",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_str": {
            "name": "test_to_python_str",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_dict_invalid_method": {
            "name": "test_to_python_dict_invalid_method",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_dict_invalid_ciphertext_base64": {
            "name": "test_to_python_dict_invalid_ciphertext_base64",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_dict_invalid_ciphertext": {
            "name": "test_to_python_dict_invalid_ciphertext",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_dict_invalid_ciphertext_int": {
            "name": "test_to_python_dict_invalid_ciphertext_int",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_dict_valid": {
            "name": "test_to_python_dict_valid",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecureField.test_to_python_invalid_type": {
            "name": "test_to_python_invalid_type",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_string.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfig.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MockSchema.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSchema._add_field": {
            "name": "_add_field",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "field": []
            }
        },
        "TestStringField.setup_method": {
            "name": "setup_method",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestStringField.test_invalid_case": {
            "name": "test_invalid_case",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_case_lower": {
            "name": "test_case_lower",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_case_upper": {
            "name": "test_case_upper",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_case_preserve": {
            "name": "test_case_preserve",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_min_length_valid": {
            "name": "test_min_length_valid",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_min_length_invalid": {
            "name": "test_min_length_invalid",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_max_length_valid": {
            "name": "test_max_length_valid",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_max_length_invalid": {
            "name": "test_max_length_invalid",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_regex_match": {
            "name": "test_regex_match",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_regex_no_match": {
            "name": "test_regex_no_match",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_strip_preserve": {
            "name": "test_strip_preserve",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_strip_whitespace": {
            "name": "test_strip_whitespace",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_strip_custom": {
            "name": "test_strip_custom",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_choice_valid": {
            "name": "test_choice_valid",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_choice_invalid": {
            "name": "test_choice_invalid",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_choice_lower_valid": {
            "name": "test_choice_lower_valid",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_choice_error_message_list": {
            "name": "test_choice_error_message_list",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_choice_error_message_too_many": {
            "name": "test_choice_error_message_too_many",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_non_string": {
            "name": "test_non_string",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_empty_string_requied": {
            "name": "test_empty_string_requied",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringField.test_empty_string_not_required": {
            "name": "test_empty_string_not_required",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevelField.test_default_levels": {
            "name": "test_default_levels",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevelField.test_custom_levels": {
            "name": "test_custom_levels",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevelField.test_custom_case": {
            "name": "test_custom_case",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevelField.test_custom_strip": {
            "name": "test_custom_strip",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationModeField.setup_method": {
            "name": "setup_method",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestApplicationModeField.test_default_levels": {
            "name": "test_default_levels",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationModeField.test_create_helpers": {
            "name": "test_create_helpers",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationModeField.test_call_helpers": {
            "name": "test_call_helpers",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationModeField.test_no_helpers": {
            "name": "test_no_helpers",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplicationModeField.test_invalid_mode_name": {
            "name": "test_invalid_mode_name",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestUrlField.test_valid_url": {
            "name": "test_valid_url",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlField.test_invalid_url": {
            "name": "test_invalid_url",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/test_virtual.py": {
        "MockConfig.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualField.getter": {
            "name": "getter",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "TestVirtualField.test__getval": {
            "name": "test__getval",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualField.test__setval_no_setter": {
            "name": "test__setval_no_setter",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualField.test__setval_setter": {
            "name": "test__setval_setter",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualField.test_default_error": {
            "name": "test_default_error",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualField.test_no_setdefault": {
            "name": "test_no_setdefault",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_fields/__init__.py": {},
    "cincoconfig-master/tests/test_formats/test_bson.py": {
        "TestBsonConfigFormat.test_available": {
            "name": "test_available",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBsonConfigFormat.test_not_available": {
            "name": "test_not_available",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBsonConfigFormat.test_dumps": {
            "name": "test_dumps",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBsonConfigFormat.test_loads": {
            "name": "test_loads",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_formats/test_json.py": {
        "TestJsonConfigFormat.test_dumps": {
            "name": "test_dumps",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonConfigFormat.test_loads": {
            "name": "test_loads",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonConfigFormat.test_dumps_pretty": {
            "name": "test_dumps_pretty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_formats/test_pickle.py": {
        "TestPickleConfigFormat.test_dumps": {
            "name": "test_dumps",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPickleConfigFormat.test_loads": {
            "name": "test_loads",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_formats/test_registry.py": {
        "TestFormatRegistry.setup_method": {
            "name": "setup_method",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestFormatRegistry.test_register": {
            "name": "test_register",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatRegistry.test_get": {
            "name": "test_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatRegistry.test_get_initialize": {
            "name": "test_get_initialize",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "mock_init": []
            }
        },
        "TestFormatRegistry.test_get_no_exists": {
            "name": "test_get_no_exists",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatRegistry.test_base_formats": {
            "name": "test_base_formats",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatRegistry.test_initialize_cache": {
            "name": "test_initialize_cache",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_formats/test_xml.py": {
        "TestXmlConfigFormat.test_loads": {
            "name": "test_loads",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXmlConfigFormat.test_dumps": {
            "name": "test_dumps",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXmlConfigFormat.test_loads_incorrect_root": {
            "name": "test_loads_incorrect_root",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXmlConfigFormat.test_non_basic_type": {
            "name": "test_non_basic_type",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cincoconfig-master/tests/test_formats/test_yaml.py": {
        "TestYamlConfigFormat.test_available": {
            "name": "test_available",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlConfigFormat.test_not_available": {
            "name": "test_not_available",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYamlConfigFormat.test_dumps": {
            "name": "test_dumps",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlConfigFormat.test_loads": {
            "name": "test_loads",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlConfigFormat.test_dumps_root_key": {
            "name": "test_dumps_root_key",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlConfigFormat.test_loads_root_key": {
            "name": "test_loads_root_key",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
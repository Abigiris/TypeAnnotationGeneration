{
    "classic_cs_problems_python-master/CH1_small_problems/calculating_pi.py": {
        "calculate_pi": {
            "name": "calculate_pi",
            "location": 1,
            "return": [
                "float"
            ],
            "arguments": {
                "n_terms": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib1.py": {
        "fib1": {
            "name": "fib1",
            "location": 3,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib2.py": {
        "fib2": {
            "name": "fib2",
            "location": 3,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib3.py": {
        "fib3": {
            "name": "fib3",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib4.py": {
        "fib4": {
            "name": "fib4",
            "location": 7,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib5.py": {
        "fib5": {
            "name": "fib5",
            "location": 8,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "n": [
                    "_T0@@"
                ]
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/fib6.py": {
        "fib6": {
            "name": "fib6",
            "location": 6,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/hanoi.py": {
        "hanoi": {
            "name": "hanoi",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "begin": [],
                "end": [],
                "temp": [],
                "n": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/trivial_compression.py": {
        "CompressedGene.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gene": []
            }
        },
        "CompressedGene._compress": {
            "name": "_compress",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gene": []
            }
        },
        "CompressedGene.decompress": {
            "name": "decompress",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedGene.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH1_small_problems/unbreakable_encryption.py": {
        "random_key": {
            "name": "random_key",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "length": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 12,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "original": []
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "key1": [],
                "key2": []
            }
        }
    },
    "classic_cs_problems_python-master/CH2_search_problems/dna_search.py": {
        "string_to_gene": {
            "name": "string_to_gene",
            "location": 12,
            "return": [
                "List[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "s": []
            }
        },
        "linear_contains": {
            "name": "linear_contains",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "gene": [],
                "key_codon": []
            }
        },
        "binary_contains": {
            "name": "binary_contains",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "gene": [],
                "key_codon": []
            }
        }
    },
    "classic_cs_problems_python-master/CH2_search_problems/generic_search.py": {
        "linear_contains": {
            "name": "linear_contains",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [],
                "key": []
            }
        },
        "binary_contains": {
            "name": "binary_contains",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequence": [],
                "key": []
            }
        },
        "dfs": {
            "name": "dfs",
            "location": 133,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "initial": [],
                "goal_test": [],
                "successors": []
            }
        },
        "bfs": {
            "name": "bfs",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "initial": [],
                "goal_test": [],
                "successors": []
            }
        },
        "astar": {
            "name": "astar",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "initial": [],
                "goal_test": [],
                "successors": [],
                "heuristic": []
            }
        },
        "node_to_path": {
            "name": "node_to_path",
            "location": 212,
            "return": [
                "list"
            ],
            "arguments": {
                "node": []
            }
        },
        "Comparable.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Comparable.__gt__": {
            "name": "__gt__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Comparable.__le__": {
            "name": "__le__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.empty": {
            "name": "empty",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.empty": {
            "name": "empty",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.push": {
            "name": "push",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.empty": {
            "name": "empty",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.push": {
            "name": "push",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PriorityQueue.pop": {
            "name": "pop",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "parent": [],
                "cost": [],
                "heuristic": []
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "classic_cs_problems_python-master/CH2_search_problems/maze.py": {
        "euclidean_distance": {
            "name": "euclidean_distance",
            "location": 92,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "goal": []
            }
        },
        "manhattan_distance": {
            "name": "manhattan_distance",
            "location": 101,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "goal": []
            }
        },
        "Maze.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [],
                "columns": [],
                "sparseness": [],
                "start": [],
                "goal": []
            }
        },
        "Maze._randomly_fill": {
            "name": "_randomly_fill",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [],
                "columns": [],
                "sparseness": []
            }
        },
        "Maze.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.goal_test": {
            "name": "goal_test",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ml": []
            }
        },
        "Maze.successors": {
            "name": "successors",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ml": []
            }
        },
        "Maze.mark": {
            "name": "mark",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Maze.clear": {
            "name": "clear",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "euclidean_distance.distance": {
            "name": "distance",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "ml": []
            }
        },
        "manhattan_distance.distance": {
            "name": "distance",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "ml": []
            }
        }
    },
    "classic_cs_problems_python-master/CH2_search_problems/missionaries.py": {
        "display_solution": {
            "name": "display_solution",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "MCState.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missionaries": [],
                "cannibals": [],
                "boat": []
            }
        },
        "MCState.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCState.goal_test": {
            "name": "goal_test",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCState.is_legal": {
            "name": "is_legal",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCState.successors": {
            "name": "successors",
            "location": 30,
            "return": [
                "List[MCState]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH3_constraint_satisfacation_problems/csp.py": {
        "Constraint.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": []
            }
        },
        "Constraint.satisfied": {
            "name": "satisfied",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "CSP.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [],
                "domains": []
            }
        },
        "CSP.add_constraint": {
            "name": "add_constraint",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "CSP.consistent": {
            "name": "consistent",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "assignment": []
            }
        },
        "CSP.backtracking_search": {
            "name": "backtracking_search",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        }
    },
    "classic_cs_problems_python-master/CH3_constraint_satisfacation_problems/map_coloring.py": {
        "MapColoringConstraint.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "place1": [],
                "place2": []
            }
        },
        "MapColoringConstraint.satisfied": {
            "name": "satisfied",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        }
    },
    "classic_cs_problems_python-master/CH3_constraint_satisfacation_problems/queens.py": {
        "QueensConstraint.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "QueensConstraint.satisfied": {
            "name": "satisfied",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        }
    },
    "classic_cs_problems_python-master/CH3_constraint_satisfacation_problems/send_more_money.py": {
        "SendMoreMoneyConstraint.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "SendMoreMoneyConstraint.satisfied": {
            "name": "satisfied",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        }
    },
    "classic_cs_problems_python-master/CH3_constraint_satisfacation_problems/word_search.py": {
        "generate_grid": {
            "name": "generate_grid",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "rows": [],
                "columns": []
            }
        },
        "display_grid": {
            "name": "display_grid",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "grid": []
            }
        },
        "generate_domain": {
            "name": "generate_domain",
            "location": 24,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "word": [],
                "grid": []
            }
        },
        "WordSearchConstraint.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "WordSearchConstraint.satisfied": {
            "name": "satisfied",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/dijkstra.py": {
        "dijkstra": {
            "name": "dijkstra",
            "location": 24,
            "return": [
                "Tuple[(list, dict)]"
            ],
            "arguments": {
                "wg": [],
                "root": []
            }
        },
        "distance_array_to_vertex_dict": {
            "name": "distance_array_to_vertex_dict",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "wg": [],
                "distances": []
            }
        },
        "path_dict_to_path": {
            "name": "path_dict_to_path",
            "location": 65,
            "return": [
                "list"
            ],
            "arguments": {
                "start": [],
                "end": [],
                "path_dict": []
            }
        },
        "DijkstraNode.__lt__": {
            "name": "__lt__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DijkstraNode.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/edge.py": {
        "Edge.reversed": {
            "name": "reversed",
            "location": 10,
            "return": [
                "_TEdge@@Edge@@"
            ],
            "arguments": {
                "self": [
                    "_TEdge@@Edge@@"
                ]
            }
        },
        "Edge.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": []
            }
        },
        "Graph.vertex_count": {
            "name": "vertex_count",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.edge_count": {
            "name": "edge_count",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_vertex": {
            "name": "add_vertex",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vertex": []
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": []
            }
        },
        "Graph.add_edge_by_indices": {
            "name": "add_edge_by_indices",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [],
                "v": []
            }
        },
        "Graph.add_edge_by_vertices": {
            "name": "add_edge_by_vertices",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "Graph.vertex_at": {
            "name": "vertex_at",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Graph.index_of": {
            "name": "index_of",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "vertex": []
            }
        },
        "Graph.neighbors_for_index": {
            "name": "neighbors_for_index",
            "location": 51,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Graph.neighbors_for_vertex": {
            "name": "neighbors_for_vertex",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "vertex": []
            }
        },
        "Graph.edges_for_index": {
            "name": "edges_for_index",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Graph.edges_for_vertex": {
            "name": "edges_for_vertex",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "vertex": []
            }
        },
        "Graph.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/mst.py": {
        "total_weight": {
            "name": "total_weight",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "wp": []
            }
        },
        "mst": {
            "name": "mst",
            "location": 14,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "wg": [],
                "start": []
            }
        },
        "print_weighted_path": {
            "name": "print_weighted_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "wg": [],
                "wp": []
            }
        },
        "mst.visit": {
            "name": "visit",
            "location": 21,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/priority_queue.py": {
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.empty": {
            "name": "empty",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.push": {
            "name": "push",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PriorityQueue.pop": {
            "name": "pop",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/weighted_edge.py": {
        "WeightedEdge.reversed": {
            "name": "reversed",
            "location": 10,
            "return": [
                "_TWeightedEdge@@WeightedEdge@@"
            ],
            "arguments": {
                "self": [
                    "_TWeightedEdge@@WeightedEdge@@"
                ]
            }
        },
        "WeightedEdge.__lt__": {
            "name": "__lt__",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WeightedEdge.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH4_graph_problems/weighted_graph.py": {
        "WeightedGraph.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": []
            }
        },
        "WeightedGraph.add_edge_by_indices": {
            "name": "add_edge_by_indices",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [],
                "v": [],
                "weight": []
            }
        },
        "WeightedGraph.add_edge_by_vertices": {
            "name": "add_edge_by_vertices",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [],
                "second": [],
                "weight": []
            }
        },
        "WeightedGraph.neighbors_for_index_with_weights": {
            "name": "neighbors_for_index_with_weights",
            "location": 22,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "WeightedGraph.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH5_genetic_algorithms/chromosome.py": {
        "Chromosome.fitness": {
            "name": "fitness",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chromosome.random_instance": {
            "name": "random_instance",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Chromosome.crossover": {
            "name": "crossover",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Chromosome.mutate": {
            "name": "mutate",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH5_genetic_algorithms/genetic_algorithm.py": {
        "GeneticAlgorithm.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_population": [],
                "threshold": [],
                "max_generations": [],
                "mutation_chance": [],
                "crossover_chance": [],
                "selection_type": []
            }
        },
        "GeneticAlgorithm._pick_roulette": {
            "name": "_pick_roulette",
            "location": 34,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "wheel": []
            }
        },
        "GeneticAlgorithm._pick_tournament": {
            "name": "_pick_tournament",
            "location": 38,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "num_participants": []
            }
        },
        "GeneticAlgorithm._reproduce_and_replace": {
            "name": "_reproduce_and_replace",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticAlgorithm._mutate": {
            "name": "_mutate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticAlgorithm.run": {
            "name": "run",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH5_genetic_algorithms/list_compression.py": {
        "ListCompression.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": []
            }
        },
        "ListCompression.bytes_compressed": {
            "name": "bytes_compressed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListCompression.fitness": {
            "name": "fitness",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListCompression.random_instance": {
            "name": "random_instance",
            "location": 41,
            "return": [
                "_TListCompression@@ListCompression@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TListCompression]"
                ]
            }
        },
        "ListCompression.crossover": {
            "name": "crossover",
            "location": 46,
            "return": [
                "Tuple[(ListCompression, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "_T0@@"
                ]
            }
        },
        "ListCompression.mutate": {
            "name": "mutate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListCompression.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH5_genetic_algorithms/send_more_money2.py": {
        "SendMoreMoney2.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "SendMoreMoney2.fitness": {
            "name": "fitness",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMoreMoney2.random_instance": {
            "name": "random_instance",
            "location": 29,
            "return": [
                "_TSendMoreMoney2@@SendMoreMoney2@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSendMoreMoney2]"
                ]
            }
        },
        "SendMoreMoney2.crossover": {
            "name": "crossover",
            "location": 34,
            "return": [
                "Tuple[(SendMoreMoney2, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "_T0@@"
                ]
            }
        },
        "SendMoreMoney2.mutate": {
            "name": "mutate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMoreMoney2.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH5_genetic_algorithms/simple_equation.py": {
        "SimpleEquation.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SimpleEquation.fitness": {
            "name": "fitness",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEquation.random_instance": {
            "name": "random_instance",
            "location": 18,
            "return": [
                "_TSimpleEquation@@SimpleEquation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSimpleEquation]"
                ]
            }
        },
        "SimpleEquation.crossover": {
            "name": "crossover",
            "location": 21,
            "return": [
                "Tuple[(SimpleEquation, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "_T0@@"
                ]
            }
        },
        "SimpleEquation.mutate": {
            "name": "mutate",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEquation.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH6_K-means_clustering/data_point.py": {
        "DataPoint.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": []
            }
        },
        "DataPoint.num_dimensions": {
            "name": "num_dimensions",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataPoint.distance": {
            "name": "distance",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataPoint.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataPoint.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH6_K-means_clustering/governors.py": {
        "Governor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "longitude": [],
                "age": [],
                "state": []
            }
        },
        "Governor.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH6_K-means_clustering/kmeans.py": {
        "zscores": {
            "name": "zscores",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "original": []
            }
        },
        "KMeans.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "points": []
            }
        },
        "KMeans._centroids": {
            "name": "_centroids",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KMeans._dimension_slice": {
            "name": "_dimension_slice",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "dimension": []
            }
        },
        "KMeans._zscore_normalize": {
            "name": "_zscore_normalize",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans._random_point": {
            "name": "_random_point",
            "location": 56,
            "return": [
                "data_point.DataPoint"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans._assign_clusters": {
            "name": "_assign_clusters",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans._generate_centroids": {
            "name": "_generate_centroids",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KMeans.run": {
            "name": "run",
            "location": 88,
            "return": [
                "List[KMeans.Cluster]"
            ],
            "arguments": {
                "self": [],
                "max_iterations": []
            }
        }
    },
    "classic_cs_problems_python-master/CH6_K-means_clustering/mj.py": {
        "Album.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "year": [],
                "length": [],
                "tracks": []
            }
        },
        "Album.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/iris_test.py": {
        "iris_interpret_output": {
            "name": "iris_interpret_output",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "output": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/layer.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [],
                "num_neurons": [],
                "learning_rate": [],
                "activation_function": [],
                "derivative_activation_function": []
            }
        },
        "Layer.outputs": {
            "name": "outputs",
            "location": 33,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "_T0@@"
                ]
            }
        },
        "Layer.calculate_deltas_for_output_layer": {
            "name": "calculate_deltas_for_output_layer",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "Layer.calculate_deltas_for_hidden_layer": {
            "name": "calculate_deltas_for_hidden_layer",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_layer": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/network.py": {
        "Network.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer_structure": [],
                "learning_rate": [],
                "activation_function": [],
                "derivative_activation_function": []
            }
        },
        "Network.outputs": {
            "name": "outputs",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "Network.backpropagate": {
            "name": "backpropagate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "Network.update_weights": {
            "name": "update_weights",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.train": {
            "name": "train",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "expecteds": []
            }
        },
        "Network.validate": {
            "name": "validate",
            "location": 83,
            "return": [
                "Tuple[(int, int, float)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "expecteds": [],
                "interpret_output": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/neuron.py": {
        "Neuron.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [],
                "learning_rate": [],
                "activation_function": [],
                "derivative_activation_function": []
            }
        },
        "Neuron.output": {
            "name": "output",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/util.py": {
        "dot_product": {
            "name": "dot_product",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "derivative_sigmoid": {
            "name": "derivative_sigmoid",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "normalize_by_feature_scaling": {
            "name": "normalize_by_feature_scaling",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": []
            }
        }
    },
    "classic_cs_problems_python-master/CH7_neural_network/wine_test.py": {
        "wine_interpret_output": {
            "name": "wine_interpret_output",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "output": []
            }
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/board.py": {
        "Piece.opposite": {
            "name": "opposite",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.turn": {
            "name": "turn",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.move": {
            "name": "move",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "Board.legal_moves": {
            "name": "legal_moves",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.is_win": {
            "name": "is_win",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.is_draw": {
            "name": "is_draw",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.evaluate": {
            "name": "evaluate",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "player": []
            }
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/connectfour.py": {
        "generate_segments": {
            "name": "generate_segments",
            "location": 25,
            "return": [
                "List[List[Tuple[(int, int)]]]"
            ],
            "arguments": {
                "num_columns": [],
                "num_rows": [],
                "segment_length": []
            }
        },
        "C4Piece.opposite": {
            "name": "opposite",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C4Piece.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "C4Board.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "turn": []
            }
        },
        "C4Board.turn": {
            "name": "turn",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C4Board.move": {
            "name": "move",
            "location": 112,
            "return": [
                "_TC4Board@@C4Board@@"
            ],
            "arguments": {
                "self": [
                    "_TC4Board@@C4Board@@"
                ],
                "location": []
            }
        },
        "C4Board.legal_moves": {
            "name": "legal_moves",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C4Board._count_segment": {
            "name": "_count_segment",
            "location": 126,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "segment": []
            }
        },
        "C4Board.is_win": {
            "name": "is_win",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C4Board._evaluate_segment": {
            "name": "_evaluate_segment",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "segment": [],
                "player": []
            }
        },
        "C4Board.evaluate": {
            "name": "evaluate",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "C4Board.__repr__": {
            "name": "__repr__",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "C4Board.Column.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C4Board.Column.full": {
            "name": "full",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C4Board.Column.push": {
            "name": "push",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "C4Board.Column.__getitem__": {
            "name": "__getitem__",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "C4Board.Column.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "C4Board.Column.copy": {
            "name": "copy",
            "location": 92,
            "return": [
                "C4Board.Column"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/connectfour_ai.py": {
        "get_player_move": {
            "name": "get_player_move",
            "location": 8,
            "return": [
                "_board.Move"
            ],
            "arguments": {}
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/minimax.py": {
        "minimax": {
            "name": "minimax",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "board": [],
                "maximizing": [],
                "original_player": [],
                "max_depth": []
            }
        },
        "find_best_move": {
            "name": "find_best_move",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "board": [],
                "max_depth": []
            }
        },
        "alphabeta": {
            "name": "alphabeta",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "board": [],
                "maximizing": [],
                "original_player": [],
                "max_depth": [],
                "alpha": [],
                "beta": []
            }
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/tictactoe.py": {
        "TTTPiece.opposite": {
            "name": "opposite",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTTPiece.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTTBoard.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "turn": []
            }
        },
        "TTTBoard.turn": {
            "name": "turn",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTTBoard.move": {
            "name": "move",
            "location": 36,
            "return": [
                "_TTTTBoard@@TTTBoard@@"
            ],
            "arguments": {
                "self": [
                    "_TTTTBoard@@TTTBoard@@"
                ],
                "location": []
            }
        },
        "TTTBoard.legal_moves": {
            "name": "legal_moves",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTTBoard.is_win": {
            "name": "is_win",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTTBoard.evaluate": {
            "name": "evaluate",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "TTTBoard.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/tictactoe_ai.py": {
        "get_player_move": {
            "name": "get_player_move",
            "location": 8,
            "return": [
                "_board.Move"
            ],
            "arguments": {}
        }
    },
    "classic_cs_problems_python-master/CH8_adversarial_search/tictactoe_tests.py": {
        "TTTMinimAxTestCase.test_easy_poisition": {
            "name": "test_easy_poisition",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTTMinimAxTestCase.test_block_position": {
            "name": "test_block_position",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTTMinimAxTestCase.test_hard_position": {
            "name": "test_hard_position",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic_cs_problems_python-master/CH9_miscellaneous_problems/knapsack.py": {
        "knapsack": {
            "name": "knapsack",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [],
                "max_capacity": []
            }
        }
    },
    "classic_cs_problems_python-master/CH9_miscellaneous_problems/phone_number_mnemonics.py": {
        "possible_mnemonics": {
            "name": "possible_mnemonics",
            "location": 16,
            "return": [
                "itertools.product"
            ],
            "arguments": {
                "phone_number": []
            }
        }
    },
    "classic_cs_problems_python-master/CH9_miscellaneous_problems/tsp.py": {}
}
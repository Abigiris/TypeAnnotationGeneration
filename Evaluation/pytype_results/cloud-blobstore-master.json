{
    "cloud-blobstore-master/setup.py": {},
    "cloud-blobstore-master/cloud_blobstore/gs.py": {
        "CatchTimeouts": {
            "name": "CatchTimeouts",
            "location": 14,
            "return": [
                "Callable"
            ],
            "arguments": {
                "meth": []
            }
        },
        "CatchTimeouts.wrapped": {
            "name": "wrapped",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "GSPagedIter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_obj": []
            }
        },
        "GSPagedIter.get_api_response": {
            "name": "get_api_response",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "next_token": []
            }
        },
        "GSPagedIter.get_listing_from_response": {
            "name": "get_listing_from_response",
            "location": 60,
            "return": [
                "Generator[(Tuple[(Any, dict)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "GSPagedIter.get_next_token_from_response": {
            "name": "get_next_token_from_response",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "GSBlobStore.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gcp_client": []
            }
        },
        "GSBlobStore.compute_cloud_checksum": {
            "name": "compute_cloud_checksum",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "blob_obj": []
            }
        },
        "GSBlobStore.from_auth_credentials": {
            "name": "from_auth_credentials",
            "location": 84,
            "return": [
                "_TGSBlobStore"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGSBlobStore]"
                ],
                "json_keyfile_path": [
                    "str"
                ]
            }
        },
        "GSBlobStore._ensure_bucket_loaded": {
            "name": "_ensure_bucket_loaded",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "GSBlobStore._get_blob_obj": {
            "name": "_get_blob_obj",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "GSBlobStore.list": {
            "name": "list",
            "location": 104,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "prefix": [],
                "delimiter": []
            }
        },
        "GSBlobStore.list_v2": {
            "name": "list_v2",
            "location": 124,
            "return": [
                "Iterable[Tuple[(str, dict)]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ],
                "start_after_key": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "k_page_max": [
                    "int"
                ]
            }
        },
        "GSBlobStore.generate_presigned_GET_url": {
            "name": "generate_presigned_GET_url",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": [],
                "response_content_disposition": []
            }
        },
        "GSBlobStore.upload_file_handle": {
            "name": "upload_file_handle",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": [],
                "src_file_handle": [],
                "content_type": [],
                "metadata": []
            }
        },
        "GSBlobStore.delete": {
            "name": "delete",
            "location": 172,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get": {
            "name": "get",
            "location": 184,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_cloud_checksum": {
            "name": "get_cloud_checksum",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_content_type": {
            "name": "get_content_type",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_copy_token": {
            "name": "get_copy_token",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": [],
                "cloud_checksum": []
            }
        },
        "GSBlobStore.get_creation_date": {
            "name": "get_creation_date",
            "location": 251,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_last_modified_date": {
            "name": "get_last_modified_date",
            "location": 266,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_user_metadata": {
            "name": "get_user_metadata",
            "location": 281,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.get_size": {
            "name": "get_size",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "GSBlobStore.copy": {
            "name": "copy",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_bucket": [],
                "src_key": [],
                "dst_bucket": [],
                "dst_key": [],
                "copy_token": []
            }
        },
        "GSBlobStore.check_bucket_exists": {
            "name": "check_bucket_exists",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket": []
            }
        }
    },
    "cloud-blobstore-master/cloud_blobstore/s3.py": {
        "CatchTimeouts": {
            "name": "CatchTimeouts",
            "location": 23,
            "return": [
                "Callable"
            ],
            "arguments": {
                "meth": []
            }
        },
        "CatchTimeouts.wrapped": {
            "name": "wrapped",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "S3PagedIter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "S3PagedIter.get_api_response": {
            "name": "get_api_response",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "next_token": []
            }
        },
        "S3PagedIter.get_listing_from_response": {
            "name": "get_listing_from_response",
            "location": 70,
            "return": [
                "Generator[(Tuple[(Any, dict)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "S3PagedIter.get_next_token_from_response": {
            "name": "get_next_token_from_response",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "S3BlobStore.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_client": []
            }
        },
        "S3BlobStore.compute_cloud_checksum": {
            "name": "compute_cloud_checksum",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "metadata": []
            }
        },
        "S3BlobStore.from_environment": {
            "name": "from_environment",
            "location": 104,
            "return": [
                "_TS3BlobStore"
            ],
            "arguments": {
                "cls": [
                    "Type[_TS3BlobStore]"
                ]
            }
        },
        "S3BlobStore.list": {
            "name": "list",
            "location": 115,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "S3BlobStore.list_v2": {
            "name": "list_v2",
            "location": 136,
            "return": [
                "Iterable[Tuple[(str, dict)]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ],
                "start_after_key": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "k_page_max": [
                    "int"
                ]
            }
        },
        "S3BlobStore.generate_presigned_GET_url": {
            "name": "generate_presigned_GET_url",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "response_content_disposition": [
                    "str"
                ]
            }
        },
        "S3BlobStore._generate_presigned_url": {
            "name": "_generate_presigned_url",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "S3BlobStore.upload_file_handle": {
            "name": "upload_file_handle",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": [],
                "src_file_handle": [],
                "content_type": [],
                "metadata": []
            }
        },
        "S3BlobStore.delete": {
            "name": "delete",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get": {
            "name": "get",
            "location": 212,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "S3BlobStore.get_all_metadata": {
            "name": "get_all_metadata",
            "location": 232,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "S3BlobStore.get_content_type": {
            "name": "get_content_type",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get_copy_token": {
            "name": "get_copy_token",
            "location": 269,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "cloud_checksum": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get_cloud_checksum": {
            "name": "get_cloud_checksum",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get_creation_date": {
            "name": "get_creation_date",
            "location": 301,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "S3BlobStore.get_last_modified_date": {
            "name": "get_last_modified_date",
            "location": 317,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "S3BlobStore.get_user_metadata": {
            "name": "get_user_metadata",
            "location": 332,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "bucket": [],
                "key": []
            }
        },
        "S3BlobStore.copy": {
            "name": "copy",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_bucket": [],
                "src_key": [],
                "dst_bucket": [],
                "dst_key": [],
                "copy_token": []
            }
        },
        "S3BlobStore.get_size": {
            "name": "get_size",
            "location": 393,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "S3BlobStore.find_next_missing_parts": {
            "name": "find_next_missing_parts",
            "location": 413,
            "return": [
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "upload_id": [
                    "str"
                ],
                "part_count": [
                    "int"
                ],
                "search_start": [
                    "int"
                ],
                "return_count": [
                    "int"
                ]
            }
        },
        "S3BlobStore.check_bucket_exists": {
            "name": "check_bucket_exists",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket": []
            }
        },
        "S3BlobStore.get_bucket_region": {
            "name": "get_bucket_region",
            "location": 478,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": []
            }
        }
    },
    "cloud-blobstore-master/cloud_blobstore/__init__.py": {
        "PagedIter.get_api_response": {
            "name": "get_api_response",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "next_token": []
            }
        },
        "PagedIter.get_listing_from_response": {
            "name": "get_listing_from_response",
            "location": 33,
            "return": [
                "Iterable[Tuple[(str, dict)]]"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "PagedIter.get_next_token_from_response": {
            "name": "get_next_token_from_response",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "PagedIter.__iter__": {
            "name": "__iter__",
            "location": 47,
            "return": [
                "Generator[(nothing, Any, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStore.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStore.list": {
            "name": "list",
            "location": 93,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "BlobStore.list_v2": {
            "name": "list_v2",
            "location": 105,
            "return": [
                "Iterable[Tuple[(str, dict)]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ],
                "start_after_key": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "k_page_max": [
                    "int"
                ]
            }
        },
        "BlobStore.generate_presigned_GET_url": {
            "name": "generate_presigned_GET_url",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.upload_file_handle": {
            "name": "upload_file_handle",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "src_file_handle": [
                    "BinaryIO"
                ],
                "content_type": [
                    "str"
                ],
                "metadata": [
                    "dict"
                ]
            }
        },
        "BlobStore.delete": {
            "name": "delete",
            "location": 146,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get": {
            "name": "get",
            "location": 153,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_cloud_checksum": {
            "name": "get_cloud_checksum",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_content_type": {
            "name": "get_content_type",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_copy_token": {
            "name": "get_copy_token",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "cloud_checksum": [
                    "str"
                ]
            }
        },
        "BlobStore.get_creation_date": {
            "name": "get_creation_date",
            "location": 206,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_last_modified_date": {
            "name": "get_last_modified_date",
            "location": 219,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_user_metadata": {
            "name": "get_user_metadata",
            "location": 232,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.get_size": {
            "name": "get_size",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BlobStore.copy": {
            "name": "copy",
            "location": 260,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "src_bucket": [
                    "str"
                ],
                "src_key": [
                    "str"
                ],
                "dst_bucket": [
                    "str"
                ],
                "dst_key": [
                    "str"
                ],
                "copy_token": []
            }
        },
        "BlobStore.check_bucket_exists": {
            "name": "check_bucket_exists",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "BlobStore.get_bucket_region": {
            "name": "get_bucket_region",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": []
            }
        }
    },
    "cloud-blobstore-master/scripts/deploy_gcf.py": {},
    "cloud-blobstore-master/scripts/find_missing_wheels.py": {
        "build_wheel": {
            "name": "build_wheel",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "wheel_identifier": [],
                "wheels_dir": []
            }
        }
    },
    "cloud-blobstore-master/scripts/get_all_dss_chunked_task_clients.py": {},
    "cloud-blobstore-master/tests/blobstore_common_tests.py": {
        "BlobStoreTests.test_get_metadata": {
            "name": "test_get_metadata",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.test_get_content_type": {
            "name": "test_get_content_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.test_get_last_modified_date": {
            "name": "test_get_last_modified_date",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testList": {
            "name": "testList",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testListV2": {
            "name": "testListV2",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testListV2Continuation": {
            "name": "testListV2Continuation",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests._testListV2Continuation": {
            "name": "_testListV2Continuation",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_size": [],
                "break_size": []
            }
        },
        "BlobStoreTests.testGetPresignedUrl": {
            "name": "testGetPresignedUrl",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testUploadFileHandle": {
            "name": "testUploadFileHandle",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testGet": {
            "name": "testGet",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testGetSize": {
            "name": "testGetSize",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testContentDisposition": {
            "name": "testContentDisposition",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testCopy": {
            "name": "testCopy",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testCopyTokenMatching": {
            "name": "testCopyTokenMatching",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testCopyTokenNotMatching": {
            "name": "testCopyTokenNotMatching",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.testDelete": {
            "name": "testDelete",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStoreTests.test_check_bucket_exists": {
            "name": "test_check_bucket_exists",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloud-blobstore-master/tests/test_gsblobstore.py": {
        "TestGSBlobStore.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.test_get_checksum": {
            "name": "test_get_checksum",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.test_get_creation_date": {
            "name": "test_get_creation_date",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.test_read_timeout": {
            "name": "test_read_timeout",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore.test_get_blob_obj": {
            "name": "test_get_blob_obj",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGSBlobStore._get_handle_with_timeouts": {
            "name": "_get_handle_with_timeouts",
            "location": 92,
            "return": [
                "cloud_blobstore.gs.GSBlobStore"
            ],
            "arguments": {
                "self": [],
                "connect_timeout": [],
                "read_timeout": []
            }
        },
        "TestGSBlobStore._get_handle_with_timeouts.Session.request": {
            "name": "request",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cloud-blobstore-master/tests/test_s3blobstore.py": {
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "TestS3BlobStore.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_get_checksum": {
            "name": "test_get_checksum",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_get_creation_date": {
            "name": "test_get_creation_date",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.find_next_missing_parts_test_case": {
            "name": "find_next_missing_parts_test_case",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "handle": [],
                "parts_to_upload": []
            }
        },
        "TestS3BlobStore.test_find_next_missing_parts_simple": {
            "name": "test_find_next_missing_parts_simple",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_find_next_missing_parts_multiple_requests": {
            "name": "test_find_next_missing_parts_multiple_requests",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_get_bucket_region": {
            "name": "test_get_bucket_region",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_read_timeout": {
            "name": "test_read_timeout",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3BlobStore.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyConnectServer.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyConnectServer.server_activate": {
            "name": "server_activate",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyConnectServer.start": {
            "name": "start",
            "location": 252,
            "return": [
                "Type[ProxyConnectServer]"
            ],
            "arguments": {
                "cls": [],
                "read_delay": []
            }
        },
        "ProxyConnectServer.close": {
            "name": "close",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ProxyConnectServer.start.eternity": {
            "name": "eternity",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "ProxyConnectServer.start.LazyRequestHandler.do_CONNECT": {
            "name": "do_CONNECT",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cloud-blobstore-master/tests/fixtures/cloud_uploader.py": {
        "get_s3_chunk_size": {
            "name": "get_s3_chunk_size",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "filesize": [
                    "int"
                ]
            }
        },
        "Uploader.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_root": [
                    "str"
                ]
            }
        },
        "Uploader.reset": {
            "name": "reset",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uploader.upload_file": {
            "name": "upload_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "remote_path": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "metadata_keys": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "S3Uploader.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_root": [
                    "str"
                ],
                "bucket": [
                    "str"
                ]
            }
        },
        "S3Uploader.reset": {
            "name": "reset",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Uploader.upload_file": {
            "name": "upload_file",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "remote_path": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "metadata_keys": [
                    "Dict[(str, str)]"
                ],
                "tags": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "GSUploader.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_root": [
                    "str"
                ],
                "bucket_name": [
                    "str"
                ]
            }
        },
        "GSUploader.reset": {
            "name": "reset",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSUploader.upload_file": {
            "name": "upload_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "remote_path": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "metadata_keys": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "cloud-blobstore-master/tests/fixtures/populate.py": {},
    "cloud-blobstore-master/tests/fixtures/populate_lib.py": {
        "upload": {
            "name": "upload",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "uploader": []
            }
        },
        "populate": {
            "name": "populate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_bucket": [
                    "Optional[str]"
                ],
                "gs_bucket": [
                    "Optional[str]"
                ]
            }
        }
    },
    "cloud-blobstore-master/tests/fixtures/__init__.py": {},
    "cloud-blobstore-master/tests/infra/server.py": {
        "SilentHandler.log_message": {
            "name": "log_message",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.start": {
            "name": "start",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.run": {
            "name": "run",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer._make_call": {
            "name": "_make_call",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path": []
            }
        },
        "ThreadedLocalServer.__getattr__": {
            "name": "__getattr__",
            "location": 61,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ThreadedLocalServer.shutdown": {
            "name": "shutdown",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.__getattr__.result": {
            "name": "result",
            "location": 68,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "cloud-blobstore-master/tests/infra/__init__.py": {
        "get_env": {
            "name": "get_env",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "varname": []
            }
        },
        "generate_test_key": {
            "name": "generate_test_key",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    }
}
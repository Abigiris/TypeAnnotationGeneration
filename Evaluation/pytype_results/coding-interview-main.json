{
    "coding-interview-main/problems/leetcode-1-100/002-add-two-numbers/add_two_nums.py": {
        "add_two_nums": {
            "name": "add_two_nums",
            "location": 78,
            "return": [],
            "arguments": {
                "l1": [],
                "l2": []
            }
        },
        "ListNode.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ListNode.make_list": {
            "name": "make_list",
            "location": 12,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "ListNode.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ListNode._compare": {
            "name": "_compare",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/002-add-two-numbers/test.py": {
        "TestListNode.test_not_equal": {
            "name": "test_not_equal",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListNode.test_equal": {
            "name": "test_equal",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestListNode.test_equal_int": {
            "name": "test_equal_int",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddTwoNumbers.test_same_length": {
            "name": "test_same_length",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddTwoNumbers.test_diff_length": {
            "name": "test_diff_length",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddTwoNumbers.test_overflow": {
            "name": "test_overflow",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/003-longest-substring-without-repeating-chars/longest_subs.py": {
        "longest_subs": {
            "name": "longest_subs",
            "location": 4,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/003-longest-substring-without-repeating-chars/test.py": {
        "TestLongestSubstringWithoutRepeatingChars.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLongestSubstringWithoutRepeatingChars.test_empty": {
            "name": "test_empty",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/004-median-of-2-sorted-arrays/find_median.py": {
        "find_median": {
            "name": "find_median",
            "location": 4,
            "return": [],
            "arguments": {
                "nums1": [],
                "nums2": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/004-median-of-2-sorted-arrays/test.py": {
        "FindMedianOfTwoArraysTest.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindMedianOfTwoArraysTest.test_diff_len": {
            "name": "test_diff_len",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindMedianOfTwoArraysTest.test_neg": {
            "name": "test_neg",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindMedianOfTwoArraysTest.test_empty": {
            "name": "test_empty",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/005-longest-palindromic-substring/find_palindromic_substring.py": {
        "find_palindromic_substring": {
            "name": "find_palindromic_substring",
            "location": 1,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/005-longest-palindromic-substring/test.py": {
        "FindLongestPalindromicSubstringTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindLongestPalindromicSubstringTests.test_simple": {
            "name": "test_simple",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FindLongestPalindromicSubstringTests.test_nested": {
            "name": "test_nested",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/006-zigzag-conversion/convert.py": {
        "convert": {
            "name": "convert",
            "location": 1,
            "return": [],
            "arguments": {
                "s": [],
                "numRows": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/006-zigzag-conversion/test.py": {
        "ZigZagConversionTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZigZagConversionTests.test_single_row": {
            "name": "test_single_row",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZigZagConversionTests.test_two_rows": {
            "name": "test_two_rows",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZigZagConversionTests.test_empty": {
            "name": "test_empty",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/007-reverse-integer/reverse.py": {
        "reverse": {
            "name": "reverse",
            "location": 1,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/007-reverse-integer/test.py": {
        "ReverseIntegerTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseIntegerTests.test_10s": {
            "name": "test_10s",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseIntegerTests.test_overflow": {
            "name": "test_overflow",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/008-string-to-int/atoi.py": {
        "my_atoi": {
            "name": "my_atoi",
            "location": 1,
            "return": [],
            "arguments": {
                "str": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/008-string-to-int/test.py": {
        "StringToIntegerAtolTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringToIntegerAtolTests.test_decimal": {
            "name": "test_decimal",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringToIntegerAtolTests.test_sign": {
            "name": "test_sign",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringToIntegerAtolTests.test_whitespace": {
            "name": "test_whitespace",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/009-palindrome-number/is_palindrome.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 1,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/009-palindrome-number/test.py": {
        "PalindromeNumberTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PalindromeNumberTests.test_even_palindrome": {
            "name": "test_even_palindrome",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PalindromeNumberTests.test_zero": {
            "name": "test_zero",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/012-int-to-romans/convert.py": {
        "convert": {
            "name": "convert",
            "location": 1,
            "return": [],
            "arguments": {
                "num": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/012-int-to-romans/test.py": {
        "IntToRomansTest.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntToRomansTest.test_edge": {
            "name": "test_edge",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/013-romans-to-int/convert.py": {
        "convert": {
            "name": "convert",
            "location": 1,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "coding-interview-main/problems/leetcode-1-100/013-romans-to-int/test.py": {
        "RomansToInteger.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RomansToInteger.test_edge": {
            "name": "test_edge",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "coding-interview-main/problems/others/container-most-water/max_area.py": {
        "max_area": {
            "name": "max_area",
            "location": 4,
            "return": [],
            "arguments": {
                "height": []
            }
        }
    },
    "coding-interview-main/problems/others/container-most-water/test.py": {
        "MaxAreaTests.test_given": {
            "name": "test_given",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}